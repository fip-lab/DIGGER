[
    {
        "task": "heal-old-man",
        "step": [
            "go north npc parkinglot park",
            "go south npc park church",
            "get npc church pot",
            "go north npc church park",
            "collect_rain_water npc park pot water",
            "go east npc park store",
            "get npc store bandage",
            "boil_water npc brickhouse water pot",
            "clean_others_wound npc old_man water bandage"
        ],
        "desc": [
            "Purify any water you drink that isn\u2019t from a sealed bottle. A waterborne illness can be life-threatening in a survival situation. If need to use any unbottled water for drinking, always purify it first. The most common method is boiling the water for 1 minute to kill any pathogens. Then filter out larger objects by pouring the water through a fine net or cloth.",
            "Eat as healthy as you can. This isn\u2019t always possible and you have to survive on whatever food you can find. But if at all possible, keep your health up with nutritious food. A steady supply of vitamins, minerals, antioxidants, and fatty acids will help keep your immune system up and fight off sickness.",
            "Loot supplies if you have no other choice. Unfortunately, people sometimes have to do desperate things to survive. If you come across supplies or stores that no one is watching or look abandoned, then take everything you need. This might be ethically wrong, but you and your family have to survive."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action barter_food_for_healing ; get food in exchange for healing.\n      :parameters (?p - player ?p_inj - player ?water - water ?bandage - bandage ?food - food ?l -location) \n      :precondition (and (inventory ?p ?water) (inventory ?p ?bandage) (is_injured ?p_inj) (at ?p ?l) (at ?p_inj ?l))\n      :effect (and (not (is_injured ?p_inj)) (gettable ?food)  )\n   )\n\n   \n)",
            "(:action gofish \n      :parameters (?p - player ?l - location ?fp - fishingpole ?f - fish)\n      :precondition (and (at ?p ?l) (inventory ?p ?fp) (haslake ?l) (at ?f ?l))\n      :effect (and (gettable ?f) )\n   )",
            "(:action clean_others_wound ; heal injury.\n      :parameters (?p - player ?p_inj - player ?water - water ?bandage - bandage) \n      :precondition (and (inventory ?p ?water) (treated ?water) (inventory ?p ?bandage) (is_injured ?p_inj))\n      :effect (and (not (is_injured ?p_inj)) (not (inventory ?p ?water)) (not (inventory ?p ?bandage)) )\n   )",
            "(:action collect_rain_water ; collect rain water to be treated.\n      :parameters (?p - player ?loc - location ?pot - pot ?water - water) \n      :precondition (and (inventory ?p ?pot) (at ?p ?loc) (outdoors ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get\n      :parameters (?p - player ?l - location ?i - item)\n      :precondition (and (at ?p ?l) (at ?i ?l) (gettable ?i))\n      :effect (and (not (at ?i ?l)) (inventory ?p ?i))\n   )",
            "(:action boil_water ; boil water that has not been treated.\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot) \n      :precondition (and (inventory ?p ?water) (inventory ?p ?pot) (not (treated ?water)))\n      :effect (and (treated ?water))\n   )",
            "(:action break_car_window ; steal food from car.\n      :parameters (?p - player ?car - car ?rock - rock ?item - item) \n      :precondition (and (at ?p ?car) (inventory ?p ?rock) (has_windows ?car) (at ?item ?car))\n      :effect (and (gettable ?item) (not (inventory ?p ?rock)) (not (has_windows ?car)))\n   )"
        ]
    },
    {
        "task": "find-shelter",
        "step": [
            "go north npc parkinglot park",
            "go west npc park car",
            "go north npc car stonehouse",
            "find_shelter npc stonehouse"
        ],
        "desc": [
            "Find a strong, brick building with a basement for shelter. These buildings types can withstand the most damage and remain standing. Look especially for a building with a basement. This provides added protection and a hiding place if you have to stay out of sight. Search your area for suitable buildings like these and move into one as soon as possible."
        ],
        "action": [
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action gofish \n      :parameters (?p - player ?l - location ?fp - fishingpole ?f - fish)\n      :precondition (and (at ?p ?l) (inventory ?p ?fp) (haslake ?l) (at ?f ?l))\n      :effect (and (gettable ?f) )\n   )",
            "(:action find_shelter \n      :parameters (?p - player ?l - location)\n      :precondition (and (at ?p ?l) (has_basement ?l) (not (is_occupied ?l)) )\n      :effect (and (in_shelter ?p))\n   )"
        ]
    },
    {
        "task": "fill-inventory",
        "step": [
            "go south npc parkinglot pond",
            "get_water npc pond water",
            "go north npc pond parkinglot",
            "go north npc parkinglot park",
            "go east npc park store",
            "get npc store bandage",
            "go west npc store park",
            "go west npc park car",
            "go west npc car brickhouse",
            "loot_shelter npc brickhouse food"
        ],
        "desc": [
            "Learn basic first-aid to treat minor injuries. Injuries are unfortunately inevitable, and they can range from minor to serious. Develop at least a basic knowledge of first aid to treat the injuries you or a partner may encounter. When searching for supplies, take any first aid gear you may find and build a basic first aid kit.",
            "Purify any water you drink that isn\u2019t from a sealed bottle. A waterborne illness can be life-threatening in a survival situation. If need to use any unbottled water for drinking, always purify it first. The most common method is boiling the water for 1 minute to kill any pathogens. Then filter out larger objects by pouring the water through a fine net or cloth."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action barter_food_for_healing ; get food in exchange for healing.\n      :parameters (?p - player ?p_inj - player ?water - water ?bandage - bandage ?food - food ?l -location) \n      :precondition (and (inventory ?p ?water) (inventory ?p ?bandage) (is_injured ?p_inj) (at ?p ?l) (at ?p_inj ?l))\n      :effect (and (not (is_injured ?p_inj)) (gettable ?food)  )\n   )\n\n   \n)",
            "(:action gofish \n      :parameters (?p - player ?l - location ?fp - fishingpole ?f - fish)\n      :precondition (and (at ?p ?l) (inventory ?p ?fp) (haslake ?l) (at ?f ?l))\n      :effect (and (gettable ?f) )\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get\n      :parameters (?p - player ?l - location ?i - item)\n      :precondition (and (at ?p ?l) (at ?i ?l) (gettable ?i))\n      :effect (and (not (at ?i ?l)) (inventory ?p ?i))\n   )",
            "(:action loot_shelter ; steal food from location that is occupied.\n      :parameters (?p - player ?loc - location ?food - food) \n      :precondition (and (at ?food ?loc) (at ?p ?loc) (is_occupied ?loc))\n      :effect (and (inventory ?p ?food) (not (at ?food ?loc)))\n   )",
            "(:action break_car_window ; steal food from car.\n      :parameters (?p - player ?car - car ?rock - rock ?item - item) \n      :precondition (and (at ?p ?car) (inventory ?p ?rock) (has_windows ?car) (at ?item ?car))\n      :effect (and (gettable ?item) (not (inventory ?p ?rock)) (not (has_windows ?car)))\n   )"
        ]
    },
    {
        "task": "3-decorate",
        "step": [
            "go south npc bedroom closet",
            "get lantern npc closet",
            "get balloon npc closet",
            "go north npc closet bedroom",
            "go west npc bedroom livingroom",
            "turn_on_tv npc livingroom",
            "hang_lantern npc",
            "blow_balloon npc"
        ],
        "desc": [
            "Put out anime balloons. Draw anime faces on balloons. Alternately, you can call local party supply stores to see if they have any relevant balloons. A third option is to purchase anime balloons online. You can have the balloons filled with helium, or blow them up yourself and place them around.",
            "Hang paper lanterns. Buy paper lanterns, in the color of your party theme, at a party supply store or online. You can also make paper lanterns using tissue paper and bendable metal wire.",
            "Ideas for main dishes include teriyaki meat or salmon, and stir fry with chicken or beef, noodles, vegetables, and toasted sesame seed sauce."
        ],
        "action": [
            "(:action hang_lantern\n    :parameters (?p - player)\n    :precondition (and (inventory ?p lantern))\n    :effect (and (hung lantern) (not (inventory ?p lantern)))\n  )",
            "(:action turn_on_tv\n    :parameters (?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at tv ?l))\n    :effect (on tv)\n  )\n)",
            "(:action blow_balloon\n    :parameters (?p - player)\n    :precondition (and (inventory ?p balloon))\n    :effect (and (inflated balloon) (not (inventory ?p balloon)))\n  )",
            "(:action get\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at ?obj ?l))\n    :effect (and (inventory ?p ?obj) (not (at ?obj ?l)))\n  )",
            "(:action get_beer\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_fridge ?l) (at ?p ?l))\n    :effect (and (inventory ?p beer) (opened beer))\n  )",
            "(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )"
        ]
    },
    {
        "task": "1-cook-food",
        "step": [
            "go west npc bedroom livingroom",
            "go west npc livingroom kitchen",
            "cook npc kitchen clams",
            "cook npc kitchen soup",
            "cook npc kitchen stirfry",
            "cook npc kitchen sushi",
            "cook npc kitchen teriyaki",
            "go east npc kitchen livingroom",
            "drop teriyaki npc livingroom",
            "drop stirfry npc livingroom",
            "drop soup npc livingroom",
            "drop sushi npc livingroom",
            "drop clams npc livingroom"
        ],
        "desc": [
            "Serve beverages. There are various Japanese-themed drinks you can serve at your party. If it\u2019s a kid\u2019s party, you\u2019ll of course want to stick to non-alcoholic options. If it\u2019s an adult party, you may want to include both alcoholic and non-alcoholic beverage choices."
        ],
        "action": [
            "(:action cook\n    :parameters (?p - player ?l - location ?f - food)\n    :precondition (and (has_kitchen ?l) (at ?p ?l))\n    :effect (inventory ?p ?f)\n  )",
            "(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action drop\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (inventory ?p ?obj))\n    :effect (and (at ?obj ?l) (not (inventory ?p ?obj)))\n  )"
        ]
    },
    {
        "task": "2-serve-drinks",
        "step": [
            "get_beer npc bedroom",
            "get phone npc bedroom",
            "go west npc bedroom livingroom",
            "go west npc livingroom kitchen",
            "go north npc kitchen cupboard",
            "get teabag npc cupboard",
            "get soda npc cupboard",
            "go south npc cupboard kitchen",
            "brew npc kitchen",
            "get soymilk npc kitchen",
            "go east npc kitchen livingroom",
            "buy_sake npc",
            "serve npc tea livingroom",
            "drop soymilk npc livingroom",
            "drop soda npc livingroom",
            "drop sake npc livingroom",
            "serve npc beer livingroom"
        ],
        "desc": [
            "Serve beverages. There are various Japanese-themed drinks you can serve at your party. If it\u2019s a kid\u2019s party, you\u2019ll of course want to stick to non-alcoholic options. If it\u2019s an adult party, you may want to include both alcoholic and non-alcoholic beverage choices.",
            "Cut Rice Krispie treats into circles. Attach chewy fruit snacks and Swedish fish to them with Laffy Taffy. Wrap a Fruit Roll-Up around each circle."
        ],
        "action": [
            "(:action buy_sake\n    :parameters (?p - player)\n    :precondition (and (inventory ?p phone) (inventory ?p money))\n    :effect (and (inventory ?p sake) (not (inventory ?p money)))\n  )",
            "(:action get\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at ?obj ?l))\n    :effect (and (inventory ?p ?obj) (not (at ?obj ?l)))\n  )",
            "(:action get_beer\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_fridge ?l) (at ?p ?l))\n    :effect (and (inventory ?p beer) (opened beer))\n  )",
            "(:action brew\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_kitchen ?l) (at ?p ?l) (inventory ?p teabag))\n    :effect (and (inventory ?p tea) (not (inventory ?p teabag)) (opened tea))\n  )",
            "(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action drop\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (inventory ?p ?obj))\n    :effect (and (at ?obj ?l) (not (inventory ?p ?obj)))\n  )",
            "(:action serve\n    :parameters (?p - player ?d - drink ?l - location)\n    :precondition (and (inventory ?p ?d) (opened ?d) (at ?p ?l))\n    :effect (and (not (inventory ?p ?d)) (at ?d ?l))\n  )"
        ]
    },
    {
        "task": "collect-water",
        "step": [
            "go up npc basement kitchen",
            "get bottles kitchen npc",
            "go up npc kitchen bedroom",
            "go in npc bedroom bathroom",
            "drop bottles bathroom npc",
            "fill bottles bathroom npc",
            "put_in_stopper bathtub bathroom npc",
            "get purification_tablets bathroom npc",
            "purify bottles bathroom npc",
            "fill bathtub bathroom npc"
        ],
        "desc": [
            "Shelter in place and wait for the initial chaos to subside. If all of the electronics suddenly stop working, the immediate loss of electricity will cause a lot of sudden confusion and chaos. If you aren\u2019t home, wait 30-45 minutes for all of the abrupt danger to pass. Then, go home if you\u2019re within a few miles or kilometers. If you\u2019re already home, stay there and do not go outside.",
            "Eat anything in your fridge first to minimize food shortages. For the first 1-2 days, eat whatever is in your fridge and hasn\u2019t gone bad immediately. Save the dry stuff for later when you may really need it. The odds are low society will completely collapse and you\u2019ll go without help for super long, but it\u2019s still better to go through everything that\u2019s going to go bad anyway."
        ],
        "action": [
            "(:action drop\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (inventory ?p ?it) (at ?p ?l))\n      :effect (and (not (inventory ?p ?it)) (at ?it ?l))\n   )",
            "(:action fill\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (can_be_filled ?it) (at ?p ?l) (at ?it ?l))\n      :effect (full ?it)\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action purify\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l) (full ?it) (inventory ?p purification_tablets) (not (sealed ?it)))\n      :effect (and (purified ?it) (not (inventory ?p purification_tablets)))\n   )",
            "(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )",
            "(:action put_in_stopper\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (has_stopper ?it) (not (full ?it)) (at ?it ?l) (at ?p ?l))\n      :effect (can_be_filled ?it)\n   )"
        ]
    },
    {
        "task": "turn-on-radio",
        "step": [
            "go up npc kitchen bedroom",
            "get batteries bedroom npc",
            "go down npc bedroom kitchen",
            "go down npc kitchen basement",
            "put_batteries_in npc basement radio",
            "turn_on_radio npc basement radio"
        ],
        "desc": [
            "Your vehicle may still work if it\u2019s older or it doesn\u2019t rely on a dedicated electrical signal outside of the battery to keep the engine going, which is the case for many vehicles.",
            "Turn your radio on immediately to get as much information as possible. Most electronics are going to stop functioning as soon as the EMP goes off. However, depending on the type of EMP, there is a good chance that radios will continue to work\u2014at least for a short while. Turn the radio on and tune in to any news source with a decent signal. Keep it on as long as possible and pay attention while you take the next steps to ensure that you get as much information as you can."
        ],
        "action": [
            "(:action turn_on_radio ; turn on the radio\n      :parameters (?p - player ?loc - location ?radio - radio) \n      :precondition (and (at ?p ?loc) (at ?radio ?loc) (has_batteries ?radio))\n      :effect (on ?radio)\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )",
            "(:action put_batteries_in ; pick up an item and put it in the inventory\n      :parameters (?p - player ?l1 - location ?radio - radio) \n      :precondition (and (at ?p ?l1) (inventory ?p batteries) (not (has_batteries ?radio)))\n      :effect (has_batteries ?radio)\n   )"
        ]
    },
    {
        "task": "get-home",
        "step": [
            "wait npc",
            "go east npc work backroads",
            "go south npc backroads school",
            "get kids school npc",
            "go west npc school home",
            "go down npc home basement",
            "drop kids basement npc"
        ],
        "desc": [
            "If you\u2019re outside during a nuclear blast, cover your mouth and nose with a cloth or mask to avoid breathing in toxic particles."
        ],
        "action": [
            "(:action wait\n      :parameters (?p - player)\n      :precondition (not (at ?p home))\n      :effect (and (not (blocked work east backroads)) (not (blocked school north backroads)) \n              (not (blocked school west home)) (not (blocked home east school)))\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )",
            "(:action drop\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (inventory ?p ?it) (at ?p ?l))\n      :effect (and (not (inventory ?p ?it)) (at ?it ?l))\n   )"
        ]
    },
    {
        "task": "prepare-for-attack",
        "step": [
            "get phone bedroom npc",
            "get ipad bedroom npc",
            "go down npc bedroom kitchen",
            "get aluminum_foil kitchen npc",
            "get laptop kitchen npc",
            "go down npc kitchen basement",
            "get trashcan basement npc",
            "get trashlid basement npc",
            "get nintendo_switch basement npc",
            "create_cage npc basement",
            "put_in_cage npc basement phone",
            "put_in_cage npc basement nintendo_switch",
            "put_in_cage npc basement laptop",
            "put_in_cage npc basement ipad",
            "close_cage npc basement"
        ],
        "desc": [
            "You can drive it if you absolutely have to, but it\u2019s safer to stay off of the roads if you can."
        ],
        "action": [
            "(:action put_in_cage ; put item in the farraday cage\n      :parameters (?p - player ?loc - location ?it - item)\n      :precondition (and (at farraday_cage ?loc) (inventory ?p ?it))\n      :effect (and (in_cage ?it) (not (inventory ?p ?it))  (not (cage_closed farraday_cage)))\n   )\n\n)",
            "(:action close_cage ; Close the farraday cage\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at farraday_cage ?loc) (inventory ?p trashlid))\n      :effect (cage_closed farraday_cage)\n   )",
            "(:action create_cage ; create a farraday cage\n      :parameters (?p - player ?loc - location)\n      :precondition (and (inventory ?p trashcan) (inventory ?p aluminum_foil))\n      :effect (and (at farraday_cage ?loc) (not (inventory ?p trashcan)) (not (inventory ?p aluminum_foil)))\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )"
        ]
    },
    {
        "task": "build_fire",
        "step": [
            "go east npc shore forest_edge",
            "go east npc forest_edge forest",
            "gather_tinder npc forest tinder",
            "get softwood npc forest",
            "build_campfire npc forest tinder campfire",
            "get hardwood_stick npc forest",
            "light_campfire npc forest softwood hardwood_stick campfire"
        ],
        "desc": [
            "You can also try a swim-float-swim technique, where you swim and then roll and float on your back.",
            "Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:"
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n        :parameters (?item - item ?p - player ?l1 - location) \n        :precondition (and (at ?p ?l1) (at ?item ?l1))\n        :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n    )",
            "(:action gather_tinder\n        :parameters (?p - player ?loc - location ?tinder - tinder)\n        :precondition (and (at ?p ?loc) (has_tinder ?loc))\n        :effect (and (inventory ?p ?tinder))\n    )",
            "(:action light_campfire\n        :parameters (?p -player ?loc - location ?softwood - softwood ?hardwood - hardwood_stick ?campfire - campfire)\n        :precondition (and (at ?p ?loc) (at ?campfire ?loc) (not (lit ?campfire)) (inventory ?p ?softwood) (inventory ?p ?hardwood))\n        :effect (and (lit ?campfire))\n    )",
            "(:action build_campfire\n        :parameters (?p -player ?loc - location ?tinder - tinder ?campfire - campfire)\n        :precondition (and (at ?p ?loc) (inventory ?p ?tinder))\n        :effect (and (at ?campfire ?loc) (not (inventory ?p ?tinder)))\n    )",
            "(:action go ; navigate to an adjacent location \n        :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n        :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n        :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n    )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n        :parameters (?p - player ?loc - location ?water - water) \n        :precondition (and (at ?p ?loc) (has_freshwater_source ?loc))\n        :effect (and (inventory ?p ?water) (not (treated ?water)))\n    )"
        ]
    },
    {
        "task": "find_water",
        "step": [
            "go east npc shore forest_edge",
            "go east npc forest_edge forest",
            "go north npc forest river",
            "get_water npc river water"
        ],
        "desc": [
            "Scavenge anything you can. Before you head to shore, it can be a good idea to gather up any supplies or materials near you. There may be useful items floating on the waters surface that will help you survive and await rescue. Try to look for anything you can use before heading to shore."
        ],
        "action": [
            "(:action go ; navigate to an adjacent location \n        :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n        :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n        :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n    )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n        :parameters (?p - player ?loc - location ?water - water) \n        :precondition (and (at ?p ?loc) (has_freshwater_source ?loc))\n        :effect (and (inventory ?p ?water) (not (treated ?water)))\n    )"
        ]
    },
    {
        "task": "make_smoke_signal",
        "step": [
            "go east npc shore forest_edge",
            "go east npc forest_edge forest",
            "gather_tinder npc forest tinder",
            "go west npc forest forest_edge",
            "go west npc forest_edge shore",
            "wet_tinder npc shore tinder",
            "build_campfire npc forest tinder campfire",
            "make_smoke_signal npc forest campfire tinder"
        ],
        "desc": [
            "",
            "You can float in water by laying on your back and keeping your lungs full.",
            "You can also try a swim-float-swim technique, where you swim and then roll and float on your back.",
            "Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:"
        ],
        "action": [
            "(:action gather_tinder\n        :parameters (?p - player ?loc - location ?tinder - tinder)\n        :precondition (and (at ?p ?loc) (has_tinder ?loc))\n        :effect (and (inventory ?p ?tinder))\n    )",
            "(:action make_smoke_signal\n        :parameters (?p - player ?loc - location ?campfire - campfire ?tinder - tinder)\n        :precondition (and (at ?p ?loc)(at ?campfire ?loc)(inventory ?p ?tinder)(wet ?tinder))\n        :effect (and (signaling ?campfire)(not (wet ?tinder))(not (inventory ?p ?tinder)))\n    )\n    \n    \n    \n    \n    \n)",
            "(:action build_campfire\n        :parameters (?p -player ?loc - location ?tinder - tinder ?campfire - campfire)\n        :precondition (and (at ?p ?loc) (inventory ?p ?tinder))\n        :effect (and (at ?campfire ?loc) (not (inventory ?p ?tinder)))\n    )",
            "(:action go ; navigate to an adjacent location \n        :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n        :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n        :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n    )",
            "(:action wet_tinder\n        :parameters (?p - player ?loc - location ?tinder - tinder)\n        :precondition (and (at ?p ?loc)(has_water ?loc)(inventory ?p ?tinder))\n        :effect (and (wet ?tinder))\n    )"
        ]
    },
    {
        "task": "build_a_shelter",
        "step": [
            "go west npc camp path",
            "build_shelter npc path twigs_leaves long_branch propped_branches"
        ],
        "desc": [
            "Lean branches against the main branch to form the structure of your shelter. Gather a bunch of branches that are long enough to be propped up against the main branch of your shelter. Think about forming ribs with the branches. Try to keep them as close together as you can."
        ],
        "action": [
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action build_shelter ; built shelter\n      :parameters (?p - player ?loc - location ?twigs_leaves - twigs_leaves ?long_branch - long_branch ?propped_branches - propped_branches)\n      :precondition (and (at ?p ?loc) (has_twigs_leaves ?loc) (has_branches ?loc) (has_branches ?loc))\n      :effect (and (has_shelter ?p))\n   )"
        ]
    },
    {
        "task": "collect_water",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff waterfall",
            "get_water npc waterfall water"
        ],
        "desc": [
            "Search for a source of fresh water."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)) (not (strained ?water)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ]
    },
    {
        "task": "start_a_fire",
        "step": [
            "go west npc camp path",
            "get_dry_materials npc path dry_materials",
            "get_twigs_leaves npc path twigs_leaves",
            "get_logs npc path logs",
            "build_teepee npc path dry_materials twigs_leaves teepee",
            "start_fire npc path teepee logs"
        ],
        "desc": [
            "Use dry sticks, branches, or tree bark to serve as your kindling.",
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Avoid using too much energy. It may be difficult for you to find adequate food and water if you're lost in the woods. Try not to sweat or use too much energy by doing things like running around and screaming for help if you're by yourself. Conserve as much energy as you can for doing things like building shelter, fire, and searching for water.",
            "Search for a dry, flat area between 2 trees with splits in their trunks. Look around the area to find a relatively flat area with a tree that has a trunk that splits about 3\u20135 feet (0.91\u20131.52 m) off of the ground. If possible, try to find 2 trees that have a split in their trunks about 3\u20135 feet (0.91\u20131.52 m) off of the ground and are about 10 feet (3.0 m) apart from each other.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action get_logs ; get logs\n      :parameters (?p - player ?loc - location ?logs - logs)\n      :precondition (and (at ?p ?loc) (has_logs ?loc))\n      :effect (and (inventory ?p ?logs))\n   )",
            "(:action get_dry_materials ; get dry materials\n      :parameters (?p - player ?loc - location ?dry_materials - dry_materials)\n      :precondition (and (at ?p ?loc) (has_dry_materials ?loc))\n      :effect (and (inventory ?p ?dry_materials))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action start_fire ; start_fire\n      :parameters (?p - player ?loc - location ?teepee - teepee ?logs - logs)\n      :precondition (and (at ?p ?loc) (inventory ?p ?teepee) (inventory ?p ?logs))\n      :effect (and (has_fire ?p))\n   )\n)",
            "(:action build_teepee ; build teepee structure\n      :parameters (?p - player ?loc - location ?dry_materials - dry_materials ?twigs_leaves - twigs_leaves ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (inventory ?p ?dry_materials) (inventory ?p ?twigs_leaves))\n      :effect (and (inventory ?p ?teepee))\n   )",
            "(:action get_twigs_leaves ; get twigs and leaves\n      :parameters (?p - player ?loc - location ?twigs_leaves - twigs_leaves)\n      :precondition (and (at ?p ?loc) (has_twigs_leaves ?loc))\n      :effect (and (inventory ?p ?twigs_leaves))\n   )"
        ]
    },
    {
        "task": "build_shelter",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff waterfall",
            "go east npc waterfall mountain",
            "get branch npc mountain",
            "go east npc mountain west_plain",
            "insert_beam branch tree npc west_plain beam",
            "go east npc west_plain east_plain",
            "get branches npc east_plain",
            "get leaves npc east_plain",
            "get twigs npc east_plain",
            "go west npc east_plain west_plain",
            "lean_branches branches npc west_plain beam frame",
            "clear_spider leaves npc",
            "layer twigs leaves npc west_plain frame shelter"
        ],
        "desc": [
            "Find a branch 10 feet (3.0 m) long and 3\u20136 inches (7.6\u201315.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.",
            "In the event that you have no containers and no way to purify water, you can dig a deep hole, let it fill with groundwater, and wait for the particles to settle at the bottom and the water is clear before you drink it. You should only do this if you have no other option.",
            "Place the other end of the branch into the split of the other tree. Form a horizontal frame with the main branch by inserting the other end in the split of a nearby tree. Make sure the branch is firmly held in place by shaking it a little.",
            "Insert 1 end of the branch into the split of 1 of the trees. Where the tree splits and forms a \u201cV\u201d shape, place 1 end of the branch to hold it up as a support beam. If the tree doesn't have a split, use a log that ends in a \u201cV\u201d shape and lean it against a tree so the branch is supported by the tree."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )",
            "(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )",
            "(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)",
            "(:action drop ; drop down an item and remove it from the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?item) (not (at ?item ?l1)))\n      :effect (and (not (inventory ?p ?item)) (at ?item ?l1))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action lean_branches ; Lean branches against the main branch to form the structure of your shelter.\n      :parameters (?branches - branches ?p - player ?l1 - location ?beam - beam ?frame - frame) \n      :precondition (and (at ?p ?l1) (inventory ?p ?branches) (at ?beam ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?branches)) (at ?frame ?l1))\n   )",
            "(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )",
            "(:action clear_spider ; clear off any critters or spiders that may be on the branch or leaves\n      :parameters (?item - item ?p - player) \n      :precondition (and (inventory ?p ?item) (has_bug ?item))\n      :effect (and (not (has_bug ?item)) (inventory ?p ?item))\n   )",
            "(:action insert_beam ; insert end(s) of the branch into the split(s) of the tree(s)\n      :parameters (?b - branch ?t - tree ?p - player ?l1 - location ?beam - beam) \n      :precondition (and (at ?p ?l1) (dry ?l1) (flat ?l1) (at ?t ?l1) (has_split_in_trunk ?t) (inventory ?p ?b) (not (has_bug ?b)) (long ?b) (thick ?b) )\n      :effect (and (at ?p ?l1) (not (inventory ?p ?b)) (at ?beam ?l1))\n   )",
            "(:action layer ; Lay twigs and leaves\n      :parameters (?twigs - twigs ?leaves - leaves ?p - player ?l1 - location ?frame - frame ?shelter - shelter) \n      :precondition (and (at ?p ?l1) (inventory ?p ?twigs) (inventory ?p ?leaves) (not (has_bug ?leaves)) (at ?frame ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?twigs)) (not (inventory ?p ?leaves)) (at ?shelter ?l1))\n   )",
            "(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )"
        ]
    },
    {
        "task": "eat_plants",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff waterfall",
            "get_water npc waterfall water",
            "go east npc waterfall mountain",
            "get flowers npc mountain",
            "wash flowers npc water",
            "eat flowers npc"
        ],
        "desc": [
            "Pick wild edible berries to eat. If you happen to come by an identifiable berry bush, definitely take advantage. Never consume any berries that you cannot positively identify as many are toxic. To be safe, stick to eating berries that you recognize like blackberries, raspberries, and wild strawberries.",
            "Search for a source of fresh water."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )"
        ]
    },
    {
        "task": "build_snare",
        "step": [
            "go west npc camp path",
            "get wire npc path",
            "go west npc path cliff",
            "go up npc cliff waterfall",
            "go east npc waterfall mountain",
            "get branch npc mountain",
            "go west npc mountain waterfall",
            "go west npc waterfall footpath",
            "make_snare wire npc snare",
            "make_horizontal_bar branch npc bar",
            "hang_snare snare bar npc footpath"
        ],
        "desc": [
            "Look for edible mushrooms in the woods, if you are trained. Look for wild mushrooms near dark and damp areas or on dying trees in the woods. But be very careful because if you eat the wrong mushroom, you could become extremely ill and potentially die. If you're not sure about whether or not a mushroom is safe to eat, don't eat it!"
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )",
            "(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )"
        ]
    },
    {
        "task": "process-strips",
        "step": [
            "get wooden_board npc garage",
            "go in npc garage work_station",
            "soak_strips npc work_station strip",
            "dry_out_strips npc strip",
            "weave_strips_into_sheet npc work_station strip sheet",
            "press_sheet npc work_station wooden_board sheet"
        ],
        "desc": [
            "Lay the papyrus plant strips on a hard, flat surface. The pattern doesn't matter at this point as you will be rearranging them later. Just lay them out on a hard, flat surface and make sure they don't overlap.",
            "Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours.",
            "Lay the second half of the strips out. Once the first half off the strips have been laid out vertically, begin laying out the second half of the strips. Lay the strips out horizontally and on top of the vertical ones.",
            "Dip the strips into the glue and water mixture. Dip each strip individually. Try to keep the strips as flat as possible when dipping them. Make sure the strips are fully soaked with the mixture."
        ],
        "action": [
            "(:action weave_strips_into_sheet ; \n      :parameters (?p - player ?loc - location ?strip - strip ?sheet - sheet) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?strip) (dry ?strip))\n      :effect (and (inventory ?p ?sheet) (not (inventory ?p ?strip)) (not (flat ?sheet)))\n   )",
            "(:action soak_strips ; \n      :parameters (?p - player ?loc - location ?strip - strip) \n      :precondition (and (at ?p ?loc) (has_water ?loc) (inventory ?p ?strip))\n      :effect (and (clean ?strip) (not (dry ?strip)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action press_sheet ; \n      :parameters (?p - player ?loc - location ?wooden_board - wooden_board ?sheet - sheet) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?wooden_board) (inventory ?p ?sheet))\n      :effect (and (flat ?sheet) (not (very_flat ?sheet)))\n   )",
            "(:action dry_out_strips ; \n      :parameters (?p - player ?strip - strip) \n      :precondition (and (inventory ?p ?strip) (clean ?strip))\n      :effect (dry ?strip)\n   )"
        ]
    },
    {
        "task": "get-strips",
        "step": [
            "get scissors npc garage",
            "go west npc garage nursery",
            "get plant npc nursery",
            "cut_plant npc scissors plant stalk",
            "peel_stalk npc stalk",
            "cut_stalk_into_strips npc scissors stalk strip"
        ],
        "desc": [
            "Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however.",
            "Peel away the outer layer of the papyrus plant. Only the inner part of the plant is used for the paper. You will need to remove the outer green part of the plant. Use a sharp knife and slice down the length of the plant until the entire outer layer is removed. The inside of the plant should be a white or slightly greenish color.",
            "Cut the stalks. About 12 inches (30 cm) of papyrus plant will make a large piece of paper that will be nearly 24 inches (61 cm) in length. Cut off as many stalks as you will need to make the amount of paper you want. The cuts must be diagonally made. Then, cut the tips of the papyrus. You will not use the tips, which are the thinner, grass-like end of the plant."
        ],
        "action": [
            "(:action peel_stalk ; \n      :parameters (?p - player ?stalk - stalk) \n      :precondition (and (not (peeled ?stalk)) (inventory ?p ?stalk))\n      :effect (peeled ?stalk)\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action cut_plant ;\n      :parameters (?p - player ?scissors - scissors ?plant - plant ?stalk - stalk) \n      :precondition  (and (inventory ?p ?scissors) (inventory ?p ?plant))\n      :effect (and (inventory ?p ?stalk) (not (inventory ?p ?plant)) (not (peeled ?stalk)))\n   )",
            "(:action cut_stalk_into_strips ; \n      :parameters (?p - player ?scissors - scissors ?stalk - stalk ?strip - strip) \n      :precondition (and (inventory ?p ?stalk) (inventory ?p ?scissors) (peeled ?stalk))\n      :effect (and (inventory ?p ?strip) (not (inventory ?p ?stalk)) (not (clean ?strip)))\n   )"
        ]
    },
    {
        "task": "get-papyrus",
        "step": [
            "get shell npc garage",
            "go in npc garage work_station",
            "flatten_sheet npc work_station sheet",
            "polish_sheet npc work_station sheet shell",
            "cut_sheet npc garage sheet scissors papyrus"
        ],
        "desc": [
            "Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours.",
            "Polish the papyrus. This step isn't absolutely necessary, but it will make the papyrus look nicer and more finished. Use a shell or smooth piece of ivory. Any type of shell that is smooth and without ridges will do. Rub the shell or ivory over the sheet of paper until it appears to be shinier than it was.",
            "Flatten the sheet. The paper may not be completely flat after you remove it from the wooden boards. Put the paper under a stone slab for up to 6 days to make it completely flat."
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action cut_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet ?scissors - scissors ?papyrus - papyrus) \n      :precondition (and (inventory ?p ?scissors) (smooth ?sheet))\n      :effect (inventory ?p ?papyrus)\n   )\n)",
            "(:action polish_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet ?shell - shell) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?sheet) (inventory ?p ?shell) (very_flat ?sheet))\n      :effect (and (not (inventory ?p ?shell)) (smooth ?sheet))\n   )",
            "(:action flatten_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?sheet) (flat ?sheet))\n      :effect (and (very_flat ?sheet) (not (smooth ?sheet)))\n   )"
        ]
    },
    {
        "task": "be-amazed",
        "step": [
            "record_crosses paper npc hallway",
            "record_tosses paper npc hallway",
            "divide_crosses paper npc",
            "calculate_pi paper npc",
            "be_amazed npc"
        ],
        "desc": [
            "Get into position and THROW YOUR FOOD! Throw just one item at a time. Once it is at rest, observe whether or not it is crossing one of the lines. If it is, put a tick under \"Crosses\" and a tick under \"Tosses.\" If it isn't, just put a tick under \"Tosses.\" When you\u2019ve run out of hot dogs, pick them up and re-use them, making sure to throw from the same position. Repeat this as many times as you like. You should start seeing some interesting results by around 100 to 200 throws. (This doesn't take as long as it sounds.)",
            "When you\u2019re done, divide the number of crosses by 2 and divide the number of tosses by that. For example, if you threw 300 times, and it crossed 191 times, you would calculate 300/(191/2). And, to your amazement, you will now have an approximation for pi!"
        ],
        "action": [
            "(:action be_amazed ; divide tosses\n      :parameters (?p - player)\n      :precondition (and (calculated_pi ?p) (not (amazed ?p)))\n      :effect (amazed ?p)\n   )\n\n)",
            "(:action divide_crosses ; divide crosses\n      :parameters (?object - paper ?p - player)\n      :precondition (and (inventory ?p ?object) (crosses_recorded ?object) (not (crosses_divided ?object)))\n      :effect (crosses_divided ?object)\n   )",
            "(:action record_tosses ; record tosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (tosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (tosses_recorded ?object)\n   )",
            "(:action record_crosses ; record crosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (crosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (crosses_recorded ?object)\n   )",
            "(:action calculate_pi ; divide tosses\n      :parameters (?object - paper ?p - player)\n      :precondition (and (inventory ?p ?object) (crosses_recorded ?object) (tosses_recorded ?object) (crosses_divided ?object) (not (calculated_pi ?p)))\n      :effect (calculated_pi ?p)\n   )"
        ]
    },
    {
        "task": "get-materials",
        "step": [
            "go north npc foyer hallway",
            "go west npc hallway kitchen",
            "get items npc kitchen",
            "go east npc kitchen hallway",
            "go east npc hallway study",
            "get pen npc study",
            "get paper npc study",
            "thaw_food items npc"
        ],
        "desc": [],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?object - object ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?object ?l1) (is_gettable ?object))\n      :effect (and (inventory ?p ?object) (not (at ?object ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action thaw_food ; thaw food items\n      :parameters (?object - items ?p - player)\n      :precondition (and (inventory ?p ?object) (is_food_item ?object) (frozen ?object))\n      :effect (not (frozen ?object))\n   )"
        ]
    },
    {
        "task": "throw-hotdogs",
        "step": [
            "go east npc kitchen hallway",
            "thaw_food items npc",
            "lay_masking_tape masking_tape npc hallway",
            "throw items npc hallway"
        ],
        "desc": [
            "Lay down masking tape in parallel strips across the floor as far apart as your projectile is long. The strips should be perpendicular to the direction you will be throwing. If your item is 15-45 cm (6-18 inches) long, lay down about 6-10 strips; lay down fewer if longer and more if shorter.",
            "Select a food item to throw. There are a couple of qualifications. First, it must be long, thin, hard, and straight, like a frozen hot dog, for example. Second, it must be a reasonably stiff item. Third, it should be somewhere between 15 and 20 cm (6-8 inches) long; the experiment can be performed otherwise, but read on, and you will see why this size is optimal. There are lots of other items that fit these criteria including Otter Pops, celery, and churros. (If you simply can't come to grips with throwing perfectly good food, see the Tips section for some additional ideas.)"
        ],
        "action": [
            "(:action thaw_food ; thaw food items\n      :parameters (?object - items ?p - player)\n      :precondition (and (inventory ?p ?object) (is_food_item ?object) (frozen ?object))\n      :effect (not (frozen ?object))\n   )",
            "(:action record_tosses ; record tosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (tosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (tosses_recorded ?object)\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action record_crosses ; record crosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (crosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (crosses_recorded ?object)\n   )",
            "(:action lay_masking_tape ; lay masking tape\n      :parameters (?object - masking_tape ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?object) (has_ten_strips ?object))\n      :effect (and (not (has_ten_strips ?object)) (has_ten_strips ?l1))\n   )",
            "(:action throw ; throw food items\n      :parameters (?object - items ?p - player ?l1 - location) \n      :precondition (and \n      (at ?p ?l1)\n      (has_throwing_distance ?l1) \n      (is_clear ?l1) \n      (is_food_item ?object) \n      (is_long ?object) \n      (is_thin ?object) \n      (is_hard ?object) \n      (is_straight ?object) \n      (is_stiff ?object) \n      (has_ten_strips ?l1) \n      (not (frozen ?object))\n      )\n      :effect (thrown_food_items ?l1)\n   )"
        ]
    },
    {
        "task": "escape",
        "step": [
            "get stone npc basecamp",
            "create_sos_sign npc",
            "go west npc basecamp bamboo_forrest",
            "get stone npc bamboo_forrest",
            "get_bamboo_container npc bamboo_forrest",
            "go east npc bamboo_forrest basecamp",
            "go east npc basecamp jungle",
            "collect_rain_water npc jungle",
            "get wood npc jungle",
            "create_fire npc jungle",
            "treat_water npc jungle",
            "drink_water npc",
            "pick_fruit npc jungle",
            "eat_fruit npc",
            "go west npc jungle basecamp",
            "escape npc"
        ],
        "desc": [
            "",
            "Stop, think, observe, and plan. Remember the acronym STOP and follow it when you get lost in the jungle. Stop to rest and think about where you came from, observe your surroundings, try to orient yourself, then plan how you are going to get out or get rescued.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water.",
            "Collect rainfall from leaves and bamboo stalks. Look for large leaves that collect rainfall and bend them into a funnel to pour the water into a bottle or straight into your mouth. Bend bamboo stalks to let the water that collects in the compartments flow out into a container or break the bamboo compartment off at the line that goes across the stalk to use it as a water bottle.",
            "Look for fruits and plants that you recognize and are safe to eat. Jungles are full of tropical fruits and edible plants if you know what to look for. Don\u2019t try eating any plants that you don\u2019t recognize because they could be poisonous.",
            "Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container."
        ],
        "action": [
            "(:action collect_rain_water\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (inventory ?p bamboo_container) (has_rainfall ?loc))\n      :effect (and (inventory ?p water) (not (treated water)))\n   )",
            "(:action eat_fruit\n      :parameters (?p - player)\n      :precondition (and (is hungry ?p) (inventory ?p fruit))\n      :effect (and (not (inventory ?p fruit)) (not (is hungry ?p)))\n   )",
            "(:action create_fire\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (inventory ?p stone) (inventory ?p wood))\n      :effect (and (at fire ?loc) (not (inventory ?p stone)) (not (inventory ?p wood)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action create_sos_sign\n      :parameters (?p - player)\n      :precondition (and (inventory ?p stone) (at ?p basecamp))\n      :effect (and (not (inventory ?p stone)) (at sos_sign basecamp))\n   )",
            "(:action treat_water\n      :parameters (?p - player ?loc - location)\n      :precondition (and (inventory ?p water) (not (treated water)) (at fire ?loc))\n      :effect (and (treated water))\n   )",
            "(:action get_bamboo_container; get a bamboo container using surrounding bamboo\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (has_bamboo ?loc))\n      :effect (inventory ?p bamboo_container)\n   )",
            "(:action drink_water\n      :parameters (?p - player)\n      :precondition (and (inventory ?p water) (treated water))\n      :effect (not (is dehydrated ?p))\n   )",
            "(:action pick_fruit\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (has_fruit ?loc))\n      :effect (inventory ?p fruit)\n   )",
            "(:action escape\n      :parameters (?p - player)\n      :precondition (and (at ?p basecamp) (at sos_sign basecamp) (not (is hungry ?p)) (not (is dehydrated ?p)) (not (is ill ?p)))\n      :effect (not (at ?p basecamp))\n   )\n)"
        ]
    },
    {
        "task": "hunger",
        "step": [
            "go east npc basecamp jungle",
            "pick_fruit npc jungle",
            "eat_fruit npc"
        ],
        "desc": [
            "Look for fruits and plants that you recognize and are safe to eat. Jungles are full of tropical fruits and edible plants if you know what to look for. Don\u2019t try eating any plants that you don\u2019t recognize because they could be poisonous.",
            "Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container."
        ],
        "action": [
            "(:action eat_fruit\n      :parameters (?p - player)\n      :precondition (and (is hungry ?p) (inventory ?p fruit))\n      :effect (and (not (inventory ?p fruit)) (not (is hungry ?p)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action pick_fruit\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (has_fruit ?loc))\n      :effect (inventory ?p fruit)\n   )"
        ]
    },
    {
        "task": "dehydration",
        "step": [
            "go west npc basecamp bamboo_forrest",
            "get_bamboo_container npc bamboo_forrest",
            "go east npc bamboo_forrest basecamp",
            "get stone npc basecamp",
            "go east npc basecamp jungle",
            "get wood npc jungle",
            "collect_rain_water npc jungle",
            "create_fire npc jungle",
            "treat_water npc jungle",
            "drink_water npc"
        ],
        "desc": [
            "Collect rainfall from leaves and bamboo stalks. Look for large leaves that collect rainfall and bend them into a funnel to pour the water into a bottle or straight into your mouth. Bend bamboo stalks to let the water that collects in the compartments flow out into a container or break the bamboo compartment off at the line that goes across the stalk to use it as a water bottle.",
            "Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water."
        ],
        "action": [
            "(:action collect_rain_water\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (inventory ?p bamboo_container) (has_rainfall ?loc))\n      :effect (and (inventory ?p water) (not (treated water)))\n   )",
            "(:action create_fire\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (inventory ?p stone) (inventory ?p wood))\n      :effect (and (at fire ?loc) (not (inventory ?p stone)) (not (inventory ?p wood)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action treat_water\n      :parameters (?p - player ?loc - location)\n      :precondition (and (inventory ?p water) (not (treated water)) (at fire ?loc))\n      :effect (and (treated water))\n   )",
            "(:action get_bamboo_container; get a bamboo container using surrounding bamboo\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (has_bamboo ?loc))\n      :effect (inventory ?p bamboo_container)\n   )",
            "(:action drink_water\n      :parameters (?p - player)\n      :precondition (and (inventory ?p water) (treated water))\n      :effect (not (is dehydrated ?p))\n   )"
        ]
    },
    {
        "task": "get_out_deep",
        "step": [
            "liedown npc",
            "breathe npc",
            "get stick npc here",
            "usestick npc stick qsand"
        ],
        "desc": [
            "Breathe deeply. Not only will deep breathing help you remain calm, it will also make you more buoyant. Keep as much air in your lungs as possible. It is impossible to \"go under\" if your lungs are full of air.",
            "Lay back. Sit down and lean back if your feet are stuck fast. Creating a larger \"footprint\" should free your feet by removing the pressure they create, allowing them to float. When you feel them start to come free, roll to your side away from the quicksand and free of its grip. You'll get dirty, but its the quickest and safest way to free yourself.",
            "Stay flat on your back with your arms and legs fully touching the quicksand and use the pole as a guide. Inch sideways along the pole to firm ground."
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?i - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?i ?l1))\n      :effect (and (inventory ?p ?i) (not (at ?i ?l1)))\n   )",
            "(:action liedown ; player gets on their back\n      :parameters (?p - player)\n      :precondition (not (laying ?p))\n      :effect (laying ?p)\n   )",
            "(:action usestick ; player uses the stick to help get out of sand\n      :parameters (?p - player ?s - stick ?q - quicksand)\n      :precondition (and (inventory ?p ?s) (laying ?p) (calm ?p))\n      :effect (and (not (stuck ?p ?q)) (not (inventory ?p ?s)))\n   )",
            "(:action breathe ; breathe in to fill your lungs with air\n      :parameters (?p - player)\n      :precondition (not (calm ?p))\n      :effect (calm ?p)\n   )"
        ]
    },
    {
        "task": "get_feet_out",
        "step": [
            "liedown npc",
            "swim npc qs"
        ],
        "desc": [
            "Get on your back and \"swim.\" If you sink up to your hips or higher, bend backward. The more you spread out your weight, the harder it will be to sink. Float on your back while you slowly and carefully extricate your legs. Once your legs are free you can inch yourself to safety by using your arms to slowly and smoothly propel yourself backward with your arms in a sweeping motion, as if you were swimming. When you get near the edge of the quicksand, you can roll to hard ground.",
            "Lay back. Sit down and lean back if your feet are stuck fast. Creating a larger \"footprint\" should free your feet by removing the pressure they create, allowing them to float. When you feel them start to come free, roll to your side away from the quicksand and free of its grip. You'll get dirty, but its the quickest and safest way to free yourself."
        ],
        "action": [
            "(:action liedown ; player gets on their back\n      :parameters (?p - player)\n      :precondition (not (laying ?p))\n      :effect (laying ?p)\n   )",
            "(:action swim ; player starts to swim through the sand\n      :parameters (?p - player ?q - quicksand)\n      :precondition (and (laying ?p) (not (tired ?p)) (not (deep ?q)))\n      :effect (and (tired ?p) (not (stuck ?p ?q)))\n   )"
        ]
    },
    {
        "task": "avoid_quicksand",
        "step": [
            "research npc l1",
            "go north npc home l1",
            "research npc l2",
            "go east npc l1 l2",
            "go east npc l2 l3"
        ],
        "desc": [],
        "action": [
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) (aware ?p ?l1))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action research\n      :parameters (?p - player ?l - location)\n      :precondition (not (at ?p ?l))\n      :effect (aware ?p ?l)\n   )"
        ]
    },
    {
        "task": "get_materials",
        "step": [
            "get knife npc home",
            "get linen_sheets npc home",
            "get rolling_pin npc home",
            "get water npc home",
            "get wooden_boards npc home"
        ],
        "desc": [],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l - location)\n      :precondition (and (at ?p ?l) (at ?item ?l) (not (not_gettable ?item)))\n      :effect (and (inventory ?p ?item))\n  )"
        ]
    },
    {
        "task": "make_papyrus",
        "step": [
            "cut_stalks npc knife papyrus_plant papyrus_stalks",
            "cut_strips npc papyrus_strips papyrus_stalks knife",
            "soak_strips npc water papyrus_strips",
            "roll_strips npc rolling_pin papyrus_strips",
            "weave_strips npc papyrus_strips",
            "bundle_strips npc papyrus_strips wooden_boards linen_sheets",
            "cut_sheet npc papyrus_strips knife papyrus"
        ],
        "desc": [
            "Cut the stalks. About 12 inches (30 cm) of papyrus plant will make a large piece of paper that will be nearly 24 inches (61 cm) in length. Cut off as many stalks as you will need to make the amount of paper you want. The cuts must be diagonally made. Then, cut the tips of the papyrus. You will not use the tips, which are the thinner, grass-like end of the plant.",
            "Weave the strips together. Lay the strips on the cloth. Get a dry sheet of linen cloth or felt. Then, begin to weave them together. You want to create 2 layers of strips, with the top layer strips being perpendicular to the bottom layer strips. It should resemble a placemat. The strips should slightly overlap one another to prevent the papyrus from falling apart later.",
            "Roll the excess water and sugar out of the plant. Grab a rolling pin and use it to roll the strips flat. The rolling pin should be squeezing the water out of them and flattening the strips into sheets.",
            "Cut the paper. The sheet may be larger than you want when it is finished. Use a razor, scissors, or paper cutter to cut the papyrus into smaller sheets. Measure the sizes you are cutting so you will have multiple sheets of the same size.",
            "Cut up the inner portion into strips. Use the knife you used to cut off the outer portion to cut the inner layers of the papyrus plant (pith) into thin strips. Hold the plant in your hand and cut towards you vertically. Make sure that all of the strips have the same size and thickness.",
            "Place the bundle between 2 wooden boards. Make sure that the wooden boards are somewhat heavy. The pressure is necessary to flatten the papyrus strips together. Once the strips have been placed between the boards, press them together. Lay the sandwiched papyrus sheet on a flat surface and allow the wooden boards to flatten the sheet using gravity."
        ],
        "action": [
            "(:action roll_strips; roll the excess water and sugar out of the strips to dry them\n    :parameters (?p - player ?rolling_pin - rolling_pin ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?rolling_pin) (inventory ?p ?papyrus_strips) (soaked ?papyrus_strips))\n    :effect (dried ?papyrus_strips)\n  )",
            "(:action soak_strips; place papyrus strips in water and let them soak\n    :parameters (?p - player ?water - water ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?water) (inventory ?p ?papyrus_strips))\n    :effect (soaked ?papyrus_strips)\n  )",
            "(:action weave_strips; weave the dried papyrus strips into a lattice\n    :parameters (?p - player ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?papyrus_strips) (dried ?papyrus_strips))\n    :effect (woven ?papyrus_strips)\n  )",
            "(:action bundle_strips; bundle the woven strips between linen sheets and wooden boards\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?wooden_boards - wooden_boards ?linen_sheets - linen_sheets)\n    :precondition (and (inventory ?p ?papyrus_strips) (woven ?papyrus_strips) (inventory ?p ?wooden_boards) (inventory ?p ?linen_sheets))\n    :effect (finished ?papyrus_strips)\n  )",
            "(:action cut_sheet; the finished sheet is cut to size to complete the papyrus\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?knife - knife ?papyrus - papyrus)\n    :precondition (and (inventory ?p ?papyrus_strips) (finished ?papyrus_strips) (inventory ?p ?knife))\n    :effect (and (inventory ?p ?papyrus) (not (inventory ?p ?papyrus_strips)))\n  )\n)",
            "(:action cut_stalks; cut papyrus plant into stalks\n    :parameters (?p - player ?knife - knife ?papyrus_plant - papyrus_plant ?papyrus_stalks - papyrus_stalks)\n    :precondition (and (inventory ?p ?knife) (inventory ?p ?papyrus_plant))\n    :effect (and (inventory ?p ?papyrus_stalks) (not (inventory ?p ?papyrus_plant)))\n  )",
            "(:action cut_strips; cut papyrus stalks into strips\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?papyrus_stalks - papyrus_stalks ?knife - knife)\n    :precondition (and (inventory ?p ?knife) (inventory ?p ?papyrus_stalks))\n    :effect (and (inventory ?p ?papyrus_strips) (not (inventory ?p ?papyrus_stalks)))\n  )"
        ]
    },
    {
        "task": "get_papyrus_plant",
        "step": [
            "travel npc home river",
            "search_location npc river",
            "pluck_river_reeds npc papyrus_plant river",
            "travel npc river home"
        ],
        "desc": [
            "Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however.",
            "You can also make the paper out of wide grasses, like river reeds."
        ],
        "action": [
            "(:action travel ; travel from one location to another\n    :parameters (?p - player ?l1 - location ?l2 - location)\n    :precondition (at ?p ?l1)\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action search_location; search location\n    :parameters (?p - player ?l - location)\n    :precondition (at ?p ?l)\n    :effect (searched ?l)\n  )",
            "(:action pluck_river_reeds; obtain the papyrus plant\n    :parameters (?p - player ?papyrus_plant - papyrus_plant ?l - location)\n    :precondition (and (searched ?l) (at ?papyrus_plant ?l) (at ?p ?l))\n    :effect (inventory ?p ?papyrus_plant)\n  )"
        ]
    },
    {
        "task": "pick_car_lock",
        "step": [
            "go up npc living_room hallway",
            "go east npc hallway bathroom",
            "go east npc bathroom bedroom",
            "get coathanger npc bedroom",
            "go west npc bedroom bathroom",
            "go west npc bathroom hallway",
            "go down npc hallway living_room",
            "go east npc living_room office",
            "go east npc office kitchen",
            "go down npc kitchen garage",
            "go out npc garage car",
            "straighten_coathanger npc",
            "insert_hanger npc car",
            "hook_latch npc car",
            "pull_coathanger npc car"
        ],
        "desc": [
            "Unravel and straighten the coat hanger. You can leave the hooked top section alone, but unwind it from itself at the \u201cneck\u201d and straighten the rest of the hanger out, giving you a long metal tool with a hooked tip.",
            "Lift the weather stripping from the bottom of the driver's-side window. Push the end of the hanger in through the soft rubber weather stripping and the bottom of the window. The hanger is now inside the wall of the door.",
            "Hook and pull the latch. Hook the hanger around the latch and pull it towards the rear of the car. This should unlock any manually locked car door."
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action pull_coathanger ;  unlock the car\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (locked_car ?loc) (coathanger_inserted ?loc) (inventory ?p straightened_coathanger) (latch_hooked ?loc)) \n      :effect (not (locked_car ?loc))\n   )\n\n)",
            "(:action hook_latch ;    hook onto car latch  \n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (locked_car ?loc) (coathanger_inserted ?loc) (inventory ?p straightened_coathanger)) \n      :effect (and (latch_hooked ?loc))\n   )",
            "(:action straighten_coathanger ; straighten coathanger\n      :parameters (?p - player) \n      :precondition (and (inventory ?p coathanger)) \n      :effect (and (not (inventory ?p coathanger)) (inventory ?p straightened_coathanger)) \n   )",
            "(:action insert_hanger ;    insert hanger \n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (locked_car ?loc) (inventory ?p straightened_coathanger)) \n      :effect (and (coathanger_inserted ?loc))\n   )"
        ]
    },
    {
        "task": "pick_easy_lock",
        "step": [
            "go east npc living_room office",
            "go east npc office kitchen",
            "get credit_card npc kitchen",
            "go west npc kitchen office",
            "go west npc office living_room",
            "go up npc living_room hallway",
            "go east npc hallway bathroom",
            "go east npc bathroom bedroom",
            "pick_lock_with_card npc bedroom"
        ],
        "desc": [
            "Put the credit card into the side of the door. Slide the long end of a credit card in between the door frame and the locking side of the door, just above where the lock enters the frame."
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action pick_lock_with_card ; pick lock\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_easy_lock ?loc) (inventory ?p credit_card)) \n      :effect (not (has_easy_lock ?loc))\n   )"
        ]
    },
    {
        "task": "pick_hard_lock",
        "step": [
            "go east npc living_room office",
            "go east npc office kitchen",
            "go down npc kitchen garage",
            "get file npc garage",
            "get allen_key npc garage",
            "go up npc garage kitchen",
            "go west npc kitchen office",
            "get paper_clip npc office",
            "go west npc office living_room",
            "go up npc living_room hallway",
            "go east npc hallway bathroom",
            "go east npc bathroom bedroom",
            "file_key_into_wrench npc",
            "insert_wrench npc bedroom",
            "bend_paperclip_into_pick npc",
            "insert_pick npc bedroom",
            "push_pins_out_of_tumblers npc bedroom"
        ],
        "desc": [
            "Make your tools. For weak locks, a pair of paper clips should work; tougher locks might require bobby pins, wire clippers, and a pair of pliers. The key is to use metal firm enough for your pick and your tension wrench, the two components of the tool.",
            "Insert the pick above the wrench. Use the leg of the pick to find and push each pin up and out of the tumbler. Once all pins have been moved, the lock should open. As previously noted, this skill takes a lot of practice to master, so have plenty of cheap practice locks on hand if you hope to get good at it.",
            "The tension wrench is made in an \u201cL\u201d shape and is used to apply tension to the bottom of the lock. You can make this by getting an Allen key and filing it flat."
        ],
        "action": [
            "(:action insert_pick ; insert pick\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_hard_lock ?loc) (inventory ?p pick) (wrench_in_lock ?loc)) \n      :effect (and (pick_in_lock ?loc))\n   )",
            "(:action file_key_into_wrench ; make wrench from allen key\n      :parameters (?p - player) \n      :precondition (and (inventory ?p allen_key) (inventory ?p file)) \n      :effect (and (not (inventory ?p allen_key)) (inventory ?p wrench)) \n   )",
            "(:action push_pins_out_of_tumblers ; pick lock with wrench and pick\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_hard_lock ?loc) (wrench_in_lock ?loc) (pick_in_lock ?loc))\n      :effect (not (has_hard_lock ?loc))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action insert_wrench ; insert wrench \n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_hard_lock ?loc) (inventory ?p wrench)) \n      :effect (and (wrench_in_lock ?loc))\n   )",
            "(:action bend_paperclip_into_pick  ; bend paperclip into pick \n      :parameters (?p - player) \n      :precondition (and (inventory ?p paper_clip)) \n      :effect (and (not (inventory ?p paper_clip)) (inventory ?p pick)) \n   )"
        ]
    },
    {
        "task": "finishing_papyrus",
        "step": [
            "go north npc kitchen cabinet",
            "get roller npc cabinet",
            "go south npc cabinet kitchen",
            "get scissors npc kitchen",
            "get papyrus npc kitchen",
            "go south npc kitchen living_room",
            "get smooth_stone npc living_room",
            "polish_papyrus npc papyrus",
            "cut_paprus npc papyrus scissors",
            "flatten_papyrus npc papyrus roller"
        ],
        "desc": [
            "Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours.",
            "Polish the papyrus. This step isn't absolutely necessary, but it will make the papyrus look nicer and more finished. Use a shell or smooth piece of ivory. Any type of shell that is smooth and without ridges will do. Rub the shell or ivory over the sheet of paper until it appears to be shinier than it was.",
            "Flatten the sheet. The paper may not be completely flat after you remove it from the wooden boards. Put the paper under a stone slab for up to 6 days to make it completely flat."
        ],
        "action": [
            "(:action flatten_papyrus ; Use a roller to make the papyrus flat.\n      :parameters (?p - player ?pap - papyrus ?r - roller) \n      :precondition (and (inventory ?p ?pap) (inventory ?p ?r))\n      :effect  (flattened ?pap)\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action polish_papyrus ; Use a stone to polish the papyrus.\n      :parameters (?p - player ?pap - papyrus) \n      :precondition (and (inventory ?p ?pap) (inventory ?p smooth_stone))\n      :effect  (polished ?pap)\n   )"
        ]
    },
    {
        "task": "preparing_papyrus",
        "step": [
            "get scissors npc kitchen",
            "cut_stalks npc papyrus_tree kitchen papyrus_stalks",
            "papyrus_strips npc papyrus_tree kitchen papyrus_stalks papyrus_strips"
        ],
        "desc": [
            "Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however.",
            "Peel away the outer layer of the papyrus plant. Only the inner part of the plant is used for the paper. You will need to remove the outer green part of the plant. Use a sharp knife and slice down the length of the plant until the entire outer layer is removed. The inside of the plant should be a white or slightly greenish color."
        ],
        "action": [
            "(:action cut_stalks ; cut stalks\n      :parameters (?p - player ?tree - papyrus_tree ?l1 - location ?s - papyrus_stalks) \n      :precondition (and  (at ?p ?l1) (at ?tree ?l1) (inventory ?p scissors))\n      :effect (and (inventory ?p ?s))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action papyrus_strips ; cut strips from stalks\n      :parameters (?p - player ?tree - papyrus_tree ?l1 - location ?pst - papyrus_stalks ?strip - papyrus_strips) \n      :precondition (and  (at ?p ?l1) (at ?tree ?l1) (inventory ?p scissors) (inventory ?p ?pst))\n      :effect (and (inventory ?p ?strip) (not (inventory ?p ?pst)))\n   )",
            "(:action place_strips_between_boards ; place papyrus strips between two wooden boards\n      :parameters (?p - player) \n      :precondition (and (inventory ?p wooden_boards) (inventory ?p papyrus_strips) (strips_woven))\n      :effect (and (strips_between_boards ?item))\n   )"
        ]
    },
    {
        "task": "assembling-disguises",
        "step": [
            "go west npc house bus_stop",
            "go north npc bus_stop costume_store",
            "get_costume npc costume_store costume"
        ],
        "desc": [
            "Find supplies for each disguise. Each of your disguises should have at least three parts, so make sure you have enough supplies for each of your characters to have a full costume!"
        ],
        "action": [
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_costume ; get costume from a store.\n      :parameters (?p - player ?loc - location ?costume - costume) \n      :precondition (and (at ?p ?loc) (sells_costume ?loc))\n      :effect (and (inventory ?p ?costume))\n   )"
        ]
    },
    {
        "task": "make_a_fire",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff clifftop",
            "go east npc clifftop bushwood",
            "get stick npc bushwood",
            "go east npc bushwood clifftop",
            "go down npc clifftop cliff",
            "go east npc cliff path",
            "go east npc path camp",
            "sharpen_stick npc stick",
            "start_fire npc camp stick"
        ],
        "desc": [
            "Test the food you eat for poison. If you've never eaten the fruit that you find on the island, test it for poison by rubbing it on a sensitive part of your skin, like your wrist. Wait 45 minutes. If there is no adverse reaction, rub some of the food on your lips. If you form a rash, or there is burning or irritation, then the food is most likely poisonous. Never eat large amounts of any unknown food. Eat a small amount, wait an hour or two to see if you feel sick, then eat the rest of it.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action start_fire ; start a fire at a location\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (has_fire ?loc))\n  )",
            "(:action get_shellfish ; catch shellfish from a location that has fish.\n     :parameters (?p - player ?loc - location ?shellfish - shellfish)\n     :precondition (and (at ?p ?loc) (has_shellfish ?loc))\n     :effect (and (inventory ?p ?shellfish) (not (edible ?shellfish)))\n  )",
            "(:action go ; navigate to an adjacent location\n     :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location)\n     :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n     :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action get_tarp ; get tarp for shelter construction\n     :parameters (?p - player ?loc - location ?tarp - tarp)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?tarp))\n  )",
            "(:action get_stick ; get a stick from bosk\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (at ?stick ?loc))\n     :effect (and (inventory ?p ?stick) (not (sharpened ?stick)))\n  )",
            "(:action get_leave ; get leaves for shelter construction\n     :parameters (?p - player ?loc - location ?leave - leave)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?leave))\n  )",
            "(:action sharpen_stick ; sharpen stick to hunt fish or bird or to use it to make a fire\n     :parameters (?p - player ?stick - stick)\n     :precondition (and (inventory ?p ?stick) (not (sharpened ?stick)))\n     :effect (and (inventory ?p ?stick) (sharpened ?stick))\n  )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n     :parameters (?p - player ?loc - location ?water - water)\n     :precondition (and (at ?p ?loc) (has_water_source ?loc))\n     :effect (and (inventory ?p ?water) (not (treated ?water)))\n  )",
            "(:action get ; pick up an item and put it in the inventory\n     :parameters (?item - item ?p - player ?l1 - location)\n     :precondition (and (at ?p ?l1) (at ?item ?l1))\n     :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n  )"
        ]
    },
    {
        "task": "hunt_animal_for_food",
        "step": [
            "get stick2 npc camp",
            "sharpen_stick npc stick2",
            "go north npc camp beach",
            "get_shellfish npc beach shellfish",
            "catch_fish npc beach fish stick2",
            "go south npc beach camp",
            "go west npc camp path",
            "hunt_insect npc path insect",
            "go west npc path cliff",
            "go up npc cliff clifftop",
            "start_fire npc clifftop stick2",
            "cook npc clifftop shellfish",
            "hunt_bird npc clifftop bird stick2"
        ],
        "desc": [
            "Test the food you eat for poison. If you've never eaten the fruit that you find on the island, test it for poison by rubbing it on a sensitive part of your skin, like your wrist. Wait 45 minutes. If there is no adverse reaction, rub some of the food on your lips. If you form a rash, or there is burning or irritation, then the food is most likely poisonous. Never eat large amounts of any unknown food. Eat a small amount, wait an hour or two to see if you feel sick, then eat the rest of it.",
            "Heating the water above 185\u00b0 F (85\u00b0 C) for three minutes will kill all pathogens in your water.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action start_fire ; start a fire at a location\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (has_fire ?loc))\n  )",
            "(:action get_shellfish ; catch shellfish from a location that has fish.\n     :parameters (?p - player ?loc - location ?shellfish - shellfish)\n     :precondition (and (at ?p ?loc) (has_shellfish ?loc))\n     :effect (and (inventory ?p ?shellfish) (not (edible ?shellfish)))\n  )",
            "(:action go ; navigate to an adjacent location\n     :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location)\n     :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n     :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action get_tarp ; get tarp for shelter construction\n     :parameters (?p - player ?loc - location ?tarp - tarp)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?tarp))\n  )",
            "(:action catch_fish ; catch fish from a location that has fish.\n     :parameters (?p - player ?loc - location ?fish - fish ?stick - stick)\n     :precondition (and (at ?p ?loc) (has_fish ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (inventory ?p ?fish) (edible ?fish))\n  )",
            "(:action cook ; cook to make animal edible\n     :parameters (?p - player ?loc - location ?animal - animal)\n     :precondition (and (at ?p ?loc) (inventory ?p ?animal) (has_fire ?loc))\n     :effect (and (inventory ?p ?animal) (edible ?animal))\n  )",
            "(:action get_stick ; get a stick from bosk\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (at ?stick ?loc))\n     :effect (and (inventory ?p ?stick) (not (sharpened ?stick)))\n  )",
            "(:action get_leave ; get leaves for shelter construction\n     :parameters (?p - player ?loc - location ?leave - leave)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?leave))\n  )",
            "(:action hunt_bird ; catch a bird from a location that has birds.\n     :parameters (?p - player ?loc - location ?bird - bird ?stick - stick)\n     :precondition (and (at ?p ?loc) (has_bird ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (inventory ?p ?bird) (edible ?bird))\n  )",
            "(:action sharpen_stick ; sharpen stick to hunt fish or bird or to use it to make a fire\n     :parameters (?p - player ?stick - stick)\n     :precondition (and (inventory ?p ?stick) (not (sharpened ?stick)))\n     :effect (and (inventory ?p ?stick) (sharpened ?stick))\n  )",
            "(:action hunt_insect ; catch an insect from a location that has insects.\n     :parameters (?p - player ?loc - location ?insect - insect)\n     :precondition (and (at ?p ?loc) (has_insect ?loc))\n     :effect (and (inventory ?p ?insect) (edible ?insect))\n  )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n     :parameters (?p - player ?loc - location ?water - water)\n     :precondition (and (at ?p ?loc) (has_water_source ?loc))\n     :effect (and (inventory ?p ?water) (not (treated ?water)))\n  )",
            "(:action get ; pick up an item and put it in the inventory\n     :parameters (?item - item ?p - player ?l1 - location)\n     :precondition (and (at ?p ?l1) (at ?item ?l1))\n     :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n  )"
        ]
    },
    {
        "task": "construct_a_sturdy_shelter",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff clifftop",
            "go east npc clifftop bushwood",
            "get stick npc bushwood",
            "go east npc bushwood clifftop",
            "go down npc clifftop cliff",
            "go east npc cliff path",
            "get_tarp npc path tarp",
            "go east npc path camp",
            "construct_shelter npc camp stick tarp leave"
        ],
        "desc": [
            "Scurvy is a serious condition that occurs when you don't have a balanced diet. Symptoms include fatigue, anemia, and infections and is caused by a vitamin C deficiency.",
            "Eating fresh citrus fruits like lemons and oranges can help prevent the condition."
        ],
        "action": [
            "(:action get_shellfish ; catch shellfish from a location that has fish.\n     :parameters (?p - player ?loc - location ?shellfish - shellfish)\n     :precondition (and (at ?p ?loc) (has_shellfish ?loc))\n     :effect (and (inventory ?p ?shellfish) (not (edible ?shellfish)))\n  )",
            "(:action go ; navigate to an adjacent location\n     :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location)\n     :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n     :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action get_tarp ; get tarp for shelter construction\n     :parameters (?p - player ?loc - location ?tarp - tarp)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?tarp))\n  )",
            "(:action get_stick ; get a stick from bosk\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (at ?stick ?loc))\n     :effect (and (inventory ?p ?stick) (not (sharpened ?stick)))\n  )",
            "(:action get_leave ; get leaves for shelter construction\n     :parameters (?p - player ?loc - location ?leave - leave)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?leave))\n  )",
            "(:action construct_shelter ; construct a shelter with stick plus either tarp or leaves\n     :parameters (?p - player ?loc - location ?stick - stick ?tarp - tarp ?leave - leave)\n     :precondition (and (at ?p ?loc) (inventory ?p ?stick) (inventory ?p ?tarp))\n     :effect (and (sheltered ?loc))\n  )\n)",
            "(:action get_water ; get water from a location that has a water source like a lake.\n     :parameters (?p - player ?loc - location ?water - water)\n     :precondition (and (at ?p ?loc) (has_water_source ?loc))\n     :effect (and (inventory ?p ?water) (not (treated ?water)))\n  )",
            "(:action get ; pick up an item and put it in the inventory\n     :parameters (?item - item ?p - player ?l1 - location)\n     :precondition (and (at ?p ?l1) (at ?item ?l1))\n     :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n  )"
        ]
    },
    {
        "task": "drink_water",
        "step": [
            "get container npc camp",
            "go east npc camp path",
            "go east npc path riverside",
            "collect_water npc container water riverside",
            "go north npc riverside rainforest",
            "get_wood npc wood rainforest",
            "make_drill npc wood drill",
            "make_fire npc drill rainforest",
            "filter_water npc water",
            "boil_water npc water rainforest",
            "drink_water npc water"
        ],
        "desc": [
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.",
            "If you don\u2019t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.",
            "Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container."
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action collect_water ; use container to collect water from a location that has water\n      :parameters (?p - player ?container - container ?water - water ?loc - location) \n      :precondition (and (at ?p ?loc) (has_water ?loc) (inventory ?p ?container) (not (inventory ?p ?water)))\n      :effect (and (inventory ?p ?water) (not (filtered ?water)) (not (boiled ?water)))\n   )",
            "(:action boil_water ; boil water to kill any bacteria\n      :parameters (?p - player ?water - water ?loc - location) \n      :precondition (and (inventory ?p ?water) (at ?p ?loc) (filtered ?water) (not (boiled ?water)) (has_fire ?loc))\n      :effect (and (boiled ?water))\n   )",
            "(:action get_foliage ; get foliage from a location that has trees\n      :parameters (?p - player ?foliage - foliage ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?foliage)))\n      :effect (and (inventory ?p ?foliage))\n   )",
            "(:action filter_water ; filter water to remove any particles\n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (not (filtered ?water)))\n      :effect (and (filtered ?water))\n   )",
            "(:action drink_water ; drink boiled water \n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (boiled ?water))\n      :effect (and (not (thirsty ?p)))\n   )",
            "(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )",
            "(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )",
            "(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )"
        ]
    },
    {
        "task": "safe_in_cave",
        "step": [
            "go east npc camp path",
            "go east npc path riverside",
            "go north npc riverside rainforest",
            "get_wood npc wood rainforest",
            "get_foliage npc foliage rainforest",
            "go east npc rainforest cave",
            "make_drill npc wood drill",
            "build_shelter npc wood foliage cave",
            "make_fire npc drill cave",
            "make_spear npc spear wood",
            "survive npc spear cave"
        ],
        "desc": [
            "Think about where you came from if you got lost on foot. Orient yourself using any landmarks you remember, such as a hill in the distance or a river. Get back to a point you remember to find the trail again or head back in the direction of a village that you came from.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "Place shorter sticks and branches against the sides of the center pole. Line the length of the middle stick with branches going outward towards the ground at a 45-degree angle. The more sticks you can find to place along the sides, the easier it will be to cover your shelter.",
            "The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.",
            "Make a 4-pronged bamboo spear to fish with. Find a 6-ft (1.8 m) stalk of bamboo and cut 4- 6 in (15.24 cm) slits into 1 end of it with a knife or sharp rock. Weave a piece of vine into the slits to separate the tip of the bamboo into 4 prongs and sharpen them with a knife or a sharp rock.",
            "If you don\u2019t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.",
            "Cover the sides with leaves and foliage to cover the lean-to shelter. Find large leaves and lay them over top of the frame you built. Cover the shelter as well as you can to protect you from the elements and keep animals out."
        ],
        "action": [
            "(:action build_shelter ; build a shelter using wood and foliage\n      :parameters (?p - player ?wood - wood ?foliage - foliage ?loc - location) \n      :precondition (and (at ?p ?loc) (inventory ?p ?wood) (inventory ?p ?foliage) (not (has_shelter ?loc)))\n      :effect (and (has_shelter ?loc))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_foliage ; get foliage from a location that has trees\n      :parameters (?p - player ?foliage - foliage ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?foliage)))\n      :effect (and (inventory ?p ?foliage))\n   )",
            "(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )",
            "(:action survive ; live safely in the shelter with weapon and fire on\n      :parameters (?p - player ?spear - spear ?loc - location) \n      :precondition (and (at ?p ?loc) (has_shelter ?loc) (has_fire ?loc) (inventory ?p ?spear) (not (safe ?p ?loc)))\n      :effect (and (safe ?p ?loc))\n   )\n)",
            "(:action make_spear ; make a spear using wood to catch fish or defend against predators\n      :parameters (?p - player ?spear - spear ?wood - wood) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?spear)))\n      :effect (and (inventory ?p ?spear))\n   )",
            "(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )",
            "(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )"
        ]
    },
    {
        "task": "eat_fish",
        "step": [
            "go east npc camp path",
            "go east npc path riverside",
            "go north npc riverside rainforest",
            "get_wood npc wood rainforest",
            "go south npc rainforest riverside",
            "make_spear npc spear wood",
            "make_drill npc wood drill",
            "catch_fish npc spear fish riverside",
            "make_fire npc drill riverside",
            "cook_fish npc fish riverside",
            "eat_fish npc fish"
        ],
        "desc": [
            "Build simple hole-in-the-ground traps to catch animals. Dig a hole in the ground and cover it with something like a large leaf. Put a piece of fruit in the middle as bait. When an animal comes to take the fruit, they will fall in the hole and you can kill it, skin it, and cook it to eat it.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.",
            "Make a 4-pronged bamboo spear to fish with. Find a 6-ft (1.8 m) stalk of bamboo and cut 4- 6 in (15.24 cm) slits into 1 end of it with a knife or sharp rock. Weave a piece of vine into the slits to separate the tip of the bamboo into 4 prongs and sharpen them with a knife or a sharp rock.",
            "If you don\u2019t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water."
        ],
        "action": [
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action eat_fish ; eat cooked fish \n      :parameters (?p - player ?fish - fish) \n      :precondition (and (inventory ?p ?fish) (cooked ?fish))\n      :effect (and (not (hungry ?p)))\n   )",
            "(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )",
            "(:action make_spear ; make a spear using wood to catch fish or defend against predators\n      :parameters (?p - player ?spear - spear ?wood - wood) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?spear)))\n      :effect (and (inventory ?p ?spear))\n   )",
            "(:action catch_fish ; catch a fish using spear\n      :parameters (?p - player ?spear - spear ?fish - fish ?loc - location) \n      :precondition (and (at ?p ?loc) (inventory ?p ?spear) (has_fish ?loc) (not (inventory ?p ?fish)))\n      :effect (and (inventory ?p ?fish))\n   )",
            "(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )",
            "(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action cook_fish ; grill fish using fire\n      :parameters (?p - player ?fish - fish ?loc - location) \n      :precondition (and (inventory ?p ?fish) (at ?p ?loc) (has_fire ?loc) (not (cooked ?fish)))\n      :effect (and (cooked ?fish))\n   )"
        ]
    },
    {
        "task": "make_fire",
        "step": [
            "go east npc camp path",
            "go east npc path riverside",
            "go north npc riverside rainforest",
            "get_wood npc wood rainforest",
            "go south npc rainforest riverside",
            "make_drill npc wood drill",
            "make_fire npc drill riverside"
        ],
        "desc": [
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.",
            "If you don\u2019t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water."
        ],
        "action": [
            "(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )"
        ]
    },
    {
        "task": "boil_water",
        "step": [
            "get pot npc camp",
            "go west npc camp path",
            "go south npc path oaks",
            "log_oak npc oaks pot oak_log",
            "get flat_wood npc oaks",
            "get oak_log npc oaks",
            "go north npc oaks path",
            "go north npc path grassland",
            "go north npc grassland bush",
            "break_branch npc bush branch_piece",
            "get_branch npc bush branch",
            "get branch_piece npc bush",
            "go south npc bush grassland",
            "get_water npc grassland water pot",
            "get grass npc grassland",
            "go south npc grassland path",
            "go east npc path camp",
            "cluster_grass npc grass grass_tinder",
            "stack_log npc oak_log log_stack",
            "build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure",
            "ignite_wood npc camp flat_wood branch teepee_structure",
            "ignite_teepee npc camp flat_wood teepee_structure",
            "boil_water npc camp teepee_structure water"
        ],
        "desc": [
            "Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.",
            "Find a branch 10 feet (3.0 m) long and 3\u20136 inches (7.6\u201315.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.",
            "Search for a source of fresh water.",
            "Melt snow or ice if you can find some. If you find ice or snow on the ground in the woods, collect it so you can melt it down for fresh drinking water. You can place the ice or snow in a container and place it next to a fire to melt it or you can hold the container to use your body heat to melt it.",
            "Use dry sticks, branches, or tree bark to serve as your kindling.",
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action ignite_teepee ; ignite teepe with ignited wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (ignited ?wood))\n      :effect (and (ignited ?teepee))\n   )",
            "(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action boil_water ; boil water using a started fire pit\n      :parameters (?p - player ?loc - location ?teepee - teepee ?water - water)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (ignited ?teepee) (inventory ?p ?water))\n      :effect (and (boiled ?water))\n   )\n)",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )",
            "(:action ignite_wood ; ignite wood by plough it to create heat via friction\n      :parameters (?p - player ?loc - location ?wood - wood ?branch - branch ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (inventory ?p ?branch))\n      :effect (and (ignited ?wood))\n   )",
            "(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )",
            "(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )",
            "(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )"
        ]
    },
    {
        "task": "gather_kindling",
        "step": [
            "go west npc camp path",
            "go north npc path grassland",
            "go north npc grassland bush",
            "break_branch npc bush branch_piece",
            "get branch_piece npc bush"
        ],
        "desc": [
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods."
        ],
        "action": [
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )"
        ]
    },
    {
        "task": "collect_fuel",
        "step": [
            "get axe npc camp",
            "go west npc camp path",
            "go south npc path oaks",
            "log_oak npc oaks axe oak_log",
            "get oak_log npc oaks",
            "stack_log npc oak_log log_stack"
        ],
        "desc": [
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )",
            "(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )"
        ]
    },
    {
        "task": "find_tinder",
        "step": [
            "go west npc camp path",
            "go north npc path grassland",
            "get grass npc grassland",
            "cluster_grass npc grass grass_tinder"
        ],
        "desc": [
            "Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods."
        ],
        "action": [
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )"
        ]
    },
    {
        "task": "start_fire",
        "step": [
            "go west npc camp path",
            "go north npc path grassland",
            "go north npc grassland bush",
            "break_branch npc bush branch_piece",
            "get_branch npc bush branch",
            "get branch_piece npc bush",
            "go south npc bush grassland",
            "get grass npc grassland",
            "go south npc grassland path",
            "go south npc path oaks",
            "log_oak npc oaks branch oak_log",
            "get flat_wood npc oaks",
            "get oak_log npc oaks",
            "go north npc oaks path",
            "go east npc path camp",
            "cluster_grass npc grass grass_tinder",
            "stack_log npc oak_log log_stack",
            "build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure",
            "ignite_wood npc camp flat_wood branch teepee_structure",
            "ignite_teepee npc camp flat_wood teepee_structure"
        ],
        "desc": [
            "Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.",
            "Find a branch 10 feet (3.0 m) long and 3\u20136 inches (7.6\u201315.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.",
            "Use dry sticks, branches, or tree bark to serve as your kindling.",
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action ignite_teepee ; ignite teepe with ignited wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (ignited ?wood))\n      :effect (and (ignited ?teepee))\n   )",
            "(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )",
            "(:action ignite_wood ; ignite wood by plough it to create heat via friction\n      :parameters (?p - player ?loc - location ?wood - wood ?branch - branch ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (inventory ?p ?branch))\n      :effect (and (ignited ?wood))\n   )",
            "(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )",
            "(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )",
            "(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )"
        ]
    },
    {
        "task": "build_teepee",
        "step": [
            "go west npc camp path",
            "go north npc path grassland",
            "go north npc grassland bush",
            "break_branch npc bush branch_piece",
            "get branch_piece npc bush",
            "go south npc bush grassland",
            "get grass npc grassland",
            "go south npc grassland path",
            "go south npc path oaks",
            "log_oak npc oaks grass oak_log",
            "get oak_log npc oaks",
            "go north npc oaks path",
            "go east npc path camp",
            "cluster_grass npc grass grass_tinder",
            "stack_log npc oak_log log_stack",
            "build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure"
        ],
        "desc": [
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.",
            "Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.",
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods."
        ],
        "action": [
            "(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )",
            "(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )",
            "(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )",
            "(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )"
        ]
    },
    {
        "task": "clean_water",
        "step": [
            "go west person beach ocean",
            "get rock person ocean",
            "go east person ocean beach",
            "get tinder person beach",
            "go east person beach jungle",
            "chop_wood person jungle wood",
            "go east person jungle river",
            "carve_groove person wood rock",
            "get_water person river water",
            "light_fire person wood beach tinder fire",
            "clean_water person beach water fire",
            "drink_water person water"
        ],
        "desc": [
            "Do not drink salt water from the ocean because it will dehydrate you.",
            "Check for water at the base of leaves or cacti, inside of caves, hollowed trees, or undercut banks.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action clean_water ; boil water to clean it\n      :parameters (?p - player ?loc - location ?water - water ?fire - fire) \n      :precondition (and (inventory ?p ?water) (at ?fire ?loc))\n      :effect (and (treated ?water))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action chop_wood ; chop down wood from a nearby tree.\n      :parameters (?p - player ?loc - location ?wood - wood) \n      :precondition (and (at ?p ?loc) (has_wood ?loc))\n      :effect (and (inventory ?p ?wood) (not (groove ?wood)))\n   )",
            "(:action drink_water ; drink water\n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (treated ?water))\n      :effect (and (drank ?water))\n   )",
            "(:action carve_groove ; create a grove in wood to light flint.\n      :parameters (?p - player ?wood - wood ?rock - rock) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?rock) (not (groove ?wood)))\n      :effect (and (groove ?wood))\n   )",
            "(:action light_fire ; light a fire\n      :parameters (?p - player ?wood - wood ?loc - location ?tinder - tinder ?fire - fire) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?tinder) (can_light_fire ?loc) (groove ?wood))\n      :effect (and (at ?fire ?loc) (not (inventory ?wood)) (not (groove ?wood)))\n   )"
        ]
    },
    {
        "task": "catch_cook_fish",
        "step": [
            "go west person beach ocean",
            "get rock person ocean",
            "go east person ocean beach",
            "get tinder person beach",
            "go east person beach jungle",
            "chop_wood person jungle wood",
            "get vines person jungle",
            "carve_groove person wood rock",
            "make_weapon rock person wood vines spear",
            "light_fire person wood beach tinder fire",
            "hunt_fish person river spear fish",
            "cook_fish person fish fire beach"
        ],
        "desc": [
            "Heating the water above 185\u00b0 F (85\u00b0 C) for three minutes will kill all pathogens in your water.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action hunt_fish ; catch fish with spear\n      :parameters (?p - player ?loc - location ?spear - spear ?fish - fish) \n      :precondition (and (inventory ?p ?spear) (has_fish ?loc))\n      :effect (and (inventory ?p ?fish))\n   )",
            "(:action cook_fish ; cook fish \n      :parameters (?p - player ?fish - fish ?fire - fire ?loc - location) \n      :precondition (and (inventory ?p ?fish) (at ?fire ?loc))\n      :effect (and (cooked ?fish))\n   )   \n)",
            "(:action make_weapon ; create a spear to hunt fish \n      :parameters (?rock - rock ?p - player ?wood - wood ?vines - vines ?spear - spear) \n      :precondition (and (inventory ?p ?rock) (inventory ?p ?vines) (inventory ?p ?wood))\n      :effect (and (inventory ?p ?spear))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action chop_wood ; chop down wood from a nearby tree.\n      :parameters (?p - player ?loc - location ?wood - wood) \n      :precondition (and (at ?p ?loc) (has_wood ?loc))\n      :effect (and (inventory ?p ?wood) (not (groove ?wood)))\n   )",
            "(:action carve_groove ; create a grove in wood to light flint.\n      :parameters (?p - player ?wood - wood ?rock - rock) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?rock) (not (groove ?wood)))\n      :effect (and (groove ?wood))\n   )",
            "(:action light_fire ; light a fire\n      :parameters (?p - player ?wood - wood ?loc - location ?tinder - tinder ?fire - fire) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?tinder) (can_light_fire ?loc) (groove ?wood))\n      :effect (and (at ?fire ?loc) (not (inventory ?wood)) (not (groove ?wood)))\n   )"
        ]
    },
    {
        "task": "start_fire",
        "step": [
            "go east person beach jungle",
            "chop_wood person jungle wood)    8,9,14\n",
            "go west person jungle beach",
            "get tinder person beach",
            "go west person beach ocean",
            "get rock person ocean",
            "carve_groove person wood rock)   9\n",
            "light_fire person wood beach tinder fire)   9,12,3\n"
        ],
        "desc": [
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action chop_wood ; chop down wood from a nearby tree.\n      :parameters (?p - player ?loc - location ?wood - wood) \n      :precondition (and (at ?p ?loc) (has_wood ?loc))\n      :effect (and (inventory ?p ?wood) (not (groove ?wood)))\n   )",
            "(:action carve_groove ; create a grove in wood to light flint.\n      :parameters (?p - player ?wood - wood ?rock - rock) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?rock) (not (groove ?wood)))\n      :effect (and (groove ?wood))\n   )",
            "(:action light_fire ; light a fire\n      :parameters (?p - player ?wood - wood ?loc - location ?tinder - tinder ?fire - fire) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?tinder) (can_light_fire ?loc) (groove ?wood))\n      :effect (and (at ?fire ?loc) (not (inventory ?wood)) (not (groove ?wood)))\n   )"
        ]
    },
    {
        "task": "escape_island",
        "step": [
            "go east person beach jungle",
            "go east person jungle river",
            "find_other_survivors river survivor person",
            "go west person river jungle",
            "chop_wood person jungle wood",
            "get vines person jungle",
            "go west person jungle beach",
            "build_raft beach vines person wood"
        ],
        "desc": [
            "Ration all of your supplies. Do not waste anything, even if you have an overabundance of it. Store away your excess food and water and stick to strict rationing. The body requires 32 ounces of water a day and 200-1500 calories of food for an average person.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action chop_wood ; chop down wood from a nearby tree.\n      :parameters (?p - player ?loc - location ?wood - wood) \n      :precondition (and (at ?p ?loc) (has_wood ?loc))\n      :effect (and (inventory ?p ?wood) (not (groove ?wood)))\n   )",
            "(:action build_raft ; build a raft to escape the deserted island \n      :parameters (?loc - location ?vines - vines ?p - player ?wood - wood) \n      :precondition (and (at ?p ?loc) (at_ocean ?loc) (inventory ?p ?wood) (inventory ?p ?vines) (has_friend ?p))\n      :effect (and (has_escaped ?p))\n   )",
            "(:action find_other_survivors ; find other survivors on the deserted island \n      :parameters (?loc - location ?survivor - survivor ?p - player) \n      :precondition (and (at ?survivor ?loc) (at ?p ?loc))\n      :effect (and (has_friend ?p))\n   )"
        ]
    },
    {
        "task": "hacking2_1",
        "step": [
            "get npc white_permission securing_machine",
            "machine_secured npc white_permission securing_machine next knowing_target",
            "go next npc securing_machine knowing_target"
        ],
        "desc": [
            "Secure your machine first. To hack, you must need a system to practice your great hacking skills. However, make sure you have the authorization to attack your target. You can either attack your network, ask for written permission, or set up your laboratory with virtual machines. Attacking a system without permission, no matter its content is illegal and will get you in trouble."
        ],
        "action": [
            "(:action get ; get a item\n      :parameters (?p - player ?t - item ?l - location)\n      :precondition (and (not (inventory ?p ?t)) (at ?t ?l) (at ?p ?l)) ; \n      :effect (inventory ?p ?t)\n   )",
            "(:action machine_secured ; onward to step2\n      :parameters (?p - player ?permission - permission ?l1 - location ?dir - direction ?l2 - location)\n      :precondition (and (inventory ?p ?permission) (at ?p ?l1) (at ?permission ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2))\n   )"
        ]
    },
    {
        "task": "hacking2_2",
        "step": [
            "get npc applications knowing_target",
            "get npc hostnames knowing_target",
            "get npc ip knowing_target",
            "get npc network knowing_target",
            "get npc settings knowing_target",
            "get npc snmp_and_dns knowing_target",
            "get npc usernames knowing_target",
            "enumeration npc info knowing_target usernames hostnames network ip settings applications snmp_and_dns",
            "got_all_info npc info knowing_target next testing_target",
            "check_email_server npc server_checked knowing_target info",
            "ping npc ping_succeed knowing_target info",
            "go next npc knowing_target testing_target",
            "reached_the_remote_system npc testing_target next running_port_scan ping_succeed server_checked",
            "go next npc testing_target running_port_scan",
            "get npc network_scanner running_port_scan",
            "run_port_scan npc running_port_scan next finding_path network_scanner",
            "go next npc running_port_scan finding_path",
            "get npc tcp_udp_ports finding_path",
            "found_path_in_system npc finding_path next cracking_password tcp_udp_ports",
            "go next npc finding_path cracking_password",
            "crack_password_by_brute_force npc cracking_password password",
            "gain_access_with_password npc cracking_password next getting_superuser_privileges password",
            "go next npc cracking_password getting_superuser_privileges",
            "get npc memory_layout getting_superuser_privileges",
            "create_buffer_overflow npc memory_layout",
            "take_control_of_system npc getting_superuser_privileges next creating_back_door memory_layout",
            "go next npc getting_superuser_privileges creating_back_door",
            "get npc malware creating_back_door",
            "install_malware npc malware creating_back_door",
            "bypass_standard_authentication_system npc creating_back_door next covering_tracks malware",
            "go next npc creating_back_door covering_tracks",
            "create_fewest_file npc covering_tracks track",
            "delete_additional_users npc covering_tracks track",
            "hardcode_password npc covering_tracks track",
            "make_no_change_to_website npc covering_tracks track",
            "not_let_administrator_know npc covering_tracks track",
            "track_covered npc covering_tracks next end_hacking track",
            "go next npc covering_tracks end_hacking"
        ],
        "desc": [
            "Know your target. The process of gathering information about your target is known as enumeration. The goal is to establish an active connection with the target and find vulnerabilities that can be used to further exploit the system. There are a variety of tools and techniques that can help with the enumeration process. Enumeration can be performed on a variety of internet protocols including, NetBIOS, SNMP, NTP, LDAP, SMTP, DNS, and Windows and Linux systems.",
            "Create a backdoor. Once you have gained full control over a machine, it's a good idea to make sure you can come back again. To create a backdoor, you need to install a piece of malware on an important system service, such as the SSH server. This will allow you to bypass the standard authentication system.",
            "Find a path or open port in the system. Common ports such as FTP (21) and HTTP (80) are often well protected, and possibly only vulnerable to exploits yet to be discovered.",
            "Don't make any changes to the website.",
            "Run a scan of the ports. You can use a network scanner to run a port scan. This will show you the ports that are open on the machine, the OS, and can even tell you what type of firewall or router they are using so you can plan a course of action.",
            "If you patched a server like SSHD, make sure it has your secret password hard-coded.",
            "Don't create more files than you need.",
            "If someone tries to log in with this password, the server should let them in, but shouldn't contain any crucial information.",
            "Do not create any additional users. Act as quickly as possible.",
            "The email may contain an attachment that installs spyware or a keylogger. It may also contain a link to a false business website (made by the hacker) that looks authentic. The user is then asked to input their personal information, which the hacker then gains access to. To avoid these scams, don't open emails you don't trust. Always check that a website is secure (includes \"HTTPS\" in the URL). Log in to business sites directly instead of clicking links in an email.",
            "Cover your tracks. Don't let the administrator know that the system is compromised.",
            "Buffer Overflow: If you know the memory layout of a system, you can feed it input the buffer cannot store. You can overwrite the code stored in the memory with your code and take control of the system.",
            "ARP Spoofing: In this technique, a hacker uses an app on his smartphone to create a fake Wi-Fi access point that anyone in a public location can sign into. Hackers can give it a name that looks like it belongs to the local establishment. People sign into it thinking they are signing into public Wi-Fi. The app then logs all data transmitted over the internet by the people signed into it. If they sign in to an account using a username and password over an unencrypted connection, the app will store that data and give the hacker access. To avoid becoming a victim of this heist, avoid using public Wi-Fi. If you must use public Wi-Fi, check with the owner of an establishment to make sure you are signing in to the correct internet access point. Check that your connection is encrypted by looking for a padlock in the URL. You can also use a VPN.",
            "Phishing: In this technique, a hacker sends a fake email to a user that appears to be from a person or company the user trusts."
        ],
        "action": [
            "(:action create_buffer_overflow\n      :parameters (?p - player ?memory_layout - memory_layout)\n      :precondition (and (inventory ?p ?memory_layout) )\n      :effect (is_root_user ?p)\n   )",
            "(:action track_covered\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?track - track)\n      :precondition (and (not (administrator_know_compromised ?p)) (not (create_more_file_than_need ?p)) (not (additional_users ?p)) (hardcoded_secret_password ?p) (website_unchanged ?p) (blocked ?l1 ?dir ?l2) (at ?track ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) )\n   ); ; onward to end\n\n\n  ; NEW ----------------------------------------------------",
            "(:action make_no_change_to_website\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (website_unchanged ?p)\n   )",
            "(:action run_port_scan\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?network_scanner - network_scanner)\n      :precondition (and (at ?p ?l1) (not (port_scanned ?p)) (blocked ?l1 ?dir ?l2) (inventory ?p ?network_scanner))\n      :effect (and (port_scanned ?p) (not (blocked ?l1 ?dir ?l2)))\n   ); onward to step 5",
            "(:action ping;\n      :parameters (?p - player ?ping_succeed - ping_succeed ?l1 - location ?info - all_information)\n      :precondition (and (not (inventory ?p ?ping_succeed)) (at ?p ?l1) (collected_all_info ?p));\n      :effect (inventory ?p ?ping_succeed)\n   )",
            "(:action got_all_info ; onward to step 3 \n      :parameters (?p - player ?info - all_information ?l1 - location ?dir - direction ?l2 - location)\n      :precondition (and (collected_all_info ?p) (at ?p ?l1) (at ?info ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2))\n   )",
            "(:action reached_the_remote_system;\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?ping_succeed - ping_succeed ?server_checked - server_checked)\n      :precondition (and (at ?p ?l1) (inventory ?p ?server_checked) (inventory ?p ?ping_succeed) (blocked ?l1 ?dir ?l2) (at ?ping_succeed ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2)) \n   ); onward to step 4",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action gain_access_with_password\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?password - password)\n      :precondition (and (password_cracked ?p) (blocked ?l1 ?dir ?l2) (at ?password ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) (not (password_cracked ?p)))\n   ); ; onward to step 7",
            "(:action get ; get a item\n      :parameters (?p - player ?t - item ?l - location)\n      :precondition (and (not (inventory ?p ?t)) (at ?t ?l) (at ?p ?l)) ; \n      :effect (inventory ?p ?t)\n   )",
            "(:action crack_password_by_brute_force\n      :parameters (?p - player ?l1 - location ?password - password)\n      :precondition (and (at ?p ?l1) (at ?password ?l1) )\n      :effect (password_cracked ?p)\n   )",
            "(:action hardcode_password\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (hardcoded_secret_password ?p)\n   )",
            "(:action create_fewest_file\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (not (create_more_file_than_need ?p))\n   )",
            "(:action bypass_standard_authentication_system\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?malware - malware)\n      :precondition (and (malware_installed ?p) (blocked ?l1 ?dir ?l2) (at ?malware ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) (not (malware_installed ?p)))\n   ); ; onward to step 9",
            "(:action check_email_server;\n      :parameters (?p - player ?server_checked - server_checked ?l1 - location ?info - all_information)\n      :precondition (and (not (inventory ?p ?server_checked)) (at ?p ?l1) (collected_all_info ?p)); \n      :effect (inventory ?p ?server_checked)\n   )",
            "(:action not_let_administrator_know\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (not (administrator_know_compromised ?p))\n   )",
            "(:action delete_additional_users\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (not (additional_users ?p))\n   )",
            "(:action found_path_in_system\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?TCP_UDP_ports - TCP_UDP_ports)\n      :precondition (and (at ?p ?l1) (blocked ?l1 ?dir ?l2) (inventory ?p ?TCP_UDP_ports) (at ?TCP_UDP_ports ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)))\n   ); onward to step 6",
            "(:action install_malware\n      :parameters (?p - player ?malware - malware ?l1 - location)\n      :precondition (and (inventory ?p ?malware) (at ?malware ?l1) (at ?p ?l1))\n      :effect (malware_installed ?p)\n   )",
            "(:action enumeration;\n      :parameters (?p - player ?info - all_information ?l - location ?usernames - usernames ?hostnames - hostnames ?network - network ?IP - IP ?settings - settings ?applications - applications ?SNMP_and_DNS - SNMP_and_DNS)\n      :precondition (and (not (inventory ?p ?info)) (at ?info ?l) (at ?p ?l) (inventory ?p ?usernames) (inventory ?p ?hostnames) (inventory ?p ?network) (inventory ?p ?IP) (inventory ?p ?settings) (inventory ?p ?applications) (inventory ?p ?SNMP_and_DNS)) ; \n      :effect (collected_all_info ?p)\n   )",
            "(:action take_control_of_system\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?memory_layout - memory_layout)\n      :precondition (and (is_root_user ?p) (blocked ?l1 ?dir ?l2) (at ?memory_layout ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) (not (is_root_user ?p)))\n   ); ; onward to step 8"
        ]
    },
    {
        "task": "hacking1_1",
        "step": [
            "learn npc s_unix",
            "learn npc s_search",
            "learn npc s_py",
            "learn npc s_php",
            "learn npc s_html",
            "learn npc s_cpp",
            "learn npc s_asb",
            "understand npc c_hacking",
            "understand npc c_ethics",
            "learn_unix npc s_unix",
            "learn_internet npc s_html s_search",
            "learn_programming npc s_cpp s_php s_py s_bash s_asb",
            "learn_concepts npc c_hacking c_ethics",
            "become_skilled npc rookie next skilled",
            "go next npc rookie skilled"
        ],
        "desc": [
            "Learn how to program. Learning a programming language might take time, so you need to be patient. Focus on learning to think like a programmer instead of learning individual languages. Focus on similar concepts in all programming languages.",
            "Get an open-sourced Unix-based system and learn to use it. There is a wide family of operating systems that are based on Unix, including Linux. The vast majority of web servers on the internet are Unix-based. So you'll need to learn Unix if you want to hack the internet.",
            "Understand the ethics of hacking. Despite the ways hackers are depicted in popular culture, hacking is neither good nor bad. It can be used for either. Hackers are simply people who are skilled in technology who like to solve problems and overcome limitations. You can use your skills as a hacker to find solutions to problems, or you can use your skills to create problems and engage in illegal activity.",
            "Understand what hacking is. Broadly speaking, hacking refers to a variety of techniques that are used to compromise or gain access to a digital system. This can be a computer, mobile phone or tablet, or an entire network. Hacking involves a variety of specialized skills. Some are very technical. Others are more psychological. There are lots of different types of hackers that are motivated by a variety of different reasons.",
            "Learn how to use the internet and HTML. If you are going to hack, you'll need to know how to use the internet. Not just how to use a web browser, but also how to use advanced search engine techniques. You will also need to know how to create internet content using HTML. Learning HTML will also teach you some good mental habits that will help you with learning to program."
        ],
        "action": [
            "(:action learn_concepts\n      :parameters (\n          ?p  - player\n          ?hk - hacking\n          ?et - ethics\n      )\n      :precondition (and \n          (know ?p ?hk)\n          (know ?p ?et))\n      :effect (and (know_hacking ?p) (know_ethics ?p))\n  )",
            "(:action understand ; understand some concept\n      :parameters (?p - player ?c1 - concept)\n      :precondition (not (know ?p ?c1))\n      :effect (know ?p ?c1)\n   )",
            "(:action got_all_info ; onward to step 3 \n      :parameters (?p - player ?info - all_information ?l1 - location ?dir - direction ?l2 - location)\n      :precondition (and (collected_all_info ?p) (at ?p ?l1) (at ?info ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action learn_internet\n      :parameters (\n          ?p      - player\n          ?html   - html \n          ?search - search\n      )\n      :precondition (and \n          (learned ?p ?html)\n          (learned ?p ?search))\n      :effect (know_internet ?p)\n  )",
            "(:action learn_unix\n      :parameters (\n          ?p    - player\n          ?u    - unix\n      )\n      :precondition (and \n          (learned ?p ?u))\n      :effect (know_unix ?p)\n  )",
            "(:action learn_programming\n      :parameters (\n          ?p    - player\n          ?cp   - cpp\n          ?php  - php\n          ?py   - py\n          ?bash - bash\n          ?asb  - assembly\n      )\n      :precondition (and \n          (learned ?p ?cp)\n          (learned ?p ?php)\n          (learned ?p ?py)\n          (learned ?p ?asb))\n      :effect (know_programming ?p)\n  )",
            "(:action become_skilled\n          :parameters (\n              ?p      - player\n              ?l1     - location \n              ?dir    - direction \n              ?l2     - location)\n          :precondition (and \n              (know_programming ?p)\n              (know_hacking     ?p)\n              (know_ethics      ?p)\n              (know_internet    ?p)\n              (know_unix        ?p))\n          :effect (not (blocked ?l1 ?dir ?l2))\n  )\n  ; -----------------------------------------------------------------------\n\n)",
            "(:action learn ; learn a skill\n      :parameters (?p - player ?k1 - skill)\n      :precondition (not (learned ?p ?k1))\n      :effect (learned ?p ?k1)\n   )"
        ]
    },
    {
        "task": "board_ship",
        "step": [
            "splash_swim out npc open_sea deep_sea shark",
            "spot_ship npc deep_sea ship",
            "onboard npc ship deep_sea"
        ],
        "desc": [
            "Hit the shark in the face and gills.Your best bet, if attacked, is to make the shark see you as a strong, credible threat. Usually, a hard blow to the shark's gills, eyes or snout (end of its nose) will cause it to retreat.",
            "Sharks have several different attack methods. Sometimes they swim right up and charge, sometimes they circle for a while before lunging, and sometimes they sneak up from behind for a surprise attack. To be able to defend against the shark, you must know where it is, so make every effort to watch the animal, even as you are working out your escape."
        ],
        "action": [
            "(:action spot_ship ; spot ships that are nearby\n      :parameters (?p - player ?loc - location ?shp - ship) \n      :precondition (and (at ?p ?loc) (at ?shp ?loc))\n      :effect (and (visible ?shp))\n   )",
            "(:action splash_swim ; swim with loud sounds - you don't get to monitor the shark!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)) (attacked ?p ?s))\n   )",
            "(:action swim ; swim normally till you reach safety!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (attacked ?p ?s)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)))\n   )",
            "(:action onboard ; get on to the ship\n      :parameters (?p - player ?shp - ship ?loc - location) \n      :precondition (and (at ?p ?loc) (at ?shp ?loc) (visible ?shp))\n      :effect (and (on ?p ?shp))\n   )"
        ]
    },
    {
        "task": "ultimate_win",
        "step": [
            "splash_swim out npc open_sea deep_sea shark",
            "get spear npc deep_sea",
            "spot_ship npc deep_sea ship",
            "defend npc shark",
            "attack_vulnerable npc shark spear eye deep_sea ship",
            "onboard npc ship deep_sea",
            "medicare npc ship"
        ],
        "desc": [
            "Do not block the shark's path. If you are standing between the shark and the open ocean, move away.",
            "Hit the shark in the face and gills.Your best bet, if attacked, is to make the shark see you as a strong, credible threat. Usually, a hard blow to the shark's gills, eyes or snout (end of its nose) will cause it to retreat.",
            "Do not take your eyes off the shark.",
            "Sharks have several different attack methods. Sometimes they swim right up and charge, sometimes they circle for a while before lunging, and sometimes they sneak up from behind for a surprise attack. To be able to defend against the shark, you must know where it is, so make every effort to watch the animal, even as you are working out your escape.",
            "If you have a spear gun or pole, use it! A sharp object is a good way to inflict enough pain to scare away the shark. Aim for the head, specifically the eyes or the gills."
        ],
        "action": [
            "(:action splash_swim ; swim with loud sounds - you don't get to monitor the shark!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)) (attacked ?p ?s))\n   )",
            "(:action medicare ; get help from medicare, to deal with your wounds\n      :parameters (?p - player ?sh - ship)\n      :precondition (and (on ?p ?sh) (wounded ?p))\n      :effect (and (not (wounded ?p)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action defend ; defend yourself\n      :parameters (?p - player ?s - shark) \n      :precondition (and (attacked ?p ?s))\n      :effect (and (not (attacked ?p ?s)) (wounded ?p) (defending ?p))\n   )",
            "(:action attack_vulnerable ; attack shark on its eyes / gill / snout\n      :parameters (?p - player ?s - shark ?tool - item ?pt - part ?loc - location ?sh - ship) \n      :precondition (and (at ?p ?loc) (at ?s ?loc) (inventory ?p ?tool) (vulnerable ?pt) (sharp ?tool) (not (on ?p ?sh)))\n      :effect (and (fleed ?s) (not (attacked ?p ?s)))\n   )",
            "(:action onboard ; get on to the ship\n      :parameters (?p - player ?shp - ship ?loc - location) \n      :precondition (and (at ?p ?loc) (at ?shp ?loc) (visible ?shp))\n      :effect (and (on ?p ?shp))\n   )",
            "(:action spot_ship ; spot ships that are nearby\n      :parameters (?p - player ?loc - location ?shp - ship) \n      :precondition (and (at ?p ?loc) (at ?shp ?loc))\n      :effect (and (visible ?shp))\n   )",
            "(:action swim ; swim normally till you reach safety!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (attacked ?p ?s)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)))\n   )"
        ]
    },
    {
        "task": "defend_position",
        "step": [
            "splash_swim in npc open_sea shallow_sea shark",
            "defend npc shark"
        ],
        "desc": [
            "Sharks have several different attack methods. Sometimes they swim right up and charge, sometimes they circle for a while before lunging, and sometimes they sneak up from behind for a surprise attack. To be able to defend against the shark, you must know where it is, so make every effort to watch the animal, even as you are working out your escape.",
            "Do not take your eyes off the shark."
        ],
        "action": [
            "(:action splash_swim ; swim with loud sounds - you don't get to monitor the shark!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)) (attacked ?p ?s))\n   )",
            "(:action swim ; swim normally till you reach safety!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (attacked ?p ?s)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)))\n   )",
            "(:action defend ; defend yourself\n      :parameters (?p - player ?s - shark) \n      :precondition (and (attacked ?p ?s))\n      :effect (and (not (attacked ?p ?s)) (wounded ?p) (defending ?p))\n   )"
        ]
    },
    {
        "task": "reinforce_basement",
        "step": [
            "walk north npc home garage",
            "get car npc garage",
            "get_in_car npc garage car",
            "drive east npc garage highway",
            "drive down npc highway mall",
            "drive east npc mall homedepot",
            "get concrete npc homedepot",
            "walk west npc homedepot mall",
            "drive up npc mall highway",
            "drive west npc highway garage",
            "drive south npc garage home",
            "make_plan npc home",
            "drive in npc home basement",
            "reinforce npc basement concrete"
        ],
        "desc": [
            "Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food \u2014 you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival."
        ],
        "action": [
            "(:action reinforce\n      :parameters (?p - player ?l1 - location ?obj - item) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj) (is_construction_material ?obj))\n      :effect (and (reinforced ?l1) )\n  )",
            "(:action walk\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_food\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (is_supermarket ?l1) (is_nonperishable ?obj) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action make_plan\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_home ?l1))\n      :effect (and (has_plan ?p))\n   )",
            "(:action get_medicine\n      :parameters (?obj -item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_pharmacy ?l1) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n  )",
            "(:action get\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (not (is_supermarket ?l1)))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action drive\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (driving ?p) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_in_car\n      :parameters (?p - player ?l1 - location ?obj - item)\n      :precondition (and (at ?p ?l1) (inventory ?p ?obj) (is_car ?obj))\n      :effect (and (driving ?p) (inventory ?p ?obj))\n  )\n\n)",
            "(:action stay_in_shelter\n      :parameters (?p - player ?l1 - location ?obj1 - item ) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj1) (is_nonperishable ?obj1) (reinforced ?l1) (is_underground ?l1))\n      :effect (and (sheltered ?p) )\n  )"
        ]
    },
    {
        "task": "get_essential_items",
        "step": [
            "make_plan npc home",
            "walk north npc home garage",
            "get car npc garage",
            "get_in_car npc garage car",
            "drive east npc garage highway",
            "drive down npc highway mall",
            "drive east npc mall homedepot",
            "get wood npc homedepot",
            "walk west npc homedepot mall",
            "drive north npc mall wholefoods",
            "get_food canned_food npc wholefoods",
            "walk south npc wholefoods mall",
            "drive south npc mall pharmacy",
            "get medical_supplies npc pharmacy"
        ],
        "desc": [
            "Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food \u2014 you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival.",
            "Stock up on non-perishable food. Non-perishables can last several years, whether it's in storage or in sustaining you after an attack. Choose items that contain a lot of carbohydrates, so you get more caloric bang for your buck, and store them in a cool, dry place."
        ],
        "action": [
            "(:action walk\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_food\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (is_supermarket ?l1) (is_nonperishable ?obj) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action make_plan\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_home ?l1))\n      :effect (and (has_plan ?p))\n   )",
            "(:action get_medicine\n      :parameters (?obj -item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_pharmacy ?l1) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n  )",
            "(:action get\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (not (is_supermarket ?l1)))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action drive\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (driving ?p) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_in_car\n      :parameters (?p - player ?l1 - location ?obj - item)\n      :precondition (and (at ?p ?l1) (inventory ?p ?obj) (is_car ?obj))\n      :effect (and (driving ?p) (inventory ?p ?obj))\n  )\n\n)"
        ]
    },
    {
        "task": "stay_sheltered_with_food",
        "step": [
            "make_plan npc home",
            "walk north npc home garage",
            "get car npc garage",
            "get_in_car npc garage car",
            "drive east npc garage highway",
            "drive down npc highway mall",
            "drive east npc mall homedepot",
            "get concrete npc homedepot",
            "walk west npc homedepot mall",
            "drive north npc mall wholefoods",
            "get_food canned_food npc wholefoods",
            "walk south npc wholefoods mall",
            "drive up npc mall highway",
            "drive west npc highway garage",
            "drive south npc garage home",
            "drive in npc home basement",
            "reinforce npc basement concrete",
            "stay_in_shelter npc basement canned_food"
        ],
        "desc": [
            "Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food \u2014 you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival.",
            "Stock up on non-perishable food. Non-perishables can last several years, whether it's in storage or in sustaining you after an attack. Choose items that contain a lot of carbohydrates, so you get more caloric bang for your buck, and store them in a cool, dry place."
        ],
        "action": [
            "(:action reinforce\n      :parameters (?p - player ?l1 - location ?obj - item) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj) (is_construction_material ?obj))\n      :effect (and (reinforced ?l1) )\n  )",
            "(:action walk\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_food\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (is_supermarket ?l1) (is_nonperishable ?obj) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action make_plan\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_home ?l1))\n      :effect (and (has_plan ?p))\n   )",
            "(:action get_medicine\n      :parameters (?obj -item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_pharmacy ?l1) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n  )",
            "(:action get\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (not (is_supermarket ?l1)))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action drive\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (driving ?p) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_in_car\n      :parameters (?p - player ?l1 - location ?obj - item)\n      :precondition (and (at ?p ?l1) (inventory ?p ?obj) (is_car ?obj))\n      :effect (and (driving ?p) (inventory ?p ?obj))\n  )\n\n)",
            "(:action stay_in_shelter\n      :parameters (?p - player ?l1 - location ?obj1 - item ) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj1) (is_nonperishable ?obj1) (reinforced ?l1) (is_underground ?l1))\n      :effect (and (sheltered ?p) )\n  )"
        ]
    },
    {
        "task": "fill_the_glass",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "flip coconut glass glass_filled"
        ],
        "desc": [
            "Poke a hole in the \u201ceye\u201d of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or \u201ceyes\u201d at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it\u2019s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it."
        ],
        "action": [
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )"
        ]
    },
    {
        "task": "remove_fibre_from_coconut_meat",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "get towel",
            "flip coconut glass glass_filled",
            "wrap coconut glass_filled coconut_wrapped towel",
            "get mallet",
            "hit coconut_wrapped mallet coconut_broken",
            "free coconut_meat screwdriver coconut_broken",
            "get peeler",
            "remove_fiber coconut_meat peeler coconut_meat_peeled"
        ],
        "desc": [
            "Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.",
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don\u2019t have hot coconut bits flying everywhere when you go to smash it in the next step.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Poke a hole in the \u201ceye\u201d of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or \u201ceyes\u201d at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it\u2019s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Alternatively, strike the coconut against a concrete surface. If you don\u2019t have a hammer or mallet, you can use a solid surface like a porch or possibly a concrete countertop. Try to strike the coconut\u2019s equator against the corner of this surface, using it as a makeshift wedge. Repeatedly strike the coconut all around its equator until the coconut breaks apart."
        ],
        "action": [
            "(:action hit ; hit the wrapped coconut with a mallet\n      :parameters (?cw - coconut_wrapped ?m - mallet ?cb - coconut_broken) \n      :precondition (and (inventory ?m) (inventory ?cw))\n      :effect (and (not (inventory ?cw)) (inventory ?cb))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action remove_fiber ; remove the fiber from the meat\n      :parameters (?cm - coconut_meat ?p - peeler ?cp - coconut_meat_peeled) \n      :precondition (and (inventory ?p) (inventory ?cm))\n      :effect (and (not (inventory ?cm)) (inventory ?cp))\n   )\n)",
            "(:action wrap ; wrap the coconut\n      :parameters (?c - coconut ?cow - container_with_water ?cw - coconut_wrapped ?t - towel) \n      :precondition (and (inventory ?c) (inventory ?t) (inventory ?cow))\n      :effect (and (not (inventory ?c)) (inventory ?cw))\n   )",
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )",
            "(:action free ; run a knife between the shell and the meat to free it\n      :parameters (?cm - coconut_meat ?t - tool ?cb - coconut_broken) \n      :precondition (and (inventory ?t) (inventory ?cb))\n      :effect (and (not (inventory ?cb)) (inventory ?cm))\n   )"
        ]
    },
    {
        "task": "free_the_meat_from_coconut",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "get towel",
            "flip coconut glass glass_filled",
            "wrap coconut glass_filled coconut_wrapped towel",
            "get mallet",
            "hit coconut_wrapped mallet coconut_broken",
            "free coconut_meat screwdriver coconut_broken"
        ],
        "desc": [
            "Alternatively, strike the coconut against a concrete surface. If you don\u2019t have a hammer or mallet, you can use a solid surface like a porch or possibly a concrete countertop. Try to strike the coconut\u2019s equator against the corner of this surface, using it as a makeshift wedge. Repeatedly strike the coconut all around its equator until the coconut breaks apart.",
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don\u2019t have hot coconut bits flying everywhere when you go to smash it in the next step.",
            "Poke a hole in the \u201ceye\u201d of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or \u201ceyes\u201d at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it\u2019s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it."
        ],
        "action": [
            "(:action hit ; hit the wrapped coconut with a mallet\n      :parameters (?cw - coconut_wrapped ?m - mallet ?cb - coconut_broken) \n      :precondition (and (inventory ?m) (inventory ?cw))\n      :effect (and (not (inventory ?cw)) (inventory ?cb))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action wrap ; wrap the coconut\n      :parameters (?c - coconut ?cow - container_with_water ?cw - coconut_wrapped ?t - towel) \n      :precondition (and (inventory ?c) (inventory ?t) (inventory ?cow))\n      :effect (and (not (inventory ?c)) (inventory ?cw))\n   )",
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )",
            "(:action free ; run a knife between the shell and the meat to free it\n      :parameters (?cm - coconut_meat ?t - tool ?cb - coconut_broken) \n      :precondition (and (inventory ?t) (inventory ?cb))\n      :effect (and (not (inventory ?cb)) (inventory ?cm))\n   )"
        ]
    },
    {
        "task": "wrap_the_coconut_in_towel",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "get towel",
            "flip coconut glass glass_filled",
            "wrap coconut glass_filled coconut_wrapped towel"
        ],
        "desc": [
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don\u2019t have hot coconut bits flying everywhere when you go to smash it in the next step.",
            "Poke a hole in the \u201ceye\u201d of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or \u201ceyes\u201d at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it\u2019s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it."
        ],
        "action": [
            "(:action hit ; hit the wrapped coconut with a mallet\n      :parameters (?cw - coconut_wrapped ?m - mallet ?cb - coconut_broken) \n      :precondition (and (inventory ?m) (inventory ?cw))\n      :effect (and (not (inventory ?cw)) (inventory ?cb))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action wrap ; wrap the coconut\n      :parameters (?c - coconut ?cow - container_with_water ?cw - coconut_wrapped ?t - towel) \n      :precondition (and (inventory ?c) (inventory ?t) (inventory ?cow))\n      :effect (and (not (inventory ?c)) (inventory ?cw))\n   )",
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )"
        ]
    },
    {
        "task": "poke_eyes",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver"
        ],
        "desc": [
            "Poke a hole in the \u201ceye\u201d of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or \u201ceyes\u201d at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it\u2019s bored through the shell), remove it by wiggling it out, widening the new hole in the process."
        ],
        "action": [
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )"
        ]
    },
    {
        "task": "hit_coconut_with_mallet",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "get towel",
            "flip coconut glass glass_filled",
            "wrap coconut glass_filled coconut_wrapped towel",
            "get mallet",
            "hit coconut_wrapped mallet coconut_broken"
        ],
        "desc": [
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don\u2019t have hot coconut bits flying everywhere when you go to smash it in the next step.",
            "Poke a hole in the \u201ceye\u201d of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or \u201ceyes\u201d at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it\u2019s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it."
        ],
        "action": [
            "(:action hit ; hit the wrapped coconut with a mallet\n      :parameters (?cw - coconut_wrapped ?m - mallet ?cb - coconut_broken) \n      :precondition (and (inventory ?m) (inventory ?cw))\n      :effect (and (not (inventory ?cw)) (inventory ?cb))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action wrap ; wrap the coconut\n      :parameters (?c - coconut ?cow - container_with_water ?cw - coconut_wrapped ?t - towel) \n      :precondition (and (inventory ?c) (inventory ?t) (inventory ?cow))\n      :effect (and (not (inventory ?c)) (inventory ?cw))\n   )",
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )"
        ]
    },
    {
        "task": "build_raft",
        "step": [
            "go north npc beach root_of_tree",
            "go north npc root_of_tree jungle",
            "go east npc jungle hills",
            "get vines npc hills",
            "go west npc hills jungle",
            "get log npc jungle",
            "go south npc jungle root_of_tree",
            "go south npc root_of_tree beach",
            "build_raft npc log vines raft_draft",
            "test_raft npc beach raft_draft raft_finished"
        ],
        "desc": [
            "Create a rescue signal. If you hope to be rescued, it's a good idea to leave rescuers with a signal. The signal you create will help search parties find your location and get you home more quickly than you would otherwise. You might try making some of these rescue signals to make you more visible:"
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action build_raft ; build a raft.\n      :parameters (?p - player ?l - log ?v - vines ?r - raft_draft) \n      :precondition (and (inventory ?p ?l) (inventory ?p ?v))\n      :effect (and (inventory ?p ?r))\n   )",
            "(:action test_raft ; test a raft before riding it.\n      :parameters (?p - player ?loc - location ?rd - raft_draft ?rf - raft_finished) \n      :precondition (and (at ?p ?loc) (haswater ?loc) (inventory ?p ?rd))\n      :effect (and (inventory ?p ?rf))\n   )\n\n\n\n)"
        ]
    },
    {
        "task": "prepare_meat",
        "step": [
            "go north npc beach root_of_tree",
            "go north npc root_of_tree jungle",
            "go east npc jungle hills",
            "get sharp_stone npc hills",
            "go west npc hills jungle",
            "hunt_animal npc jungle sharp_stone animal",
            "prepare_animal npc jungle sharp_stone animal"
        ],
        "desc": [
            "",
            "Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:"
        ],
        "action": [
            "(:action prepare_animal ; prepare animals with a sharp stone before eating it.\n      :parameters (?p - player ?loc - location ?s - sharp_stone ?a - animal) \n      :precondition (and (at ?p ?loc) (inventory ?p ?s) (inventory ?p ?a))\n      :effect (and (treated ?a))\n   )",
            "(:action hunt_animal ; hunt animals with a sharp stone.\n      :parameters (?p - player ?loc - location ?s - sharp_stone ?a - animal) \n      :precondition (and (at ?p ?loc) (at ?a ?loc) (inventory ?p ?s))\n      :effect (and (inventory ?p ?a) (not (treated ?a)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ]
    },
    {
        "task": "create_shelter",
        "step": [
            "go north npc beach root_of_tree",
            "go up npc root_of_tree top_of_tree",
            "get leaves npc top_of_tree",
            "go down npc top_of_tree root_of_tree",
            "go north npc root_of_tree jungle",
            "get small_sticks npc jungle",
            "get log npc jungle",
            "go south npc jungle root_of_tree",
            "build_wall npc root_of_tree small_sticks wall",
            "build_roof npc root_of_tree log roof",
            "build_bed npc root_of_tree leaves bed",
            "complete_shelter npc root_of_tree roof wall bed shelter"
        ],
        "desc": [
            ""
        ],
        "action": [
            "(:action build_wall ; build wall with small sticks.\n      :parameters (?p - player ?loc - location ?i - small_sticks ?w - wall) \n      :precondition (and (at ?p ?loc) (inventory ?p ?i) (not (at ?w ?loc)))\n      :effect (and (at ?w ?loc) (not (inventory ?p ?i)))\n   )",
            "(:action build_bed ; build bed with leaves.\n      :parameters (?p - player ?loc - location ?i - leaves ?b - bed) \n      :precondition (and (at ?p ?loc) (inventory ?p ?i) (not (at ?b ?loc)))\n      :effect (and (at ?b ?loc) (not (inventory ?p ?i)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action complete_shelter ; complete shelter with roof, wall and bed.\n      :parameters (?p - player ?loc - location ?r - roof ?w - wall ?b - bed ?s - shelter) \n      :precondition (and (at ?p ?loc) (at ?b ?loc) (at ?r ?loc) (at ?w ?loc) (at ?b ?loc))\n      :effect (and (at ?s ?loc))\n   )",
            "(:action build_roof ; build roof with log.\n      :parameters (?p - player ?loc - location ?i - log ?r - roof) \n      :precondition (and (at ?p ?loc) (inventory ?p ?i) (not (at ?r ?loc)))\n      :effect (and (at ?r ?loc) (not (inventory ?p ?i)))\n   )"
        ]
    },
    {
        "task": "get_coconut_juice",
        "step": [
            "go west npc counter fridge",
            "get coconut npc fridge",
            "go east npc fridge counter",
            "go north npc counter rack",
            "get knife npc rack",
            "pierce npc",
            "drain npc rack"
        ],
        "desc": [
            "Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef\u2019s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it."
        ],
        "action": [
            "(:action pierce ; pierce the coconut\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (not(pierced coconut)) (inventory ?p knife))\n      :effect (pierced coconut)\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action drain\n      :parameters (?p - player ?l - location)\n      :precondition (and (inventory ?p coconut) (pierced coconut) (not(smashed coconut)) (not(burnt coconut)) (at glass ?l) (at ?p ?l))\n      :effect (and (inventory ?p coconut_juice) (empty coconut))\n   )"
        ]
    },
    {
        "task": "get_coconut_meat_without_oven",
        "step": [
            "go west npc counter fridge",
            "get coconut npc fridge",
            "go east npc fridge counter",
            "get mallet npc counter",
            "go north npc counter rack",
            "get knife npc rack",
            "get towel npc rack",
            "pierce npc",
            "drain npc rack",
            "go south npc rack counter",
            "wrap_coconut npc towel",
            "smash_with_mallet npc",
            "unwrap_coconut npc towel",
            "drop towel npc counter",
            "separate npc bag",
            "peel npc"
        ],
        "desc": [
            "Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef\u2019s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.",
            "Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Wrap the mature coconut in a kitchen towel. Place the coconut in the center of the towel, and gather the corners of the towel together to form a pouch. This will keep coconut bits from flying when you go to smash it with a hammer."
        ],
        "action": [
            "(:action drop\n      :parameters (?i - item ?p - player ?l - location)\n      :precondition (and (at ?p ?l) (inventory ?p ?i))\n      :effect (and (at ?i ?l) (not (inventory ?p ?i)))\n   )",
            "(:action pierce ; pierce the coconut\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (not(pierced coconut)) (inventory ?p knife))\n      :effect (pierced coconut)\n   )",
            "(:action unwrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (wrapped coconut) (wrapped_with coconut ?w))\n      :effect (and (not (wrapped coconut)) (not(wrapped_with coconut ?w)) (inventory ?p ?w))\n   )",
            "(:action smash_with_mallet\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (inventory ?p mallet) (wrapped_with coconut towel) (empty coconut) (not(burnt coconut)) (not(smashed coconut)) (at ?p counter))\n      :effect (smashed coconut)\n   )\n)",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action drain\n      :parameters (?p - player ?l - location)\n      :precondition (and (inventory ?p coconut) (pierced coconut) (not(smashed coconut)) (not(burnt coconut)) (at glass ?l) (at ?p ?l))\n      :effect (and (inventory ?p coconut_juice) (empty coconut))\n   )",
            "(:action wrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (not(wrapped coconut)) (not(smashed coconut)) (inventory ?p ?w))\n      :effect (and (wrapped coconut) (wrapped_with coconut ?w) (not(inventory ?p ?w)))\n   )",
            "(:action separate\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (inventory ?p knife) (not (wrapped coconut)) (smashed coconut) (at towel counter) (at ?p counter))\n      :effect (and (not (inventory ?p coconut)) (inventory ?p coconut_shell) (inventory ?p coconut_meat))\n   )",
            "(:action peel\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut_meat) (inventory ?p knife) (not(peeled coconut_meat)) (at towel counter) (at ?p counter))\n      :effect (peeled coconut_meat)\n   )"
        ]
    },
    {
        "task": "get_coconut_meat_with_oven",
        "step": [
            "go west npc counter fridge",
            "get coconut npc fridge",
            "go east npc fridge counter",
            "go north npc counter rack",
            "get knife npc rack",
            "get towel npc rack",
            "pierce npc",
            "drain npc rack",
            "go south npc rack counter",
            "get bag npc counter",
            "go south npc counter oven",
            "turn_on_oven npc",
            "burn_item npc",
            "turn_off_oven npc",
            "go north npc oven counter",
            "wrap_coconut npc bag",
            "smash_with_hands npc",
            "drop towel npc counter",
            "unwrap_coconut npc bag",
            "separate npc bag",
            "peel npc"
        ],
        "desc": [
            "Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.",
            "Use a knife to separate the meat from the shell. Remove the coconut pieces from the towel. Take each piece, and wedge a knife between the shell and the white meat of the coconut to carefully separate the two. Then, use the knife (or a vegetable peeler) or remove the fibrous layer that might still be clinging to the outside of the meat.",
            "Wrap the mature coconut in a kitchen towel. Place the coconut in the center of the towel, and gather the corners of the towel together to form a pouch. This will keep coconut bits from flying when you go to smash it with a hammer.",
            "Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef\u2019s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don\u2019t have hot coconut bits flying everywhere when you go to smash it in the next step."
        ],
        "action": [
            "(:action turn_off_oven\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (on oven))\n      :effect (not (on oven))\n   )",
            "(:action drop\n      :parameters (?i - item ?p - player ?l - location)\n      :precondition (and (at ?p ?l) (inventory ?p ?i))\n      :effect (and (at ?i ?l) (not (inventory ?p ?i)))\n   )",
            "(:action pierce ; pierce the coconut\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (not(pierced coconut)) (inventory ?p knife))\n      :effect (pierced coconut)\n   )",
            "(:action unwrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (wrapped coconut) (wrapped_with coconut ?w))\n      :effect (and (not (wrapped coconut)) (not(wrapped_with coconut ?w)) (inventory ?p ?w))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action drain\n      :parameters (?p - player ?l - location)\n      :precondition (and (inventory ?p coconut) (pierced coconut) (not(smashed coconut)) (not(burnt coconut)) (at glass ?l) (at ?p ?l))\n      :effect (and (inventory ?p coconut_juice) (empty coconut))\n   )",
            "(:action turn_on_oven\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (not (on oven)))\n      :effect (on oven)\n   )",
            "(:action wrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (not(wrapped coconut)) (not(smashed coconut)) (inventory ?p ?w))\n      :effect (and (wrapped coconut) (wrapped_with coconut ?w) (not(inventory ?p ?w)))\n   )",
            "(:action smash_with_hands\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (wrapped_with coconut bag) (not(smashed coconut)) (not(on oven)) (burnt coconut) (at ?p counter))\n      :effect (smashed coconut)\n   )",
            "(:action separate\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (inventory ?p knife) (not (wrapped coconut)) (smashed coconut) (at towel counter) (at ?p counter))\n      :effect (and (not (inventory ?p coconut)) (inventory ?p coconut_shell) (inventory ?p coconut_meat))\n   )",
            "(:action burn_item\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (on oven) (inventory ?p coconut) (empty coconut) (not(burnt coconut)) (not(smashed coconut)))\n      :effect (burnt coconut)\n   )",
            "(:action peel\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut_meat) (inventory ?p knife) (not(peeled coconut_meat)) (at towel counter) (at ?p counter))\n      :effect (peeled coconut_meat)\n   )"
        ]
    },
    {
        "task": "remove_players",
        "step": [
            "gather_info npc ss",
            "set_dress_code npc ss",
            "set_meeting_location npc ss",
            "create_name npc ss",
            "create_secret npc ss",
            "secret_society_is_ready npc ss",
            "initiate_new_member npc adrian ss",
            "initiate_new_member npc chris ss",
            "initiate_new_member npc lara ss",
            "teach_new_member_secret npc adrian ss",
            "teach_new_member_secret adrian chris ss",
            "teach_new_member_secret adrian lara ss",
            "remove_member anish ss",
            "check_if_cult adrian chris lara npc ss"
        ],
        "desc": [
            "Create a secret or a secret mission. A secret society must have something to protect.",
            "Conduct a proper initiation for you and your closest friend. This should be done before you initiate others. That way, you are sure to come up with a good idea. The initiation is one of the most important parts of the society. It has to be something neither of you would do normally. Candle-lighting sets a serious and official tone, which is always good. Secret names are fun to have.",
            "An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.",
            "Initiate well to do people in the society. In a school, initiate the most brilliant and enthusiastic students that seem like clique-material, and they will motivate and inspire others. But you don't want to have too many members. The more members, the less secret it is. Five to ten should be good.",
            "There needs to be a way to get rid of someone if they become bad for the group or start talking\u2014like blabbing the society's secret. If they do, pretend like that was never the secret, but immediately create a new secret. Put this in the rules.",
            "Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were.",
            "Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.",
            "Think of a name. You and your closest friend should discuss what your secret society should be called."
        ],
        "action": [
            "(:action create_name ; create name for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_name ?sc)))\n      :effect (and (has_name ?sc))\n   )",
            "(:action create_secret ; create secret for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_secret ?sc)))\n      :effect (and (has_secret ?sc) (knows_secret ?p ?sc))\n   )",
            "(:action set_meeting_location ; determine a regular secret meeting location for the society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_location ?sc)))\n      :effect (and (has_location ?sc))\n   )",
            "(:action secret_society_is_ready ; check that all prequisites of the secret society are complete\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (not (society_is_ready ?sc)) (has_name ?sc) (has_dress_code ?sc) (has_location ?sc) (has_info ?p) (has_secret ?sc))\n      :effect (and (society_is_ready ?sc))\n   )",
            "(:action initiate_new_member ; add a new member to secret society\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (in ?p1 ?sc) (is_trusted ?p2 ?sc) (friends ?p1 ?p2) (not (in ?p2 ?sc)))\n      :effect (and (in ?p2 ?sc))\n   )",
            "(:action remove_member ; remove an existing society member due to untrustworthiness\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (is_trusted ?p ?sc)))\n      :effect (and (not (in ?p ?sc)))\n   )",
            "(:action teach_new_member_secret ; once a new member becomes trustworthy, teach them the secret\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (in ?p1 ?sc) (in ?p2 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (knows_secret ?p1 ?sc) (not (knows_secret ?p2 ?sc)))\n      :effect (and (knows_secret ?p2 ?sc))\n   )",
            "(:action check_if_cult ; check if the group is large enough for a cult\n      :parameters (?p1 - player ?p2 - player ?p3 - player ?p4 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (not (equals ?p1 ?p2)) (not (equals ?p1 ?p3)) (not (equals ?p1 ?p4)) (not (equals ?p2 ?p3)) (not (equals ?p2 ?p4)) (not (equals ?p3 ?p4)) (in ?p1 ?sc) (in ?p2 ?sc) (in ?p3 ?sc) (in ?p4 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (is_trusted ?p3 ?sc) (is_trusted ?p4 ?sc) (knows_secret ?p1 ?sc) (knows_secret ?p2 ?sc) (knows_secret ?p3 ?sc) (knows_secret ?p4 ?sc))\n      :effect (and (is_cult ?sc))\n   )\n)",
            "(:action set_dress_code ; determines the dress code for the secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_dress_code ?sc)))\n      :effect (and (has_dress_code ?sc))\n   )",
            "(:action gather_info ; read books to gather information on how to create a secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (has_info ?p)))\n      :effect (and (has_info ?p))\n   )"
        ]
    },
    {
        "task": "create_cult",
        "step": [
            "gather_info npc ss",
            "set_dress_code npc ss",
            "set_meeting_location npc ss",
            "create_name npc ss",
            "create_secret npc ss",
            "secret_society_is_ready npc ss",
            "initiate_new_member npc adrian ss",
            "initiate_new_member adrian lara ss",
            "initiate_new_member adrian liam ss",
            "teach_new_member_secret npc adrian ss",
            "teach_new_member_secret adrian lara ss",
            "teach_new_member_secret adrian liam ss",
            "check_if_cult adrian lara liam npc ss"
        ],
        "desc": [
            "Create a secret or a secret mission. A secret society must have something to protect.",
            "Conduct a proper initiation for you and your closest friend. This should be done before you initiate others. That way, you are sure to come up with a good idea. The initiation is one of the most important parts of the society. It has to be something neither of you would do normally. Candle-lighting sets a serious and official tone, which is always good. Secret names are fun to have.",
            "An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.",
            "Initiate well to do people in the society. In a school, initiate the most brilliant and enthusiastic students that seem like clique-material, and they will motivate and inspire others. But you don't want to have too many members. The more members, the less secret it is. Five to ten should be good.",
            "Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were.",
            "Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.",
            "Think of a name. You and your closest friend should discuss what your secret society should be called."
        ],
        "action": [
            "(:action create_name ; create name for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_name ?sc)))\n      :effect (and (has_name ?sc))\n   )",
            "(:action create_secret ; create secret for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_secret ?sc)))\n      :effect (and (has_secret ?sc) (knows_secret ?p ?sc))\n   )",
            "(:action set_meeting_location ; determine a regular secret meeting location for the society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_location ?sc)))\n      :effect (and (has_location ?sc))\n   )",
            "(:action secret_society_is_ready ; check that all prequisites of the secret society are complete\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (not (society_is_ready ?sc)) (has_name ?sc) (has_dress_code ?sc) (has_location ?sc) (has_info ?p) (has_secret ?sc))\n      :effect (and (society_is_ready ?sc))\n   )",
            "(:action initiate_new_member ; add a new member to secret society\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (in ?p1 ?sc) (is_trusted ?p2 ?sc) (friends ?p1 ?p2) (not (in ?p2 ?sc)))\n      :effect (and (in ?p2 ?sc))\n   )",
            "(:action teach_new_member_secret ; once a new member becomes trustworthy, teach them the secret\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (in ?p1 ?sc) (in ?p2 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (knows_secret ?p1 ?sc) (not (knows_secret ?p2 ?sc)))\n      :effect (and (knows_secret ?p2 ?sc))\n   )",
            "(:action check_if_cult ; check if the group is large enough for a cult\n      :parameters (?p1 - player ?p2 - player ?p3 - player ?p4 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (not (equals ?p1 ?p2)) (not (equals ?p1 ?p3)) (not (equals ?p1 ?p4)) (not (equals ?p2 ?p3)) (not (equals ?p2 ?p4)) (not (equals ?p3 ?p4)) (in ?p1 ?sc) (in ?p2 ?sc) (in ?p3 ?sc) (in ?p4 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (is_trusted ?p3 ?sc) (is_trusted ?p4 ?sc) (knows_secret ?p1 ?sc) (knows_secret ?p2 ?sc) (knows_secret ?p3 ?sc) (knows_secret ?p4 ?sc))\n      :effect (and (is_cult ?sc))\n   )\n)",
            "(:action set_dress_code ; determines the dress code for the secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_dress_code ?sc)))\n      :effect (and (has_dress_code ?sc))\n   )",
            "(:action gather_info ; read books to gather information on how to create a secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (has_info ?p)))\n      :effect (and (has_info ?p))\n   )"
        ]
    },
    {
        "task": "ready_sc",
        "step": [
            "gather_info npc ss",
            "create_secret npc ss",
            "create_name npc ss",
            "set_meeting_location npc ss",
            "set_dress_code npc ss",
            "secret_society_is_ready npc ss"
        ],
        "desc": [
            "Create a secret or a secret mission. A secret society must have something to protect.",
            "An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.",
            "Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were.",
            "Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.",
            "Think of a name. You and your closest friend should discuss what your secret society should be called."
        ],
        "action": [
            "(:action create_name ; create name for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_name ?sc)))\n      :effect (and (has_name ?sc))\n   )",
            "(:action create_secret ; create secret for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_secret ?sc)))\n      :effect (and (has_secret ?sc) (knows_secret ?p ?sc))\n   )",
            "(:action set_meeting_location ; determine a regular secret meeting location for the society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_location ?sc)))\n      :effect (and (has_location ?sc))\n   )",
            "(:action secret_society_is_ready ; check that all prequisites of the secret society are complete\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (not (society_is_ready ?sc)) (has_name ?sc) (has_dress_code ?sc) (has_location ?sc) (has_info ?p) (has_secret ?sc))\n      :effect (and (society_is_ready ?sc))\n   )",
            "(:action set_dress_code ; determines the dress code for the secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_dress_code ?sc)))\n      :effect (and (has_dress_code ?sc))\n   )",
            "(:action gather_info ; read books to gather information on how to create a secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (has_info ?p)))\n      :effect (and (has_info ?p))\n   )"
        ]
    },
    {
        "task": "move_to_bunker",
        "step": [
            "go west npc home market",
            "buy_supplies food npc market",
            "buy_supplies medicine npc market",
            "buy_supplies water npc market",
            "check_supplies food water medicine",
            "go west npc market weapon_market",
            "buy_weapons ammunition npc weapon_market",
            "buy_weapons pistol npc weapon_market",
            "go east npc weapon_market market",
            "buy_supplies heat npc market",
            "go east npc market home",
            "go north npc home bunker1",
            "go north npc bunker1 bunker2",
            "check_weapons pistol ammunition",
            "check_bunker bunker2 npc",
            "outfit_bunker_with_energy_source bunker2 npc heat"
        ],
        "desc": [
            "Purchase enough food, water, medicine, and other supplies. If the comet does hit on land, dust and rock particles flying into our atmosphere will make it too dangerous to go outside for months to years.",
            "Move into a bunker or fortified structure and outfit it with an energy source. An underground bunker isn\u2019t only the best for the time of impact; it will also protect you from environmental hazards after the comet has hit. When the comet hits, dust, soot, and water will shoot up into our atmosphere, making it cold for months to years.",
            "A semi-automatic rifle and a pistol with enough ammunition should be more than enough firepower.",
            "Limit your generator usage and only use it if necessary. Your generator will be a lifesaver for many things while you are in your bunker. You can use it to produce heat, cook food, and power lights. However, because most generators run on fuel, it\u2019s important that you limit its usage because you will likely have a limited amount of fuel in your bunker. If you aren't in a bunker, a generator may still work, but there's a good chance that the main power grid will be down.",
            "Buy weapons and ammunition for after the impact. You may be more concerned with withstanding the destruction of the comet impact itself, but you also need to be conscious of the possible dangers of other people after the dust settles.",
            "Make sure to stock your hide-out with canned food, dried goods, non-perishable foods, and bottled water."
        ],
        "action": [
            "(:action buy_supplies ; buy supplies and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - market) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?item))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action outfit_bunker_with_energy_source ; outfit your bunker with an energy source for heat\n      :parameters (?bk - bunker ?p - player ?es - energy_source) \n      :precondition (and (at ?p ?bk) (find_good_bunker ?bk) (inventory ?es))\n      :effect (and (outfit_bunker_with_heat ?bk))\n   )",
            "(:action check_weapons ; check enough supplies in the inventory\n      :parameters (?ps - pistol ?am - ammunition) \n      :precondition (and (inventory ?ps) (inventory ?am))\n      :effect (and (enough_weapons))\n   )",
            "(:action check_supplies ; check enough supplies in the inventory\n      :parameters (?fd - food ?wt - water ?md - medicine) \n      :precondition (and (inventory ?fd) (inventory ?wt) (inventory ?md))\n      :effect (and (enough_supplies))\n   )",
            "(:action check_bunker ; check if the bunker is good for sheiding\n      :parameters (?bk - bunker ?p - player) \n      :precondition (and (at ?p ?bk) (enough_supplies) (enough_weapons) (has_air_filtration_system ?bk) (has_strong_material ?bk))\n      :effect (and (find_good_bunker ?bk))\n   )",
            "(:action buy_weapons ; buy weapons and put it in the inventory (after buy_supplies)\n      :parameters (?wp - weapon ?p - player ?l1 - weapon_market) \n      :precondition (and (at ?p ?l1) (at ?wp ?l1) (enough_supplies))\n      :effect (and (inventory ?wp))\n   )"
        ]
    },
    {
        "task": "listen_to_astronomers_predictions_and_move",
        "step": [
            "listen_to_astronomers_predictions npc home",
            "move_away npc philly salt_lake home"
        ],
        "desc": [
            "Move away from coastal areas. Because the earth is made up of 71% water, there\u2019s a greater likelihood that the comet will hit a body of water. If this does happen, it could mean that giant tsunamis would be created by the initial impact and they would likely destroy our coastal cities. Additionally, there would be an increase in water vapor entering our atmosphere which would cause heavy rain, which could cause landslides and flooding.",
            "Pay attention to astronomers\u2019 predictions on any possible collisions with earth. NASA currently has astronomers that track comets that are flying in our solar system. As a result, there\u2019s a very good chance they will know if there is a large object about to collide with us. By listening to their predictions, you can develop a real sense of how much time you have to prepare."
        ],
        "action": [
            "(:action move_away ; flight from coastal area to inland area \n      :parameters (?p - player ?c1 - city ?c2 - city ?l1 - location) \n      :precondition (and (in ?p ?c1) (coastal ?c1) (inland ?c2) (listen_to_broadcast ?p ?l1))\n      :effect (and (in ?p ?c2) (not (in ?p ?c1)))\n   )",
            "(:action listen_to_astronomers_predictions ; listen to astronomers predictions on collision with earth\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (has_pc ?p))\n      :effect (and (listen_to_broadcast ?p ?l1))\n   )"
        ]
    },
    {
        "task": "final",
        "step": [
            "go west npc home market",
            "buy_supplies food npc market",
            "buy_supplies medicine npc market",
            "buy_supplies water npc market",
            "check_supplies food water medicine",
            "go west npc market weapon_market",
            "buy_weapons ammunition npc weapon_market",
            "buy_weapons pistol npc weapon_market",
            "go east npc weapon_market market",
            "buy_supplies heat npc market",
            "go east npc market home",
            "go north npc home bunker1",
            "go north npc bunker1 bunker2",
            "check_weapons pistol ammunition",
            "check_bunker bunker2 npc",
            "outfit_bunker_with_energy_source bunker2 npc heat",
            "listen_to_astronomers_predictions npc bunker2",
            "enjoylife bunker2 npc",
            "connect_through_social_media_with_family bunker2 npc family philly",
            "move_away npc philly salt_lake bunker2"
        ],
        "desc": [
            "Move away from coastal areas. Because the earth is made up of 71% water, there\u2019s a greater likelihood that the comet will hit a body of water. If this does happen, it could mean that giant tsunamis would be created by the initial impact and they would likely destroy our coastal cities. Additionally, there would be an increase in water vapor entering our atmosphere which would cause heavy rain, which could cause landslides and flooding.",
            "Purchase enough food, water, medicine, and other supplies. If the comet does hit on land, dust and rock particles flying into our atmosphere will make it too dangerous to go outside for months to years.",
            "Don\u2019t believe everything you hear. Early reporting is notoriously inaccurate at times, so wait it out until you hear unified reports.",
            "Move into a bunker or fortified structure and outfit it with an energy source. An underground bunker isn\u2019t only the best for the time of impact; it will also protect you from environmental hazards after the comet has hit. When the comet hits, dust, soot, and water will shoot up into our atmosphere, making it cold for months to years.",
            "A semi-automatic rifle and a pistol with enough ammunition should be more than enough firepower.",
            "Isolation has multiple negative effects on your mental health, so having people with you is a good idea if you want to stay mentally healthy.",
            "Limit your generator usage and only use it if necessary. Your generator will be a lifesaver for many things while you are in your bunker. You can use it to produce heat, cook food, and power lights. However, because most generators run on fuel, it\u2019s important that you limit its usage because you will likely have a limited amount of fuel in your bunker. If you aren't in a bunker, a generator may still work, but there's a good chance that the main power grid will be down.",
            "Pay attention to astronomers\u2019 predictions on any possible collisions with earth. NASA currently has astronomers that track comets that are flying in our solar system. As a result, there\u2019s a very good chance they will know if there is a large object about to collide with us. By listening to their predictions, you can develop a real sense of how much time you have to prepare.",
            "Buy weapons and ammunition for after the impact. You may be more concerned with withstanding the destruction of the comet impact itself, but you also need to be conscious of the possible dangers of other people after the dust settles.",
            "Make sure to stock your hide-out with canned food, dried goods, non-perishable foods, and bottled water."
        ],
        "action": [
            "(:action buy_supplies ; buy supplies and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - market) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?item))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action listen_to_astronomers_predictions ; listen to astronomers predictions on collision with earth\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (has_pc ?p))\n      :effect (and (listen_to_broadcast ?p ?l1))\n   )",
            "(:action outfit_bunker_with_energy_source ; outfit your bunker with an energy source for heat\n      :parameters (?bk - bunker ?p - player ?es - energy_source) \n      :precondition (and (at ?p ?bk) (find_good_bunker ?bk) (inventory ?es))\n      :effect (and (outfit_bunker_with_heat ?bk))\n   )",
            "(:action connect_through_social_media_with_family ; let other family members know you are safe\n      :parameters (?bk - bunker ?p - player ?f - player ?c - city) \n      :precondition (and (at ?p ?bk) (has_pc ?p) (enjoylife ?p ?bk) (not(at ?f ?bk)) (in ?p ?c) (not (in ?f ?c)) )\n      :effect (and (family_memebers_know_you_are_safe))\n   )\n   \n\n)",
            "(:action move_away ; flight from coastal area to inland area \n      :parameters (?p - player ?c1 - city ?c2 - city ?l1 - location) \n      :precondition (and (in ?p ?c1) (coastal ?c1) (inland ?c2) (listen_to_broadcast ?p ?l1))\n      :effect (and (in ?p ?c2) (not (in ?p ?c1)))\n   )",
            "(:action enjoylife ; after all preparation, enjoy life in a bunker\n      :parameters (?bk - bunker ?p - player ) \n      :precondition (and (at ?p ?bk) (outfit_bunker_with_heat ?bk))\n      :effect (and (enjoylife ?p ?bk))\n   )",
            "(:action check_weapons ; check enough supplies in the inventory\n      :parameters (?ps - pistol ?am - ammunition) \n      :precondition (and (inventory ?ps) (inventory ?am))\n      :effect (and (enough_weapons))\n   )",
            "(:action check_supplies ; check enough supplies in the inventory\n      :parameters (?fd - food ?wt - water ?md - medicine) \n      :precondition (and (inventory ?fd) (inventory ?wt) (inventory ?md))\n      :effect (and (enough_supplies))\n   )",
            "(:action check_bunker ; check if the bunker is good for sheiding\n      :parameters (?bk - bunker ?p - player) \n      :precondition (and (at ?p ?bk) (enough_supplies) (enough_weapons) (has_air_filtration_system ?bk) (has_strong_material ?bk))\n      :effect (and (find_good_bunker ?bk))\n   )",
            "(:action buy_weapons ; buy weapons and put it in the inventory (after buy_supplies)\n      :parameters (?wp - weapon ?p - player ?l1 - weapon_market) \n      :precondition (and (at ?p ?l1) (at ?wp ?l1) (enough_supplies))\n      :effect (and (inventory ?wp))\n   )"
        ]
    },
    {
        "task": "Make a Banana Strawberry Rum Smoothie",
        "step": [
            "place-ingredients bananas sorbet yogurt blender-1",
            "blend-mixture blender-1",
            "add-rum-and-blend rum blender-1",
            "pour-into-glass blender-1 glass-1",
            "garnish-glass glass-1 strawberry-1"
        ],
        "desc": [
            "Place the yogurt, bananas, and sorbet in a blender.",
            "Blend the mixture until it's smooth in texture.",
            "Pour the rum in and quickly blend again.",
            "Pour the smoothie into chilled glasses.",
            "Garnish each glass with a strawberry."
        ],
        "action": [
            "(:action place-ingredients\n    :parameters (?y - ingredient ?b - ingredient ?s - ingredient ?bl - blender)\n    :precondition (clean ?bl)\n    :effect (and\n      (in-blender ?y ?bl)\n      (in-blender ?b ?bl)\n      (in-blender ?s ?bl)\n      (not (clean ?bl))\n    )\n  )\n\n  ;; Step 2: Blend the mixture until it's smooth in texture.",
            "(:action blend-mixture\n    :parameters (?bl - blender)\n    :precondition (and\n      (in-blender yogurt ?bl)\n      (in-blender bananas ?bl)\n      (in-blender sorbet ?bl)\n      (not (blended ?bl))\n    )\n    :effect (blended ?bl)\n  )\n\n  ;; Step 3: Pour the rum in and quickly blend again.",
            "(:action add-rum-and-blend\n    :parameters (?r - rum ?bl - blender)\n    :precondition (and\n      (blended ?bl)\n      (not (contains-rum ?bl))\n    )\n    :effect (and\n      (contains-rum ?bl)\n      (smoothie-prepared ?bl)\n    )\n  )\n\n  ;; Step 4: Pour the smoothie into chilled glasses.",
            "(:action pour-into-glass\n    :parameters (?bl - blender ?g - glass)\n    :precondition (and\n      (smoothie-prepared ?bl)\n      (chilled ?g)\n    )\n    :effect (smoothie-in-glass ?g)\n  )\n\n  ;; Step 5: Garnish each glass with a strawberry.",
            "(:action garnish-glass\n    :parameters (?g - glass ?s - strawberry)\n    :precondition (smoothie-in-glass ?g)\n    :effect (garnished ?g)\n  )\n)"
        ]
    },
    {
        "task": "Make a Pinwheel Wreath",
        "step": [
            "select-paper p1",
            "make-pinwheel pw1 p1",
            "choose-wreath-base w1",
            "attach-pinwheel pw1 w1",
            "attach-twine t1 w1"
        ],
        "desc": [
            "Select suitable paper to make the pinwheels.",
            "Make enough pinwheels to create a wreath.",
            "Find a suitable base, such as a Styrofoam/cane/cardboard wreath base.",
            "If the wreath base lacks a hanger, add some twine or ribbon to create one.",
            "Finished."
        ],
        "action": [
            "(:action select-paper\n    :parameters (?p - paper)\n    :precondition (and (not (selected ?p)) (not (knowledge ?p)))\n    :effect (and (selected ?p) (knowledge ?p))\n  )\n\n  ;; \u52a8\u4f5c 2: \u5236\u4f5c\u65cb\u8f6c\u53f6\u7247",
            "(:action make-pinwheel\n    :parameters (?pw - pinwheel ?p - paper)\n    :precondition (and (selected ?p) (has-shape ?p) (not (made ?pw)))\n    :effect (made ?pw)\n  )\n\n  ;; \u52a8\u4f5c 3: \u9009\u62e9\u82b1\u73af\u57fa\u5ea7",
            "(:action choose-wreath-base\n    :parameters (?w - wreath)\n    :precondition (not (base-chosen ?w))\n    :effect (base-chosen ?w)\n  )\n\n  ;; \u52a8\u4f5c 4: \u9644\u52a0\u9ebb\u7ef3/\u4e1d\u5e26",
            "(:action attach-twine\n    :parameters (?t - twine ?w - wreath)\n    :precondition (and (base-chosen ?w) (not (twine-attached ?t)) (not (twine-located ?t)))\n    :effect (and (twine-attached ?t) (twine-located ?t))\n  )\n\n  ;; \u52a8\u4f5c 5: \u9644\u52a0\u65cb\u8f6c\u53f6\u7247\u5230\u82b1\u73af\u57fa\u5ea7",
            "(:action attach-pinwheel\n    :parameters (?pw - pinwheel ?w - wreath)\n    :precondition (and (made ?pw) (base-chosen ?w) (not (attached ?pw)))\n    :effect (attached ?pw)\n  )\n)"
        ]
    },
    {
        "task": "Grow Fairy Moss Indoors",
        "step": [
            "find-container bowl-container",
            "ask-for-moss fairy-moss",
            "fill-bowl water-1 bowl-container",
            "prune fairy-moss",
            "add-fairy-moss fairy-moss water-1",
            "place-suitable-position bowl-container water-1"
        ],
        "desc": [
            "Ask for it at a nursery or garden center that specializes in pond plant varieties.",
            "Find a suitable container.",
            "Fill the bowl with water.",
            "Add the fairy moss.",
            "Place in a suitable position.",
            "Prune."
        ],
        "action": [
            "(:action ask-for-moss\n    :parameters (?p - plant)\n    :precondition (for-sale ?p)\n    :effect (purchased ?p)\n  )\n\n  ;; Action: \u627e\u5230\u9002\u5408\u7684\u5bb9\u5668",
            "(:action find-container\n    :parameters (?c - container)\n    :precondition (loc ?c in-cabinet)\n    :effect (loc ?c on-countertop)\n  )\n\n  ;; Action: \u586b\u5145\u6c34\u7897",
            "(:action fill-bowl\n    :parameters (?w - water ?c - container)\n    :precondition (and\n                    (loc ?c on-countertop)\n                    (wetness ?w dry)\n                    (volume ?c empty))\n    :effect (and\n              (comp ?w filled)\n              (wetness ?w wet)\n              (position-water ?w inside-bowl)\n              (volume ?c filled))\n  )\n\n  ;; Action: \u6dfb\u52a0\u8568\u7c7b\u82d4\u85d3",
            "(:action add-fairy-moss\n    :parameters (?p - plant ?w - water)\n    :precondition (and\n                    (purchased ?p)\n                    (position-plant ?p outside-of-bowl)\n                    (comp ?w filled))\n    :effect (and\n              (position-plant ?p inside-bowl)\n              (comp ?w now-mixed))\n  )\n\n  ;; Action: \u653e\u7f6e\u5230\u5408\u9002\u7684\u4f4d\u7f6e",
            "(:action place-suitable-position\n    :parameters (?c - container ?w - water)\n    :precondition (and\n                    (loc ?c on-countertop)\n                    (position-water ?w inside-bowl))\n    :effect (and\n              (loc ?c on-table)\n              (position-water ?w in-suitable-position))\n  )\n\n  ;; Action: \u4fee\u526a\u8568\u7c7b\u82d4\u85d3",
            "(:action prune\n    :parameters (?p - plant)\n    :precondition (and\n                    (size ?p larger)\n                    (shape ?p mess))\n    :effect (and\n              (size ?p smaller)\n              (shape ?p pruned))\n  )\n)"
        ]
    },
    {
        "task": "Make Rhubarb Cordial",
        "step": [
            "place_ingredients cloves rhubarb sugar water pot stove",
            "simmer_pot pot stove cordial",
            "remove_from_heat pot stove",
            "garnish_with_mint cordial mint_leaves pot"
        ],
        "desc": [
            "Simmer the rhubarb with the sugar, cloves and water.",
            "Simmer until the rhubarb becomes soft.",
            "Remove from the heat.",
            "Add the mint leaves for decoration."
        ],
        "action": [
            "(:action place_ingredients\n    :parameters (?r - ingredient ?s - ingredient ?c - ingredient ?w - ingredient ?pot - tool ?stove - tool)\n    :precondition (pot_on_stove ?pot ?stove)\n    :effect (and\n      (in_pot ?r ?pot)\n      (in_pot ?s ?pot)\n      (in_pot ?c ?pot)\n      (in_pot ?w ?pot)\n    )\n  )\n\n  ;; Action to simmer the pot",
            "(:action simmer_pot\n    :parameters (?pot - tool ?stove - tool ?p - product)\n    :precondition (and\n      (in_pot rhubarb ?pot)\n      (in_pot sugar ?pot)\n      (in_pot cloves ?pot)\n      (in_pot water ?pot)\n      (pot_on_stove ?pot ?stove)\n    )\n    :effect (and\n      (simmering ?pot)\n      (cooked ?pot)\n      (soft rhubarb)\n      (product_ready ?p)\n    )\n  )\n\n  ;; Action to remove pot from heat",
            "(:action remove_from_heat\n    :parameters (?pot - tool ?stove - tool)\n    :precondition (and\n      (simmering ?pot)\n      (pot_on_stove ?pot ?stove)\n    )\n    :effect (and\n      (off_heat ?pot)\n      (not (pot_on_stove ?pot ?stove))\n    )\n  )\n\n  ;; Action to garnish with mint leaves",
            "(:action garnish_with_mint\n    :parameters (?p - product ?d - decoration ?pot - tool)\n    :precondition (and\n      (product_ready ?p)\n      (off_heat ?pot)\n    )\n    :effect (garnished_with ?p ?d)\n  )\n)"
        ]
    },
    {
        "task": "Create a Character in Lego Star Wars",
        "step": [
            "select_character_parts level",
            "save_name_and_exit level",
            "select_character_parts character",
            "save_name_and_exit character",
            "complete_level level",
            "start_game game"
        ],
        "desc": [
            "When you begin the game, you will start as Princess Leia and Captain Antilles in the Star Wars cantina.",
            "Use the up and down arrows to select the part of the character (hat, head, shirt, arms, hands, weapon, belt, and legs) and the left and right arrows to select through a selection of the body part you are on.",
            "Press \"triangle\" to name it, and \"O\" to save and exit.",
            "Now enter a completed level and turn on free play."
        ],
        "action": [
            "(:action start_game\n    :parameters (?g - entity)\n    :precondition (not (game_played ?g))\n    :effect (game_played ?g)\n  )",
            "(:action select_character_parts\n    :parameters (?s - entity)\n    :precondition (not (selection_made ?s))\n    :effect (selection_made ?s)\n  )",
            "(:action save_name_and_exit\n    :parameters (?n - entity)\n    :precondition (and (selection_made ?n) (not (name_saved ?n)))\n    :effect (name_saved ?n)\n  )",
            "(:action complete_level\n    :parameters (?l - entity)\n    :precondition (and (name_saved ?l) (not (level_completed ?l)))\n    :effect (level_completed ?l)\n  )\n)"
        ]
    },
    {
        "task": "Remove Paint from Windows",
        "step": [
            "mix_soap_and_water bucket01 soap_bottle01",
            "wet_window window01 bucket01 sponge01",
            "open_razor_blade_package razor_blade_package01 razor_blade01",
            "scrape_paint window01 razor_blade01",
            "buff_window window01 cloth01",
            "remove_splatters_with_solvent window01 solvent01",
            "spritz_glass_cleaner window01 glass_cleaner_bottle01"
        ],
        "desc": [
            "You will need a bucket of hot water mixed with dish soap, a clean cloth or sponge, a new safety razor blade and some glass cleaner.",
            "Wet the window with the water and dish soap.",
            "Position the razor blade.",
            "Using slow, smooth motions, start scraping the paint from the window.",
            "Once all of the paint has been scraped away, spritz the window with some glass cleaner and use a clean, dry cloth to buff the windows clean.",
            "Remove small paint splatters with chemical solvents."
        ],
        "action": [
            "(:action gather_items\n    :parameters (?items - item)\n    :precondition (not (in_hand ?items))\n    :effect (in_hand ?items)\n  )\n\n  ;;; Action 2: Mix Soap and Water in Bucket",
            "(:action mix_soap_and_water\n    :parameters (?b - bucket ?sb - soap_bottle)\n    :precondition (and\n      (empty ?b)\n      (full ?sb)\n    )\n    :effect (and\n      (mixed ?b)\n      (not (empty ?b))\n      (not (full ?sb))\n    )\n  )\n\n  ;;; Action 3: Wet the Window with Soap Solution",
            "(:action wet_window\n    :parameters (?w - window ?b - bucket ?s - sponge)\n    :precondition (and\n      (dry ?w)\n      (mixed ?b)\n      (clean_tool ?s)\n    )\n    :effect (and\n      (wet ?w)\n      (not (dry ?w))\n      (dirty_tool ?s)\n    )\n  )\n\n  ;;; Action 4: Open Razor Blade Package",
            "(:action open_razor_blade_package\n    :parameters (?rp - razor_blade_package ?rb - razor_blade)\n    :precondition (and\n      (closed ?rp)\n      (not (in_hand ?rb))\n    )\n    :effect (and\n      (open ?rp)\n      (in_hand ?rb)\n      (not (closed ?rp))\n    )\n  )\n\n  ;;; Action 5: Scrape Paint from Window",
            "(:action scrape_paint\n    :parameters (?w - window ?rb - razor_blade)\n    :precondition (and\n      (wet ?w)\n      (in_hand ?rb)\n      (contains_paint ?w)\n    )\n    :effect (and\n      (not (contains_paint ?w))\n      (dirty_tool ?rb)\n      (clean ?w)\n    )\n  )\n\n  ;;; Action 6: Spritz Window with Glass Cleaner",
            "(:action spritz_glass_cleaner\n    :parameters (?w - window ?gcb - glass_cleaner_bottle)\n    :precondition (and\n      (not (contains_paint ?w))\n      (has_glass_cleaner ?gcb)\n      (not (opaque ?w))\n    )\n    :effect (and\n      (opaque ?w)\n      (not (has_glass_cleaner ?gcb))\n    )\n  )\n\n  ;;; Action 7: Buff Window with Cloth",
            "(:action buff_window\n    :parameters (?w - window ?c - cloth)\n    :precondition (and\n      (opaque ?w)\n      (clean_cloth ?c)\n    )\n    :effect (and\n      (transparent ?w)\n      (dirty_cloth ?c)\n      (not (opaque ?w))\n    )\n  )\n\n  ;;; Action 8: Remove Small Paint Splatters with Solvent",
            "(:action remove_splatters_with_solvent\n    :parameters (?w - window ?s - solvent)\n    :precondition (and\n      (contains_splatters ?w)\n      (has_solvent ?s)\n    )\n    :effect (and\n      (not (contains_splatters ?w))\n      (not (has_solvent ?s))\n    )\n  )\n)"
        ]
    },
    {
        "task": "Learn Photography by Shooting Macro",
        "step": [
            "create_small_studio studio",
            "diffuse_light light",
            "have_appropriate_reflectors reflector",
            "have_closeup_lens lens",
            "start_experimenting experiment"
        ],
        "desc": [
            "Create a very small studio.",
            "Have the appropriate sized reflectors.",
            "Have a closeup lens.",
            "Again, they don't need to be that big, but big enough to diffuse light for your small subject.",
            "Start experimenting."
        ],
        "action": [
            "(:action create_small_studio\n    :parameters (?s - entity)\n    :precondition (and)\n    :effect (and (studio_setup ?s))\n  )",
            "(:action have_appropriate_reflectors\n    :parameters (?r - entity)\n    :precondition (and)\n    :effect (and (reflector_appropriate ?r))\n  )",
            "(:action have_closeup_lens\n    :parameters (?l - entity)\n    :precondition (and)\n    :effect (and (lens_closeup ?l))\n  )",
            "(:action diffuse_light\n    :parameters (?li - entity)\n    :precondition (and)\n    :effect (and (light_diffused ?li))\n  )",
            "(:action start_experimenting\n    :parameters (?e - entity)\n    :precondition (and)\n    :effect (and (experiment_started ?e))\n  )\n)"
        ]
    },
    {
        "task": "Evolve Vulpix in Pok\u00e9mon",
        "step": [
            "find_fire_stone stone",
            "select_bag bag",
            "catch_or_trade_vulpix vulpix",
            "select_stone stone",
            "wait_for_evolution vulpix"
        ],
        "desc": [
            "######Catch or trade for a Vulpix.",
            "######Find a fire stone (or Ice Stone in Sun/Moon to evolve Alolan Vulpix).",
            "Go to your bag and select the stone required.",
            "######Wait for the evolution animation to pop up."
        ],
        "action": [
            "(:action catch_or_trade_vulpix\n    :parameters (?vulpix)\n    :precondition (not (has_vulpix ?vulpix))\n    :effect (has_vulpix ?vulpix)\n  )",
            "(:action find_fire_stone\n    :parameters (?stone)\n    :precondition (not (found_fire_stone ?stone))\n    :effect (found_fire_stone ?stone)\n  )",
            "(:action select_stone\n    :parameters (?stone)\n    :precondition (and (found_fire_stone ?stone) (not (selected_stone ?stone)))\n    :effect (selected_stone ?stone)\n  )",
            "(:action select_bag\n    :parameters (?bag)\n    :precondition (not (selected_bag ?bag))\n    :effect (selected_bag ?bag)\n  )",
            "(:action wait_for_evolution\n    :parameters (?vulpix)\n    :precondition (and (has_vulpix ?vulpix) (selected_stone stone) (selected_bag bag))\n    :effect (vulpix_evolved ?vulpix)\n  )\n)"
        ]
    },
    {
        "task": "Paint Bare Wood",
        "step": [
            "acquire_tool alice paintbrush1",
            "acquire_paint alice oil_paint1",
            "apply_under_coat alice paintbrush1 oil_paint1 barewood1",
            "apply_second_coat alice paintbrush1 oil_paint1 barewood1",
            "finish_painting alice barewood1"
        ],
        "desc": [
            "Acquire oil based paints, which air dry slowly.",
            "The under-coat should be thin, and smooth, move your paint brush down the wood, don't paint up or horizontally.",
            "Paint the second coat, but be much more careful this time, make sure there are no paint bubbles appearing and smooth out any drips or pools left over from the under-coat.",
            "Be the most precise with this.",
            "Finished."
        ],
        "action": [
            "(:action acquire_paint\n    :parameters (?p - person ?m - material)\n    :precondition (and\n      (not (has_paint ?p ?m))\n    )\n    :effect (has_paint ?p ?m)\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u83b7\u53d6\u753b\u7b14",
            "(:action acquire_tool\n    :parameters (?p - person ?t - tool)\n    :precondition (and\n      (not (has_tool ?p ?t))\n    )\n    :effect (has_tool ?p ?t)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6e05\u6d01\u5de5\u5177",
            "(:action clean_tool\n    :parameters (?t - tool)\n    :precondition (and\n      (dirty ?t)\n    )\n    :effect (clean ?t)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u6d82\u62b9\u5e95\u6f06",
            "(:action apply_under_coat\n    :parameters (?p - person ?t - tool ?m - material ?o - object)\n    :precondition (and\n      (has_paint ?p ?m)\n      (has_tool ?p ?t)\n      (clean ?t)\n      (present ?o)\n      (not (painted_under_coat ?o))\n    )\n    :effect (and\n      (paint_applied ?o ?m)\n      (painted_under_coat ?o)\n      (dirty ?t)\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u6d82\u62b9\u7b2c\u4e8c\u5c42\u6d82\u6599",
            "(:action apply_second_coat\n    :parameters (?p - person ?t - tool ?m - material ?o - object)\n    :precondition (and\n      (has_paint ?p ?m)\n      (has_tool ?p ?t)\n      (dirty ?t)\n      (present ?o)\n      (painted_under_coat ?o)\n      (not (painted_second_coat ?o))\n    )\n    :effect (and\n      (paint_applied ?o ?m)\n      (painted_second_coat ?o)\n      (dirty ?t)\n    )\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u5b8c\u6210\u6d82\u6f06",
            "(:action finish_painting\n    :parameters (?p - person ?o - object)\n    :precondition (and\n      (painted_second_coat ?o)\n    )\n    :effect (finished_painting ?o)\n  )\n)"
        ]
    },
    {
        "task": "Get a Headshot in Gears of War",
        "step": [
            "sniper_shot weapon1 player1",
            "shotgun_shot player2",
            "pistol_shot player3",
            "boomshot_shot weapon2 player4"
        ],
        "desc": [
            "Sniper \u2014 Simply aim at the head and pull the trigger, unless you're the host, in which case you will need to aim in front of where they're going.",
            "Shotgun \u2014 The aim on the shotgun is almost like a rectangle.",
            "Pistol \u2014 I'm not sure because I haven't played in a while, but it's either six or seven shots to the head with the standard-issue pistol for a headshot.",
            "BoomShot \u2014 BoomShot headshots are possible \u2014 don't let anyone tell you they're not but the chance of one happening is about a million to one."
        ],
        "action": [
            "(:action sniper_shot\n    :parameters (?w - weapon ?a - agent)\n    :precondition (and\n                    (weapon_location ?w still)\n                    (not (knows_where_to_aim ?a))\n                   )\n    :effect (and\n             (weapon_location ?w focused)\n             (knows_where_to_aim ?a)\n            )\n  )\n\n  ;; \u4f7f\u7528\u9730\u5f39\u67aa\u8fdb\u884c\u5c04\u51fb",
            "(:action shotgun_shot\n    :parameters (?a - agent)\n    :precondition (not (knows_shape_of_shotgun_aim ?a))\n    :effect (knows_shape_of_shotgun_aim ?a)\n  )\n\n  ;; \u4f7f\u7528\u624b\u67aa\u8fdb\u884c\u5c04\u51fb",
            "(:action pistol_shot\n    :parameters (?a - agent)\n    :precondition (not (knows_pistol_shots_needed ?a))\n    :effect (knows_pistol_shots_needed ?a)\n  )\n\n  ;; \u4f7f\u7528BoomShot\u8fdb\u884c\u5c04\u51fb",
            "(:action boomshot_shot\n    :parameters (?w - weapon ?a - agent)\n    :precondition (and\n                    (weapon_location ?w unfired)\n                    (not (knows_boomshot_odds ?a))\n                   )\n    :effect (and\n             (weapon_location ?w fired)\n             (knows_boomshot_odds ?a)\n            )\n  )\n)"
        ]
    },
    {
        "task": "Get on a Bike",
        "step": [
            "swing-leg-over-bike you bike",
            "put-foot-on-pedal you pedals",
            "pedal-with-feet you",
            "stop you bike"
        ],
        "desc": [
            "To get on the bike, swing your non-dominant leg over the shaft of the bike.",
            "Put your dominant foot on the pedal.",
            "Hold on to the handlebars for support and to keep the bike straight.",
            "Keeping your weight center and even, pedal with your feet.",
            "Stopping."
        ],
        "action": [
            "(:action swing-leg-over-bike\n    :parameters (?a - agent ?bike - bike_part)\n    :precondition (and\n      (not (has-knowledge-ability_to_identify_bike_shaft ?a))\n      (position-off-bike ?a)\n    )\n    :effect (and\n      (has-knowledge-ability_to_identify_bike_shaft ?a)\n      (position-on-bike ?a)\n    )\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u5c06\u4e3b\u5bfc\u811a\u653e\u5728\u8e0f\u677f\u4e0a",
            "(:action put-foot-on-pedal\n    :parameters (?a - agent ?p - bike_part)\n    :precondition (and\n      (position-on-bike ?a)\n      (not (has-foot-on-pedal ?a ?p))\n    )\n    :effect (has-foot-on-pedal ?a ?p)\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u6293\u63e1\u8f66\u628a\u4ee5\u83b7\u53d6\u652f\u6301",
            "(:action hold-handlebars-for-support\n    :parameters (?a - agent ?bike - bike_part)\n    :precondition (and\n      (position-on-bike ?a)\n      (not (has-hold-handlebars ?a))\n    )\n    :effect (has-hold-handlebars ?a)\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u7528\u811a\u8e0f\u52a8\u8e0f\u677f",
            "(:action pedal-with-feet\n    :parameters (?a - agent)\n    :precondition (has-foot-on-pedal ?a pedals)\n    :effect (and\n      (has-motion-moving ?a)\n      (motion-moving-bike bike)\n      (balance-maintained ?a)\n    )\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u505c\u6b62\u9a91\u884c",
            "(:action stop\n    :parameters (?a - agent ?bike - bike_part)\n    :precondition (has-motion-moving ?a)\n    :effect (and\n      (has-motion-still ?a)\n      (motion-stopped-bike ?bike)\n      (handbrakes-located ?bike)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make a Wreath with Clothes Hangers",
        "step": [
            "untwist-and-shape-hanger hanger-1 pliers-1",
            "crumple-and-thread-paper paper3 hanger-1",
            "crumple-and-thread-paper paper2 hanger-1",
            "crumple-and-thread-paper paper1 hanger-1",
            "push-squares-and-twist-ends hanger-1 pliers-1",
            "slide-and-scrunch-squares paper3 hanger-1",
            "slide-and-scrunch-squares paper2 hanger-1",
            "slide-and-scrunch-squares paper1 hanger-1",
            "finish-wreath wreath-1 hanger-1"
        ],
        "desc": [
            "Untwist wire hanger and shape into a circle, using pliers as needed.",
            "Gently crumple 3\" squares of wax paper or crepe paper and thread hanger through center of each square.",
            "When you have threaded enough squares to fill length of hanger, gently push squares away from ends and use pliers to twist ends together.",
            "Gently slide squares of paper back toward the joined ends of wire hanger, scrunching paper more for additional fullness.",
            "Finished."
        ],
        "action": [
            "(:action untwist-and-shape-hanger\n    :parameters (?h - hanger ?p - pliers)\n    :precondition (shape-straight ?h)\n    :effect (and\n              (shape-circle ?h)\n              (not (shape-straight ?h))\n            )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u63c9\u76b1\u7eb8\u5f20\u5e76\u7a7f\u8fc7\u6302\u94a9",
            "(:action crumple-and-thread-paper\n    :parameters (?p - paper_square ?h - hanger)\n    :precondition (and\n                    (shape-circle ?h)\n                    (not (crumpled ?p))\n                    (not (threaded ?h ?p))\n                  )\n    :effect (and\n              (crumpled ?p)\n              (threaded ?h ?p)\n            )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u63a8\u5f00\u7eb8\u5f20\u5e76\u626d\u7ed3\u6302\u94a9\u4e24\u7aef",
            "(:action push-squares-and-twist-ends\n    :parameters (?h - hanger ?p - pliers)\n    :precondition (and\n                    (shape-circle ?h)\n                    (threaded ?h paper1)\n                    (threaded ?h paper2)\n                    (threaded ?h paper3)\n                  )\n    :effect (and\n              (squares-pushed-away ?h)\n              (twisted-ends ?h)\n            )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u5c06\u7eb8\u5f20\u6ed1\u56de\u6302\u94a9\u5e76\u634f\u7d27",
            "(:action slide-and-scrunch-squares\n    :parameters (?p - paper_square ?h - hanger)\n    :precondition (and\n                    (squares-pushed-away ?h)\n                    (threaded ?h ?p)\n                    (crumpled ?p)\n                  )\n    :effect (squares-scrunched ?p)\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5b8c\u6210\u82b1\u73af",
            "(:action finish-wreath\n    :parameters (?w - wreath ?h - hanger)\n    :precondition (and\n                    (twisted-ends ?h)\n                    (squares-scrunched paper1)\n                    (squares-scrunched paper2)\n                    (squares-scrunched paper3)\n                  )\n    :effect (completed ?w)\n  )\n)"
        ]
    },
    {
        "task": "Camouflage Equipment",
        "step": [
            "lay_out_equipment my_equipment ground_surface",
            "organize_webbing my_equipment ground_surface my_webbing",
            "organize_weapon my_equipment ground_surface my_weapon",
            "organize_rucksack my_equipment ground_surface my_rucksack",
            "organize_helmet my_equipment ground_surface my_helmet",
            "camouflage_vehicle my_vehicle my_camouflage_net",
            "camouflage_webbing my_webbing",
            "camouflage_weapon my_weapon",
            "camouflage_rucksack my_rucksack",
            "camouflage_helmet my_helmet"
        ],
        "desc": [
            "Firstly, lay out all the equipment you are going to use-whatever pattern it is.",
            "Start with your rucksack, this is the biggest piece of your personal kit so needs the most camouflage.",
            "Next, move on to the helmet.",
            "Be careful with webbing.",
            "Be extremely cautious when disguising your weapon.",
            "Vehicles really need a vehicle camouflage net."
        ],
        "action": [
            "(:action lay_out_equipment\n    :parameters (?e - equipment ?s - surface)\n    :precondition (not (laid_out ?e ?s))\n    :effect (laid_out ?e ?s)\n  )\n\n  ;; Action 2: Organize equipment",
            "(:action organize_equipment\n    :parameters (?e - equipment ?s - surface)\n    :precondition (and\n      (laid_out ?e ?s)\n      (not (organized ?e))\n    )\n    :effect (organized ?e)\n  )",
            "(:action organize_rucksack\n    :parameters (?e - equipment ?s - surface ?r - rucksack)\n    :precondition (and\n      (laid_out ?e ?s)\n      (not (organized ?r))\n    )\n    :effect (organized ?r)\n  )",
            "(:action organize_helmet\n    :parameters (?e - equipment ?s - surface ?h - helmet)\n    :precondition (and\n      (laid_out ?e ?s)\n      (not (organized ?h))\n    )\n    :effect (organized ?h)\n  )",
            "(:action organize_weapon\n    :parameters (?e - equipment ?s - surface ?wep - weapon)\n    :precondition (and\n      (laid_out ?e ?s)\n      (not (organized ?wep))\n    )\n    :effect (organized ?wep)\n  )",
            "(:action organize_webbing\n    :parameters (?e - equipment ?s - surface ?web - webbing)\n    :precondition (and\n      (laid_out ?e ?s)\n      (not (organized ?web))\n    )\n    :effect (organized ?web)\n  )\n  ;; Action 3: Camouflage the rucksack",
            "(:action camouflage_rucksack\n    :parameters (?r - rucksack)\n    :precondition (and\n      (organized ?r)\n      (not (camouflaged ?r))\n    )\n    :effect (camouflaged ?r)\n  )\n\n  ;; Action 4: Camouflage the helmet",
            "(:action camouflage_helmet\n    :parameters (?h - helmet)\n    :precondition (and\n      (organized ?h)\n      (not (camouflaged ?h))\n    )\n    :effect (camouflaged ?h)\n  )\n\n  ;; Action 5: Camouflage the webbing",
            "(:action camouflage_webbing\n    :parameters (?w - webbing)\n    :precondition (and\n      (organized ?w)\n      (not (camouflaged ?w))\n    )\n    :effect (camouflaged ?w)\n  )\n\n  ;; Action 6: Carefully camouflage the weapon",
            "(:action camouflage_weapon\n    :parameters (?wep - weapon)\n    :precondition (and\n      (organized ?wep)\n      (not (camouflaged ?wep))\n    )\n    :effect (and\n      (camouflaged ?wep)\n      (carefully_disguised ?wep)\n    )\n  )\n\n  ;; Action 7: Camouflage the vehicle with a camouflage net",
            "(:action camouflage_vehicle\n    :parameters (?v - vehicle ?cn - camouflage_net)\n    :precondition (not (netted ?v ?cn))\n    :effect (netted ?v ?cn)\n  )\n)"
        ]
    },
    {
        "task": "Ninja Defuse in Call of Duty",
        "step": [
            "find_hiding_spot character player_pistol further_out",
            "investigate_routes character current_routes",
            "wait_until_planting character game_bomb",
            "start_defusing character game_bomb"
        ],
        "desc": [
            "Move in and cover your route to the bomb site.",
            "Find a hiding spot and pull out your pistol.",
            "Investigate your enemy's routes.",
            "Wait until enemy does start to plant the bomb.",
            "Start defusing once the bomb has been planted."
        ],
        "action": [
            "(:action move_in\n    :parameters (?c - game_character ?r - routes ?from - place ?to - place)\n    :precondition (and\n                    (location ?c ?from)\n                    (coverage ?r uncovered)\n                    (appearance ?r uncovered))\n    :effect (and\n             (location ?c ?to)\n             (coverage ?r covered)\n             (appearance ?r covered))\n  )\n\n  ;; \u52a8\u4f5c2: \u627e\u5230\u9690\u85cf\u70b9\u5e76\u62d4\u51fa\u624b\u67aa",
            "(:action find_hiding_spot\n    :parameters (?c - game_character ?p - pistol ?ps - place)\n    :precondition (and\n                    (location ?c ?ps)\n                    (pistol_location ?p concealed)\n                    (availability ?p in_inventory))\n    :effect (and\n             (location ?c hidden)\n             (pistol_location ?p exposed)\n             (availability ?p equipped))\n  )\n\n  ;; \u52a8\u4f5c3: \u8c03\u67e5\u654c\u4eba\u7684\u8def\u7ebf",
            "(:action investigate_routes\n    :parameters (?c - game_character ?r - routes)\n    :precondition (and\n                    (location ?c hidden)\n                    (focus ?c pulling_out_pistol)\n                    (knowledge ?r uninvestigated))\n    :effect (and\n             (focus ?c investigating)\n             (knowledge ?r investigated))\n  )\n\n  ;; \u52a8\u4f5c4: \u7b49\u5f85\u654c\u4eba\u5f00\u59cb\u5b89\u88c5\u70b8\u5f39",
            "(:action wait_until_planting\n    :parameters (?c - game_character ?b - bomb)\n    :precondition (and\n                    (focus ?c investigating)\n                    (skill ?b unplanted))\n    :effect (and\n             (focus ?c waiting)\n             (skill ?b planted))\n  )\n\n  ;; \u52a8\u4f5c5: \u70b8\u5f39\u88ab\u5b89\u88c5\u540e\u5f00\u59cb\u62c6\u9664",
            "(:action start_defusing\n    :parameters (?c - game_character ?b - bomb)\n    :precondition (and\n                    (location ?c hidden)\n                    (focus ?c waiting)\n                    (skill ?b planted))\n    :effect (and\n             (location ?c now_at_bomb)\n             (focus ?c defusing)\n             (skill ?b defused))\n  )\n)"
        ]
    },
    {
        "task": "Get Under the Stage in Dragonball Z Budokai Tenkaichi 2",
        "step": [
            "select_vs_duel duel1",
            "select_character player2 goku",
            "select_character player1 goku",
            "move_to_wall player1 player2 away_from_wall away_from_wall",
            "specify_stage stage1",
            "select_player player2",
            "select_player player1"
        ],
        "desc": [
            "Choose VS Duel, 2 players.",
            "Choose Goku as player one, as well as player two.",
            "Choose Mountain Road as the stage.",
            "Move to opposite ends of the street so that you are both against the Wall that keeps you in the stage."
        ],
        "action": [
            "(:action select_vs_duel\n    :parameters (?duel - vs_duel)\n    :precondition (not (vs_duel_selected ?duel))\n    :effect (vs_duel_selected ?duel)\n  )\n\n  ;; \u9009\u62e9\u73a9\u5bb6",
            "(:action select_player\n    :parameters (?player - player)\n    :precondition (not (player_selected ?player))\n    :effect (player_selected ?player)\n  )\n\n  ;; \u4e3a\u73a9\u5bb6\u9009\u62e9\u89d2\u8272",
            "(:action select_character\n    :parameters (?player - player ?character - character)\n    :precondition (and (present ?character) (not (character_selected ?player ?character)))\n    :effect (character_selected ?player ?character)\n  )\n\n  ;; \u6307\u5b9a\u821e\u53f0",
            "(:action specify_stage\n    :parameters (?stage - stage)\n    :precondition (not (stage_specified ?stage))\n    :effect (stage_specified ?stage)\n  )\n\n  ;; \u79fb\u52a8\u73a9\u5bb6\u5230\u5899\u8fb9\u5e76\u5206\u79bb",
            "(:action move_to_wall\n    :parameters (?player1 - player ?player2 - player ?loc1 - location ?loc2 - location)\n    :precondition (and\n                    (located ?player1 ?loc1)\n                    (located ?player2 ?loc2)\n                    (vs_duel_selected duel1)\n                    (character_selected ?player1 goku)\n                    (character_selected ?player2 goku))\n    :effect (and\n              (located ?player1 against_wall)\n              (located ?player2 against_wall)\n              (against_wall ?player1)\n              (against_wall ?player2)\n              (separated ?player1 ?player2)\n            )\n  )\n)"
        ]
    },
    {
        "task": "Clean Synthetic Hiking Gear",
        "step": [
            "read_instructions instructions",
            "clean_polar_fleece polar_fleece washing_machine",
            "wash_clothing clothing washing_machine"
        ],
        "desc": [
            "Read all of the instructions first.",
            "Wash Gore-Tex and other breathable, waterproof synthetic outer shell clothing following the instructions on the label.",
            "Be careful with synthetic boots.",
            "Take care cleaning synthetic jackets containing down.",
            "Wash polar fleece (microfleece or micrafleece) in the washing machine."
        ],
        "action": [
            "(:action read_instructions\n    :parameters (?instructions - instructions)\n    :precondition (not (knowledge ?instructions))\n    :effect (knowledge ?instructions)\n  )",
            "(:action wash_clothing\n    :parameters (?clothing - clothing ?washing_machine - washing_machine)\n    :precondition (cleanness ?clothing)\n    :effect (not (cleanness ?clothing))\n  )",
            "(:action clean_polar_fleece\n    :parameters (?polar_fleece - polar_fleece ?washing_machine - washing_machine)\n    :precondition (not (cleanness ?polar_fleece))\n    :effect (cleanness ?polar_fleece)\n  )\n)"
        ]
    },
    {
        "task": "Defeat a Thug on Dead Island",
        "step": [
            "acquire-knowledge you",
            "equip-weapon you grenades",
            "throw-weapon you grenades thug1"
        ],
        "desc": [
            "There is no chance in hell you will kill a Thug using just your bear hands and feet.",
            "Incendiary Weapons - Grenades or Molotov Cocktails *WARNING* You may need to use a couple of these, so it is recommended that you only use one when a Thugs' health is below 50%.",
            "Make sure your guns have enough ammo, and your knives are up to scratch.",
            "Attack!"
        ],
        "action": [
            "(:action acquire-knowledge\n    :parameters (?p - person)\n    :precondition (not (knowledge_aware ?p))\n    :effect (knowledge_aware ?p)\n  )\n\n  ;; \u786e\u4fdd\u5f39\u836f\u5145\u8db3\u7684\u52a8\u4f5c",
            "(:action ensure-ammo\n    :parameters (?a - ammo)\n    :precondition (not (ammo_assured ?a))\n    :effect (ammo_assured ?a)\n  )\n\n  ;; \u88c5\u5907\u6b66\u5668\u7684\u52a8\u4f5c",
            "(:action equip-weapon\n    :parameters (?p - person ?w - weapon)\n    :precondition (knowledge_aware ?p)\n    :effect (weapon_location ?w on_person)\n  )\n\n  ;; \u4f7f\u7528\u6b66\u5668\u653b\u51fb\u50f5\u5c38\u7684\u52a8\u4f5c\uff08\u9700\u8981\u5f39\u836f\uff0c\u5982\u67aa\u68b0\uff09",
            "(:action attack-with-weapon\n    :parameters (?p - person ?w - weapon ?a - ammo ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (ammo_assured ?a)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (not (ammo_assured ?a)) ; \u4f7f\u7528\u5f39\u836f\u540e\u5f39\u836f\u51cf\u5c11\n            )\n  )\n\n  ;; \u4f7f\u7528\u6295\u63b7\u6b66\u5668\u653b\u51fb\u50f5\u5c38\u7684\u52a8\u4f5c\uff08\u5982\u624b\u69b4\u5f39\u3001\u71c3\u70e7\u74f6\uff09",
            "(:action throw-weapon\n    :parameters (?p - person ?w - weapon ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (weapon_thrown ?w)\n              (weapon_location ?w thrown_at_enemy) ; \u6b66\u5668\u88ab\u6295\u63b7\u5230\u654c\u4eba\u5904\n            )\n  )\n)"
        ]
    },
    {
        "task": "Grow a Rose Bush from Rose Bush Cuttings",
        "step": [
            "prepare_area clipping",
            "take_cutting clipping",
            "moisten_clipping clipping",
            "plant_cutting clipping"
        ],
        "desc": [
            "Prepare the pot or area in your yard where you plan to plant your clipping.",
            "Take a cutting from the rose bush you would like to grow your new bush from.",
            "Moisten the part of the clipping that you just scraped and dip it into rooting hormone.",
            "Immediately plant the cutting."
        ],
        "action": [
            "(:action prepare_area\n    :parameters (?e - entity)\n    :precondition (not (prepared ?e))\n    :effect (prepared ?e)\n  )",
            "(:action take_cutting\n    :parameters (?e - entity)\n    :precondition (and (prepared ?e) (not (cut ?e)))\n    :effect (cut ?e)\n  )",
            "(:action moisten_clipping\n    :parameters (?e - entity)\n    :precondition (and (cut ?e) (not (moistened ?e)))\n    :effect (moistened ?e)\n  )",
            "(:action plant_cutting\n    :parameters (?e - entity)\n    :precondition (and (moistened ?e) (not (planted ?e)))\n    :effect (planted ?e)\n  )\n)"
        ]
    },
    {
        "task": "Make a Pitcher of Melon Pina Coladas",
        "step": [
            "pour_ingredients_into_pitcher mixture1 pitcher1 kitchen_counter",
            "mix_pitcher pitcher1 mixture1",
            "chill_mixture pitcher1 refrigerator1",
            "pour_into_glass mixture1 pitcher1 glass1",
            "add_garnish honeydew1 glass1 mixture1"
        ],
        "desc": [
            "Pour the ingredients (except the garnish) into a pitcher that can hold 100 ounces.",
            "Ensure everything is mixed thoroughly.",
            "Allow the mixture to chill in the refrigerator until ready to serve.",
            "Pour the mixture into tall glasses.",
            "Add a chunk of honeydew melon on the side of each glass.",
            "Finished."
        ],
        "action": [
            "(:action pour_ingredients_into_pitcher\n    :parameters (?m - mixture ?p - pitcher ?l - object)\n    :precondition (and\n      (empty ?p)\n      (in ?m ?l)\n    )\n    :effect (and\n      (in ?m ?p)\n      (not (empty ?p))\n      (not (in ?m ?l))\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5145\u5206\u6df7\u5408",
            "(:action mix_pitcher\n    :parameters (?p - pitcher ?m - mixture)\n    :precondition (and\n      (in ?m ?p)\n      (not (mixed ?p))\n    )\n    :effect (mixed ?p)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u51b7\u85cf\u6df7\u5408\u7269",
            "(:action chill_mixture\n    :parameters (?p - pitcher ?r - refrigerator)\n    :precondition (mixed ?p)\n    :effect (chilled ?p)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u5c06\u6df7\u5408\u7269\u5012\u5165\u676f\u4e2d",
            "(:action pour_into_glass\n    :parameters (?m - mixture ?p - pitcher ?g - glass)\n    :precondition (and\n      (chilled ?p)\n      (in ?m ?p)\n    )\n    :effect (and\n      (in_glass ?m ?g)\n      (empty ?p)\n      (not (in ?m ?p))\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u6dfb\u52a0\u871c\u74dc\u88c5\u9970",
            "(:action add_garnish\n    :parameters (?h - honeydew ?g - glass ?m - mixture)\n    :precondition (in_glass ?m ?g)\n    :effect (and\n      (garnished ?h ?g)\n      (on_table ?g)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Recycle Underpants",
        "step": [
            "make_cleaning_rags underpants6",
            "make_cleaning_rags underpants5",
            "make_cleaning_rags underpants4",
            "donate_underpants underpants6",
            "child_wears_underpants underpants5",
            "use_as_stuffing underpants4",
            "make_craft_item underpants3 scissors1",
            "make_garden_ties underpants2 scissors1 plant1",
            "make_cleaning_rags underpants1"
        ],
        "desc": [
            "Turn the underpants into cleaning rags.",
            "Use the underwear as garden ties.",
            "Turn quality undies into craft items.",
            "Use a bundle of old underwear as stuffing.",
            "Children can wear old underwear on the outside of their pants to play superhero.",
            "Donate the underpants."
        ],
        "action": [
            "(:action make_cleaning_rags\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (not (is_old ?u))\n    )\n    :effect (and\n      (is_old ?u)\n      (used_as_cleaning_rags ?u)\n    )\n  )\n\n  ;; \u52a8\u4f5c2: \u4f7f\u7528\u5185\u88e4\u4f5c\u4e3a\u56ed\u827a\u7ed1\u5e26",
            "(:action make_garden_ties\n    :parameters (?u - underpants ?t - tool ?pl - plant)\n    :precondition (and\n      (at ?u drawer)\n      (available ?t)\n      (not (is_old ?u))\n    )\n    :effect (and\n      (is_old ?u)\n      (used_as_garden_ties ?u)\n      (tied ?pl)\n    )\n  )\n\n  ;; \u52a8\u4f5c3: \u5c06\u5185\u88e4\u5236\u4f5c\u6210\u5de5\u827a\u54c1",
            "(:action make_craft_item\n    :parameters (?u - underpants ?t - tool)\n    :precondition (and\n      (at ?u drawer)\n      (available ?t)\n      (not (is_old ?u))\n    )\n    :effect (and\n      (is_old ?u)\n      (used_as_craft_item ?u)\n    )\n  )\n\n  ;; \u52a8\u4f5c4: \u5c06\u5185\u88e4\u7528\u4f5c\u586b\u5145\u7269",
            "(:action use_as_stuffing\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (is_old ?u)\n    )\n    :effect (used_as_stuffing ?u)\n  )\n\n  ;; \u52a8\u4f5c5: \u5b69\u5b50\u7a7f\u7740\u65e7\u5185\u88e4\u73a9\u8d85\u7ea7\u82f1\u96c4",
            "(:action child_wears_underpants\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (is_old ?u)\n    )\n    :effect (worn_by_child ?u)\n  )\n\n  ;; \u52a8\u4f5c6: \u6350\u8d60\u5185\u88e4",
            "(:action donate_underpants\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (is_old ?u)\n    )\n    :effect (donated ?u)\n  )\n)"
        ]
    },
    {
        "task": "Polish a Faucet With a Lemon",
        "step": [
            "cut-lemon water",
            "squeeze-lemon water faucet",
            "rub-faucet faucet water faucet"
        ],
        "desc": [
            "######Cut a lemon in half.",
            "######Squeeze out the juice.",
            "######Take the squeezed out lemon half and rub vigorously over the faucets.",
            "######Wash the tap after scouring with the lemon half."
        ],
        "action": [
            "(:action cut-lemon\n    :parameters (?lemon - entity)\n    :precondition (not (halved ?lemon))\n    :effect (halved ?lemon)\n  )\n\n  ;; Action to squeeze the lemon to extract juice",
            "(:action squeeze-lemon\n    :parameters (?lemon - entity ?juice - entity)\n    :precondition (and (halved ?lemon) (not (lemon-squeezed ?lemon)))\n    :effect (and\n              (lemon-squeezed ?lemon)\n              (juice-squeezed ?juice)\n              (juicy ?lemon)\n            )\n  )\n\n  ;; Action to rub the faucet with the squeezed lemon half",
            "(:action rub-faucet\n    :parameters (?faucet - entity ?lemon - entity ?juice - entity)\n    :precondition (and\n                    (juice-squeezed ?juice)\n                    (halved ?lemon)\n                  )\n    :effect (and\n              (faucet-wet ?faucet)\n              (faucet-clean ?faucet)\n              (faucet-shiny ?faucet)\n              (juice-on-faucet ?juice)\n            )\n  )\n\n  ;; Action to wash the faucet after scouring",
            "(:action wash-faucet\n    :parameters (?faucet - entity ?water - entity ?juice - entity)\n    :precondition (juice-on-faucet ?juice)\n    :effect (and\n              (water-in-sink ?water)\n              (faucet-clean ?faucet)\n              (not (juice-on-faucet ?juice))\n              (not (faucet-wet ?faucet)) ;; \u5047\u8bbe\u6e05\u6d17\u540e\u6c34\u5206\u88ab\u79fb\u9664\n            )\n  )\n)"
        ]
    },
    {
        "task": "Connect a Wii to HD TV",
        "step": [
            "plug_hdmi_to_cable hdmi_cord1",
            "plug_hdmi_to_tv hdmi_cord1 tv1",
            "connect_hdmi_to_wii_av hdmi_cord1 wii_av_output1",
            "plug_hdmi_to_converter hdmi_cord1 converter1 tv1"
        ],
        "desc": [
            "Plug in your HDMI cord to the cable.",
            "Plug it into your TV's HDMI input.",
            "Plug it into your wii's AV Composite Output instead of putting in the Composite cord that comes with the Wii.",
            "Plug your HDMI cord (assuming you have one) into the converter and your TV."
        ],
        "action": [
            "(:action plug_hdmi_to_cable\n    :parameters (?h - hdmi_cord)\n    :precondition (and (not (connected_to_cable ?h)))\n    :effect (and (connected_to_cable ?h)))",
            "(:action plug_hdmi_to_tv\n    :parameters (?h - hdmi_cord ?t - tv)\n    :precondition (and (connected_to_cable ?h) (not (connected_to_tv ?h)))\n    :effect (and (connected_to_tv ?h) (full_tv ?t)))",
            "(:action connect_hdmi_to_wii_av\n    :parameters (?h - hdmi_cord ?w - wii_av_output)\n    :precondition (and (connected_to_tv ?h) (not (connected_to_wii ?h)))\n    :effect (and (connected_to_wii ?h) (full_av_output ?w)))",
            "(:action plug_hdmi_to_converter\n    :parameters (?h - hdmi_cord ?c - converter ?t - tv)\n    :precondition (and (connected_to_wii ?h) (not (connected_to_converter_tv ?h)))\n    :effect (and (connected_to_converter_tv ?h) (connected_converter ?c)))\n)"
        ]
    },
    {
        "task": "Open a Rusty Bolt",
        "step": [
            "obtain_fizzy_drink fizzy_drink1",
            "pour_fizzy_drink fizzy_drink1 old_bolt1",
            "wipe_clean towel1 fizzy_drink1",
            "dissolve_rust old_bolt1 fizzy_drink1",
            "replace_bolt old_bolt1 new_bolt1"
        ],
        "desc": [
            "Obtain some fizzy drink.",
            "Pour the fizzy drink over the bolt.",
            "Wipe it clean with kitchen towel.",
            "The fizzy drink should have dissolved the rust build-up causing the bolt to stick.",
            "Replace the rusty bolt."
        ],
        "action": [
            "(:action obtain_fizzy_drink\n        :parameters (?d - drink)\n        :precondition (not (obtained ?d))\n        :effect (obtained ?d)\n    )",
            "(:action pour_fizzy_drink\n        :parameters (?d - drink ?b - bolt)\n        :precondition (and (obtained ?d) (stuck ?b))\n        :effect (and (on_bolt ?d) (not (obtained ?d)))\n    )",
            "(:action wipe_clean\n        :parameters (?t - towel ?d - drink)\n        :precondition (and (on_bolt ?d) (clean ?t))\n        :effect (and (on_towel ?d) (dirty ?t))\n    )",
            "(:action dissolve_rust\n        :parameters (?b - bolt ?d - drink)\n        :precondition (and (on_towel ?d) (stuck ?b))\n        :effect (and (unstuck ?b) (not (stuck ?b)))\n    )",
            "(:action replace_bolt\n        :parameters (?b_old - bolt ?b_new - bolt)\n        :precondition (and (unstuck ?b_old) (in_package ?b_new))\n        :effect (and (in_machine ?b_new) (not (in_package ?b_new)))\n    )\n)"
        ]
    },
    {
        "task": "Make a Duct Tape Necklace",
        "step": [
            "unroll_tape tape1",
            "fold_tape tape1",
            "smooth_tape tape1",
            "tape_ends_together tape1 ends1"
        ],
        "desc": [
            "Take one roll of duct tape and make a piece about a little bigger than your head.",
            "Measure it around your head, and cut it off the roll.",
            "Fold it halfway through the middle, like shown.",
            "Fold the other half so there is no sticky part showing.",
            "Tape the ends together.",
            "And you are done!"
        ],
        "action": [
            "(:action unroll_tape\n    :parameters (?t - tape)\n    :precondition (and (rolled ?t) (on_roll ?t))\n    :effect (and (in_pieces ?t) (not (rolled ?t)))\n  )",
            "(:action measure_and_cut_tape\n    :parameters (?t - tape ?tb - table)\n    :precondition (and (in_pieces ?t) (elongated ?t) (not (measured ?tb)))\n    :effect (and (measured ?tb) (in_pieces ?t))\n  )",
            "(:action fold_tape\n    :parameters (?t - tape)\n    :precondition (and (in_pieces ?t) (elongated ?t))\n    :effect (and (folded ?t) (not (elongated ?t)))\n  )",
            "(:action smooth_tape\n    :parameters (?t - tape)\n    :precondition (and (folded ?t) (sticky ?t))\n    :effect (and (smooth ?t) (not (sticky ?t)))\n  )",
            "(:action tape_ends_together\n    :parameters (?t - tape ?e - ends)\n    :precondition (and (smooth ?t) (separate_pieces ?t) (separate_ends ?e))\n    :effect (and (one_piece ?t) (joined_ends ?e) (not (separate_ends ?e)) (not (separate_pieces ?t)))\n  )\n)"
        ]
    },
    {
        "task": "Make Pineapple Sherbet",
        "step": [
            "add-ingredient sugar blender",
            "add-ingredient pineapple blender",
            "add-ingredient oil blender",
            "add-ingredient milk blender",
            "add-ingredient extract blender",
            "blend-all blender mixture",
            "pour-into-dish mixture blender plate",
            "freeze-mixture mixture plate freezer sherbet"
        ],
        "desc": [
            "Blend the pineapple if it's fresh.",
            "Pour in the milk, oil, sugar or syrup and extract.",
            "Blend all of the ingredients together until smooth.",
            "Pour into a baking dish with decent sides.",
            "Place in the freezer.",
            "To serve: Simply scoop or cut out pieces of the sherbet."
        ],
        "action": [
            "(:action put-in-blender\n    :parameters (?ingredient - ingredient ?blender - appliance)\n    :precondition (and (at ?ingredient kitchen) (at ?blender kitchen))\n    :effect (and (in ?ingredient ?blender) (not (at ?ingredient kitchen)))\n  )",
            "(:action blend-pineapple\n    :parameters (?pineapple - ingredient ?blender - appliance)\n    :precondition (and (is-fresh ?pineapple) (in ?pineapple ?blender) (state ?blender off))\n    :effect (and (blended ?pineapple) (state ?blender on))\n  )",
            "(:action add-ingredient\n    :parameters (?ingredient - ingredient ?blender - appliance)\n    :precondition (and (at ?ingredient kitchen) (at ?blender kitchen))\n    :effect (and (in ?ingredient ?blender) (not (at ?ingredient kitchen)))\n  )",
            "(:action blend-all\n    :parameters (?blender - appliance ?mixture - mixture)\n    :precondition (and\n      (in pineapple ?blender)\n      (in milk ?blender)\n      (in oil ?blender)\n      (in sugar ?blender)\n      (in extract ?blender)\n      (state ?blender off)\n    )\n    :effect (and\n      (not (in pineapple ?blender))\n      (not (in milk ?blender))\n      (not (in oil ?blender))\n      (not (in sugar ?blender))\n      (not (in extract ?blender))\n      (in ?mixture ?blender)\n      (state ?blender on)\n    )\n  )",
            "(:action pour-into-dish\n    :parameters (?mixture - mixture ?blender - appliance ?dish - container)\n    :precondition (and (in ?mixture ?blender) (at ?blender kitchen) (at ?dish kitchen))\n    :effect (and\n      (not (in ?mixture ?blender))\n      (in ?mixture ?dish)\n    )\n  )",
            "(:action freeze-mixture\n    :parameters (?mixture - mixture ?dish - container ?freezer - location ?sherbet - sherbet)\n    :precondition (and (in ?mixture ?dish) (at ?dish kitchen) (at ?freezer kitchen))\n    :effect (and\n      (not (in ?mixture ?dish))\n      (in ?sherbet ?dish)\n      (at ?dish ?freezer)\n      (frozen ?sherbet)\n    )\n  )",
            "(:action serve-sherbet\n    :parameters (?sherbet - sherbet ?dish - container ?plate - container)\n    :precondition (and (in ?sherbet ?dish) (at ?dish freezer) (frozen ?sherbet))\n    :effect (and\n      (not (in ?sherbet ?dish))\n      (in ?sherbet ?plate)\n      (at ?dish kitchen)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make Chinese Macaroni in Just 20 Minutes",
        "step": [
            "boil_macaroni macaroni pan kitchen",
            "serve_macaroni macaroni plate dining_table pan"
        ],
        "desc": [
            "Boil macaroni in hot boiling water with some salt and oil for 10-15 minutes.",
            "After the macaroni has boiled put under running water for about 15 seconds to prevent over cooking.",
            "In another pan add some oil and toss in the macaroni.",
            "Add salt, red chilli powder ,soy sauce,white vinegar and ajino moto.",
            "Cook for some seconds.",
            "Serve hot with chilled drinks."
        ],
        "action": [
            "(:action boil_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?kitchen - location)\n    :precondition (and\n      (at ?macaroni ?kitchen)\n      (at ?pot ?kitchen)\n      (not (cooked ?macaroni))\n    )\n    :effect (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u51b7\u5374\u901a\u5fc3\u7c89",
            "(:action cool_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?sink - location)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n      (at ?pot ?sink)\n    )\n    :effect (and\n      (cooled ?macaroni)\n    )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u5728\u5e73\u5e95\u9505\u4e2d\u7ffb\u7092\u901a\u5fc3\u7c89",
            "(:action toss_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container ?kitchen - location)\n    :precondition (and\n      (cooled ?macaroni)\n      (at ?pan ?kitchen)\n      (at ?macaroni ?kitchen)\n    )\n    :effect (and\n      (in ?macaroni ?pan)\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u52a0\u5165\u8c03\u5473\u6599",
            "(:action add_seasoning\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (not (seasoned ?macaroni))\n    )\n    :effect (and\n      (seasoned ?macaroni)\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u70f9\u996a\u901a\u5fc3\u7c89",
            "(:action cook_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (seasoned ?macaroni)\n    )\n    :effect (and\n      (cooked ?macaroni)\n    )\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u76db\u76d8\u5e76\u4e0a\u684c",
            "(:action serve_macaroni\n    :parameters (?macaroni - ingredient ?plate - container ?dining_table - location ?pan - container)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pan)\n      (at ?plate ?dining_table)\n    )\n    :effect (and\n      (in ?macaroni ?plate)\n      (served ?macaroni)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make a Pipe Cleaner Bird",
        "step": [
            "bend_to_form_legs pc1",
            "enlarge_torso torso",
            "move_for_beak tip",
            "shape_to_form_body pc2"
        ],
        "desc": [
            "Bend one pipe cleaner in half to form the legs.",
            "Shape another pipe cleaner to form the body.",
            "Move 1.5 inches (3.8 cm) from the tip of where the beak should be.",
            "Use 2 pipe cleaners to enlarge the torso."
        ],
        "action": [
            "(:action bend_to_form_legs\n    :parameters (?p - pipe_cleaner)\n    :precondition (and (position ?p straight) (location ?p completely_on_ground))\n    :effect (and (position ?p bent) (location ?p partially_in_air))\n  )",
            "(:action shape_to_form_body\n    :parameters (?p - pipe_cleaner)\n    :precondition (and (position ?p straight) (location ?p on_ground))\n    :effect (and (position ?p bent) (location ?p on_pipe_cleaner))\n  )",
            "(:action move_for_beak\n    :parameters (?t - tip_of_pipe_cleaner)\n    :precondition (and (shape ?t straight) (location ?t closer_to_tip))\n    :effect (and (shape ?t shaped_to_form_beak) (location ?t now_away_from_tip))\n  )",
            "(:action enlarge_torso\n    :parameters (?t - torso)\n    :precondition (and (width ?t thinner) (weight ?t lighter))\n    :effect (and (width ?t now_wider) (weight ?t heavier))\n  )\n)"
        ]
    },
    {
        "task": "Make Cheese Sauce with Jalape\u00f1o Peppers",
        "step": [
            "cut_velveeta velveeta cutting_board",
            "set_burner_add_cheese stove_knob velveeta pot",
            "add_peppers_and_olives olives peppers pot",
            "serve_cheese_sauce cheese_sauce pot"
        ],
        "desc": [
            "First cut the Velveeta in to tiny squares and set aside.",
            "Set the burner on a medium to low setting, before that you begin adding the cheese product.",
            "Wait until the Velveeta has melted lower the heat somewhat and add in the (Rotel) tomatoes.",
            "Add in the Jalapeno peppers, and black olives if desired.",
            "Cheese sauce is at its best if served very warm."
        ],
        "action": [
            "(:action cut_velveeta\n    :parameters (?velveeta - entity ?cutting_board - entity)\n    :precondition (and\n      (has_granularity ?velveeta whole)\n      (has_openness ?velveeta closed)\n      (at_location ?velveeta in_package)\n      (has_cleanness ?cutting_board clean)\n      (has_moisture ?cutting_board dry)\n    )\n    :effect (and\n      (not (has_granularity ?velveeta whole))\n      (has_granularity ?velveeta cubed)\n      (not (has_openness ?velveeta closed))\n      (has_openness ?velveeta open)\n      (not (at_location ?velveeta in_package))\n      (at_location ?velveeta on_cutting_board)\n      (not (has_cleanness ?cutting_board clean))\n      (has_cleanness ?cutting_board dirty)\n      (not (has_moisture ?cutting_board dry))\n      (has_moisture ?cutting_board wet)\n    )\n  )\n\n  ; Action for Step 2",
            "(:action set_burner_add_cheese\n    :parameters (?stove - entity ?velveeta - entity ?pot - entity)\n    :precondition (and\n      (has_power ?stove off)\n      (has_orientation ?stove off_position)\n      (has_granularity ?velveeta cubed)\n      (at_location ?velveeta on_cutting_board)\n      (at_location ?pot in_cupboard)\n    )\n    :effect (and\n      (not (has_power ?stove off))\n      (has_power ?stove on)\n      (not (has_orientation ?stove off_position))\n      (has_orientation ?stove medium_low)\n      (not (at_location ?velveeta on_cutting_board))\n      (at_location ?velveeta in_pot)\n      (not (at_location ?pot in_cupboard))\n      (at_location ?pot on_stove)\n    )\n  )\n\n  ; Action for Step 3",
            "(:action melt_cheese_add_tomatoes\n    :parameters (?velveeta - entity ?stove - entity ?rotel_can - entity)\n    :precondition (and\n      (has_granularity ?velveeta cubed)\n      (has_power ?stove on)\n      (has_orientation ?stove medium_low)\n      (at_location ?velveeta in_pot)\n      (has_openness ?rotel_can closed)\n      (at_location ?rotel_can in_fridge)\n    )\n    :effect (and\n      (not (has_granularity ?velveeta cubed))\n      (has_granularity ?velveeta liquid)\n      (not (has_temperature ?velveeta room_temperature))\n      (has_temperature ?velveeta hot)\n      (has_texture ?velveeta runny)\n      (not (has_orientation ?stove medium_low))\n      (has_orientation ?stove low)\n      (not (has_openness ?rotel_can closed))\n      (has_openness ?rotel_can open)\n      (not (at_location ?rotel_can in_fridge))\n      (at_location ?rotel_can in_pot)\n    )\n  )\n\n  ; Action for Step 4",
            "(:action add_peppers_and_olives\n    :parameters (?peppers - entity ?olives - entity ?pot - entity)\n    :precondition (and\n      (at_location ?peppers in_can)\n      (at_location ?olives in_can)\n      (at_location ?pot on_stove)\n    )\n    :effect (and\n      (not (at_location ?peppers in_can))\n      (at_location ?peppers in_pot)\n      (not (at_location ?olives in_can))\n      (at_location ?olives in_pot)\n    )\n  )\n\n  ; Action for Step 5",
            "(:action serve_cheese_sauce\n    :parameters (?cheese_sauce - entity ?pot - entity)\n    :precondition (and\n      (at_location ?cheese_sauce in_pot)\n      (has_temperature ?cheese_sauce hot)\n      (at_location ?pot on_stove)\n    )\n    :effect (and\n      (not (at_location ?cheese_sauce in_pot))\n      (at_location ?cheese_sauce in_bowl)\n      (not (at_location ?pot on_stove))\n      (at_location ?pot in_sink)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Prevent a Wick Lamp or Stove from Smoking",
        "step": [
            "put_vinegar_in_container vinegar1 container1",
            "remove_wicks wick1",
            "dip_wicks_in_vinegar wick1 vinegar1 container1",
            "dry_wicks wick1",
            "place_wicks_in_lamp wick1 lamp1"
        ],
        "desc": [
            "Pour some white vinegar into a small container deep enough for dipping.",
            "Remove the wick from the lamp or stove, or use wicks yet to be inserted.",
            "Dip each wick into the vinegar.",
            "Allow to dry thoroughly.",
            "Use once dry."
        ],
        "action": [
            "(:action remove_wicks\n    :parameters (?w - wick)\n    :precondition (and (in_lamp ?w))\n    :effect (and\n     (removed ?w)\n     (not (in_lamp ?w))\n     (get ?w)\n     )\n  )\n\n  ;; \u5c06\u918b\u5012\u5165\u5bb9\u5668\u7684\u52a8\u4f5c",
            "(:action put_vinegar_in_container\n    :parameters (?v - vinegar ?c - container)\n    :precondition (not (vinegar_in_container ?v))\n    :effect (and (vinegar_in_container ?v) (in_container ?c ?v))\n  )\n\n  ;; \u5c06\u706f\u82af\u6d78\u6ce1\u5728\u918b\u4e2d\u7684\u52a8\u4f5c",
            "(:action dip_wicks_in_vinegar\n    :parameters (?w - wick ?v - vinegar ?c - container)\n    :precondition (and (get ?w) (vinegar_in_container ?v) (in_container ?c ?v))\n    :effect (and (wet ?w) (in_vinegar ?w))\n  )\n\n  ;; \u667e\u5e72\u706f\u82af\u7684\u52a8\u4f5c",
            "(:action dry_wicks\n    :parameters (?w - wick)\n    :precondition (wet ?w)\n    :effect (and (dry ?w) (not (wet ?w)))\n  )\n\n  ;; \u5c06\u706f\u82af\u653e\u56de\u706f\u4e2d\u7684\u52a8\u4f5c",
            "(:action place_wicks_in_lamp\n    :parameters (?w - wick ?l - lamp)\n    :precondition (and (dry ?w) (not (in_lamp ?w)))\n    :effect (and (in_lamp ?w) (placed_back ?w ?l))\n  )\n)"
        ]
    },
    {
        "task": "Make Marshmallow Cream Cheese Fruit Dip",
        "step": [
            "blend_ingredients cream_cheese marshmallow_cream blender",
            "pour_combined_into_bowl cream_cheese marshmallow_cream blender mixing_bowl",
            "serve_with_fruit fruit mixing_bowl marshmallow_cream marshmallow_cream"
        ],
        "desc": [
            "Blend the cream cheese and marshmallow cream until combined.",
            "Pour the mixture into a clean bowl.",
            "Serve with fruit or whatever else you like.",
            "Finished."
        ],
        "action": [
            "(:action blend_ingredients\n    :parameters (?cream_cheese - ingredient ?marshmallow_cream - ingredient ?blender - appliance)\n    :precondition (and\n      (separate ?cream_cheese ?marshmallow_cream)\n      (turned_off ?blender)\n      (clean_appliance ?blender)\n      (in_container ?cream_cheese ?blender)\n      (in_container ?marshmallow_cream ?blender)\n    )\n    :effect (and\n      (not (separate ?cream_cheese ?marshmallow_cream))\n      (combined ?cream_cheese ?marshmallow_cream)\n      (turned_on ?blender)\n      (dirty_appliance ?blender)\n      (not (clean_appliance ?blender))\n      (full ?blender)\n    )\n  )\n\n  ; Action 2: Pour the mixture into a clean bowl",
            "(:action pour_combined_into_bowl\n    :parameters (?cream_cheese - ingredient ?marshmallow_cream - ingredient ?blender - appliance ?bowl - container)\n    :precondition (and\n      (combined ?cream_cheese ?marshmallow_cream)\n      (turned_on ?blender)\n      (full ?blender)\n      (clean ?bowl)\n      (empty ?bowl)\n    )\n    :effect (and\n      (in_container ?cream_cheese ?bowl)\n      (in_container ?marshmallow_cream ?bowl)\n      (empty ?blender)\n      (not (full ?blender))\n      (full ?bowl)\n      (dirty ?bowl)\n      (not (empty ?bowl))\n      (not (clean ?bowl))\n      (turned_off ?blender)\n    )\n  )\n\n  ; Action 3: Serve with fruit",
            "(:action serve_with_fruit\n    :parameters (?fruit - ingredient ?bowl - container ?cream_cheese - ingredient ?marshmallow_cream - ingredient)\n    :precondition (and\n      (whole ?fruit)\n      (full ?bowl)\n      (in_container ?cream_cheese ?bowl)\n      (in_container ?marshmallow_cream ?bowl)\n    )\n    :effect (and\n      (sliced ?fruit)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Get Wailord in Pok\u00e9mon Emerald",
        "step": [
            "use-wailmer wailmer",
            "train-wailmer wailmer",
            "give-rare-candies wailmer",
            "attain-battle-frontier wailmer",
            "evolve-wailmer wailmer",
            "copy-rare-candies wailmer"
        ],
        "desc": [
            "This is the pre-evolution of Wailord.",
            "This Wailmer can be pretty annoying to train, so be patient.",
            "Train it until it evolves.",
            "Go to battle frontier and copy some rare candies.",
            "Give the rare candies to a Wailmer and evolve it into a Wailord using them."
        ],
        "action": [
            "(:action use-wailmer\n    :parameters (?p - pokemon)\n    :precondition (unused ?p)\n    :effect (and (used ?p) (not (unused ?p)))\n  )",
            "(:action train-wailmer\n    :parameters (?p - pokemon)\n    :precondition (untrained ?p)\n    :effect (and (trained ?p) (not (untrained ?p)))\n  )",
            "(:action evolve-wailmer\n    :parameters (?p - pokemon)\n    :precondition (unevolved ?p)\n    :effect (and (evolved ?p) (not (unevolved ?p)))\n  )",
            "(:action attain-battle-frontier\n    :parameters (?p - pokemon)\n    :precondition (unattained ?p)\n    :effect (and (now-attained ?p) (not (unattained ?p)))\n  )",
            "(:action copy-rare-candies\n    :parameters (?p - pokemon)\n    :precondition (uncopied ?p)\n    :effect (and (copied ?p) (not (uncopied ?p)))\n  )",
            "(:action give-rare-candies\n    :parameters (?p - pokemon)\n    :precondition (without-rare-candies ?p)\n    :effect (and (now-holder-of-rare-candy ?p) (not (without-rare-candies ?p)))\n  )\n)"
        ]
    },
    {
        "task": "Spool Knit a Winter Hat",
        "step": [
            "sew_web_into_rectangle web",
            "join_ends end_points",
            "knit_web web",
            "secure_top_and_make_tassel finished_hat yarn_piece"
        ],
        "desc": [
            "Knit eighty-four inches of flat web.",
            "Begin five inches from the end of the web, turn and sew into a rectangular form five inches wide and eight inches long.",
            "Join the five-inch ends, and draw in the top with the needle and a piece of the material from which the cap was made.",
            "After securing the top, twist and fold the piece of yarn remaining for a cord and fasten a number of strands of yarn through the loop for a tassel."
        ],
        "action": [
            "(:action knit_web\n    :parameters (?w - webbing)\n    :precondition (in_line ?w)\n    :effect (and\n              (knitted_together ?w)\n              (not (in_line ?w))\n            )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5c06\u7f51\u7f1d\u5236\u6210\u77e9\u5f62",
            "(:action sew_web_into_rectangle\n    :parameters (?w - webbing)\n    :precondition (and\n                    (shape_straight ?w)\n                    (width_wider ?w)\n                  )\n    :effect (and\n              (shape_rectangular ?w)\n              (width_narrower ?w)\n              (not (shape_straight ?w))\n              (not (width_wider ?w))\n            )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u8fde\u63a5\u672b\u7aef",
            "(:action join_ends\n    :parameters (?e - ends)\n    :precondition (unjoined ?e)\n    :effect (and\n              (joined ?e)\n              (not (unjoined ?e))\n            )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u56fa\u5b9a\u9876\u90e8\u5e76\u5236\u4f5c\u6d41\u82cf",
            "(:action secure_top_and_make_tassel\n    :parameters (?h - hat ?y - yarn)\n    :precondition (and\n                    (has_weight_lighter ?h)\n                    (shape_straight_yarn ?y)\n                  )\n    :effect (and\n              (has_weight_heavier ?h)\n              (shape_twisted_and_folded ?y)\n              (not (has_weight_lighter ?h))\n              (not (shape_straight_yarn ?y))\n            )\n  )\n)"
        ]
    },
    {
        "task": "Remove Black Skid Marks from Linoleum",
        "step": [
            "obtain_eraser you eraser",
            "kneel_and_rub you eraser linoleum_floor",
            "wash_and_dry you linoleum_floor faucet_water"
        ],
        "desc": [
            "Obtain a decent sized eraser that you can hold comfortable in your fingers.",
            "Kneel down next to the linoleum and use the eraser to rub along the skid mark.",
            "Continue rubbing until the black mark lifts.",
            "Wash and dry as usual."
        ],
        "action": [
            "(:action obtain_eraser\n    :parameters (?a - agent ?t - tool)\n    :precondition (tool_available ?t)\n    :effect (and\n              (has_tool ?a ?t)\n              (not (tool_available ?t))\n            )\n  )\n\n  ;; \u8e72\u4e0b\u5e76\u64e6\u62ed",
            "(:action kneel_and_rub\n    :parameters (?a - agent ?t - tool ?s - surface)\n    :precondition (and\n                    (has_tool ?a ?t)\n                    (on_surface ?a ?s)\n                    (skid_mark_present ?s)\n                    (not (tool_dirty ?t))\n                  )\n    :effect (and\n              (kneeling ?a)\n              (skid_mark_removed ?s)\n              (floor_clean ?s)\n              (tool_dirty ?t)\n            )\n  )\n\n  ;; \u6e05\u6d17\u5e76\u64e6\u5e72",
            "(:action wash_and_dry\n    :parameters (?a - agent ?s - surface ?w - water)\n    :precondition (and\n                    (floor_clean ?s)\n                    (water_available ?w)\n                  )\n    :effect (and\n              (floor_dry ?s)\n            )\n  )\n)"
        ]
    },
    {
        "task": "Be a Spy With Friends",
        "step": [
            "form_spy_group co_conspirator1 co_conspirator1 co_conspirator1",
            "set_location safehouse",
            "identify_victim target_victim",
            "gather_gear you camera",
            "gather_gear you binoculars",
            "gather_gear co_conspirator2 camera",
            "gather_gear co_conspirator2 binoculars",
            "gather_gear co_conspirator1 camera",
            "gather_gear co_conspirator1 binoculars"
        ],
        "desc": [
            "Set-up your spy group You will need a trustworthy 2-5 person group.",
            "It's good to have a place to keep your gear when not in use, hold meetings, and just talk in private without worrying about the nosiness of certain people in public places.",
            "Get some gear To be a good spy, you and your friends must have gear that will help with missions.",
            "Find your first \"victim\" The victim is the person you will be watching and spying on."
        ],
        "action": [
            "(:action form_spy_group\n    :parameters (?p1 - person ?p2 - person ?p3 - person)\n    :precondition (and\n                    (not (group-formed))\n                    (member-of-group ?p1)\n                    (member-of-group ?p2)\n                    (member-of-group ?p3))\n    :effect (group-formed)\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u8bbe\u7f6e\u95f4\u8c0d\u57fa\u5730\u5730\u70b9",
            "(:action set_location\n    :parameters (?l - location)\n    :precondition (and\n                    (group-formed)\n                    (not (location-set ?l)))\n    :effect (location-set ?l)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6536\u96c6\u88c5\u5907",
            "(:action gather_gear\n    :parameters (?p - person ?g - gear)\n    :precondition (and\n                    (group-formed)\n                    (location-set safehouse)\n                    (not (has-gear ?p ?g)))\n    :effect (has-gear ?p ?g)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u8bc6\u522b\u76ee\u6807\u53d7\u5bb3\u8005",
            "(:action identify_victim\n    :parameters (?v - victim)\n    :precondition (not (victim-identified ?v))\n    :effect (victim-identified ?v)\n  )\n)"
        ]
    },
    {
        "task": "Make a Fairy House in the Woods",
        "step": [
            "collect_sticks stick3",
            "bundle_sticks stick3",
            "collect_sticks stick2",
            "collect_sticks stick1",
            "create_formation stick3",
            "bundle_sticks stick2",
            "bundle_sticks stick1",
            "build_walls fairy_house1 stick3",
            "find_area area1",
            "use_bark stick3",
            "create_formation stick2",
            "use_bark stick2",
            "create_formation stick1",
            "use_bark stick1",
            "decorate_fairy_house fairy_house1"
        ],
        "desc": [
            "Find a small area with slightly damp dirt.",
            "Collect many twigs and sticks.",
            "Using the sticks, create either a square formation, circle formation, or a Teepee formation.",
            "Build your exterior walls.",
            "You can use either a leaf or a wide strip of bark.",
            "Decorate."
        ],
        "action": [
            "(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u6536\u96c6\u68cd\u5b50",
            "(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6346\u7ed1\u68cd\u5b50",
            "(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u521b\u5efa\u7ed3\u6784",
            "(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5efa\u9020\u5899\u58c1",
            "(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u4f7f\u7528\u6811\u76ae\u88c5\u9970",
            "(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;; \u52a8\u4f5c7\uff1a\u88c5\u9970\u4ed9\u5973\u5c4b",
            "(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)"
        ]
    },
    {
        "task": "Grow Dwarf Balsam Fir",
        "step": [
            "choose_container container1 garden_center",
            "choose_soil soil1 garden_center",
            "choose_plant fir1 nursery",
            "plant_fir fir1 container1 soil1",
            "establish_plant fir1 container1",
            "re_pot fir1 container1 container2"
        ],
        "desc": [
            "Choose the plant from a nursery or garden center.",
            "This plant spreads and flattens as it grows, so select a broad sized container, preferably with a rounded shape.",
            "Choose the potting soil.",
            "Plant the fir in the container.",
            "Keep this up until the tree is well established.",
            "Re-pot occasionally."
        ],
        "action": [
            "(:action choose_plant\n    :parameters (?p - plant ?loc - location)\n    :precondition (available_plant_at ?p ?loc)\n    :effect (and\n              (has_plant ?p)\n              (not (available_plant_at ?p ?loc))\n            )\n  )\n\n  ;; \u9009\u62e9\u5bb9\u5668",
            "(:action choose_container\n    :parameters (?c - container ?loc - location)\n    :precondition (available_container_at ?c ?loc)\n    :effect (and\n              (has_container ?c)\n              (not (available_container_at ?c ?loc))\n            )\n  )\n\n  ;; \u9009\u62e9\u571f\u58e4",
            "(:action choose_soil\n    :parameters (?s - soil ?loc - location)\n    :precondition (available_soil_at ?s ?loc)\n    :effect (and\n              (has_soil ?s)\n              (not (available_soil_at ?s ?loc))\n            )\n  )\n\n  ;; \u5c06\u51b7\u6749\u79cd\u690d\u5230\u5bb9\u5668\u4e2d",
            "(:action plant_fir\n    :parameters (?p - plant ?c - container ?s - soil)\n    :precondition (and\n                    (has_plant ?p)\n                    (has_container ?c)\n                    (has_soil ?s)\n                    (clean ?c)\n                  )\n    :effect (and\n              (planted_in ?p ?c)\n              (not (has_plant ?p))\n              (not (has_container ?c))\n              (not (has_soil ?s))\n              (dirty ?c)\n              (watered ?p)\n            )\n  )\n\n  ;; \u517b\u62a4\u690d\u7269\uff08\u6d47\u6c34\uff09",
            "(:action water_plant\n    :parameters (?p - plant ?c - container)\n    :precondition (planted_in ?p ?c) ;; \u8fd9\u91cc\u5047\u8bbe\u5bb9\u5668\u5df2\u77e5\n    :effect (watered ?p)\n  )\n\n  ;; \u786e\u7acb\u690d\u7269",
            "(:action establish_plant\n    :parameters (?p - plant ?c - container)\n    :precondition (and\n                    (planted_in ?p ?c)\n                    (watered ?p)\n                  )\n    :effect (established ?p)\n  )\n\n  ;; \u79fb\u683d\u690d\u7269",
            "(:action re_pot\n    :parameters (?p - plant ?c_old - container ?c_new - container)\n    :precondition (and\n                    (planted_in ?p ?c_old)\n                    (established ?p)\n                    (needs_repotting ?p)\n                    (clean ?c_new)\n                  )\n    :effect (and\n              (planted_in ?p ?c_new)\n              (dirty ?c_old)\n              (not (planted_in ?p ?c_old))\n            )\n  )\n)"
        ]
    },
    {
        "task": "Make Slow Cooker Hot Cocoa",
        "step": [
            "make_initial_mixture mixture",
            "add_ingredients_to_slow_cooker mixture",
            "heat_mixture mixture",
            "serve_cocoa mixture"
        ],
        "desc": [
            "Make the initial cocoa mixture.",
            "Add all the ingredients in a slow cooker.",
            "Allow the mixture to heat for 3 hours on a low setting.",
            "Serve immediately or keep the slow cooker on a \"Keep Warm\" setting."
        ],
        "action": [
            "(:action make_initial_mixture\n    :parameters (?e - entity)\n    :precondition (initial_mixture ?e)\n    :effect (and (mixed_mixture ?e) (not (initial_mixture ?e)))\n  )",
            "(:action add_ingredients_to_slow_cooker\n    :parameters (?e - entity)\n    :precondition (and (mixed_mixture ?e) (in_bowl ?e))\n    :effect (and (in_slow_cooker ?e) (not (in_bowl ?e)))\n  )",
            "(:action heat_mixture\n    :parameters (?e - entity)\n    :precondition (in_slow_cooker ?e)\n    :effect (mixture_heated ?e)\n  )",
            "(:action serve_cocoa\n    :parameters (?e - entity)\n    :precondition (mixture_heated ?e)\n    :effect (cocoa_served ?e)\n  )\n)"
        ]
    },
    {
        "task": "Board a Small Boat",
        "step": [
            "board_via_platform passenger1 platform1 boat1 dock1",
            "hold_rails passenger1 boat1",
            "secure_legs passenger1 boat1",
            "stabilize_boat passenger1 boat1"
        ],
        "desc": [
            "Prefer boarding across a solid platform if possible.",
            "If you are crossing using a platform, hold on to the rails provided.",
            "Avoid plonking one leg in the boat and leaving one on the jetty - this will cause wobbling and you might fall into the water.",
            "Once in the boat, always remain in the centre line to move around it and lower yourself to a crouch level so that you reduce your centre of gravity and keep the craft as still as possible.",
            "Keep the craft steady as others board."
        ],
        "action": [
            "(:action board_via_platform\n    :parameters (?p - passenger ?pl - platform ?b - boat ?d - dock)\n    :precondition (and\n                    (platform-present ?pl)\n                    (at ?p ?pl)\n                    (at ?pl ?d)\n                    (at ?b ?d))\n    :effect (and\n              (at ?p ?b)\n              (not (at ?p ?pl))\n             )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u63e1\u4f4f\u6276\u624b",
            "(:action hold_rails\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (holding-rail ?p)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u786e\u4fdd\u53cc\u817f\u5728\u8239\u5185",
            "(:action secure_legs\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (legs-in-boat ?p)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u7a33\u5b9a\u8239\u53ea",
            "(:action stabilize_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and\n                    (legs-in-boat ?p)\n                    (holding-rail ?p)\n                    (at ?p ?b))\n    :effect (and\n              (centered ?b)\n              (crouched ?p)\n              (boat-stable ?b)\n             )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u4ed6\u4eba\u4fdd\u6301\u8239\u53ea\u7a33\u5b9a",
            "(:action others_keep_boat_steady\n    :parameters (?op - passenger ?b - boat)\n    :precondition (boat-stable ?b)\n    :effect (at ?op ?b)\n  )\n\n)"
        ]
    },
    {
        "task": "Make a Bead Ring",
        "step": [
            "sliplargerbeads bead3",
            "sliplargerbeads bead2",
            "sliplargerbeads bead1",
            "cutelastic elastic1",
            "finishring elastic1 tail1",
            "admirering you"
        ],
        "desc": [
            "Cut a strip of elastic.",
            "Slip two larger beads at either side of the small bead.",
            "Slip a small bead on one tail.",
            "Continue this pattern until you have enough beads to fit around the finger.",
            "Finish the ring by slipping the loose tails through the first small bead you placed on the elastic.",
            "Finished."
        ],
        "action": [
            "(:action CutElastic\n    :parameters (?e - elastic)\n    :precondition (not (cut ?e))\n    :effect (cut ?e)\n  )",
            "(:action SlipLargerBeads\n    :parameters (?b - bead)\n    :precondition (and (not (on_strip ?b)) (not (in_order ?b)))\n    :effect (and (on_strip ?b) (in_order ?b))\n  )",
            "(:action SlipSmallBead\n    :parameters (?b - bead)\n    :precondition (not (on_strip ?b))\n    :effect (on_strip ?b)\n  )",
            "(:action PatternBeads\n    :parameters (?b - bead)\n    :precondition (not (in_order ?b))\n    :effect (in_order ?b)\n  )",
            "(:action FinishRing\n    :parameters (?e - elastic ?t - tail)\n    :precondition (and (not (curved ?e)) (not (adorned ?t)))\n    :effect (and (curved ?e) (adorned ?t))\n  )",
            "(:action AdmireRing\n    :parameters (?p - person)\n    :precondition (not (admiring ?p))\n    :effect (admiring ?p)\n  )\n)"
        ]
    },
    {
        "task": "Change the Oil on a Yamaha Virago XV250",
        "step": [
            "remove-bung oil1 bung1 bike1 bottle1",
            "remove-oil-cap oil_cap1 oil_tank1 bung1 bike1 oil1",
            "remove-oil-filter oil_filter1 bottle1 bike1 oil1",
            "screw-bung bung1 bike1 oil1 oil_filter1",
            "recycle-old-oil old_oil1 funnel1 can1 jug1",
            "fill-oil new_oil1 bottle1 oil_tank1 bung1 bike1"
        ],
        "desc": [
            "Remove the bung to let the oil out to drain.",
            "Remove the oil cap to let the oil drain fully and let air in to help drain the old oil out.",
            "Remove the oil filter.",
            "Screw the bung back on.",
            "Fill the oil back up.",
            "Recycle the old oil."
        ],
        "action": [
            "(:action remove-bung\n    :parameters (?oil - oil ?bung - bung ?bike - vehicle ?can - container)\n    :precondition (and\n                    (in ?oil ?bike)\n                    (attached ?bung)\n                    (full ?bung))\n    :effect (and\n              (in ?oil ?can)\n              (not (attached ?bung))\n              (have_some ?oil ?bung)\n              )\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u79fb\u9664\u6cb9\u76d6",
            "(:action remove-oil-cap\n    :parameters (?oil_cap - oil_cap ?oil_tank - container ?bung - bung ?bike - vehicle ?oil - oil)\n    :precondition (and\n                    (on ?oil_cap ?oil_tank)\n                    (closed ?oil_cap)\n                    (have_some ?oil ?bung)\n                    )\n    :effect (and\n              (not (on ?oil_cap ?oil_tank))\n              (open ?oil_cap)\n              (not (in ?oil ?bike))\n              (empty ?bung)\n              )\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u79fb\u9664\u6cb9\u6ee4\u5668",
            "(:action remove-oil-filter\n    :parameters (?oil_filter - oil_filter ?oil_tank - container ?bike - vehicle ?oil - oil)\n    :precondition (and (in_filter ?oil_filter) (not (in ?oil ?bike)))\n    :effect (and\n              (not (in_filter ?oil_filter))\n              (out ?oil_filter)\n              )\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u91cd\u65b0\u5b89\u88c5\u6cb9\u585e",
            "(:action screw-bung\n    :parameters (?bung - bung ?bike - vehicle ?oil - oil ?oil_filter - oil_filter)\n    :precondition (and\n                    (away-from-bike ?bung)\n                    (loose ?bung)\n                    (out ?oil_filter)\n                    (not (in ?oil ?bike)\n                    )\n                    )\n    :effect (and\n              (on ?bung ?bike)\n              (attached ?bung))\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u6dfb\u52a0\u65b0\u6cb9",
            "(:action fill-oil\n    :parameters (?new_oil - new_oil ?bottle - container ?oil_tank - container ?bung - bung ?bike - vehicle)\n    :precondition (and\n                    (empty ?new_oil)\n                    (in ?new_oil ?bottle)\n                    (on ?bung ?bike)\n                    )\n    :effect (and\n              (full ?new_oil)\n              (in ?new_oil ?oil_tank))\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u56de\u6536\u65e7\u6cb9",
            "(:action recycle-old-oil\n    :parameters (?old_oil - old_oil ?funnel - funnel ?can - container ?jug - container)\n    :precondition (and\n                    (in ?old_oil ?can)\n                    (clean ?funnel))\n    :effect (and\n              (in ?old_oil ?jug)\n              (dirty ?funnel))\n  )\n\n)"
        ]
    },
    {
        "task": "Make Your Den Look Like a Home on Animal Jam (Non Members)",
        "step": [
            "keep-family-safe kids-room",
            "bring-stuff-home stuff",
            "bring-stuff-home screens",
            "create-rooms outside-area",
            "create-rooms kids-room",
            "acquire-gems gems"
        ],
        "desc": [
            "Get lots of gems.",
            "for a family home you will need quite a lot of stuff.",
            "Try to get room shoji screens so you can section things off into smaller rooms.",
            "If you can get shoji screens, try making a kids room, a master bedroom, and a living/dining room.",
            "Make an outside area.",
            "Keep your family safe."
        ],
        "action": [
            "(:action acquire-gems\n    :parameters (?entity - entity)\n    :precondition (unacquired ?entity)\n    :effect (and (acquired ?entity) (not (unacquired ?entity)))\n  )",
            "(:action bring-stuff-home\n    :parameters (?entity - entity)\n    :precondition (in-store ?entity)\n    :effect (and (in-home ?entity) (not (in-store ?entity)))\n  )",
            "(:action get-screens\n    :parameters (?entity - entity)\n    :precondition (in-store ?entity)\n    :effect (and (in-home ?entity) (not (in-store ?entity)))\n  )",
            "(:action create-rooms\n    :parameters (?entity - entity)\n    :precondition (unmade ?entity)\n    :effect (and (created ?entity) (not (unmade ?entity)))\n  )",
            "(:action make-outside-area\n    :parameters (?entity - entity)\n    :precondition (unmade ?entity)\n    :effect (and (created ?entity) (not (unmade ?entity)))\n  )",
            "(:action keep-family-safe\n    :parameters (?entity - entity)\n    :precondition ()\n    :effect (safe ?entity)\n  )\n)"
        ]
    },
    {
        "task": "Make Soap Bubbles for Your Children",
        "step": [
            "mix_soap_and_water alice soap1 soap1 bowl1 mixture1",
            "enhance_solution alice mixture1",
            "go_outside alice",
            "make_bubble_wand alice wand1",
            "make_bubble alice wand1 bubble1"
        ],
        "desc": [
            "Mix soap and water.",
            "Enhance your bubble solution.",
            "Make a little bubble wand.",
            "Make a giant bubble wand.",
            "First go outside, since bubbles look most beautiful when the sun shines through their iridescent swirls.",
            "Make giant bubbles."
        ],
        "action": [
            "(:action mix_soap_and_water\n    :parameters (?p - person ?soap - material ?water - material ?bowl - container ?mixture - material)\n    :precondition (and\n      (in ?soap ?bowl)\n      (in ?water ?bowl)\n      (not (mixed ?mixture))\n    )\n    :effect (and\n      (mixed ?mixture)\n      (in ?mixture ?bowl)\n      (not (in ?soap ?bowl))\n      (not (in ?water ?bowl))\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u589e\u5f3a\u6ce1\u6ce1\u6eb6\u6db2",
            "(:action enhance_solution\n    :parameters (?p - person ?mixture - material)\n    :precondition (and\n      (mixed ?mixture)\n      (not (enhanced ?mixture))\n    )\n    :effect (enhanced ?mixture)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u5236\u4f5c\u6ce1\u6ce1\u68d2",
            "(:action make_bubble_wand\n    :parameters (?p - person ?wand - tool)\n    :precondition (and\n      (enhanced mixture1)\n      (not (have_wand ?p ?wand))\n    )\n    :effect (have_wand ?p ?wand)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u524d\u5f80\u6237\u5916",
            "(:action go_outside\n    :parameters (?p - person)\n    :precondition (not (outside ?p))\n    :effect (outside ?p)\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5236\u4f5c\u80a5\u7682\u6ce1\u6ce1",
            "(:action make_bubble\n    :parameters (?p - person ?wand - tool ?b - bubble)\n    :precondition (and\n      (have_wand ?p ?wand)\n      (enhanced mixture1)\n      (outside ?p)\n    )\n    :effect (and\n      (in_air ?b)\n      (wet ?wand)\n      (served_bubble ?b)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Fold Bath Towels for Quick Hanging at Home",
        "step": [
            "fold-lengthwise towel1",
            "fold-half-twice towel1",
            "store-in-closet towel1",
            "hang-on-rack towel1"
        ],
        "desc": [
            "Fold the towel in thirds lengthwise.",
            "Fold in half, and then in half again.",
            "Store the towel in the linen closet.",
            "To go from the closet for hanging, simply unfold the final fold and hang on the towel rack."
        ],
        "action": [
            "(:action fold-lengthwise\n    :parameters (?towel - towel)\n    :precondition (and (not (folded ?towel)) (not (smaller ?towel)))\n    :effect (and (folded ?towel) (smaller ?towel)))",
            "(:action fold-half-twice\n    :parameters (?towel - towel)\n    :precondition (and (folded ?towel) (smaller ?towel) (not (thicker ?towel)))\n    :effect (and (thicker ?towel)))",
            "(:action store-in-closet\n    :parameters (?towel - towel)\n    :precondition (and (thicker ?towel) (not (in-closet ?towel)) (not (emptiness ?towel)))\n    :effect (and (in-closet ?towel) (emptiness ?towel)))",
            "(:action hang-on-rack\n    :parameters (?towel - towel)\n    :precondition (and (in-closet ?towel) (folded ?towel) (not (on-rack ?towel)) (emptiness ?towel))\n    :effect (and (on-rack ?towel) (not (folded ?towel)) (openness ?towel))))"
        ]
    },
    {
        "task": "Make Potato Ribbons",
        "step": [
            "wash_potatoes potato1 sink1 cloth1",
            "wash_potatoes potato2 sink1 cloth1",
            "cut_potatoes potato2 cloth1",
            "cut_potatoes potato1 cloth1",
            "drain_potatoes potato2 cloth1",
            "drain_potatoes potato1 cloth1",
            "fry_potatoes potato2 pan1 stove1",
            "fry_potatoes potato1 pan1 stove1",
            "serve_potatoes potato2 dish1",
            "serve_potatoes potato1 dish1"
        ],
        "desc": [
            "Wash especially well if you intend to keep the peel intact.",
            "Cut round and round, keeping the peel as thin as possible as you go.",
            "Drain the potatoes dry on a clean cloth.",
            "Fry the ribbons in deep, hot fat.",
            "Serve."
        ],
        "action": [
            "(:action wash_potatoes\n    :parameters (?potato - ingredient ?sink - utensil ?cloth - utensil)\n    :precondition (and\n      (at ?potato kitchen_counter)\n      (at ?sink kitchen_sink)\n      (at ?cloth kitchen_counter)\n      (clean ?sink)\n    )\n    :effect (and\n      (washed ?potato)\n      (dirty ?sink)\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5207\u571f\u8c46",
            "(:action cut_potatoes\n    :parameters (?potato - ingredient ?peeler - utensil)\n    :precondition (and\n      (washed ?potato)\n      (at ?potato kitchen_counter)\n      (at ?peeler kitchen_counter)\n      (clean ?peeler)\n    )\n    :effect (and\n      (peeled ?potato)\n      (cut ?potato)\n      (dirty ?peeler)\n    )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6ca5\u5e72\u571f\u8c46",
            "(:action drain_potatoes\n    :parameters (?potato - ingredient ?cloth - utensil)\n    :precondition (and\n      (cut ?potato)\n      (at ?potato kitchen_counter)\n      (at ?cloth kitchen_counter)\n      (clean ?cloth)\n    )\n    :effect (and\n      (drained ?potato)\n      (dirty ?cloth)\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u70b8\u571f\u8c46\u4e1d",
            "(:action fry_potatoes\n    :parameters (?potato - ingredient ?pan - utensil ?stove - appliance)\n    :precondition (and\n      (drained ?potato)\n      (at ?pan kitchen_stove)\n      (at ?stove kitchen_stove)\n      (clean ?pan)\n      (heated ?stove)\n      (has_oil ?stove)\n    )\n    :effect (and\n      (fried ?potato)\n      (dirty ?pan)\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u4e0a\u83dc",
            "(:action serve_potatoes\n    :parameters (?potato - ingredient ?dish - dish)\n    :precondition (and\n      (fried ?potato)\n      (at ?dish dining_table)\n    )\n    :effect (and\n      (in_dish ?potato ?dish)\n      (not (fried ?potato))\n    )\n  )\n)"
        ]
    },
    {
        "task": "Clean Your Home Efficiently",
        "step": [
            "pickup_items item1 basket1",
            "clean_surfaces tv cleaner1",
            "clean_surfaces window1 cleaner1",
            "clean_surfaces window2 cleaner1",
            "pickup_items item2 basket1",
            "shake_rugs rug1",
            "shake_rugs rug2",
            "empty_trash basket1 trash_bag1",
            "empty_trash basket1 trash_bag2",
            "dust_room living_room",
            "dust_room kitchen",
            "dust_room bathroom"
        ],
        "desc": [
            "######Pick up and put away stray items and throw trash into waste baskets.",
            "######Dust, again going through the entire house room by room.",
            "######Take a large trash bag and go through each room emptying the waste baskets and trash cans.",
            "######Use a spray cleaner and rags or paper towels to clean any glass surfaces, including the TV screens.",
            "First pick up any throw rugs and inside door mats and shake them outside.",
            "######Enjoy your clean home!"
        ],
        "action": [
            "(:action pickup_items\n    :parameters (?item - item ?basket - basket)\n    :precondition (and\n                    (stray_item ?item)\n                    (empty ?basket))\n    :effect (and\n              (in_basket ?item ?basket)\n              (organized ?item)\n              (full ?basket))\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u6e05\u6d01\u623f\u95f4\u7684\u7070\u5c18",
            "(:action dust_room\n    :parameters (?room - room)\n    :precondition (dusty ?room)\n    :effect (and\n              (cleaned_room ?room)\n              (not (dusty ?room)))\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6e05\u7a7a\u5783\u573e\u6876\u5230\u5783\u573e\u888b",
            "(:action empty_trash\n    :parameters (?basket - basket ?dish - dish)\n    :precondition (full ?basket)\n    :effect (and\n              (empty ?basket)\n              (trash_disposed ?dish))\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u4f7f\u7528\u55b7\u96fe\u6e05\u6d01\u5242\u6e05\u6d01\u8868\u9762",
            "(:action clean_surfaces\n    :parameters (?surface - surface ?cleaner - cleaner)\n    :precondition (dirty_surface ?surface)\n    :effect (cleaned_surface ?surface)\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u6447\u52a8\u5730\u6bef\u548c\u95e8\u57ab\u4ee5\u6e05\u6d01",
            "(:action shake_rugs\n    :parameters (?rug - rug)\n    :precondition (dirty_rug ?rug)\n    :effect (cleaned_rug ?rug)\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u4eab\u53d7\u5e72\u51c0\u7684\u5bb6",
            "(:action enjoy_clean_home\n    :parameters ()\n    :precondition ()\n    :effect ()\n  )\n)"
        ]
    },
    {
        "task": "Make Taco Filling",
        "step": [
            "brown_meat_and_onion beef1 onion1 pan1 stove1 kitchen_counter",
            "move_pan_to_counter pan1 kitchen_counter sink_location",
            "drain_fat pan1",
            "move_pan_to_counter pan1 sink_location kitchen_counter",
            "add_ingredients_and_simmer pan1 spice1 tomato1 stove1 kitchen_counter",
            "finish_preparation pan1 serving_dish1 beef1 kitchen_counter"
        ],
        "desc": [
            "Brown the meat and the onion in a medium sized frying pan.",
            "Drain the excess fat.",
            "Add the remaining ingredients (except for the hot sauce) and simmer for fifteen minutes.",
            "Finished."
        ],
        "action": [
            "(:action brown_meat_and_onion\n    :parameters (?meat - ingredient ?onion - ingredient ?pan - tool ?stove - appliance ?loc - location)\n    :precondition (and\n      (at ?meat ?loc)\n      (at ?onion ?loc)\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n      (clean ?pan)\n    )\n    :effect (and\n      (cooked ?meat)\n      (cooked ?onion)\n      (heated ?pan)\n      (not (clean ?pan))\n      (in-pan ?meat ?pan)\n      (in-pan ?onion ?pan)\n      (not (at ?meat ?loc))\n      (not (at ?onion ?loc))\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5c06\u714e\u9505\u79fb\u5230\u6c34\u69fd",
            "(:action move_pan_to_sink\n    :parameters (?pan - tool ?from - location ?to - location)\n    :precondition (and\n      (at-tool ?pan ?from)\n    )\n    :effect (and\n      (at-tool ?pan ?to)\n      (not (at-tool ?pan ?from))\n    )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6392\u51fa\u591a\u4f59\u7684\u8102\u80aa",
            "(:action drain_fat\n    :parameters (?pan - tool)\n    :precondition (and\n      (heated ?pan)\n      (at-tool ?pan sink_location)\n    )\n    :effect (and\n      (drained ?pan)\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u5c06\u714e\u9505\u79fb\u56de\u67dc\u53f0",
            "(:action move_pan_to_counter\n    :parameters (?pan - tool ?from - location ?to - location)\n    :precondition (and\n      (at-tool ?pan ?from)\n    )\n    :effect (and\n      (at-tool ?pan ?to)\n      (not (at-tool ?pan ?from))\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u6dfb\u52a0\u5269\u4f59\u98df\u6750\u5e76\u7096\u716e",
            "(:action add_ingredients_and_simmer\n    :parameters (?pan - tool ?ingredient1 - ingredient ?ingredient2 - ingredient ?stove - appliance ?loc - location)\n    :precondition (and\n      (drained ?pan)\n      (at ?ingredient1 ?loc)\n      (at ?ingredient2 ?loc)\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n    )\n    :effect (and\n      (in-pan ?ingredient1 ?pan)\n      (in-pan ?ingredient2 ?pan)\n      (cooked ?ingredient1)\n      (cooked ?ingredient2)\n      (simmering ?pan)\n      (heated ?pan)\n      (not (at ?ingredient1 ?loc))\n      (not (at ?ingredient2 ?loc))\n    )\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u5b8c\u6210\u51c6\u5907",
            "(:action finish_preparation\n    :parameters (?pan - tool ?dish - dish ?ingredients - ingredient ?loc - location)\n    :precondition (and\n      (simmering ?pan)\n      (at-tool ?pan ?loc)\n      (at-dish ?dish ?loc)\n      (forall (?i - ingredient)\n        (in-pan ?i ?pan))\n    )\n    :effect (and\n      (forall (?i - ingredient)\n        (and\n          (in-dish ?i ?dish)\n          (not (in-pan ?i ?pan))\n        ))\n      (not (simmering ?pan))\n      (clean ?pan)\n      (not (heated ?pan))\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make a Simple Inside Windshield Cleaner",
        "step": [
            "purchase_eraser user1 eraser1 store_location car_location",
            "store_eraser user1 eraser1 car_door_spot1 car_location",
            "use_eraser_to_clean user1 eraser1 windshield_inner1 car_door_spot1 car_location",
            "replace_eraser user1 eraser1 glovebox1 car_location"
        ],
        "desc": [
            "Purchase a blackboard eraser.",
            "Keep the blackboard eraser in the glove box or attach it to a spot on or near the car door for easy access.",
            "Use the eraser to clean the inner side of the windshield.",
            "Replace after use."
        ],
        "action": [
            "(:action purchase_eraser\n    :parameters (?p - person ?t - tool ?store - location ?home - location)\n    :precondition (and\n      (at_location ?t ?store)\n      (has_money ?p)\n      (not (owned ?p ?t))\n    )\n    :effect (and\n      (owned ?p ?t)\n      (not (at_location ?t ?store))\n      (at_location ?t ?home)\n      (not (has_money ?p))\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5c06\u64e6\u5b50\u5b58\u653e\u5728\u5bb9\u5668\u4e2d",
            "(:action store_eraser\n    :parameters (?p - person ?t - tool ?c - container ?home_loc - location)\n    :precondition (and\n      (owned ?p ?t)\n      (at_location ?t ?home_loc)\n    )\n    :effect (and\n      (in_container ?t ?c)\n      (not (at_location ?t ?home_loc))\n    )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u4f7f\u7528\u64e6\u5b50\u6e05\u6d01\u6321\u98ce\u73bb\u7483",
            "(:action use_eraser_to_clean\n    :parameters (?p - person ?t - tool ?s - surface ?c - container ?windshield_loc - location)\n    :precondition (and\n      (owned ?p ?t)\n      (in_container ?t ?c)\n      (dirty ?s)\n    )\n    :effect (and\n      (clean ?s)\n      (used ?t)\n      (at_location ?t ?windshield_loc)\n      (not (in_container ?t ?c))\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u4f7f\u7528\u540e\u66ff\u6362\u64e6\u5b50",
            "(:action replace_eraser\n    :parameters (?p - person ?t - tool ?c - container ?windshield_loc - location)\n    :precondition (and\n      (owned ?p ?t)\n      (used ?t)\n      (at_location ?t ?windshield_loc)\n    )\n    :effect (and\n      (not (used ?t))\n      (clean_tool ?t)\n      (in_container ?t ?c)\n      (not (at_location ?t ?windshield_loc))\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make Chocolate Hearts for Valentine&#x27;s Day",
        "step": [
            "melt-chocolate chocolate microwave spoon",
            "freeze-chocolate chocolate chocolate",
            "release-from-molds chocolate chocolate",
            "box-chocolates chocolate"
        ],
        "desc": [
            "Assemble the ingredients needed.",
            "Melt the chocolate bars in the microwave until you have no lumps left after stirring.",
            "Pour the melted chocolate into the heart shaped molds.",
            "Put the chocolate into the freezer until hardened.",
            "Leave them out for one minute and pop out of molds, Or, cut heart shapes in the tray.",
            "Enjoy then and there, or box them up and give away!"
        ],
        "action": [
            "(:action assemble-ingredients\n    :parameters (?chocolate - entity ?ingredients - entity)\n    :precondition (and\n      (at-cost ?chocolate in-store)\n      (at-location ?ingredients in-cabinet)\n    )\n    :effect (and\n      (at-cost ?chocolate purchased-for-use)\n      (at-location ?ingredients on-countertop)\n    )\n  )",
            "(:action melt-chocolate\n    :parameters (?chocolate - entity ?microwave - entity ?spoon - entity)\n    :precondition (and\n      (at-texture ?chocolate solid)\n      (at-temperature ?chocolate colder)\n      (at-location ?chocolate packaged)\n      (at-power ?microwave off)\n      (at-cleanness ?spoon clean)\n    )\n    :effect (and\n      (at-texture ?chocolate liquid)\n      (at-temperature ?chocolate warmer)\n      (at-location ?chocolate out-of-package)\n      (at-power ?microwave on)\n      (at-cleanness ?spoon dirty)\n    )\n  )",
            "(:action pour-into-molds\n    :parameters (?chocolate - entity ?mold - entity)\n    :precondition (and\n      (at-texture ?chocolate liquid)\n      (at-fullness ?mold empty)\n    )\n    :effect (and\n      (at-texture ?chocolate in-molds)\n      (at-fullness ?mold full)\n    )\n  )",
            "(:action freeze-chocolate\n    :parameters (?chocolate - entity ?mold - entity)\n    :precondition (and\n      (at-texture ?chocolate liquid)\n    )\n    :effect (and\n      (at-texture ?chocolate frozen)\n      (at-hardness ?chocolate solid)\n      (at-temperature ?chocolate colder)\n      (at-ease-of-release ?chocolate easy-to-release-from-molds)\n      (at-fullness ?mold full)\n      (at-weight ?mold heavier)\n    )\n  )",
            "(:action release-from-molds\n    :parameters (?chocolate - entity ?mold - entity)\n    :precondition (and\n      (at-texture ?chocolate frozen)\n      (at-ease-of-release ?chocolate easy-to-release-from-molds)\n    )\n    :effect (and\n      (at-texture ?chocolate on-plate)\n      (at-fullness ?mold empty)\n      (at-weight ?mold lighter)\n    )\n  )",
            "(:action box-chocolates\n    :parameters (?chocolate - entity)\n    :precondition (and\n      (at-texture ?chocolate on-plate)\n    )\n    :effect (and\n      (at-texture ?chocolate in-box)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Freeze Baked Cookies or Biscuits",
        "step": [
            "place-in-container cookies",
            "separate-using-paper cookies",
            "place-in-freezer cookies",
            "thaw cookies"
        ],
        "desc": [
            "Place the biscuits or cookies into a rigid, airtight container.",
            "Separate the biscuits and cookies using freezer paper, baking paper, or foil.",
            "Place biscuits in freezer.",
            "Thaw."
        ],
        "action": [
            "(:action place-in-container\n    :parameters (?i - item)\n    :precondition (and (not (in-container ?i)))\n    :effect (and (in-container ?i)))",
            "(:action separate-using-paper\n    :parameters (?i - item)\n    :precondition (and (in-container ?i) (not (in-lined-tin ?i)))\n    :effect (and (in-lined-tin ?i)))",
            "(:action place-in-freezer\n    :parameters (?i - item)\n    :precondition (and (in-lined-tin ?i) (not (in-freezer ?i)))\n    :effect (and (in-freezer ?i)))",
            "(:action thaw\n    :parameters (?i - item)\n    :precondition (in-freezer ?i)\n    :effect (and (thawed ?i) (not (in-freezer ?i)))\n  )\n)"
        ]
    },
    {
        "task": "Make Whole Wheat Pastry With Canola",
        "step": [
            "add_flour_and_salt canola_oil canola_oil mixing_bowl table",
            "mix_ingredients canola_oil mixing_bowl canola_oil canola_oil",
            "prepare_pastry mixing_bowl canola_oil table",
            "press_into_pie_dish mixing_bowl table",
            "create_edge canola_oil table"
        ],
        "desc": [
            "Place the whole wheat flour and salt into the mixing bowl.",
            "Pour in the oil.",
            "Place the pastry onto a sheet of wax paper.",
            "Remove from the fridge.",
            "Press the pastry into the pie dish.",
            "Create an edge with the sides of a fork."
        ],
        "action": [
            "(:action add_flour_and_salt\n    :parameters (?flour - ingredient ?salt - ingredient ?bowl - container ?table - location)\n    :precondition (and\n      (at ?flour ?table)\n      (at ?salt ?table)\n      (at ?bowl ?table)\n    )\n    :effect (and\n      (in ?flour ?bowl)\n      (in ?salt ?bowl)\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5c06\u6cb9\u5012\u5165\u6405\u62cc\u7897",
            "(:action pour_in_oil\n    :parameters (?oil - ingredient ?bowl - container ?flour - ingredient ?salt - ingredient ?table - location)\n    :precondition (and\n      (in ?flour ?bowl)\n      (in ?salt ?bowl)\n      (at ?oil ?table)\n    )\n    :effect (and\n      (in ?oil ?bowl)\n    )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6df7\u5408\u98df\u6750",
            "(:action mix_ingredients\n    :parameters (?oil - ingredient ?bowl - container ?flour - ingredient ?salt - ingredient)\n    :precondition (and\n      (in ?flour ?bowl)\n      (in ?salt ?bowl)\n      (in ?oil ?bowl)\n    )\n    :effect (and\n      (mixed ?bowl)\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u51c6\u5907\u9165\u76ae",
            "(:action prepare_pastry\n    :parameters (?bowl - container ?wax_paper - object ?table - location)\n    :precondition (and\n      (mixed ?bowl)\n      (at ?wax_paper ?table)\n    )\n    :effect (and\n      (pastry_ready)\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5c06\u9165\u76ae\u6309\u538b\u5230\u6d3e\u76d8\u4e2d",
            "(:action press_into_pie_dish\n    :parameters (?pie_dish - container ?table - location)\n    :precondition (and\n      (pastry_ready)\n      (at ?pie_dish ?table)\n    )\n    :effect (and\n      (pastry_in_dish)\n    )\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u7528\u53c9\u5b50\u521b\u5efa\u8fb9\u7f18",
            "(:action create_edge\n    :parameters (?fork - object ?table - location)\n    :precondition (and\n      (pastry_in_dish)\n      (at ?fork ?table)\n    )\n    :effect (and\n      (edge_created)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make a Pancake Mix Container from a Recycled Ketchup Bottle",
        "step": [
            "attach_funnel user1 scrubber1 ketchup_bottle1",
            "pour_batter user1 pancake_batter1 scrubber1 ketchup_bottle1",
            "replace_lid_and_label user1 ketchup_bottle1 funnel1 funnel1 funnel1",
            "place_in_fridge user1 ketchup_bottle1 fridge1 store_location"
        ],
        "desc": [
            "Scrub the ketchup bottle thoroughly.",
            "Place the funnel over the mouth of the bottle.",
            "Pour pancake batter through the funnel into the empty ketchup bottle.",
            "Replace the lid and label the bottle.",
            "Place the bottle in refrigerator.",
            "Finished."
        ],
        "action": [
            "(:action scrub_bottle\n    :parameters (?p - person ?bottle - container ?scrubber - tool ?sink - surface)\n    :precondition (and\n      (owned ?p ?bottle)\n      (owned ?p ?scrubber)\n      (at ?bottle ?sink)\n      (dirty ?bottle)\n      (clean ?scrubber)\n    )\n    :effect (and\n      (clean ?bottle)\n      (dirty ?scrubber)\n      (wet ?scrubber)\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5c06\u6f0f\u6597\u653e\u5728\u74f6\u53e3\u4e0a",
            "(:action attach_funnel\n    :parameters (?p - person ?funnel - tool ?bottle - container)\n    :precondition (and\n      (owned ?p ?funnel)\n      (owned ?p ?bottle)\n      (clean ?funnel)\n      (clean ?bottle)\n      (not (funnel_attached ?funnel ?bottle))\n    )\n    :effect (funnel_attached ?funnel ?bottle)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u901a\u8fc7\u6f0f\u6597\u5012\u5165\u714e\u997c\u9762\u7cca",
            "(:action pour_batter\n    :parameters (?p - person ?batter - ingredient ?funnel - tool ?bottle - container)\n    :precondition (and\n      (owned ?p ?batter)\n      (owned ?p ?funnel)\n      (owned ?p ?bottle)\n      (funnel_attached ?funnel ?bottle)\n      (clean ?bottle)\n      (not (has_batter ?bottle))\n    )\n    :effect (and\n      (has_batter ?bottle)\n      (dirty ?funnel)\n      (not (has_batter ?bottle)) ; Assuming batter is poured completely\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u66f4\u6362\u76d6\u5b50\u5e76\u6807\u8bb0\u74f6\u5b50",
            "(:action replace_lid_and_label\n    :parameters (?p - person ?bottle - container ?lid - tool ?label - tool ?pen - tool)\n    :precondition (and\n      (owned ?p ?bottle)\n      (owned ?p ?lid)\n      (owned ?p ?label)\n      (owned ?p ?pen)\n      (has_batter ?bottle)\n      (not (sealed ?bottle))\n    )\n    :effect (and\n      (sealed ?bottle)\n      (labeled ?bottle)\n      (used ?lid)\n      (used ?label)\n      (used ?pen)\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5c06\u74f6\u5b50\u653e\u5165\u51b0\u7bb1",
            "(:action place_in_fridge\n    :parameters (?p - person ?bottle - container ?fridge - appliance ?loc_fridge - location)\n    :precondition (and\n      (owned ?p ?bottle)\n      (owned ?p ?fridge)\n      (sealed ?bottle)\n      (at ?bottle ?loc_fridge)\n      (clean ?fridge)\n    )\n    :effect (and\n      (in_fridge ?bottle)\n      (not (at ?bottle ?loc_fridge))\n    )\n  )\n)"
        ]
    },
    {
        "task": "Use a Mic in Team Fortress 2",
        "step": [
            "make_microphone_working mic",
            "adjust_panel_visibility panel",
            "talk_using_microphone mic voice",
            "advise_teammates advice",
            "select_voice_panel panel",
            "use_microphone_efficiently voice"
        ],
        "desc": [
            "Make sure that your microphone is working and connected first.",
            "Find various panels at the top like \"Multiplayer\", \"Mouse\", \"Audio\", etc.",
            "Click on the Voice panel.",
            "Start talking with other players using your microphone!",
            "Use the microphone to communicate with your team in a more efficient manner and demand that your voice is heard!",
            "Advise teammates as well as make game plans to help and support your team."
        ],
        "action": [
            "(:action make_microphone_working\n    :parameters (?microphone - entity)\n    :precondition (and (not (connected ?microphone)) (not (plugged-in ?microphone)) (not (functional ?microphone)) (not (tested ?microphone)))\n    :effect (and (connected ?microphone) (plugged-in ?microphone) (functional ?microphone) (tested ?microphone))\n  )",
            "(:action adjust_panel_visibility\n    :parameters (?panel - entity)\n    :precondition (and (not (visible ?panel)) (not (open ?panel)))\n    :effect (and (visible ?panel) (open ?panel))\n  )",
            "(:action select_voice_panel\n    :parameters (?panel - entity)\n    :precondition (and (visible ?panel) (not (selected ?panel)))\n    :effect (selected ?panel)\n  )",
            "(:action talk_using_microphone\n    :parameters (?microphone - entity ?voice - entity)\n    :precondition (and (connected ?microphone) (functional ?microphone) (not (heard ?voice)))\n    :effect (heard ?voice)\n  )",
            "(:action use_microphone_efficiently\n    :parameters (?voice - entity)\n    :precondition (and (heard ?voice) (not (efficient ?voice)))\n    :effect (efficient ?voice)\n  )",
            "(:action advise_teammates\n    :parameters (?advice - entity)\n    :precondition (not (possible ?advice))\n    :effect (possible ?advice)\n  )\n)"
        ]
    },
    {
        "task": "Make Carob Fruit Balls",
        "step": [
            "mix_ingredients user1 mixing_bowl1 spoon1 carob1 carob1 carob1 carob1",
            "roll_into_balls user1 mixing_bowl1 spoon1",
            "freeze_balls user1 mixing_bowl1 freezer1",
            "serve_balls user1 mixing_bowl1 plate1"
        ],
        "desc": [
            "Mix all of the ingredients together.",
            "Roll into small balls.",
            "Place in the freezer for half an hour.",
            "Serve."
        ],
        "action": [
            "(:action mix_ingredients\n    :parameters (?p - person ?bowl - container ?spoon - tool\n                    ?ing1 - ingredient ?ing2 - ingredient\n                    ?ing3 - ingredient ?ing4 - ingredient)\n    :precondition (and\n      (owned ?p ?bowl) (clean ?bowl) (at ?bowl kitchen_counter1)\n      (owned ?p ?spoon) (clean ?spoon)\n      (owned ?p ?ing1) (clean ?ing1) (at ?ing1 kitchen_counter1)\n      (owned ?p ?ing2) (clean ?ing2) (at ?ing2 kitchen_counter1)\n      (owned ?p ?ing3) (clean ?ing3) (at ?ing3 kitchen_counter1)\n      (owned ?p ?ing4) (clean ?ing4) (at ?ing4 kitchen_counter1)\n    )\n    :effect (and\n      (mixed ?bowl)\n      (dirty ?bowl)\n      (dirty ?spoon)\n      (in ?ing1 ?bowl)\n      (in ?ing2 ?bowl)\n      (in ?ing3 ?bowl)\n      (in ?ing4 ?bowl)\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5c06\u6df7\u5408\u7269\u63c9\u6210\u5c0f\u7403",
            "(:action roll_into_balls\n    :parameters (?p - person ?bowl - container ?spoon - tool)\n    :precondition (and\n      (owned ?p ?bowl) (mixed ?bowl) (at ?bowl kitchen_counter1)\n      (owned ?p ?spoon) (clean ?spoon)\n    )\n    :effect (and\n      (rolled ?bowl)\n      (dirty ?spoon)\n    )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u5c06\u5c0f\u7403\u653e\u5165\u51b0\u7bb1\u51b7\u51bb",
            "(:action freeze_balls\n    :parameters (?p - person ?bowl - container ?freezer - appliance)\n    :precondition (and\n      (owned ?p ?bowl) (rolled ?bowl) (at ?bowl kitchen_counter1)\n      (owned ?p ?freezer) (at ?freezer kitchen_counter1)\n    )\n    :effect (and\n      (frozen ?bowl)\n      (at ?bowl freezer_location)\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u4e0a\u684c\u98df\u7528",
            "(:action serve_balls\n    :parameters (?p - person ?bowl - container ?plate - container)\n    :precondition (and\n      (owned ?p ?bowl) (frozen ?bowl) (at ?bowl freezer_location)\n      (owned ?p ?plate) (at ?plate dining_table1)\n    )\n    :effect (and\n      (served ?bowl)\n      (at ?bowl dining_table1)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make Seasoned Salt",
        "step": [
            "mix-ingredients celery_salt",
            "grind-ingredients celery_salt mortar_and_pestle",
            "season-food celery_salt salads"
        ],
        "desc": [
            "Mix the ingredients together thoroughly.",
            "Pour into an air-tight container with a lid.",
            "It goes well in dips, salad dressings, soups and on sandwiches.",
            "Grind the ingredients together in a mortar and pestle.",
            "Transfer to a storage container as needed."
        ],
        "action": [
            "(:action mix-ingredients\n    :parameters (?e - entity)\n    :precondition (and (stratified ?e) (separate ?e))\n    :effect (and (mixed ?e) (not (stratified ?e)) (not (separate ?e)))\n  )",
            "(:action pour-into-container\n    :parameters (?e - entity ?c - container)\n    :precondition (and (mixed ?e) (empty ?c))\n    :effect (and (inContainer ?e ?c) (full ?c) (onCounter ?c) (not (empty ?c)))\n  )",
            "(:action season-food\n    :parameters (?e - entity ?f - food)\n    :precondition (mixed ?e)\n    :effect (and (flavorful ?f) (not (plain ?f)))\n  )",
            "(:action grind-ingredients\n    :parameters (?e - entity ?t - tool)\n    :precondition (and (mixed ?e) (absent ?t))\n    :effect (and (present ?t))\n  )",
            "(:action transfer-to-storage\n    :parameters (?e - entity ?c - container)\n    :precondition (inContainer ?e ?c)\n    :effect (and (empty ?c))\n  )\n)"
        ]
    },
    {
        "task": "Make Asparagus in Serrano Ham",
        "step": [
            "prepare_asparagus asparagus1 cutting_board1",
            "add_oil_to_tin olive_oil1 tin1",
            "wrap_asparagus_with_ham asparagus1 asparagus1",
            "place_asparagus_in_tin asparagus1 tin1",
            "preheat_oven oven1",
            "put_tin_in_oven tin1 oven1 asparagus1",
            "roast_asparagus asparagus1 oven1",
            "serve_asparagus asparagus1 dish1"
        ],
        "desc": [
            "Preheat your oven beforehand to 400\u00b0F (200\u00b0C or Gas Mark 6).",
            "Add your olive oil into a baking or roasting tin large enough to hold all of your asparagus spears.",
            "Cut off the ends of the asparagus spears and wrap enough Serrano ham around each asparagus spear until it is mostly covered but with top jagged part still open.",
            "Roast the asparagus in the oven for 8-10 minutes.",
            "Serve immediately with a main dish so your asparagus acts as a side order."
        ],
        "action": [
            "(:action preheat_oven\n    :parameters (?oven - appliance)\n    :precondition (and\n      (at_location ?oven kitchen)\n      (not (oven_preheated))\n      (not (oven_on))\n    )\n    :effect (and\n      (oven_on)\n      (oven_preheated)\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u6dfb\u52a0\u6a44\u6984\u6cb9\u5230\u70e4\u76d8",
            "(:action add_oil_to_tin\n    :parameters (?oil - material ?tin - container)\n    :precondition (and\n      (in ?oil pantry)\n      (at_location ?tin kitchen)\n    )\n    :effect (in ?oil ?tin)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u51c6\u5907\u82a6\u7b0b",
            "(:action prepare_asparagus\n    :parameters (?asparagus - object ?board - tool)\n    :precondition (and\n      (in ?asparagus fridge)\n      (at_location ?board kitchen)\n      (clean ?board)\n    )\n    :effect (prepared_asparagus ?asparagus)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u7528\u706b\u817f\u5305\u88f9\u82a6\u7b0b",
            "(:action wrap_asparagus_with_ham\n    :parameters (?asparagus - object ?ham - material)\n    :precondition (and\n      (prepared_asparagus ?asparagus)\n      (in ?ham fridge)\n    )\n    :effect (wrapped_asparagus ?asparagus)\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5c06\u82a6\u7b0b\u653e\u5165\u70e4\u76d8",
            "(:action place_asparagus_in_tin\n    :parameters (?asparagus - object ?tin - container)\n    :precondition (and\n      (wrapped_asparagus ?asparagus)\n      (in olive_oil1 tin1)\n    )\n    :effect (in ?asparagus ?tin)\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u5c06\u70e4\u76d8\u653e\u5165\u70e4\u7bb1",
            "(:action put_tin_in_oven\n    :parameters (?tin - container ?oven - appliance ?asparagus - object)\n    :precondition (and\n      (oven_preheated)\n      (in ?asparagus ?tin)\n    )\n    :effect (in ?asparagus ?oven)\n  )\n\n  ;; \u52a8\u4f5c7\uff1a\u70d8\u70e4\u82a6\u7b0b",
            "(:action roast_asparagus\n    :parameters (?asparagus - object ?oven - appliance)\n    :precondition (and\n      (in ?asparagus ?oven)\n      (oven_on)\n      (not (roasted_asparagus ?asparagus))\n    )\n    :effect (roasted_asparagus ?asparagus)\n  )\n\n  ;; \u52a8\u4f5c8\uff1a\u4e0a\u83dc",
            "(:action serve_asparagus\n    :parameters (?asparagus - object ?dish - container)\n    :precondition (and\n      (roasted_asparagus ?asparagus)\n      (in ?asparagus tin1)\n      (at_location ?dish kitchen)\n    )\n    :effect (and\n      (in ?asparagus ?dish)\n      (served_asparagus ?asparagus)\n    )\n  )\n)"
        ]
    }
]