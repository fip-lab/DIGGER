[
    "(:action move\n    :parameters (?agent - agent ?from - location ?to - location)\n    :precondition (and \n                    (at ?agent ?from) \n                    (connected ?from ?to))\n    :effect (and \n              (not (at ?agent ?from))",
    "(:action put ; A universal action for placing objects into/on receptacles\n    :parameters (?agent - agent ?object - item ?receptacle - receptacle)\n    :precondition (and\n                    (holding ?agent ?object)\n                    (at ?agent ?receptacle)\n                    (receptacle ?receptacle)\n                    (clear ?receptacle)) ; Ensures receptacle is not occupied\n    :effect (and\n              (in ?object ?receptacle) ; Object is now in/on the receptacle\n              (not (holding ?agent ?object))",
    "(:action go ; Move agent from one location to another\n :parameters (?agent - agent ?from - location ?to - location)\n :precondition (and\n                 (at ?agent ?from)\n                 (connected ?from ?to))\n :effect (and\n           (at ?agent ?to)\n           (not (at ?agent ?from))",
    "(:action pick\n  ; Pick an object from a location and update its state\n  :parameters (?agent - agent ?object - object ?loc - location)\n  :precondition (and \n                  (at ?agent ?loc) \n                  (at ?object ?loc) \n                  (not (holding ?agent ?object)))\n  :effect (and \n            (holding ?agent ?object) \n            (not (at ?object ?loc))",
    "(:action pickup\n    :parameters (?agent - agent ?item - object ?location - location ?receptacle - receptacle)\n    :precondition (and\n                    (at ?agent ?location)\n                    (or (and (on ?item ?location) (not (in ?item ?receptacle))) ; Item is on a location (e.g., table/desk)\n                        (in ?item ?receptacle))                              ; Item is in a receptacle (e.g., drawer/box)\n                    (not (holding ?agent ?item))                             ; Agent must not already be holding the item\n                    (free_hands ?agent))                                     ; Agent must have free hands\n    :effect (and\n              (holding ?agent ?item)                                         ; Agent is now holding the item\n              (not (on ?item ?location))",
    "(:action gotolocation\n    :parameters (?agent - agent ?from - location ?to - location)\n    :precondition (and\n                    (at ?agent ?from)\n                    (connected ?from ?to))\n    :effect (and\n              (at ?agent ?to)\n              (not (at ?agent ?from))",
    "(:action pickupobjectnoreceptacle\n    :parameters (?agent - agent ?object - object ?location - location)\n    :precondition (and\n                    (at ?agent ?location)\n                    (or\n                        (in ?object ?location) ; Object is inside a container/receptacle\n                        (on ?object ?location) ; Object is on a surface/location\n                    )\n                    (clear ?object)) ; Object is unobstructed\n    :effect (and\n              (holding ?agent ?object) ; Agent is now holding the object\n              (not (in ?object ?location))",
    "(:action putobjectinreceptacle\n    :parameters (?agent - agent ?object - object ?receptacle - location)\n    :precondition (and\n                    (holding ?agent ?object)    ;; Agent must be holding the object\n                    (at ?agent ?receptacle)     ;; Agent must be at the receptacle's location\n                    (not (in ?object ?restricted)) ;; Optional: Ensure the object is not placed in restricted locations, if applicable\n                  )\n    :effect (and\n              (in ?object ?receptacle)         ;; Object is now in the receptacle\n              (not (holding ?agent ?object))",
    "(:action putobjectinreceptacle\n       :parameters (?agent - agent ?book - book ?bookshelf - location)\n       :precondition (and\n                       (holding ?agent ?book)\n                       (at ?agent ?bookshelf)\n                     )\n       :effect (and\n                 (in ?book ?bookshelf)\n                 (not (holding ?agent ?book))",
    "(:action putobjectinreceptacle\n       :parameters (?agent - agent ?cellphone - object ?sofa - location)\n       :precondition (and\n                       (holding ?agent ?cellphone)\n                       (at ?agent ?sofa)\n                       (not (in ?cellphone box3)) ;; Ensures the cellphone is not placed in Box3\n                     )\n       :effect (and\n                 (on ?cellphone ?sofa)\n                 (not (holding ?agent ?cellphone))",
    "(:action putobjectinreceptacle\n       :parameters (?agent - agent ?pencil - object ?drawer - location)\n       :precondition (and\n                       (holding ?agent ?pencil)\n                       (at ?agent ?drawer)\n                     )\n       :effect (and\n                 (in ?pencil ?drawer)\n                 (not (holding ?agent ?pencil))"
]