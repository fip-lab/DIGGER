[
    "(:action move\n  :parameters (?agent - agent ?from - location ?to - location)\n  :precondition (and \n                  (at ?agent ?from)\n                  (connected ?from ?to))\n  :effect (and \n            (not (at ?agent ?from))",
    "(:action put\n  :parameters (?agent - agent ?object - item ?destination - location)\n  :precondition (and \n                  (at ?agent ?destination) ;; Agent must be at the destination\n                  (holding ?agent ?object) ;; Agent must be holding the object\n                  (not (in ?object ?destination)) ;; Object must not already be in the destination\n                  (clear ?destination)) ;; Destination must be clear or available for placement\n  :effect (and \n           (in ?object ?destination) ;; Object is now in the destination\n           (not (holding ?agent ?object))",
    "(:action put\n  :parameters (?agent - agent ?pen - pen ?box - box)\n  :precondition (and \n                  (at ?agent ?box)\n                  (holding ?agent ?pen)\n                  (not (in ?pen ?box))\n                  (clear ?box))\n  :effect (and \n           (in ?pen ?box)\n           (not (holding ?agent ?pen))",
    "(:action put\n  :parameters (?agent - agent ?book - book ?sofa - sofa)\n  :precondition (and \n                  (at ?agent ?sofa)\n                  (holding ?agent ?book)\n                  (not (in ?book ?sofa))\n                  (clear ?sofa))\n  :effect (and \n           (in ?book ?sofa)\n           (not (holding ?agent ?book))",
    "(:action put\n  :parameters (?agent - agent ?cellphone - cellphone ?garbagecan - garbagecan)\n  :precondition (and \n                  (at ?agent ?garbagecan)\n                  (holding ?agent ?cellphone)\n                  (not (in ?cellphone ?garbagecan))\n                  (clear ?garbagecan))\n  :effect (and \n           (in ?cellphone ?garbagecan)\n           (not (holding ?agent ?cellphone))",
    "(:action pick ; Unified action for picking up an object from a location\n    :parameters (?agent - agent ?item - item ?location - location)\n    :precondition (and\n                    (at ?agent ?location)\n                    (or (in ?item ?location) (on ?item ?location) (at ?item ?location))\n                    (not (holding ?agent ?item)))\n    :effect (and\n              (holding ?agent ?item)\n              (not (in ?item ?location))",
    "(:action pick\n       :parameters (?agent - agent ?cellphone - cellphone ?drawer - drawer)\n       :precondition (and\n                       (at ?agent ?drawer)\n                       (in ?cellphone ?drawer)\n                       (not (holding ?agent ?cellphone)))\n       :effect (and\n                 (holding ?agent ?cellphone)\n                 (not (in ?cellphone ?drawer))",
    "(:action pick\n       :parameters (?agent - agent ?laptop - laptop ?sofa - sofa)\n       :precondition (and\n                       (at ?agent ?sofa)\n                       (on ?laptop ?sofa)\n                       (not (holding ?agent ?laptop)))\n       :effect (and\n                 (holding ?agent ?laptop)\n                 (not (on ?laptop ?sofa))",
    "(:action pick\n       :parameters (?agent - agent ?keychain - keychain ?desk - desk)\n       :precondition (and\n                       (at ?agent ?desk)\n                       (on ?keychain ?desk)\n                       (not (holding ?agent ?keychain)))\n       :effect (and\n                 (holding ?agent ?keychain)\n                 (not (on ?keychain ?desk))",
    "(:action prevent\n    ; Prevent an object from being placed in a specified location\n    :parameters (?agent - agent ?object - item ?location - location)\n    :precondition (and\n                    (holding ?agent ?object)\n                    (is_location ?location))\n    :effect (not (at ?object ?location))",
    "(:action check\n    ; Check a resource and update task status\n    :parameters (?npc - person ?item - object)\n    :precondition (and (available ?npc) (not (checked ?npc ?item)))\n    :effect (checked ?npc ?item))",
    "(:action prevent\n    ; Prevent an object from being placed in a specified location\n    :parameters (?agent - agent ?object - item ?location - location)\n    :precondition (and\n                    (holding ?agent ?object)\n                    (is_location ?location))\n    :effect (not (at ?object ?location))",
    "(:action avoid ; Avoid placing an object in a restricted location\n :parameters (?agent - agent ?item - object ?restricted_location - location)\n :precondition (and\n                 (holding ?agent ?item)\n                 (at ?agent ?restricted_location))\n :effect (and\n           (not (in ?item ?restricted_location))",
    "(:action pickup\n    :parameters (?agent - agent ?item - object ?container - container)\n    :precondition (and\n                    (at ?agent ?container)\n                    (in ?item ?container)\n                    (free_hand ?agent))\n    :effect (and\n              (holding ?agent ?item)\n              (not (in ?item ?container))"
]