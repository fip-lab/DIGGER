[
    "```lisp\n[\n  (:action universal_action\n    :parameters (?agent - agent ?entity - object ?from - location ?to - location ?receptacle - receptacle)\n    :precondition (and\n                    ;; Preconditions for movement\n                    (at ?agent ?from)\n                    (connected ?from ?to)\n\n                    ;; Preconditions for picking up an object\n                    (or (and (at ?entity ?from) (not (holding ?agent ?entity)))\n                        (not (exists (?other_entity - object) (at ?other_entity ?from))))\n\n                    ;; Preconditions for placing an object\n                    (or (and (holding ?agent ?entity) (at ?receptacle ?to))\n                        (not (exists (?other_entity - object) (holding ?agent ?other_entity)))))\n    :effect (and\n              ;; Effects of movement\n              (at ?agent ?to)\n              (not (at ?agent ?from))\n              ;; Effects of picking up an object\n              (when (and (at ?entity ?from) (not (holding ?agent ?entity)))\n                (and (holding ?agent ?entity) (not (at ?entity ?from))))\n              ;; Effects of placing an object\n              (when (and (holding ?agent ?entity) (at ?receptacle ?to))\n                (and (in ?entity ?receptacle) (not (holding ?agent ?entity))))))\n  \n  (:action move\n    :parameters (?agent - agent ?from - location ?to - location)\n    :precondition (and (at ?agent ?from) (connected ?from ?to))\n    :effect (and (at ?agent ?to) (not (at ?agent ?from))))\n\n  (:action pick\n    :parameters (?agent - agent ?object - object ?location - location)\n    :precondition (and\n                    (at ?agent ?location)\n                    (in_location ?object ?location)\n                    (not (holding ?agent ?object)))\n    :effect (and\n              (holding ?agent ?object)\n              (not (in_location ?object ?location))))\n\n  (:action put\n    :parameters (?agent - agent ?object - object ?receptacle - receptacle)\n    :precondition (and\n                    (holding ?agent ?object)\n                    (at ?agent ?receptacle)\n                    (accessible ?receptacle)\n                    (not (prohibited_receptacle ?receptacle))\n                    (not (in ?object ?receptacle)))\n    :effect (and\n              (in ?object ?receptacle)\n              (not (holding ?agent ?object))))\n\n  (:action interact_with_object\n    :parameters (?agent - agent ?object - object ?location - location)\n    :precondition (and\n                    (at ?agent ?location)\n                    (on ?object ?location)\n                    (not (holding ?agent ?object)))\n    :effect (and\n              (holding ?agent ?object)\n              (not (on ?object ?location))))\n\n  (:action putobjectinreceptacle\n    :parameters (?agent - agent ?object - object ?receptacle - receptacle)\n    :precondition (and\n                    (holding ?agent ?object)\n                    (at ?agent ?receptacle)\n                    (not (in ?object ?receptacle)))\n    :effect (and\n              (in ?object ?receptacle)\n              (not (holding ?agent ?object))))\n\n  (:action gotolocation\n    :parameters (?agent - agent ?from - location ?to - location ?object - object)\n    :precondition (and\n                    (at ?agent ?from)\n                    (not (at ?agent ?to))\n                    (or (not (holding ?agent ?object)) (at ?object ?from)))\n    :effect (and\n              (at ?agent ?to)\n              (not (at ?agent ?from))))\n\n  (:action pickup\n    :parameters (?agent - agent ?object - object ?source - location_or_receptacle)\n    :precondition (and\n                    (at ?agent ?source)\n                    (or\n                        (on ?object ?source)\n                        (in ?object ?source)\n                        (in_receptacle ?object ?source))\n                    (or\n                        (not (holding ?agent ?object))\n                        (empty_hand ?agent))\n                    (accessible ?source))\n    :effect (and\n              (holding ?agent ?object)\n              (not (on ?object ?source))\n              (not (in ?object ?source))\n              (not (in_receptacle ?object ?source))))\n\n  (:action prohibit\n    :parameters (?entity - object ?restriction - object)\n    :precondition (not (prohibited ?entity ?restriction))\n    :effect (prohibited ?entity ?restriction))\n]\n```"
]