[
    "(:action universal_action\n  :parameters (?agent - agent ?entity - object ?from - location ?to - location ?receptacle - receptacle)\n  :precondition (and\n                  ;; Preconditions for movement\n                  (at ?agent ?from)\n                  (connected ?from ?to)\n\n                  ;; Preconditions for picking up an object\n                  (or (and (at ?entity ?from) (not (holding ?agent ?entity)))\n                      (not (exists (?entity - object) (at ?entity ?from))))\n\n                  ;; Preconditions for placing an object\n                  (or (and (holding ?agent ?entity) (at ?receptacle ?to))\n                      (not (exists (?entity - object) (holding ?agent ?entity)))))\n\n  :effect (and\n            ;; Effects of movement\n            (at ?agent ?to)\n            (not (at ?agent ?from))",
    "(:action universal_action\n    :parameters (?agent - agent ?from - location ?to - location)\n    :precondition (and (at ?agent ?from) (connected ?from ?to))\n    :effect (and (at ?agent ?to) (not (at ?agent ?from))",
    "(:action universal_action\n    :parameters (?agent - agent ?entity - object ?from - location)\n    :precondition (and (at ?agent ?from) (at ?entity ?from) (not (holding ?agent ?entity)))\n    :effect (and (holding ?agent ?entity) (not (at ?entity ?from))",
    "(:action universal_action\n    :parameters (?agent - agent ?entity - object ?to - location ?receptacle - receptacle)\n    :precondition (and (holding ?agent ?entity) (at ?receptacle ?to))\n    :effect (and (in ?entity ?receptacle) (not (holding ?agent ?entity))",
    "(:action put\n    :parameters (?agent - agent ?object - object ?receptacle - receptacle)\n    :precondition (and\n                    (holding ?agent ?object)  ;; The agent must be holding the object\n                    (at ?agent ?receptacle)   ;; The agent must be at the receptacle\n                    (accessible ?receptacle) ;; The receptacle must be accessible\n                    (not (prohibited_receptacle ?receptacle)) ;; Receptacle should not be prohibited\n                    (not (in ?object ?receptacle))) ;; The object must not already be in the receptacle\n    :effect (and\n              (in ?object ?receptacle) ;; The object is now in the receptacle\n              (not (holding ?agent ?object))",
    "(:action put\n       :parameters (?agent - agent ?book - book ?sofa - sofa)\n       :precondition (and\n                       (holding ?agent ?book)\n                       (at ?agent ?sofa)\n                       (accessible ?sofa))\n       :effect (and\n                 (in ?book ?sofa)\n                 (not (holding ?agent ?book))",
    "(:action put\n       :parameters (?agent - agent ?keychain - keychain ?box - box)\n       :precondition (and\n                       (holding ?agent ?keychain)\n                       (at ?agent ?box)\n                       (accessible ?box))\n       :effect (and\n                 (in ?keychain ?box)\n                 (not (holding ?agent ?keychain))",
    "(:action put\n       :parameters (?agent - agent ?pen - pen ?sofa - sofa)\n       :precondition (and\n                       (holding ?agent ?pen)\n                       (at ?agent ?sofa)\n                       (accessible ?sofa)\n                       (not (in ?pen box2)))\n       :effect (and\n                 (in ?pen ?sofa)\n                 (not (holding ?agent ?pen))",
    "(:action go ; Move an agent between locations\n    :parameters (?agent - agent ?from - location ?to - location)\n    :precondition (and (at ?agent ?from))\n    :effect (and (at ?agent ?to) (not (at ?agent ?from))",
    "(:action pick ; Pick up an object or remove it from its current state\n  :parameters (?agent - agent ?object - object ?location - location)\n  :precondition (and\n                 (at ?agent ?location) ; The agent must be at the same location as the object\n                 (in_location ?object ?location) ; The object must be physically in the location\n                 (not (holding ?agent ?object))) ; The agent must not already be holding the object\n  :effect (and\n           (holding ?agent ?object) ; The agent now holds the object\n           (not (in_location ?object ?location))",
    "(:action prohibit ; Prohibit an object from being associated with a specific resource\n    :parameters (?entity - object ?restriction - object)\n    :precondition (not (prohibited ?entity ?restriction))\n    :effect (prohibited ?entity ?restriction)\n)",
    "(:action pickup\n    :parameters (?agent - agent ?object - object ?source - location_or_receptacle)\n    :precondition (and\n                    (at ?agent ?source) ; The agent must be at the location/receptacle\n                    (or \n                        (on ?object ?source) ; The object is on the location (e.g., desk, table)\n                        (in ?object ?source) ; The object is inside a receptacle (e.g., drawer, box)\n                        (in_receptacle ?object ?source)) ; Alternative form for receptacle containment\n                    (or\n                        (not (holding ?agent ?object)) ; Agent is not already holding the object\n                        (empty_hand ?agent)) ; Agent has a free hand for pickup\n                    (accessible ?source)) ; The source (location or receptacle) must be accessible\n    :effect (and\n              (holding ?agent ?object) ; Agent is now holding the object\n              (not (on ?object ?source))",
    "(:action gotolocation\n    :parameters (?agent - agent ?from - location ?to - location ?object - object)\n    :precondition (and \n        (at ?agent ?from) \n        (not (at ?agent ?to)) \n        (or (not (holding ?agent ?object)) (at ?object ?from))\n    )\n    :effect (and \n        (at ?agent ?to) \n        (not (at ?agent ?from))",
    "(:action interact_with_object\n    :parameters (?agent - agent ?object - object ?location - location)\n    :precondition (and (at ?agent ?location) \n                       (on ?object ?location) \n                       (not (holding ?agent ?object)))\n    :effect (and (holding ?agent ?object) \n                 (not (on ?object ?location))",
    "(:action putobjectinreceptacle\n    :parameters (?agent - agent ?object - object ?receptacle - receptacle)\n    :precondition (and \n        (holding ?agent ?object)         ; The agent must be holding the object\n        (at ?agent ?receptacle)          ; The agent must be at the receptacle's location\n        (not (in ?object ?receptacle))   ; The object must not already be in the receptacle\n    )\n    :effect (and \n        (in ?object ?receptacle)         ; The object is now in the receptacle\n        (not (holding ?agent ?object))"
]