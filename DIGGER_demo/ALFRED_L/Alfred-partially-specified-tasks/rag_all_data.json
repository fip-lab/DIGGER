[
    {
        "task": "put CellPhone1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 cellphone1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Drawer1))"
    },
    {
        "task": "put CellPhone1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts cellphone 1 in garbage can 1",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 GarbageCan1))"
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from desk 2",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put Pen1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Drawer1))"
    },
    {
        "task": "put CellPhone2 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone2 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 cellphone2 bed1"
        ],
        "desc": [
            "Agent 1 puts cellphone 2 in bed 1.",
            "Agent 1 picks up cellphone 2 from drawer 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone2 Bed1))"
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1))"
    },
    {
        "task": "put KeyChain1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 keychain1 desk1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts keychain 1 in desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Desk1))"
    },
    {
        "task": "put CreditCard1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 creditcard1 bed1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in bed 1",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Bed1))"
    },
    {
        "task": "put KeyChain1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa1))"
    },
    {
        "task": "put Pillow2 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow2 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 pillow2 bed1"
        ],
        "desc": [
            "Agent 1 puts pillow 2 in bed 1.",
            "Agent 1 picks up pillow 2 from sofa 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow2 Bed1))"
    },
    {
        "task": "put Book1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1))"
    },
    {
        "task": "put CD1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 cd1 bed1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in bed 1.",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Bed1))"
    },
    {
        "task": "put Laptop1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 puts laptop 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Desk1))"
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put Watch1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 watch1 bed1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in bed 1.",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Bed1))"
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put Pencil1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pencil1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pencil 1 in drawer 1.",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Drawer1))"
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Desk1))"
    },
    {
        "task": "put KeyChain1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 keychain1 drawer1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Drawer1))"
    },
    {
        "task": "put CellPhone1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Desk1))"
    },
    {
        "task": "put Pen1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Drawer1))"
    },
    {
        "task": "put Book1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1))"
    },
    {
        "task": "put Book1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1))"
    },
    {
        "task": "put Book1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 book1 bed1"
        ],
        "desc": [
            "Agent 1 puts book 1 in bed 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Bed1))"
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Desk1))"
    },
    {
        "task": "put Book1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 2",
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Drawer1))"
    },
    {
        "task": "put CD1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 cd1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Drawer1))"
    },
    {
        "task": "put KeyChain1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 keychain1 bed1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in bed 1",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Bed1))"
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put CreditCard1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can",
            "Agent 1 picks up credit card 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 GarbageCan1))"
    },
    {
        "task": "put Book2 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book2 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book2 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 2 in sofa 1.",
            "Agent 1 picks up book 2 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book2 Sofa1))"
    },
    {
        "task": "put Pen1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 pen1 desk1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in desk 1.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Desk1))"
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 puts credit card 1 in desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Desk1))"
    },
    {
        "task": "put CellPhone2 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone2 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 cellphone2 desk1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 2 from sofa 1",
            "Agent 1 puts cellphone 2 in desk 1.",
            "Agent 1 moves from sofa 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone2 Desk1))"
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1))"
    },
    {
        "task": "put Watch1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 puts watch 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Desk1))"
    },
    {
        "task": "put Pen1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 2",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Drawer1))"
    },
    {
        "task": "put Pen1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa1))"
    },
    {
        "task": "put CreditCard2 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard2 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard2 sofa1"
        ],
        "desc": [
            "Agent 1 picks up credit card 2 from desk",
            "Agent 1 puts credit card 2 in sofa 1",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard2 Sofa1))"
    },
    {
        "task": "put Pen1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 pen1 bed1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in bed 1.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Bed1))"
    },
    {
        "task": "put Pillow1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Desk1))"
    },
    {
        "task": "put Pencil1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Sofa1))"
    },
    {
        "task": "put Pen1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 pen1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pen 1 in desk 1.",
            "Agent 1 picks up pen 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Desk1))"
    },
    {
        "task": "put CellPhone1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Desk1))"
    },
    {
        "task": "put KeyChain1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 keychain1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in garbage can",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 GarbageCan1))"
    },
    {
        "task": "put Watch1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts watch 1 in desk 1.",
            "Agent 1 picks up watch 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Desk1))"
    },
    {
        "task": "put CreditCard1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can",
            "Agent 1 picks up credit card 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 GarbageCan1))"
    },
    {
        "task": "put CD1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 cd1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts CD 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Drawer1))"
    },
    {
        "task": "put Watch1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts watch 1 in desk 1.",
            "Agent 1 picks up watch 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Desk1))"
    },
    {
        "task": "put KeyChain1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 keychain1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts keychain 1 in drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Drawer1))"
    },
    {
        "task": "put Pen1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa1))"
    },
    {
        "task": "put CellPhone1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Desk1))"
    },
    {
        "task": "put Pen1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 pen1 bed1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in bed 1.",
            "Agent 1 moves from desk 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Bed1))"
    },
    {
        "task": "put KeyChain1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa1))"
    },
    {
        "task": "put CellPhone1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts cellphone 1 in garbage can 1",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 GarbageCan1))"
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1))"
    },
    {
        "task": "put Laptop1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up laptop 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa1))"
    },
    {
        "task": "put KeyChain1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa1))"
    },
    {
        "task": "put Pillow1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up pillow 1 from sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1))"
    },
    {
        "task": "put Watch1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 watch1 bed1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in bed 1.",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Bed1))"
    },
    {
        "task": "put Pencil1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk1",
            "putobjectinreceptacle agent1 pencil1 desk1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in desk 1.",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up pencil 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Desk1))"
    },
    {
        "task": "put Watch1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 puts watch 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Desk1))"
    },
    {
        "task": "put Laptop1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up laptop 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Drawer1))"
    },
    {
        "task": "put CreditCard2 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard2 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 creditcard2 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up credit card 2 from sofa",
            "Agent 1 puts credit card 2 in desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard2 Desk1))"
    },
    {
        "task": "put KeyChain1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 keychain1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 puts keychain 1 in garbage can",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 GarbageCan1))"
    },
    {
        "task": "put CreditCard1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1))"
    },
    {
        "task": "put CD1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in desk 1.",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk1))"
    },
    {
        "task": "put Watch1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 watch1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Drawer1))"
    },
    {
        "task": "put Laptop1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 laptop1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 puts laptop 1 in garbage can 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 GarbageCan1))"
    },
    {
        "task": "put CD1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in desk 1.",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk1))"
    },
    {
        "task": "put Laptop1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Drawer1))"
    },
    {
        "task": "put CD1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in desk 1.",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk1))"
    },
    {
        "task": "put Pencil1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Sofa1))"
    },
    {
        "task": "put CellPhone1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 puts cellphone 1 in garbage can 1",
            "Agent 1 picks up cellphone 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 GarbageCan1))"
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put Pencil1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 pencil1 desk1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pencil 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Desk1))"
    },
    {
        "task": "put Book1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1))"
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1))"
    },
    {
        "task": "put Pen1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Drawer1))"
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1))"
    },
    {
        "task": "put Pencil1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 pencil1 desk1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in desk 1.",
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Desk1))"
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Desk1))"
    },
    {
        "task": "put CD1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 cd1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts CD 1 in the garbage can",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 GarbageCan1))"
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put CreditCard1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 creditcard1 drawer1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Drawer1))"
    },
    {
        "task": "put AlarmClock1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 alarmclock1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts alarm clock 1 in garbage can",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 GarbageCan1))"
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 puts credit card 1 in desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Desk1))"
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put Pillow1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up pillow 1 from sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1))"
    },
    {
        "task": "put KeyChain2 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain2 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain2 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 2 in sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up keychain 2 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain2 Sofa1))"
    },
    {
        "task": "put Pencil1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 pencil1 desk1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in desk 1.",
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Desk1))"
    },
    {
        "task": "put Watch1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa1))"
    },
    {
        "task": "put CD1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 cd1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts CD 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Drawer1))"
    },
    {
        "task": "put Watch1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 watch1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 2",
            "Agent 1 puts watch 1 in drawer 1.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Drawer1))"
    },
    {
        "task": "put Pen1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 bed1",
            "putobjectinreceptacle agent1 pen1 bed1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in bed 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Bed1))"
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put Pillow1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 pillow1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts pillow 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Drawer1))"
    },
    {
        "task": "put Book1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 2",
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Drawer1))"
    },
    {
        "task": "put KeyChain1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 keychain1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts keychain 1 in desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Desk1))"
    },
    {
        "task": "put Pencil1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan2",
            "gotolocation agent1 garbagecan2 garbagecan1",
            "putobjectinreceptacle agent1 pencil1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in garbage can 1",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from garbagecan 2 to garbagecan"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 GarbageCan1))"
    },
    {
        "task": "move CD1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box2))"
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box1))"
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 pen1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from drawer 1 to desk 2",
            "Agent 1 picks up pen 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box1))"
    },
    {
        "task": "move Book1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box2))"
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts cellphone 1 in box 3.",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box3))"
    },
    {
        "task": "move Pillow1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 moves from sofa 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move Pillow1 to Box2 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box2))"
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box1))"
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box3))"
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box3))"
    },
    {
        "task": "move CellPhone1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box2))"
    },
    {
        "task": "move CellPhone1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box2))"
    },
    {
        "task": "move CreditCard1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer2",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer2",
            "gotolocation agent1 drawer2 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 moves from desk 1 to drawer 2",
            "Agent 1 moves from drawer 2 to box 2",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box2))"
    },
    {
        "task": "move CD1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box1))"
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box3))"
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 picks up credit card 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box3))"
    },
    {
        "task": "move Laptop1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 laptop1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts laptop 1 in box 3.",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box3))"
    },
    {
        "task": "move Laptop1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 laptop1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 puts laptop 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box3))"
    },
    {
        "task": "move KeyChain1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box2))"
    },
    {
        "task": "move Laptop1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box2))"
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box1))"
    },
    {
        "task": "move KeyChain1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 keychain1 box3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box3))"
    },
    {
        "task": "move Watch1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box1))"
    },
    {
        "task": "move Book1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts cellphone 1 in box 3.",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box3))"
    },
    {
        "task": "move Pencil1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 pencil1 box3"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 3.",
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Box3))"
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box3))"
    },
    {
        "task": "move Laptop1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa3 sofa2",
            "pickupobjectnoreceptacle agent1 laptop1 sofa2",
            "gotolocation agent1 sofa2 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 picks up laptop 1 from sofa 2",
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 moves from sofa 3 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box1))"
    },
    {
        "task": "move Pillow1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box1))"
    },
    {
        "task": "move CD1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk3 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 moves from desk 3 to desk 2",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 picks up CD 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box1))"
    },
    {
        "task": "move Laptop1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up laptop 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box2))"
    },
    {
        "task": "move Pen1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 pen1 box3"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 puts pen 1 in box 3.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box3))"
    },
    {
        "task": "move CreditCard1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa2",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa2",
            "gotolocation agent1 sofa2 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 moves from desk 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box1))"
    },
    {
        "task": "move CreditCard1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up credit card 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box1 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box1))"
    },
    {
        "task": "move Book1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box2))"
    },
    {
        "task": "move Watch1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 watch1 box3"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts watch 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box3))"
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in box 3.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 moves from desk 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box3))"
    },
    {
        "task": "move Book1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box2))"
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts cellphone 1 in box 3.",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box3))"
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box1))"
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts keychain 1 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in box 1.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box1))"
    },
    {
        "task": "move KeyChain1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 moves from desk 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box2))"
    },
    {
        "task": "move Book1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move Watch1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 watch1 box3"
        ],
        "desc": [
            "Agent 1 puts watch 1 in box 3.",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box3))"
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move CreditCard1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box1))"
    },
    {
        "task": "move Pencil1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 puts pencil 1 in box 1.",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Box1))"
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move KeyChain1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box2))"
    },
    {
        "task": "move Watch1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts watch 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box2))"
    },
    {
        "task": "move Pencil1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Box2))"
    },
    {
        "task": "move Laptop1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box1))"
    },
    {
        "task": "move Laptop1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box2))"
    },
    {
        "task": "move CellPhone1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer3 drawer2",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer2",
            "gotolocation agent1 drawer2 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from drawer 3 to drawer 2",
            "Agent 1 picks up cellphone 1 from drawer 2",
            "Agent 1 puts cellphone 1 in box 1.",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box1))"
    },
    {
        "task": "move CD1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box2))"
    },
    {
        "task": "move Pillow1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from sofa 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box2))"
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move CD1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 cd1 box3"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts CD 1 in box 3.",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box3))"
    },
    {
        "task": "move CD1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 cd1 box3"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 puts CD 1 in box 3.",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box3))"
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 picks up pen 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box2 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box2))"
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 picks up credit card 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box3))"
    },
    {
        "task": "move CD1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box1))"
    },
    {
        "task": "move AlarmClock1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 alarmclock1 box2"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 puts alarm clock 1 in box 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Box2))"
    },
    {
        "task": "move Watch1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts watch 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box2))"
    },
    {
        "task": "move Pillow1 to Box1 with three object",
        "step": [
            "gotolocation agent1 bed1 sofa2",
            "pickupobjectnoreceptacle agent1 pillow1 sofa2",
            "gotolocation agent1 sofa2 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 picks up pillow 1 from sofa 2",
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 puts pillow 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move AlarmClock1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 alarmclock1 box1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Box1))"
    },
    {
        "task": "move Watch1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk3 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 3 to desk 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box2))"
    },
    {
        "task": "move Pencil1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 1.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in box 3.",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box3))"
    },
    {
        "task": "move Pen2 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen2 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 pen2 box3"
        ],
        "desc": [
            "Agent 1 puts pen 2 in box 3.",
            "Agent 1 picks up pen 2 from desk 1",
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen2 Box3))"
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box1))"
    },
    {
        "task": "move CD1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box1))"
    },
    {
        "task": "move Watch1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box1))"
    },
    {
        "task": "move Book1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 book1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 puts book 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box3))"
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk2",
            "pickupobjectnoreceptacle agent1 keychain1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from sofa 1 to desk 2",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box1))"
    },
    {
        "task": "move Pillow1 to Box3 with three object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box3",
            "putobjectinreceptacle agent1 pillow1 box3"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 3.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box3))"
    },
    {
        "task": "move Book1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in box 3.",
            "Agent 1 moves from desk 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box3))"
    },
    {
        "task": "move Watch2 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch2 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch2 box2"
        ],
        "desc": [
            "Agent 1 puts watch 2 in box 2.",
            "Agent 1 picks up watch 2 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch2 Box2))"
    },
    {
        "task": "move Pen1 to Box3 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 pen1 box3"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts pen 1 in box 3.",
            "Agent 1 moves from desk 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box3))"
    },
    {
        "task": "move KeyChain1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 moves from box 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box2))"
    },
    {
        "task": "move CreditCard1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box2))"
    },
    {
        "task": "move CD1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box2))"
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move Book1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from box 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box2))"
    },
    {
        "task": "move Pen1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 pen1 box3"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pen 1 in box 3.",
            "Agent 1 picks up pen 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box3))"
    },
    {
        "task": "move Book1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box2))"
    },
    {
        "task": "move CreditCard1 to Box2 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box2))"
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box1))"
    },
    {
        "task": "move Laptop1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box3",
            "putobjectinreceptacle agent1 laptop1 box3"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 puts laptop 1 in box 3.",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box3))"
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation KeyChain1 Box3)))"
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa3) (not (objectAtLocation CellPhone1 Box1)))"
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa1) (not (objectAtLocation Watch1 Box1)))"
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa3 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from sofa 3 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1) (not (objectAtLocation CD1 Box3)))"
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation KeyChain1 Box2)))"
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa1) (not (objectAtLocation Watch1 Box3)))"
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from drawer 2 to bed 1",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1) (not (objectAtLocation Pillow1 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa2) (not (objectAtLocation CreditCard1 Box1)))"
    },
    {
        "task": "put Watch1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 puts watch 1 in sofa 3.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa3) (not (objectAtLocation Watch1 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up cellphone 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (not (objectAtLocation CellPhone1 Box3)))"
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa1) (not (objectAtLocation Watch1 Box3)))"
    },
    {
        "task": "put Pillow2 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow2 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow2 sofa1"
        ],
        "desc": [
            "Agent 1 puts pillow 2 in sofa 1.",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up pillow 2 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow2 Sofa1) (not (objectAtLocation Pillow2 Box2)))"
    },
    {
        "task": "put CD1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 cd1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 puts CD 1 in sofa 3.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa3) (not (objectAtLocation CD1 Box1)))"
    },
    {
        "task": "put KeyChain1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa3) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa2) (not (objectAtLocation CD1 Box3)))"
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (not (objectAtLocation CellPhone1 Box4)))"
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up cellphone 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (not (objectAtLocation CellPhone1 Box3)))"
    },
    {
        "task": "put CellPhone2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone2 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 cellphone2 sofa3"
        ],
        "desc": [
            "Agent 1 puts cellphone 2 in sofa 3.",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 picks up cellphone 2 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone2 Sofa3) (not (objectAtLocation CellPhone2 Box1)))"
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa2) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 2.",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa2) (not (objectAtLocation CD1 Box3)))"
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa2) (not (objectAtLocation CellPhone1 Box2)))"
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa3) (not (objectAtLocation Pen1 Box3)))"
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa3) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts laptop 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa2) (not (objectAtLocation Laptop1 Box1)))"
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 3.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa3) (not (objectAtLocation Pen1 Box1)))"
    },
    {
        "task": "put Watch2 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 watch2 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch2 sofa1"
        ],
        "desc": [
            "Agent 1 picks up watch 2 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts watch 2 in sofa 1.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch2 Sofa1) (not (objectAtLocation Watch2 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 puts credit card 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (not (objectAtLocation CreditCard1 Box1)))"
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation KeyChain1 Box2)))"
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa2) (not (objectAtLocation CreditCard1 Box2)))"
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (not (objectAtLocation CreditCard1 Box1)))"
    },
    {
        "task": "put Pencil1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Sofa1) (not (objectAtLocation Pencil1 Box1)))"
    },
    {
        "task": "put Pencil2 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil2 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 pencil2 sofa1"
        ],
        "desc": [
            "Agent 1 puts pencil 2 in sofa 1.",
            "Agent 1 picks up pencil 2 from garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil2 Sofa1) (not (objectAtLocation Pencil2 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (not (objectAtLocation CreditCard1 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 picks up credit card 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa3) (not (objectAtLocation CreditCard1 Box1)))"
    },
    {
        "task": "put CD2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 cd2 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cd2 sofa3"
        ],
        "desc": [
            "Agent 1 puts CD 2 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up CD 2 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD2 Sofa3) (not (objectAtLocation CD2 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa3) (not (objectAtLocation CreditCard1 Box1)))"
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1) (not (objectAtLocation Pillow1 Box3)))"
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (not (objectAtLocation CreditCard1 Box1)))"
    },
    {
        "task": "put CreditCard2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard2 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 creditcard2 sofa3"
        ],
        "desc": [
            "Agent 1 puts credit card 2 in sofa 3",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up credit card 2 from desk",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard2 Sofa3) (not (objectAtLocation CreditCard2 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts cellphone 1 in sofa 2.",
            "Agent 1 picks up cellphone 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa2) (not (objectAtLocation CellPhone1 Box4)))"
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up cellphone 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa3) (not (objectAtLocation CellPhone1 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (not (objectAtLocation CellPhone1 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa3) (not (objectAtLocation CellPhone1 Box1)))"
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from sofa 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put CD1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cd1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 puts CD 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa3) (not (objectAtLocation CD1 Box1)))"
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa2) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1) (not (objectAtLocation CD1 Box3)))"
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa2) (not (objectAtLocation Pen1 Box1)))"
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa1) (not (objectAtLocation Watch1 Box4)))"
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa2) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put KeyChain1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa3) (not (objectAtLocation KeyChain1 Box2)))"
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa3) (not (objectAtLocation CreditCard1 Box1)))"
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa3) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put Pencil1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Sofa1) (not (objectAtLocation Pencil1 Box1)))"
    },
    {
        "task": "put KeyChain2 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain2 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 keychain2 sofa3"
        ],
        "desc": [
            "Agent 1 picks up keychain 2 from drawer",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 puts keychain 2 in sofa 3",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain2 Sofa3) (not (objectAtLocation KeyChain2 Box4)))"
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 2.",
            "Agent 1 moves from desk 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa2) (not (objectAtLocation Watch1 Box1)))"
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa1) (not (objectAtLocation Watch1 Box2)))"
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa2) (not (objectAtLocation Book1 Box2)))"
    },
    {
        "task": "put AlarmClock1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 alarmclock1 sofa3"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 3",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Sofa3) (not (objectAtLocation AlarmClock1 Box1)))"
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation KeyChain1 Box2)))"
    },
    {
        "task": "put Pencil1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Sofa1) (not (objectAtLocation Pencil1 Box2)))"
    },
    {
        "task": "put Laptop1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 laptop1 sofa3"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in sofa 3.",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa3) (not (objectAtLocation Laptop1 Box2)))"
    },
    {
        "task": "put Pencil2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil2 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pencil2 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pencil 2 in sofa 3.",
            "Agent 1 picks up pencil 2 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil2 Sofa3) (not (objectAtLocation Pencil2 Box1)))"
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from sofa 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up book 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa2) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1) (not (objectAtLocation CD1 Box4)))"
    },
    {
        "task": "put Watch1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 puts watch 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa3) (not (objectAtLocation Watch1 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 picks up cellphone 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa3) (not (objectAtLocation CellPhone1 Box1)))"
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa2) (not (objectAtLocation Pen1 Box1)))"
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa3) (not (objectAtLocation Pen1 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 puts credit card 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (not (objectAtLocation CreditCard1 Box1)))"
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to desk 2",
            "Agent 1 moves from desk 2 to sofa 1",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1) (not (objectAtLocation CD1 Box3)))"
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa3 sofa2",
            "pickupobjectnoreceptacle agent1 pillow1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 picks up pillow 1 from sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 moves from sofa 3 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1) (not (objectAtLocation Pillow1 Box1)))"
    },
    {
        "task": "put AlarmClock1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Sofa2) (not (objectAtLocation AlarmClock1 Box1)))"
    },
    {
        "task": "put Pillow1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 pillow1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts pillow 1 in sofa 2.",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa2) (not (objectAtLocation Pillow1 Box1)))"
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in sofa 1.",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from desk 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa1) (not (objectAtLocation Laptop1 Box1)))"
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa3) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put AlarmClock1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Sofa1) (not (objectAtLocation AlarmClock1 Box2)))"
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa1) (not (objectAtLocation Watch1 Box3)))"
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa1) (not (objectAtLocation Pen1 Box1)))"
    },
    {
        "task": "put AlarmClock1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 alarmclock1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 puts alarm clock 1 in sofa 3",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Sofa3) (not (objectAtLocation AlarmClock1 Box1)))"
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation KeyChain1 Box4)))"
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from sofa 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1) (not (objectAtLocation Book1 Box4)))"
    },
    {
        "task": "put CD2 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd2 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cd2 sofa2"
        ],
        "desc": [
            "Agent 1 puts CD 2 in sofa 2.",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up CD 2 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD2 Sofa2) (not (objectAtLocation CD2 Box4)))"
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa2) (not (objectAtLocation Pen1 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in sofa 2.",
            "Agent 1 moves from desk 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa2) (not (objectAtLocation CellPhone1 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (not (objectAtLocation CellPhone1 Box1)))"
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa1) (not (objectAtLocation Pen1 Box1)))"
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa1) (not (objectAtLocation Pen1 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (not (objectAtLocation CellPhone1 Box2)))"
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1) (not (objectAtLocation CD1 Box1)))"
    },
    {
        "task": "put AlarmClock1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Sofa2) (not (objectAtLocation AlarmClock1 Box1)))"
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts CD 1 in sofa 2.",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa2) (not (objectAtLocation CD1 Box3)))"
    },
    {
        "task": "put Pencil1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Sofa2) (not (objectAtLocation Pencil1 Box1)))"
    },
    {
        "task": "put CellPhone1 next to Bed1 Do not move Laptop1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 cellphone1 bed1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts cellphone 1 in bed 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Bed1) (objectAtLocation CellPhone1 Bed1))"
    },
    {
        "task": "put Book1 next to Drawer1 Do not move Watch1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from desk 1",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Drawer1) (objectAtLocation Book1 Drawer1))"
    },
    {
        "task": "put Laptop1 next to Drawer1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Drawer1) (objectAtLocation Laptop1 Drawer1))"
    },
    {
        "task": "put AlarmClock1 next to Desk2 Do not move CD1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 alarmclock1 desk2"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in desk 2",
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk2) (objectAtLocation AlarmClock1 Desk2))"
    },
    {
        "task": "put Pencil1 next to Drawer1 Do not move Pencil2",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pencil1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pencil 1 in drawer 1.",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil2 Drawer1) (objectAtLocation Pencil1 Drawer1))"
    },
    {
        "task": "put CD1 next to Desk1 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 desk1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in desk 1.",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Desk1) (objectAtLocation CD1 Desk1))"
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move Book1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk1) (objectAtLocation CreditCard1 Desk1))"
    },
    {
        "task": "put CD1 next to Drawer2 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 cd1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts CD 1 in drawer 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Drawer2) (objectAtLocation CD1 Drawer2))"
    },
    {
        "task": "put Book1 next to Desk1 Do not move Book2",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book2 Desk1) (objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put Laptop1 next to Bed1 Do not move Laptop2",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 laptop1 bed1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 puts laptop 1 in bed 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop2 Bed1) (objectAtLocation Laptop1 Bed1))"
    },
    {
        "task": "put Pillow1 next to GarbageCan1 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 pillow1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 puts pillow 1 in garbage can 1",
            "Agent 1 moves from bed 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 GarbageCan1) (objectAtLocation Pillow1 GarbageCan1))"
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk1) (objectAtLocation CellPhone1 Desk1))"
    },
    {
        "task": "put CreditCard1 next to Bed1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 creditcard1 bed1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up credit card 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Bed1) (objectAtLocation CreditCard1 Bed1))"
    },
    {
        "task": "put CreditCard1 next to Sofa1 Do not move Laptop1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa1) (objectAtLocation CreditCard1 Sofa1))"
    },
    {
        "task": "put KeyChain1 next to Drawer1 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 keychain1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts keychain 1 in drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Drawer1) (objectAtLocation KeyChain1 Drawer1))"
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move Laptop1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts credit card 1 in desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Desk1) (objectAtLocation CreditCard1 Desk1))"
    },
    {
        "task": "put CreditCard1 next to Sofa1 Do not move CreditCard2",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard2 Sofa1) (objectAtLocation CreditCard1 Sofa1))"
    },
    {
        "task": "put KeyChain1 next to Desk2 Do not move Pencil1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 keychain1 desk2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in desk 2",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Desk2) (objectAtLocation KeyChain1 Desk2))"
    },
    {
        "task": "put Pillow1 next to Desk1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts pillow 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Desk1) (objectAtLocation Pillow1 Desk1))"
    },
    {
        "task": "put Book1 next to Drawer1 Do not move Watch1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Drawer1) (objectAtLocation Book1 Drawer1))"
    },
    {
        "task": "put Book1 next to Drawer1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Drawer1) (objectAtLocation Book1 Drawer1))"
    },
    {
        "task": "put CD1 next to Sofa1 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (objectAtLocation CD1 Sofa1))"
    },
    {
        "task": "put KeyChain1 next to Drawer2 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 keychain1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 puts keychain 1 in drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Drawer2) (objectAtLocation KeyChain1 Drawer2))"
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Desk1) (objectAtLocation CreditCard1 Desk1))"
    },
    {
        "task": "put KeyChain1 next to Sofa1 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (objectAtLocation KeyChain1 Sofa1))"
    },
    {
        "task": "put Laptop1 next to Sofa2 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts laptop 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa2) (objectAtLocation Laptop1 Sofa2))"
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1) (objectAtLocation Book1 Sofa1))"
    },
    {
        "task": "put Pillow1 next to Desk1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts pillow 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Desk1) (objectAtLocation Pillow1 Desk1))"
    },
    {
        "task": "put CellPhone1 next to Sofa1 Do not move CellPhone2",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone2 Sofa1) (objectAtLocation CellPhone1 Sofa1))"
    },
    {
        "task": "put AlarmClock1 next to Sofa1 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (objectAtLocation AlarmClock1 Sofa1))"
    },
    {
        "task": "put Pencil1 next to Drawer1 Do not move Book1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pencil1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pencil 1 in drawer 1.",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Drawer1) (objectAtLocation Pencil1 Drawer1))"
    },
    {
        "task": "put AlarmClock1 next to Sofa1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (objectAtLocation AlarmClock1 Sofa1))"
    },
    {
        "task": "put KeyChain1 next to Desk1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 keychain1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts keychain 1 in desk 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Desk1) (objectAtLocation KeyChain1 Desk1))"
    },
    {
        "task": "put CellPhone1 next to GarbageCan1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 puts cellphone 1 in garbage can 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 GarbageCan1) (objectAtLocation CellPhone1 GarbageCan1))"
    },
    {
        "task": "put CellPhone1 next to Drawer1 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 cellphone1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Drawer1) (objectAtLocation CellPhone1 Drawer1))"
    },
    {
        "task": "put KeyChain1 next to Bed1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 keychain1 bed1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in bed 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Bed1) (objectAtLocation KeyChain1 Bed1))"
    },
    {
        "task": "put Pencil1 next to Drawer2 Do not move Pen1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 pencil1 drawer2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 puts pencil 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Drawer2) (objectAtLocation Pencil1 Drawer2))"
    },
    {
        "task": "put Watch1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 puts watch 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Desk1) (objectAtLocation Watch1 Desk1))"
    },
    {
        "task": "put Pillow1 next to Drawer1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 drawer1",
            "putobjectinreceptacle agent1 pillow1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts pillow 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Drawer1) (objectAtLocation Pillow1 Drawer1))"
    },
    {
        "task": "put Watch1 next to GarbageCan1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 watch1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 puts watch 1 in garbage can 1",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 GarbageCan1) (objectAtLocation Watch1 GarbageCan1))"
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Desk1) (objectAtLocation CellPhone1 Desk1))"
    },
    {
        "task": "put KeyChain1 next to Desk2 Do not move CD1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 keychain1 desk2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in desk 2",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk2) (objectAtLocation KeyChain1 Desk2))"
    },
    {
        "task": "put Pillow1 next to Bed2 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 bed2",
            "putobjectinreceptacle agent1 pillow1 bed2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in bed 2.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to bed 2",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Bed2) (objectAtLocation Pillow1 Bed2))"
    },
    {
        "task": "put Pillow1 next to Bed2 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 bed2",
            "putobjectinreceptacle agent1 pillow1 bed2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in bed 2.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to bed 2",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Bed2) (objectAtLocation Pillow1 Bed2))"
    },
    {
        "task": "put Pencil1 next to GarbageCan2 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 garbagecan2",
            "putobjectinreceptacle agent1 pencil1 garbagecan2"
        ],
        "desc": [
            "Agent 1 moves from garbagecan 1 to garbagecan",
            "Agent 1 puts pencil 1 in garbage can 2",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from garbagecan 2 to garbagecan"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 GarbageCan2) (objectAtLocation Pencil1 GarbageCan2))"
    },
    {
        "task": "put Pen1 next to Desk2 Do not move Laptop1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 pen1 desk2"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pen 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Desk2) (objectAtLocation Pen1 Desk2))"
    },
    {
        "task": "put Laptop1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 puts laptop 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk1) (objectAtLocation Laptop1 Desk1))"
    },
    {
        "task": "put CreditCard1 next to GarbageCan1 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 GarbageCan1) (objectAtLocation CreditCard1 GarbageCan1))"
    },
    {
        "task": "put CreditCard1 next to GarbageCan1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 puts credit card 1 in garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 GarbageCan1) (objectAtLocation CreditCard1 GarbageCan1))"
    },
    {
        "task": "put Book1 next to Drawer1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Drawer1) (objectAtLocation Book1 Drawer1))"
    },
    {
        "task": "put Pillow1 next to Bed1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 pillow1 bed1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in bed 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Bed1) (objectAtLocation Pillow1 Bed1))"
    },
    {
        "task": "put KeyChain1 next to Sofa1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1) (objectAtLocation KeyChain1 Sofa1))"
    },
    {
        "task": "put CellPhone1 next to GarbageCan1 Do not move CD1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts cellphone 1 in garbage can 1",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 GarbageCan1) (objectAtLocation CellPhone1 GarbageCan1))"
    },
    {
        "task": "put Book1 next to Desk1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Desk1) (objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put CreditCard1 next to GarbageCan1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 puts credit card 1 in garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 GarbageCan1) (objectAtLocation CreditCard1 GarbageCan1))"
    },
    {
        "task": "put CreditCard1 next to Drawer1 Do not move Pen1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 creditcard1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts credit card 1 in drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Drawer1) (objectAtLocation CreditCard1 Drawer1))"
    },
    {
        "task": "put Pen1 next to Sofa1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1) (objectAtLocation Pen1 Sofa1))"
    },
    {
        "task": "put Pen1 next to Desk1 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 pen1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pen 1 in desk 1.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Desk1) (objectAtLocation Pen1 Desk1))"
    },
    {
        "task": "put Book1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Desk1) (objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts credit card 1 in desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk1) (objectAtLocation CreditCard1 Desk1))"
    },
    {
        "task": "put Pencil1 next to Drawer1 Do not move Watch1",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 pencil1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 puts pencil 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Drawer1) (objectAtLocation Pencil1 Drawer1))"
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Desk1) (objectAtLocation CellPhone1 Desk1))"
    },
    {
        "task": "put CellPhone1 next to Desk2 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 cellphone1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 puts cellphone 1 in desk 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Desk2) (objectAtLocation CellPhone1 Desk2))"
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Desk1) (objectAtLocation CellPhone1 Desk1))"
    },
    {
        "task": "put Laptop1 next to Drawer1 Do not move Book1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Drawer1) (objectAtLocation Laptop1 Drawer1))"
    },
    {
        "task": "put Book1 next to Drawer1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from desk 1",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Drawer1) (objectAtLocation Book1 Drawer1))"
    },
    {
        "task": "put Pen1 next to Desk2 Do not move Book1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 pen1 desk2"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pen 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk2) (objectAtLocation Pen1 Desk2))"
    },
    {
        "task": "put Book1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Desk1) (objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Book2",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book2 Sofa1) (objectAtLocation Book1 Sofa1))"
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Laptop1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up book 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa1) (objectAtLocation Book1 Sofa1))"
    },
    {
        "task": "put KeyChain1 next to Bed1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 keychain1 bed1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts keychain 1 in bed 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Bed1) (objectAtLocation KeyChain1 Bed1))"
    },
    {
        "task": "put Laptop1 next to GarbageCan1 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 laptop1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 puts laptop 1 in garbage can 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 GarbageCan1) (objectAtLocation Laptop1 GarbageCan1))"
    },
    {
        "task": "put Laptop1 next to Bed2 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 bed2",
            "putobjectinreceptacle agent1 laptop1 bed2"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to bed 2",
            "Agent 1 puts laptop 1 in bed 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Bed2) (objectAtLocation Laptop1 Bed2))"
    },
    {
        "task": "put CellPhone1 next to Desk2 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 cellphone1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 puts cellphone 1 in desk 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Desk2) (objectAtLocation CellPhone1 Desk2))"
    },
    {
        "task": "put CD1 next to Desk1 Do not move Book1",
        "step": [
            "gotolocation agent1 desk1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in desk 1.",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk1) (objectAtLocation CD1 Desk1))"
    },
    {
        "task": "put KeyChain1 next to Sofa2 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa2) (objectAtLocation KeyChain1 Sofa2))"
    },
    {
        "task": "put CD1 next to Drawer2 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 cd1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts CD 1 in drawer 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Drawer2) (objectAtLocation CD1 Drawer2))"
    },
    {
        "task": "put Laptop1 next to Drawer1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Drawer1) (objectAtLocation Laptop1 Drawer1))"
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Desk1) (objectAtLocation CreditCard1 Desk1))"
    },
    {
        "task": "put Pillow1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk1) (objectAtLocation Pillow1 Desk1))"
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk1) (objectAtLocation CellPhone1 Desk1))"
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Book2",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book2 Sofa1) (objectAtLocation Book1 Sofa1))"
    },
    {
        "task": "put Pen1 next to Bed1 Do not move Book1",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 bed1",
            "putobjectinreceptacle agent1 pen1 bed1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in bed 1.",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Bed1) (objectAtLocation Pen1 Bed1))"
    },
    {
        "task": "put AlarmClock1 next to Drawer1 Do not move Watch1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 alarmclock1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts alarm clock 1 in drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Drawer1) (objectAtLocation AlarmClock1 Drawer1))"
    },
    {
        "task": "put Laptop1 next to GarbageCan1 Do not move CD1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 laptop1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts laptop 1 in garbage can 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 GarbageCan1) (objectAtLocation Laptop1 GarbageCan1))"
    },
    {
        "task": "put Pen1 next to Drawer2 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 pen1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 puts pen 1 in drawer 2.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Drawer2) (objectAtLocation Pen1 Drawer2))"
    },
    {
        "task": "put Laptop1 next to Drawer1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Drawer1) (objectAtLocation Laptop1 Drawer1))"
    },
    {
        "task": "put Pen1 next to Drawer1 Do not move CD1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Drawer1) (objectAtLocation Pen1 Drawer1))"
    },
    {
        "task": "put Laptop1 next to Desk2 Do not move CD1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 laptop1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 puts laptop 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk2) (objectAtLocation Laptop1 Desk2))"
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up book 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1) (objectAtLocation Book1 Sofa1))"
    },
    {
        "task": "put CreditCard1 next to Desk2 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 creditcard1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts credit card 1 in desk 2",
            "Agent 1 picks up credit card 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Desk2) (objectAtLocation CreditCard1 Desk2))"
    },
    {
        "task": "put Pillow1 next to GarbageCan1 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 pillow1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 puts pillow 1 in garbage can 1",
            "Agent 1 moves from bed 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 GarbageCan1) (objectAtLocation Pillow1 GarbageCan1))"
    },
    {
        "task": "put CellPhone1 next to Sofa1 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa1) (objectAtLocation CellPhone1 Sofa1))"
    },
    {
        "task": "put CD1 next to Desk2 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 cd1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 puts CD 1 in desk 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Desk2) (objectAtLocation CD1 Desk2))"
    },
    {
        "task": "put CreditCard1 next to Drawer2 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 creditcard1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 puts credit card 1 in drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Drawer2) (objectAtLocation CreditCard1 Drawer2))"
    },
    {
        "task": "put CD1 next to Sofa1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (objectAtLocation CD1 Sofa1))"
    },
    {
        "task": "put CD1 next to Drawer2 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 cd1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts CD 1 in drawer 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Drawer2) (objectAtLocation CD1 Drawer2))"
    },
    {
        "task": "put Book1 next to Desk1 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Desk1) (objectAtLocation Book1 Desk1))"
    },
    {
        "task": "put CellPhone1 next to Drawer1 Do not move CD1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 cellphone1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 puts cellphone 1 in drawer 1.",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Drawer1) (objectAtLocation CellPhone1 Drawer1))"
    },
    {
        "task": "put Laptop1 next to Desk1 Do not move Book1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 puts laptop 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk1) (objectAtLocation Laptop1 Desk1))"
    },
    {
        "task": "move Pen1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 pen1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in garbage can 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 GarbageCan1))"
    },
    {
        "task": "move Laptop1 to Desk2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 desk2",
            "putobjectinreceptacle agent1 laptop1 desk2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 moves from bed 1 to desk 2",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Desk2))"
    },
    {
        "task": "move CreditCard1 to Box2 with more object",
        "step": [
            "gotolocation agent1 desk2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to drawer 1",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box2))"
    },
    {
        "task": "move Pen1 to Box2 with more object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move KeyChain1 to Desk2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 desk2",
            "putobjectinreceptacle agent1 keychain1 desk2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in desk 2",
            "Agent 1 moves from drawer 1 to desk 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Desk2))"
    },
    {
        "task": "move Watch1 to Drawer3 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 drawer3",
            "putobjectinreceptacle agent1 watch1 drawer3"
        ],
        "desc": [
            "Agent 1 puts watch 1 in drawer 3.",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Drawer3))"
    },
    {
        "task": "move Watch1 to Box1 with more object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box1))"
    },
    {
        "task": "move KeyChain1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts keychain 1 in box 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box1))"
    },
    {
        "task": "move Pen1 to Drawer1 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pen 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Drawer1))"
    },
    {
        "task": "move Pencil1 to Box2 with more object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Box2))"
    },
    {
        "task": "move Pen1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box1))"
    },
    {
        "task": "move CD1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 desk3 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in desk 1.",
            "Agent 1 moves from desk 3 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk1))"
    },
    {
        "task": "move CreditCard1 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box2))"
    },
    {
        "task": "move Watch1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 watch1 bed1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in bed 1.",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Bed1))"
    },
    {
        "task": "move CreditCard1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box1))"
    },
    {
        "task": "move KeyChain1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 keychain1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 puts keychain 1 in drawer 2",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Drawer2))"
    },
    {
        "task": "move Laptop1 to Box1 with more object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box1))"
    },
    {
        "task": "move Pen1 to Desk5 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 desk5",
            "putobjectinreceptacle agent1 pen1 desk5"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to desk 5",
            "Agent 1 puts pen 1 in desk 5.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Desk5))"
    },
    {
        "task": "move AlarmClock1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 desk2",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 alarmclock1 desk1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in desk 1",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Desk1))"
    },
    {
        "task": "move Laptop1 to Desk2 with more object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 desk2",
            "putobjectinreceptacle agent1 laptop1 desk2"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to desk 2",
            "Agent 1 puts laptop 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Desk2))"
    },
    {
        "task": "move Watch1 to Drawer3 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 drawer3",
            "putobjectinreceptacle agent1 watch1 drawer3"
        ],
        "desc": [
            "Agent 1 puts watch 1 in drawer 3.",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Drawer3))"
    },
    {
        "task": "move Pencil1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 1.",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Box1))"
    },
    {
        "task": "move Watch1 to Desk3 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 desk3",
            "putobjectinreceptacle agent1 watch1 desk3"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 3",
            "Agent 1 puts watch 1 in desk 3.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Desk3))"
    },
    {
        "task": "move CreditCard1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up credit card 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box1))"
    },
    {
        "task": "move Pencil1 to Box2 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Box2))"
    },
    {
        "task": "move CellPhone1 to Box2 with more object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box2))"
    },
    {
        "task": "move Book1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa2))"
    },
    {
        "task": "move Pen1 to Box2 with more object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move Watch1 to Box2 with more object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts watch 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box2))"
    },
    {
        "task": "move CellPhone2 to Bed1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone2 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 cellphone2 bed1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 2 from sofa 1",
            "Agent 1 puts cellphone 2 in bed 1.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone2 Bed1))"
    },
    {
        "task": "move Watch1 to Sofa3 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 3.",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa3))"
    },
    {
        "task": "move CellPhone1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 puts cellphone 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box1))"
    },
    {
        "task": "move Book1 to Box1 with more object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move CreditCard2 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard2 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 creditcard2 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up credit card 2 from desk",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts credit card 2 in box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard2 Box2))"
    },
    {
        "task": "move KeyChain1 to GarbageCan2 with more object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 garbagecan2",
            "putobjectinreceptacle agent1 keychain1 garbagecan2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in garbage can",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 GarbageCan2))"
    },
    {
        "task": "move Pen1 to Box2 with more object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move Pen1 to Desk4 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 desk4",
            "putobjectinreceptacle agent1 pen1 desk4"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 4",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in desk 4."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Desk4))"
    },
    {
        "task": "move Laptop1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 laptop1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from desk 2",
            "Agent 1 moves from drawer 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts laptop 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Desk1))"
    },
    {
        "task": "move Book1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move Watch1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box1))"
    },
    {
        "task": "move CD1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1))"
    },
    {
        "task": "move Pen1 to Box2 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move Pen1 to Drawer1 with more object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Drawer1))"
    },
    {
        "task": "move CellPhone1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 sofa3 sofa2",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from sofa 2",
            "Agent 1 moves from sofa 3 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1))"
    },
    {
        "task": "move Pencil1 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Box2))"
    },
    {
        "task": "move CellPhone1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 drawer2",
            "putobjectinreceptacle agent1 cellphone1 drawer2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from drawer 2 to sofa 1",
            "Agent 1 puts cellphone 1 in drawer 2.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Drawer2))"
    },
    {
        "task": "move Pillow1 to Sofa3 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 pillow1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 puts pillow 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa3))"
    },
    {
        "task": "move Book1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer2",
            "putobjectinreceptacle agent1 book1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from drawer 2 to sofa 1",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 puts book 1 in drawer 2.",
            "Agent 1 moves from sofa 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Drawer2))"
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move CD1 to Box2 with more object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box2))"
    },
    {
        "task": "move KeyChain1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa1))"
    },
    {
        "task": "move CD1 to Desk4 with more object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 desk4",
            "putobjectinreceptacle agent1 cd1 desk4"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts CD 1 in desk 4.",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to desk 4"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk4))"
    },
    {
        "task": "move AlarmClock1 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 alarmclock1 box2"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in box 2",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Box2))"
    },
    {
        "task": "move Book2 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 book2 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 book2 box2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up book 2 from bed 1",
            "Agent 1 puts book 2 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book2 Box2))"
    },
    {
        "task": "move Laptop1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa2))"
    },
    {
        "task": "move CD1 to Drawer1 with more object",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 cd1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts CD 1 in drawer 1.",
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Drawer1))"
    },
    {
        "task": "move CellPhone1 to Box1 with more object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box1))"
    },
    {
        "task": "move CD1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 puts CD 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa2))"
    },
    {
        "task": "move Book1 to Desk6 with more object",
        "step": [
            "gotolocation agent1 desk2 drawer2",
            "pickupobjectnoreceptacle agent1 book1 drawer2",
            "gotolocation agent1 drawer2 desk6",
            "putobjectinreceptacle agent1 book1 desk6"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 2",
            "Agent 1 puts book 1 in desk 6.",
            "Agent 1 moves from desk 2 to drawer 2",
            "Agent 1 moves from drawer 2 to desk 6"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Desk6))"
    },
    {
        "task": "move CellPhone1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 puts cellphone 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box1))"
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move Watch1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 watch1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 puts watch 1 in garbage can 1",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 GarbageCan1))"
    },
    {
        "task": "move CreditCard2 to Bed1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard2 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 creditcard2 bed1"
        ],
        "desc": [
            "Agent 1 picks up credit card 2 from drawer",
            "Agent 1 puts credit card 2 in bed 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard2 Bed1))"
    },
    {
        "task": "move Pen1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa1))"
    },
    {
        "task": "move Book1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move CD1 to Desk2 with more object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk2",
            "putobjectinreceptacle agent1 cd1 desk2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in desk 2.",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk2))"
    },
    {
        "task": "move Laptop1 to Drawer1 with more object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from desk 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Drawer1))"
    },
    {
        "task": "move CellPhone1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 drawer2",
            "putobjectinreceptacle agent1 cellphone1 drawer2"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in drawer 2.",
            "Agent 1 moves from bed 1 to drawer 2",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Drawer2))"
    },
    {
        "task": "move Laptop1 to Desk3 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 desk3",
            "putobjectinreceptacle agent1 laptop1 desk3"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in desk 3.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to desk 3",
            "Agent 1 picks up laptop 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Desk3))"
    },
    {
        "task": "move CreditCard1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 creditcard1 bed1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 puts credit card 1 in bed 1",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Bed1))"
    },
    {
        "task": "move CreditCard1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box1))"
    },
    {
        "task": "move Laptop1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up laptop 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box1))"
    },
    {
        "task": "move AlarmClock1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 drawer2",
            "putobjectinreceptacle agent1 alarmclock1 drawer2"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 puts alarm clock 1 in drawer 2",
            "Agent 1 moves from desk 1 to drawer 2",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Drawer2))"
    },
    {
        "task": "move Book1 to Box1 with more object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 puts book 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move KeyChain1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 keychain1 desk2",
            "gotolocation agent1 desk2 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to sofa 2",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from drawer 1 to desk 2",
            "Agent 1 puts keychain 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa2))"
    },
    {
        "task": "move Laptop1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box1))"
    },
    {
        "task": "move KeyChain2 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 desk3 desk1",
            "pickupobjectnoreceptacle agent1 keychain2 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 keychain2 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts keychain 2 in garbage can",
            "Agent 1 moves from desk 3 to desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up keychain 2 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain2 GarbageCan1))"
    },
    {
        "task": "move CellPhone1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 cellphone1 bed1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 puts cellphone 1 in bed 1.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Bed1))"
    },
    {
        "task": "move Watch1 to Box2 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts watch 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box2))"
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts pillow 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move Pillow1 to GarbageCan2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 garbagecan2",
            "putobjectinreceptacle agent1 pillow1 garbagecan2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts pillow 1 in garbage can 2",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 GarbageCan2))"
    },
    {
        "task": "move Watch1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts watch 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa2))"
    },
    {
        "task": "move Laptop1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts laptop 1 in desk 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Desk1))"
    },
    {
        "task": "move CellPhone1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up cellphone 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1))"
    },
    {
        "task": "move CreditCard1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box1))"
    },
    {
        "task": "move Pillow1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 desk2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 moves from desk 2 to bed 1",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Desk1))"
    },
    {
        "task": "move CD1 to Desk3 with more object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk3",
            "putobjectinreceptacle agent1 cd1 desk3"
        ],
        "desc": [
            "Agent 1 moves from desk 3 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 puts CD 1 in desk 3.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Desk3))"
    },
    {
        "task": "move Pencil1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 desk3 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 bed1",
            "putobjectinreceptacle agent1 pencil1 bed1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 moves from desk 3 to garbage can",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 puts pencil 1 in bed 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Bed1))"
    },
    {
        "task": "move Pencil1 to Box1 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 1.",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Box1))"
    },
    {
        "task": "move CD1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 bed2 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from bed 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1))"
    },
    {
        "task": "move CellPhone1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 cellphone1 bed1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts cellphone 1 in bed 1.",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Bed1))"
    },
    {
        "task": "move CreditCard1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 creditcard1 bed1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts credit card 1 in bed 1",
            "Agent 1 picks up credit card 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Bed1))"
    },
    {
        "task": "move CellPhone1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa2))"
    },
    {
        "task": "move Book1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 book1 bed1"
        ],
        "desc": [
            "Agent 1 puts book 1 in bed 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 moves from sofa 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Bed1))"
    },
    {
        "task": "move Laptop1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 laptop1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 puts laptop 1 in garbage can 1",
            "Agent 1 moves from bed 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 GarbageCan1))"
    },
    {
        "task": "move Book1 to GarbageCan2 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 garbagecan2",
            "putobjectinreceptacle agent1 book1 garbagecan2"
        ],
        "desc": [
            "Agent 1 picks up book 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts book 1 in garbage can 2",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 GarbageCan2))"
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts pillow 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move Watch1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 watch1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 puts watch 1 in garbage can 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 GarbageCan1))"
    },
    {
        "task": "move AlarmClock1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 alarmclock1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts alarm clock 1 in garbage can",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 GarbageCan1))"
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move Pencil1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 1.",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Box1))"
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box1))"
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box2))"
    },
    {
        "task": "move KeyChain1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box1))"
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box1))"
    },
    {
        "task": "move CD1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box2))"
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move KeyChain1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts keychain 1 in box 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box1))"
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box1))"
    },
    {
        "task": "move AlarmClock1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 desk2",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 alarmclock1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 puts alarm clock 1 in box 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box2))"
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts watch 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box2))"
    },
    {
        "task": "move CellPhone2 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone2 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 cellphone2 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 2 from sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts cellphone 2 in box 1.",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone2 Box1))"
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box1))"
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts watch 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box2))"
    },
    {
        "task": "move Book2 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 book2 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 book2 box2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up book 2 from bed 1",
            "Agent 1 puts book 2 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book2 Box2))"
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts pillow 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move Laptop1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 laptop1 desk2",
            "gotolocation agent1 desk2 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 2",
            "Agent 1 picks up laptop 1 from desk 2",
            "Agent 1 moves from drawer 1 to desk 2",
            "Agent 1 puts laptop 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box2))"
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move AlarmClock1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 alarmclock1 box1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Box1))"
    },
    {
        "task": "move Pencil1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Box2))"
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box1))"
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box1))"
    },
    {
        "task": "move KeyChain1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box2))"
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box1))"
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up credit card 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box1))"
    },
    {
        "task": "move KeyChain2 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk3 desk1",
            "pickupobjectnoreceptacle agent1 keychain2 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 keychain2 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 3 to desk 1",
            "Agent 1 puts keychain 2 in box 2",
            "Agent 1 picks up keychain 2 from desk",
            "Agent 1 moves from desk 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain2 Box2))"
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box1))"
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts watch 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box2))"
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box1))"
    },
    {
        "task": "move Laptop1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up laptop 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box2))"
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts pillow 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box2))"
    },
    {
        "task": "move CD1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk3 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 moves from desk 3 to desk 2",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 picks up CD 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts cellphone 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa3 sofa2",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa2",
            "gotolocation agent1 sofa2 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 picks up cellphone 1 from sofa 2",
            "Agent 1 moves from sofa 3 to sofa 2",
            "Agent 1 moves from sofa 2 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box2))"
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up laptop 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box1))"
    },
    {
        "task": "move CD1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box1))"
    },
    {
        "task": "move KeyChain1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box2))"
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box1))"
    },
    {
        "task": "move AlarmClock1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 alarmclock1 box1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 puts alarm clock 1 in box 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Box1))"
    },
    {
        "task": "move CreditCard2 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard2 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 creditcard2 box1"
        ],
        "desc": [
            "Agent 1 picks up credit card 2 from drawer",
            "Agent 1 puts credit card 2 in box 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard2 Box1))"
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box2))"
    },
    {
        "task": "move Laptop1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box2))"
    },
    {
        "task": "move Pillow1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from box 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box2))"
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box1))"
    },
    {
        "task": "move Pencil1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Box2))"
    },
    {
        "task": "move Book1 to Bed1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 book1 bed1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts book 1 in bed 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Bed1))"
    },
    {
        "task": "move Pillow1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box2))"
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box1))"
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 puts cellphone 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box1))"
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 puts book 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move Book1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from sofa 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box2))"
    },
    {
        "task": "move CD1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box2))"
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box1))"
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box1))"
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box1))"
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up laptop 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box1))"
    },
    {
        "task": "move CD1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from bed 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box1))"
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 puts book 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box1))"
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box1))"
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up cellphone 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box2))"
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts book 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move AlarmClock1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 alarmclock1 box2"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in box 2",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation AlarmClock1 Box2))"
    },
    {
        "task": "move CD1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box2))"
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 puts cellphone 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box1))"
    },
    {
        "task": "move CD1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box1))"
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Box2))"
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk4 desk3",
            "pickupobjectnoreceptacle agent1 pen1 desk3",
            "gotolocation agent1 desk3 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 3 to box 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 picks up pen 1 from desk 3",
            "Agent 1 moves from desk 4 to desk 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box1))"
    },
    {
        "task": "move CD1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Box2))"
    },
    {
        "task": "move Pencil1 to Drawer2 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 drawer2",
            "putobjectinreceptacle agent1 pencil1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 2",
            "Agent 1 puts pencil 1 in drawer 2.",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Drawer2))"
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box1))"
    },
    {
        "task": "move Laptop1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Box2))"
    },
    {
        "task": "move Book1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk2 drawer2",
            "pickupobjectnoreceptacle agent1 book1 drawer2",
            "gotolocation agent1 drawer2 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 2",
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 moves from desk 2 to drawer 2",
            "Agent 1 moves from drawer 2 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box2))"
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Box1))"
    },
    {
        "task": "move KeyChain1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts keychain 1 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box1))"
    },
    {
        "task": "move CreditCard1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Box2))"
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Box1))"
    },
    {
        "task": "move Pillow1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to bed 1",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Box2))"
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box2))"
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Box1))"
    },
    {
        "task": "move KeyChain1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 keychain1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from drawer 1 to desk 2",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Box1))"
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 3",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up cellphone 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa3) (objectAtLocation Book1 Sofa3) (not (objectAtLocation CellPhone1 Box2)) (not (objectAtLocation CellPhone1 Box3)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from desk 1 to box 4",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 picks up alarm clock 1 from box"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa2) (objectAtLocation AlarmClock1 Sofa2) (not (objectAtLocation Pen1 Box2)) (not (objectAtLocation Pen1 Box4)) (not (objectAtLocation AlarmClock1 Box2)) (not (objectAtLocation AlarmClock1 Box4)))"
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 box1",
            "pickupobjectnoreceptacle agent1 alarmclock1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 picks up alarm clock 1 from box"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (objectAtLocation AlarmClock1 Sofa1) (not (objectAtLocation CreditCard1 Box2)) (not (objectAtLocation CreditCard1 Box1)) (not (objectAtLocation AlarmClock1 Box2)) (not (objectAtLocation AlarmClock1 Box1)))"
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 alarmclock1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1) (objectAtLocation AlarmClock1 Sofa1) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation AlarmClock1 Box2)) (not (objectAtLocation AlarmClock1 Box3)))"
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation Book1 Box4)) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation KeyChain1 Box3)))"
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up alarm clock 1 from box"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa2) (objectAtLocation AlarmClock1 Sofa2) (not (objectAtLocation Laptop1 Box1)) (not (objectAtLocation Laptop1 Box4)) (not (objectAtLocation AlarmClock1 Box1)) (not (objectAtLocation AlarmClock1 Box4)))"
    },
    {
        "task": "put Laptop1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 laptop1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts laptop 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa3) (objectAtLocation KeyChain1 Sofa3) (not (objectAtLocation Laptop1 Box4)) (not (objectAtLocation Laptop1 Box1)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up keychain 1 from box"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation CreditCard1 Box3)) (not (objectAtLocation CreditCard1 Box1)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from drawer 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa2) (objectAtLocation Book1 Sofa2) (not (objectAtLocation Laptop1 Box2)) (not (objectAtLocation Laptop1 Box3)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation Pillow1 Box2)) (not (objectAtLocation Pillow1 Box3)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put CellPhone2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 box4",
            "pickupobjectnoreceptacle agent1 book1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 cellphone2 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 cellphone2 sofa3"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 4",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 picks up cellphone 2 from desk 1",
            "Agent 1 moves from sofa 2 to box 4",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts cellphone 2 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone2 Sofa3) (objectAtLocation Book1 Sofa3) (not (objectAtLocation CellPhone2 Box1)) (not (objectAtLocation CellPhone2 Box4)) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation Book1 Box4)))"
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation CreditCard1 Box2)) (not (objectAtLocation CreditCard1 Box3)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 2",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation Watch1 Box3)) (not (objectAtLocation Watch1 Box2)) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation Book1 Box2)))"
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 desk3",
            "pickupobjectnoreceptacle agent1 cd1 desk3",
            "gotolocation agent1 desk3 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 puts CD 1 in sofa 2.",
            "Agent 1 picks up CD 1 from desk 3",
            "Agent 1 moves from desk 3 to sofa 2",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from sofa 2 to desk 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa2) (objectAtLocation AlarmClock1 Sofa2) (not (objectAtLocation CD1 Box3)) (not (objectAtLocation CD1 Box4)) (not (objectAtLocation AlarmClock1 Box3)) (not (objectAtLocation AlarmClock1 Box4)))"
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa2) (objectAtLocation Pencil1 Sofa2) (not (objectAtLocation CreditCard1 Box2)) (not (objectAtLocation CreditCard1 Box3)) (not (objectAtLocation Pencil1 Box2)) (not (objectAtLocation Pencil1 Box3)))"
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pencil 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa3) (objectAtLocation Pencil1 Sofa3) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation Book1 Box4)) (not (objectAtLocation Pencil1 Box1)) (not (objectAtLocation Pencil1 Box4)))"
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up book 1 from box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa3) (objectAtLocation Book1 Sofa3) (not (objectAtLocation CellPhone1 Box3)) (not (objectAtLocation CellPhone1 Box1)) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put Pencil1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 moves from sofa 2 to garbage can",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from desk 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Sofa2) (objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation Pencil1 Box3)) (not (objectAtLocation Pencil1 Box2)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation KeyChain1 Box2)))"
    },
    {
        "task": "put Pencil1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box2",
            "pickupobjectnoreceptacle agent1 alarmclock1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to garbage can",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 picks up alarm clock 1 from box"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Sofa2) (objectAtLocation AlarmClock1 Sofa2) (not (objectAtLocation Pencil1 Box1)) (not (objectAtLocation Pencil1 Box2)) (not (objectAtLocation AlarmClock1 Box1)) (not (objectAtLocation AlarmClock1 Box2)))"
    },
    {
        "task": "put KeyChain1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 alarmclock1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 3",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 picks up alarm clock 1 from box"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa3) (objectAtLocation AlarmClock1 Sofa3) (not (objectAtLocation KeyChain1 Box1)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation AlarmClock1 Box1)) (not (objectAtLocation AlarmClock1 Box4)))"
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation Watch1 Box3)) (not (objectAtLocation Watch1 Box1)) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 box3",
            "pickupobjectnoreceptacle agent1 alarmclock1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to garbage can",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa2) (objectAtLocation AlarmClock1 Sofa2) (not (objectAtLocation KeyChain1 Box1)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation AlarmClock1 Box1)) (not (objectAtLocation AlarmClock1 Box3)))"
    },
    {
        "task": "put Pillow1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 pillow1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 2",
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts pillow 1 in sofa 2.",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa2) (objectAtLocation Book1 Sofa2) (not (objectAtLocation Pillow1 Box4)) (not (objectAtLocation Pillow1 Box2)) (not (objectAtLocation Book1 Box4)) (not (objectAtLocation Book1 Box2)))"
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa2) (objectAtLocation Pencil1 Sofa2) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Pencil1 Box3)) (not (objectAtLocation Pencil1 Box2)))"
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from sofa 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa2) (objectAtLocation Pencil1 Sofa2) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation KeyChain1 Box2)) (not (objectAtLocation Pencil1 Box3)) (not (objectAtLocation Pencil1 Box2)))"
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation KeyChain1 Box1)) (not (objectAtLocation Book1 Box4)) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 2",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation CellPhone1 Box1)) (not (objectAtLocation CellPhone1 Box2)) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation Book1 Box2)))"
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa3 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 picks up cellphone 1 from sofa 2",
            "Agent 1 moves from sofa 3 to box 3",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from sofa 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation CellPhone1 Box4)) (not (objectAtLocation CellPhone1 Box3)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation KeyChain1 Box3)))"
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer2 box2",
            "pickupobjectnoreceptacle agent1 alarmclock1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from drawer 2 to box 2",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (objectAtLocation AlarmClock1 Sofa1) (not (objectAtLocation CreditCard1 Box3)) (not (objectAtLocation CreditCard1 Box2)) (not (objectAtLocation AlarmClock1 Box3)) (not (objectAtLocation AlarmClock1 Box2)))"
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 picks up cellphone 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa3) (objectAtLocation KeyChain1 Sofa3) (not (objectAtLocation CellPhone1 Box4)) (not (objectAtLocation CellPhone1 Box1)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 picks up keychain 1 from box"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa2) (objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 3",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 puts pencil 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa3) (objectAtLocation Pencil1 Sofa3) (not (objectAtLocation CellPhone1 Box2)) (not (objectAtLocation CellPhone1 Box3)) (not (objectAtLocation Pencil1 Box2)) (not (objectAtLocation Pencil1 Box3)))"
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk1 box3",
            "pickupobjectnoreceptacle agent1 alarmclock1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from desk 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa1) (objectAtLocation AlarmClock1 Sofa1) (not (objectAtLocation Laptop1 Box4)) (not (objectAtLocation Laptop1 Box3)) (not (objectAtLocation AlarmClock1 Box4)) (not (objectAtLocation AlarmClock1 Box3)))"
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 puts credit card 1 in sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa3) (objectAtLocation KeyChain1 Sofa3) (not (objectAtLocation CreditCard1 Box3)) (not (objectAtLocation CreditCard1 Box1)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa1 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1) (objectAtLocation Pencil1 Sofa1) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Pencil1 Box3)) (not (objectAtLocation Pencil1 Box2)))"
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 box4",
            "pickupobjectnoreceptacle agent1 book1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 4",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from box 4 to garbage can",
            "Agent 1 moves from box 4 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa2) (objectAtLocation Book1 Sofa2) (not (objectAtLocation KeyChain1 Box2)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box4)))"
    },
    {
        "task": "put Pencil1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 3",
            "Agent 1 moves from sofa 3 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from desk 2 to box 3",
            "Agent 1 picks up pencil 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Sofa3) (objectAtLocation Book1 Sofa3) (not (objectAtLocation Pencil1 Box1)) (not (objectAtLocation Pencil1 Box3)) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put Laptop1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 laptop1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 puts laptop 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pencil 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa3) (objectAtLocation Pencil1 Sofa3) (not (objectAtLocation Laptop1 Box2)) (not (objectAtLocation Laptop1 Box4)) (not (objectAtLocation Pencil1 Box2)) (not (objectAtLocation Pencil1 Box4)))"
    },
    {
        "task": "put Pillow1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 pillow1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 2",
            "Agent 1 puts pillow 1 in sofa 3.",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from box 2 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa3) (objectAtLocation Book1 Sofa3) (not (objectAtLocation Pillow1 Box3)) (not (objectAtLocation Pillow1 Box2)) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation Book1 Box2)))"
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 moves from desk 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation KeyChain1 Box1)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from box 4 to garbage can",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 picks up alarm clock 1 from box"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa2) (objectAtLocation AlarmClock1 Sofa2) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation Book1 Box4)) (not (objectAtLocation AlarmClock1 Box1)) (not (objectAtLocation AlarmClock1 Box4)))"
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation Pen1 Box2)) (not (objectAtLocation Pen1 Box1)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from box 2 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa2) (objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation CreditCard1 Box1)) (not (objectAtLocation CreditCard1 Box2)) (not (objectAtLocation KeyChain1 Box1)) (not (objectAtLocation KeyChain1 Box2)))"
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 box2",
            "pickupobjectnoreceptacle agent1 alarmclock1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 2",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from box 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (objectAtLocation AlarmClock1 Sofa1) (not (objectAtLocation CellPhone1 Box1)) (not (objectAtLocation CellPhone1 Box2)) (not (objectAtLocation AlarmClock1 Box1)) (not (objectAtLocation AlarmClock1 Box2)))"
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from drawer 2 to box 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 puts pen 1 in sofa 3.",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up book 1 from box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa3) (objectAtLocation Book1 Sofa3) (not (objectAtLocation Pen1 Box4)) (not (objectAtLocation Pen1 Box1)) (not (objectAtLocation Book1 Box4)) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box4",
            "pickupobjectnoreceptacle agent1 book1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 picks up book 1 from box 4",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation Pillow1 Box2)) (not (objectAtLocation Pillow1 Box4)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box4)))"
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from drawer 2 to box 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation KeyChain1 Box2)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 3",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa3) (objectAtLocation Book1 Sofa3) (not (objectAtLocation CreditCard1 Box1)) (not (objectAtLocation CreditCard1 Box3)) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from desk 2 to box 4",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa1) (objectAtLocation Pencil1 Sofa1) (not (objectAtLocation Pen1 Box1)) (not (objectAtLocation Pen1 Box4)) (not (objectAtLocation Pencil1 Box1)) (not (objectAtLocation Pencil1 Box4)))"
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from box 3 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa2) (objectAtLocation Pencil1 Sofa2) (not (objectAtLocation Laptop1 Box4)) (not (objectAtLocation Laptop1 Box3)) (not (objectAtLocation Pencil1 Box4)) (not (objectAtLocation Pencil1 Box3)))"
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 puts pen 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pencil 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa3) (objectAtLocation Pencil1 Sofa3) (not (objectAtLocation Pen1 Box2)) (not (objectAtLocation Pen1 Box4)) (not (objectAtLocation Pencil1 Box2)) (not (objectAtLocation Pencil1 Box4)))"
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 box1",
            "pickupobjectnoreceptacle agent1 alarmclock1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1) (objectAtLocation AlarmClock1 Sofa1) (not (objectAtLocation Pillow1 Box3)) (not (objectAtLocation Pillow1 Box1)) (not (objectAtLocation AlarmClock1 Box3)) (not (objectAtLocation AlarmClock1 Box1)))"
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 garbagecan1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 picks up keychain 1 from box"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation Laptop1 Box4)) (not (objectAtLocation Laptop1 Box1)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation Pen1 Box2)) (not (objectAtLocation Pen1 Box3)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa3) (objectAtLocation KeyChain1 Sofa3) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation KeyChain1 Box2)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Watch1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 puts watch 1 in sofa 3.",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up book 1 from box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa3) (objectAtLocation Book1 Sofa3) (not (objectAtLocation Watch1 Box2)) (not (objectAtLocation Watch1 Box1)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up alarm clock 1 from box"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa2) (objectAtLocation AlarmClock1 Sofa2) (not (objectAtLocation KeyChain1 Box2)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation AlarmClock1 Box2)) (not (objectAtLocation AlarmClock1 Box4)))"
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2",
            "gotolocation agent1 sofa2 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to box 3",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 moves from box 3 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa2) (objectAtLocation Pencil1 Sofa2) (not (objectAtLocation Laptop1 Box1)) (not (objectAtLocation Laptop1 Box3)) (not (objectAtLocation Pencil1 Box1)) (not (objectAtLocation Pencil1 Box3)))"
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation CreditCard1 Box3)) (not (objectAtLocation CreditCard1 Box1)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up book 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa3) (objectAtLocation KeyChain1 Sofa3) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Pencil1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed1 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from box 2 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Sofa3) (objectAtLocation KeyChain1 Sofa3) (not (objectAtLocation Pencil1 Box4)) (not (objectAtLocation Pencil1 Box2)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation KeyChain1 Box2)))"
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from drawer 2 to box 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 picks up cellphone 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation CellPhone1 Box3)) (not (objectAtLocation CellPhone1 Box1)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from box 4 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa2) (objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation Pen1 Box3)) (not (objectAtLocation Pen1 Box4)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation KeyChain1 Box4)))"
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2",
            "gotolocation agent1 sofa2 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 puts cellphone 1 in sofa 2.",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 picks up book 1 from box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa2) (objectAtLocation Book1 Sofa2) (not (objectAtLocation CellPhone1 Box3)) (not (objectAtLocation CellPhone1 Box1)) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa2) (objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation CreditCard1 Box3)) (not (objectAtLocation CreditCard1 Box4)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation KeyChain1 Box4)))"
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from desk 1 to box 4",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 picks up pencil 1 from box 4"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa1) (objectAtLocation Pencil1 Sofa1) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation Pencil1 Box3)) (not (objectAtLocation Pencil1 Box4)))"
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk2 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 2 to box 4",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 picks up watch 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation Watch1 Box2)) (not (objectAtLocation Watch1 Box4)) (not (objectAtLocation KeyChain1 Box2)) (not (objectAtLocation KeyChain1 Box4)))"
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation CD1 Box2)) (not (objectAtLocation CD1 Box3)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put Pillow1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 pillow1 sofa3"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in sofa 3.",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 4 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa3) (objectAtLocation KeyChain1 Sofa3) (not (objectAtLocation Pillow1 Box2)) (not (objectAtLocation Pillow1 Box4)) (not (objectAtLocation KeyChain1 Box2)) (not (objectAtLocation KeyChain1 Box4)))"
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 pencil1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 moves from drawer 2 to box 1",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 puts CD 1 in sofa 2.",
            "Agent 1 picks up pencil 1 from box 1",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from box 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa2) (objectAtLocation Pencil1 Sofa2) (not (objectAtLocation CD1 Box4)) (not (objectAtLocation CD1 Box1)) (not (objectAtLocation Pencil1 Box4)) (not (objectAtLocation Pencil1 Box1)))"
    },
    {
        "task": "put Watch1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 puts watch 1 in sofa 3.",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 moves from box 4 to garbage can",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up watch 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa3) (objectAtLocation Pencil1 Sofa3) (not (objectAtLocation Watch1 Box2)) (not (objectAtLocation Watch1 Box4)) (not (objectAtLocation Pencil1 Box2)) (not (objectAtLocation Pencil1 Box4)))"
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 picks up book 1 from box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa2) (objectAtLocation Book1 Sofa2) (not (objectAtLocation Pen1 Box2)) (not (objectAtLocation Pen1 Box1)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from drawer 2 to box 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation CellPhone1 Box2)) (not (objectAtLocation CellPhone1 Box1)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box1)))"
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3",
            "gotolocation agent1 sofa3 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 3",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to box 3",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 puts book 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa3) (objectAtLocation Book1 Sofa3) (not (objectAtLocation CellPhone1 Box4)) (not (objectAtLocation CellPhone1 Box3)) (not (objectAtLocation Book1 Box4)) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put CD2 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd2 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 cd2 sofa3"
        ],
        "desc": [
            "Agent 1 picks up CD 2 from garbage can",
            "Agent 1 puts CD 2 in sofa 3.",
            "Agent 1 moves from sofa 3 to garbage can",
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pencil 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD2 Sofa3) (objectAtLocation Pencil1 Sofa3) (not (objectAtLocation CD2 Box3)) (not (objectAtLocation CD2 Box4)) (not (objectAtLocation Pencil1 Box3)) (not (objectAtLocation Pencil1 Box4)))"
    },
    {
        "task": "put Laptop1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 laptop1 sofa3",
            "gotolocation agent1 sofa3 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in sofa 3.",
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 puts pencil 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa3) (objectAtLocation Pencil1 Sofa3) (not (objectAtLocation Laptop1 Box3)) (not (objectAtLocation Laptop1 Box4)) (not (objectAtLocation Pencil1 Box3)) (not (objectAtLocation Pencil1 Box4)))"
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 puts laptop 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation Laptop1 Box4)) (not (objectAtLocation Laptop1 Box1)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 puts pillow 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pillow1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation Pillow1 Box1)) (not (objectAtLocation Pillow1 Box3)) (not (objectAtLocation KeyChain1 Box1)) (not (objectAtLocation KeyChain1 Box3)))"
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 puts watch 1 in sofa 2.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 picks up watch 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa2) (objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation Watch1 Box2)) (not (objectAtLocation Watch1 Box1)) (not (objectAtLocation KeyChain1 Box2)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation CreditCard1 Box3)) (not (objectAtLocation CreditCard1 Box1)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation KeyChain1 Box1)))"
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 garbagecan1 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to garbage can",
            "Agent 1 puts watch 1 in sofa 2.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 picks up watch 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa2) (objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation Watch1 Box4)) (not (objectAtLocation Watch1 Box3)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation KeyChain1 Box3)))"
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 picks up book 1 from desk 1",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation Book1 Box4)) (not (objectAtLocation KeyChain1 Box1)) (not (objectAtLocation KeyChain1 Box4)))"
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box1",
            "pickupobjectnoreceptacle agent1 pencil1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up pencil 1 from box 1",
            "Agent 1 puts cellphone 1 in sofa 2.",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa2) (objectAtLocation Pencil1 Sofa2) (not (objectAtLocation CellPhone1 Box2)) (not (objectAtLocation CellPhone1 Box1)) (not (objectAtLocation Pencil1 Box2)) (not (objectAtLocation Pencil1 Box1)))"
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa1 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation CreditCard1 Box4)) (not (objectAtLocation CreditCard1 Box2)) (not (objectAtLocation KeyChain1 Box4)) (not (objectAtLocation KeyChain1 Box2)))"
    },
    {
        "task": "put CD1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer2 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cd1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 moves from drawer 2 to box 2",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 puts CD 1 in sofa 3.",
            "Agent 1 moves from box 2 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa3) (objectAtLocation Pencil1 Sofa3) (not (objectAtLocation CD1 Box4)) (not (objectAtLocation CD1 Box2)) (not (objectAtLocation Pencil1 Box4)) (not (objectAtLocation Pencil1 Box2)))"
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to box 2",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa2) (objectAtLocation KeyChain1 Sofa2) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation KeyChain1 Box1)) (not (objectAtLocation KeyChain1 Box2)))"
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 box4",
            "pickupobjectnoreceptacle agent1 book1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from box 4",
            "Agent 1 picks up watch 1 from drawer 1",
            "Agent 1 puts watch 1 in sofa 2.",
            "Agent 1 moves from desk 2 to box 4",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from box 4 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa2) (objectAtLocation Book1 Sofa2) (not (objectAtLocation Watch1 Box3)) (not (objectAtLocation Watch1 Box4)) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation Book1 Box4)))"
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CreditCard1 Sofa2) (objectAtLocation Book1 Sofa2) (not (objectAtLocation CreditCard1 Box1)) (not (objectAtLocation CreditCard1 Box3)) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 puts pen 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pen1 Sofa2) (objectAtLocation Pencil1 Sofa2) (not (objectAtLocation Pen1 Box2)) (not (objectAtLocation Pen1 Box3)) (not (objectAtLocation Pencil1 Box2)) (not (objectAtLocation Pencil1 Box3)))"
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk2 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 puts watch 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from desk 2 to box 3",
            "Agent 1 picks up watch 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Watch1 Sofa2) (objectAtLocation Pencil1 Sofa2) (not (objectAtLocation Watch1 Box4)) (not (objectAtLocation Watch1 Box3)) (not (objectAtLocation Pencil1 Box4)) (not (objectAtLocation Pencil1 Box3)))"
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 puts laptop 1 in sofa 1.",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation Laptop1 Box2)) (not (objectAtLocation Laptop1 Box3)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Book1 Box3)))"
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up book 1 from desk 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa1) (objectAtLocation AlarmClock1 Sofa1) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation Book1 Box4)) (not (objectAtLocation AlarmClock1 Box3)) (not (objectAtLocation AlarmClock1 Box4)))"
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from drawer 2 to box 3",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 picks up cellphone 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa1) (objectAtLocation KeyChain1 Sofa1) (not (objectAtLocation CellPhone1 Box1)) (not (objectAtLocation CellPhone1 Box3)) (not (objectAtLocation KeyChain1 Box1)) (not (objectAtLocation KeyChain1 Box3)))"
    },
    {
        "task": "put Pencil1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 alarmclock1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 picks up pencil 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Sofa1) (objectAtLocation AlarmClock1 Sofa1) (not (objectAtLocation Pencil1 Box4)) (not (objectAtLocation Pencil1 Box3)) (not (objectAtLocation AlarmClock1 Box4)) (not (objectAtLocation AlarmClock1 Box3)))"
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from desk 2 to box 4",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 puts cellphone 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 picks up cellphone 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CellPhone1 Sofa2) (objectAtLocation Pencil1 Sofa2) (not (objectAtLocation CellPhone1 Box3)) (not (objectAtLocation CellPhone1 Box4)) (not (objectAtLocation Pencil1 Box3)) (not (objectAtLocation Pencil1 Box4)))"
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk3 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 2",
            "Agent 1 puts CD 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to desk 2",
            "Agent 1 picks up CD 1 from desk 2",
            "Agent 1 moves from desk 2 to sofa 2",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 moves from desk 3 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation CD1 Sofa2) (objectAtLocation Book1 Sofa2) (not (objectAtLocation CD1 Box1)) (not (objectAtLocation CD1 Box2)) (not (objectAtLocation Book1 Box1)) (not (objectAtLocation Book1 Box2)))"
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from box 2 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Book1 Sofa3) (objectAtLocation Pencil1 Sofa3) (not (objectAtLocation Book1 Box3)) (not (objectAtLocation Book1 Box2)) (not (objectAtLocation Pencil1 Box3)) (not (objectAtLocation Pencil1 Box2)))"
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation KeyChain1 Sofa2) (objectAtLocation Pencil1 Sofa2) (not (objectAtLocation KeyChain1 Box1)) (not (objectAtLocation KeyChain1 Box3)) (not (objectAtLocation Pencil1 Box1)) (not (objectAtLocation Pencil1 Box3)))"
    },
    {
        "task": "put Pencil1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 moves from sofa 3 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Pencil1 Sofa3) (objectAtLocation KeyChain1 Sofa3) (not (objectAtLocation Pencil1 Box2)) (not (objectAtLocation Pencil1 Box4)) (not (objectAtLocation KeyChain1 Box2)) (not (objectAtLocation KeyChain1 Box4)))"
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts laptop 1 in sofa 1.",
            "Agent 1 puts book 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ],
        "goal_state": "((objectAtLocation Laptop1 Sofa1) (objectAtLocation Book1 Sofa1) (not (objectAtLocation Laptop1 Box4)) (not (objectAtLocation Laptop1 Box3)) (not (objectAtLocation Book1 Box4)) (not (objectAtLocation Book1 Box3)))"
    }
]