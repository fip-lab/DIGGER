[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:choose\n\n\nAction sets that need to be merged:\n(:action get_nail_polish\n    :parameters (?surface - surface ?npc - npc)\n    :precondition (and\n                    (has_nail_polish ?surface)\n                    (visible ?npc))\n    :effect (and\n              (not (has_nail_polish ?surface))\n              (camouflaged ?npc)\n              (clean_surface ?surface))\n)\n\n;; Action 2: Remove excess nail polish using fairy-moss\n\n(:action choose_lightestick\n    :parameters (?p - person ?ls - lightestick)\n    :precondition (and\n      (nails_prepped ?p)\n      (not (nails_whitened ?p))\n    )\n    :effect (and\n      (nails_whitened ?p)\n      (using_lightestick ?p ?ls)\n    )\n)\n```\n\n---\n\n### Explanation of Actions\n\n1. **Wipe Nails (`wipe_nails`)**:\n   - **Parameters**: The person (`?p`) performing the task.\n   - **Preconditions**: The person's nails must be stained (`nails_stained ?p`) and not yet cleaned (`not (nails_cleaned ?p)`).\n   - **Effects**: The nails are cleaned (`nails_cleaned ?p`), and the stained condition is removed (`not (nails_stained ?p)`).\n\n2. **Clean Work Station (`clean_work_station`)**:\n   - **Parameters**: The person (`?p`) and the work station (`?ws`).\n   - **Preconditions**: The work station must be dirty (`work_station_dirty ?ws`) and not ready (`not (work_station_ready ?ws)`).\n   - **Effects**: The work station becomes ready (`work_station_ready ?ws`), and the dirty state is removed (`not (work_station_dirty ?ws)`).\n\n3. **Clean Nails (`clean_nails`)**:\n   - **Parameters**: The person (`?p`) performing the task.\n   - **Preconditions**: The nails must already be cleaned (`nails_cleaned ?p`) but not yet prepped for whitening (`not (nails_prepped ?p)`).\n   - **Effects**: The nails are prepped for whitening (`nails_prepped ?p`).\n\n4. **Choose Lightestick (`choose_lightestick`)**:\n   - **Parameters**: The person (`?p`) and the lightestick (`?ls`) used for whitening the nail tips.\n   - **Preconditions**: The nails must be prepped (`nails_prepped ?p`) and not yet whitened (`not (nails_whitened ?p)`).\n   - **Effects**: The nails are whitened (`nails_whitened ?p`), and the lightestick is associated with the person (`using_lightestick ?p ?ls`).\n\n---\n\n### Notes and Adjustments\n\n- The step \"clean_tinder\" was interpreted as \"clean work station\" since \"tinder\" does not seem relevant to the task or description. This was adjusted to align with the task's context.\n- The entity states focus on attributes like `nails_cleaned`, `nails_stained`, `nails_prepped`, `nails_whitened`, `work_station_ready`, and `work_station_dirty`, which are relevant to the task.\n\nThis PDDL domain captures the intent and logic of the task, ensuring that all state transitions are accurately represented.\n(:action choose_size\n    :parameters (?npc - nail_polish_pack ?n - nail ?s - strip)\n    :precondition (and (open ?npc) (clean ?n) (available ?s))\n    :effect (and (selected ?s) (not (available ?s)))\n)\n\n\n(:action choose_items\n    :parameters (?ci - craft_item ?c - container)\n    :precondition (and\n      (disorganized ?ci)\n      (empty ?c)\n    )\n    :effect (and\n      (organized ?ci)\n      (not (disorganized ?ci))\n      (full ?c)\n      (contains ?c ?ci)\n    )\n)\n\n;;; Action 3: Reuse the Bottle as a Glue Dispenser\n\n(:action select_gel_polish ; selecting the gel polish\n    :parameters (?p - player ?polish - gel_polish)\n    :precondition (and (available ?polish) (not (selected ?polish)))\n    :effect (and (selected ?polish) (not (available ?polish)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:clean\n\n\nAction sets that need to be merged:\n(:action remove_nail_polish\n    :parameters (?npc - nail_polish_pack ?n - nail)\n    :precondition (and (existing_polish ?n) (open ?npc))\n    :effect (and (not (existing_polish ?n)) (clean ?n))\n)\n\n\n(:action remove_shine_from_nail\n   :parameters (?p - player ?nail - nail)\n   :precondition (and (at ?p ?nail) (shiny ?nail))\n   :effect (and (not (shiny ?nail)) (buffed ?nail))\n)\n\n\n(:action remove_tape\n   :parameters (?npc - npc ?tape - tape)\n   :precondition (and (at ?npc ?tape) (attached ?tape))\n   :effect (and (not (attached ?tape)) (removed ?tape))\n)\n\n\n(:action clean_work_station\n    :parameters (?p - person ?ws - work_station)\n    :precondition (and\n      (not (work_station_ready ?ws))\n      (work_station_dirty ?ws)\n    )\n    :effect (and\n      (work_station_ready ?ws)\n      (not (work_station_dirty ?ws))\n    )\n)\n\n;; Action 3: Clean nails\n\n(:action clean_nails\n    :parameters (?p - person)\n    :precondition (and\n      (nails_cleaned ?p)\n      (not (nails_prepped ?p))\n    )\n    :effect (and\n      (nails_prepped ?p)\n    )\n)\n\n;; Action 4: Choose lighter stick (for whitening tips)\n\n(:action clean_area\n    :parameters (?area - location)\n    :precondition (and\n                    (treated_area ?area))\n    :effect (and\n              (cleaned_area ?area)\n              (not (treated_area ?area)))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`use_hydrogen_peroxide`**:\n   - This action represents the use of hydrogen peroxide to treat the stained area.\n   - Preconditions:\n     - The bottle must contain hydrogen peroxide.\n     - The area must be stained.\n   - Effects:\n     - The hydrogen peroxide is applied to the stained area.\n     - The stain is removed.\n     - The bottle becomes empty.\n\n2. **`treat_hairspray`**:\n   - This action involves using a hanger shaped as a wand to treat the stain with hairspray.\n   - Preconditions:\n     - The hanger must be shaped as a wand.\n     - The area must be stained.\n   - Effects:\n     - The area is treated with hairspray.\n     - The stain is removed.\n     - The hanger is marked as used.\n\n3. **`use_bug_spray`**:\n   - This action represents the use of bug spray to clean the stained area.\n   - Preconditions:\n     - The bug spray container must contain the substance.\n     - The area (or agent) must be stained.\n   - Effects:\n     - The bug spray is applied.\n     - The stain is removed.\n     - The bug spray container becomes empty.\n\n4. **`clean_area`**:\n   - This action ensures that the treated area is rinsed and cleaned after applying the various cleaning agents.\n   - Preconditions:\n     - The area must have been treated with one of the cleaning agents.\n   - Effects:\n     - The area is cleaned and no longer marked as treated.\n\n---\n\n### Adjustments Made:\n- The step \"treat_hairspray user1 hanger1\" was interpreted as using a hanger shaped into a wand to assist in applying hairspray. This aligns with the task's context of using tools for cleaning.\n- The step \"use_bug_spray bug_clean npc\" was clarified to indicate that bug spray is applied to clean a stained area.\n- The final step \"clean_area\" was added to ensure the treated area is rinsed and cleaned, as described in the task instructions.\n\nThese actions capture the intent, logic, and state changes of the task while adhering to the PDDL structure.\n(:action clean_bottle\n    :parameters (?b - bottle)\n    :precondition (dirty ?b)\n    :effect (and\n      (clean ?b)\n      (not (dirty ?b))\n    )\n)\n\n;;; Action 2: Choose Craft Items for Storage\n\n(:action clean_room\n   :parameters (?p - player ?rug - rug ?cloth - cloth)\n   :precondition (and (at ?p ?rug) (dirty ?rug) (inventory ?p ?cloth) (dry ?cloth))\n   :effect (and (clean ?rug) (not (dirty ?rug)) (wet ?cloth))\n)\n\n\n(:action peel_gel ; peel off the gel polish\n    :parameters (?alice - person ?nail - nail)\n    :precondition (and (gel_loosened ?nail) (not (bare_nail ?nail)))\n    :effect (and (bare_nail ?nail) (not (gel_loosened ?nail)))\n)\n\n\n(:action peel_strip\n    :parameters (?npc - nail_polish_pack ?s - strip)\n    :precondition (and (selected ?s) (attached ?s))\n    :effect (and (peeled ?s) (not (attached ?s)))\n)\n\n\n(:action brush_and_flatten_gel_polish\n   :parameters (?p - player ?gel_polish - gel_polish ?brush - brush)\n   :precondition (and (at ?p ?gel_polish) (inventory ?p ?brush) (not (flattened ?gel_polish)))\n   :effect (and (flattened ?gel_polish) (brushed ?gel_polish))\n)\n\n\n(:action cure_foundation\n   :parameters (?p - player ?foundation - foundation ?lamp - lamp)\n   :precondition (and (at ?p ?foundation) (applied ?foundation) (at ?lamp ?p))\n   :effect (cured ?foundation)\n)\n\n\n(:action cure_topcoat\n   :parameters (?p - player ?nail - nail ?topcoat - gel_topcoat ?lamp - lamp)\n   :precondition (and (at ?p ?nail) (applied ?topcoat ?nail) (at ?lamp ?p))\n   :effect (cured ?topcoat ?nail)\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:use\n\n\nAction sets that need to be merged:\n(:action use_acetone\n    :parameters (?acetone - acetone ?bottle - bottle ?surface - surface)\n    :precondition (and\n                    (has_stain ?surface)\n                    (in_container ?acetone ?bottle)\n                    (open ?bottle))\n    :effect (and\n              (not (has_stain ?surface))\n              (out_of_container ?acetone)\n              (clean_surface ?surface)\n              (wet_surface ?surface))\n)\n\n;; Action 4: Wash the stain with a clean cloth and soap\n\n(:action use-clear-polish\n    :parameters (?b - bottle ?c - clear_polish)\n    :precondition (and (available ?c) (not (usable ?b)))\n    :effect (and (usable ?b) (not (available ?c)))\n)\n\n\n(:action use_hydrogen_peroxide\n    :parameters (?user - user ?hydrogen_oxide - substance ?bottle - container)\n    :precondition (and\n                    (contains ?bottle ?hydrogen_oxide)\n                    (stained_area ?user))\n    :effect (and\n              (applied ?hydrogen_oxide ?user)\n              (not (stained_area ?user))\n              (empty ?bottle))\n)\n\n;; Action 2: Treat the stain with hairspray\n\n(:action use_bug_spray\n    :parameters (?bug_clean - substance ?npc - agent)\n    :precondition (and\n                    (contains_bug_spray ?bug_clean)\n                    (stained_area ?npc))\n    :effect (and\n              (applied_bug_spray ?npc)\n              (not (stained_area ?npc))\n              (empty ?bug_clean))\n)\n\n;; Action 4: Rinse and clean the treated area\n\n(:action use_as_quick_drying\n    :parameters (?p - product ?n - nail_polish)\n    :precondition (and (available ?p) (applied ?n) (not (quick_drying ?n)))\n    :effect (and (quick_drying ?n) (used ?p))\n)\n```\n\n---\n\n#### Action 2: apply_top_coat  \nThis action represents applying a glossy, fast-drying top coat to help nails dry faster.\n\n```lisp\n\n(:action use_drying_drops_or_spray\n    :parameters (?p - product ?n - nail_polish)\n    :precondition (and (coated ?n) (available ?p) (not (dry ?n)))\n    :effect (and (dry ?n) (used ?p))\n)\n```\n\n---\n\n#### Action 4: dry_nail  \nThis action represents the process of drying the nail polish after applying quick-drying products.\n\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:wipe\n\n\nAction sets that need to be merged:\n(:action wash_soap_with_clean\n    :parameters (?cloth - cloth ?surface - surface)\n    :precondition (and\n                    (stained ?surface)\n                    (clean ?cloth)\n                    (dry ?cloth))\n    :effect (and\n              (not (stained ?surface))\n              (clean_surface ?surface)\n              (wet ?cloth)\n              (dirty ?cloth))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`get_nail_polish`**:\n   - **Purpose**: Removes nail polish from the surface and updates the state of the NPC (e.g., camouflaging it as part of the cleaning process).\n   - **Preconditions**: The surface must have nail polish, and the NPC must be visible.\n   - **Effects**: The nail polish is removed, the surface becomes clean, and the NPC becomes camouflaged.\n\n2. **`remove_nail_polish`**:\n   - **Purpose**: Removes excess nail polish using fairy-moss, which undergoes state changes (e.g., becoming smaller, wetter, and pruned).\n   - **Preconditions**: The surface must have excess polish, and the fairy-moss must be dry.\n   - **Effects**: The excess polish is removed, the fairy-moss becomes wetter and smaller, and its state is updated to pruned.\n\n3. **`use_acetone`**:\n   - **Purpose**: Uses acetone from a bottle to clean stains on the surface.\n   - **Preconditions**: The surface must have a stain, the acetone must be in a container (bottle), and the bottle must be open.\n   - **Effects**: The stain is removed, acetone is applied to the surface (changing its state to wet), and the surface becomes clean.\n\n4. **`wash_soap_with_clean`**:\n   - **Purpose**: Washes the surface with soap and a clean cloth. The cloth undergoes a state change (e.g., becoming wet and dirty).\n   - **Preconditions**: The surface must be stained, and the cloth must be clean and dry.\n   - **Effects**: The stain is removed, the surface becomes clean, and the cloth becomes wet and dirty.\n\n---\n\n### Notes:\n- The entity states (e.g., `clean_surface`, `wet_surface`, `dirty`, `dry`, `wetter`, `smaller`) reflect the transitions described in the task.\n- Irrelevant or unclear steps (e.g., `wash_soap_with_clean cloth1`) have been adjusted to align with the task's logic.\n- The actions are task-specific and designed to capture the described process of removing nail polish from surfaces.\n(:action wipe_nails\n    :parameters (?p - person)\n    :precondition (and\n      (not (nails_cleaned ?p))\n      (nails_stained ?p)\n    )\n    :effect (and\n      (nails_cleaned ?p)\n      (not (nails_stained ?p))\n    )\n)\n\n;; Action 2: Clean work station\n\n(:action wipe_surface_with_alcohol\n   :parameters (?p - player ?nail - nail ?wipe - alcohol_wipe)\n   :precondition (and (at ?p ?nail) (inventory ?p ?wipe) (cured ?topcoat ?nail))\n   :effect (and (not (tacky ?nail)) (used ?wipe))\n)\n```\n\n### Explanation of Actions:\n1. **`remove_shine_from_nail`**: Represents buffing the nails to remove their shine. The precondition checks if the nail is shiny, and the effect removes the shine.\n2. **`clean_room`**: Cleans the room by using a cloth to clean a rug. The cloth becomes wet as an effect.\n3. **`brush_and_flatten_gel_polish`**: Brushes and flattens the gel polish. The precondition ensures the gel polish is not already flattened.\n4. **`cure_foundation`**: Cures the gel foundation under a UV/LED lamp. The precondition ensures the foundation has been applied and the lamp is available.\n5. **`remove_tape`**: Removes tape from the nails. The precondition checks if the tape is attached.\n6. **`apply_nail_polish`**: Applies regular nail polish to the nails. The precondition ensures the nail is buffed.\n7. **`dry_polish`**: Dries the applied regular nail polish. The effect marks the polish as dried.\n8. **`add_gel_topcoat`**: Adds a gel topcoat to the nails. The precondition ensures the regular polish is dried.\n9. **`cure_topcoat`**: Cures the gel topcoat under a lamp. The precondition ensures the topcoat has been applied.\n10. **`wipe_surface_with_alcohol`**: Wipes the tacky layer off the cured gel topcoat using an alcohol wipe.\n\n### Adjustments:\n- Irrelevant or unclear steps (e.g., \"cure-wound wick1 lamp1\") were omitted as they do not align with the task.\n- Steps were rephrased and aligned with the task's descriptions to ensure coherence and relevance.\n- State changes were carefully tracked for each entity (e.g., nails, polish, cloth, lamp).\n\nThis ensures the PDDL actions accurately represent the task steps and entity state transitions.\n(:action insert_cuticle_stick ; insert a cuticle stick under the gel surface\n    :parameters (?npc - npc ?nail - nail ?cuticle_stick - tool)\n    :precondition (and (mostly_chipped ?nail) (inventory ?npc ?cuticle_stick))\n    :effect (and (gel_loosened ?nail) (not (mostly_chipped ?nail)))\n)\n\n\n(:action place_strip_on_nail\n    :parameters (?npc - nail_polish_pack ?s - strip ?n - nail)\n    :precondition (and (peeled ?s) (clean ?n))\n    :effect (and (placed ?s ?n) (not (peeled ?s)))\n)\n\n\n(:action set_cap_on_counter\n    :parameters (?u - user ?cap - cap ?counter - counter)\n    :precondition (and (at ?u ?cap) (cap_state ?cap held) (counter_state ?counter clear))\n    :effect (and (cap_state ?cap on_counter) (not (cap_state ?cap held)))\n)\n```\n\n#### 3. Wrap a rubber band around the cap\n```lisp\n\n(:action wrap_rubber_band\n    :parameters (?u - user ?cap - cap ?rubber_band - rubber_band)\n    :precondition (and (at ?u ?cap) (at ?u ?rubber_band) (cap_state ?cap stuck) (rubber_band_state ?rubber_band available))\n    :effect (and (cap_state ?cap wrapped_with_rubber_band) (not (rubber_band_state ?rubber_band available)))\n)\n```\n\n#### 4. Dissolve hardened polish\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:add\n\n\nAction sets that need to be merged:\n(:action add-lacquer-thinner\n    :parameters (?b - bottle ?l - lacquer_thinner)\n    :precondition (and (closed ?b) (contains ?b nail_polish) (available ?l))\n    :effect (and (contains ?b lacquer_thinner) (not (available ?l)))\n)\n\n\n(:action add_gel_topcoat\n   :parameters (?p - player ?nail - nail ?topcoat - gel_topcoat)\n   :precondition (and (at ?p ?nail) (inventory ?p ?topcoat) (dried ?polish ?nail))\n   :effect (and (applied ?topcoat ?nail) (not (inventory ?p ?topcoat)))\n)\n\n\n(:action shake-bottle\n    :parameters (?b - bottle)\n    :precondition (and (closed ?b) (contains ?b nail_polish) (contains ?b lacquer_thinner))\n    :effect (and (mixed ?b) (not (separated ?b)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:avoid\n\n\nAction sets that need to be merged:\n(:action avoid-nail-polish-remover\n    :parameters (?r - remover)\n    :precondition (available ?r)\n    :effect (and (not (used ?r)) (preserved nail_polish))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`add-lacquer-thinner`**:\n   - **Parameters**: A bottle (`?b`) and lacquer thinner (`?l`).\n   - **Preconditions**: The bottle is closed, contains nail polish, and lacquer thinner is available.\n   - **Effects**: Lacquer thinner is added to the bottle, and it is no longer available.\n\n2. **`shake-bottle`**:\n   - **Parameters**: A bottle (`?b`).\n   - **Preconditions**: The bottle is closed, contains nail polish, and lacquer thinner has been added.\n   - **Effects**: The contents of the bottle are mixed, ensuring the polish is no longer separated.\n\n3. **`use-clear-polish`**:\n   - **Parameters**: A bottle (`?b`) and clear polish (`?c`).\n   - **Preconditions**: Clear polish is available, and the current bottle of nail polish is not usable.\n   - **Effects**: The clear polish is used to restore the usability of the nail polish bottle, and the clear polish is no longer available.\n\n4. **`avoid-nail-polish-remover`**:\n   - **Parameters**: Nail polish remover (`?r`).\n   - **Preconditions**: Nail polish remover is available.\n   - **Effects**: Ensures that nail polish remover is not used, preserving the integrity of the nail polish.\n\n---\n\n### Key Notes:\n- The irrelevant or nonsensical steps (e.g., involving \"velveeta\" or \"npc\") were omitted or reinterpreted.\n- The focus was placed on the task's goal: preventing nail polish from drying out and maintaining its usability.\n- Entity states such as `available`, `contains`, `mixed`, and `usable` were chosen to represent the relevant state transitions for this task.\n- The action `avoid-nail-polish-remover` was added to emphasize the instruction against using nail polish remover.\n\nThis set of actions accurately captures the logic and intent of the task while adhering to the PDDL format.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:chip\n\n\nAction sets that need to be merged:\n(:action chip_nail ; simulate chipping away at the gel polish\n    :parameters (?npc - npc ?nail - nail)\n    :precondition (and (has_gel_polish ?nail) (not (mostly_chipped ?nail)))\n    :effect (and (mostly_chipped ?nail) (not (has_gel_polish ?nail)))\n)\n\n\n(:action cut_time\n    :parameters (?n - nail_polish ?npc - person)\n    :precondition (and (dry ?n) (decorated ?npc))\n    :effect (and (time_reduced ?npc) (satisfied ?npc))\n)\n```\n\n---\n\n### Entity State Transitions:\n\n- **products**:  \n  - `location`: before = \"around house\", after = \"in waste basket\" (assumes products are disposed of after use).  \n  - `messiness`: before = \"disorganized\", after = \"organized\" (implies products are neatly arranged after use).  \n\n- **nail polish**:  \n  - `location`: before = \"in tin\", after = \"on wood\" (nail polish is taken out of storage and applied).  \n  - `state`: transitions from `not applied` \u2192 `applied` \u2192 `coated` \u2192 `dry`.  \n\n- **npc (person)**:  \n  - `decoration`: before = \"bare | plain\", after = \"decorated\" (person\u2019s nails are decorated after drying).  \n  - `visibility`: before = \"visible\", after = \"invisible\" (not relevant to this task, ignored).  \n\n---\n\n### Notes:\n\n1. **Irrelevant Steps**: Some entity attributes (e.g., `visibility` for `npc`) were deemed irrelevant to the task and excluded from the PDDL actions.  \n2. **Task-Specific Adjustments**: The steps were adjusted to focus on the application and drying of nail polish, as described in the task and its intent.  \n3. **State Transitions**: Each action carefully reflects the state transitions of the entities involved, ensuring logical progression.  \n\nLet me know if you need further refinements or additional actions!\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:condition\n\n\nAction sets that need to be merged:\n(:action condition_nail ; condition the nails after removing the gel polish\n    :parameters (?npc - npc ?nail - nail ?conditioner - item)\n    :precondition (and (bare_nail ?nail) (inventory ?npc ?conditioner))\n    :effect (and (nail_conditioned ?nail) (not (bare_nail ?nail)))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`chip_nail`**:\n   - **Action Name**: Represents the step where the gel polish is chipped away.\n   - **Preconditions**: Requires the nail to have gel polish and not already be mostly chipped.\n   - **Effect**: Changes the nail state to \"mostly_chipped\" and removes the \"has_gel_polish\" state.\n\n2. **`insert_cuticle_stick`**:\n   - **Action Name**: Represents inserting a cuticle stick under the gel surface.\n   - **Preconditions**: The nail must be mostly chipped, and the NPC must have a cuticle stick in their inventory.\n   - **Effect**: Loosens the gel polish on the nail and removes the \"mostly_chipped\" state.\n\n3. **`peel_gel`**:\n   - **Action Name**: Represents peeling off the gel polish.\n   - **Preconditions**: The gel polish must be loosened, and the nail must not already be bare.\n   - **Effect**: Changes the nail state to \"bare_nail\" and removes the \"gel_loosened\" state.\n\n4. **`condition_nail`**:\n   - **Action Name**: Represents conditioning the nails after gel removal.\n   - **Preconditions**: The nail must be bare, and the NPC must have a conditioner in their inventory.\n   - **Effect**: Changes the nail state to \"nail_conditioned\" and removes the \"bare_nail\" state.\n\n---\n\n### Notes:\n- The steps were adjusted to align with the task description and ensure logical progression.\n- The entity states (e.g., `mostly_chipped`, `gel_loosened`, `bare_nail`, `nail_conditioned`) were derived from the task description and represent the changes in the nail's condition throughout the process.\n- The NPC's inventory and tools were incorporated into the preconditions as necessary (e.g., cuticle stick, conditioner).\n- Actions were named concisely to reflect their purpose while adhering to the PDDL action structure.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:treat\n\n\nAction sets that need to be merged:\n(:action treat_hairspray\n    :parameters (?user - user ?hanger - tool)\n    :precondition (and\n                    (shaped_as_wand ?hanger)\n                    (stained_area ?user))\n    :effect (and\n              (treated_with_hairspray ?user)\n              (not (stained_area ?user))\n              (used ?hanger))\n)\n\n;; Action 3: Use bug spray to clean the stained area\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:open\n\n\nAction sets that need to be merged:\n(:action open_pack\n    :parameters (?npc - nail_polish_pack)\n    :precondition (and (closed ?npc))\n    :effect (and (open ?npc) (not (closed ?npc)))\n)\n\n\n(:action open_bottle\n    :parameters (?u - user ?b - bottle)\n    :precondition (and (at ?u ?b) (bottle_state ?b closed_with_lid))\n    :effect (and (bottle_state ?b open) (not (bottle_state ?b closed_with_lid)))\n)\n```\n\n#### 2. Set the cap on the counter\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:air\n\n\nAction sets that need to be merged:\n(:action smooth_strip\n    :parameters (?s - strip ?n - nail)\n    :precondition (and (placed ?s ?n) (not (smooth ?s)))\n    :effect (and (smooth ?s) (adhered ?s ?n))\n)\n\n\n(:action air_dry_polish ; air-drying the applied polish\n    :parameters (?p - player ?nails - nails)\n    :precondition (and (painted ?nails ?polish) (not (dry ?nails)))\n    :effect (and (dry ?nails))\n)\n\n\n(:action air_dry_topcoat ; air-drying the top coat\n    :parameters (?p - player ?nails - nails)\n    :precondition (and (topcoated ?nails ?topcoat) (not (dry ?nails)))\n    :effect (and (dry ?nails))\n)\n```\n\n### Explanation of Actions:\n\n1. **`select_gel_polish`**: This action allows the player to select a gel polish. The precondition ensures the polish is available and not already selected. The effect updates the state to mark the polish as selected and no longer available.\n\n2. **`apply_polish`**: This action applies the selected polish to the player's nails. Preconditions check that the polish is selected, the nails are clean, and the nails are dry. The effect updates the nails to be painted and no longer dry.\n\n3. **`air_dry_polish`**: This action allows the polish on the nails to air-dry. The precondition checks that the nails are painted and not dry, and the effect updates the nails' state to dry.\n\n4. **`add_gel_topcoat`**: This action applies a top coat to the nails. Preconditions ensure the nails are already painted and dry, and the top coat is available. The effect marks the nails as top-coated and the top coat as no longer available.\n\n5. **`air_dry_topcoat`**: This action allows the top coat on the nails to air-dry. The precondition ensures that the nails have a top coat applied and are not dry. The effect updates the nails to be dry.\n\n### Adjustments:\n- The task steps were clarified for relevance to the described process of applying and drying gel nail polish.\n- Entity states such as `selected`, `painted`, `dry`, and `topcoated` were introduced to reflect the transitions in the nails' state throughout the task.\n- Irrelevant or unclear steps were omitted or adjusted to fit the logical sequence of the task.\n(:action dry_nail\n    :parameters (?n - nail_polish ?npc - person)\n    :precondition (and (coated ?n) (not (dry ?n)) (present ?npc))\n    :effect (and (dry ?n) (decorated ?npc))\n)\n```\n\n---\n\n#### Action 5: cut_time  \nThis action represents the reduction of drying time using effective methods.\n\n```lisp\n\n(:action dry_polish\n   :parameters (?p - player ?nail - nail ?polish - polish)\n   :precondition (and (at ?p ?nail) (applied ?polish ?nail))\n   :effect (dried ?polish ?nail)\n)\n\n\n(:action dissolve_polish\n    :parameters (?npc - npc ?b - bottle ?thinner - nail_polish_thinner)\n    :precondition (and (at ?npc ?b) (bottle_state ?b open) (bottle_content_state ?b hardened_polish) (at ?npc ?thinner) (thinner_state ?thinner available))\n    :effect (and (bottle_content_state ?b dissolved_polish) (not (bottle_content_state ?b hardened_polish)))\n)\n```\n\n#### 5. Soften stuck polish with hot water\n```lisp\n\n(:action soften_stick\n    :parameters (?npc - npc ?b - bottle ?water - hot_water)\n    :precondition (and (at ?npc ?b) (bottle_state ?b closed_with_lid) (bottle_content_state ?b stuck_polish) (at ?npc ?water) (water_state ?water hot))\n    :effect (and (bottle_content_state ?b softened_polish) (not (bottle_content_state ?b stuck_polish)))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **open_bottle**: This action represents the user opening the nail polish bottle. The precondition checks that the user is at the bottle and that the bottle is currently closed. The effect changes the bottle state to \"open.\"\n\n2. **set_cap_on_counter**: This action represents the user placing the cap of the bottle on the counter. The precondition ensures the user is holding the cap and the counter is clear. The effect updates the cap state to \"on_counter\" and removes it from the \"held\" state.\n\n3. **wrap_rubber_band**: This action represents wrapping a rubber band around a stuck cap to improve grip. The precondition checks that the cap is stuck, the rubber band is available, and the user is at both the cap and the rubber band. The effect updates the cap state to \"wrapped_with_rubber_band\" and removes the rubber band from the \"available\" state.\n\n4. **dissolve_polish**: This action represents dissolving hardened nail polish using nail polish thinner. The precondition ensures the bottle is open, the polish inside is hardened, and the thinner is available. The effect changes the polish content state to \"dissolved_polish.\"\n\n5. **soften_stick**: This action represents softening stuck polish using hot water. The precondition checks that the bottle is closed, the polish is stuck, and hot water is available. The effect updates the polish content state to \"softened_polish\" and removes the \"stuck_polish\" state.\n\n---\n\n### Adjustments to Steps:\n- The step `set_cap_on_counter user1 ketchup_bottle1` was modified to represent setting the cap of the nail polish bottle on a counter, as the original step referenced a ketchup bottle, which is irrelevant to the task.\n- Entity states were defined based on the task requirements, focusing on the states of the bottle, cap, polish, rubber band, and water.\n\nThese actions capture the intent and logic of the task while ensuring accurate state transitions for the entities involved.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:take\n\n\nAction sets that need to be merged:\n(:action take_file\n    :parameters (?npc - nail_polish_pack ?f - file)\n    :precondition (and (open ?npc) (available ?f))\n    :effect (and (in_hand ?f) (not (available ?f)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:enjoy\n\n\nAction sets that need to be merged:\n(:action enjoy\n    :parameters (?npc - nail_polish_pack)\n    :precondition (and (all_nails_done) (open ?npc))\n    :effect (and (task_complete))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`open_pack`**:\n   - **Parameters**: A nail polish pack (`?npc`).\n   - **Precondition**: The pack must be closed.\n   - **Effect**: The pack becomes open.\n\n2. **`remove_nail_polish`**:\n   - **Parameters**: A nail polish pack (`?npc`) and a nail (`?n`).\n   - **Precondition**: The nail has existing polish, and the pack is open.\n   - **Effect**: The polish is removed, and the nail becomes clean.\n\n3. **`choose_size`**:\n   - **Parameters**: A nail polish pack (`?npc`), a nail (`?n`), and a strip (`?s`).\n   - **Precondition**: The pack is open, the nail is clean, and the strip is available.\n   - **Effect**: The strip is selected and no longer available.\n\n4. **`peel_strip`**:\n   - **Parameters**: A nail polish pack (`?npc`) and a strip (`?s`).\n   - **Precondition**: The strip is selected and attached.\n   - **Effect**: The strip is peeled and no longer attached.\n\n5. **`place_strip_on_nail`**:\n   - **Parameters**: A nail polish pack (`?npc`), a strip (`?s`), and a nail (`?n`).\n   - **Precondition**: The strip is peeled, and the nail is clean.\n   - **Effect**: The strip is placed on the nail.\n\n6. **`smooth_strip`**:\n   - **Parameters**: A strip (`?s`) and a nail (`?n`).\n   - **Precondition**: The strip is placed on the nail but not smooth.\n   - **Effect**: The strip is smoothed and adhered to the nail.\n\n7. **`take_file`**:\n   - **Parameters**: A nail polish pack (`?npc`) and a file (`?f`).\n   - **Precondition**: The pack is open, and the file is available.\n   - **Effect**: The file is taken and now in hand.\n\n8. **`apply_top_coat`**:\n   - **Parameters**: A nail polish pack (`?npc`), a nail (`?n`), and a top coat (`?tc`).\n   - **Precondition**: The strip is adhered to the nail, and the top coat is available in the pack.\n   - **Effect**: The top coat is applied to the nail.\n\n9. **`enjoy`**:\n   - **Parameters**: A nail polish pack (`?npc`).\n   - **Precondition**: All nails are done, and the pack is open.\n   - **Effect**: The task is marked as complete.\n\n---\n\n### Notes:\n1. Irrelevant or incorrect steps (e.g., \"apply_top_coathanger velveeta\" and \"make_sliplargerbeads\") were excluded or adjusted to align with the task's description.\n2. Entity states (e.g., `open`, `peeled`, `adhered`) were defined based on the logical transitions described in the task.\n3. The final `enjoy` action marks the completion of the task, ensuring all nails are done.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:make\n\n\nAction sets that need to be merged:\n(:action make_horizontal_bar\n    :parameters (?np - nail_polish ?b - bottle)\n    :precondition (and\n      (clean ?b)\n      (empty ?b)\n      (not (contains ?b ?np))\n    )\n    :effect (and\n      (contains ?b ?np)\n      (not (empty ?b))\n    )\n)\n```\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:apply\n\n\nAction sets that need to be merged:\n(:action apply_top_coat\n    :parameters (?n - nail_polish ?p - product)\n    :precondition (and (quick_drying ?n) (available ?p) (not (coated ?n)))\n    :effect (and (coated ?n) (used ?p))\n)\n```\n\n---\n\n#### Action 3: use_drying_drops_or_spray  \nThis action represents using drying drops or a setting spray to cut down on drying time.\n\n```lisp\n\n(:action apply_polish ; applying gel polish to nails\n    :parameters (?p - player ?polish - gel_polish ?nails - nails)\n    :precondition (and (selected ?polish) (clean ?nails) (dry ?nails))\n    :effect (and (painted ?nails ?polish) (not (dry ?nails)))\n)\n\n\n(:action apply_nail_polish\n   :parameters (?npc - npc ?nail - nail ?polish - polish)\n   :precondition (and (at ?npc ?nail) (inventory ?npc ?polish) (buffed ?nail))\n   :effect (and (applied ?polish ?nail) (not (inventory ?npc ?polish)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:reuse\n\n\nAction sets that need to be merged:\n(:action reuse_bottle\n    :parameters (?u - user ?b - bottle)\n    :precondition (and\n      (clean ?b)\n      (empty ?b)\n      (not (used_as_glue_dispenser ?b))\n    )\n    :effect (and\n      (used_as_glue_dispenser ?b)\n      (knowledgeable ?u)\n    )\n)\n\n;;; Action 4: Store Hobby Paint in the Bottle\n\nThe actions after the merger are:"
]