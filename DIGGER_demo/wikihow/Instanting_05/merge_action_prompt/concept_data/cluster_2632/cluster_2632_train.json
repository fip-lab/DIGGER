[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:finish\n\n\nAction sets that need to be merged:\n(:action start_with_fresh_ground_chuck\n    :parameters (?p - player ?gc - ground_cheese)\n    :precondition (and (at ?p kitchen) (fresh ?gc))\n    :effect (and (prepared ?gc))\n)\n```\n\n---\n\n#### 2. **make_chuck**\n```pddl\n\n(:action start_with_meat\n    :parameters (?meat - ingredient)\n    :precondition (and\n      (raw ?meat)\n      (good-quality ?meat)\n    )\n    :effect (and\n      (ready ?meat)\n    )\n)\n\n;; Action 2: Place the ground beef in a bowl\n\n(:action finish_wreath\n    :parameters (?p - player ?w - wreath)\n    :precondition (and (at ?p kitchen) (not (completed ?w)))\n    :effect (and (completed ?w))\n)\n```\n\n---\n\n### Notes on Design:\n1. **Entity State Transitions**: Each action reflects changes in the relevant states of the entities involved, such as `prepared`, `chilled`, `seasoned`, `cooked`, etc.\n2. **Irrelevant Steps**: Some steps (like `start_with_fresh_ground_chuck`) were adjusted to make sense in the context of the task, focusing on the preparation of ingredients.\n3. **Consistency with Description**: Actions like `form_into_ball` and `form_patties` align with the descriptions provided, ensuring proper state transitions (e.g., `formed`, `patties`).\n4. **Grill and Cooking**: Actions involving the grill (`build_fire`, `place_burger_on_grill`, `cook`) reflect the physical and thermal changes to the patties and the grill.\n\nThis set of PDDL actions captures the logical flow of the task and ensures accurate modeling of the state changes in the entities involved.\n(:action finish_with_bun\n    :parameters (?p - player ?bun - item ?hamburger - paragraph)\n    :precondition (and (at ?p desk) (is_paragraph ?hamburger) (is_bun ?bun) (not (added_bun ?hamburger)))\n    :effect (and (added_bun ?hamburger) (has_conclusion ?hamburger ?bun))\n)\n```\n\n#### 8. Analyze Finished Paragraph\n```lisp\n\n(:action finish_meat\n    :parameters (?p - player ?b - beef)\n    :precondition (and (at ?p kitchen) (temperature ?b cooked) (location ?b in_pan))\n    :effect (and (location ?b in_bowl) (not (location ?b in_pan)))\n)\n```\n\n#### 6. Finish Bread\n```lisp\n\n(:action finish_bread\n    :parameters (?p - player ?b - bread)\n    :precondition (and (at ?p kitchen) (texture ?b rigid) (location ?b on_wax_paper))\n    :effect (and (location ?b in_pan) (texture ?b pan_shaped) (not (location ?b on_wax_paper)))\n)\n```\n\n#### 7. Finish Mixture\n```lisp\n\n(:action finish_mixture\n    :parameters (?p - player ?m - mixture ?s - soup)\n    :precondition (and (at ?p kitchen) (location ?m in_pan) (composition ?m mixed))\n    :effect (and (location ?s present) (flavor ?s flavorful) (not (location ?m in_pan)))\n)\n```\n\n#### 8. Cook Entire Meal\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:cook\n\n\nAction sets that need to be merged:\n(:action make_chuck\n    :parameters (?p - player ?c - chuck)\n    :precondition (and (at ?p kitchen) (not (prepared ?c)))\n    :effect (and (prepared ?c) (moist ?c))\n)\n```\n\n---\n\n#### 3. **chill_beef_patties**\n```pddl\n\n(:action make_polenta_recipe\n    :parameters (?alice - entity ?mixture - entity)\n    :precondition (and\n      (has_step ?alice unselected)\n      (at_location ?mixture on_counter)\n      (has_temperature ?mixture room_temperature)\n      (has_composition ?mixture separate)\n    )\n    :effect (and\n      (not (has_step ?alice unselected))\n      (has_step ?alice selected)\n      (not (has_composition ?mixture separate))\n      (has_composition ?mixture mixed)\n      (not (has_temperature ?mixture room_temperature))\n      (has_temperature ?mixture hot)\n    )\n)\n```\n\n---\n\n#### Action 3: Stir Ingredients\n```lisp\n\n(:action form_into_ball\n    :parameters (?p - player ?gc - ground_chuck)\n    :precondition (and (at ?p kitchen) (prepared ?gc) (not (formed ?gc)))\n    :effect (and (formed ?gc) (ball_shape ?gc))\n)\n```\n\n---\n\n#### 6. **pull_in_sliplargerbeads**\n```pddl\n\n(:action form_patties\n    :parameters (?p - player ?c - chuck)\n    :precondition (and (at ?p kitchen) (formed ?c) (not (patties ?c)))\n    :effect (and (patties ?c) (proper_shape ?c))\n)\n```\n\n---\n\n#### 8. **build_fire**\n```pddl\n\n(:action build_fire\n    :parameters (?p - player ?grill - brickhouse)\n    :precondition (and (at ?p grill) (not (fire_built ?grill)))\n    :effect (and (fire_built ?grill) (hot ?grill))\n)\n```\n\n---\n\n#### 9. **place_burger_on_grill**\n```pddl\n\n(:action build_burger\n    :parameters (?burger - food_item ?plate - container ?kitchen - location)\n    :precondition (and\n      (formed ?burger)\n      (clean ?plate)\n      (in ?kitchen kitchen)\n    )\n    :effect (and\n      (on ?burger ?plate)\n      (arranged ?burger)\n    )\n)\n\n;; Action 8: Choose your cooking method\n\n(:action cook\n    :parameters (?p - player ?patty - patties ?grill - grill)\n    :precondition (and (at ?p ?grill) (at ?patty ?grill) (on ?grill) (hot ?grill) (not (cooked ?patty)))\n    :effect (and (cooked ?patty) (hot ?patty))\n)\n\n\n(:action cook_meat\n    :parameters (?p - player ?b - beef ?stove - stove_knob)\n    :precondition (and (at ?p kitchen) (at ?b in_pan) (temperature ?b raw) (power ?stove on))\n    :effect (and (temperature ?b cooked) (not (temperature ?b raw)))\n)\n```\n\n#### 5. Finish Meat\n```lisp\n\n(:action cook_meal\n    :parameters (?p - player ?kitchen - kitchen)\n    :precondition (and (at ?p kitchen) (cleanness ?kitchen clean))\n    :effect (and (cleanness ?kitchen messy) (meal_ready burger_bites))\n)\n```\n\n---\n\n### Explanation of Actions\n\n1. **Defrost Mixture**: This action transitions the mixture's state from cold to warm while ensuring the player is in the kitchen.\n2. **Prepare Bread**: Focuses on transitioning the bread from being in a mixing bowl with a smooth texture to being on wax paper with a rigid texture.\n3. **Prepare Sauce**: Melts the Velveeta cheese by turning on the stove and changing its state from room temperature to melted.\n4. **Cook Meat**: Changes the beef's state from raw to cooked while ensuring it is in a pan and the stove is on.\n5. **Finish Meat**: Moves the cooked beef from the pan to a bowl, indicating it is ready for further use.\n6. **Finish Bread**: Transitions the bread from wax paper to a pan and changes its texture to a pan-shaped form.\n7. **Finish Mixture**: Combines the mixture into soup, making it flavorful and marking the soup's presence.\n8. **Cook Entire Meal**: Finalizes the meal preparation, transitioning the kitchen's state from clean to messy and marking the burger bites as ready.\n\nEach action reflects the described steps, focusing on the relevant entity state transitions, such as location, temperature, texture, and readiness.\n(:action cook_burger\n    :parameters (?burger - ingredient ?pan - tool ?stove - appliance ?loc - location)\n    :precondition (and\n      (in-pan ?burger ?pan)\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (heated ?pan)\n      (has-power ?stove)\n      (seasoned ?burger)\n    )\n    :effect (and\n      (cooked ?burger)\n      (browned ?burger)\n      (not (uncooked ?burger))\n    )\n)\n```\n\n---\n\n#### Action 5: Flatten Patties\n```pddl\n\n(:action cook_patties\n    :parameters (?patties - ingredient ?stove - appliance ?loc - location)\n    :precondition (and\n      (flattened ?patties)\n      (in-container ?patties on_counter)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n    )\n    :effect (and\n      (cooked ?patties)\n      (browned ?patties)\n      (not (in-container ?patties on_counter))\n    )\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **Warm Vegetable Oil in Skillet:** This action warms the pan with vegetable oil on the stove, preparing it for cooking. The pan transitions from a clean state to a heated state.\n   \n2. **Smash Meat in Pan:** This action places the meat in the pan and flattens it. The meat transitions from being \"on_counter\" to being \"in-pan\" and becomes \"flattened.\"\n\n3. **Season Burgers:** This action seasons the burgers with salt and pepper. The burgers transition from \"uncooked\" to \"seasoned.\"\n\n4. **Cook Burger:** This action cooks the burger in the pan. The burger transitions from \"uncooked\" to \"cooked\" and \"browned.\"\n\n5. **Flatten Patties:** This action flattens the patties using a container. The patties transition from being \"on_counter\" to being \"in-container\" and \"flattened.\"\n\n6. **Cook Patties:** This action cooks the flattened patties on the stove. The patties transition from \"in-container\" and \"flattened\" to \"cooked\" and \"browned.\"\n\n---\n\n### Adjustments:\n- Some steps in the original description were modified or clarified to make them relevant to the task.\n- The entity states were carefully considered to reflect the transitions before and after each action, ensuring logical consistency.\n\n(:action create_burger\n    :parameters (?mixture - mixture ?burger - food_item)\n    :precondition (and\n      (mixed ?mixture)\n    )\n    :effect (and\n      (formed ?burger)\n      (not (in_mixture ?mixture ?burger))\n    )\n)\n\n;; Action 7: Arrange the burgers on a plate\n\n(:action prepare_add_ingredients\n    :parameters (?burger - food_item)\n    :precondition (and\n      (cooking ?burger)\n    )\n    :effect (and\n      (toppings_prepared ?burger)\n    )\n)\n\n;; Action 10: Wrap the burger in a bun\n\n(:action prepare_bread\n    :parameters (?p - player ?b - bread ?bowl - mixing_bowl)\n    :precondition (and (at ?p kitchen) (in ?b ?bowl) (texture ?b smooth))\n    :effect (and (on ?b wax_paper) (texture ?b rigid) (not (in ?b ?bowl)))\n)\n```\n\n#### 3. Prepare Sauce\n```lisp\n\n(:action prepare_sauce\n    :parameters (?p - player ?stove - stove_knob ?v - velveeta)\n    :precondition (and (at ?p kitchen) (at ?v counter) (temperature ?v room_temperature) (power ?stove off))\n    :effect (and (power ?stove on) (temperature ?v melted) (not (temperature ?v room_temperature)))\n)\n```\n\n#### 4. Cook Meat\n```lisp\n\n(:action prepare_grill\n    :parameters (?p - player ?grill - grill ?stove_knob - stove_knob)\n    :precondition (and (at ?p ?grill) (not (on ?grill)) (not (hot ?grill)) (off ?stove_knob))\n    :effect (and (on ?grill) (hot ?grill) (not (off ?stove_knob)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:chill\n\n\nAction sets that need to be merged:\n(:action chill_beef_patties\n    :parameters (?p - player ?bp - patties)\n    :precondition (and (at ?p kitchen) (prepared ?bp) (not (chilled ?bp)))\n    :effect (and (chilled ?bp))\n)\n```\n\n---\n\n#### 4. **season_meat**\n```pddl\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:season\n\n\nAction sets that need to be merged:\n(:action season_meat\n    :parameters (?p - player ?b - beef)\n    :precondition (and (at ?p kitchen) (prepared ?b) (not (seasoned ?b)))\n    :effect (and (seasoned ?b) (flavorful ?b))\n)\n```\n\n---\n\n#### 5. **form_into_ball**\n```pddl\n\n(:action season_burgers\n    :parameters (?burgers - ingredient)\n    :precondition (and\n      (at ?burgers on_counter)\n      (uncooked ?burgers)\n    )\n    :effect (and\n      (seasoned ?burgers)\n    )\n)\n```\n\n---\n\n#### Action 4: Cook Burger\n```pddl\n\n(:action place_burger_on_grill\n    :parameters (?p - player ?patty - patties ?grill - brickhouse)\n    :precondition (and (at ?p grill) (fire_built ?grill) (chilled ?patty))\n    :effect (and (on_grill ?patty) (not (chilled ?patty)))\n)\n```\n\n---\n\n#### 10. **peek_into_papyrus**\n```pddl\n\n(:action place_ingredients\n    :parameters (?ingredient - ingredient ?bowl - container)\n    :precondition (and\n      (ground ?ingredient)\n      (clean ?bowl)\n    )\n    :effect (and\n      (in ?ingredient ?bowl)\n      (not (ground ?ingredient))\n    )\n)\n\n;; Action 3: Roughly chop the onion and garlic\n\n(:action wrap_bun\n    :parameters (?burger - food_item ?bun - ingredient)\n    :precondition (and\n      (cooked ?burger)\n      (available ?bun)\n    )\n    :effect (and\n      (wrapped ?burger ?bun)\n      (ready_to_serve ?burger)\n    )\n)\n```\n\n---\n\n### Explanation of Actions and State Changes:\n\n1. **`start_with_meat`**: Ensures the meat is of good quality and ready for preparation. The state `ready` is added to the meat.\n2. **`place_ingredients`**: Moves the ground beef into the mixing bowl. The state `in` updates the location of the beef.\n3. **`choose_ingredient`**: Roughly chops the onion and garlic, changing their state from `whole` to `chopped`.\n4. **`add_ingredients`**: Adds the egg yolk to the mixing bowl, reflecting the state transition of the egg yolk being `in` the bowl.\n5. **`mix_ingredients`**: Mixes all ingredients together, changing the state of the mixture to `mixed`.\n6. **`create_burger`**: Forms the mixture into burger patties, transitioning the state to `formed`.\n7. **`build_burger`**: Arranges the burgers on a plate in the kitchen, changing their state to `arranged`.\n8. **`choose_cooking_method`**: Selects the stove or another appliance for cooking, marking it as `selected`.\n9. **`prepare_add_ingredients`**: Prepares toppings for the burgers while they are cooking, reflecting the state `toppings_prepared`.\n10. **`wrap_bun`**: Wraps the cooked burger in a bun, marking it as `wrapped` and `ready_to_serve`.\n\nEach action is designed to reflect the logical flow of the task, with preconditions ensuring the proper sequence and effects updating the state of entities involved.\n(:action garnish-with-cheese\n    :parameters (?v - velveeta ?b - beef_hash)\n    :precondition (and (cubed ?v) (onCounter ?v) (mixed ?b))\n    :effect (and (garnished ?b ?v) (not (onCounter ?v)) (not (cubed ?v)))\n)\n\n\n(:action spread-mixture-on-toast\n    :parameters (?m - mixture ?t - toast)\n    :precondition (and (gathered ?m) (flavorful ?t) (present ?t))\n    :effect (and (spread ?m ?t) (not (gathered ?m)) (not (flavorful ?t)))\n)\n```\n\n### Explanation of Actions:\n\n1. **`gather-ingredients`**:\n   - **Parameters**: The `mixture` that represents the ingredients to be gathered.\n   - **Preconditions**: The ingredients are in a \"separate\" state and located \"inCabinet.\"\n   - **Effects**: The ingredients are now \"gathered,\" and they are no longer \"separate\" or \"inCabinet.\"\n\n2. **`combine-ingredients`**:\n   - **Parameters**: The `beef_hash` and the `mixing_bowl`.\n   - **Preconditions**: The beef hash is in a \"whole\" state, the mixing bowl is \"empty,\" and the ingredients are \"separate.\"\n   - **Effects**: The beef hash is now \"mixed\" in the bowl, the bowl is no longer \"empty,\" and the beef hash is no longer \"whole\" or \"separate.\"\n\n3. **`light-flavorful-toast`**:\n   - **Parameters**: The `toast` (bread to be toasted).\n   - **Preconditions**: The toast is \"plain,\" \"bland,\" and \"absent.\"\n   - **Effects**: The toast becomes \"flavorful,\" \"tasty,\" and \"present.\" It is no longer \"plain,\" \"bland,\" or \"absent.\"\n\n4. **`garnish-with-cheese`**:\n   - **Parameters**: The `velveeta` cheese and the `beef_hash` mixture.\n   - **Preconditions**: The velveeta is \"cubed\" and \"onCounter,\" and the beef hash is \"mixed.\"\n   - **Effects**: The beef hash is now \"garnished\" with the velveeta, and the velveeta is no longer \"onCounter\" or \"cubed.\"\n\n5. **`spread-mixture-on-toast`**:\n   - **Parameters**: The `mixture` and the `toast`.\n   - **Preconditions**: The mixture has been \"gathered,\" and the toast is \"flavorful\" and \"present.\"\n   - **Effects**: The mixture is now \"spread\" on the toast, and the mixture is no longer \"gathered,\" nor is the toast \"flavorful.\"\n\n### Adjustments Made:\n- The step `garnish_with_cheese` was interpreted as adding cheese to the beef hash mixture, making it relevant to the task.\n- The step `light_flavorful_toast` was clarified to describe the process of toasting bread to make it flavorful and tasty.\n- A new step `spread-mixture-on-toast` was added to reflect the description of spreading the corned beef hash mixture on toast, which was missing in the original steps.\n\nThis ensures the PDDL actions accurately capture the task's intent and state transitions.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:pull\n\n\nAction sets that need to be merged:\n(:action pull_in_sliplargerbeads\n    :parameters (?p - player ?po - potato)\n    :precondition (and (at ?p kitchen) (whole ?po) (not (tightened ?po)))\n    :effect (and (tightened ?po))\n)\n```\n\n---\n\n#### 7. **form_patties**\n```pddl\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:peek\n\n\nAction sets that need to be merged:\n(:action peek_into_papyrus\n    :parameters (?p - player ?patty - patties)\n    :precondition (and (at ?p grill) (on_grill ?patty))\n    :effect (and (checked_doneness ?patty))\n)\n```\n\n---\n\n#### 11. **cook**\n```pddl\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:choose\n\n\nAction sets that need to be merged:\n(:action choose_ingredient\n    :parameters (?ingredient - ingredient)\n    :precondition (and\n      (whole ?ingredient)\n    )\n    :effect (and\n      (chopped ?ingredient)\n      (not (whole ?ingredient))\n    )\n)\n\n;; Action 4: Add the egg yolk to the mixing bowl\n\n(:action choose_cooking_method\n    :parameters (?method - appliance)\n    :precondition (and\n      (available ?method)\n    )\n    :effect (and\n      (selected ?method)\n    )\n)\n\n;; Action 9: While burgers are cooking, prepare toppings\n\n(:action choose_burger\n    :parameters (?p - player ?patty - patties ?fridge - location)\n    :precondition (and (at ?p ?fridge) (at ?patty ?fridge) (not (inventory ?p ?patty)))\n    :effect (and (inventory ?p ?patty) (not (at ?patty ?fridge)))\n)\n\n\n(:action gather-ingredients\n    :parameters (?m - mixture)\n    :precondition (and (separate ?m) (inCabinet ?m))\n    :effect (and (gathered ?m) (not (separate ?m)) (not (inCabinet ?m)))\n)\n\n\n(:action gather_ingredients\n    :parameters (?mixture - entity)\n    :precondition (and\n      (at_location ?mixture in_cabinet)\n      (has_cleanness ?mixture clean)\n    )\n    :effect (and\n      (not (at_location ?mixture in_cabinet))\n      (at_location ?mixture on_counter)\n      (not (has_cleanness ?mixture clean))\n      (has_cleanness ?mixture dirty)\n    )\n)\n```\n\n---\n\n#### Action 2: Make Polenta Recipe\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:add\n\n\nAction sets that need to be merged:\n(:action add_ingredients\n    :parameters (?ingredient - ingredient ?bowl - container)\n    :precondition (and\n      (in ?bowl mixing_bowl)\n      (clean ?ingredient)\n    )\n    :effect (and\n      (in ?ingredient ?bowl)\n    )\n)\n\n;; Action 5: Mix all ingredients together\n\n(:action add_detail\n    :parameters (?p - player ?detail - item ?hamburger - paragraph)\n    :precondition (and (at ?p desk) (is_paragraph ?hamburger) (is_detail ?detail) (not (added_tomato ?hamburger)))\n    :effect (and (added_tomato ?hamburger) (has_detail ?hamburger ?detail))\n)\n```\n\n#### 3. Layer Cheese (Cheese Detail)\n```lisp\n\n(:action add_burger\n    :parameters (?p - player ?burger - sentence ?hamburger - paragraph)\n    :precondition (and (at ?p desk) (is_paragraph ?hamburger) (is_burger ?burger) (not (added_burger ?hamburger)))\n    :effect (and (added_burger ?hamburger) (has_main_sentence ?hamburger ?burger))\n)\n```\n\n#### 5. Add Lettuce (Connecting Detail)\n```lisp\n\n(:action add_lettuce\n    :parameters (?p - player ?lettuce - detail ?hamburger - paragraph)\n    :precondition (and (at ?p desk) (is_paragraph ?hamburger) (is_lettuce ?lettuce) (not (added_lettuce ?hamburger)))\n    :effect (and (added_lettuce ?hamburger) (has_detail ?hamburger ?lettuce))\n)\n```\n\n#### 6. Add Onions (Supporting Detail)\n```lisp\n\n(:action add_onion\n    :parameters (?p - player ?onion - item ?hamburger - paragraph)\n    :precondition (and (at ?p desk) (is_paragraph ?hamburger) (is_onion ?onion) (not (added_onion ?hamburger)))\n    :effect (and (added_onion ?hamburger) (has_detail ?hamburger ?onion))\n)\n```\n\n#### 7. Finish with Bun (Concluding Sentence)\n```lisp\n\n(:action mix_ingredients\n    :parameters (?canola_oil - entity ?blender - entity)\n    :precondition (and\n      (at_location ?canola_oil in_bottle)\n      (has_power ?blender off)\n      (has_composition ?blender isolated)\n      (has_cleanness ?blender clean)\n    )\n    :effect (and\n      (not (at_location ?canola_oil in_bottle))\n      (at_location ?canola_oil in_blender)\n      (not (has_power ?blender off))\n      (has_power ?blender on)\n      (not (has_composition ?blender isolated))\n      (has_composition ?blender mixed)\n      (not (has_cleanness ?blender clean))\n      (has_cleanness ?blender dirty)\n    )\n)\n```\n\n---\n\n#### Action 5: Serve Polenta\n```lisp\n\n(:action combine-ingredients\n    :parameters (?b - beef_hash ?bowl - mixing_bowl)\n    :precondition (and (whole ?b) (empty ?bowl) (separate ?b))\n    :effect (and (mixed ?b ?bowl) (not (whole ?b)) (not (empty ?bowl)) (not (separate ?b)))\n)\n\n\n(:action stir_ingredients\n    :parameters (?cream_cheese - entity ?mixing_bowl - entity)\n    :precondition (and\n      (at_location ?cream_cheese in_container)\n      (at_location ?mixing_bowl on_counter)\n      (has_composition ?mixing_bowl separate)\n      (has_cleanness ?mixing_bowl clean)\n    )\n    :effect (and\n      (not (at_location ?cream_cheese in_container))\n      (at_location ?cream_cheese in_mixing_bowl)\n      (not (has_composition ?mixing_bowl separate))\n      (has_composition ?mixing_bowl mixed)\n      (not (has_cleanness ?mixing_bowl clean))\n      (has_cleanness ?mixing_bowl dirty)\n    )\n)\n```\n\n---\n\n#### Action 4: Mix Ingredients\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:write\n\n\nAction sets that need to be merged:\n(:action write_topic_sentence\n    :parameters (?p - player ?hamburger - paragraph)\n    :precondition (and (at ?p desk) (is_paragraph ?hamburger) (not (has_topic_sentence ?hamburger)))\n    :effect (and (has_topic_sentence ?hamburger) (written ?hamburger))\n)\n```\n\n#### 2. Add Detail (Tomato)\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:analyze\n\n\nAction sets that need to be merged:\n(:action analyze_finished_paragraph\n    :parameters (?p - player ?hamburger - paragraph ?track - document)\n    :precondition (and (at ?p desk) (is_paragraph ?hamburger) (written ?hamburger) (has_conclusion ?hamburger ?bun))\n    :effect (and (analyzed ?hamburger) (reviewed ?track))\n)\n```\n\n#### 9. Listen to All Family Members (Review Feedback)\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:listen\n\n\nAction sets that need to be merged:\n(:action listen_to_all_family_members\n    :parameters (?p - player ?family - group)\n    :precondition (and (at ?p desk) (is_family ?family) (analyzed ?hamburger))\n    :effect (and (feedback_collected ?hamburger ?family))\n)\n```\n\n---\n\n### Task Logic and State Transitions:\n1. **Entity State Transitions**:\n   - **Hamburger (Paragraph)**: Gains attributes like `has_topic_sentence`, `has_detail`, `has_conclusion`, and `analyzed` as the steps progress.\n   - **Details (Tomato, Cheese, Lettuce, Onion)**: Each detail is added to the paragraph, changing its state to reflect inclusion.\n   - **Player (NPC)**: Interacts with the paragraph and its components, progressing through the task.\n\n2. **State Focus**:\n   - The task focuses on the **completion state** of the hamburger paragraph (`written`, `analyzed`, `feedback_collected`) and the **inclusion of details** (`has_detail`, `has_conclusion`).\n\n3. **Irrelevant Steps**:\n   - Steps like `add_spear` and `add-lemon water` were excluded as they are unrelated to the task description.\n\nThis PDDL representation captures the logical flow of writing a hamburger paragraph while adhering to the format and structure of the example.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:light\n\n\nAction sets that need to be merged:\n(:action light-flavorful-toast\n    :parameters (?t - toast)\n    :precondition (and (plain ?t) (bland ?t) (absent ?t))\n    :effect (and (flavorful ?t) (tasty ?t) (present ?t) (not (plain ?t)) (not (bland ?t)) (not (absent ?t)))\n)\n\n\n(:action defrost-mixture\n    :parameters (?p - player ?m - mixture)\n    :precondition (and (at ?p kitchen) (temperature ?m cold))\n    :effect (and (temperature ?m warm) (not (temperature ?m cold)))\n)\n```\n\n#### 2. Prepare Bread\n```lisp\n\n(:action warm_vegetable_oil\n    :parameters (?pan - tool ?stove - appliance ?loc - location)\n    :precondition (and\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n      (clean ?pan)\n    )\n    :effect (and\n      (heated ?pan)\n      (not (clean ?pan))\n    )\n)\n```\n\n---\n\n#### Action 2: Smash Meat in Pan\n```pddl\n\n(:action smash_meat\n    :parameters (?meat - ingredient ?pan - tool)\n    :precondition (and\n      (at ?meat on_counter)\n      (clean ?pan)\n      (heated ?pan)\n    )\n    :effect (and\n      (flattened ?meat)\n      (in-pan ?meat ?pan)\n      (not (at ?meat on_counter))\n    )\n)\n```\n\n---\n\n#### Action 3: Season Burgers\n```pddl\n\n(:action flatten_patties\n    :parameters (?patties - ingredient ?container - tool)\n    :precondition (and\n      (at ?patties on_counter)\n      (clean ?container)\n    )\n    :effect (and\n      (flattened ?patties)\n      (in-container ?patties ?container)\n      (not (at ?patties on_counter))\n    )\n)\n```\n\n---\n\n#### Action 6: Cook Patties\n```pddl\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:free\n\n\nAction sets that need to be merged:\n(:action free_patties\n    :parameters (?p - player ?patty - patties ?grill - grill)\n    :precondition (and (inventory ?p ?patty) (on ?grill) (hot ?grill) (not (cooked ?patty)))\n    :effect (and (at ?patty ?grill) (not (inventory ?p ?patty)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:remove\n\n\nAction sets that need to be merged:\n(:action remove_burger\n    :parameters (?p - player ?patty - patties ?grill - grill)\n    :precondition (and (at ?p ?grill) (at ?patty ?grill) (cooked ?patty))\n    :effect (and (inventory ?p ?patty) (not (at ?patty ?grill)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:eat\n\n\nAction sets that need to be merged:\n(:action eat_burger\n    :parameters (?p - player ?patty - patties)\n    :precondition (and (inventory ?p ?patty) (cooked ?patty) (hot ?patty))\n    :effect (and (not (inventory ?p ?patty)) (eaten ?patty))\n)\n```\n\n---\n\n### Explanation of Actions\n\n1. **`choose_burger`**: This action allows the player to select frozen burger patties from the fridge. The state of the patties changes from being located in the fridge to being in the player's inventory.\n\n2. **`prepare_grill`**: This action involves preheating the grill by turning it on. The grill transitions from being off and cold to being on and hot.\n\n3. **`free_patties`**: The player places the frozen patties on the preheated grill. The patties' location changes from the player's inventory to the grill.\n\n4. **`cook`**: The patties are cooked on the grill. Their state transitions from uncooked to cooked, and their temperature changes to hot.\n\n5. **`remove_burger`**: After cooking, the player removes the patties from the grill. The patties' location changes from the grill to the player's inventory.\n\n6. **`eat_burger`**: The player eats the cooked burger patties. The patties' state changes to \"eaten,\" and they are removed from the player's inventory.\n\n---\n\n### Key Entity State Transitions\n- **Patties**: Transition through states such as `uncooked`, `cooked`, `hot`, and `eaten`.\n- **Grill**: Transition from `off` to `on` and `cold` to `hot`.\n- **Player Inventory**: Tracks the movement of patties from the fridge to the grill and back to the player.\n\nThis set of actions accurately represents the steps and logic required to grill a burger on a Foreman grill using PDDL.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:serve\n\n\nAction sets that need to be merged:\n(:action serve_polenta\n    :parameters (?polenta - entity ?mixing_bowl - entity)\n    :precondition (and\n      (at_location ?polenta in_mixing_bowl)\n      (has_temperature ?polenta hot)\n      (has_composition ?mixing_bowl mixed)\n    )\n    :effect (and\n      (not (at_location ?polenta in_mixing_bowl))\n      (at_location ?polenta in_bowl)\n      (has_temperature ?polenta hot)\n      (not (has_composition ?mixing_bowl mixed))\n      (has_composition ?mixing_bowl empty)\n    )\n)\n```\n\n---\n\n### Explanation of Actions\n1. **Gather Ingredients**: This action involves moving the mixture (ingredients) from the cabinet to the counter, tracking its location and cleanliness as it transitions.\n2. **Make Polenta Recipe**: Represents the process of starting the recipe and mixing the ingredients into a hot mixture.\n3. **Stir Ingredients**: Focuses on adding cream cheese to the mixing bowl and stirring it, transitioning the bowl's composition from separate to mixed.\n4. **Mix Ingredients**: Involves adding canola oil to the blender and turning it on, transitioning the blender's state from isolated to mixed and clean to dirty.\n5. **Serve Polenta**: The final step of serving the polenta from the mixing bowl into a serving bowl while ensuring it is hot and ready.\n\nEach action reflects the entity state transitions described in the task and ensures logical consistency with the provided steps and descriptions.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:layer\n\n\nAction sets that need to be merged:\n(:action layer_cheese\n    :parameters (?p - player ?cheese - item ?bowl - container ?hamburger - paragraph)\n    :precondition (and (at ?p desk) (is_paragraph ?hamburger) (is_cheese ?cheese) (in ?cheese ?bowl) (not (added_cheese ?hamburger)))\n    :effect (and (added_cheese ?hamburger) (has_detail ?hamburger ?cheese))\n)\n```\n\n#### 4. Add Burger (Main Sentence)\n```lisp\n\nThe actions after the merger are:"
]