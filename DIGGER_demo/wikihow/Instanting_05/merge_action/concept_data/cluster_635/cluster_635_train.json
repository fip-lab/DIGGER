{
    "choose": [
        "(:action choose_chuck_steak\n    :parameters (?p - player ?s - steak)\n    :precondition (and (available ?s) (not (chosen ?s)))\n    :effect (and (chosen ?s) (not (available ?s)))\n)\n```\n\n#### Action: store_chuck_steak\n```pddl\n"
    ],
    "store": [
        "(:action store_chuck_steak\n    :parameters (?p - player ?s - steak ?l - location)\n    :precondition (and (chosen ?s) (not (stored ?s)) (at ?p ?l))\n    :effect (and (stored ?s) (location ?s ?l))\n)\n```\n\n#### Action: cooking\n```pddl\n"
    ],
    "cut": [
        "(:action cut_into_thickest_piece\n    :parameters (?steak - ingredient ?knife - utensil)\n    :precondition (and\n      (at ?steak kitchen_counter)\n      (at ?knife kitchen_counter)\n      (clean ?knife)\n    )\n    :effect (and\n      (cut ?steak)\n      (not (clean ?knife))\n    )\n  )\n\n  ;; Action 2: Check the doneness of your steak using the finger test\n  "
    ],
    "check": [
        "(:action check_doneness\n    :parameters (?steak - ingredient)\n    :precondition (and\n      (cut ?steak)\n      (at ?steak kitchen_counter)\n    )\n    :effect (and\n      (checked_doneness ?steak)\n    )\n  )\n\n  ;; Action 3: Compare the firmness of the steak to various parts of your face to estimate doneness\n  ",
        "(:action check_meat\n    :parameters (?steak - ingredient)\n    :precondition (and\n      (checked_doneness ?steak)\n      (at ?steak kitchen_counter)\n    )\n    :effect (and\n      (checked_meat ?steak)\n    )\n  )\n\n  ;; Action 4: Make a signal to indicate the steak's doneness\n  "
    ],
    "make": [
        "(:action make_signal\n    :parameters (?npc - npc)\n    :precondition (and\n      (checked_meat ?steak)\n    )\n    :effect (and\n      (signal_made ?npc)\n    )\n  )\n)\n```\n\nIn this PDDL domain description:\n- Each action is described with its parameters, preconditions, and effects.\n- The actions reflect the steps of the task to determine if a steak is done.\n- The state changes of the steak and the npc are captured in the preconditions and effects of each action.\n- The `cut_into_thickest_piece` action requires a knife and results in the steak being cut and the knife becoming dirty.\n- The `check_doneness` action involves checking the doneness of the cut steak.\n- The `check_meat` action involves comparing the firmness of the steak to estimate doneness.\n- The `make_signal` action involves making a signal to indicate the steak's doneness after checking the meat.",
        "(:action make_grilling_marinade\n  :parameters (?npc - npc ?stove_knob - stove_knob ?velveeta - velveeta)\n  :precondition (and (at ?npc stove) (at ?velveeta stove) (turned_off ?stove_knob))\n  :effect (and (marinated ?velveeta) (turned_on ?stove_knob) (not (turned_off ?stove_knob)))\n)\n\n",
        "(:action make_dry_rub\n  :parameters (?npc - npc ?alice - alice)\n  :precondition (and (at ?npc kitchen) (unselected ?alice))\n  :effect (and (dry_rub_prepared ?alice) (selected ?alice) (not (unselected ?alice)))\n)\n\n",
        "(:action make_herbed_ingredients\n  :parameters (?npc - npc ?stove_knob - stove_knob ?velveeta - velveeta)\n  :precondition (and (at ?npc stove) (at ?velveeta stove) (turned_off ?stove_knob))\n  :effect (and (herbed ?velveeta) (turned_on ?stove_knob) (not (turned_off ?stove_knob)))\n)\n\n",
        "(:action cook-steak\n    :parameters (?s - steak)\n    :precondition (and (seasoned ?s) (uncooked ?s))\n    :effect (and (cooked ?s) (not (uncooked ?s)) (hot ?s) (not (cold ?s)))\n)\n```\n\n### Explanation of Actions\n\n1. **place-ingredients**\n    - **Parameters**: `?e` (entity representing ingredients), `?b` (bowl)\n    - **Preconditions**: Ingredients are separate, and the bowl is empty.\n    - **Effects**: Ingredients are placed in the bowl, they are no longer separate, and the bowl is no longer empty.\n\n2. **combine-mix**\n    - **Parameters**: `?b` (bowl)\n    - **Preconditions**: Ingredients are in the bowl and the bowl is not yet mixed.\n    - **Effects**: The contents of the bowl are mixed, and the ingredients are no longer just in the bowl (they are mixed).\n\n3. **sprinkle-rub**\n    - **Parameters**: `?e` (entity representing the rub), `?s` (steak)\n    - **Preconditions**: The rub is mixed, and the steak is uncooked.\n    - **Effects**: The steak is seasoned with the rub and is no longer plain.\n\n4. **cook-steak**\n    - **Parameters**: `?s` (steak)\n    - **Preconditions**: The steak is seasoned and uncooked.\n    - **Effects**: The steak is cooked, hot, and no longer uncooked or cold.\n\nThese actions accurately reflect the state changes of the entities involved in the task of making steak rub and cooking the steak.",
        "(:action cook_steak\n    :parameters (?steak - entity ?grill - entity)\n    :precondition (and\n      (has_flavor ?steak spiced_chili)\n      (at_location ?steak in_marinade)\n      (has_temperature ?grill off)\n    )\n    :effect (and\n      (not (has_temperature ?grill off))\n      (has_temperature ?grill on)\n      (not (at_location ?steak in_marinade))\n      (at_location ?steak on_grill)\n      (has_cooked ?steak grilled)\n    )\n)\n\n; Action for Step 4\n"
    ],
    "use": [
        "(:action use-dry-rub\n    :parameters (?s - steak ?r - rub)\n    :precondition (and (raw ?s) (room_temperature ?s) (available ?r))\n    :effect (and (seasoned ?s) (not (plain ?s)))\n)\n\n"
    ],
    "place": [
        "(:action slather-with-ingredients\n    :parameters (?s - steak ?b - butter)\n    :precondition (and (cooked ?s) (available ?b))\n    :effect (and (rich_flavor ?s) (not (plain ?s)))\n)\n\n",
        "(:action rub_with_ingredients\n    :parameters (?p - player ?s - steak)\n    :precondition (and (inventory ?p ?s) (not (seasoned ?s)))\n    :effect (seasoned ?s)\n)\n\n",
        "(:action rub-ingredients-with-spice\n    :parameters (?s - spice ?m - mixture)\n    :precondition (and (form ?s whole) (form ?m separate))\n    :effect (and (form ?s chopped) (form ?m mixed) (not (form ?s whole)) (not (form ?m separate)))\n)\n\n",
        "(:action place_in_bowl\n    :parameters (?p - player ?s - steak ?b - bowl)\n    :precondition (and (inventory ?p ?s) (not (in_bowl ?s)) (empty ?b))\n    :effect (and (in_bowl ?s) (not (empty ?b)))\n)\n\n",
        "(:action place_in_fridge\n    :parameters (?p - player ?b - bowl ?f - fridge)\n    :precondition (and (covered ?b) (not (in_fridge ?b)))\n    :effect (and (in_fridge ?b))\n)\n```\n\n### Explanation of Actions\n\n1. **rub_with_ingredients**: This action represents rubbing herbs and spices into the steak. The precondition checks that the player has the steak and it is not already seasoned. The effect is that the steak becomes seasoned.\n\n2. **submerge_in_flavorful_lemon**: This action involves submerging the steak in a flavored liquid. The preconditions ensure the player has both the steak and the liquid, and the steak is not yet submerged. The effect is that the steak becomes submerged and flavored.\n\n3. **place_in_bowl**: This action places the kangaroo steak in a bowl. The precondition requires the player to have the steak and the bowl to be empty. The effect is that the steak is now in the bowl, and the bowl is no longer empty.\n\n4. **cover_with_plastic_wrap**: This action covers the bowl with plastic wrap. The precondition checks that the steak is in the bowl and the player has the wrap. The effect is that the bowl becomes covered, and the wrap is no longer in the player's inventory.\n\n5. **place_in_fridge**: This action places the covered bowl in the fridge. The precondition ensures that the bowl is covered and not already in the fridge. The effect is that the bowl is now in the fridge, allowing the steak to marinate.\n\nThese actions capture the essential steps and state changes involved in preparing the kangaroo steak according to the described task.",
        "(:action place-ingredients\n    :parameters (?e - entity ?b - bowl)\n    :precondition (and (separate ?e) (empty ?b))\n    :effect (and (inBowl ?e ?b) (not (separate ?e)) (not (empty ?b)))\n)\n\n",
        "(:action cover_with_plastic_wrap\n    :parameters (?p - player ?b - bowl ?w - wrap)\n    :precondition (and (in_bowl ?b) (inventory ?p ?w) (not (covered ?b)))\n    :effect (and (covered ?b) (not (inventory ?p ?w)))\n)\n\n",
        "(:action sprinkle-rub\n    :parameters (?e - entity ?s - steak)\n    :precondition (and (mixed ?e) (uncooked ?s))\n    :effect (and (seasoned ?s) (not (plain ?s)))\n)\n\n",
        "(:action soak-sirloin\n    :parameters (?s - sirloin ?n - npc)\n    :precondition (and (cooked-or-not ?s uncooked) (moisture ?s less-wet))\n    :effect (and (moisture ?s more-wet) (not (moisture ?s less-wet)))\n)\n\n"
    ],
    "add": [
        "(:action add-cheese\n    :parameters (?b - beef ?s - steak)\n    :precondition (and (form ?b whole) (form ?s whole))\n    :effect (and (form ?b chopped) (form ?s diced) (not (form ?b whole)) (not (form ?s whole)))\n)\n```\n\n### Action Descriptions:\n\n1. **rub-ingredients-with-spice**:\n   - **Parameters**: `?s` (spice), `?m` (mixture)\n   - **Preconditions**: Spice is in whole form, mixture is separate.\n   - **Effects**: Spice is chopped, mixture is mixed.\n\n2. **soak-sirloin**:\n   - **Parameters**: `?s` (sirloin), `?n` (npc)\n   - **Preconditions**: Sirloin is uncooked and less wet.\n   - **Effects**: Sirloin becomes more wet.\n\n3. **brush-ingredients**:\n   - **Parameters**: `?s` (sirloin_cooked)\n   - **Preconditions**: Sirloin is in the fridge and has a mild taste.\n   - **Effects**: Sirloin is moved to a bowl and becomes spicy.\n\n4. **add-cheese**:\n   - **Parameters**: `?b` (beef), `?s` (steak)\n   - **Preconditions**: Beef and steak are in whole form.\n   - **Effects**: Beef is chopped, steak is diced.\n\nThese actions capture the essence of the task and reflect the changes in the state of the entities involved.",
        "(:action mix_flavor\n    :parameters (?garlic - entity ?herbs - entity ?mixing_bowl - entity)\n    :precondition (and\n      (at_location ?garlic in_pantry)\n      (at_location ?herbs in_pantry)\n      (has_cleanliness ?mixing_bowl clean)\n      (has_volume ?mixing_bowl empty)\n    )\n    :effect (and\n      (not (at_location ?garlic in_pantry))\n      (at_location ?garlic in_mixing_bowl)\n      (not (at_location ?herbs in_pantry))\n      (at_location ?herbs in_mixing_bowl)\n      (not (has_volume ?mixing_bowl empty))\n      (has_volume ?mixing_bowl mixed)\n      (not (has_cleanliness ?mixing_bowl clean))\n      (has_cleanliness ?mixing_bowl dirty)\n    )\n)\n\n; Action for Step 3\n",
        "(:action combine-mix\n    :parameters (?b - bowl)\n    :precondition (and (inBowl ?e ?b) (not (mixed ?b)))\n    :effect (and (mixed ?b) (not (inBowl ?e ?b)))\n)\n\n"
    ],
    "submerge": [
        "(:action submerge_in_flavorful_lemon\n    :parameters (?p - player ?s - steak ?l - liquid)\n    :precondition (and (inventory ?p ?s) (inventory ?p ?l) (not (submerged ?s)))\n    :effect (and (submerged ?s) (flavored ?s))\n)\n\n"
    ],
    "serve": [
        "(:action serve_steak_with_vegetables\n    :parameters (?steak - entity ?vegetables - entity)\n    :precondition (and\n      (has_cooked ?steak grilled)\n      (at_location ?steak on_grill)\n      (at_location ?vegetables in_pantry)\n    )\n    :effect (and\n      (not (at_location ?steak on_grill))\n      (at_location ?steak on_plate)\n      (not (at_location ?vegetables in_pantry))\n      (at_location ?vegetables on_plate)\n      (has_served ?steak true)\n    )\n)\n\n; Action for Step 5\n",
        "(:action serve_steak_with_chimichurri\n    :parameters (?steak - entity ?chimichurri - entity)\n    :precondition (and\n      (has_cooked ?steak grilled)\n      (at_location ?steak on_grill)\n      (at_location ?chimichurri in_pantry)\n    )\n    :effect (and\n      (not (at_location ?steak on_grill))\n      (at_location ?steak on_plate)\n      (not (at_location ?chimichurri in_pantry))\n      (at_location ?chimichurri on_plate)\n      (has_served ?steak true)\n    )\n)\n```\n\nIn these actions:\n- The `marinate_steak` action involves marinating the steak with a spiced chili marinade.\n- The `mix_flavor` action involves mixing garlic and herbs in a mixing bowl.\n- The `cook_steak` action involves cooking the marinated steak on a grill.\n- The `serve_steak_with_vegetables` action involves serving the grilled steak with vegetables.\n- The `serve_steak_with_chimichurri` action involves serving the grilled steak with chimichurri.\n\nEach action captures the relevant state changes for the entities involved, ensuring that the preconditions and effects accurately reflect the steps described in the task."
    ],
    "brush": [
        "(:action brush-ingredients\n    :parameters (?s - sirloin_cooked)\n    :precondition (and (location ?s in_fridge) (taste ?s mild))\n    :effect (and (location ?s in_bowl) (taste ?s spicy) (not (location ?s in_fridge)) (not (taste ?s mild)))\n)\n\n"
    ],
    "cooking": [
        "(:action cooking\n    :parameters (?p - player ?s - steak ?st - stove)\n    :precondition (and (stored ?s) (at ?p ?st) (power ?st on) (temperature ?st hot))\n    :effect (and (cooked ?s) (temperature ?s hot) (location ?s ?st) (not (stored ?s)))\n)\n```\n\n### Explanation of State Transitions\n\n- **choose_chuck_steak**: This action involves selecting the chuck steak. The precondition checks if the steak is available and not already chosen. The effect marks the steak as chosen and not available.\n\n- **store_chuck_steak**: This action involves storing the chosen chuck steak in a specific location (e.g., fridge). The precondition checks if the steak is chosen and not stored, and the player is at the specified location. The effect marks the steak as stored and updates its location.\n\n- **cooking**: This action involves cooking the stored chuck steak on a hot stove. The precondition checks if the steak is stored, the player is at the stove, and the stove is powered on and hot. The effect marks the steak as cooked, updates its temperature to hot, and changes its location to the stove.\n\nThese actions accurately reflect the state changes of the entities involved in the task of cooking chuck steak."
    ],
    "chopped": [
        "(:action chopped_asparagus\n  :parameters (?npc - npc ?steak - steak)\n  :precondition (and (at ?npc kitchen) (whole ?steak))\n  :effect (and (chopped ?steak) (not (whole ?steak)))\n)\n\n"
    ],
    "marinate": [
        "(:action marinate_steak\n    :parameters (?steak - entity ?marinade - entity)\n    :precondition (and\n      (has_flavor ?steak plain)\n      (has_openness ?marinade closed)\n      (at_location ?marinade in_pantry)\n    )\n    :effect (and\n      (not (has_flavor ?steak plain))\n      (has_flavor ?steak spiced_chili)\n      (not (has_openness ?marinade closed))\n      (has_openness ?marinade open)\n      (not (at_location ?marinade in_pantry))\n      (at_location ?marinade on_steak)\n    )\n)\n\n; Action for Step 2\n"
    ]
}