{
    "place": [
        "(:action wipe_glass_with_rubbing_alcohol ; clean the glass candleholder\n    :parameters (?g - glass_filled)\n    :precondition (and (not (clean ?g)) (dry ?g))\n    :effect (and (clean ?g) (wet ?g))\n)\n\n",
        "(:action wipe_mixture_with_paper ; wipe the jars using a paper towel\n    :parameters (?t - towel ?c - container1)\n    :precondition (and (cleanness ?t clean) (location ?c on_table))\n    :effect (and (cleanness ?t dirty) (cleanness ?c clean))\n)\n\n",
        "(:action wrap_lace ; wrap lace around the candleholder\n    :parameters (?npc - npc ?g - glass_filled)\n    :precondition (and (clean ?g) (not (decorated ?g)))\n    :effect (and (decorated ?g) (camouflaged ?npc))\n)\n\n",
        "(:action wrap_wick_with_ink ; insert wick into holder and wrap\n    :parameters (?wick - material ?pencil - tool)\n    :precondition (and (cut ?wick) (on counter ?pencil))\n    :effect (and (wrapped ?wick) (in hand ?pencil))\n)\n\n",
        "(:action coat_candle_with_painting ; apply paint to the candleholder\n    :parameters (?npc - npc ?g - glass_filled)\n    :precondition (and (decorated ?g) (selected ?a) (not (camouflaged ?npc)))\n    :effect (and (camouflaged ?npc) (invisible ?npc))\n)\n\n",
        "(:action wash_jar\n  :parameters (?u - user ?j - jar)\n  :precondition (and (not (contains ?j ?c)) (location ?j outside_refrigerator))\n  :effect (and (cleanness ?j clean))\n)\n```\n\n### Explanation:\n\n1. **freeze_candle_holder**: This action represents placing the jar with the candle in the freezer overnight. The preconditions ensure the jar contains the candle and is initially outside the refrigerator at a warm temperature. The effect is that the jar becomes cold and is located inside the refrigerator.\n\n2. **remove_candle_holder_from_freezer**: This action involves taking the jar out of the freezer. The preconditions check that the jar is inside the refrigerator and cold. The effect is that the jar is now outside the refrigerator and returns to room temperature.\n\n3. **pop_wax**: This action uses a knife to pop the wax out of the jar. The preconditions ensure the jar contains the candle, is at room temperature, and the candle is wicked. The effect is that the candle is removed from the jar, and the candle becomes wickless.\n\n4. **wash_jar**: This action washes the jar to complete the cleaning process. The precondition is that the jar no longer contains the candle and is outside the refrigerator. The effect is that the jar is clean.\n\nThese actions capture the state changes of the jar and candle throughout the cleaning process.",
        "(:action wash_pot ; wash the pot with mild dish soap and water\n    :parameters (?pot - pot)\n    :precondition (and (orientation ?wick removed) (at ?pot ?sink))\n    :effect (and (cleanness ?pot clean))\n)\n```\n\n### Explanation of PDDL Actions:\n\n1. **heat_pot**: This action heats the pot on the stove, changing the temperature of both the stove and the pot from cool to hot.\n\n2. **boil_water**: This action boils water in a container, changing the water's temperature from cold to hot and making the container fuller.\n\n3. **add_water**: This action adds the hot water to the pot, ensuring the pot remains hot.\n\n4. **scrape_wicks**: This action involves scraping the remaining wax from the pot, changing the orientation of the wick from on the pot to removed.\n\n5. **wash_pot**: This final action washes the pot, changing its cleanness state to clean.\n\nThese actions capture the logical sequence of cleaning a wax pot, focusing on the state transitions of the stove, water, pot, and wick as described in the task and entity state information.",
        "(:action plug_in_hot_glue_gun\n    :parameters (?u - user ?ht - hot_tool)\n    :precondition (and (in_hand ?ht) (not (plugged_in ?ht)))\n    :effect (and (plugged_in ?ht) (hot ?ht))\n)\n\n",
        "(:action plug_candle_wicks_into_socket\n    :parameters (?w - wick)\n    :precondition (and (not (plugged_in ?w)) (available ?w))\n    :effect (plugged_in ?w)\n)\n\n",
        "(:action place_dab_of_hot_glue\n    :parameters (?u - user ?hg - hot_gems ?c - cup)\n    :precondition (and (acquired ?hg) (center_of_cup ?c))\n    :effect (and (glue_applied ?c))\n)\n\n",
        "(:action place_wax_in_container\n    :parameters (?w - wax ?c - container)\n    :precondition (and (on_roll ?w) (empty ?c))\n    :effect (and (covering_tray ?w) (fuller ?c))\n)\n\n",
        "(:action place_wicks_in_hole\n    :parameters (?w - wick ?o - orange)\n    :precondition (and (peeled ?o) (located ?w))\n    :effect (placed ?w ?o)\n)\n\n",
        "(:action place_saucepan_on_stove\n    :parameters (?npc - player ?saucepan - item ?stove - location)\n    :precondition (and (inventory ?npc ?saucepan) (at ?npc ?stove))\n    :effect (and (at ?saucepan ?stove) (not (inventory ?npc ?saucepan)))\n)\n\n",
        "(:action place_full_candle_holders\n    :parameters (?npc - player ?holder - item ?location - location)\n    :precondition (and (filled ?holder) (at ?npc ?location))\n    :effect (and (at ?holder ?location) (not (inventory ?npc ?holder)))\n)\n```\n\n### Explanation:\n- **collect_candle**: The NPC collects a candle from a location.\n- **purchase_supplies**: The NPC purchases necessary supplies from the store.\n- **find_saucepan**: The NPC finds a saucepan.\n- **place_saucepan_on_stove**: The NPC places the saucepan on the stove.\n- **prepare_candle_holders**: The user prepares candle holders by inserting wicks.\n- **check_wax**: The NPC checks and stirs the wax on the stove until it's melted.\n- **pour_wax_into_pan**: The NPC pours wax from the saucepan into another pan through a mesh strainer.\n- **pour_wax_into_holders**: The NPC pours the wax from the pan into prepared candle holders.\n- **place_full_candle_holders**: The NPC places the full candle holders in a designated location to harden.\n\nEach action captures the relevant state changes, such as moving items to different locations, changing inventory status, and updating the status of candle holders and wax.",
        "(:action place_candle_in_oven ; place the candle jars upside down on the baking sheet\n    :parameters (?c - candle_mixture ?b - mixing_bowl)\n    :precondition (and (oven_preheated) (covered ?b ?t) (location ?c in_cabinet))\n    :effect (and (location ?c on_baking_sheet))\n)\n\n",
        "(:action place_candle_in_jar\n    :parameters (?u - user ?c - candle ?j - jar)\n    :precondition (and (available ?c) (not (in_jar ?c)))\n    :effect (and (in_jar ?c) (candle_in_jar ?j ?c))\n)\n\n",
        "(:action place_wick_in_empty_jar\n    :parameters (?w - wick ?j - jar)\n    :precondition (and (dry ?w) (empty ?j))\n    :effect (and (wick_in_jar ?j ?w) (not (empty ?j)))\n)\n\n",
        "(:action place_safe_area\n    :parameters (?n - npc ?b - basement)\n    :precondition (not (in_safe_area ?n))\n    :effect (in_safe_area ?n)\n)\n\n",
        "(:action place_measuring_cup_into_pan\n    :parameters (?m - measuring_cup ?p - pot ?w - water)\n    :precondition (and (in ?m ?p) (cold ?w) (in ?w ?p))\n    :effect (and (in ?m ?p) (hot ?w) (melting ?m))\n)\n\n",
        "(:action place_wicks_in_shot_glass\n    :parameters (?w - wick ?g - glass)\n    :precondition (and (not (in ?w ?g)) (dry ?w))\n    :effect (and (in ?w ?g) (centered ?w ?g))\n)\n\n",
        "(:action place_candle_on_table\n    :parameters (?candle - entity ?table - entity)\n    :precondition (and\n      (at-location ?candle not-on-table)\n      (at-cleanness ?table clear)\n    )\n    :effect (and\n      (at-location ?candle on-table)\n      (at-cleanness ?table cluttered)\n    )\n)\n\n",
        "(:action place_bowl_in_saupan\n    :parameters (?bowl - entity)\n    :precondition (and\n      (at-location ?bowl on-countertop)\n      (at-temperature ?bowl warm)\n    )\n    :effect (and\n      (at-location ?bowl in-saucepan)\n      (at-temperature ?bowl cooler)\n    )\n)\n\n",
        "(:action place_hand_near_flame\n    :parameters (?n - npc ?c - candle)\n    :precondition (and (lit ?c) (hand_away ?n))\n    :effect (and (hand_near_flame ?n) (not (hand_away ?n)))\n)\n\n;; Action to grab and release the wick\n",
        "(:action pour_wax\n    :parameters (?npc - person ?w - wax ?c - cup)\n    :precondition (and (covering_tray ?w) (clean ?c))\n    :effect (and (wax_poured ?c) (not (covering_tray ?w)))\n)\n\n",
        "(:action pour_wax_into_pan ; pour wax into a pan or mold\n    :parameters (?v - velveeta ?p - pan)\n    :precondition (and (wax_melted ?v) (not (wax_poured ?p)))\n    :effect (and (wax_poured ?p))\n)\n\n",
        "(:action pour_wax_into_holders\n    :parameters (?npc - player ?pan - item ?holder - item)\n    :precondition (and (at ?npc ?pan) (prepared ?holder) (poured ?pan))\n    :effect (and (filled ?holder) (not (poured ?pan)))\n)\n\n",
        "(:action pour_wax_into_container\n    :parameters (?w - wax ?c - container)\n    :precondition (and (scented ?w) (empty ?c))\n    :effect (and (full ?c) (not (empty ?c)))\n)\n\n;; Burn the candle\n",
        "(:action pour_wand ; pour the liquid wax into the mold\n    :parameters (?w - wick1 ?m - mold)\n    :precondition (and (wax_melted ?w) (wicked ?m) (not (wax_poured ?m)))\n    :effect (and (wax_poured ?m))\n)\n\n",
        "(:action pour_wax_into_mixture ; pour wax into mold\n    :parameters (?wick - material ?container - container)\n    :precondition (and (fragrant wax) (wrapped ?wick) (not (filled ?container)))\n    :effect (and (filled ?container))\n)\n\n",
        "(:action pour_candle\n    :parameters (?w - wick ?c - candle)\n    :precondition (and (composition ?w dry) (volume ?c empty))\n    :effect (and \n        (composition ?w wet)\n        (volume ?c full)\n        (not (composition ?w dry))\n        (not (volume ?c empty))\n    )\n)\n```\n\n### Explanation\n\n1. **gather_supplies**: This action reflects the gathering of supplies and organizing them. The precondition checks if the supplies are disorganized and around the house, and the effect changes their location to in the waste basket and organizes them.\n\n2. **melt_shortening**: This action involves melting the shortening (velveeta). The precondition ensures it's solid and cold, and the effect changes its state to liquid and hot, while also updating its location to the sauce pan.\n\n3. **add_color_and_scent**: This action adds color and scent, represented by Alice's attributes. The precondition checks if Alice's step is unselected and nameless, and the effect updates it to selected and named.\n\n4. **pour_candle**: This action prepares the wick and pours the candle. The precondition checks if the wick is dry and the candle is empty, and the effect updates the wick to wet and fills the candle.\n\nEach action captures the necessary state transitions as described in the entity attributes.",
        "(:action pour_wicks_into_machine\n    :parameters (?w - wick)\n    :precondition (wick_in_jar ?j ?w)\n    :effect (and (not (wick_in_jar ?j ?w)) (in_machine ?w))\n)\n\n",
        "(:action pour_wax_into_shot_glass\n    :parameters (?m - measuring_cup ?g - glass)\n    :precondition (and (melting ?m) (in ?m ?g))\n    :effect (and (filled ?g) (not (melting ?m)))\n)\n\n",
        "(:action trim_wick\n    :parameters (?w - wick)\n    :precondition (and (wax_dried ?w) (not (trimmed ?w)))\n    :effect (and (trimmed ?w))\n)\n```\n\n### Explanation:\n\n- **get_teepee**: This action involves making the NPC invisible, which seems to be a placeholder or incorrect step, so it's adjusted to reflect a state change.\n- **buy_wicks**: Reflects the purchase of wicks from the store, changing their state from \"on sale\" to \"purchased.\"\n- **clean_cup**: Cleans the cup, changing its state from \"dirty\" to \"clean.\"\n- **plug_in_hot_glue_gun**: Represents plugging in the hot glue gun, changing its state to \"plugged in\" and \"hot.\"\n- **secure_wick**: Secures the wick, ensuring it is ready for further steps.\n- **place_dab_of_hot_glue**: Applies hot glue to the cup's center, preparing it for the wick.\n- **cut_wick**: Cuts the wick to the appropriate size.\n- **place_wax_in_container**: Places wax in a container, changing its state to \"covering tray.\"\n- **add_scenting_sauce**: Adds scent to the wax, enhancing the candle.\n- **pour_wax**: Pours the wax into the cup, completing the main part of the candle.\n- **straighten_wick**: Straightens the wick after pouring wax.\n- **clean_glass**: Cleans the glass while it is still hot.\n- **wait_for_wicks**: Waits for the wax to dry.\n- **trim_wick**: Trims the wick to the final size.\n\nThese actions and their state changes capture the essence of making a candle in a cup, aligning with the task description.",
        "(:action set_wick\n    :parameters (?w - wick ?g - glass)\n    :precondition (and (in ?w ?g) (not (centered ?w ?g)))\n    :effect (and (centered ?w ?g) (set ?w))\n)\n\n",
        "(:action set_double_boiled_with_heat ; set the double boiler over medium heat\n    :parameters (?user - agent ?stove - appliance ?heat - state)\n    :precondition (and (off ?stove) (cool ?stove) (not (on ?heat)))\n    :effect (and (on ?stove) (hot ?stove) (on ?heat))\n)\n\n",
        "(:action set_burner_add_wicks ; watch pot and add wicks\n    :parameters (?npc - agent)\n    :precondition (and (melted wax) (not (added wicks)))\n    :effect (and (added wicks))\n)\n\n",
        "(:action set_wicks_to_cool ; allow wax to cool and set\n    :parameters (?wick - material)\n    :precondition (and (filled container) (not (cooled ?wick)))\n    :effect (and (cooled ?wick))\n)\n\n",
        "(:action set_burner_add_candle\n    :parameters (?c - candle)\n    :precondition (and (on_hot_plate ?c) (candle_melting ?c))\n    :effect (melted ?c)\n)\n\n",
        "(:action set_burner\n    :parameters (?s - stove)\n    :precondition (and (off ?s) (cool ?s))\n    :effect (and (on ?s) (hot ?s))\n)\n\n",
        "(:action dip_candle_in_dye ; dip the candle in dye\n    :parameters (?npc - person ?c - candle)\n    :precondition (and (candle_ready ?c) (not (dyed ?c)))\n    :effect (and (dyed ?c))\n)\n\n",
        "(:action dip_wick\n    :parameters (?w - wick)\n    :precondition (and (melted ?c) (not (wet ?w)))\n    :effect (and (wet ?w) (in_wax ?w))\n)\n\n",
        "(:action cover_sheet ; cover a baking sheet with aluminum foil\n    :parameters (?b - mixing_bowl ?t - table)\n    :precondition (and (clean ?t) (empty ?b))\n    :effect (and (covered ?b ?t))\n)\n\n",
        "(:action put_ingredients_in_oven ; put the baking sheet into the oven\n    :parameters (?b - mixing_bowl ?s - stove_knob ?v - velveeta)\n    :precondition (and (location ?b on_baking_sheet) (power ?s off))\n    :effect (and (power ?s on) (location ?b in_oven))\n)\n\n",
        "(:action put_candle_on_table\n    :parameters (?c - candle ?h - hot_plate)\n    :precondition (and (in_jar ?c) (not (on_hot_plate ?c)))\n    :effect (and (on_hot_plate ?c) (candle_melting ?c))\n)\n\n",
        "(:action scrape_wicks ; scrape any remaining wax with a spatula or spoon\n    :parameters (?wick - wick1 ?pot - pot)\n    :precondition (and (at ?wick ?pot) (temperature ?pot hot))\n    :effect (and (orientation ?wick removed))\n)\n\n"
    ],
    "take": [
        "(:action take_candle_holder_to_well_ventilated_area ; move the candleholder to a safe location for painting\n    :parameters (?g - glass_filled ?a - area)\n    :precondition (and (decorated ?g) (not (selected ?a)))\n    :effect (and (selected ?a))\n)\n\n",
        "(:action take_mixture_off_oven ; take the jars off the baking sheet\n    :parameters (?b - mixing_bowl ?o - canola_oil ?t - table)\n    :precondition (and (location ?b on_table))\n    :effect (and (location ?b on_table) (location ?o on_table))\n)\n\n",
        "(:action take_out_of_candle\n    :parameters (?c - candle)\n    :precondition (in_jar ?c)\n    :effect (and (not (in_jar ?c)) (available ?c))\n)\n\n",
        "(:action take_wick_out_of_jar\n    :parameters (?w - wick ?j - jar)\n    :precondition (wick_in_jar ?j ?w)\n    :effect (and (not (wick_in_jar ?j ?w)) (out_of_jar ?w))\n)\n\n",
        "(:action pull_baking_sheet ; pull the baking sheet out of the oven\n    :parameters (?b - mixing_bowl)\n    :precondition (and (location ?b in_oven) (power ?s on))\n    :effect (and (location ?b on_table) (power ?s off))\n)\n\n"
    ],
    "dry": [
        "(:action dry_painting ; allow the paint to dry on the candleholder\n    :parameters (?npc - npc ?g - glass_filled)\n    :precondition (and (camouflaged ?npc) (invisible ?npc))\n    :effect (and (not (invisible ?npc)))\n)\n\n",
        "(:action dry_wicks\n    :parameters (?w - wick)\n    :precondition (wet ?w)\n    :effect (and (dry ?w) (not (wet ?w)))\n)\n\n",
        "(:action straighten_wick\n    :parameters (?w - wick)\n    :precondition (and (cut_to_size ?w) (wax_poured ?c))\n    :effect (and (straightened ?w))\n)\n\n",
        "(:action light_candle\n    :parameters (?u - user ?c - candle)\n    :precondition (and (not (lit ?c)))\n    :effect (and (lit ?c) (not (unlit ?c)))\n)\n\n;; Action to lick fingers\n",
        "(:action break_paraffin ; break up paraffin\n    :parameters (?npc - agent)\n    :precondition (and (not (broken paraffin)))\n    :effect (and (broken paraffin))\n)\n\n",
        "(:action break_candle_into_measuring_cup\n    :parameters (?c - candle ?m - measuring_cup)\n    :precondition (and (whole ?c) (not (in ?c ?m)))\n    :effect (and (broken ?c) (in ?c ?m))\n)\n\n",
        "(:action heat_pot ; heat the pot to melt the wax\n    :parameters (?stove - stove ?pot - pot)\n    :precondition (and (at ?pot ?stove) (temperature ?stove cool) (temperature ?pot cool))\n    :effect (and (temperature ?stove hot) (temperature ?pot hot))\n)\n\n",
        "(:action boil_water ; boil water in a container\n    :parameters (?container - container ?water - water)\n    :precondition (and (at ?water ?container) (temperature ?water cold) (volume ?container empty))\n    :effect (and (temperature ?water hot) (volume ?container fuller))\n)\n\n"
    ],
    "use": [
        "(:action use_candle_holder ; use the completed candleholder\n    :parameters (?u - user ?c - candle ?l - lamp)\n    :precondition (and (not (empty ?c)) (wicked ?c) (not (against_wall ?u)))\n    :effect (and (full ?c) (wickless ?c) (against_wall ?u))\n)\n```\n\n### Explanation:\n1. **wipe_glass_with_rubbing_alcohol**: Cleans the glass candleholder, changing its state from not clean to clean and from dry to wet.\n2. **wrap_lace**: Wraps lace around the candleholder, changing its state to decorated and the lace to camouflaged.\n3. **take_candle_holder_to_well_ventilated_area**: Moves the candleholder to a well-ventilated area, marking the area as selected.\n4. **coat_candle_with_painting**: Coats the candleholder with paint, changing the lace's state to camouflaged and invisible.\n5. **dry_painting**: Allows the paint to dry, making the lace visible again.\n6. **use_candle_holder**: Utilizes the completed candleholder, affecting the candle's state and the user's position relative to a wall.\n\nThese actions reflect the necessary steps and state transitions for creating and using a lace candleholder."
    ],
    "freeze": [
        "(:action freeze_candle_holder\n  :parameters (?u - user ?j - jar ?c - candle)\n  :precondition (and (contains ?j ?c) (location ?j outside_refrigerator) (temperature ?j warm))\n  :effect (and (temperature ?j cold) (location ?j inside_refrigerator))\n)\n\n",
        "(:action freeze_candle ; place the candle in the freezer\n    :parameters (?npc - person ?c - candle)\n    :precondition (and (dyed ?c) (not (frozen ?c)))\n    :effect (and (frozen ?c))\n)\n\n"
    ],
    "remove": [
        "(:action remove_candle_holder_from_freezer\n  :parameters (?u - user ?j - jar)\n  :precondition (and (location ?j inside_refrigerator) (temperature ?j cold))\n  :effect (and (location ?j outside_refrigerator) (temperature ?j room_temperature))\n)\n\n",
        "(:action remove_from_mixture ; remove cubes from the wax mixture\n    :parameters (?c - cubes)\n    :precondition (and (in_mixture ?c) (hardened ?c))\n    :effect (and (not (in_mixture ?c)))\n)\n\n",
        "(:action remove_candle_from_mixture ; remove the candle from the mold\n    :parameters (?v - velveeta ?c - candle)\n    :precondition (and (frozen ?c) (in_mold ?c))\n    :effect (and (not (in_mold ?c)) (candle_ready ?c))\n)\n```\n\n### Explanation:\n- Each action reflects a specific step in the candle-making process.\n- Preconditions ensure that the necessary conditions are met before an action is performed.\n- Effects describe the state changes resulting from each action.\n- The actions are named to reflect their roles in the task, ensuring clarity and alignment with the task's goals.\n",
        "(:action clean_cup\n    :parameters (?u - user ?c - cup)\n    :precondition (and (dirty ?c))\n    :effect (and (clean ?c) (not (dirty ?c)))\n)\n\n",
        "(:action clean_glass\n    :parameters (?g - glass_filled)\n    :precondition (and (dirty ?g))\n    :effect (and (clean ?g) (not (dirty ?g)))\n)\n\n",
        "(:action peel_orange\n    :parameters (?p - peeler ?o - orange)\n    :precondition (and (cut ?o) (in_hand ?p))\n    :effect (and (peeled ?o) (dirty ?p))\n)\n\n",
        "(:action grab_and_release_wick\n    :parameters (?n - npc ?w - wick)\n    :precondition (and (hand_near_flame ?n) (lit ?w))\n    :effect (and (wick_grabbed ?w) (not (lit ?w)) (wick_released ?w))\n)\n\n;; Action to practice the technique\n"
    ],
    "pop": [
        "(:action pop_wax\n  :parameters (?npc - npc ?j - jar ?c - candle)\n  :precondition (and (contains ?j ?c) (temperature ?j room_temperature) (composition ?c wicked))\n  :effect (and (not (contains ?j ?c)) (composition ?c wickless))\n)\n\n"
    ],
    "get": [
        "(:action get_teepee\n    :parameters (?npc - person)\n    :precondition (and (visible ?npc))\n    :effect (and (invisible ?npc) (not (visible ?npc)))\n)\n\n",
        "(:action get_chocolates\n    :parameters (?chocolate - entity ?candle1 - entity)\n    :precondition (and\n      (at-hardness ?chocolate solid)\n      (at-composition ?candle1 wickless)\n    )\n    :effect (and\n      (at-location ?chocolate in-candle)\n      (at-composition ?candle1 wicked)\n    )\n)\n```\n\nThese actions capture the essential state changes required to make a chocolate candle, focusing on the transformation and movement of entities involved in the process.",
        "(:action buy_wicks\n    :parameters (?w - wick)\n    :precondition (and (on_sale_at_store ?w))\n    :effect (and (purchased_from_store ?w) (not (on_sale_at_store ?w)))\n)\n\n",
        "(:action secure_wick\n    :parameters (?w - wick)\n    :precondition (and (not (secured ?w)))\n    :effect (and (secured ?w))\n)\n\n",
        "(:action purchase_supplies\n    :parameters (?npc - player ?store - location ?supplies - item)\n    :precondition (and (at ?npc ?store) (available ?supplies ?store))\n    :effect (and (inventory ?npc ?supplies) (not (available ?supplies ?store)))\n)\n\n",
        "(:action find_saucepan\n    :parameters (?npc - player ?saucepan - item ?location - location)\n    :precondition (and (at ?npc ?location) (at ?saucepan ?location))\n    :effect (and (inventory ?npc ?saucepan) (not (at ?saucepan ?location)))\n)\n\n",
        "(:action gather_materials\n    :parameters (?m - materials)\n    :precondition (and (dirty ?m))\n    :effect (and (clean ?m) (not (dirty ?m)))\n)\n\n;; Set the wick\n",
        "(:action gather_supplies\n    :parameters (?you - person ?s - supplies)\n    :precondition (and (location ?s around_house) (messiness ?s disorganized))\n    :effect (and \n        (location ?s in_waste_basket)\n        (messiness ?s organized)\n    )\n)\n\n;; Action to melt shortening\n"
    ],
    "cut": [
        "(:action cut_wick ; cut a piece of wick\n    :parameters (?wick - material)\n    :precondition (and (whole ?wick))\n    :effect (and (cut ?wick))\n)\n\n",
        "(:action cut_orange\n    :parameters (?npc - npc ?cb - cutting_board ?o - orange)\n    :precondition (and (prepared ?o) (on_board ?o ?cb))\n    :effect (and (cut ?o) (not (on_board ?o ?cb)) (dirty ?cb))\n)\n\n"
    ],
    "add": [
        "(:action add_scenting_sauce ; add scent to the mixture\n    :parameters (?a - alice)\n    :precondition (and (scent_available ?a) (not (scent_added ?a)))\n    :effect (and (scent_added ?a))\n)\n\n",
        "(:action add_oil_to_fridge\n    :parameters (?o - oil_tank ?npc - npc)\n    :precondition (and (in_place ?o) (not (in_fridge ?o)))\n    :effect (and (in_fridge ?o) (not (in_place ?o)))\n)\n\n",
        "(:action add_scent\n    :parameters (?w - wax ?s - scent)\n    :precondition (and (melted ?w) (available ?s))\n    :effect (and (scented ?w ?s))\n)\n\n;; Pour wax into the container\n",
        "(:action add_ingredients ; add additives to the mixture\n    :parameters (?a - additives ?m - mixture1)\n    :precondition (and (in_bowl ?m) (not (additives_added ?m)))\n    :effect (and (additives_added ?m))\n)\n\n",
        "(:action add_ingredient ; add crayon or dye to melted wax\n    :parameters (?wax - material ?crayon - material ?candle - material)\n    :precondition (and (melted ?wax) (not (colored ?wax)))\n    :effect (and (colored ?wax))\n)\n\n",
        "(:action add_color_and_scent\n    :parameters (?a - alice)\n    :precondition (and (step ?a unselected) (choice ?a nameless))\n    :effect (and \n        (step ?a selected)\n        (choice ?a named)\n    )\n)\n\n;; Action to prepare the wick and pour the candle\n",
        "(:action add_water ; add boiling water to the pot\n    :parameters (?water - water ?pot - pot)\n    :precondition (and (temperature ?water hot) (at ?water ?container) (at ?pot ?stove) (temperature ?pot hot))\n    :effect (and (at ?water ?pot) (temperature ?pot hot))\n)\n\n",
        "(:action add_water_to_hob\n    :parameters (?stove - entity ?water - entity)\n    :precondition (and\n      (at-power ?stove off)\n      (at-fullness ?water emptier)\n    )\n    :effect (and\n      (at-power ?stove on)\n      (at-fullness ?water fuller)\n      (at-temperature ?water warmer)\n    )\n)\n\n",
        "(:action add_chocolate_sauce\n    :parameters (?mixing_bowl - entity ?chocolate - entity)\n    :precondition (and\n      (at-location ?chocolate packaged)\n      (at-composition ?mixing_bowl separate)\n    )\n    :effect (and\n      (at-location ?chocolate out-of-package)\n      (at-composition ?mixing_bowl mixed)\n    )\n)\n\n",
        "(:action collect_candle\n    :parameters (?npc - player ?candle - item ?location - location)\n    :precondition (and (at ?npc ?location) (at ?candle ?location))\n    :effect (and (inventory ?npc ?candle) (not (at ?candle ?location)))\n)\n\n",
        "(:action stir_wand ; stir with a wooden spoon\n    :parameters (?npc - agent)\n    :precondition (and (colored wax) (not (stirred wax)))\n    :effect (and (stirred wax))\n)\n\n",
        "(:action mix_ingredients ; mix in fragrance with melted wax\n    :parameters (?alice - agent ?wand - tool)\n    :precondition (and (stirred wax) (not (fragrant wax)))\n    :effect (and (fragrant wax))\n)\n\n",
        "(:action tape_papyrus ; release wax tarts\n    :parameters (?tarts - product)\n    :precondition (and (cooled wick) (in mold ?tarts))\n    :effect (and (released ?tarts))\n)\n\n"
    ],
    "wait": [
        "(:action wait_for_wicks\n    :parameters (?w - wick)\n    :precondition (and (straightened ?w))\n    :effect (and (wax_dried ?w))\n)\n\n",
        "(:action wait_until_it_sets\n    :parameters (?it - entity)\n    :precondition (and\n      (at-completion ?it unfinished)\n    )\n    :effect (and\n      (at-completion ?it finished)\n    )\n)\n\n"
    ],
    "prepare": [
        "(:action prepare_orange\n    :parameters (?o - orange)\n    :precondition (not (prepared ?o))\n    :effect (prepared ?o)\n)\n\n",
        "(:action prepare_candle_holders\n    :parameters (?user - player ?wick - item ?holder - item)\n    :precondition (and (inventory ?user ?wick) (inventory ?user ?holder))\n    :effect (and (prepared ?holder) (not (inventory ?user ?wick)))\n)\n\n",
        "(:action prepare_area ; prepare the work area for candle making\n    :parameters (?w - work_area)\n    :precondition (and (not (prepared ?w)))\n    :effect (and (prepared ?w))\n)\n\n",
        "(:action prepare_oven ; preheat the oven\n    :parameters (?npc - npc)\n    :precondition (and (not (oven_preheated)))\n    :effect (and (oven_preheated))\n)\n\n",
        "(:action prepare_container\n    :parameters (?chocolate_comb - entity ?container - entity)\n    :precondition (and\n      (at-location ?chocolate_comb packaged)\n      (at-volume ?container empty)\n    )\n    :effect (and\n      (at-location ?chocolate_comb out-of-package)\n      (at-volume ?container fuller)\n    )\n)\n\n",
        "(:action create_design\n    :parameters (?npc - npc ?ws - work_station)\n    :precondition (not (created ?ws))\n    :effect (created ?ws)\n)\n\n",
        "(:action make_sliplargerbeads ; enjoy the finished tarts\n    :parameters (?npc - agent)\n    :precondition (and (released tarts))\n    :effect (and (enjoyed tarts))\n)\n```\n\nIn these actions, I focused on the state changes related to the process of making candle tarts, such as breaking paraffin, setting heat, adding ingredients, stirring, mixing, preparing molds, cutting and wrapping wicks, pouring wax, cooling, and enjoying the final product. Each action reflects the key transitions described in the task.",
        "(:action make_drill ; prepare the drill for use\n    :parameters (?npc - person ?w - wood ?d - drill)\n    :precondition (and (wood_available ?w) (not (drill_ready ?d)))\n    :effect (and (drill_ready ?d))\n)\n\n",
        "(:action melt_wax\n    :parameters (?w - wax)\n    :precondition (and (measured ?w) (cool ?w))\n    :effect (and (melted ?w) (not (cool ?w)))\n)\n\n;; Add scent\n",
        "(:action melt_wailmer ; melt a smaller amount of wax\n    :parameters (?w - wick1)\n    :precondition (and (wax_available ?w) (not (wax_melted ?w)))\n    :effect (and (wax_melted ?w))\n)\n\n",
        "(:action melt_shortening\n    :parameters (?v - velveeta)\n    :precondition (and (granularity ?v solid) (temperature ?v cold) (location ?v in_fridge))\n    :effect (and \n        (granularity ?v liquid)\n        (temperature ?v hot)\n        (location ?v in_sauce_pan)\n        (not (granularity ?v solid))\n        (not (temperature ?v cold))\n        (not (location ?v in_fridge))\n    )\n)\n\n;; Action to add color and scent\n",
        "(:action cook\n    :parameters (?npc - entity ?kitchen - entity)\n    :precondition (and\n      (at-cleanness ?kitchen clean)\n      (at-visibility ?npc visible)\n    )\n    :effect (and\n      (at-cleanness ?kitchen messy)\n      (at-visibility ?npc invisible)\n    )\n)\n\n"
    ],
    "check": [
        "(:action check_wax\n    :parameters (?npc - player ?stove - location ?saucepan - item)\n    :precondition (and (at ?npc ?stove) (at ?saucepan ?stove) (melted ?saucepan))\n    :effect (stirred ?saucepan)\n)\n\n",
        "(:action check_wicks\n    :parameters (?wick1 - entity)\n    :precondition (and\n      (at-composition ?wick1 whole)\n    )\n    :effect (and\n      (at-composition ?wick1 checked)\n    )\n)\n\n"
    ],
    "measure": [
        "(:action measure_wax\n    :parameters (?w - wax)\n    :precondition (and (unmeasured ?w))\n    :effect (and (measured ?w) (not (unmeasured ?w)))\n)\n\n;; Melt the wax\n"
    ],
    "burn": [
        "(:action burn_candle\n    :parameters (?u - user ?c - candle)\n    :precondition (and (full ?c))\n    :effect (and (burned ?c) (not (full ?c)))\n)\n```\n\n### Explanation:\n\n1. **gather_materials**: Cleans the materials, changing their state from dirty to clean.\n2. **set_wick**: Reflects the purchase of the wick, changing its state from on sale to purchased.\n3. **measure_wax**: Measures the wax flakes, changing their state from unmeasured to measured.\n4. **melt_wax**: Melts the wax, changing its state from cool to melted.\n5. **add_scent**: Adds scent to the melted wax, indicating the wax is now scented.\n6. **pour_wax_into_container**: Pours the scented wax into a container, changing its state from empty to full.\n7. **burn_candle**: Represents burning the candle, changing its state from full to burned.\n\nEach action is designed to capture the relevant state changes and ensure the task is completed logically step by step.",
        "(:action burn_wicks ; burn the wicks to prepare them\n    :parameters (?npc - person ?w - wick)\n    :precondition (and (has_wick ?npc ?w) (not (burned ?w)))\n    :effect (and (burned ?w))\n)\n\n"
    ],
    "free": [
        "(:action free_tart_papyrus ; spray tart pans or muffin tins\n    :parameters (?tart_papyrus - material ?mixing_bowl - container ?tins - container)\n    :precondition (and (dry ?tart_papyrus) (not (greased ?tins)))\n    :effect (and (greased ?tins))\n)\n\n"
    ],
    "finish": [
        "(:action finish_wreath\n    :parameters (?w - wreath)\n    :precondition (in_progress ?w)\n    :effect (and (completed ?w) (not (in_progress ?w)))\n)\n```\n\n### Explanation of Actions\n\n1. **break_candle_into_measuring_cup**: This action represents breaking the candle into a measuring cup. The candle's state changes from \"whole\" to \"broken\" and from \"not in the measuring cup\" to \"in the measuring cup.\"\n\n2. **place_measuring_cup_into_pan**: The measuring cup is placed into a pot of water, which heats up, causing the wax to melt. The water's state changes from \"cold\" to \"hot,\" and the measuring cup is \"melting.\"\n\n3. **set_burner**: This action turns the stove on, changing its state from \"off\" and \"cool\" to \"on\" and \"hot.\"\n\n4. **place_wicks_in_shot_glass**: Wicks are placed in shot glasses, changing their state from \"not in the glass\" to \"in the glass\" and \"centered.\"\n\n5. **pour_wax_into_shot_glass**: Pouring melted wax into the shot glass changes the glass's state to \"filled\" and stops the melting process of the measuring cup.\n\n6. **set_wick**: Once the wax is almost set, the wick is centered and set in the glass.\n\n7. **finish_wreath**: This action completes the wreath, changing its state from \"in progress\" to \"completed.\"\n\nEach action focuses on the relevant state changes of the entities involved, ensuring that the task is accurately represented in PDDL format."
    ],
    "lick": [
        "(:action lick_fingers\n    :parameters (?n - npc)\n    :precondition (and (fingers_dry ?n))\n    :effect (and (fingers_wet ?n) (not (fingers_dry ?n)))\n)\n\n;; Action to place hand near the flame\n"
    ],
    "locate": [
        "(:action locate_wicks\n    :parameters (?u - user ?w - wick)\n    :precondition (not (located ?w))\n    :effect (and (located ?w) (selected ?u))\n)\n\n"
    ],
    "wick": [
        "(:action wick_mold ; wick the mold and center the wick\n    :parameters (?w - wick1 ?m - mold)\n    :precondition (and (mold_prepared ?m) (not (wicked ?m)))\n    :effect (and (wicked ?m) (centered ?w ?m))\n)\n\n"
    ],
    "reuse": [
        "(:action reuse_mixture_container ; reuse the jar\n    :parameters (?j - jar)\n    :precondition (and (location ?j on_table) (cleanness ?j clean))\n    :effect (and (location ?j in_storage))\n)\n```\n\n### Explanation:\n\n1. **prepare_oven**: Preheats the oven. The effect is that the oven becomes preheated.\n\n2. **cover_sheet**: Covers a baking sheet with aluminum foil. The effect is that the mixing bowl is now covered on the table.\n\n3. **place_candle_in_oven**: Places the candle jars upside down on the baking sheet. The effect is that the candle mixture is now on the baking sheet.\n\n4. **put_ingredients_in_oven**: Puts the baking sheet into the oven. The effect is that the baking sheet is now in the oven, and the stove knob is turned on.\n\n5. **pull_baking_sheet**: Pulls the baking sheet out of the oven. The effect is that the baking sheet is now on the table, and the stove knob is turned off.\n\n6. **take_mixture_off_oven**: Takes the jars off the baking sheet. The effect is that the mixing bowl and canola oil are on the table.\n\n7. **wipe_mixture_with_paper**: Wipes the jars using a paper towel. The effect is that the towel becomes dirty, and the container is clean.\n\n8. **reuse_mixture_container**: Reuses the jar. The effect is that the jar is now in storage, ready for reuse.\n\nThese actions reflect the changes in states of the entities involved in the task of getting wax out of a jar candle."
    ],
    "practice": [
        "(:action practice_with_equipment\n    :parameters (?n - npc)\n    :precondition (and (technique_unpracticed ?n))\n    :effect (and (technique_practiced ?n) (not (technique_unpracticed ?n)))\n)\n```\n\n### Explanation of State Changes\n\n1. **light_candle**: This action lights the candle, changing its state from `unlit` to `lit`.\n\n2. **lick_fingers**: The NPC licks their fingers, changing their state from `fingers_dry` to `fingers_wet`.\n\n3. **place_hand_near_flame**: The NPC places their hand near the flame, transitioning from `hand_away` to `hand_near_flame`.\n\n4. **grab_and_release_wick**: The NPC grabs and releases the wick, extinguishing it. The wick changes from `lit` to `not lit`.\n\n5. **practice_with_equipment**: The NPC practices the technique, changing from `technique_unpracticed` to `technique_practiced`.\n\nThese actions reflect the task's steps and ensure that each action's preconditions and effects accurately represent the intended state changes."
    ]
}