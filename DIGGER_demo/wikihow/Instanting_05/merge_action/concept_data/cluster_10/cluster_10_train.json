{
    "check": [
        "(:action check_bestseller_list\n    :parameters (?npc - character ?book - book)\n    :precondition (and (not (selected ?book)))\n    :effect (and (selected ?book))\n)\n\n",
        "(:action listen_to_member_secret ; listen to a member about a secret related to the book club\n      :parameters (?p1 - player ?p2 - player ?bc - book_club)\n      :precondition (and (in ?p1 ?bc) (in ?p2 ?bc) (not (secret_shared ?p2 ?bc)))\n      :effect (and (secret_shared ?p2 ?bc) (knowledge_selected ?p1))\n)\n```\n\n### Explanation:\n1. **create_member_list**: This action establishes the member list for the book club, which is a prerequisite for organizing the club.\n2. **set_rules**: This action sets rules for acquiring books within the club, ensuring that book acquisition is organized and follows the club\u2019s guidelines.\n3. **set_meeting_location**: This action determines the regular meeting place for the club, making sure that the location is available for meetings.\n4. **write_loans_policy**: This action involves writing down the policy for book loans, ensuring that the location where this is done is clean, reflecting a professional environment.\n5. **set_return_schedule**: This action sets up a schedule for book returns, ensuring that the location is appropriately prepared or covered for such activities.\n6. **listen_to_member_secret**: This action involves listening to a member who shares a secret about the club, ensuring that the listener gains selected knowledge from the interaction.\n\nThe actions are designed to reflect the logical flow and state changes necessary for creating rules and organizing a book club."
    ],
    "ask": [
        "(:action ask_for_recommendation\n    :parameters (?npc - character)\n    :precondition (and (not (has_recommendation ?npc)))\n    :effect (and (has_recommendation ?npc))\n)\n\n",
        "(:action ask_for_opinions ; ask for opinions from members\n    :parameters (?a1 - agent ?adv - advice)\n    :precondition (and (not (given ?adv)) (withheld ?adv))\n    :effect (and (given ?adv))\n)\n\n",
        "(:action ask_for_suggestions ; ask members for book suggestions\n   :parameters (?u - user ?p - pen)\n   :precondition (and (location ?p on_counter))\n   :effect (and (location ?p in_hand))\n)\n\n"
    ],
    "visit": [
        "(:action visit_expert_websites\n    :parameters (?npc - character ?book_club - club)\n    :precondition (and (not (has_expert_info ?npc)))\n    :effect (and (has_expert_info ?npc))\n)\n\n"
    ],
    "choose": [
        "(:action find_other_book_clubs_readings\n    :parameters (?npc - character ?book_club - club)\n    :precondition (and (not (has_other_clubs_info ?npc)))\n    :effect (and (has_other_clubs_info ?npc))\n)\n\n",
        "(:action choose_books ; choose complex books for the club\n    :parameters (?npc - npc ?b - book)\n    :precondition (and (selected ?b) (complex ?b) (not (named ?b)))\n    :effect (and (named ?b))\n)\n\n",
        "(:action choose_book ; decide on a business book for the club to focus on\n      :parameters (?npc - person ?b - book)\n      :precondition (and (not (selected ?b)) (unselected ?b))\n      :effect (and (selected ?b) (not (unselected ?b)))\n   )\n\n",
        "(:action select_new_member_of_family ; select a current bestseller for the book club\n   :parameters (?n - npc)\n   :precondition (and (decoration ?n bare))\n   :effect (and (decoration ?n camouflaged))\n)\n\n",
        "(:action select_theme ; select a theme for the book club\n    :parameters (?bc - book_club ?bt - book_themed)\n    :precondition (and (not (theme_selected ?bc)) (equals ?bt step unselected))\n    :effect (and (theme_selected ?bc) (equals ?bt step selected))\n)\n\n",
        "(:action get_snack ; find out what sort of snacks the group wants\n    :parameters (?npc - npc)\n    :precondition (and (not (has_snack_info ?npc)))\n    :effect (and (has_snack_info ?npc))\n)\n\n"
    ],
    "pick": [
        "(:action pick_enjoyed_book\n    :parameters (?npc - character ?book - book)\n    :precondition (and (enjoyed ?npc ?book) (not (selected ?book)))\n    :effect (and (selected ?book))\n)\n\n",
        "(:action pick_thematic_book\n    :parameters (?npc - character ?book - book ?book_club - club)\n    :precondition (and (matches_theme ?book ?book_club) (not (selected ?book)))\n    :effect (and (selected ?book))\n)\n\n",
        "(:action pick_books ; pick out books in advance for club meetings\n      :parameters (?npc - person ?b - book)\n      :precondition (and (selected ?b))\n      :effect (and (named ?b))\n   )\n\n"
    ],
    "manage": [
        "(:action manage_stress\n    :parameters (?npc - character ?basement - location)\n    :precondition (and (not (stressed ?npc)))\n    :effect (and (not (stressed ?npc)))\n)\n```\n\n### Explanation:\n\n1. **check_bestseller_list**: This action represents looking at a bestseller list to select a book. The state change is from `unselected` to `selected` for the book.\n\n2. **ask_for_recommendation**: This action is for asking someone for a book recommendation. The state change is that the NPC gains a recommendation.\n\n3. **visit_expert_websites**: This action involves visiting expert websites to gain information about book clubs and reviews. The NPC gains expert information.\n\n4. **find_other_book_clubs_readings**: This action represents finding out what other book clubs are reading, providing the NPC with additional information.\n\n5. **pick_enjoyed_book**: This action is about selecting a book that the NPC has already read and enjoyed. The book's state changes from `unselected` to `selected`.\n\n6. **pick_thematic_book**: This action involves selecting a book that matches the theme of the book club. The book's state changes from `unselected` to `selected`.\n\n7. **manage_stress**: This action ensures the NPC manages stress, maintaining a non-stressed state.\n\nThese PDDL actions capture the steps and logic described in the task of choosing a book for a book club, reflecting the relevant state changes for the entities involved."
    ],
    "strike": [
        "(:action strike_deal ; strike a deal with the library for book club logistics\n    :parameters (?npc - npc ?ct - covering_tracks ?t - track)\n    :precondition (and (visible ?npc) (location ?ct cabinet) (stability ?t jerky))\n    :effect (and (location ?ct countertop) (stability ?t smooth))\n)\n\n"
    ],
    "create": [
        "(:action prepare_questions ; prepare discussion questions for the club\n    :parameters (?npc - npc)\n    :precondition (and (not (questions_prepared ?npc)))\n    :effect (and (questions_prepared ?npc))\n)\n\n",
        "(:action create_new_wheel_reinvention_system ; avoid reinventing the wheel by creating a system\n    :parameters (?npc - facilitator)\n    :precondition (and (not (has_system ?npc)))\n    :effect (and (has_system ?npc))\n)\n\n",
        "(:action create_conversation ; create a conversation flow for the group\n    :parameters (?npc - facilitator ?ct - covering_tracks ?track - discussion_track)\n    :precondition (and (not (conversation_created ?npc)) (location ?ct in_cabinet) (stability ?track jerky))\n    :effect (and (conversation_created ?npc) (location ?ct on_countertop) (stability ?track smooth))\n)\n\n",
        "(:action create_member_list ; create a list of members for the book club\n      :parameters (?p - player ?bc - book_club)\n      :precondition (and (in ?p ?bc) (not (has_member_list ?bc)))\n      :effect (and (has_member_list ?bc))\n)\n\n",
        "(:action create_reading_community\n    :parameters (?n - npc ?bf - book_forum)\n    :precondition (and (not (exists ?bf)))\n    :effect (and (exists ?bf) (forum_created ?bf))\n)\n\n",
        "(:action make_commission ; make the group inviting through commissions\n    :parameters (?npc - facilitator ?ct - covering_tracks ?track - discussion_track)\n    :precondition (and (conversation_created ?npc) (volume ?ct empty))\n    :effect (and (commission_made ?npc) (volume ?ct fuller))\n)\n\n",
        "(:action make_welcome ; make new members feel welcome\n    :parameters (?npc - facilitator)\n    :precondition (and (in_group ?adrian ?ss))\n    :effect (and (members_welcomed ?npc))\n)\n```\n\n### Explanation\n\n- **create_new_wheel_reinvention_system**: Establishes a system to avoid unnecessary reinvention.\n- **create_conversation**: Sets up a structured conversation flow for the group, ensuring smooth discussions.\n- **make_commission**: Enhances the group's appeal by making it inviting through commissions.\n- **start_with_knowledge**: Encourages starting with existing knowledge.\n- **initiate_conversation**: Opens up discussions with the book panel.\n- **keep_fresh**: Keeps the group dynamic and engaging with fresh ideas.\n- **market_new_member_group**: Promotes the group to potential new members.\n- **make_welcome**: Ensures new members feel welcomed and integrated.\n\nThese actions reflect the task's objectives and capture the necessary state changes for each step.",
        "(:action build_libraries\n    :parameters (?n - npc ?bk - book)\n    :precondition (and (not (library_exists ?bk)))\n    :effect (and (library_exists ?bk))\n)\n```\n\n### Explanation of Actions\n\n1. **start_bookclub**: \n   - **Parameters**: A bookclub entity.\n   - **Preconditions**: The bookclub does not exist.\n   - **Effects**: The bookclub is created and marked as ready.\n\n2. **initiate_teach**: \n   - **Parameters**: An NPC and a book.\n   - **Preconditions**: The NPC does not know the book, and the book has been selected.\n   - **Effects**: The NPC is now familiar with the book.\n\n3. **create_reading_community**: \n   - **Parameters**: An NPC and a book forum.\n   - **Preconditions**: The book forum does not exist.\n   - **Effects**: The book forum is created, indicating a new online reading community.\n\n4. **build_libraries**: \n   - **Parameters**: An NPC and a book.\n   - **Preconditions**: There is no existing library for the book.\n   - **Effects**: A library is built for the book, encouraging reading.\n\nThese actions focus on the creation and establishment of resources and communities that encourage reading among adults. The preconditions ensure that the actions are only performed when necessary, and the effects reflect the successful completion of each step.",
        "(:action build_wall ; include some general book-themed decor\n    :parameters (?npc - npc ?bt - book_themed)\n    :precondition (and (equals ?npc decoration bare) (equals ?bt choice nameless))\n    :effect (and (equals ?npc decoration camouflaged) (equals ?bt choice named))\n)\n```\n\n### Explanation:\n\n1. **select_theme**:\n   - **Parameters**: `?bc` (book_club), `?bt` (book_themed)\n   - **Preconditions**: The theme has not been selected for the book club, and the book-themed step is unselected.\n   - **Effect**: The theme is selected for the book club, and the book-themed step is marked as selected.\n\n2. **get_snack**:\n   - **Parameters**: `?npc` (npc)\n   - **Preconditions**: The NPC doesn't have information about snacks.\n   - **Effect**: The NPC obtains information about the snacks.\n\n3. **build_wall**:\n   - **Parameters**: `?npc` (npc), `?bt` (book_themed)\n   - **Preconditions**: The NPC's decoration is bare, and the book-themed choice is nameless.\n   - **Effect**: The NPC's decoration becomes camouflaged, and the book-themed choice is named.\n\nThese actions reflect the changes in the entity state as per the task description and steps provided."
    ],
    "bring": [
        "(:action bring_conversation_question ; members bring discussion questions to the meeting\n    :parameters (?npc - npc)\n    :precondition (and (questions_prepared ?npc))\n    :effect (and (discussion_ready ?npc))\n)\n```\n\n### Explanation:\n1. **pick_books**: This action involves selecting books that are available at the library, transitioning the book's state from \"unselected\" to \"selected\".\n   \n2. **strike_deal**: This action involves striking a deal with the library, which metaphorically involves moving the \"covering tracks\" from a cabinet to a countertop and stabilizing the \"track\".\n\n3. **choose_books**: This action involves choosing books that are complex, with the transition from \"nameless\" to \"named\".\n\n4. **ask_for_opinions**: This action involves asking for opinions, changing the advice's state from \"withheld\" to \"given\".\n\n5. **prepare_questions**: This action involves preparing questions for discussion, ensuring the NPC is ready with questions.\n\n6. **bring_conversation_question**: This action involves members bringing discussion questions, ensuring the NPC is ready for discussion.\n\nThese actions reflect the steps and descriptions provided for starting a library book club, ensuring all relevant state changes are captured.",
        "(:action take_ask ; take requests for books from club members\n      :parameters (?npc - person ?cover - covering_tracks ?t - track)\n      :precondition (and (location ?cover in_cabinet) (volume ?cover empty))\n      :effect (and (location ?cover on_countertop) (volume ?cover fuller))\n   )\n\n"
    ],
    "start": [
        "(:action start_with_knowledge ; begin with existing knowledge\n    :parameters (?you - participant)\n    :precondition (and (focus ?you focused_on_making_bracelet))\n    :effect (and (focus ?you admiring_bracelet))\n)\n\n",
        "(:action start_bookclub\n    :parameters (?b - bookclub)\n    :precondition (and (not (exists ?b)))\n    :effect (and (exists ?b) (bookclub_ready ?b))\n)\n\n",
        "(:action initiate_conversation ; initiate a conversation with the book panel\n    :parameters (?npc - facilitator ?bp - book_panel)\n    :precondition (and (not (conversation_initiated ?npc)) (availability ?bp closed))\n    :effect (and (conversation_initiated ?npc) (availability ?bp open))\n)\n\n",
        "(:action initiate_teach\n    :parameters (?n - npc ?bk - book)\n    :precondition (and (not (knows_book ?n ?bk)) (book_selected ?bk))\n    :effect (and (knows_book ?n ?bk))\n)\n\n"
    ],
    "keep": [
        "(:action keep_fresh ; keep the group fresh with new ideas\n    :parameters (?npc - facilitator)\n    :precondition (and (conversation_initiated ?npc))\n    :effect (and (group_fresh ?npc))\n)\n\n"
    ],
    "set": [
        "(:action set_rules ; set rules for book acquisition in the book club\n      :parameters (?p - player ?bc - book_club ?b - book)\n      :precondition (and (in ?p ?bc) (not (rules_set ?bc)))\n      :effect (and (rules_set ?bc) (book_acquired ?b))\n)\n\n",
        "(:action set_meeting_location ; decide on a regular meeting location for the book club\n      :parameters (?p - player ?bc - book_club ?loc - location)\n      :precondition (and (in ?p ?bc) (not (meeting_location_set ?bc)))\n      :effect (and (meeting_location_set ?bc) (location_available ?loc))\n)\n\n",
        "(:action set_return_schedule ; set a schedule for returning books\n      :parameters (?p - player ?bc - book_club ?loc - location)\n      :precondition (and (in ?p ?bc) (not (return_schedule_set ?bc)))\n      :effect (and (return_schedule_set ?bc) (location_covered ?loc))\n)\n\n",
        "(:action set_heat_level ; set the heat level for the stove knob when preparing snacks for the book club\n   :parameters (?s - stove_knob ?v - velveeta)\n   :precondition (and (temperature ?s cool) (power ?s off) (granularity ?v solid))\n   :effect (and (temperature ?s hot) (power ?s on) (granularity ?v melted))\n)\n\n"
    ],
    "write": [
        "(:action write_loans_policy ; write down the loan policy for the book club\n      :parameters (?p - player ?bc - book_club ?loc - location)\n      :precondition (and (in ?p ?bc) (not (loans_policy_written ?bc)))\n      :effect (and (loans_policy_written ?bc) (location_clean ?loc))\n)\n\n",
        "(:action talk_using_social_media ; share thoughts and engage with club members through social media\n      :parameters (?you - person)\n      :precondition (and (focus ?you focused_on_making_bracelet))\n      :effect (and (focus ?you admiring_bracelet))\n   )\n\n"
    ],
    "stick": [
        "(:action stick_with_subgenre ; choose a specific sub-genre for the book club\n   :parameters (?c - character)\n   :precondition (and (step ?c unselected) (choice ?c nameless))\n   :effect (and (step ?c selected) (choice ?c named))\n)\n\n"
    ],
    "venture": [
        "(:action venture_into_nonfiction ; encourage the book club to explore nonfiction books\n   :parameters (?n - npc)\n   :precondition (and (decoration ?n bare))\n   :effect (and (decoration ?n camouflaged))\n)\n\n"
    ],
    "read": [
        "(:action read_romance ; read a classic romance book as part of the club's activities\n   :parameters (?n - npc)\n   :precondition (and (visibility ?n visible))\n   :effect (and (visibility ?n invisible))\n)\n\n",
        "(:action read_books ; read different books and compare them in the club\n   :parameters (?n - npc ?b - book)\n   :precondition (and (step ?b unselected))\n   :effect (and (step ?b selected))\n)\n```\n\nThese actions reflect the steps necessary to start and manage a romance book club, focusing on selecting sub-genres, picking books, and engaging with members for suggestions and reading activities."
    ],
    "peruse": [
        "(:action peruse_bestseller_list ; browse bestseller lists to find popular business books\n      :parameters (?npc - person ?b - book)\n      :precondition (and (nameless ?b))\n      :effect (and (named ?b) (not (nameless ?b)))\n   )\n\n"
    ],
    "encourage": [
        "(:action encourage_others_to_ask_questions ; motivate club members to ask questions about the books\n      :parameters (?npc - person)\n      :precondition (and (visibility ?npc visible))\n      :effect (and (visibility ?npc invisible))\n   )\n```\n\n### Explanation\n\n1. **choose_book**: This action allows the NPC to select a business book for the club, changing its state from unselected to selected.\n   \n2. **take_ask**: This action involves taking requests for books, represented by moving the \"covering tracks\" from the cabinet to the countertop and changing its volume state from empty to fuller.\n\n3. **peruse_bestseller_list**: The NPC browses bestseller lists to find books, changing the book's state from nameless to named.\n\n4. **pick_books**: The NPC picks out books that have already been selected, ensuring they are named for club meetings.\n\n5. **talk_using_social_media**: The person shares thoughts and engages on social media, changing their focus from making a bracelet to admiring it.\n\n6. **encourage_others_to_ask_questions**: The NPC encourages others to ask questions, changing their visibility from visible to invisible to represent a shift in attention or focus.\n\nThese actions are crafted to align with the steps and descriptions provided for starting a business book club, focusing on relevant state changes."
    ],
    "market": [
        "(:action market_new_member_group ; market the group to new members\n    :parameters (?npc - facilitator ?adrian - potential_member ?ss - book_group)\n    :precondition (and (group_fresh ?npc) (not (in_group ?adrian ?ss)))\n    :effect (and (in_group ?adrian ?ss))\n)\n\n"
    ]
}