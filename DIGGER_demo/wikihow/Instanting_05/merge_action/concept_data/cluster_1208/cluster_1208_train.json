{
    "use": [
        "(:action use_potatoes\n    :parameters (?potato - ingredient ?bowl - utensil ?pot - utensil)\n    :precondition (and\n      (at ?potato in_bag)\n      (at ?bowl in_cupboard)\n      (at ?pot in_cupboard)\n      (clean ?pot)\n    )\n    :effect (and\n      (at ?potato on_counter)\n      (at ?bowl on_counter)\n      (at ?pot on_stovetop)\n      (dirty ?pot)\n    )\n)\n\n;; Action 2: Use Full of Milk and Butter\n",
        "(:action use_full_of_milk\n    :parameters (?milk_butter - ingredient ?bowl - utensil)\n    :precondition (and\n      (at ?milk_butter in_container)\n      (at ?bowl on_counter)\n    )\n    :effect (and\n      (in_bowl ?milk_butter ?bowl)\n      (mixed ?bowl)\n    )\n)\n\n;; Action 3: Peel Potatoes\n",
        "(:action use_as_appropriate_purpose\n  :parameters (?p - player ?gc - goat_cheese)\n  :precondition (and (soft_ripened ?gc) (not (used ?gc)))\n  :effect (used ?gc)\n)\n\n",
        "(:action use_coffee_ground\n    :parameters (?p - player ?ground_floor - ground_floor ?pot - pot)\n    :precondition (and (inventory ?p ?ground_floor) (inventory ?p ?pot) (absent ?ground_floor) (clean ?pot))\n    :effect (and (present ?ground_floor) (covered ?ground_floor) (dirty ?pot))\n)\n\n"
    ],
    "peel": [
        "(:action peel_potato\n    :parameters (?potato - ingredient ?peeler - utensil)\n    :precondition (and\n      (at ?potato on_counter)\n      (at ?peeler in_drawer)\n      (clean ?peeler)\n    )\n    :effect (and\n      (peeled ?potato)\n      (dirty ?peeler)\n    )\n)\n\n;; Action 4: Boil Wicks (Assumed to be Boiling Potatoes)\n",
        "(:action cure-yolks\n  :parameters (?y - yolks ?s - salt)\n  :precondition (and (inContainer ?y ?c) (airtight ?c) (available ?s))\n  :effect (and (cured ?y) (not (raw ?y)))\n)\n```\n\n### Descriptions of Actions:\n\n1. **save-yolks**\n   - **Parameters:** \n     - ?y - yolks\n     - ?c - container\n   - **Preconditions:**\n     - The yolks are not already in the container.\n     - The container is airtight.\n   - **Effects:**\n     - The yolks are now in the container.\n     - The yolks are no longer in the tub.\n\n2. **freeze-yolks**\n   - **Parameters:**\n     - ?y - yolks\n     - ?c - container\n     - ?s - syrup\n   - **Preconditions:**\n     - The yolks are in the container.\n     - The container is airtight.\n     - The syrup is available.\n   - **Effects:**\n     - The yolks are frozen.\n     - The yolks are no longer in a liquid state.\n\n3. **cure-yolks**\n   - **Parameters:**\n     - ?y - yolks\n     - ?s - salt\n   - **Preconditions:**\n     - The yolks are in the container.\n     - The container is airtight.\n     - The salt is available.\n   - **Effects:**\n     - The yolks are cured.\n     - The yolks are no longer raw.\n\nThese actions capture the necessary steps to save, freeze, and cure egg yolks as described in the task.",
        "(:action clean_heating_unit\n    :parameters (?user - person ?egg_boiler - appliance ?cloth - tool ?vinegar_mixture - liquid)\n    :precondition (and\n      (at ?egg_boiler kitchen)\n      (cleanable ?egg_boiler)\n      (has ?user ?cloth)\n      (has ?user ?vinegar_mixture)\n    )\n    :effect (and\n      (clean ?egg_boiler)\n      (not (dirty ?egg_boiler))\n    )\n)\n\n;; Action 2: Fill the egg boiler with distilled water\n"
    ],
    "cool": [
        "(:action boil_potatoes\n    :parameters (?potato - ingredient ?pot - utensil)\n    :precondition (and\n      (peeled ?potato)\n      (at ?pot on_stovetop)\n      (clean ?pot)\n    )\n    :effect (and\n      (cooked ?potato)\n      (dirty ?pot)\n    )\n)\n\n;; Action 5: Mix Mixture\n",
        "(:action cool_potatoes\n    :parameters (?potato - ingredient ?oven - appliance)\n    :precondition (and\n      (cooked ?potato)\n      (at ?oven on)\n    )\n    :effect (and\n      (cool ?potato)\n      (off ?oven)\n    )\n)\n```\n\nThese actions reflect the necessary state changes and conditions for each step in the task of freezing mashed potatoes. Note that the step \"boil_wicks\" was interpreted as \"boil potatoes,\" which aligns with the task description and logical sequence.",
        "(:action cool_meatballs\n    :parameters (?p - person ?m - meatball)\n    :precondition (and\n      (owned ?p ?m)\n      (cooked ?m)\n      (at ?m hot)\n    )\n    :effect (and\n      (cooled ?m)\n      (at ?m room_temperature)\n    )\n  )\n\n  ;; Action 3: Freeze the meatballs\n  "
    ],
    "mix": [
        "(:action mix_mixture\n    :parameters (?bowl - utensil ?oil - ingredient ?table - surface)\n    :precondition (and\n      (at ?bowl on_counter)\n      (at ?oil in_bottle)\n      (at ?table clear)\n      (mixed ?bowl)\n    )\n    :effect (and\n      (at ?bowl on_table)\n      (wetter ?bowl)\n      (cluttered ?table)\n    )\n)\n\n;; Action 6: Cool Potatoes\n",
        "(:action mix_sour_milk\n    :parameters (?m - sour_milk ?f - hen_feed)\n    :precondition (and (state ?m available) (state ?f unmixed))\n    :effect (and (state ?f mixed) (content ?f contains_sour_milk))\n)\n\n",
        "(:action collect_livers\n    :parameters (?n - npc ?l - livers)\n    :precondition (and (location ?l packaged) (decoration ?n bare))\n    :effect (and (location ?l out_of_package) (decoration ?n camouflaged))\n)\n\n"
    ],
    "pick": [
        "(:action pick_gamel\n  :parameters (?p - player ?gc - goat_cheese ?c - cheese)\n  :precondition (and (at ?gc to_the_side) (not (in ?gc ?c)))\n  :effect (and (in ?gc ?c) (not (at ?gc to_the_side)))\n)\n\n"
    ],
    "store": [
        "(:action store_gamel\n  :parameters (?p - player ?gc - goat_cheese ?mb - mixing_bowl)\n  :precondition (and (at ?gc to_the_side) (not (stored ?gc ?mb)))\n  :effect (and (stored ?gc ?mb) (not (at ?gc to_the_side)))\n)\n```\n\n### Explanation:\n\n1. **default_to_garnish**: This action moves the goat cheese to the mixing bowl, assuming it is used as a garnish.\n   - Preconditions: The goat cheese is initially \"to the side\" and not in the mixing bowl.\n   - Effects: The goat cheese is now in the mixing bowl.\n\n2. **pick_gamel**: This action represents selecting goat cheese for a specific purpose or cheese type.\n   - Preconditions: The goat cheese is initially \"to the side.\"\n   - Effects: The goat cheese is now associated with the cheese type.\n\n3. **use_as_appropriate_purpose**: This action uses the goat cheese for a specific purpose, such as spreading or firmness.\n   - Preconditions: The goat cheese is soft-ripened and not yet used.\n   - Effects: The goat cheese is marked as used.\n\n4. **store_gamel**: This action stores the goat cheese in the mixing bowl, aligning with proper storage practices.\n   - Preconditions: The goat cheese is initially \"to the side.\"\n   - Effects: The goat cheese is now stored in the mixing bowl.\n\nThese actions reflect the steps and descriptions provided, focusing on the state changes of the goat cheese in terms of location and usage."
    ],
    "make": [
        "(:action make_fizzing_dough\n    :parameters (?p - player ?mixing_bowl - mixing_bowl)\n    :precondition (and (inventory ?p ?mixing_bowl) (empty ?mixing_bowl) (dry ?mixing_bowl))\n    :effect (and (holding_flour_and_salt ?mixing_bowl) (wetter ?mixing_bowl) (slightly_heavier ?mixing_bowl) (blended ?mixing_bowl))\n)\n\n",
        "(:action make_sour_milk_cheese\n    :parameters (?m - sour_milk ?c - cheese)\n    :precondition (and (state ?m available) (state ?c unprepared))\n    :effect (and (state ?c prepared) (content ?c contains_sour_milk))\n)\n```\n\n### Explanation:\n\n1. **gather_chicks**: This action involves gathering the chicks to prepare them for feeding. The precondition checks if the chicks are scattered and unfed. The effect is that they become gathered and ready to feed.\n\n2. **mix_sour_milk**: This action involves mixing sour milk into hen feed. The precondition requires the sour milk to be available and the hen feed to be unmixed. The effect is that the feed becomes mixed and now contains sour milk.\n\n3. **make_sour_milk_cheese**: This action involves preparing sour milk cheese for the hens. The precondition checks if the sour milk is available and the cheese is unprepared. The effect is that the cheese becomes prepared and contains sour milk.\n\nThese actions ensure that the task of using up sour milk for hen food is effectively captured with appropriate state transitions.",
        "(:action cook_meatballs\n    :parameters (?p - person ?m - meatball)\n    :precondition (and\n      (owned ?p ?m)\n      (at ?m room_temperature)\n    )\n    :effect (and\n      (cooked ?m)\n      (at ?m hot)\n    )\n  )\n\n  ;; Action 2: Cool the meatballs\n  "
    ],
    "shape": [
        "(:action shape_to_shape\n    :parameters (?p - player ?npc - npc)\n    :precondition (and (bare ?npc) (visible ?npc))\n    :effect (and (camouflaged ?npc) (invisible ?npc))\n)\n\n"
    ],
    "free": [
        "(:action free_dinosaur_egg\n    :parameters (?p - player ?npc - npc)\n    :precondition (and (camouflaged ?npc) (invisible ?npc))\n    :effect (and (bare ?npc) (visible ?npc))\n)\n```\n\n### Explanation\n\n1. **use_coffee_ground**: This action involves using coffee grounds as a substitute for dirt, affecting the state of the ground floor and pot. The ground floor becomes covered and present, while the pot becomes dirty.\n\n2. **make_fizzing_dough**: This action involves making fizzing dough in a mixing bowl. The state changes include the mixing bowl holding flour and salt, becoming wetter, slightly heavier, and blended.\n\n3. **shape_to_shape**: This action involves shaping the eggs using plastic eggs, which camouflages the NPC and makes it invisible.\n\n4. **free_dinosaur_egg**: This action involves making the dinosaur eggs appear, reverting the NPC to a bare and visible state.\n\nThese actions capture the state changes of the entities involved in the task of making dinosaur eggs, as described.",
        "(:action free_chicken_livers\n    :parameters (?l - livers ?f - freezer)\n    :precondition (and (temperature ?l warmer) (volume ?f less_full) (weight ?f lighter))\n    :effect (and (temperature ?l colder) (texture ?l frozen) (volume ?f fuller) (weight ?f heavier))\n)\n\n"
    ],
    "save": [
        "(:action save-yolks\n  :parameters (?y - yolks ?c - container)\n  :precondition (and (not (inContainer ?y ?c)) (airtight ?c))\n  :effect (and (inContainer ?y ?c) (not (inTub ?y)))\n)\n\n",
        "(:action get_ideas\n    :parameters (?npc - npc ?p - person ?spear - spear ?fish - fish)\n    :precondition (and (at ?npc ?p) (inventory ?p ?spear) (inventory ?p ?fish))\n    :effect (and (ideas ?p ?fish) (not (ideas ?p ?fish)))\n)\n\n",
        "(:action buy_livers\n    :parameters (?l - livers)\n    :precondition (and (cost ?l in_store))\n    :effect (and (cost ?l purchased_for_use))\n)\n\n",
        "(:action gather_chicks\n    :parameters (?c - chick)\n    :precondition (and (location ?c scattered) (state ?c unfed))\n    :effect (and (location ?c gathered) (state ?c ready_to_feed))\n)\n\n"
    ],
    "freeze": [
        "(:action freeze-yolks\n  :parameters (?y - yolks ?c - container ?s - syrup)\n  :precondition (and (inContainer ?y ?c) (airtight ?c) (available ?s))\n  :effect (and (frozen ?y) (not (liquid ?y)))\n)\n\n",
        "(:action freeze_meatballs\n    :parameters (?p - person ?m - meatball ?freezer - appliance)\n    :precondition (and\n      (owned ?p ?m)\n      (cooled ?m)\n      (at ?m room_temperature)\n    )\n    :effect (and\n      (frozen ?m)\n      (at ?m freezer_location)\n    )\n  )\n\n  ;; Action 4: Know how to reheat the cooked meatballs\n  "
    ],
    "learn": [
        "(:action learn_fish_cooking_techniques\n    :parameters (?p - person ?techniques - techniques)\n    :precondition (and (at ?p ?techniques) (knowledge ?techniques unread))\n    :effect (and (knowledge ?techniques read))\n)\n\n",
        "(:action learn_new_recipe\n    :parameters (?npc - npc ?p - person ?kitchen - kitchen)\n    :precondition (and (at ?npc ?kitchen) (at ?p ?kitchen) (cleanness ?kitchen clean))\n    :effect (and (learned_recipe ?p) (cleanness ?kitchen messy))\n)\n```\n\n### Explanation of Actions:\n\n1. **learn_fish_cooking_techniques**:\n    - **Action Name**: learn_fish_cooking_techniques\n    - **Parameters**: `?p` (person), `?techniques` (techniques)\n    - **Preconditions**: The person is at the location of the techniques and the techniques are unread.\n    - **Effect**: The techniques are now read (known).\n\n2. **get_ideas**:\n    - **Action Name**: get_ideas\n    - **Parameters**: `?npc` (npc), `?p` (person), `?spear` (spear), `?fish` (fish)\n    - **Preconditions**: The npc is at the same location as the person, and the person has the spear and fish in their inventory.\n    - **Effect**: The person gets ideas for the fish.\n\n3. **treat_new_member_with_salt**:\n    - **Action Name**: treat_new_member_with_salt\n    - **Parameters**: `?p` (person), `?marshmallow_cream` (marshmallow cream)\n    - **Preconditions**: The person has the marshmallow cream in their inventory and it is by itself.\n    - **Effect**: The marshmallow cream is now blended with salt.\n\n4. **learn_new_recipe**:\n    - **Action Name**: learn_new_recipe\n    - **Parameters**: `?npc` (npc), `?p` (person), `?kitchen` (kitchen)\n    - **Preconditions**: The npc and the person are both at the kitchen, and the kitchen is clean.\n    - **Effect**: The person learns a new recipe and the kitchen becomes messy.\n\nThese actions are designed to capture the intent and logic of the task steps while ensuring the relevant state changes are accurately reflected."
    ],
    "treat": [
        "(:action treat_new_member_with_salt\n    :parameters (?p - person ?marshmallow_cream - marshmallow_cream)\n    :precondition (and (inventory ?p ?marshmallow_cream) (composition ?marshmallow_cream by_itself))\n    :effect (and (composition ?marshmallow_cream blended_with_salt))\n)\n\n",
        "(:action know_how_to_reheat_meatballs\n    :parameters (?p - person ?m - meatball)\n    :precondition (and\n      (owned ?p ?m)\n      (cooked ?m)\n    )\n    :effect (and\n      (knows ?p reheat_meatballs)\n    )\n  )\n)\n```\n\nIn this task, we have created four actions based on the steps provided in the task description:\n1. `cook_meatballs`: This action changes the state of the meatballs from room temperature to cooked and hot.\n2. `cool_meatballs`: This action cools the meatballs down to room temperature after they have been cooked.\n3. `freeze_meatballs`: This action freezes the meatballs and changes their location to the freezer.\n4. `know_how_to_reheat_meatballs`: This action represents the knowledge of reheating the cooked meatballs.\n\nEach action includes the necessary parameters, preconditions, and effects to accurately reflect the state changes of the meatballs and the knowledge state of the person involved."
    ],
    "put": [
        "(:action put_ingredients_in_container\n  :parameters (?yolks - egg_yolks ?container - container)\n  :precondition (and (at ?yolks in_tub) (empty ?container))\n  :effect (and (at ?yolks in_container) (not (at ?yolks in_tub)) (fuller ?container))\n)\n\n",
        "(:action put_lid_on_container\n  :parameters (?container - container ?refrigerator - refrigerator)\n  :precondition (and (at ?container on_countertop) (covered ?yolks) (not (has_lid ?container)))\n  :effect (and (has_lid ?container) (at ?container in_refrigerator) (heavier ?refrigerator) (fuller ?refrigerator) (not (at ?container on_countertop)))\n)\n```\n\n### Explanation\n\n1. **put_ingredients_in_container**:\n   - **Parameters**: The egg yolks and the container.\n   - **Preconditions**: Egg yolks are initially in a tub, and the container is empty.\n   - **Effects**: Egg yolks are moved to the container, and the container becomes fuller.\n\n2. **cover_yolks**:\n   - **Parameters**: The egg yolks and the covering (e.g., melted butter or water).\n   - **Preconditions**: The egg yolks are in the container, and the covering is solid.\n   - **Effects**: The yolks are covered, and the covering becomes liquid (simulating melted butter).\n\n3. **put_lid_on_container**:\n   - **Parameters**: The container and the refrigerator.\n   - **Preconditions**: The container is on the countertop, the yolks are covered, and the container does not have a lid.\n   - **Effects**: The container gets a lid, is moved to the refrigerator, and the refrigerator becomes heavier and fuller. \n\nThese actions accurately reflect the steps required to store egg yolks, focusing on the location and state changes of the entities involved.",
        "(:action cover_yolks\n  :parameters (?yolks - egg_yolks ?covering - velveeta)\n  :precondition (and (at ?yolks in_container) (solid ?covering))\n  :effect (and (covered ?yolks) (liquid ?covering))\n)\n\n",
        "(:action fill_with_distilled_water\n    :parameters (?user - person ?egg_boiler - appliance ?water - liquid)\n    :precondition (and\n      (at ?egg_boiler kitchen)\n      (has ?user ?water)\n      (distilled ?water)\n      (not (full ?egg_boiler))\n    )\n    :effect (and\n      (full ?egg_boiler)\n      (contains ?egg_boiler ?water)\n    )\n)\n```\n\n### Explanation:\n\n1. **clean_heating_unit**: This action involves cleaning the egg boiler's heating unit using a cloth and a vinegar mixture. The preconditions ensure that the egg boiler is in the kitchen, the user has the necessary cleaning tools, and the egg boiler is cleanable. The effect is that the egg boiler becomes clean.\n\n2. **fill_with_distilled_water**: This action involves filling the egg boiler with distilled water. The preconditions ensure that the egg boiler is in the kitchen, the user has distilled water, and the egg boiler is not already full. The effect is that the egg boiler becomes full and contains the distilled water.\n\nThese actions focus on maintaining and preparing the egg boiler for use, aligning with the task description."
    ],
    "default": [
        "(:action default_to_garnish\n  :parameters (?p - player ?gc - goat_cheese ?mb - mixing_bowl)\n  :precondition (and (at ?gc to_the_side) (not (in ?gc ?mb)))\n  :effect (and (in ?gc ?mb) (not (at ?gc to_the_side)))\n)\n\n"
    ],
    "chopped": [
        "(:action chopped_lemon\n    :parameters (?n - npc ?l - livers)\n    :precondition (and (texture ?l solid) (visibility ?n visible))\n    :effect (and (texture ?l smooth) (visibility ?n invisible))\n)\n```\n\n### Explanation:\n- **collect_livers**: This action represents collecting chicken livers from whole chickens. The livers go from being packaged to out of the package, and the NPC's decoration changes from bare to camouflaged.\n- **buy_livers**: This action involves purchasing the livers from a butcher, changing their cost status from being in store to purchased for use.\n- **free_chicken_livers**: This action involves cleaning and freezing the chicken livers, changing their temperature from warmer to colder and their texture to frozen. The freezer's volume and weight increase.\n- **chopped_lemon**: This action assumes chopped lemon is used to make the liver smooth, changing the liver's texture from solid to smooth and the NPC's visibility from visible to invisible."
    ]
}