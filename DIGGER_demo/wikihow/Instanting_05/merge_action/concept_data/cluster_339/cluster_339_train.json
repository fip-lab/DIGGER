{
    "make": [
        "(:action make_child_friendly\n    :parameters (?a - area)\n    :precondition (and\n      (knowledge ?a unselected)\n    )\n    :effect (knowledge ?a selected)\n)\n\n;; Action 2: Have young children participate with safe tasks\n",
        "(:action make_fun\n    :parameters (?l - laundry ?k - kids)\n    :precondition (and\n      (fullness ?l empty)\n      (electric_conductivity ?l off)\n      (availability ?k created)\n    )\n    :effect (and\n      (fullness ?l \"full with polar fleece\")\n      (electric_conductivity ?l on)\n    )\n)\n\n;; Action 4: Encourage teenagers to be more independent\n",
        "(:action make_familiar_routine\n    :parameters (?npc - person)\n    :precondition (and\n                    (wearing ?npc ?w)\n                    (not (routine_familiar ?npc))\n                  )\n    :effect (and\n              (routine_familiar ?npc)\n            )\n)\n\n"
    ],
    "participate": [
        "(:action participate_with_children\n    :parameters (?c - kids ?n - npc)\n    :precondition (and\n      (availability ?c unmade)\n      (visibility ?n visible)\n    )\n    :effect (and\n      (availability ?c created)\n      (decoration ?n camouflaged)\n    )\n)\n\n;; Action 3: Make laundry fun for older kids\n"
    ],
    "encourage": [
        "(:action encourage_teenagers\n    :parameters (?n - npc)\n    :precondition (and\n      (visibility ?n visible)\n    )\n    :effect (visibility ?n invisible)\n)\n```\n\n### Explanation:\n1. **make_child_friendly**:\n   - **Parameters**: ?a (area)\n   - **Precondition**: The area must be in an unselected state.\n   - **Effect**: The area becomes selected, making it child-friendly.\n\n2. **participate_with_children**:\n   - **Parameters**: ?c (kids), ?n (npc)\n   - **Precondition**: The kids must be in an unmade state and the npc must be visible.\n   - **Effect**: The kids become created (available) and the npc gets camouflaged, indicating safe participation.\n\n3. **make_fun**:\n   - **Parameters**: ?l (laundry), ?k (kids)\n   - **Precondition**: The laundry must be empty and off, and the kids must be created (available).\n   - **Effect**: The laundry becomes full with polar fleece and turned on, making the task fun for the kids.\n\n4. **encourage_teenagers**:\n   - **Parameters**: ?n (npc)\n   - **Precondition**: The npc must be visible.\n   - **Effect**: The npc becomes invisible, symbolizing the encouragement for teenagers to be independent.\n\nThese actions reflect the steps and descriptions provided, capturing the state changes and the logic of each task."
    ],
    "load": [
        "(:action load-dishwasher-with-pre-rinsed-plates\n    :parameters (?p - plate ?d - dishwasher)\n    :precondition (and (cleaner ?p) (emptier ?p) (inCabinet ?p) (empty ?d))\n    :effect (and (fuller ?p) (dirtier ?p) (inDishwasher ?p ?d) (not (inCabinet ?p)) (full ?d))\n)\n\n",
        "(:action pack_clothes\n    :parameters (?npc - person ?c - summer_clothes)\n    :precondition (and\n                    (not (packed ?c))\n                  )\n    :effect (and\n              (packed ?c)\n              (not (available ?c))\n            )\n)\n\n",
        "(:action insert_cotton_swab\n    :parameters (?npc - npc)\n    :precondition (and\n                    (checked_ears ?npc)\n                    (not (swab_inserted ?npc)))\n    :effect (and\n              (swab_inserted ?npc)\n              (ear_injury ?npc))\n  )\n\n  ;; Action 3: Watch for signs of ear pain\n  ",
        "(:action wash_blanket\n    :parameters (?blanket - item ?npc - person)\n    :precondition (and (dirty ?blanket) (at ?npc laundry_room))\n    :effect (and (clean ?blanket) (not (dirty ?blanket)))\n)\n```\n\n#### Action 3: inspect_blanket\n```pddl\n"
    ],
    "initiate": [
        "(:action initiate_child\n    :parameters (?c - child ?d - dishwasher)\n    :precondition (and (full ?d) (empty ?c) (not (knowledgeable ?c)))\n    :effect (and (knowledgeable ?c) (not (empty ?c)))\n)\n\n",
        "(:action start_in_infancy\n    :parameters (?npc - npc ?infancy - infancy)\n    :precondition (and (not (exists ?infancy)))\n    :effect (and (exists ?infancy) (created ?infancy))\n)\n\n"
    ],
    "clean": [
        "(:action clean_machine\n    :parameters (?c - child ?d - dishwasher)\n    :precondition (and (knowledgeable ?c) (full ?d) (off ?d))\n    :effect (and (on ?d) (running ?d) (not (off ?d)))\n)\n```\n\n### Descriptions and Corresponding PDDL Actions:\n1. **Load the dishwasher with pre-rinsed plates.**\n   - **Action:** `load-dishwasher-with-pre-rinsed-plates`\n   - **Parameters:** `?p - plate`, `?d - dishwasher`\n   - **Preconditions:** The plate is cleaner, emptier, and in the cabinet, and the dishwasher is empty.\n   - **Effects:** The plate becomes fuller and dirtier, is now in the dishwasher, and the dishwasher becomes full.\n\n2. **Instruct your child how to put soap in the dishwasher and how to begin the wash cycle.**\n   - **Action:** `initiate_child`\n   - **Parameters:** `?c - child`, `?d - dishwasher`\n   - **Preconditions:** The dishwasher is full, the child is empty (not knowledgeable), and the child is not knowledgeable.\n   - **Effects:** The child becomes knowledgeable and is no longer empty.\n\n3. **Complete the wash cycle.**\n   - **Action:** `clean_machine`\n   - **Parameters:** `?c - child`, `?d - dishwasher`\n   - **Preconditions:** The child is knowledgeable, the dishwasher is full, and the dishwasher is off.\n   - **Effects:** The dishwasher is turned on, starts running, and is no longer off.\n\nThese actions reflect the state changes required for each step of the task, ensuring that the preconditions and effects accurately capture the transitions in the entity states.",
        "(:action clean_floor\n    :parameters (?rug - rug ?rug1 - rug)\n    :precondition (dirty ?rug)\n    :effect (and\n              (clean ?rug)\n              (not (dirty ?rug)))\n)\n```\n\n#### Action 3: Limit the use of dryer sheets\n```lisp\n",
        "(:action brush_toddlers_teeth\n    :parameters (?npc - npc ?toddler - toddler ?toothbrush - toothbrush)\n    :precondition (and (at ?npc ?toddler) (available ?toothbrush))\n    :effect (and (brushed ?toddler))\n)\n\n"
    ],
    "learn": [
        "(:action learn_signal\n    :parameters (?npc - npc)\n    :precondition (and\n                    (bare ?npc)\n                    (visible ?npc))\n    :effect (and\n              (camouflaged ?npc)\n              (not (bare ?npc)))\n)\n```\n\n#### Action 2: Keep the floor around the dryer clean\n```lisp\n"
    ],
    "check": [
        "(:action check_sheets\n    :parameters (?dryer_sheet - dryer_sheet)\n    :precondition (and\n                    (in_separate_packages ?dryer_sheet)\n                    (light ?dryer_sheet))\n    :effect (and\n              (in_bowl ?dryer_sheet)\n              (slightly_heavier ?dryer_sheet)\n              (not (in_separate_packages ?dryer_sheet)))\n)\n```\n\n#### Action 4: Stick to brief dry cycles\n```lisp\n",
        "(:action check_child_ears\n    :parameters (?npc - npc)\n    :precondition (and\n                    (visible ?npc)\n                    (not (checked_ears ?npc)))\n    :effect (and\n              (checked_ears ?npc)\n              (not (visible ?npc))\n              (invisible ?npc))\n  )\n\n  ;; Action 2: Insert cotton swab into child's ear (modified to reflect the warning)\n  ",
        "(:action watch_child\n    :parameters (?npc - npc)\n    :precondition (and\n                    (checked_ears ?npc))\n    :effect (and\n              (watching ?npc)\n              (not (invisible ?npc))\n              (visible ?npc))\n  )\n)\n\n(define (problem clean_toddler_ears_problem)\n  (:domain clean_toddler_ears)\n  (:objects\n    toddler - npc\n  )\n  (:init\n    (visible toddler)\n    (not (checked_ears toddler))\n    (not (swab_inserted toddler))\n    (not (ear_injury toddler))\n    (not (watching toddler))\n  )\n  (:goal\n    (and\n      (checked_ears toddler)\n      (watching toddler)\n      (not (ear_injury toddler))\n    )\n  )\n)\n```\n\n### Explanation:\n1. **`check_child_ears`**:\n   - **Parameters**: `?npc` (the toddler)\n   - **Precondition**: The toddler is visible and their ears have not been checked.\n   - **Effect**: The toddler's ears are checked, the toddler becomes invisible (symbolizing a state change after checking), and the state `checked_ears` is set to true.\n\n2. **`insert_cotton_swab`**:\n   - **Parameters**: `?npc` (the toddler)\n   - **Precondition**: The toddler's ears have been checked, and a cotton swab has not been inserted.\n   - **Effect**: A cotton swab is inserted, which results in an ear injury (to reflect the warning against this action).\n\n3. **`watch_child`**:\n   - **Parameters**: `?npc` (the toddler)\n   - **Precondition**: The toddler's ears have been checked.\n   - **Effect**: The state `watching` is set to true, the toddler becomes visible again, reflecting the state change of actively watching the child.\n\nThe problem definition initializes the toddler's state and sets the goal to have the toddler's ears checked and be watched, without causing an ear injury. This ensures that the task-specific goals are aligned with the descriptions provided.",
        "(:action inspect_blanket\n    :parameters (?blanket - item ?npc - person)\n    :precondition (and (clean ?blanket) (dry ?blanket) (at ?npc laundry_room))\n    :effect (inspected ?blanket)\n)\n```\n\n#### Action 4: take_care (Note: This step is vague. It will be modified to \"store_blanket\" as a relevant step.)\n```pddl\n"
    ],
    "stick": [
        "(:action stick_to_dry_cycles\n    :parameters (?npc - npc)\n    :precondition (and\n                    (bare ?npc)\n                    (visible ?npc))\n    :effect (and\n              (camouflaged ?npc)\n              (not (bare ?npc)))\n)\n```\n\n### Description of Actions:\n1. **learn_signal**: This action represents learning the signs that your dryer vent needs cleaning. The NPC (non-player character) changes from a bare and visible state to a camouflaged state.\n2. **clean_floor**: This action involves cleaning the floor around the dryer, specifically focusing on a rug. The rug changes from a dirty state to a clean state.\n3. **check_sheets**: This action limits the use of dryer sheets by moving them from separate packages to a bowl, making them slightly heavier.\n4. **stick_to_dry_cycles**: This action ensures that the NPC sticks to brief dry cycles, changing from a bare and visible state to a camouflaged state.\n\nThese actions capture the intent and state changes described in the task steps.",
        "(:action add_dryer_sheets\n  :parameters (?npc - npc ?dryer_sheets - dryer_sheets ?work_station - work_station)\n  :precondition (and (at ?npc ?work_station) (at ?dryer_sheets ?work_station))\n  :effect (and (in_dryer ?dryer_sheets))\n)\n```\n\n### Explanation:\n\n1. **determine_water_temperature**:\n   - **Action Name**: Determine the temperature of the water.\n   - **Parameters**: ?npc (the person), ?water (the water), ?temp (the temperature).\n   - **Preconditions**: The person is at the water source and the water temperature has not been set.\n   - **Effect**: The water temperature is set to the specified temperature.\n\n2. **choose_detergent**:\n   - **Action Name**: Choose a detergent.\n   - **Parameters**: ?npc (the person), ?detergent (the detergent).\n   - **Preconditions**: The person is at the detergent location and the detergent is in a bottle.\n   - **Effect**: The detergent is chosen for use.\n\n3. **dry_clothes**:\n   - **Action Name**: Dry the clothes.\n   - **Parameters**: ?npc (the person), ?work_station (the drying station), ?clothes (the clothes).\n   - **Preconditions**: The person is at the work station and the work station is created/available.\n   - **Effect**: The clothes are dried.\n\n4. **add_dryer_sheets**:\n   - **Action Name**: Add dryer sheets.\n   - **Parameters**: ?npc (the person), ?dryer_sheets (the dryer sheets), ?work_station (the drying station).\n   - **Preconditions**: The person is at the work station and the dryer sheets are at the work station.\n   - **Effect**: The dryer sheets are added to the dryer.\n\nThese actions should help in modeling the task of washing a toddler's clothes in PDDL format."
    ],
    "choose": [
        "(:action choose_clothes\n    :parameters (?npc - person)\n    :precondition (and\n                    (not (clothes_chosen ?npc))\n                  )\n    :effect (and\n              (clothes_chosen ?npc)\n              (easy_to_pull_on ?npc)\n            )\n)\n\n",
        "(:action choose_detergent\n  :parameters (?npc - npc ?detergent - detergent)\n  :precondition (and (at ?npc ?detergent) (in_bottle ?detergent))\n  :effect (and (chosen ?detergent))\n)\n\n",
        "(:action get_well_balanced_diet\n    :parameters (?npc - npc ?toddler - toddler ?food - food)\n    :precondition (and (at ?npc ?toddler) (available ?food))\n    :effect (and (balanced_diet ?toddler))\n)\n```\n\n### Explanation:\n1. **start_in_infancy**: This action initializes infancy, marking its creation.\n2. **use_toddler_tooth_care_products**: This action involves using specific products for toddler tooth care.\n3. **floss_with_faucet**: This action represents flossing the toddler's teeth using fairy moss.\n4. **brush_toddlers_teeth**: This action represents brushing the toddler's teeth.\n5. **go_to_dentist**: This action involves the NPC taking the toddler to the dentist.\n6. **drink_fluoridated_water**: This action involves giving the toddler fluoridated water to drink.\n7. **get_well_balanced_diet**: This action ensures the toddler is getting a well-balanced diet.\n\nEach action includes parameters, preconditions, and effects that accurately reflect the state changes of the entities involved."
    ],
    "avoid": [
        "(:action avoid_forcing_wear\n    :parameters (?npc - person)\n    :precondition (and\n                    (wearing ?npc ?w)\n                    (not (forced ?npc))\n                  )\n    :effect (and\n              (not (forced ?npc))\n              (comfortable ?npc ?w)\n            )\n)\n\n"
    ],
    "dry": [
        "(:action break_child\n    :parameters (?npc - person ?b - basement)\n    :precondition (and\n                    (not (in_basement ?npc))\n                    (available ?b)\n                  )\n    :effect (and\n              (in_basement ?npc)\n              (not (available ?b))\n            )\n)",
        "(:action dry_blanket\n    :parameters (?blanket - item ?npc - person)\n    :precondition (and (wet ?blanket) (at ?npc laundry_room))\n    :effect (and (dry ?blanket) (not (wet ?blanket)))\n)\n```\n\n#### Action 2: make_oven (Note: This step seems irrelevant to washing an electric blanket. It will be modified to a relevant step.)\n```pddl\n",
        "(:action dry_clothes\n  :parameters (?npc - npc ?work_station - work_station ?clothes - clothes)\n  :precondition (and (at ?npc ?work_station) (created ?work_station))\n  :effect (and (dry ?clothes))\n)\n\n"
    ],
    "use": [
        "(:action use_toddler_tooth_care_products\n    :parameters (?npc - npc ?toddler - toddler ?products - products)\n    :precondition (and (at ?npc ?toddler) (available ?products))\n    :effect (and (used ?products))\n)\n\n"
    ],
    "floss": [
        "(:action floss_with_faucet\n    :parameters (?npc - npc ?toddler - toddler ?fairy_moss - fairy_moss)\n    :precondition (and (at ?npc ?toddler) (available ?fairy_moss))\n    :effect (and (flossed ?toddler) (wetter ?fairy_moss))\n)\n\n"
    ],
    "go": [
        "(:action go_to_dentist\n    :parameters (?npc - npc ?dentist - location)\n    :precondition (and (at ?npc ?location))\n    :effect (and (at ?npc ?dentist))\n)\n\n"
    ],
    "drink": [
        "(:action drink_fluoridated_water\n    :parameters (?npc - npc ?toddler - toddler ?water - water)\n    :precondition (and (at ?npc ?toddler) (available ?water) (fluoridated ?water))\n    :effect (and (drank ?toddler ?water))\n)\n\n"
    ],
    "store": [
        "(:action store_blanket\n    :parameters (?blanket - item ?npc - person)\n    :precondition (and (inspected ?blanket) (at ?npc laundry_room))\n    :effect (stored ?blanket)\n)\n```\n\n### Summary of Actions\n1. **dry_blanket**: Dries the electric blanket.\n2. **wash_blanket**: Washes the electric blanket.\n3. **inspect_blanket**: Inspects the blanket after washing and drying.\n4. **store_blanket**: Stores the electric blanket after inspection.\n\nThese actions reflect the necessary steps to wash an electric blanket, ensuring the state changes are captured correctly."
    ],
    "practice": [
        "(:action practice_wearing_winter_clothes\n    :parameters (?npc - person ?w - winter_clothes)\n    :precondition (and\n                    (clothes_chosen ?npc)\n                    (not (wearing ?npc ?w))\n                  )\n    :effect (and\n              (wearing ?npc ?w)\n              (familiar_with_winter_clothes ?npc)\n            )\n)\n\n"
    ],
    "determine": [
        "(:action determine_water_temperature\n  :parameters (?npc - npc ?water - water ?temp - temperature)\n  :precondition (and (at ?npc ?water) (not (temperature_set ?water)))\n  :effect (and (temperature_set ?water) (water_temperature ?water ?temp))\n)\n\n"
    ]
}