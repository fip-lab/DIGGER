[
    "(:action evaluate ; Evaluate a resource's needs or quality and update its status\n  :parameters (?agent - entity ?resource - object)\n  :precondition (and (not (evaluated ?agent ?resource)))\n  :effect (evaluated ?agent ?resource)\n)",
    "(:action install\n  :parameters (?agent - entity ?target - object ?location - place)\n  :precondition (and (at ?agent ?location) (not (installed ?target)) (ready ?target))\n  :effect (and (installed ?target) (availability ?target available))",
    "(:action make\n    :parameters (?entity - agent ?target - object)\n    :precondition (and (ready ?entity ?target) (not (created ?entity ?target)))\n    :effect (created ?entity ?target))",
    "(:action choose_and_acquire\n    :parameters (?agent - person ?item - object ?location - place)\n    :precondition (and \n                    (at ?agent ?location)\n                    (available ?item ?location)\n                    (not (chosen ?agent ?item))\n                   )\n    :effect (and \n             (chosen ?agent ?item)\n             (owns ?agent ?item)\n             (not (at ?item ?location))",
    "(:action pick ; Select an item and update its status\n    :parameters (?actor - entity ?item - object)\n    :precondition (and (eligible ?actor) (not (picked ?actor ?item)))\n    :effect (picked ?actor ?item)\n)",
    "(:action talk ; Engage in a conversation with an entity for information or recommendations\n    :parameters (?npc - person ?entity - entity)\n    :precondition (and (at ?npc ?location) (at ?entity ?location) (visible ?npc))\n    :effect (and (informed ?npc ?entity) (invisible ?npc) (not (visible ?npc))",
    "(:action listen\n    :parameters (?agent - entity ?source - source_type)\n    :precondition (and (available ?agent) (not (listening_to ?agent ?source)))\n    :effect (listening_to ?agent ?source)\n)",
    "(:action learn ; Learn about a feature or concept and update the knowledge status\n :parameters (?entity - agent ?subject - object)\n :precondition (and (selected ?subject) (not (knowledge_acquired ?entity ?subject)))\n :effect (knowledge_acquired ?entity ?subject))",
    "(:action confirm ; Confirm a feature or status, updating the confirmation state\n  :parameters (?agent - agent ?entity - object ?feature - feature)\n  :precondition (and (knowledge_acquired ?agent ?entity) (not (confirmation_complete ?agent ?feature)))\n  :effect (confirmation_complete ?agent ?feature))",
    "(:action compare ; Compare two resources and update comparison status\n    :parameters (?item1 - object ?item2 - object ?agent - entity)\n    :precondition (and (at ?agent ?item1) (at ?agent ?item2) (not (compared ?item1 ?item2)))\n    :effect (and (compared ?item1 ?item2) (comparison_done ?agent))",
    "(:action understand ; Comprehend a concept or basic information\n    :parameters (?entity - agent ?concept - knowledge)\n    :precondition (not (understood ?entity ?concept))\n    :effect (understood ?entity ?concept)\n)",
    "(:action identify_needs\n  :parameters (?p - player)\n  :precondition (and (understand ?p) (fuel_efficiency_issue ?p))\n  :effect (identified_needs ?p)\n)",
    "(:action identify\n  ; Identify an issue or requirement and update the status\n  :parameters (?agent - entity ?subject - object)\n  :precondition (and (understand ?agent) (issue ?subject))\n  :effect (identified ?agent ?subject)\n)",
    "(:action finish\n    :parameters (?agent - person ?task - task ?location - location)\n    :precondition (and (at ?agent ?location) (task_assigned ?agent ?task) (not (completed ?agent ?task)))\n    :effect (and (completed ?agent ?task) (not (task_assigned ?agent ?task))",
    "(:action research\n    ; Research an object and update its evaluation status\n    :parameters (?agent - agent ?object - object)\n    :precondition (and\n                    (needs_evaluated ?agent ?object)\n                    (budget_set ?agent ?object)\n                   )\n    :effect (research_done ?agent ?object)\n)",
    "(:action decide ; Decide on a course of action and update the decision status\n    :parameters (?agent - entity ?subject - item)\n    :precondition (and (shortlist_created ?agent ?subject) (not (decision_made ?agent ?subject)))\n    :effect (decision_made ?agent ?subject)\n)",
    "(:action determine ; Determine a state or condition and update relevant status\n  :parameters (?actor - entity ?target - object ?context - scenario)\n  \n  :precondition (and\n    (present ?actor ?context)\n    (not (determined ?target))\n  )\n  \n  :effect (and\n    (determined ?target)\n    (update ?target ?context)\n  )",
    "(:action recycle\n    :parameters (?npc - person ?item - object ?container - location)\n    :precondition (and (at ?item ?npc) (contains ?container ?item))\n    :effect (and (at ?item ?container) (not (contains ?npc ?item))"
]