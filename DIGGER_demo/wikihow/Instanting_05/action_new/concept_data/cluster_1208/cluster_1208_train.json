[
    "(:action use ; Utilize an item or resource to achieve a desired state\n  :parameters (?actor - agent ?item - object ?tool - object ?context - context)\n  :precondition (and \n    (possesses ?actor ?item)\n    (available ?tool)\n    (suitable ?item ?context)\n    (prepped ?tool)\n  )\n  :effect (and \n    (used ?item)\n    (context_modified ?context)\n    (tool_changed ?tool)\n  )",
    "(:action peel ; Perform a task to modify and update the state of an item\n    :parameters (?entity - object ?tool - utensil ?agent - person ?resource - substance)\n    :precondition (and\n      (available ?agent)\n      (at ?entity location)\n      (usable ?tool)\n      (available ?resource)\n    )\n    :effect (and\n      (processed ?entity)\n      (used ?tool)\n      (not (raw ?entity))",
    "(:action cool ; Cool an entity and update its state\n  :parameters (?entity - object ?location - location)\n  :precondition (and\n    (transformed ?entity)\n    (at ?location active)\n  )\n  :effect (and\n    (cooled ?entity)\n    (at ?location inactive)\n  )",
    "(:action mix ; Combine resources and update the state of materials\n:parameters (?agent - entity ?resource1 - object ?resource2 - object)\n:precondition (and (available ?agent) (state ?resource1 available) (state ?resource2 unmixed))\n:effect (and (state ?resource2 mixed) (content ?resource2 contains_resource1))",
    "(:action pick ; Pick an item and update its location\n:parameters (?agent - agent ?item - object ?container - location)\n:precondition (and (at ?item ?location) (not (in ?item ?container)))\n:effect (and (in ?item ?container) (not (at ?item ?location))",
    "(:action store ; Store an item in a designated location\n  :parameters (?entity - object ?location - object)\n  :precondition (and (at ?entity to_the_side) (not (stored ?entity ?location)))\n  :effect (and (stored ?entity ?location) (not (at ?entity to_the_side))",
    "(:action make\n  :parameters (?actor - agent ?resource - object ?state_before - state ?state_after - state)\n  :precondition (and \n    (has ?actor ?resource) ; The actor has the resource they will work on\n    (state ?resource ?state_before) ; The resource is in the initial state\n  )\n  :effect (and \n    (state ?resource ?state_after) ; The resource transitions to the final state\n    (transformed ?resource) ; Mark the resource as transformed or processed\n  )\n)",
    "(:action shape ; Transform an entity's state to adapt its visibility and appearance\n :parameters (?entity - object ?context - context)\n :precondition (and (visible ?entity) (modifiable ?entity ?context))\n :effect (and (camouflaged ?entity ?context) (invisible ?entity))",
    "(:action free ; Free an entity or resource, altering its state\n    :parameters (?entity - object ?context - context)\n    :precondition (and (restricted ?entity ?context) (concealed ?entity))\n    :effect (and (unrestricted ?entity ?context) (revealed ?entity))",
    "(:action save ; Save an entity and update its status\n :parameters (?entity - object ?target - location)\n :precondition (and (not (stored ?entity ?target)) (suitable ?target))\n :effect (and (stored ?entity ?target) (not (pending ?entity))",
    "(:action freeze\n  :parameters (?entity - item ?container - storage ?method - cooling_method)\n  :precondition (and \n    (stored ?entity ?container)\n    (suitable ?container ?method)\n    (prepared_for_freezing ?entity)\n  )\n  :effect (and\n    (frozen ?entity)\n    (not (liquid ?entity))",
    "(:action learn ; Learn a new skill or concept and update related states\n    :parameters (?agent - entity ?subject - object ?location - place)\n    :precondition (and (present ?agent ?location) (requires_learning ?subject) (adequate_condition ?location))\n    :effect (and (learned ?agent ?subject) (updated_condition ?location))",
    "(:action put\n    :parameters (?actor - agent ?item - object ?location - place ?condition - state)\n    :precondition (and \n        (available ?actor)\n        (at ?item ?initial_location)\n        (not (condition_met ?item ?condition))\n    )\n    :effect (and \n        (at ?item ?location)\n        (condition_met ?item ?condition)\n        (not (at ?item ?initial_location))",
    "(:action default ; Default action to move a resource and update its location\n  :parameters (?entity - object ?container - location)\n  :precondition (and (at ?entity ?initial_location) (not (in ?entity ?container)))\n  :effect (and (in ?entity ?container) (not (at ?entity ?initial_location))",
    "(:action chopped\n  :parameters (?npc - entity ?item - resource ?state1 - state ?state2 - state)\n  :precondition (and (current_state ?item ?state1) (visibility ?npc visible))\n  :effect (and (current_state ?item ?state2) (visibility ?npc invisible))"
]