[
    "(:action make ; Make a transformation in an entity's state\n  :parameters (?entity - object ?attribute - attribute ?state1 - state ?state2 - state)\n  \n  :precondition (and \n                  (has_attribute ?entity ?attribute ?state1)\n                  (not (has_attribute ?entity ?attribute ?state2))\n                )\n  \n  :effect (and \n            (not (has_attribute ?entity ?attribute ?state1))",
    "(:action participate ; Engage in an activity with others and update the participation status\n  :parameters (?participant - entity ?activity - task)\n  :precondition (and\n    (availability ?participant unmade)\n    (visibility ?activity visible)\n  )\n  :effect (and\n    (availability ?participant engaged)\n    (task_status ?activity updated)\n  )",
    "(:action encourage ; Encourage an entity by transforming its state\n  :parameters (?entity - object ?context - context)\n  :precondition (and\n    (state-visible ?entity ?context)\n    (not (state-encouraged ?entity ?context))\n  )\n  :effect (and\n    (state-encouraged ?entity ?context)\n    (not (state-visible ?entity ?context))",
    "(:action load ; General action to load or prepare an item\n  :parameters (?entity - object ?location - place ?agent - person)\n  :precondition (and\n                 (available ?entity)\n                 (at ?agent ?location)\n                 (not (loaded ?entity ?location)))\n  :effect (and\n           (loaded ?entity ?location)\n           (not (available ?entity))",
    "(:action initiate ; Initiate a process or state, updating the entity's condition\n  :parameters (?entity - entity ?target - target)\n  :precondition (and \n    (or \n      (and (full ?target) (empty ?entity)) \n      (not (exists ?target))\n    )\n  )\n  :effect (and \n    (or \n      (knowledgeable ?entity) \n      (exists ?target)\n    )",
    "(:action clean ; Universal clean action for various cleaning tasks\n  :parameters (?agent - agent ?target - object)\n  :precondition (and \n    (capable ?agent) ; The agent must be capable of performing the task\n    (dirty ?target)) ; The target must be in a state that requires cleaning\n  :effect (and\n    (clean ?target) ; The target is now clean\n    (not (dirty ?target))",
    "(:action learn_signal\n       :parameters (?npc - npc)\n       :precondition (and\n                       (bare ?npc)\n                       (visible ?npc))\n       :effect (and\n                 (camouflaged ?npc)\n                 (not (bare ?npc))",
    "(:action learn ; Learn a new state or acquire a skill\n    :parameters (?entity - entity ?state - state)\n    :precondition (and\n                    (current ?entity ?state-current)\n                    (can_learn ?entity ?state))\n    :effect (and\n              (learned ?entity ?state)\n              (not (current ?entity ?state-current))",
    "(:action check\n    :parameters (?agent - entity ?target - object)\n    :precondition (and \n                   (available ?agent) \n                   (not (checked ?agent ?target)))\n    :effect (and \n             (checked ?agent ?target)\n             (update_state ?target))",
    "(:action stick ; Universal action for adhering to task-specific procedures\n  :parameters (?actor - entity ?target - object ?location - place)\n  :precondition (and \n                 (present ?actor ?location) \n                 (not (processed ?actor ?target)))\n  :effect (and \n           (processed ?actor ?target)\n           (or \n               (camouflaged ?actor)\n               (clean ?target)\n               (in_container ?target))",
    "(:action choose ; Choose a resource and update its status\n    :parameters (?agent - agent ?resource - resource)\n    :precondition (and\n                    (available ?resource)\n                    (not (chosen ?resource))\n                  )\n    :effect (and\n              (chosen ?resource)\n              (updated_status ?agent ?resource)\n            )",
    "(:action avoid ; Avoid forcing an entity into an undesired state, ensuring comfort or suitability\n  :parameters (?entity - agent ?state - condition ?attribute - attribute)\n  :precondition (and\n                  (in_state ?entity ?state)\n                  (not (forced ?entity))\n                )\n  :effect (and\n            (not (forced ?entity))",
    "(:action dry ; Dry an item or place an entity in a state that facilitates drying\n    :parameters (?entity - object ?location - location ?agent - person)\n    :precondition (and \n                    (available ?location)\n                    (at ?agent ?location)\n                    (or \n                        (wet ?entity)\n                        (not (in_basement ?agent))\n                    )\n                  )\n    :effect (and \n              (or \n                  (dry ?entity)\n                  (in_basement ?agent)\n              )",
    "(:action use ; Use a resource on a target entity\n:parameters (?agent - agent ?target - entity ?resource - resource)\n:precondition (and (at ?agent ?target) (available ?resource))\n:effect (used ?resource))",
    "(:action floss ; Perform flossing and update the state of entities\n    :parameters (?agent - entity ?target - entity ?tool - object)\n    :precondition (and (at ?agent ?target) (available ?tool))\n    :effect (and (flossed ?target) (used ?tool))",
    "(:action go ; Move an entity to a specified location\n:parameters (?entity - object ?destination - location)\n:precondition (and (at ?entity ?current_location))\n:effect (and (not (at ?entity ?current_location))",
    "(:action drink ; Drink a liquid and update the state of the consumer\n    :parameters (?consumer - agent ?liquid - liquid)\n    :precondition (and (at ?consumer) (available ?liquid) (suitable ?liquid))\n    :effect (drank ?consumer ?liquid)\n)",
    "(:action store ; Store an item after a series of processing steps\n  :parameters (?item - object ?npc - person ?location - place)\n  :precondition (and (processed ?item) (at ?npc ?location))\n  :effect (stored ?item)\n)",
    "(:action practice ; Practice a task and update familiarity status\n:parameters (?npc - person ?task - task)\n:precondition (and \n                (task_chosen ?npc ?task)\n                (not (familiar_with ?npc ?task))\n              )\n:effect (and \n          (familiar_with ?npc ?task)\n          (completed ?npc ?task)\n        )",
    "(:action determine\n  :parameters (?agent - entity ?object - object ?attribute - attribute ?value - value)\n  :precondition (and (at ?agent ?object) (not (attribute_set ?object ?attribute)))\n  :effect (and (attribute_set ?object ?attribute) (?attribute ?object ?value))"
]