[
    "(:action cover ; Cover or transform an item's state using available resources\n    :parameters (?entity - object ?resource - object)\n    :precondition (and \n                   (needs_covering ?entity) \n                   (resource_available ?resource))\n    :effect (and \n             (covered ?entity) \n             (not (needs_covering ?entity))",
    "(:action treat ; Treat a subject to change its state\n :parameters (?subject - entity ?object - feature)\n :precondition (and\n                 (requires_treatment ?subject ?object)\n                 (available_resources ?object)\n               )\n :effect (and\n           (treated ?subject ?object)\n           (not (requires_treatment ?subject ?object))",
    "(:action create_style\n    :parameters (?agent - entity ?style - style ?material - material)\n    :precondition (and \n                    (has_ability ?agent ?style) \n                    (current_form ?material original)\n                    (desire_change ?agent ?style))\n    :effect (and \n              (current_form ?material ?style)\n              (not (current_form ?material original))",
    "(:action learn ; Learn a skill or acquire knowledge\n  :parameters (?entity - agent ?skill - skill)\n  :precondition (and (not (knows ?entity ?skill)))\n  :effect (knows ?entity ?skill))",
    "(:action braid ; Braid an entity to modify its appearance\n    :parameters (?entity - object)\n    :precondition (and (decoration ?entity initial_state) (visibility ?entity initial_visibility))\n    :effect (and (decoration ?entity modified_state) (visibility ?entity modified_visibility))",
    "(:action secure\n    :parameters (?entity - object ?resource - object)\n    :precondition (and \n                    (state ?entity initial)\n                    (location ?resource available)\n                  )\n    :effect (and \n              (state ?entity transformed)\n              (location ?resource utilized)\n            )",
    "(:action divide ; Divide an entity into distinct parts or states\n    :parameters (?entity - object ?context - context)\n    :precondition (and \n                    (divisible ?entity)\n                    (not (divided ?entity))\n                    (contextual_precondition ?entity ?context)\n                  )\n    :effect (and \n              (divided ?entity)\n              (contextual_effect ?entity ?context)\n            )",
    "(:action pull ; Perform a pull operation and transform the state\n  :parameters (?entity - object ?state - state)\n  :precondition (and \n                  (current_state ?entity ?state)\n                  (not (desired_state ?entity))\n                )\n  :effect (desired_state ?entity)\n)",
    "(:action sweep ; Sweep or modify an entity's state\n:parameters (?n - npc ?attribute - property ?initial_state - state ?final_state - state)\n:precondition (and (?attribute ?n ?initial_state))\n:effect (and (?attribute ?n ?final_state))",
    "(:action start ; Initiate a process and update its state\n    :parameters (?entity - object ?action - process)\n    :precondition (and (ready_to_start ?entity) (process_state ?entity not_started))\n    :effect (and (process_state ?entity started))",
    "(:action add ; Add or modify an element to change its state\n    :parameters (?entity - object ?target - location)\n    :precondition (and \n        (ready_for_addition ?entity) \n        (suitable ?target)\n        (not (added ?entity ?target)))\n    :effect (and \n        (added ?entity ?target)\n        (updated_state ?entity ?target)\n        (not (ready_for_addition ?entity))",
    "(:action cross ; Cross a section, panel, or entity and adjust its status\n    :parameters (?entity - entity_type)\n    :precondition (and \n        (or (selected ?entity) (unselected ?entity))\n        (or (unadjusted ?entity) (carefully_placed ?entity))\n    )\n    :effect (and \n        (crossed ?entity)\n        (selected ?entity)\n        (not (unselected ?entity))",
    "(:action bend ; Bend a material or object into the desired state\n  :parameters (?npc - person ?material - object)\n  :precondition (and\n                  (ready-to-bend ?npc ?material)\n                  (not (bent ?material))\n                )\n  :effect (bent ?material)\n)",
    "(:action brush ; Brush an entity to change its state from tangled to smooth\n    :parameters (?entity - object)\n    :precondition (and (state ?entity tangled))\n    :effect (and (state ?entity smooth))",
    "(:action ModifyAttribute\n  :parameters (?entity - entity ?attribute - attribute)\n  :precondition (not (has_attribute ?entity ?attribute))\n  :effect (has_attribute ?entity ?attribute))",
    "(:action GrabSmallSection ; Grab a small section and mark it as selected\n:parameters (?actor - entity ?section - section)\n:precondition (and (parted ?actor) (not (selected ?section)))\n:effect (selected ?section))",
    "(:action DivideSection ; Universally divide a section into subsections\n    :parameters (?entity - object ?context - context)\n    :precondition (and (selected ?entity) (contextual_condition ?context))\n    :effect (divided ?entity))",
    "(:action TieStrandsIntoKnot\n    :parameters (?entity - entity ?section - section)\n    :precondition (and (divided ?section) (not (knotted ?entity ?section)))\n    :effect (knotted ?entity ?section)\n)",
    "(:action AddHairToStrand ; Add a feature to an entity and update its status\n    :parameters (?entity - object ?feature - feature)\n    :precondition (and (has_state ?entity ?initial_state))\n    :effect (and (updated_state ?entity ?new_state))",
    "(:action TieStrandsAgain ; Tie strands again to form a strong knot\n    :parameters (?entity - object)\n    :precondition (reinforced ?entity)\n    :effect (knotted ?entity)\n)",
    "(:action TieBraidOff\n    :parameters (?entity - object)\n    :precondition (knotted ?entity)\n    :effect (braided ?entity)\n)",
    "(:action GatherTransform ; Transform an entity's state from one form to another\n    :parameters (?entity - object ?state1 - state ?state2 - state)\n    :precondition (and (not (?state2 ?entity)) (?state1 ?entity))\n    :effect (and (?state2 ?entity) (not (?state1 ?entity))",
    "(:action TwistIntoBun\n    :parameters (?entity - object ?style - hairstyle)\n    :precondition (and (prepared ?entity) (not (styled ?entity ?style)))\n    :effect (and (styled ?entity ?style) (secured ?style))",
    "(:action PullHair ; Modify the state of an entity by altering its properties\n    :parameters (?entity - object ?tool - tool)\n    :precondition (and (prepared ?entity) (attached ?tool))\n    :effect (and (modified ?entity) (used ?tool) (not (attached ?tool))",
    "(:action ContinueBraiding\n    :parameters (?n - npc ?tool - object)\n    :precondition (and (or (plain ?n) (braided ?n)) (not (invisible ?n)))\n    :effect (and \n        (when (plain ?n) (and (braided ?n) (not (plain ?n))",
    "(:action re ; Redo or repair an entity to improve its condition\n  :parameters (?agent - person ?entity - object)\n  :precondition (and (needs_repair ?entity) (can_repair ?agent ?entity))\n  :effect (and (repaired ?entity) (not (needs_repair ?entity))",
    "(:action sliplargerbeads ; Organize and position items from disordered to ordered state\n    :parameters (?entity - entity ?container - container)\n    :precondition (and (location ?entity off ?container) (organization ?entity random))\n    :effect (and (location ?entity on ?container) (organization ?entity ordered))",
    "(:action braiding ; Braid a resource to change its state\n :parameters (?entity - object)\n :precondition (and \n                 (entity_state ?entity initial_state)\n                 (visibility ?entity visible)\n               )\n :effect (and\n           (entity_state ?entity transformed_state)\n           (visibility ?entity invisible)\n         )",
    "(:action transform_state\n    :parameters (?entity - thing ?descriptor - attribute)\n    :precondition (not (has_attribute ?entity ?descriptor))\n    :effect (has_attribute ?entity ?descriptor)\n)",
    "(:action transform_state ; General action to transform the state of an entity\n  :parameters (?entity - object ?attribute - attribute_type)\n  :precondition (and (current_state ?entity ?attribute) (not (target_state ?entity ?attribute)))\n  :effect (target_state ?entity ?attribute)\n)",
    "(:action PlaitAsNormal ; Perform a standard task on an entity and update its status\n    :parameters (?entity - object ?task - task)\n    :precondition (and (ready_for_task ?entity ?task) (not (completed ?entity ?task)))\n    :effect (completed ?entity ?task)\n)",
    "(:action process_material\n    :parameters (?material - object)\n    :precondition (and (not (processed ?material)) (unprocessed ?material))\n    :effect (and (processed ?material) (not (unprocessed ?material))",
    "(:action MakeCompletedNecklace\n    :parameters (?entity - object ?state1 - state ?state2 - state)\n    :precondition (and (not (?state2 ?entity)) (?state1 ?entity))\n    :effect (and (?state2 ?entity) (not (?state1 ?entity))",
    "(:action TransformAndUseResource\n    :parameters (?resource - object ?form - state ?use - state)\n    :precondition (and (in_state ?resource ?form) (not (in_state ?resource ?use)))\n    :effect (in_state ?resource ?use)\n)"
]