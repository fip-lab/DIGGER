[
    "(:action check\n    :parameters (?agent - entity ?target - resource ?context - environment)\n    :precondition (and (available ?agent) (in ?agent ?context) (not (verified ?agent ?target ?context)))\n    :effect (and (verified ?agent ?target ?context))",
    "(:action ask\n  ; Ask for information or objects and update status\n  :parameters (?agent - entity ?resource - object)\n  :precondition (and \n    (or \n      (not (has_info ?agent ?resource))\n      (withheld ?resource)\n      (location ?resource on_counter)\n    )\n  )\n  :effect (and \n    (or \n      (has_info ?agent ?resource)\n      (given ?resource)\n      (location ?resource in_hand)\n    )",
    "(:action visit ; Visit a resource to gather information or update status\n    :parameters (?entity - agent ?resource - place)\n    :precondition (and (not (has_info ?entity)))\n    :effect (and (has_info ?entity))",
    "(:action choose ; Choose a resource or update a status for a task\n  :parameters (?agent - entity ?target - resource)\n  :precondition (and \n    (or (not (info_acquired ?agent ?target))\n        (unselected ?target)\n        (decoration ?agent bare)\n        (not (theme_selected ?target))\n        (complex ?target))\n    (or (selected ?target) (equals ?target step unselected)))\n  :effect (and \n    (or (info_acquired ?agent ?target)\n        (selected ?target)\n        (decoration ?agent camouflaged)\n        (theme_selected ?target)\n        (named ?target))",
    "(:action pick ; Pick an item based on certain criteria and update its status\n    :parameters (?npc - entity ?item - object ?context - context_type)\n    :precondition (and \n        (or (enjoyed ?npc ?item) (matches_theme ?item ?context))\n        (not (selected ?item))\n    )\n    :effect (and \n        (selected ?item)\n        (named ?item)\n    )",
    "(:action manage\n  ; Universal action for managing resources or states\n  :parameters (?agent - entity ?target - object ?context - context)\n  \n  :precondition (and \n    (exists (?state - state) (not (in_desired_state ?agent ?target ?context ?state)))\n    (can_manage ?agent ?target ?context)\n  )\n  \n  :effect (and\n    (forall (?state - state) (not (in_desired_state ?agent ?target ?context ?state))",
    "(:action strike\n  ; Generalized action to strike a deal or make an adjustment\n  :parameters (?agent - agent ?resource - resource ?condition - condition)\n  \n  :precondition (and (visible ?agent) (location ?resource initial_location) (stability ?condition initial_state))\n  \n  :effect (and (location ?resource target_location) (stability ?condition target_state))",
    "(:action create_resource\n  ; Create or establish a new resource, system, or state for a variety of contexts\n  :parameters (?agent - entity ?resource - object ?context - context_type)\n  :precondition (and\n    (not (resource_ready ?resource))\n    (contextual_conditions ?context)\n  )\n  :effect (and\n    (resource_ready ?resource)\n    (contextual_effects ?context)\n  )",
    "(:action bring\n  ; Bring a resource to initiate or support a task or state transition\n  :parameters (?agent - agent ?resource - object)\n  :precondition (and (prepared ?agent ?resource))\n  :effect (and (ready ?agent ?resource))",
    "(:action start\n  ; Begin a task or initiate a process, updating the status accordingly.\n  :parameters (?entity - agent ?target - object)\n  \n  :precondition (and \n    (or \n      (focus ?entity focused_on_task)\n      (not (exists ?target))\n      (not (conversation_initiated ?entity))\n      (not (knows_target ?entity ?target))\n    )\n    (or \n      (task_type making_bracelet)\n      (task_type bookclub)\n      (task_type conversation)\n      (task_type teaching)\n    )\n  )\n  \n  :effect (and \n    (or \n      (focus ?entity admiring_bracelet)\n      (exists ?target)\n      (conversation_initiated ?entity)\n      (knows_target ?entity ?target)\n    )",
    "(:action keep ; Maintain or update the state of an entity or group\n  :parameters (?entity - agent ?context - context)\n  :precondition (and (active ?entity ?context))\n  :effect (updated ?entity ?context)\n)",
    "(:action set ; Generic action to set a parameter or condition for a task\n  :parameters (?entity - object ?target - object ?attribute - attribute ?state - state)\n  :precondition (and (in ?entity ?target) (not (set ?target ?attribute)))\n  :effect (and (set ?target ?attribute) (updated_state ?target ?state))",
    "(:action write ; Write or communicate something and update the state\n  :parameters (?actor - person ?target - entity ?context - context)\n  :precondition (and \n    (involved ?actor ?context) \n    (not (task_completed ?context))\n  )\n  :effect (and \n    (task_completed ?context) \n    (state_transformed ?actor ?target)\n  )",
    "(:action stick ; Select and commit to a specific choice or strategy\n  :parameters (?entity - agent ?option - choice)\n  :precondition (and (step ?entity unselected) (choice ?entity nameless))\n  :effect (and (step ?entity selected) (choice ?entity named))",
    "(:action venture ; Explore and encourage new experiences or states\n  :parameters (?entity - agent ?context - environment ?state - status)\n  :precondition (and (current_state ?entity ?context bare))\n  :effect (and (current_state ?entity ?context camouflaged))",
    "(:action read ; Engage with a resource, modifying its state and the entity's engagement status\n :parameters (?n - npc ?r - resource)\n :precondition (and (engagement_status ?n open) (state ?r initial))\n :effect (and (engagement_status ?n closed) (state ?r transformed))",
    "(:action peruse ; Peruse a resource and update its status\n  :parameters (?entity - agent ?resource - object)\n  :precondition (and (unexplored ?resource))\n  :effect (and (explored ?resource) (not (unexplored ?resource))",
    "(:action encourage ; Motivate and guide individuals to engage in tasks\n  :parameters (?npc - person ?task - activity)\n  :precondition (and (capable ?npc) (not (engaged ?npc ?task)))\n  :effect (engaged ?npc ?task)\n)",
    "(:action market ; Market a group or resource to new entities\n    :parameters (?facilitator - agent ?entity - participant ?group - collective)\n    :precondition (and (prepared ?facilitator) (not (integrated ?entity ?group)))\n    :effect (integrated ?entity ?group)\n)"
]