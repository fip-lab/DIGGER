[
    "(:action remove ; Generic action to remove or clean an entity or state\n    :parameters (?actor - agent ?target - object ?method - method)\n    :precondition (and \n                    (available ?actor)\n                    (not (removed ?target))\n                    (applicable ?method ?target))\n    :effect (and\n              (removed ?target)\n              (apply_effect ?method ?target))",
    "(:action wash ; Universal action to wash or clean a target\n    :parameters (?a - agent ?target - physical_entity ?cleanser - cleanser ?tool - tool)\n    :precondition (and\n        (available ?a)\n        (not (cleaned ?target))\n        (or (inventory ?a ?cleanser) (available ?tool))\n    )\n    :effect (and\n        (cleaned ?target)\n        (not (inventory ?a ?cleanser))",
    "(:action wet ; Wet an entity and update its status\n  :parameters (?entity - object ?tool - object)\n  :precondition (and \n    (or (trimmed ?entity) (shaved ?entity))\n    (not (wet ?entity))\n    (not (wet ?tool)))\n  :effect (and \n    (wet ?entity)\n    (or (dry ?entity) (wet ?tool))",
    "(:action gather ; Gather or choose a resource, enabling progress in task\n  :parameters (?agent - person ?resource - object)\n  :precondition (and (not (selected ?agent ?resource)) (available ?resource))\n  :effect (selected ?agent ?resource)\n)",
    "(:action wait ; Wait for a condition to be fulfilled and update status\n    :parameters (?entity - object)\n    :precondition (and (prepared ?entity) (not (updated ?entity)))\n    :effect (updated ?entity)\n)",
    "(:action maintain ; Maintain a resource by following a sequence of preparatory and finishing steps\n    :parameters (?npc - person ?resource - object)\n    :precondition (and \n        (moisturized ?npc) \n        (not (maintained ?npc))\n        (prepared ?resource)\n    )\n    :effect (and \n        (maintained ?npc)\n        (not (prepared ?resource))",
    "(:action take ; Universal action for taking or transforming an entity\n  :parameters (?actor - entity ?item - object)\n  :precondition (and\n                  (available ?actor)\n                  (not (taken ?actor ?item))\n                  (or \n                    (has_hair ?item)\n                    (inventory ?actor ?item)\n                    (holding ?actor ?item)))\n  :effect (and\n            (taken ?actor ?item)\n            (or \n              (not (has_hair ?item))",
    "(:action comb ; Comb through a resource to update status\n  :parameters (?tool - object ?target - entity)\n  :precondition (and \n    (prepared ?target) ; Generic preparation state\n    (not (processed ?target)) ; Ensure the target is not yet processed\n    (is_tool_ready ?tool) ; Ensure the tool is ready for use\n  )\n  :effect (and \n    (processed ?target) ; Update state to reflect processing\n  )\n)",
    "(:action make ; Universal action to transform the state of an entity\n  :parameters (?entity - object ?state_before - state ?state_after - state)\n  :precondition (and (current_state ?entity ?state_before) (not (current_state ?entity ?state_after)))\n  :effect (and (current_state ?entity ?state_after) (not (current_state ?entity ?state_before))",
    "(:action plan ; Universal action to prepare and update the state for various tasks\n :parameters (?entity - object ?state - state)\n :precondition (and \n   (available ?entity) \n   (not (planned ?entity ?state))\n )\n :effect (planned ?entity ?state)\n)",
    "(:action freeze ; Freeze an item and update its state\n:parameters (?agent - entity ?item - object ?container - container)\n:precondition (and \n  (or (inventory ?agent ?item) (location ?item in_cabinet))\n  (or (and (location ?container ?item) (temperature ?item cooler)) \n      (inventory ?agent ?item))\n)\n:effect (and \n  (frozen ?item)\n  (temperature ?item colder)\n  (location ?item in_freezer)\n)",
    "(:action add ; Add an item to a target and update its status\n :parameters (?item - object ?target - object)\n :precondition (and (location ?item in_container) (not (applied ?item ?target)))\n :effect (and (location ?item in_target_location) (applied ?item ?target))",
    "(:action shave\n  :parameters (?p - person ?t - towel ?b - body_part)\n  :precondition (and (location water out_of_faucet) (applied deodorant ?b))\n  :effect (and (clean ?t) (shaved ?b))",
    "(:action chip ; Remove an undesired state from an entity\n  :parameters (?entity - object ?condition - state)\n  :precondition (and (undesired_state ?entity ?condition))\n  :effect (and\n    (desired_state ?entity ?condition)\n    (not (undesired_state ?entity ?condition))",
    "(:action run ; Perform a task involving resource manipulation and state transformation\n  :parameters (?entity - object ?location - place ?condition - setting)\n  :precondition (and\n                  (located ?entity ?location)\n                  (condition_met ?condition)\n                )\n  :effect (and\n            (state_transformed ?entity)\n            (not (located ?entity ?location))",
    "(:action repeat_clean_process\n    :parameters (?resource - object ?target - object ?tool - object ?location1 - location ?location2 - location)\n    :precondition (and\n                    (location ?resource ?location1)\n                    (affected_by ?target ?resource)\n                    (location ?tool on ?target)\n                  )\n    :effect (and\n              (not (affected_by ?target ?resource))",
    "(:action apply ; Apply a product or perform an application-related task\n    :parameters (?entity - entity ?item - item)\n    :precondition (and\n                    (prepared ?entity) ; A general condition for readiness\n                    (available ?item)  ; Ensures the item to be applied is available\n                    (not (applied ?entity ?item))) ; The item hasn't been applied yet\n    :effect (and\n              (applied ?entity ?item) ; Marks the item as applied\n              (transformed_state ?entity ?item))",
    "(:action in ; Apply and verify a process\n  :parameters (?npc - agent ?process - process)\n  :precondition (and (prepared ?npc) (applied ?process ?npc) (not (verified ?npc ?process)))\n  :effect (verified ?npc ?process)\n)",
    "(:action LayOutTowel ; Lay out an object and update its status\n    :parameters (?item - object)\n    :precondition (not (laid_out ?item))\n    :effect (laid_out ?item))",
    "(:action SitComfortably\n    :parameters (?entity - entity)\n    :precondition (not (comfortable ?entity))\n    :effect (comfortable ?entity)\n)",
    "(:action RubWaxStrip\n    :parameters (?entity - object)\n    :precondition (and (not (processed ?entity)) (intact ?entity))\n    :effect (processed ?entity)\n)",
    "(:action PeelStrips\n    :parameters (?entity - object)\n    :precondition (and (intact ?entity) (warmed ?entity))\n    :effect (and (not (intact ?entity))",
    "(:action ApplyStripToSkin\n    :parameters (?strip - strip ?entity - agent)\n    :precondition (peeled ?strip)\n    :effect (applied ?strip ?entity)\n)",
    "(:action RubStripOnSkin ; Secure a strip on a person after it has been applied\n    :parameters (?s - strip ?p - person)\n    :precondition (and (applied ?s ?p) (not (secured ?s ?p)))\n    :effect (secured ?s ?p)\n)",
    "(:action PullStrip\n    :parameters (?s - strip ?p - person)\n    :precondition (secured ?s ?p)\n    :effect (removed ?s ?p)\n)",
    "(:action manipulate_resource\n    :parameters (?entity - resource ?actor - agent)\n    :precondition (secured ?entity ?actor)\n    :effect (removed ?entity ?actor)\n)",
    "(:action grasp\n    :parameters (?entity - object ?actor - agent)\n    :precondition (secured ?entity ?actor)\n    :effect (grasped ?entity ?actor)\n)",
    "(:action ApplyWaxStrips ; Apply a transformative process to achieve a desired state\n  :parameters (?entity - object)\n  :precondition (not (desired_state ?entity))\n  :effect (desired_state ?entity)\n)",
    "(:action PerformTask\n    :parameters (?actor - entity ?target - object)\n    :precondition (and (available ?actor) (not (completed ?target)))\n    :effect (completed ?target)\n)",
    "(:action modify_state ; Modify a state attribute of an entity\n:parameters (?entity - object ?attribute - attribute)\n:precondition (not (state_modified ?entity ?attribute))\n:effect (state_modified ?entity ?attribute))",
    "(:action UseBabyPowder ; Apply baby powder to an entity and update its status\n    :parameters (?entity - object)\n    :precondition (not (powder_applied ?entity))\n    :effect (powder_applied ?entity)\n)",
    "(:action ModifyState\n    :parameters (?entity - object ?target - object)\n    :precondition (and (not (transformed ?target)) (initial_state ?target))\n    :effect (and (transformed ?target) (altered_state ?target))",
    "(:action WaxHair\n    :parameters (?entity - npc)\n    :precondition (and (prepared ?entity) (condition_met ?entity))\n    :effect (transformed ?entity)\n)",
    "(:action PerformWaxingTask\n    :parameters (?entity - object ?area - area ?wick - wick)\n    :precondition (and \n        (or (not (avoided_ingrown_hairs ?entity)) \n            (not (applied_powder ?entity)))\n        (or (not (burned ?wick))\n            (not (cool ?wick)))\n        (or (not (waxed ?entity))\n            (not (waxed ?area)))\n        (or (not (long_enough ?entity))\n            (not (selected ?area))))\n    :effect (and \n        (avoided_ingrown_hairs ?entity)\n        (applied_powder ?entity)\n        (burned ?wick)\n        (heated ?wick)\n        (waxed ?entity)\n        (waxed ?area))",
    "(:action manage_entity_state\n    :parameters (?entity - entity ?resource - resource)\n    :precondition (and (available ?entity) (not (processed ?entity ?resource)))\n    :effect (processed ?entity ?resource)\n)",
    "(:action warm_wax\n    :parameters (?entity - object ?condition - predicate ?state - predicate)\n    :precondition (and (not (?condition ?entity)) (?state ?entity))\n    :effect (and (?condition ?entity) (not (?state ?entity))",
    "(:action Tousle\n    :parameters (?entity - object)\n    :precondition (and (not (modified ?entity)) (state_initial ?entity))\n    :effect (and (modified ?entity) (state_final ?entity))",
    "(:action AddVolume ; Add a property to an entity and update its state\n    :parameters (?entity - object)\n    :precondition (and (not (property_added ?entity)) (condition_met ?entity))\n    :effect (and (property_added ?entity) (state_updated ?entity))",
    "(:action AddTexture\n    :parameters (?entity - object ?workspace - location)\n    :precondition (and (not (textured ?entity)) (available ?workspace))\n    :effect (and (textured ?entity) (availability_updated ?workspace))",
    "(:action WarmWicks ; Heat a wick to change its state to 'heated'\n  :parameters (?entity - object)\n  :precondition (not (heated ?entity))\n  :effect (heated ?entity)\n)",
    "(:action DipInWicks ; Interact with a heated object to update its status\n  :parameters (?entity - agent ?object - item)\n  :precondition (and (heated ?object) (not (interacted ?entity ?object)))\n  :effect (interacted ?entity ?object)\n)",
    "(:action process_item\n    :parameters (?entity - agent ?resource - object)\n    :precondition (and (prepared ?resource) (not (processed ?resource)))\n    :effect (processed ?resource)\n)",
    "(:action modify_status ; Modify the status of a resource or task\n    :parameters (?agent - entity ?resource - resource)\n    :precondition (and (available ?agent) (not (status_changed ?resource)))\n    :effect (status_changed ?resource)\n)",
    "(:action AddWicksToHair ; Add a component to a base structure and update its status\n    :parameters (?entity - object ?component - object)\n    :precondition (and (not (attached_to_base ?component)) (loose ?component))\n    :effect (and (attached_to_base ?component) (attached ?component))",
    "(:action ApplyWax ; Apply a resource and update entity status\n    :parameters (?entity - person ?resource - resource)\n    :precondition (and (not (resource_applied ?entity ?resource)) (not (fully_prepared ?entity)))\n    :effect (and (resource_applied ?entity ?resource) (fully_prepared ?entity))",
    "(:action modify_state ; Universally apply a state change for an entity\n  :parameters (?entity - entity ?attribute - attribute)\n  :precondition (not (state_modified ?entity ?attribute))\n  :effect (state_modified ?entity ?attribute)\n)",
    "(:action RubWicks\n    :parameters (?n - npc)\n    :precondition (not (wax_rubbed ?n))\n    :effect (wax_rubbed ?n)\n)",
    "(:action transform_state ; Transform the state of an entity from one condition to another\n    :parameters (?entity - object ?stateFrom - state ?stateTo - state)\n    :precondition (and (in_state ?entity ?stateFrom) (not (in_state ?entity ?stateTo)))\n    :effect (and (not (in_state ?entity ?stateFrom))",
    "(:action RestyleWax ; Restyle an object and update its state\n    :parameters (?entity - person ?object - item)\n    :precondition (not (restyled ?entity ?object))\n    :effect (restyled ?entity ?object)\n)",
    "(:action ManageWicksAndWax\n    :parameters (?n - npc ?resource - object)\n    :precondition (or \n        (and (not (purchased ?resource)) (eq ?resource wax))\n        (and (loose ?resource ?n) (eq ?resource wicks))\n        (and (not (applied ?resource ?n)) (eq ?resource wax))\n        (and (not (scooped ?resource ?n)) (eq ?resource wax))\n        (and (not (rubbed ?resource ?n)) (eq ?resource wax))\n        (and (not (restyled ?resource ?n)) (eq ?resource wax))\n        (and (applied ?resource ?n) (eq ?resource wicks)))\n    :effect (or\n        (and (purchased ?resource) (eq ?resource wax))",
    "(:action search_and_update ; Search for an item and update its availability status\n    :parameters (?agent - entity ?location - place ?item - object)\n    :precondition (and (not (available ?item ?location)) (present ?agent ?location))\n    :effect (and (available ?item ?location) (not (present ?agent ?location))",
    "(:action MakeAppointment ; Make an appointment and update status\n  :parameters (?agent - entity ?target - resource)\n  :precondition (and (not (appointment_made ?agent ?target)) (accessible ?target))\n  :effect (and (appointment_made ?agent ?target) (not (accessible ?target))",
    "(:action CheckResource\n    :parameters (?entity - agent ?resource - object)\n    :precondition (and (exists ?state (resource_state ?resource ?state))\n                       (not (checked ?entity ?resource)))\n    :effect (and (checked ?entity ?resource))"
]