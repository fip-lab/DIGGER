[
    "(:action drink ; Consume a substance to change the hydration state\n    :parameters (?npc - person ?substance - liquid)\n    :precondition (and (alive ?npc) (dehydrated ?npc) (suitable_for_drinking ?substance))\n    :effect (and (not (dehydrated ?npc))",
    "(:action take\n  :parameters (?entity - agent ?item - object)\n  :precondition (and (alive ?entity) (requires ?entity ?item))\n  :effect (and (not (requires ?entity ?item))",
    "(:action get ; Universal action to acquire or achieve a desired state\n  :parameters (?npc - entity ?resource - object)\n  :precondition (and \n    (alive ?npc) ; General condition applicable to living entities\n    (or \n      (hormonal_imbalance ?npc) \n      (not (has_eraser ?npc))\n      (not (treated_ganglion_cyst ?npc))\n      (inventory ?npc ?resource) ; General condition for having inventory items\n      (at ?npc ?resource) ; General condition for location-based actions\n    )\n    (not (called ?npc)) ; Specific condition for calling-related actions\n  )\n  :effect (and \n    (or \n      (not (hormonal_imbalance ?npc))",
    "(:action remove ; General action to remove a condition or clean an area\n    :parameters (?entity - object ?target - object)\n    :precondition (and \n        (applicable ?entity ?target) \n        (not (removed ?entity ?target)))\n    :effect (and \n        (removed ?entity ?target)\n        (not (present ?entity ?target))",
    "(:action place ; Place an item onto a target\n  :parameters (?agent - person ?item - object ?target - object)\n  :precondition (and (inventory ?agent ?item) (not (placed ?item ?target)))\n  :effect (placed ?item ?target)\n)",
    "(:action leave ; Represents a generic action to leave an item or situation unchanged\n :parameters (?agent - person ?entity - object)\n :precondition (and (not (interfering ?agent ?entity)) (or (not (applied ?entity)) (not (bandaged ?entity)) (not (clean ?entity))))\n :effect (and (or (not (infected ?entity))",
    "(:action schedule\n    ; General action for scheduling tasks based on awareness and information\n    :parameters (?npc - npc ?task - task ?info - information)\n    :precondition (and (aware ?npc) (task_relevant ?task ?info) \n                       (not (scheduled ?npc ?task)) \n                       (informed_about ?npc ?info))\n    :effect (and (scheduled ?npc ?task)\n                 (informed_about ?npc ?info))",
    "(:action consider\n    :parameters (?entity - thing ?context - context)\n    :precondition (and (eligible_for_consideration ?entity ?context))\n    :effect (and (considered ?entity ?context))",
    "(:action see ; See an entity for consultation or assessment\n    :parameters (?npc - entity ?target - object)\n    :precondition (and (available ?npc) (not (consulted ?npc ?target)) (has_issue ?npc))\n    :effect (and (consulted ?npc ?target))",
    "(:action ask\n    :parameters (?npc - entity ?topic - topic)\n    :precondition (and (consulted ?npc) (not (discussed ?npc ?topic)))\n    :effect (discussed ?npc ?topic)\n)",
    "(:action understand ; Understand a concept or procedure and update the comprehension status\n:parameters (? entity - agent ? concept - knowledge)\n:precondition (and (not (understood ? entity ? concept)))\n:effect (understood ? entity ? concept))",
    "(:action apply ; Apply a resource to achieve a specific effect\n :parameters (?entity - agent ?resource - object ?effect - state)\n :precondition (and (inventory ?entity ?resource) (not (applied ?resource)))\n :effect (and (applied ?resource) (?effect ?entity))",
    "(:action be\n  ; General action to update the state of awareness and information\n  :parameters (?entity - agent ?info - information)\n  :precondition (aware ?entity)\n  :effect (informed ?entity ?info))",
    "(:action visibility\n    :parameters (?agent - entity ?object - item)\n    :precondition (and (hasFeature ?agent ?object) (not (perceived ?agent ?object)))\n    :effect (and (perceived ?agent ?object) (not (notPerceived ?agent ?object))",
    "(:action discuss ; Discuss a topic and update the consultation status\n  :parameters (?entity - actor ?topic - subject)\n  :precondition (and (consulted ?entity))\n  :effect (and (discussed ?entity ?topic))",
    "(:action determine ; Determine a condition and update decision status\n    :parameters (?agent - entity ?task - task)\n    :precondition (and (consideration ?agent) (not (determined ?agent ?task)))\n    :effect (and (determined ?agent ?task) (decision_made ?agent))",
    "(:action removal ; General action to remove an entity or obstacle\n  :parameters (?actor - agent ?entity - object)\n  :precondition (and (decision_made ?actor) (not (removed ?actor ?entity)))\n  :effect (and (removed ?actor ?entity) (gone ?entity))"
]