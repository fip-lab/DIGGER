[
    "(:action place ; Place an item in a specified location and update its status\n    :parameters (?entity - object ?location - location ?tool - object ?state - state)\n    :precondition (and \n        (available ?entity) \n        (not (at ?entity ?location))\n        (or (clean ?entity) (not (clean ?entity)))\n        (or (empty ?location) (not (empty ?location)))\n        (or (cut ?entity) (not (cut ?entity)))\n        (or (peeled ?entity) (not (peeled ?entity)))\n        (or (plugged_in ?tool) (not (plugged_in ?tool)))\n    )\n    :effect (and \n        (at ?entity ?location)\n        (toggle_status ?entity ?state)\n        (not (at ?entity not-on-table))",
    "(:action take ; Take an item and change its state or location\n  :parameters (?entity - object ?from - location ?to - location)\n  :precondition (and (located ?entity ?from) (available ?to))\n  :effect (and (not (located ?entity ?from))",
    "(:action dry ; Generalized action to change the state of an object or resource\n  :parameters (?agent - agent ?item - object ?container - object ?location - location)\n  :precondition (or (wet ?item) \n                    (and (camouflaged ?agent) (invisible ?agent))\n                    (whole ?item)\n                    (at ?item ?location)\n                    (temperature ?location cool))\n  :effect (or (and (dry ?item) (not (wet ?item))",
    "(:action use ; Use an item to achieve a specified goal\n    :parameters (?user - agent ?item - object ?location - place)\n    :precondition (and \n        (available ?user)\n        (not (in_use ?item))\n        (suitable ?location)\n    )\n    :effect (and \n        (in_use ?item)\n        (at_location ?user ?location)\n        (goal_state ?item ?user ?location)\n    )",
    "(:action freeze ; Freeze an object and update its temperature and location status\n    :parameters (?actor - agent ?item - object ?container - container)\n    :precondition (and (or (contains ?container ?item) (dyed ?item))\n                       (or (location ?container outside_refrigerator) (not (frozen ?item)))\n                       (temperature ?container warm))\n    :effect (and (temperature ?container cold)\n                 (location ?container inside_refrigerator)\n                 (frozen ?item))",
    "(:action pop ; Pop a component from a container and modify its state\n :parameters (?npc - agent ?container - object ?component - object)\n :precondition (and (contains ?container ?component) \n                    (modifiable ?component) \n                    (condition ?container suitable_condition))\n :effect (and (not (contains ?container ?component))",
    "(:action get ; Universal action for acquiring or transforming resources\n    :parameters (?actor - entity ?resource - object ?location - location ?condition - condition)\n    :precondition (and \n        (available ?actor) \n        (at ?resource ?location) \n        (satisfies ?resource ?condition)\n    )\n    :effect (and \n        (acquired ?actor ?resource) \n        (not (at ?resource ?location))",
    "(:action cut ; Cut an item, updating its state and possibly its environment\n    :parameters (?entity - object ?surface - object)\n    :precondition (and \n        (cuttable ?entity)\n        (or (whole ?entity) (prepared ?entity))\n        (or (not (on_surface ?entity ?surface)) (on_surface ?entity ?surface))\n    )\n    :effect (and \n        (cut ?entity)\n        (when (on_surface ?entity ?surface) \n            (and \n                (not (on_surface ?entity ?surface))",
    "(:action add ; Add an entity to a target and update the state\n  :parameters (?agent - agent ?entity - entity ?target - entity)\n  :precondition (and \n    (available ?entity) \n    (not (added ?entity ?target))\n    (precondition_check ?entity ?target)\n  )\n  :effect (and \n    (added ?entity ?target)\n    (updated_state ?target)\n  )",
    "(:action wait ; Wait for an entity to reach a certain state\n:parameters (?entity - object)\n:precondition (and (not (goal_state ?entity)))\n:effect (goal_state ?entity))",
    "(:action prepare ; Prepare a variety of items or resources\n    :parameters (?entity - object ?location - location ?user - agent)\n    :precondition (and \n        (not (prepared ?entity))\n        (or (inventory ?user ?entity) (at-location ?entity ?location))\n    )\n    :effect (and \n        (prepared ?entity)\n        (not (inventory ?user ?entity))",
    "(:action check ; Generic action to check a condition and update the status\n  :parameters (?entity - entity ?location - location ?item - object)\n  :precondition (and \n    (at ?entity ?location) \n    (at ?item ?location)\n    (not (checked ?entity ?item))\n  )\n  :effect (and \n    (checked ?entity ?item)\n    (stirred ?item) ; assuming that stirring is a relevant effect for similar contexts\n  )\n)",
    "(:action measure\n    :parameters (?entity - object)\n    :precondition (and (unmeasured ?entity))\n    :effect (and (measured ?entity) (not (unmeasured ?entity))",
    "(:action burn ; Burn an item and update its state\n    :parameters (?actor - agent ?item - burnable)\n    :precondition (and (has_item ?actor ?item) (not (burned ?item)))\n    :effect (and (burned ?item) (not (full ?item))",
    "(:action free ; Free a resource by applying a material to a container\n    :parameters (?material - object ?container - container)\n    :precondition (and (not (applied ?material ?container)))\n    :effect (applied ?material ?container)\n)",
    "(:action finish ; Complete a task by transforming its state to finished\n    :parameters (?entity - object)\n    :precondition (in_progress ?entity)\n    :effect (and (completed ?entity) (not (in_progress ?entity))",
    "(:action lick ; Lick an item and update its state\n:parameters (?actor - entity ?item - object)\n:precondition (and (dry ?item) (can_lick ?actor ?item))\n:effect (and (wet ?item) (not (dry ?item))",
    "(:action locate ; Locate a resource and update its status\n :parameters (?agent - agent ?resource - resource)\n :precondition (not (located ?resource))\n :effect (and (located ?resource) (selected ?agent))",
    "(:action wick ; Generalized action for wicking and centering processes\n    :parameters (?w - wick ?m - object)\n    :precondition (and (prepared ?m) (not (processed ?m)))\n    :effect (and (processed ?m) (centered ?w ?m))",
    "(:action reuse\n  ; Reuse an item by cleaning and storing it for future use\n  :parameters (?item - object ?location - place ?new_location - place ?cleaner - object)\n  \n  :precondition (and\n    (location ?item ?location)\n    (cleanness ?item clean)\n    (not (stored ?item ?new_location))\n    (available ?cleaner)\n  )\n  \n  :effect (and\n    (location ?item ?new_location)\n    (stored ?item ?new_location)\n    (not (available ?cleaner))",
    "(:action practice\n    :parameters (?entity - object ?technique - technique)\n    :precondition (and (unpracticed ?entity ?technique))\n    :effect (and (practiced ?entity ?technique) (not (unpracticed ?entity ?technique))"
]