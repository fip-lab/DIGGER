[
    "(:action wait\n      :parameters (?p - npc)\n      :precondition (and (at ?p outdoor))\n      :effect (waiting ?p)\n   )",
    "(:action place_in_sunlight\n      :parameters (?object - item ?location - place)\n      :precondition (and (at ?object ?location) (sunlit ?location))\n      :effect (and (sunlit_positioned ?object))",
    "(:action wait\n   :parameters (?entity - thing ?location - place)\n   :precondition (and (at ?entity ?location) (outdoor ?location))\n   :effect (and (waiting ?entity) (sunlit_positioned ?entity))",
    "(:action place ; Universal action to place various items into different contexts\n    :parameters (?agent - npc ?item - object ?target - target)\n    :precondition (and\n        (at ?agent ?location)\n        (inventory ?agent ?item)\n        (or \n            (and (is_metal_surface ?item) (sunny ?location))\n            (and (clean ?item) (at ?target flat_surface))\n            (and (fried ?item) (at-appliance ?target ?location))\n            (and (empty ?target) (at ?target ?location))\n            (and (beaten ?item ?target) (inventory ?agent ?oil) (empty ?pan))\n            (and (cut ?item))\n            (and (at ?item kitchen_counter) (at ?target kitchen_counter))\n            (and (at ?item on_counter) (on ?s))\n        )\n    )\n    :effect (and\n        (not (inventory ?agent ?item))",
    "(:action crack ; Crack an item and update its status\n  :parameters (?actor - person ?item - object ?location - place ?container - object ?tool - object ?appliance - object ?ingredient - object)\n  :precondition (and\n    (at ?actor ?location)\n    (inventory ?actor ?item)\n    (or (heating ?tool) (is_sidewalk ?location) (at ?item in_container) (has-power ?appliance))\n    (or (clean ?tool) (at ?tool ?location))\n  )\n  :effect (and\n    (not (inventory ?actor ?item))",
    "(:action flip\n  :parameters (?agent - npc ?item - object ?surface - location ?tool - tool)\n  :precondition (and\n    (at ?agent ?surface)\n    (or (cracked ?item) (in-pan ?item ?tool))\n    (or (heated ?tool) (cracked ?item))\n  )\n  :effect (and\n    (flipped ?item)\n    (not (on_surface ?item ?surface))",
    "(:action cook ; Universal cooking action\n  :parameters (?agent - person ?item - object ?location - location ?container - container ?tool - object)\n  :precondition (and\n    (at ?agent ?location)\n    (or (at ?item ?location) (in ?item ?container))\n    (not (cooked ?item))\n    (or (oven_on) (on ?tool))\n  )\n  :effect (and\n    (cooked ?item)\n    (or (not (oven_on))",
    "(:action add ; Add an item to a container or apply a component to another\n  :parameters (?item - object ?container - object ?npc - agent)\n  :precondition (and \n    (or (inventory ?npc ?item) (at ?item ?container))\n    (not (contained ?item ?container))\n  )\n  :effect (and\n    (contained ?item ?container)\n    (not (inventory ?npc ?item))",
    "(:action lift ; Lift and process an item to update its state\n  :parameters (?agent - entity ?item - object ?location - place)\n  :precondition (and \n    (at ?item ?location)\n    (available ?agent)\n    (not (processed ?item))\n  )\n  :effect (and\n    (processed ?item)\n    (not (available ?agent))",
    "(:action repeat ; Repeat a task on an object until a desired state is achieved\n :parameters (?agent - entity ?task_object - object ?goal_state - state)\n :precondition (and (at ?agent ?task_object) (not (in_state ?task_object ?goal_state)))\n :effect (in_state ?task_object ?goal_state))",
    "(:action serve ; Serve a dish by assembling ingredients at a location\n    :parameters (?agent - agent ?item1 - ingredient ?item2 - ingredient ?dish - dish ?loc - location)\n    :precondition (and\n      (fried ?item1)\n      (at ?item2 ?loc)\n      (at-dish ?dish ?loc)\n    )\n    :effect (and\n      (on-plate ?item1 ?dish)\n      (on-plate ?item2 ?dish)\n      (not (at ?item2 ?loc))",
    "(:action secure\n  :parameters (?egg_wash - ingredient ?item1 - ingredient ?item2 - ingredient ?table - location)\n  :precondition (and\n    (at ?egg_wash ?table)\n    (at ?item1 ?table)\n    (at ?item2 ?table)\n  )\n  :effect (and\n    (secured ?item1 ?item2)\n  )",
    "(:action roll ; Universal action to manipulate and transform an object's state\n    :parameters (?actor - agent ?object - entity ?location - place)\n    :precondition (and (current_state ?object) (at ?actor ?location))\n    :effect (and (transformed_state ?object) (updated_state ?location))",
    "(:action cut ; Cut an object and update its state\n  :parameters (?actor - agent ?item - object ?tool - object)\n  :precondition (and \n    (available ?actor)\n    (in_state ?item pre_cut)\n    (at ?item location)\n    (at ?tool location)\n    (clean ?tool)\n  )\n  :effect (and \n    (in_state ?item cut)\n    (if (is_type ?tool utensil) (not (clean ?tool))",
    "(:action shape_into_ball_shape\n       :parameters (?mixture - ingredient)\n       :precondition (and\n         (at ?mixture kitchen_counter)\n         (mixed ?mixture)\n       )\n       :effect (and\n         (shaped ?mixture)\n         (ball_shape ?mixture)\n       )",
    "(:action cut_edges_off_bread_slices\n       :parameters (?bread - ingredient)\n       :precondition (and\n         (at ?bread kitchen_counter)\n         (sliced ?bread)\n       )\n       :effect (and\n         (shaped ?bread)\n         (edges_cut ?bread)\n       )",
    "(:action shape\n    :parameters (?item - ingredient ?shape_type - shape)\n    :precondition (and\n      (at ?item kitchen_counter)\n      (ready_for_shape ?item)\n    )\n    :effect (and\n      (shaped ?item)\n      (?shape_type ?item)\n    )",
    "(:action deep\n  :parameters (?ingredient - ingredient ?utensil - utensil ?location - place)\n  :precondition (and\n    (prepared ?ingredient)\n    (at ?utensil ?location)\n    (ready ?location)\n  )\n  :effect (and\n    (processed ?ingredient)\n    (dirty ?utensil)\n  )",
    "(:action transition_state\n    :parameters (?actor - entity ?target - entity)\n    :precondition (and (not (final_state ?target)))\n    :effect (transitioned ?target)\n)"
]