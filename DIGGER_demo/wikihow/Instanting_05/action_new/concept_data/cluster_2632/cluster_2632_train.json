[
    "(:action finish ; Complete the preparation or transformation of an item\n    :parameters (?actor - agent ?item - entity ?location - place)\n    :precondition (and \n        (at ?actor ?location)\n        (in_progress ?item) ; General precondition to indicate the item is ready for completion\n    )\n    :effect (and \n        (completed ?item) ; Marks the item as completed or ready\n        (at ?item ?location) ; Ensures the item is at the desired location\n    )\n)",
    "(:action cook\n    :parameters (?agent - entity ?item - object ?location - location ?tool - tool)\n    :precondition (and\n        (at ?agent ?location)\n        (prepared ?item)\n        (available ?tool)\n        (not (cooked ?item))\n    )\n    :effect (and\n        (cooked ?item)\n        (not (raw ?item))",
    "(:action chill ; Chill an item to change its state\n    :parameters (?actor - agent ?item - object)\n    :precondition (and (at ?actor station) (prepared ?item))\n    :effect (and (at ?item destination) (chilled ?item))",
    "(:action season\n  :parameters (?agent - agent ?item - object ?location - location ?tool - tool)\n  :precondition (and \n    (at ?agent ?location)\n    (ready ?item)\n    (clean ?tool)\n    (not (seasoned ?item))\n  )\n  :effect (and\n    (seasoned ?item)\n    (flavorful ?item)\n    (in-bowl ?item ?tool)\n    (not (ready ?item))",
    "(:action pull ; General action to pull an entity into its next state\n :parameters (?agent - agent ?entity - entity)\n :precondition (and (at ?agent location) (prepared ?entity))\n :effect (and (tightened ?entity))",
    "(:action peek ; General action to inspect a resource and update its status\n    :parameters (?agent - entity ?resource - object)\n    :precondition (and (at ?agent location) (at ?resource location) (not (inspected ?resource)))\n    :effect (inspected ?resource))",
    "(:action choose\n  :parameters (?actor - agent ?resource - entity ?location - place ?target - destination)\n  :precondition (and \n    (at ?actor ?location)\n    (available ?resource)\n    (not (in_inventory ?actor ?resource))\n  )\n  :effect (and \n    (in_inventory ?actor ?resource)\n    (not (at ?resource ?location))",
    "(:action add\n    :parameters (?entity1 - entity ?entity2 - entity ?location - location)\n    :precondition (and\n        (at ?entity1 ?location)\n        (not (in_location ?entity2 ?location))\n        (or\n            (and\n                (is_clean ?entity2)\n                (suitable_for ?entity1 ?entity2)\n            )\n            (and\n                (is_hamburger ?entity1)\n                (or (is_tomato_center ?entity2) (is_spear ?entity2) (is_lemon ?entity2))\n            )\n            (and\n                (has_power ?location off)\n                (at_location ?entity1 in_bottle)\n            )\n            (and\n                (separate ?entity1)\n                (empty ?location)\n            )\n            (and\n                (has_composition ?entity1 separate)\n                (at_location ?entity1 in_container)\n            )\n        )\n    )\n    :effect (and\n        (not (is_clean ?entity2))",
    "(:action write ; Write a component and update its status\n:parameters (?p - entity ?c - component)\n:precondition (and (at ?p ?c) (is_component ?c))\n:effect (has_component ?c))",
    "(:action analyze ; Analyze an item and update its status\n  :parameters (?agent - entity ?subject - object ?context - environment)\n  :precondition (and (present ?agent ?subject) (is_subject ?subject) (has_attribute ?subject ?attribute))\n  :effect (and (analyzed ?subject) (updated_context ?context))",
    "(:action listen ; Listen to an entity and gather feedback\n  :parameters (?agent - agent ?entity - entity)\n  :precondition (and (at ?agent ?entity) (analyzed ?entity))\n  :effect (feedback_received ?entity))",
    "(:action light\n  :parameters (?item - object ?location1 - place ?location2 - place)\n  :precondition (and \n    (at ?item ?location1)\n    (state1 ?item)\n  )\n  :effect (and \n    (state2 ?item)\n    (at ?item ?location2)\n    (not (state1 ?item))",
    "(:action free ; Free an entity from a container or location and update its status\n    :parameters (?agent - agent ?entity - object ?location - location)\n    :precondition (and (inventory ?agent ?entity) (at ?agent ?location) (condition_met ?location))\n    :effect (and (at ?entity ?location) (not (inventory ?agent ?entity))",
    "(:action remove\n    :parameters (?agent - agent ?item - object ?location - location)\n    :precondition (and (at ?agent ?location) (at ?item ?location) (removable ?item))\n    :effect (and (inventory ?agent ?item) (not (at ?item ?location))",
    "(:action eat\n    :parameters (?p - player ?b - burgers ?g - grill ?f - fridge ?s - stove-knob)\n    :precondition (and \n        (at ?p ?f) ; Player is at the fridge to choose burgers\n        (at ?g counter) ; Grill is at the counter\n        (not (inventory ?p ?b)) ; Player does not initially have the burgers\n        (in ?b ?f) ; Burgers are initially in the fridge\n        (not (on ?g)) ; Grill is initially off\n        (not (hot ?g)) ; Grill is not hot\n        (not (hot ?s)) ; Stove knob is not hot\n        (not (cooked ?b)) ; Burgers are not cooked\n    )\n    :effect (and \n        (inventory ?p ?b) ; Player now has the burgers\n        (not (in ?b ?f))",
    "(:action serve\n    :parameters (?entity - entity ?container1 - container ?container2 - container)\n    :precondition (and\n      (at_location ?entity in_container1)\n      (has_property ?entity suitable_for_serving)\n      (at_location ?container2 ready_for_serving)\n    )\n    :effect (and\n      (not (at_location ?entity in_container1))",
    "(:action layer ; Layer an item onto a target\n  :parameters (?actor - agent ?item - object ?container - container ?target - target)\n  :precondition (and (at ?actor ?container) (is_layerable ?item) (is_target ?target) (has_detail ?target))\n  :effect (and (has_layer ?target ?item) (in ?item ?container))"
]