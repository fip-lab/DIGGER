[
    "(:action go ; Generalized action to move an entity to a new location or state\n  :parameters (?entity - entity ?destination - place ?current_location - place)\n  :precondition (and (at ?entity ?current_location) \n                     (not (at ?entity ?destination)) \n                     (or (not (museum_or_gallery ?destination)) (at ?entity elsewhere)))\n  :effect (and (at ?entity ?destination) \n               (not (at ?entity ?current_location))",
    "(:action make\n    :parameters (?agent - agent ?location - place ?object - object)\n    :precondition (and \n        (present ?agent ?location) \n        (available ?object)\n    )\n    :effect (and \n        (created ?agent ?object) \n        (not (available ?object))",
    "(:action set ; Set a resource to a specific status or condition\n    :parameters (?npc - agent ?target - entity ?location - place)\n    :precondition (and \n        (at ?npc ?location) \n        (not (set ?target ?condition)) \n        (condition_met_for_set ?npc ?target ?condition))\n    :effect (and \n        (set ?target ?condition) \n        (not (previous_condition ?target))",
    "(:action throw\n  :parameters (?entity - agent ?location - place ?state1 - state ?state2 - state ?resource - resource_type)\n  :precondition (and (at ?entity ?location) (has_state ?location ?state1) (not (has_state ?location ?state2)))\n  :effect (and (has_state ?location ?state2) (not (has_state ?location ?state1))",
    "(:action get ; General action to acquire or access a resource or location\n  :parameters (?agent - entity ?resource - resource ?location - location)\n  :precondition (and \n                  (or (at ?agent ?location) \n                      (location ?agent ?location)\n                      (npc ?agent))\n                  (or (availability ?location absent) \n                      (in_stock ?resource ?location)\n                      (garden ?location)\n                      (possible ?resource)\n                      (given ?resource)))\n  :effect (and \n           (or (availability ?location present)\n               (location ?agent on_table)\n               (in_garden ?agent)\n               (has_info ?agent)\n               (inventory ?resource ?agent)\n               (gift_purchased ?agent)\n               (not (in_stock ?resource ?location))",
    "(:action plan ; Plan an event or activity and update the status\n  :parameters (?actor - agent ?activity - task)\n  :precondition (and \n    (available ?actor) \n    (not (planned ?actor ?activity))\n    (or \n      (and (type ?activity mini_getaway) (at ?actor ?activity) (openness ?activity closed))\n      (and (type ?activity vacation) (graduated ?actor))\n      (type ?activity party)\n    )\n  )\n  :effect (and \n    (planned ?actor ?activity)\n    (or \n      (and (type ?activity mini_getaway) (openness ?activity open))",
    "(:action celebrate\n  :parameters (?npc - person ?event - celebration ?location - place ?group - group)\n  :precondition (and (at ?npc ?location) \n                     (ready_for ?event ?location) \n                     (belong_to ?npc ?group))\n  :effect (and (completed ?event ?location) \n               (celebrated_with ?npc ?group))",
    "(:action engage_in_activity\n  :parameters (?npc - person ?target - entity ?context - context)\n  :precondition (and \n      (present ?npc ?context)\n      (not (completed ?npc ?target))\n      (available ?target ?context))\n  :effect (and \n      (completed ?npc ?target)\n      (knowledge ?npc ?target ?context))",
    "(:action review ; Review a task and update its status\n :parameters (?reviewer - agent ?task - task)\n :precondition (and (in_progress ?reviewer ?task) (not (completed ?reviewer ?task)))\n :effect (completed ?reviewer ?task))",
    "(:action spot ; Spot an entity and update its status\n    :parameters (?entity - object)\n    :precondition (and (status ?entity unselected))\n    :effect (and (status ?entity selected))",
    "(:action take\n    :parameters (?actor - entity ?item - object ?location - location)\n    :precondition (and \n        (prepared ?item) \n        (available ?actor) \n        (at ?actor ?location))\n    :effect (and \n        (possessed ?actor ?item)\n        (at ?item ?location))",
    "(:action record ; Record or capture a moment or resource\n  :parameters (?agent - entity ?resource - object ?location - place)\n  :precondition (and \n    (at ?agent ?location)\n    (ready ?resource)\n    (not (captured ?agent ?resource))\n  )\n  :effect (and \n    (captured ?agent ?resource)\n  )",
    "(:action study\n  ; Study an item in a specific location or context\n  :parameters (?entity - agent ?target - entity ?context - location)\n  :precondition (and (at ?entity ?context) (not (studied ?entity ?target)))\n  :effect (and (studied ?entity ?target) (not (at ?entity ?context))",
    "(:action learn ; Learn a concept or gain knowledge from a resource\n  :parameters (?agent - person ?subject - object)\n  :precondition (and \n    (available ?agent)\n    (not (learned ?agent ?subject))\n    (contextual_precondition ?agent ?subject)\n  )\n  :effect (and \n    (learned ?agent ?subject)\n    (contextual_effect ?agent ?subject)\n  )",
    "(:action listen ; Listen and update knowledge or status\n  :parameters (?agent - entity ?subject - entity)\n  :precondition (and (present ?agent ?subject) \n                     (valid ?subject))\n  :effect (and (informed ?agent ?subject)\n               (not (unknown ?subject))",
    "(:action count_un\n    :parameters (?p - player)\n    :precondition (and (listened converter_of_water))\n    :effect (counted umbrellas)\n)",
    "(:action count ; Count items or track changes\n    :parameters (?agent - entity ?resource - object)\n    :precondition (and (ready_to_count ?agent) (not (counted ?resource)))\n    :effect (counted ?resource)\n)",
    "(:action talk ; Engage in a conversation to impart knowledge\n :parameters (?npc - person ?listener - person ?topic - subject)\n :precondition (and (at ?npc ?listener) (at ?listener ?listener) \n                    (or (knowledge ?listener previous_topic) (not (previous_topic ?topic))))\n :effect (knowledge ?listener ?topic))",
    "(:action reassure ; Provide reassurance through information and resources\n    :parameters (?npc - person ?target - person ?resource - object ?context - location ?knowledge - topic)\n    :precondition (and (at ?npc ?context) (at ?target ?context) (knowledge ?target ?knowledge) (available ?resource))\n    :effect (and (reassured ?target) (provided ?npc ?resource))",
    "(:action participate\n  :parameters (?npc - person ?event - activity ?location - place)\n  :precondition (and (at ?npc ?location) (available ?event ?location))\n  :effect (participated ?npc ?event))",
    "(:action understand ; Understand a concept or resource\n    :parameters (?agent - entity ?concept - concept)\n    :precondition (and (entity ?agent) (not (understood ?agent ?concept)))\n    :effect (understood ?agent ?concept))",
    "(:action stay ; Stay and maintain a specific state\n:parameters (?p - entity ?condition - condition)\n:precondition (and (entity ?p) (met ?p ?condition))\n:effect (maintained ?p ?condition))",
    "(:action express_amazed\n    :parameters (?p - you)\n    :precondition (and (you ?p))\n    :effect (and (amazed ?p autumn))",
    "(:action express\n    :parameters (?entity - agent ?feeling - state ?context - situation)\n    :precondition (and (agent ?entity))\n    :effect (and (expressed ?entity ?feeling ?context))",
    "(:action help\n    ; Assist an entity and update status\n    :parameters (?assistant - agent ?entity - object ?location - place)\n    :precondition (and (agent ?assistant) (object ?entity) (place ?location) (needs_help ?entity))\n    :effect (helped ?assistant ?entity ?location)\n)",
    "(:action play ; Engage an entity with a task or activity and update its status\n  :parameters (?entity - agent ?activity - task)\n  :precondition (and (available ?entity) (not (engaged ?entity ?activity)))\n  :effect (and (engaged ?entity ?activity) (not (unengaged ?entity ?activity))",
    "(:action show ; Display an item or information to a subject and update the status\n  :parameters (?subject - entity ?item - object)\n  :precondition (and (not (shown ?subject ?item)))\n  :effect (and (shown ?subject ?item))",
    "(:action invite ; Invite an entity to an event\n   :parameters (?entity - person ?event - event)\n   :precondition (and (not (invited ?entity ?event)))\n   :effect (and (invited ?entity ?event))",
    "(:action punctuation ; Move an entity from one location to another\n :parameters (?entity - object ?from - location ?to - location)\n :precondition (and (location ?entity ?from))\n :effect (and (not (location ?entity ?from))",
    "(:action reinjoylife ; Recreate an enjoyable experience by engaging with an activity\n  :parameters (?p - person ?activity - object)\n  :precondition (and (at ?p location) (not (engaged ?p ?activity)))\n  :effect (engaged ?p ?activity)\n)",
    "(:action transparent_unumum\n    :parameters (?p - player ?umb - umbrella)\n    :precondition (and (made rain_water) (at ?umb ?p))\n    :effect (and (transformed ?umb) (not (at ?umb ?p))",
    "(:action transparent ; Transform an item and update its location state\n    :parameters (?agent - entity ?item - object)\n    :precondition (and (condition_met) (at ?item ?agent))\n    :effect (and (transformed ?item) (not (at ?item ?agent))",
    "(:action attend\n  ; Attend an event and update participation status\n  :parameters (?npc - person ?event - event ?location - place)\n  :precondition (and (at ?npc ?location) (event ?event) (not (attended ?npc ?event)))\n  :effect (attended ?npc ?event))",
    "(:action contemplate ; Engage an entity in a thought process or reflection\n  :parameters (?entity - thinker ?subject - topic)\n  :precondition (and (thinker ?entity) (awake ?entity) (not (contemplating ?entity ?subject)))\n  :effect (contemplating ?entity ?subject))",
    "(:action theme\n ; Theme a resource and update its status\n :parameters (?entity - object)\n :precondition (and (not (themed ?entity)))\n :effect (themed ?entity)\n)",
    "(:action have ; Engage an entity in an activity or task\n  :parameters (?entity - agent ?activity - task)\n  :precondition (and (not (engaged ?entity ?activity)))\n  :effect (engaged ?entity ?activity)\n)"
]