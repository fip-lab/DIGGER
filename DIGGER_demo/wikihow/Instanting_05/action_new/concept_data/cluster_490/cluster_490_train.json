[
    "(:action wash\n    :parameters (?actor - entity ?item - entity ?location - location)\n    :precondition (and \n        (at ?actor ?location)\n        (not (clean ?item))\n        (or (moisture ?item dry) (bleached ?item) (held_under_acetone ?item))\n    )\n    :effect (and\n        (clean ?item)\n        (not (dirty ?item))",
    "(:action lay ; Lay an item in a specific state or location\n    :parameters (?entity - object ?target - location ?condition - condition)\n    :precondition (and \n        (not (at_state ?entity ?condition))\n        (at ?entity ?target)\n    )\n    :effect (and \n        (at_state ?entity ?condition)\n        (in ?entity ?target)\n    )",
    "(:action wait\n    ; Wait for a condition to change, updating the status of a resource or location\n    :parameters (?entity - entity ?resource - resource)\n    :precondition (and (waiting_condition ?entity ?resource))\n    :effect (and (condition_met ?entity ?resource))",
    "(:action choose ; Choose an option or condition and update its status\n  :parameters (?npc - entity ?option - option ?context - context)\n  \n  :precondition (and \n                  (valid_context ?context)\n                  (not (chosen ?option))\n                  (visible ?npc))\n                  \n  :effect (and \n           (chosen ?option)\n           (updated_status ?context ?option))",
    "(:action bring ; Move an item to a target location or state\n    :parameters (?agent - agent ?item - object ?target - location)\n    :precondition (and (available ?agent) (not (at ?item ?target)))\n    :effect (and (at ?item ?target))",
    "(:action repeat ; Universal repeat action\n  :parameters (?entity - object ?task - task)\n  :precondition (and (status ?entity in_progress) (task_type ?task repeatable))\n  :effect (status ?entity completed)\n)",
    "(:action dry ; Universal drying action\n  :parameters (?entity - object ?device - drying_device)\n  :precondition (and (moisture ?entity wet))\n  :effect (and (moisture ?entity dry) (not (moisture ?entity wet))",
    "(:action add ; Add a resource or item to a system\n    :parameters (?actor - agent ?target - target ?resource - resource)\n    :precondition (and \n        (at ?actor ?target) \n        (not (contains ?target ?resource))\n        (valid ?resource)\n        (ready_for_addition ?target ?resource)\n    )\n    :effect (and \n        (contains ?target ?resource)\n        (not (empty ?target))",
    "(:action run\n  :parameters (?entity - object ?resource - resource ?location - place ?state_before - state ?state_after - state)\n  :precondition (and (resource ?resource) (entity ?entity) (location ?location) (entity_state ?entity ?state_before))\n  :effect (and (entity_state ?entity ?state_after) (resource_location ?resource ?location) (movement ?entity active))",
    "(:action clean ; Universal cleaning action for various objects\n  :parameters (?agent - entity ?target - object)\n  :precondition (and \n    (not (clean ?target))\n    (ready ?agent)\n    (dirty ?target)\n  )\n  :effect (and\n    (clean ?target)\n    (not (dirty ?target))",
    "(:action use ; Use an item or resource for a specified purpose\n :parameters (?npc - entity ?tool - resource)\n :precondition (and (inventory ?npc ?tool) (usable ?tool))\n :effect (used ?npc ?tool))",
    "(:action check ; Universal check action to update the status of an entity\n  :parameters (?entity - entity ?resource - resource)\n  :precondition (and (unprocessed ?entity) (not (processed ?entity)))\n  :effect (and (processed ?entity) (updated ?resource))",
    "(:action sit ; Sit and change the state of an entity\n :parameters (?entity - object ?condition - condition)\n :precondition (and (applied ?condition ?entity))\n :effect (transformed ?entity)\n)",
    "(:action read ; Read a resource and update its status\n    :parameters (?entity - agent ?resource - object)\n    :precondition (and \n                    (tag_attached ?resource)\n                    (unread ?resource))\n    :effect (and\n              (read ?resource)\n              (safe_to_use ?resource))",
    "(:action hold ; Hold an object to perform a transformation or task\n    :parameters (?p - person ?obj - object ?tool - tool ?surface - surface)\n    :precondition (and (prepared ?tool) (surface_ready ?surface) (task_ready ?obj))\n    :effect (and (held_under ?tool ?obj) (not (task_ready ?obj))",
    "(:action apply ; Apply a substance or design to an object or surface\n    :parameters (?actor - agent ?resource - object ?target - object)\n    :precondition (and \n        (prepared ?resource)\n        (ready ?target)\n        (not (applied ?actor ?resource ?target))\n    )\n    :effect (and\n        (applied ?actor ?resource ?target)\n        (transformed ?target)\n    )",
    "(:action juice\n    :parameters (?entity - object ?liquid - substance)\n    :precondition (and (not (processed ?liquid)))\n    :effect (processed ?liquid)\n)",
    "(:action determine ; Determine the status of an entity and update accordingly\n    :parameters (?entity - object)\n    :precondition (and\n      (not (determined ?entity))\n    )\n    :effect (determined ?entity)\n)",
    "(:action moisturize ; General action to apply moisture to an entity\n    :parameters (?entity - object ?location - place)\n    :precondition (and (at ?entity ?location) (prepared ?entity))\n    :effect (moisturized ?entity)\n)"
]