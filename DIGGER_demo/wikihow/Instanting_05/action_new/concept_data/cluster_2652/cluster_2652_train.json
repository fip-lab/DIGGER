[
    "(:action manage_resource\n    :parameters (?actor - entity ?resource - object ?location - location ?tool - object)\n    :precondition (and \n                    (available ?actor)\n                    (or (in_inventory ?actor ?resource)\n                        (at ?resource ?location))\n                    (or (open ?location)\n                        (empty ?location))\n                    (not (managed ?resource ?location)))\n    :effect (and \n              (managed ?resource ?location)\n              (not (in_inventory ?actor ?resource))",
    "(:action choose\n    :parameters (?entity - entity ?target - target)\n    :precondition (and\n                    (not (chosen ?entity ?target))\n                    (available ?entity))\n    :effect (and\n              (chosen ?entity ?target)\n              (not (unselected ?target))",
    "(:action lay ; General action to manipulate resources and modify state\n  :parameters (?entity - entity ?resource - resource ?location - location)\n  :precondition (and \n                  (available ?entity) \n                  (has ?entity ?resource) \n                  (at ?entity ?location)\n                  (not (organized ?resource)) \n                  (state ?location neutral))\n  :effect (and \n            (organized ?resource) \n            (not (has ?entity ?resource))",
    "(:action roll ; Roll an object to change its state\n  :parameters (?actor - agent ?object - entity)\n  :precondition (and\n                  (precondition1 ?object)\n                  (precondition2 ?actor))\n  :effect (and\n            (changed_state1 ?object)\n            (changed_state2 ?actor))",
    "(:action wash ; Perform a cleaning or preparation task on an item\n    :parameters (?entity - entity ?item - object ?location - location)\n    :precondition (and \n        (at ?entity ?location) \n        (not (processed ?item))\n        (or \n            (inventory ?entity ?item)\n            (location ?item in_waste_basket)\n            (moisture ?item dry)\n            (mixed ?item ?entity)\n        )\n    )\n    :effect (and \n        (processed ?item)\n        (or \n            (clean ?item)\n            (sealed ?item)\n            (moisture ?item wet)\n            (knowledge ?entity selected)\n            (location ?item in_tumbler)\n        )",
    "(:action use ; Use a resource to achieve a task\n  :parameters (?actor - agent ?resource - resource ?location - location)\n  :precondition (and \n                  (has ?actor ?resource) ; The actor has the resource\n                  (at ?actor ?location) ; The actor is at the location\n                  (prepared ?resource)) ; The resource is prepared for use\n  :effect (and\n            (used ?resource) ; The resource is used\n            (task_completed ?actor ?location) ; Task at the location is completed\n            (not (has ?actor ?resource))",
    "(:action initiate\n    :parameters (?actor - entity ?target - object)\n    :precondition (and (ready ?actor) (condition ?target initial))\n    :effect (and (condition ?target activated) (state ?actor engaged))",
    "(:action balance ; Balance resources, conditions, and time\n :parameters (?entity - entity ?resource - resource ?condition - condition ?time - time)\n :precondition (and (location ?resource out_of_place) \n                    (cleanness ?entity clean) \n                    (time ?time earlier)\n                    (not (balanced ?entity ?resource ?condition ?time)))\n :effect (and (cleanness ?entity dirty)\n              (fullness ?resource fuller)\n              (time ?time later)\n              (completion ?time finished)\n              (balanced ?entity ?resource ?condition ?time))",
    "(:action watch ; Monitor an entity's condition and update its status\n    :parameters (?entity - object)\n    :precondition (and (observable ?entity) (inconsistent ?entity))\n    :effect (and (consistent ?entity) (not (inconsistent ?entity))",
    "(:action keep ; Maintain or transform the state of a resource\n  :parameters (?entity - object ?state1 - state ?state2 - state)\n  :precondition (and (in_state ?entity ?state1) (condition ?entity))\n  :effect (and (in_state ?entity ?state2) (not (in_state ?entity ?state1))",
    "(:action inquire ; Inquire about obtaining an item from a specific location\n  :parameters (?npc - player ?location - location ?item - object)\n  :precondition (and (at ?npc ?location) (source_location ?location))\n  :effect (and (inventory ?npc ?item) (not (at ?item ?location))",
    "(:action visit ; Visit a location to retrieve an item\n    :parameters (?npc - person ?location - location ?item - object)\n    :precondition (and (at ?npc ?location) (location_type ?location))\n    :effect (and (inventory ?npc ?item) (not (at ?item ?location))",
    "(:action determine ; Determine the state of a subject and update knowledge\n:parameters (?entity - agent ?subject - object)\n:precondition (and (knowledge ?entity ?subject unselected))\n:effect (knowledge ?entity ?subject selected))",
    "(:action compost\n  ; Compost an item and update its location status\n  :parameters (?agent - agent ?item - compostable ?from - location ?to - location)\n  :precondition (and (at ?agent ?from) (location ?item ?from))\n  :effect (and (location ?item ?to))",
    "(:action contact ; Contact a location to acquire resources\n  :parameters (?npc - player ?location - location ?resource - item)\n  :precondition (and (at ?npc ?location) (resource_source ?location))\n  :effect (and (inventory ?npc ?resource) (not (at ?resource ?location))",
    "(:action be ; Engage in a collaborative or resource-sharing activity\n    :parameters (?entity - agent ?location - place)\n    :precondition (and (at ?entity ?location) (collaborative ?location))\n    :effect (shared_resources ?entity ?location)\n)",
    "(:action in ; Move an entity into a container or location\n :parameters (?entity - object ?location - place)\n :precondition (and (at ?entity ?source) (not (in ?entity ?location)))\n :effect (and (in ?entity ?location) (not (at ?entity ?source))"
]