[
    "```pddl\n[\n(:action cover \n    :parameters (?entity - object ?resource - object)\n    :precondition (and \n                   (needs_covering ?entity) \n                   (resource_available ?resource))\n    :effect (and \n             (covered ?entity) \n             (not (needs_covering ?entity)))\n),\n(:action treat \n    :parameters (?subject - object ?object - feature)\n    :precondition (and\n                 (requires_treatment ?subject ?object)\n                 (available_resources ?object)\n               )\n    :effect (and\n           (treated ?subject ?object)\n           (not (requires_treatment ?subject ?object)))\n),\n(:action create_style\n    :parameters (?agent - entity ?style - style ?material - material)\n    :precondition (and \n                    (has_ability ?agent ?style) \n                    (current_form ?material original)\n                    (desire_change ?agent ?style))\n    :effect (and \n              (current_form ?material ?style)\n              (not (current_form ?material original)))\n),\n(:action learn \n  :parameters (?entity - entity ?skill - skill)\n  :precondition (and (not (knows ?entity ?skill)))\n  :effect (knows ?entity ?skill)\n),\n(:action braid \n    :parameters (?entity - object)\n    :precondition (and (decoration ?entity initial_state) (visibility ?entity initial_visibility))\n    :effect (and (decoration ?entity modified_state) (visibility ?entity modified_visibility))\n),\n(:action secure\n    :parameters (?entity - object ?resource - object)\n    :precondition (and \n                    (state ?entity initial)\n                    (location ?resource available)\n                  )\n    :effect (and \n              (state ?entity transformed)\n              (location ?resource utilized))\n),\n(:action divide \n    :parameters (?entity - object ?context - context)\n    :precondition (and \n                    (divisible ?entity)\n                    (not (divided ?entity))\n                    (contextual_precondition ?entity ?context)\n                  )\n    :effect (and \n              (divided ?entity)\n              (contextual_effect ?entity ?context))\n),\n(:action pull \n  :parameters (?entity - object ?state - state)\n  :precondition (and \n                  (current_state ?entity ?state)\n                  (not (desired_state ?entity))\n                )\n  :effect (desired_state ?entity)\n),\n(:action sweep \n    :parameters (?n - object ?attribute - property ?initial_state - state ?final_state - state)\n    :precondition (and (?attribute ?n ?initial_state))\n    :effect (and (?attribute ?n ?final_state))\n),\n(:action start \n    :parameters (?entity - object ?action - process)\n    :precondition (and (ready_to_start ?entity) (process_state ?entity not_started))\n    :effect (and (process_state ?entity started))\n),\n(:action add \n    :parameters (?entity - object ?target - location)\n    :precondition (and \n        (ready_for_addition ?entity) \n        (suitable ?target)\n        (not (added ?entity ?target)))\n    :effect (and \n        (added ?entity ?target)\n        (updated_state ?entity ?target)\n        (not (ready_for_addition ?entity)))\n),\n(:action cross \n    :parameters (?entity - entity)\n    :precondition (and \n        (or (selected ?entity) (unselected ?entity))\n        (or (unadjusted ?entity) (carefully_placed ?entity))\n    )\n    :effect (and \n        (crossed ?entity)\n        (selected ?entity)\n        (not (unselected ?entity)))\n),\n(:action bend \n  :parameters (?npc - entity ?material - object)\n  :precondition (and\n                  (ready-to-bend ?npc ?material)\n                  (not (bent ?material))\n                )\n  :effect (bent ?material)\n),\n(:action brush \n    :parameters (?entity - object)\n    :precondition (and (state ?entity tangled))\n    :effect (and (state ?entity smooth))\n),\n(:action ModifyAttribute\n  :parameters (?entity - entity ?attribute - attribute)\n  :precondition (not (has_attribute ?entity ?attribute))\n  :effect (has_attribute ?entity ?attribute)\n),\n(:action GrabSmallSection \n    :parameters (?actor - entity ?section - section)\n    :precondition (and (parted ?actor) (not (selected ?section)))\n    :effect (selected ?section)\n),\n(:action DivideSection \n    :parameters (?entity - object ?context - context)\n    :precondition (and (selected ?entity) (contextual_condition ?context))\n    :effect (divided ?entity)\n),\n(:action TieStrandsIntoKnot\n    :parameters (?entity - entity ?section - section)\n    :precondition (and (divided ?section) (not (knotted ?entity ?section)))\n    :effect (knotted ?entity ?section)\n),\n(:action AddHairToStrand \n    :parameters (?entity - object ?feature - feature)\n    :precondition (and (has_state ?entity ?initial_state))\n    :effect (and (updated_state ?entity ?new_state))\n),\n(:action TieStrandsAgain \n    :parameters (?entity - object)\n    :precondition (reinforced ?entity)\n    :effect (knotted ?entity)\n),\n(:action TieBraidOff\n    :parameters (?entity - object)\n    :precondition (knotted ?entity)\n    :effect (braided ?entity)\n),\n(:action GatherTransform \n    :parameters (?entity - object ?state1 - state ?state2 - state)\n    :precondition (and (not (?state2 ?entity)) (?state1 ?entity))\n    :effect (and (?state2 ?entity) (not (?state1 ?entity)))\n),\n(:action TwistIntoBun\n    :parameters (?entity - object ?style - hairstyle)\n    :precondition (and (prepared ?entity) (not (styled ?entity ?style)))\n    :effect (and (styled ?entity ?style) (secured ?style))\n),\n(:action PullHair \n    :parameters (?entity - object ?tool - tool)\n    :precondition (and (prepared ?entity) (attached ?tool))\n    :effect (and (modified ?entity) (used ?tool) (not (attached ?tool)))\n),\n(:action ContinueBraiding\n    :parameters (?n - object ?tool - object)\n    :precondition (and (or (plain ?n) (braided ?n)) (not (invisible ?n)))\n    :effect (and \n        (when (plain ?n) (and (braided ?n) (not (plain ?n))))\n),\n(:action re \n  :parameters (?agent - entity ?entity - object)\n  :precondition (and (needs_repair ?entity) (can_repair ?agent ?entity))\n  :effect (and (repaired ?entity) (not (needs_repair ?entity)))\n),\n(:action sliplargerbeads \n    :parameters (?entity - entity ?container - container)\n    :precondition (and (location ?entity off ?container) (organization ?entity random))\n    :effect (and (location ?entity on ?container) (organization ?entity ordered))\n),\n(:action braiding \n    :parameters (?entity - object)\n    :precondition (and \n                 (entity_state ?entity initial_state)\n                 (visibility ?entity visible))\n    :effect (and\n           (entity_state ?entity transformed_state)\n           (visibility ?entity invisible))\n),\n(:action transform_state\n    :parameters (?entity - entity ?descriptor - attribute)\n    :precondition (not (has_attribute ?entity ?descriptor))\n    :effect (has_attribute ?entity ?descriptor)\n),\n(:action transform_state \n  :parameters (?entity - object ?attribute - attribute)\n  :precondition (and (current_state ?entity ?attribute) (not (target_state ?entity ?attribute)))\n  :effect (target_state ?entity ?attribute)\n),\n(:action PlaitAsNormal \n    :parameters (?entity - object ?task - task)\n    :precondition (and (ready_for_task ?entity ?task) (not (completed ?entity ?task)))\n    :effect (completed ?entity ?task)\n),\n(:action process_material\n    :parameters (?material - object)\n    :precondition (and (not (processed ?material)) (unprocessed ?material))\n    :effect (and (processed ?material) (not (unprocessed ?material)))\n),\n(:action MakeCompletedNecklace\n    :parameters (?entity - object ?state1 - state ?state2 - state)\n    :precondition (and (not (?state2 ?entity)) (?state1 ?entity))\n    :effect (and (?state2 ?entity) (not (?state1 ?entity)))\n),\n(:action TransformAndUseResource\n    :parameters (?resource - object ?form - state ?use - state)\n    :precondition (and (in_state ?resource ?form) (not (in_state ?resource ?use)))\n    :effect (in_state ?resource ?use)\n)\n]\n```"
]