[
    "```pddl\n[\"(:action put ; General action to place an item or change an object's state\\n    :parameters (?actor - agent ?item - object ?target - location)\\n    :precondition (and (available ?actor) (not (in ?item ?target)))\\n    :effect (and (in ?item ?target) (not (available ?actor))))\",\n \"(:action add\\n    :parameters (?entity - object ?container - container ?location - location)\\n    :precondition (and (distinct ?entity ?container) \\n                       (at_location ?entity ?location) \\n                       (not (mixed ?entity))\\n                       (not (full ?container)))\\n    :effect (and (mixed ?entity) \\n                 (full ?container) \\n                 (not (at_location ?entity ?location))))\",\n \"(:action dissolve\\n  :parameters (?agent - agent ?entity - object ?location - location)\\n  :precondition (and \\n    (or (visible ?agent) (present ?agent ?location))\\n    (or (solid ?entity) (dry ?entity) (cold ?entity) (location ?entity ?location)))\\n  :effect (and \\n    (or (invisible ?agent) (dissolved ?entity) (wet ?entity) (hot ?entity))))\",\n \"(:action take ; Perform a task involving transferring or applying an item to achieve a desired state\\n    :parameters (?actor - agent ?item - object ?target - object ?container - object)\\n    :precondition (and\\n        (available ?actor)\\n        (holds ?item ?actor)\\n        (not (in ?item ?target))\\n        (not (full ?container)))\\n    :effect (and\\n        (in ?item ?target)\\n        (not (holds ?item ?actor))))\",\n \"(:action purchase ; General action to acquire or prepare items\\n    :parameters (?agent - agent ?resource - object ?container - location)\\n    :precondition (and (available ?agent) (not (possesses ?agent ?resource)) (in ?resource ?container))\\n    :effect (and (possesses ?agent ?resource) (not (in ?resource ?container))))\",\n \"(:action create ; Create or transform an entity into a desired state\\n :parameters (?agent - agent ?target - object)\\n :precondition (and \\n                (applicable ?agent ?target) ; Abstract condition indicating the agent can work on the target\\n                (not (created ?target)))     ; The target is not yet in the created state\\n :effect (and \\n          (created ?target)                 ; The target reaches the created state\\n          (transformed ?agent ?target)))\",\n \"(:action shape ; Shape an item and update its state\\n    :parameters (?entity - shapable_entity)\\n    :precondition (and (prepared ?entity) (modifiable ?entity))\\n    :effect (and (shaped ?entity) (not (modifiable ?entity))))\",\n \"(:action poke-hole\\n  :parameters (?l - letter)\\n  :precondition (and (shaped ?l) (nameless ?l))\\n  :effect (and (hole ?l) (named ?l)))\",\n \"(:action poke\\n  :parameters (?entity - object)\\n  :precondition (and (shaped ?entity) (nameless ?entity))\\n  :effect (and (hole ?entity) (named ?entity)))\",\n \"(:action decorate\\n    :parameters (?entity - object)\\n    :precondition (and (requires_decoration ?entity) (unmade ?entity))\\n    :effect (and (decorated ?entity) (not (unmade ?entity))))\",\n \"(:action consume ; Consume an item and update the entity's state\\n    :parameters (?entity - agent ?item - consumable)\\n    :precondition (and (available ?entity) (not (satisfied ?entity)) (usable ?item))\\n    :effect (and (satisfied ?entity) (not (usable ?item))))\",\n \"(:action clean\\n    ; Clean a target resource and update its cleanliness status\\n    :parameters (?agent - agent ?target - object ?tool - resource)\\n    :precondition (and \\n        (available ?agent)\\n        (requires_cleaning ?target)\\n        (appropriate_tool ?tool ?target))\\n    :effect (and \\n        (clean ?target)\\n        (not (dirty ?target))))\",\n \"(:action open ; Open a resource and update its status\\n    :parameters (?agent - agent ?resource - object)\\n    :precondition (and (present ?agent ?resource) (closed ?resource))\\n    :effect (and (open ?resource) (not (closed ?resource))))\",\n \"(:action use ; Utilize a resource and update its status\\n :parameters (?agent - agent ?resource - resource)\\n :precondition (and (available ?agent) (not (used ?agent ?resource)))\\n :effect (and (used ?agent ?resource) (not (available ?resource))))\",\n \"(:action tip ; Perform a tip action to modify the state of a resource\\n    :parameters (?entity - agent ?resource - item)\\n    :precondition (and (modifiable ?resource) (not (modified ?resource)))\\n    :effect (modified ?resource))\",\n \"(:action finish ; Complete a task and update its status\\n :parameters (?entity - object ?state_in_progress - predicate ?state_completed - predicate)\\n :precondition (and (?state_in_progress ?entity))\\n :effect (and (?state_completed ?entity) (not (?state_in_progress ?entity))))\",\n \"(:action watch\\n    ; Observe a condition and update the status\\n    :parameters (?observer - agent ?condition - state ?resource - object)\\n    :precondition (and (not (observed ?observer ?condition)))\\n    :effect (and (observed ?observer ?condition) (resource_active ?resource)))\",\n \"(:action play\\n    :parameters (?actor - agent ?location - location ?item - object ?state_before - state ?state_after - state)\\n    :precondition (and (at ?actor ?location) (status ?item ?state_before))\\n    :effect (and (status ?item ?state_after) (not (status ?item ?state_before))))\",\n \"(:action keep ; Maintain or complete a process or resource\\n  :parameters (?entity - object)\\n  :precondition (unfinished ?entity)\\n  :effect (finished ?entity))\",\n \"(:action boiled ; Boil a substance contained in a vessel\\n:parameters (?v - vessel ?s - substance)\\n:precondition (and (inContainer ?s ?v) (onHeatSource ?v) (not (boiling ?s)))\\n:effect (and (boiling ?s) (not (cold ?s))))\"]\n```"
]