[
    "```pddl\n[\n  (:action evaluate\n    :parameters (?agent - agent ?resource - object)\n    :precondition (and (not (evaluated ?agent ?resource)))\n    :effect (evaluated ?agent ?resource)\n  ),\n  \n  (:action install\n    :parameters (?agent - agent ?target - object ?location - place)\n    :precondition (and (at ?agent ?location) (not (installed ?target)) (ready ?target))\n    :effect (and (installed ?target) (availability ?target available))\n  ),\n  \n  (:action make\n    :parameters (?agent - agent ?target - object)\n    :precondition (and (ready ?agent ?target) (not (created ?agent ?target)))\n    :effect (created ?agent ?target)\n  ),\n  \n  (:action choose_and_acquire\n    :parameters (?agent - agent ?item - object ?location - place)\n    :precondition (and \n                    (at ?agent ?location)\n                    (available ?item ?location)\n                    (not (chosen ?agent ?item))\n                  )\n    :effect (and \n             (chosen ?agent ?item)\n             (owns ?agent ?item)\n             (not (at ?item ?location))\n            )\n  ),\n  \n  (:action pick\n    :parameters (?agent - agent ?item - object)\n    :precondition (and (eligible ?agent) (not (picked ?agent ?item)))\n    :effect (picked ?agent ?item)\n  ),\n  \n  (:action talk\n    :parameters (?npc - agent ?entity - agent)\n    :precondition (and (at ?npc ?location) (at ?entity ?location) (visible ?npc))\n    :effect (and (informed ?npc ?entity) (invisible ?npc) (not (visible ?npc)))\n  ),\n  \n  (:action listen\n    :parameters (?agent - agent ?source - source_type)\n    :precondition (and (available ?agent) (not (listening_to ?agent ?source)))\n    :effect (listening_to ?agent ?source)\n  ),\n  \n  (:action learn\n    :parameters (?agent - agent ?subject - object)\n    :precondition (and (selected ?subject) (not (knowledge_acquired ?agent ?subject)))\n    :effect (knowledge_acquired ?agent ?subject)\n  ),\n  \n  (:action confirm\n    :parameters (?agent - agent ?entity - object ?feature - feature)\n    :precondition (and (knowledge_acquired ?agent ?entity) (not (confirmation_complete ?agent ?feature)))\n    :effect (confirmation_complete ?agent ?feature)\n  ),\n  \n  (:action compare\n    :parameters (?item1 - object ?item2 - object ?agent - agent)\n    :precondition (and (at ?agent ?item1) (at ?agent ?item2) (not (compared ?item1 ?item2)))\n    :effect (and (compared ?item1 ?item2) (comparison_done ?agent))\n  ),\n  \n  (:action understand\n    :parameters (?agent - agent ?concept - knowledge)\n    :precondition (not (understood ?agent ?concept))\n    :effect (understood ?agent ?concept)\n  ),\n  \n  (:action identify_needs\n    :parameters (?agent - agent)\n    :precondition (and (understand ?agent) (fuel_efficiency_issue ?agent))\n    :effect (identified_needs ?agent)\n  ),\n  \n  (:action identify\n    :parameters (?agent - agent ?subject - object)\n    :precondition (and (understand ?agent) (issue ?subject))\n    :effect (identified ?agent ?subject)\n  ),\n  \n  (:action finish\n    :parameters (?agent - agent ?task - task ?location - place)\n    :precondition (and (at ?agent ?location) (task_assigned ?agent ?task) (not (completed ?agent ?task)))\n    :effect (and (completed ?agent ?task) (not (task_assigned ?agent ?task)))\n  ),\n  \n  (:action research\n    :parameters (?agent - agent ?object - object)\n    :precondition (and\n                    (needs_evaluated ?agent ?object)\n                    (budget_set ?agent ?object)\n                  )\n    :effect (research_done ?agent ?object)\n  ),\n  \n  (:action decide\n    :parameters (?agent - agent ?subject - item)\n    :precondition (and (shortlist_created ?agent ?subject) (not (decision_made ?agent ?subject)))\n    :effect (decision_made ?agent ?subject)\n  ),\n  \n  (:action determine\n    :parameters (?agent - agent ?target - object ?context - scenario)\n    :precondition (and\n                    (present ?agent ?context)\n                    (not (determined ?target))\n                  )\n    :effect (and\n              (determined ?target)\n              (update ?target ?context)\n            )\n  ),\n  \n  (:action recycle\n    :parameters (?agent - agent ?item - object ?container - place)\n    :precondition (and (at ?item ?agent) (contains ?container ?item))\n    :effect (and (at ?item ?container) (not (contains ?agent ?item)))\n  )\n]\n```"
]