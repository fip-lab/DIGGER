[
    "```pddl\n[\n'(:action move ; Move an agent to a target location or transform a state\\n  :parameters (?agent - agent ?target - place)\\n  :precondition (and\\n    (at ?agent ?location)\\n    (not (at ?agent ?target))\\n  )\\n  :effect (and\\n    (at ?agent ?target)\\n    (not (at ?agent ?location))\\n  ))',\n\n'(:action melt ; Universal action to melt an item and handle related tasks\\n  :parameters (?item - object ?agent - agent ?location - location ?device - appliance)\\n  :precondition (and\\n    (at ?item ?location)\\n    (at ?agent ?location)\\n    (or (not (melted ?item))\\n        (and (power_on ?device) (spinning ?device)))\\n    (or (is_ice ?item) (is_food ?item))\\n  )\\n  :effect (and\\n    (melted ?item)\\n    (or (power_off ?device)\\n        (not (spinning ?device)))))',\n\n'(:action add\\n  ; Universal action to add and transform entities within a context\\n  :parameters (?entity - object ?container - container ?ingredient1 - ingredient ?ingredient2 - ingredient ?actor - agent)\\n  :precondition (and\\n    (at ?entity ?container)\\n    (available ?actor)\\n    (not (transformed ?entity))\\n    (at ?ingredient1 ?container)\\n    (at ?ingredient2 ?container)\\n  )\\n  :effect (and\\n    (transformed ?entity)\\n    (modified ?container)))',\n\n'(:action cut ; Transform an ingredient by preparing it in a different form\\n   :parameters (?item - ingredient ?p - person ?device - appliance)\\n   :precondition (and\\n       (inventory ?p ?item)\\n       (or (chilled ?item) (soft ?item))\\n       (or (is_butter ?item) (location ?item on_counter))\\n       (power ?device off)\\n   )\\n   :effect (and\\n       (prepared ?item)\\n       (not (chilled ?item))))',\n\n'(:action obtain\\n    ; Obtain a resource and update possession or state\\n    :parameters (?actor - agent ?resource - object)\\n    :precondition (and (available ?resource) (not (has ?actor ?resource)))\\n    :effect (and (has ?actor ?resource)))',\n\n'(:action put ; Universal action to place or activate an item in a context\\n    :parameters (?actor - person ?item - object ?location - location ?state - state)\\n    :precondition (and (has ?actor ?item) (at ?actor ?location) (not (?state ?item)))\\n    :effect (and (?state ?item) (not (has ?actor ?item))))',\n\n'(:action measure ; Measure a resource and update its status\\n :parameters (?agent - agent ?resource - object)\\n :precondition (and (at ?agent ?location) (not (measured ?resource)))\\n :effect (measured ?resource))',\n\n'(:action push ; Push an item into a destination and update its status\\n  :parameters (?agent - person ?item - object ?destination - location)\\n  :precondition (and (in_location ?item ?agent) (not (in_dest ?item ?destination)))\\n  :effect (and (not (in_location ?item ?agent)) (in_dest ?item ?destination)))',\n\n'(:action stop ; Universal action to halt a process or activity\\n  :parameters (?actor - agent ?entity - object)\\n  :precondition (or\\n                  (and (active ?entity) (linked ?actor ?entity))\\n                  (and (stationary ?entity) (linked ?actor ?entity))\\n                )\\n  :effect (and (not (active ?entity))))',\n\n'(:action drain ; Drain a resource and update its state\\n    :parameters (?entity - object ?agent - person)\\n    :precondition (and (contains ?entity) (accessible ?agent ?entity))\\n    :effect (and (emptied ?entity) (not (contains ?entity))))',\n\n'(:action warm ; Universal action to change the state of an entity, particularly its temperature\\n :parameters (?entity - object ?source - location ?target - location ?initial_temp - temperature ?final_temp - temperature)\\n :precondition (and (location ?entity ?source) (temperature ?entity ?initial_temp))\\n :effect (and (location ?entity ?target) (temperature ?entity ?final_temp)))',\n\n'(:action open ; Open a resource and update its status\\n  :parameters (?entity - object)\\n  :precondition (and (sealed ?entity) (not (restricted ?entity)))\\n  :effect (and (open ?entity) (not (sealed ?entity))))',\n\n'(:action pulse ; Pulse an entity to change its state\\n  :parameters (?device - appliance ?entity - object ?operator - person)\\n  :precondition (and (at ?operator ?device) (is_empty ?device) (separate ?entity))\\n  :effect (and (not (is_empty ?device))))',\n\n'(:action manage_resource\\n  :parameters (?entity - entity ?resource - object ?location - location ?container - container)\\n  :precondition (and\\n                  (available ?entity)\\n                  (not (managed ?entity ?resource))\\n                  (at ?entity hidden)\\n                  (at ?container countertop))\\n  :effect (and\\n            (managed ?entity ?resource)\\n            (at ?entity ?location)\\n            (at ?container table)))',\n\n'(:action calculate ; Calculate a resource and update its status\\n  :parameters (?entity - object ?resource - object)\\n  :precondition (and (obtained ?resource) (ready ?entity))\\n  :effect (and (calculated ?resource) (not (ready ?entity))))'\n]\n```"
]