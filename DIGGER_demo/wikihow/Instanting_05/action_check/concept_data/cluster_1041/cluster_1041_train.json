[
    "```python\n['(:action use ; Use a resource or ability and update status\\n    :parameters (?actor - person ?resource - object)\\n    :precondition (and (available ?resource) (condition_met ?actor ?resource))\\n    :effect (and (utilized ?actor ?resource)))',\n '(:action listen\\n    :parameters (?npc - person ?source - object)\\n    :precondition (and \\n                    (not (has_listened ?npc ?source))\\n                    (or \\n                        (and (at ?npc library) (available ?source catalog))\\n                        (and (at ?npc home))\\n                        (and (has_reflection_time ?npc))\\n                        (and (topic_chosen ?source) (structured_approach ?npc))\\n                    )\\n                  )\\n    :effect (and \\n              (has_listened ?npc ?source)))',\n '(:action choose ; General action for choosing or acquiring resources or making selections\\n    :parameters (?agent - person ?item - object ?location - place ?collection - collection)\\n    :precondition (and \\n        (or \\n            (and (at ?agent ?location) (not (selected ?location)))\\n            (and (available ?location ?item) (not (inventory ?agent ?item)))\\n            (and (bare ?agent))\\n            (and (not (has ?agent ?item)))\\n            (and (status ?collection in_progress))\\n            (and (status ?collection proofread) (not (submitted ?collection)))\\n        )\\n        (or \\n            (visible ?agent)\\n            (not (has_location ?agent ?location))\\n            (not (has_comfortable_location ?agent))\\n        )\\n    )\\n    :effect (and\\n        (or \\n            (selected ?location)\\n            (inventory ?agent ?item)\\n            (has ?agent ?item)\\n            (chosen ?agent)\\n            (status ?collection chosen)\\n            (submitted ?collection)\\n            (location ?collection ?location)\\n            (has_location ?agent ?location)\\n            (has_comfortable_location ?agent ?location))))',\n '(:action divide ; Divide a resource into sections or parts for organization\\n    :parameters (?entity - person ?resource - object)\\n    :precondition (and (form_chosen ?entity) (inventory ?entity ?resource))\\n    :effect (sections_divided ?resource))',\n '(:action create\\n    :parameters (?npc - person ?target - object)\\n    :precondition (and (ready ?npc ?target) (not (created ?target)))\\n    :effect (and (created ?target)))',\n '(:action set\\n  :parameters (?agent - person ?resource - object ?context - context)\\n  :precondition (and \\n    (available ?agent)\\n    (not (set ?agent ?resource ?context))\\n  )\\n  :effect (and \\n    (set ?agent ?resource ?context)))',\n '(:action start ; Initiate a task or activity, updating the relevant status\\n  :parameters (?npc - person ?res - object)\\n  :precondition (and \\n                  (available ?npc) \\n                  (not (engaged ?npc ?res))\\n                  (or (taking_notes ?npc) (has ?npc ?res))\\n                  (or (decorated ?res) (not (writing ?npc ?res)))\\n                )\\n  :effect (and \\n           (engaged ?npc ?res)\\n           (or (shared_bible_journaling ?npc) (writing ?npc ?res))))',\n '(:action keep\\n    :parameters (?npc - person ?item - object ?location - place ?container - container)\\n    :precondition (and\\n        (or (has_journal ?npc) (has ?npc ?item) (location ?item in_hand ?npc) (location ?item on_countertop))\\n        (not (or (journal_with ?npc ?item) (safe ?item) (entries_consistent ?item) (location ?item in_container ?container)))\\n    )\\n    :effect (and\\n        (or (journal_with ?npc ?item) (safe ?item) (entries_consistent ?item) (location ?item in_container ?container))))',\n '(:action read ; Read an item and update knowledge\\n    :parameters (?npc - person ?item - object)\\n    :precondition (and (not (has_read ?npc ?item)))\\n    :effect (and (has_read ?npc ?item)))',\n '(:action take ; Take an item and update its status\\n  :parameters (?entity - person ?item - object)\\n  :precondition (and (possesses ?entity ?item) (not (taken ?entity ?item)))\\n  :effect (taken ?entity ?item))',\n '(:action reflect ; Reflect on a subject and update status\\n  :parameters (?entity - person ?subject - object ?context - situation)\\n  :precondition (and \\n    (engaged_in ?entity ?subject)\\n    (prepared ?entity ?context)\\n  )\\n  :effect (reflected ?entity ?subject))',\n '(:action stay ; Maintain or achieve a specific state for an entity within a location\\n    :parameters (?npc - person ?location - place)\\n    :precondition (and (at ?npc ?location))\\n    :effect (and (centered ?npc)))',\n '(:action break\\n  :parameters (?npc - person ?resource - object ?location - place)\\n  :precondition (and (at ?npc ?location) (inventory ?npc ?resource))\\n  :effect (and (or (no_writer_block ?npc) (reflective ?npc) (centered ?npc) (available ?location))))',\n '(:action review ; Review a resource and update its status\\n    :parameters (?npc - person ?resource - object ?context - context)\\n    :precondition (and (has_resource ?npc ?resource) (contextual_time ?context) (not (reviewed ?npc ?resource ?context)))\\n    :effect (reviewed ?npc ?resource ?context))',\n '(:action treat ; Apply treatment to enhance and refine a resource\\n    :parameters (?entity - person ?resource - object ?condition - condition)\\n    :precondition (and (prepared ?entity) (depleted ?resource) (rough ?condition))\\n    :effect (and (enhanced ?entity) (replenished ?resource) (smooth ?condition)\\n                 (not (depleted ?resource))))',\n '(:action study ; Study a specific subject or material\\n  :parameters (?npc - person ?material - object)\\n  :precondition (and (not (studied ?npc ?material)))\\n  :effect (and (studied ?npc ?material)))',\n '(:action reread\\n    :parameters (?entity - person ?resource - object ?location - place)\\n    :precondition (and \\n        (has_access ?entity ?resource) \\n        (at_location ?entity ?location)\\n        (not (recently_viewed ?entity ?resource))\\n    )\\n    :effect (and \\n        (recently_viewed ?entity ?resource)\\n        (updated_memory ?entity ?resource)))',\n '(:action be ; Be in a desired state regarding a specific condition\\n    :parameters (?entity - person ?condition - attribute)\\n    :precondition (and (not (?condition ?entity)))\\n    :effect (?condition ?entity))',\n '(:action process_and_store_item\\n  ; Process an item through a series of preparatory steps and store it in a designated location\\n  :parameters (?agent - person ?item - object)\\n  :precondition (and \\n    (prepared ?agent)\\n    (not (processed ?agent ?item))\\n    (not (stored ?item)))\\n  :effect (and \\n    (processed ?agent ?item)\\n    (stored ?item)))']\n```"
]