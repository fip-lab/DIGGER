[
    "```pddl\n(:action go\n  :parameters (?entity - entity ?destination - place ?current_location - place)\n  :precondition (and (at ?entity ?current_location) \n                     (not (at ?entity ?destination)) \n                     (or (not (museum_or_gallery ?destination)) (at ?entity elsewhere)))\n  :effect (and (at ?entity ?destination) \n               (not (at ?entity ?current_location)))\n)\n\n(:action make\n  :parameters (?agent - agent ?location - place ?object - object)\n  :precondition (and \n    (present ?agent ?location) \n    (available ?object)\n  )\n  :effect (and \n    (created ?agent ?object) \n    (not (available ?object))\n  )\n)\n\n(:action set\n  :parameters (?npc - agent ?target - entity ?location - place)\n  :precondition (and \n    (at ?npc ?location) \n    (not (set ?target ?condition)) \n    (condition_met_for_set ?npc ?target ?condition))\n  :effect (and \n    (set ?target ?condition) \n    (not (previous_condition ?target))\n  )\n)\n\n(:action throw\n  :parameters (?entity - agent ?location - place ?state1 - state ?state2 - state ?resource - resource_type)\n  :precondition (and (at ?entity ?location) (has_state ?location ?state1) (not (has_state ?location ?state2)))\n  :effect (and (has_state ?location ?state2) (not (has_state ?location ?state1)))\n)\n\n(:action get\n  :parameters (?agent - entity ?resource - resource ?location - location)\n  :precondition (and \n                  (or (at ?agent ?location) \n                      (location ?agent ?location)\n                      (npc ?agent))\n                  (or (availability ?location absent) \n                      (in_stock ?resource ?location)\n                      (garden ?location)\n                      (possible ?resource)\n                      (given ?resource)))\n  :effect (and \n           (or (availability ?location present)\n               (location ?agent on_table)\n               (in_garden ?agent)\n               (has_info ?agent)\n               (inventory ?resource ?agent)\n               (gift_purchased ?agent)\n               (not (in_stock ?resource ?location))))\n)\n\n(:action plan\n  :parameters (?actor - agent ?activity - task)\n  :precondition (and \n    (available ?actor) \n    (not (planned ?actor ?activity))\n    (or \n      (and (type ?activity mini_getaway) (at ?actor ?activity) (openness ?activity closed))\n      (and (type ?activity vacation) (graduated ?actor))\n      (type ?activity party)\n    )\n  )\n  :effect (and \n    (planned ?actor ?activity)\n    (or \n      (and (type ?activity mini_getaway) (openness ?activity open))\n    )\n  )\n)\n\n(:action celebrate\n  :parameters (?npc - person ?event - celebration ?location - place ?group - group)\n  :precondition (and (at ?npc ?location) \n                     (ready_for ?event ?location) \n                     (belong_to ?npc ?group))\n  :effect (and (completed ?event ?location) \n               (celebrated_with ?npc ?group))\n)\n\n(:action engage_in_activity\n  :parameters (?npc - person ?target - entity ?context - context)\n  :precondition (and \n      (present ?npc ?context)\n      (not (completed ?npc ?target))\n      (available ?target ?context))\n  :effect (and \n      (completed ?npc ?target)\n      (knowledge ?npc ?target ?context))\n)\n\n(:action review\n :parameters (?reviewer - agent ?task - task)\n :precondition (and (in_progress ?reviewer ?task) (not (completed ?reviewer ?task)))\n :effect (completed ?reviewer ?task)\n)\n\n(:action spot\n  :parameters (?entity - object)\n  :precondition (and (status ?entity unselected))\n  :effect (and (status ?entity selected))\n)\n\n(:action take\n  :parameters (?actor - entity ?item - object ?location - location)\n  :precondition (and \n      (prepared ?item) \n      (available ?actor) \n      (at ?actor ?location))\n  :effect (and \n      (possessed ?actor ?item)\n      (at ?item ?location))\n)\n\n(:action record\n  :parameters (?agent - entity ?resource - object ?location - place)\n  :precondition (and \n    (at ?agent ?location)\n    (ready ?resource)\n    (not (captured ?agent ?resource))\n  )\n  :effect (and \n    (captured ?agent ?resource)\n  )\n)\n\n(:action study\n  :parameters (?entity - agent ?target - entity ?context - location)\n  :precondition (and (at ?entity ?context) (not (studied ?entity ?target)))\n  :effect (and (studied ?entity ?target) (not (at ?entity ?context)))\n)\n\n(:action learn\n  :parameters (?agent - person ?subject - object)\n  :precondition (and \n    (available ?agent)\n    (not (learned ?agent ?subject))\n    (contextual_precondition ?agent ?subject)\n  )\n  :effect (and \n    (learned ?agent ?subject)\n    (contextual_effect ?agent ?subject)\n  )\n)\n\n(:action listen\n  :parameters (?agent - entity ?subject - entity)\n  :precondition (and (present ?agent ?subject) \n                     (valid ?subject))\n  :effect (and (informed ?agent ?subject)\n               (not (unknown ?subject)))\n)\n\n(:action count\n  :parameters (?agent - entity ?resource - object)\n  :precondition (and (ready_to_count ?agent) (not (counted ?resource)))\n  :effect (counted ?resource)\n)\n\n(:action talk\n :parameters (?npc - person ?listener - person ?topic - subject)\n :precondition (and (at ?npc ?listener) (at ?listener ?listener) \n                    (or (knowledge ?listener previous_topic) (not (previous_topic ?topic))))\n :effect (knowledge ?listener ?topic)\n)\n\n(:action reassure\n  :parameters (?npc - person ?target - person ?resource - object ?context - location ?knowledge - topic)\n  :precondition (and (at ?npc ?context) (at ?target ?context) (knowledge ?target ?knowledge) (available ?resource))\n  :effect (and (reassured ?target) (provided ?npc ?resource))\n)\n\n(:action participate\n  :parameters (?npc - person ?event - activity ?location - place)\n  :precondition (and (at ?npc ?location) (available ?event ?location))\n  :effect (participated ?npc ?event)\n)\n\n(:action understand\n  :parameters (?agent - entity ?concept - concept)\n  :precondition (and (entity ?agent) (not (understood ?agent ?concept)))\n  :effect (understood ?agent ?concept)\n)\n\n(:action stay\n  :parameters (?p - entity ?condition - condition)\n  :precondition (and (entity ?p) (met ?p ?condition))\n  :effect (maintained ?p ?condition)\n)\n\n(:action express\n  :parameters (?entity - agent ?feeling - state ?context - situation)\n  :precondition (and (agent ?entity))\n  :effect (and (expressed ?entity ?feeling ?context))\n)\n\n(:action help\n  :parameters (?assistant - agent ?entity - object ?location - place)\n  :precondition (and (agent ?assistant) (object ?entity) (place ?location) (needs_help ?entity))\n  :effect (helped ?assistant ?entity ?location)\n)\n\n(:action play\n  :parameters (?entity - agent ?activity - task)\n  :precondition (and (available ?entity) (not (engaged ?entity ?activity)))\n  :effect (and (engaged ?entity ?activity) (not (unengaged ?entity ?activity)))\n)\n\n(:action show\n  :parameters (?subject - entity ?item - object)\n  :precondition (and (not (shown ?subject ?item)))\n  :effect (and (shown ?subject ?item))\n)\n\n(:action invite\n  :parameters (?entity - person ?event - event)\n  :precondition (and (not (invited ?entity ?event)))\n  :effect (and (invited ?entity ?event))\n)\n\n(:action punctuation\n  :parameters (?entity - object ?from - location ?to - location)\n  :precondition (and (location ?entity ?from))\n  :effect (and (not (location ?entity ?from)) (location ?entity ?to))\n)\n\n(:action reinjoylife\n  :parameters (?p - person ?activity - object)\n  :precondition (and (at ?p location) (not (engaged ?p ?activity)))\n  :effect (engaged ?p ?activity)\n)\n\n(:action transparent\n  :parameters (?agent - entity ?item - object)\n  :precondition (and (condition_met) (at ?item ?agent))\n  :effect (and (transformed ?item) (not (at ?item ?agent)))\n)\n\n(:action attend\n  :parameters (?npc - person ?event - event ?location - place)\n  :precondition (and (at ?npc ?location) (event ?event) (not (attended ?npc ?event)))\n  :effect (attended ?npc ?event)\n)\n\n(:action contemplate\n  :parameters (?entity - thinker ?subject - topic)\n  :precondition (and (thinker ?entity) (awake ?entity) (not (contemplating ?entity ?subject)))\n  :effect (contemplating ?entity ?subject)\n)\n\n(:action theme\n  :parameters (?entity - object)\n  :precondition (and (not (themed ?entity)))\n  :effect (themed ?entity)\n)\n\n(:action have\n  :parameters (?entity - agent ?activity - task)\n  :precondition (and (not (engaged ?entity ?activity)))\n  :effect (engaged ?entity ?activity)\n)\n```"
]