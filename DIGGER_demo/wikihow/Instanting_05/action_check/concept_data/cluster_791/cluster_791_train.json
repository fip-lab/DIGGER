[
    "```pddl\n(:action place ; Place an item in a specified location and update its status\n  :parameters (?entity - object ?location - location ?tool - object ?state - state)\n  :precondition (and \n    (available ?entity) \n    (not (at ?entity ?location))\n    (available ?tool)\n  )\n  :effect (and \n    (at ?entity ?location)\n    (toggle_status ?entity ?state)\n    (not (at ?entity not-on-table))\n  )\n)\n\n(:action take ; Take an item and change its state or location\n  :parameters (?entity - object ?from - location ?to - location)\n  :precondition (and \n    (located ?entity ?from) \n    (available ?to)\n  )\n  :effect (and \n    (not (located ?entity ?from))\n    (located ?entity ?to)\n  )\n)\n\n(:action dry ; Generalized action to change the state of an object or resource\n  :parameters (?agent - agent ?item - object ?container - object ?location - location)\n  :precondition (and \n    (or (wet ?item) \n        (and (camouflaged ?agent) (invisible ?agent)) \n        (whole ?item)\n        (at ?item ?location)\n        (temperature ?location cool))\n  )\n  :effect (and \n    (dry ?item) \n    (not (wet ?item))\n  )\n)\n\n(:action use ; Use an item to achieve a specified goal\n  :parameters (?user - agent ?item - object ?location - location)\n  :precondition (and \n    (available ?user)\n    (not (in_use ?item))\n    (suitable ?location)\n  )\n  :effect (and \n    (in_use ?item)\n    (at_location ?user ?location)\n    (goal_state ?item ?user ?location)\n  )\n)\n\n(:action freeze ; Freeze an object and update its temperature and location status\n  :parameters (?actor - agent ?item - object ?container - container)\n  :precondition (and \n    (or (contains ?container ?item) (dyed ?item))\n    (or (location ?container outside_refrigerator) (not (frozen ?item)))\n    (temperature ?container warm)\n  )\n  :effect (and \n    (temperature ?container cold)\n    (location ?container inside_refrigerator)\n    (frozen ?item)\n  )\n)\n\n(:action pop ; Pop a component from a container and modify its state\n  :parameters (?npc - agent ?container - object ?component - object)\n  :precondition (and \n    (contains ?container ?component) \n    (modifiable ?component) \n    (condition ?container suitable_condition)\n  )\n  :effect (and \n    (not (contains ?container ?component))\n  )\n)\n\n(:action get ; Universal action for acquiring or transforming resources\n  :parameters (?actor - agent ?resource - object ?location - location ?condition - condition)\n  :precondition (and \n    (available ?actor) \n    (at ?resource ?location) \n    (satisfies ?resource ?condition)\n  )\n  :effect (and \n    (acquired ?actor ?resource) \n    (not (at ?resource ?location))\n  )\n)\n\n(:action cut ; Cut an item, updating its state and possibly its environment\n  :parameters (?entity - object ?surface - object)\n  :precondition (and \n    (cuttable ?entity)\n    (or (whole ?entity) (prepared ?entity))\n    (or (not (on_surface ?entity ?surface)) (on_surface ?entity ?surface))\n  )\n  :effect (and \n    (cut ?entity)\n    (not (on_surface ?entity ?surface))\n  )\n)\n\n(:action add ; Add an entity to a target and update the state\n  :parameters (?agent - agent ?entity - object ?target - object)\n  :precondition (and \n    (available ?entity) \n    (not (added ?entity ?target))\n    (precondition_check ?entity ?target)\n  )\n  :effect (and \n    (added ?entity ?target)\n    (updated_state ?target)\n  )\n)\n\n(:action wait ; Wait for an entity to reach a certain state\n  :parameters (?entity - object)\n  :precondition (and \n    (not (goal_state ?entity))\n  )\n  :effect (goal_state ?entity)\n)\n\n(:action prepare ; Prepare a variety of items or resources\n  :parameters (?entity - object ?location - location ?user - agent)\n  :precondition (and \n    (not (prepared ?entity))\n    (or (inventory ?user ?entity) (at_location ?entity ?location))\n  )\n  :effect (and \n    (prepared ?entity)\n    (not (inventory ?user ?entity))\n  )\n)\n\n(:action check ; Generic action to check a condition and update the status\n  :parameters (?entity - object ?location - location ?item - object)\n  :precondition (and \n    (at ?entity ?location) \n    (at ?item ?location)\n    (not (checked ?entity ?item))\n  )\n  :effect (and \n    (checked ?entity ?item)\n    (stirred ?item)\n  )\n)\n\n(:action measure\n  :parameters (?entity - object)\n  :precondition (and \n    (unmeasured ?entity)\n  )\n  :effect (and \n    (measured ?entity) \n    (not (unmeasured ?entity))\n  )\n)\n\n(:action burn ; Burn an item and update its state\n  :parameters (?actor - agent ?item - object)\n  :precondition (and \n    (has_item ?actor ?item) \n    (not (burned ?item))\n  )\n  :effect (and \n    (burned ?item) \n    (not (full ?item))\n  )\n)\n\n(:action free ; Free a resource by applying a material to a container\n  :parameters (?material - object ?container - container)\n  :precondition (and \n    (not (applied ?material ?container))\n  )\n  :effect (applied ?material ?container)\n)\n\n(:action finish ; Complete a task by transforming its state to finished\n  :parameters (?entity - object)\n  :precondition (in_progress ?entity)\n  :effect (and \n    (completed ?entity) \n    (not (in_progress ?entity))\n  )\n)\n\n(:action lick ; Lick an item and update its state\n  :parameters (?actor - agent ?item - object)\n  :precondition (and \n    (dry ?item) \n    (can_lick ?actor ?item)\n  )\n  :effect (and \n    (wet ?item) \n    (not (dry ?item))\n  )\n)\n\n(:action locate ; Locate a resource and update its status\n  :parameters (?agent - agent ?resource - object)\n  :precondition (and \n    (not (located ?resource))\n  )\n  :effect (and \n    (located ?resource) \n    (selected ?agent)\n  )\n)\n\n(:action wick ; Generalized action for wicking and centering processes\n  :parameters (?w - object ?m - object)\n  :precondition (and \n    (prepared ?m) \n    (not (processed ?m))\n  )\n  :effect (and \n    (processed ?m) \n    (centered ?w ?m)\n  )\n)\n\n(:action reuse ; Reuse an item by cleaning and storing it for future use\n  :parameters (?item - object ?location - location ?new_location - location ?cleaner - object)\n  :precondition (and \n    (location ?item ?location)\n    (cleanness ?item clean)\n    (not (stored ?item ?new_location))\n    (available ?cleaner)\n  )\n  :effect (and \n    (location ?item ?new_location)\n    (stored ?item ?new_location)\n    (not (available ?cleaner))\n  )\n)\n\n(:action practice ; Practice a technique on an entity\n  :parameters (?entity - object ?technique - technique)\n  :precondition (and \n    (unpracticed ?entity ?technique)\n  )\n  :effect (and \n    (practiced ?entity ?technique) \n    (not (unpracticed ?entity ?technique))\n  )\n)\n```"
]