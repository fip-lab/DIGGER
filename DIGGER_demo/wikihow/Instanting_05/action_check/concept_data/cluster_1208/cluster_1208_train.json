[
    "```lisp\n[\n  (:action use\n   :parameters (?actor - agent ?item - object ?tool - object ?context - context)\n   :precondition (and \n     (possesses ?actor ?item)\n     (available ?tool)\n     (suitable ?item ?context)\n     (prepped ?tool)\n   )\n   :effect (and \n     (used ?item)\n     (context_modified ?context)\n     (tool_changed ?tool)\n   )\n  ),\n\n  (:action peel\n   :parameters (?entity - object ?tool - utensil ?agent - agent ?resource - substance)\n   :precondition (and\n     (available ?agent)\n     (at ?entity location)\n     (usable ?tool)\n     (available ?resource)\n   )\n   :effect (and\n     (processed ?entity)\n     (used ?tool)\n     (not (raw ?entity))\n   )\n  ),\n\n  (:action cool\n   :parameters (?entity - object ?location - location)\n   :precondition (and\n     (transformed ?entity)\n     (at ?location active)\n   )\n   :effect (and\n     (cooled ?entity)\n     (at ?location inactive)\n   )\n  ),\n\n  (:action mix\n   :parameters (?agent - agent ?resource1 - object ?resource2 - object)\n   :precondition (and \n     (available ?agent) \n     (state ?resource1 available) \n     (state ?resource2 unmixed)\n   )\n   :effect (and \n     (state ?resource2 mixed) \n     (content ?resource2 contains_resource1)\n   )\n  ),\n\n  (:action pick\n   :parameters (?agent - agent ?item - object ?container - location)\n   :precondition (and \n     (at ?item ?location) \n     (not (in ?item ?container))\n   )\n   :effect (and \n     (in ?item ?container) \n     (not (at ?item ?location))\n   )\n  ),\n\n  (:action store\n   :parameters (?entity - object ?location - location)\n   :precondition (and \n     (at ?entity to_the_side) \n     (not (stored ?entity ?location))\n   )\n   :effect (and \n     (stored ?entity ?location) \n     (not (at ?entity to_the_side))\n   )\n  ),\n\n  (:action make\n   :parameters (?actor - agent ?resource - object ?state_before - state ?state_after - state)\n   :precondition (and \n     (has ?actor ?resource) \n     (state ?resource ?state_before)\n   )\n   :effect (and \n     (state ?resource ?state_after) \n     (transformed ?resource)\n   )\n  ),\n\n  (:action shape\n   :parameters (?entity - object ?context - context)\n   :precondition (and \n     (visible ?entity) \n     (modifiable ?entity ?context)\n   )\n   :effect (and \n     (camouflaged ?entity ?context) \n     (invisible ?entity)\n   )\n  ),\n\n  (:action free\n   :parameters (?entity - object ?context - context)\n   :precondition (and \n     (restricted ?entity ?context) \n     (concealed ?entity)\n   )\n   :effect (and \n     (unrestricted ?entity ?context) \n     (revealed ?entity)\n   )\n  ),\n\n  (:action save\n   :parameters (?entity - object ?target - location)\n   :precondition (and \n     (not (stored ?entity ?target)) \n     (suitable ?target)\n   )\n   :effect (and \n     (stored ?entity ?target) \n     (not (pending ?entity))\n   )\n  ),\n\n  (:action freeze\n   :parameters (?entity - object ?container - storage ?method - cooling_method)\n   :precondition (and \n     (stored ?entity ?container) \n     (suitable ?container ?method) \n     (prepared_for_freezing ?entity)\n   )\n   :effect (and \n     (frozen ?entity) \n     (not (liquid ?entity))\n   )\n  ),\n\n  (:action learn\n   :parameters (?agent - agent ?subject - object ?location - place)\n   :precondition (and \n     (present ?agent ?location) \n     (requires_learning ?subject) \n     (adequate_condition ?location)\n   )\n   :effect (and \n     (learned ?agent ?subject) \n     (updated_condition ?location)\n   )\n  ),\n\n  (:action put\n   :parameters (?actor - agent ?item - object ?location - place ?condition - state)\n   :precondition (and \n     (available ?actor) \n     (at ?item ?initial_location) \n     (not (condition_met ?item ?condition))\n   )\n   :effect (and \n     (at ?item ?location) \n     (condition_met ?item ?condition) \n     (not (at ?item ?initial_location))\n   )\n  ),\n\n  (:action default\n   :parameters (?entity - object ?container - location)\n   :precondition (and \n     (at ?entity ?initial_location) \n     (not (in ?entity ?container))\n   )\n   :effect (and \n     (in ?entity ?container) \n     (not (at ?entity ?initial_location))\n   )\n  ),\n\n  (:action chopped\n   :parameters (?npc - agent ?item - resource ?state1 - state ?state2 - state)\n   :precondition (and \n     (current_state ?item ?state1) \n     (visibility ?npc visible)\n   )\n   :effect (and \n     (current_state ?item ?state2) \n     (visibility ?npc invisible)\n   )\n  )\n]\n```"
]