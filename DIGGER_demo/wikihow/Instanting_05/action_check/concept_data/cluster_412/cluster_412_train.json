[
    "```lisp\n[\n'(:action remove\n  :parameters (?entity - object ?location - location ?agent - agent)\n  :precondition (and \n    (at ?entity ?location) \n    (at ?agent ?location) \n    (not (removed ?entity))\n  )\n  :effect (and \n    (removed ?entity) \n    (not (at ?entity ?location))\n  )\n)',\n\n'(:action dig \n :parameters (?agent - agent ?resource - resource ?location - location)\n :precondition (and (at ?agent ?location)\n                    (or (and (moisture ?location dry) (type ?resource root_center))\n                        (and (in_bag ?resource) (type ?location garden))\n                        (and (soil_removed ?resource) (type ?resource fir))\n                        (and (unselected ?resource) (type ?location area))\n                        (and (covering_tracks ?resource) (type ?resource track))\n                        (and (empty ?resource) (type ?resource berm))\n                        (and (at ?resource ?location) (type ?resource plant))\n                        (or (and (not (cut ?resource)) (type ?resource plant))\n                            (and (not (roots_dug ?resource)) (type ?resource fir))\n                            (and (not (built_water_basin ?location)) (type ?resource location))\n                            (and (not (contacted_extension_office ?agent)) (type ?resource track))\n                            (and (not (fuller ?resource)) (type ?resource berm))))\n                )\n :effect (and (moisture ?location wet))\n)',\n\n'(:action place\n  :parameters (?agent - agent ?item - item ?destination - destination)\n  :precondition (and \n                  (available ?agent)\n                  (not (placed ?item ?destination))\n                  (or \n                    (and (at ?item ?destination) (not (in_hole ?item)))\n                    (and (inventory ?agent ?item) (loosened ?item))\n                    (and (planned ?item) (empty ?destination))\n                    (and (in_pot ?item ?destination) (not (in_soil ?item)))\n                    (and (at ?item ?destination) (selected ?destination))\n                    (and (at ?agent ?destination) (not (created ?destination)))\n                    (and (selected ?destination) (fuller ?destination))\n                    (and (at ?agent ?destination))\n                    (and (in_hole ?item) (full_of_soil ?destination))\n                    (and (at ?item ?destination) (inventory ?agent ?item))\n                  )\n                )\n  :effect (and \n            (placed ?item ?destination)\n            (not (in_hole ?item))\n  )\n)',\n\n'(:action choose \n  :parameters (?entity - entity ?target - target)\n  :precondition (and (at ?entity ?target) (not (state_changed ?target)))\n  :effect (and (state_changed ?target))\n)',\n\n'(:action drink \n  :parameters (?entity - person ?liquid - liquid ?container - container)\n  :precondition (and (at ?liquid ?container) (not (drank ?entity ?liquid)))\n  :effect (and (drank ?entity ?liquid))\n)',\n\n'(:action test \n  :parameters (?entity - agent ?resource - object ?location - location)\n  :precondition (and (at ?entity ?location) (not (tested ?resource)))\n  :effect (tested ?resource)\n)',\n\n'(:action modify_state\n  :parameters (?actor - entity ?target - entity ?state1 - state ?state2 - state)\n  :precondition (and (current_state ?target ?state1) (can_modify ?actor ?target))\n  :effect (and (current_state ?target ?state2) (not (current_state ?target ?state1)))\n)',\n\n'(:action add \n  :parameters (?agent - agent ?resource - resource ?location - location)\n  :precondition (and (at ?agent ?location) (at ?resource ?location) (not (processed ?resource)))\n  :effect (and (processed ?resource) (not (at ?resource ?location)))\n)',\n\n'(:action move \n  :parameters (?entity - thing ?from - location ?to - location)\n  :precondition (and (at ?entity ?from) (can_receive ?to ?entity))\n  :effect (and (at ?entity ?to) (not (at ?entity ?from)))\n)',\n\n'(:action plan \n  :parameters (?agent - agent ?resource - resource)\n  :precondition (and (ready_for_action ?agent) (condition_met ?resource))\n  :effect (and (task_planned ?agent ?resource) (not (condition_pending ?resource)))\n)',\n\n'(:action slide \n  :parameters (?entity - object ?container - container)\n  :precondition (and (in_container ?entity ?container) (unused ?entity))\n  :effect (and (out_of_container ?entity ?container) (used ?entity) \n               (not (in_container ?entity ?container)))\n)',\n\n'(:action cut \n  :parameters (?agent - agent ?target - target)\n  :precondition (and (at ?agent ?target) (or (not (cut ?target)) (reforested ?target)))\n  :effect (and (cut ?target) (when (reforested ?target) (and (mowed ?target) (not (reforested ?target)))))\n)',\n\n'(:action use \n  :parameters (?agent - person ?tool - object)\n  :precondition (not (used ?agent ?tool))\n  :effect (used ?agent ?tool)\n)',\n\n'(:action keep \n  :parameters (?entity - entity ?target - target)\n  :precondition (and (not (in_state ?entity ?target)))\n  :effect (in_state ?entity ?target)\n)',\n\n'(:action treat \n :parameters (?resource - entity ?loc - location)\n :precondition (and (at ?resource ?loc) (condition ?resource))\n :effect (and (changed ?resource) (not (condition ?resource)))\n)',\n\n'(:action stop \n :parameters (?agent - agent ?target - entity)\n :precondition (and (active ?agent ?target) (not (stopped ?target)))\n :effect (and (stopped ?target))\n)',\n\n'(:action order \n  :parameters (?resource - object ?location - location)\n  :precondition (and (empty ?location))\n  :effect (and (ordered ?resource) (full ?location))\n)',\n\n'(:action press \n  :parameters (?entity - agent ?location - place ?item - object)\n  :precondition (and (at ?entity ?location) (needs_pressing ?item) (not (processed ?item)))\n  :effect (and (pressed ?item) (processed ?item))\n)',\n\n'(:action plant \n  :parameters (?agent - agent ?item - object ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (or \n      (and (empty ?location) (not (planted ?item ?location)))\n      (and (inventory ?agent ?item))\n      (and (clean ?location) (not (planted ?item)))\n      (and (dug_hole ?location) (placed ?item ?location))\n    )\n  )\n  :effect (and \n    (planted ?item ?location)\n    (not (inventory ?agent ?item))\n  )\n)',\n\n'(:action determine \n  :parameters (?agent - agent ?subject - entity ?context - context)\n  :precondition (and (present ?agent ?context) (associated ?subject ?context))\n  :effect (has_knowledge ?agent information_about ?subject)\n)',\n\n'(:action unpack\n    :parameters (?agent - agent ?container - container ?item - object)\n    :precondition (and (at ?agent ?container) (in ?item ?container))\n    :effect (and (inventory ?agent ?item) (not (in ?item ?container)))\n)',\n\n'(:action stake \n    :parameters (?agent - entity ?resource - object ?target - target ?location - place)\n    :precondition (and (located ?agent ?location) (located ?resource ?location) (located ?target ?location))\n    :effect (and (staked ?resource ?target) (not (located ?target ?location)))\n)',\n\n'(:action replant \n  :parameters (?item - object ?location - location)\n  :precondition (and (not (replanted ?item)) (selected ?location))\n  :effect (replanted ?item)\n)',\n\n'(:action transplant \n    :parameters (?entity - object ?location - location)\n    :precondition (and (ready_for_transplant ?entity) (not (at ?entity ?location)))\n    :effect (and (at ?entity ?location) (transplanted ?entity ?location))\n)',\n\n'(:action gotolocation \n  :parameters (?entity - object ?from - location ?to - location)\n  :precondition (and (at ?entity ?from) (not (at ?entity ?to)))\n  :effect (and (at ?entity ?to) (not (at ?entity ?from)))\n)',\n\n'(:action harvest\n    :parameters (?agent - agent ?resource - resource)\n    :precondition (and (at ?agent ?resource) (ready_to_harvest ?resource))\n    :effect (and (harvested ?resource) (not (at ?resource ?agent)))\n)'\n]\n```"
]