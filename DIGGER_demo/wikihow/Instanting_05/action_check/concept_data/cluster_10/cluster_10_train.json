[
    "(:action check\\n    :parameters (?agent - agent ?target - resource ?context - environment)\\n    :precondition (and (available ?agent) (in ?agent ?context) (not (verified ?agent ?target ?context)))\\n    :effect (and (verified ?agent ?target ?context)))',\n    '(:action ask\\n  ; Ask for information or objects and update status\\n  :parameters (?agent - agent ?resource - object)\\n  :precondition (and \\n    (or \\n      (not (has_info ?agent ?resource))\\n      (withheld ?resource)\\n      (location ?resource on_counter)\\n    )\\n  )\\n  :effect (and \\n    (or \\n      (has_info ?agent ?resource)\\n      (given ?resource)\\n      (location ?resource in_hand)\\n    )))',\n    '(:action visit ; Visit a resource to gather information or update status\\n    :parameters (?agent - agent ?resource - place)\\n    :precondition (and (not (has_info ?agent)))\\n    :effect (and (has_info ?agent)))',\n    '(:action choose ; Choose a resource or update a status for a task\\n  :parameters (?agent - agent ?target - resource)\\n  :precondition (and \\n    (or (not (info_acquired ?agent ?target))\\n        (unselected ?target)\\n        (decoration ?agent bare)\\n        (not (theme_selected ?target))\\n        (complex ?target))\\n    (or (selected ?target) (equals ?target step unselected)))\\n  :effect (and \\n    (or (info_acquired ?agent ?target)\\n        (selected ?target)\\n        (decoration ?agent camouflaged)\\n        (theme_selected ?target)\\n        (named ?target))))',\n    '(:action pick ; Pick an item based on certain criteria and update its status\\n    :parameters (?agent - agent ?item - object ?context - context)\\n    :precondition (and \\n        (or (enjoyed ?agent ?item) (matches_theme ?item ?context))\\n        (not (selected ?item)))\\n    :effect (and \\n        (selected ?item)\\n        (named ?item)))',\n    '(:action manage\\n  ; Universal action for managing resources or states\\n  :parameters (?agent - agent ?target - object ?context - context)\\n  \\n  :precondition (and \\n    (exists (?state - state) (not (in_desired_state ?agent ?target ?context ?state)))\\n    (can_manage ?agent ?target ?context)\\n  )\\n  \\n  :effect (and\\n    (forall (?state - state) (not (in_desired_state ?agent ?target ?context ?state)))))',\n    '(:action strike\\n  ; Generalized action to strike a deal or make an adjustment\\n  :parameters (?agent - agent ?resource - resource ?condition - condition)\\n  \\n  :precondition (and (visible ?agent) (location ?resource initial_location) (stability ?condition initial_state))\\n  \\n  :effect (and (location ?resource target_location) (stability ?condition target_state)))',\n    '(:action create_resource\\n  ; Create or establish a new resource, system, or state for a variety of contexts\\n  :parameters (?agent - agent ?resource - object ?context - context)\\n  :precondition (and\\n    (not (resource_ready ?resource))\\n    (contextual_conditions ?context)\\n  )\\n  :effect (and\\n    (resource_ready ?resource)\\n    (contextual_effects ?context)))',\n    '(:action bring\\n  ; Bring a resource to initiate or support a task or state transition\\n  :parameters (?agent - agent ?resource - object)\\n  :precondition (and (prepared ?agent ?resource))\\n  :effect (and (ready ?agent ?resource)))',\n    '(:action start\\n  ; Begin a task or initiate a process, updating the status accordingly.\\n  :parameters (?agent - agent ?target - object)\\n  \\n  :precondition (and \\n    (or \\n      (focus ?agent focused_on_task)\\n      (not (exists ?target))\\n      (not (conversation_initiated ?agent))\\n      (not (knows_target ?agent ?target))\\n    )\\n    (or \\n      (task_type making_bracelet)\\n      (task_type bookclub)\\n      (task_type conversation)\\n      (task_type teaching)\\n    )\\n  )\\n  \\n  :effect (and \\n    (or \\n      (focus ?agent admiring_bracelet)\\n      (exists ?target)\\n      (conversation_initiated ?agent)\\n      (knows_target ?agent ?target))))',\n    '(:action keep ; Maintain or update the state of an entity or group\\n  :parameters (?agent - agent ?context - context)\\n  :precondition (and (active ?agent ?context))\\n  :effect (updated ?agent ?context))',\n    '(:action set ; Generic action to set a parameter or condition for a task\\n  :parameters (?entity - object ?target - object ?attribute - attribute ?state - state)\\n  :precondition (and (in ?entity ?target) (not (set ?target ?attribute)))\\n  :effect (and (set ?target ?attribute) (updated_state ?target ?state)))',\n    '(:action write ; Write or communicate something and update the state\\n  :parameters (?actor - agent ?target - agent ?context - context)\\n  :precondition (and \\n    (involved ?actor ?context) \\n    (not (task_completed ?context)))\\n  :effect (and \\n    (task_completed ?context) \\n    (state_transformed ?actor ?target)))',\n    '(:action stick ; Select and commit to a specific choice or strategy\\n  :parameters (?agent - agent ?option - choice)\\n  :precondition (and (step ?agent unselected) (choice ?agent nameless))\\n  :effect (and (step ?agent selected) (choice ?agent named)))',\n    '(:action venture ; Explore and encourage new experiences or states\\n  :parameters (?agent - agent ?context - environment ?state - status)\\n  :precondition (and (current_state ?agent ?context bare))\\n  :effect (and (current_state ?agent ?context camouflaged)))',\n    \"(:action read ; Engage with a resource, modifying its state and the entity's engagement status\\n :parameters (?agent - agent ?resource - resource)\\n :precondition (and (engagement_status ?agent open) (state ?resource initial))\\n :effect (and (engagement_status ?agent closed) (state ?resource transformed)))\",\n    '(:action peruse ; Peruse a resource and update its status\\n  :parameters (?agent - agent ?resource - object)\\n  :precondition (and (unexplored ?resource))\\n  :effect (and (explored ?resource) (not (unexplored ?resource))))',\n    '(:action encourage ; Motivate and guide individuals to engage in tasks\\n  :parameters (?npc - agent ?task - activity)\\n  :precondition (and (capable ?npc) (not (engaged ?npc ?task)))\\n  :effect (engaged ?npc ?task))',\n    '(:action market ; Market a group or resource to new entities\\n    :parameters (?facilitator - agent ?entity - agent ?group - collective)\\n    :precondition (and (prepared ?facilitator) (not (integrated ?entity ?group)))\\n    :effect (integrated ?entity ?group))'```"
]