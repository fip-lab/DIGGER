{
    "choose": [
        "(:action choose_area\n    :parameters (?area - area)\n    :precondition (unselected ?area)\n    :effect (and\n              (selected ?area)\n              (not (unselected ?area)))\n  )\n\n  ;; Action: build_bamboo_container\n  ",
        "(:action choose-spot\n    :parameters (?t - tumbler)\n    :precondition (and (location ?t in_store))\n    :effect (and (location ?t in_home) (location ?t sunny_spot))\n)\n\n",
        "(:action choose_use\n    :parameters (?npc - npc ?use - use_type)\n    :precondition (and (at ?npc ?loc))\n    :effect (and (chosen ?npc ?use))\n)\n\n",
        "(:action get_mixture\n    :parameters (?npc - npc ?material - grass_tinder)\n    :precondition (and\n                    (rolled ?material)\n                    (wet ?bin))\n    :effect (and\n              (cured ?material)\n              (usable ?material))\n  )\n)\n```\n\n### Explanation:\n1. **choose_area**: Selects a suitable area for the manure compost pile or bins.\n   - Preconditions: The area is unselected.\n   - Effects: The area becomes selected.\n\n2. **build_bamboo_container**: Builds a composting bin.\n   - Preconditions: The bin is not yet built.\n   - Effects: The bin is built.\n\n3. **add_materials**: Adds manure and other organic materials to the bin.\n   - Preconditions: The material is full, and the bin is empty.\n   - Effects: The material is added to the bin, the material becomes not full, and the bin becomes full.\n\n4. **roll_soap**: Rolls the curing manure pile weekly.\n   - Preconditions: The material is in the bin, and the bin is full.\n   - Effects: The material is rolled and no longer in the bin.\n\n5. **add_water**: Adds water to the bin.\n   - Preconditions: The water is emptier, and the bin is dry.\n   - Effects: The water becomes fuller, and the bin becomes wet.\n\n6. **get_mixture**: Examines the compost to ensure the manure has cured sufficiently for use.\n   - Preconditions: The material is rolled, and the bin is wet.\n   - Effects: The material becomes cured and usable.\n\nThese actions reflect the necessary steps and state changes required to cure manure effectively.",
        "(:action get_to_compost_bin\n    :parameters (?bin - bin)\n    :precondition (fullness ?bin empty)\n    :effect (fullness ?bin fuller)\n)\n```\n\n### Summary of Entity State Transitions:\n\n#### Container:\n- Location: in_cabinet -> on_countertop -> on_table\n- Volume: empty -> fuller\n\n#### Baking Soda:\n- Availability: unobtained -> obtained\n- Location: n/a -> in_container\n\n#### NPC:\n- Decoration: bare -> camouflaged\n- Visibility: visible -> invisible\n- Location: n/a -> specified location (e.g., basement)\n\n#### Bin:\n- Fullness: empty -> fuller\n\nThese actions accurately reflect the state changes of the entities involved in the task and follow the PDDL structure provided in the example.",
        "(:action get-wicks-used\n    :parameters (?n - npc)\n    :precondition (and (visibility ?n invisible))\n    :effect (and (visibility ?n visible))\n)\n\n",
        "(:action save-shelter\n    :parameters (?n - npc)\n    :precondition (and (visibility ?n visible))\n    :effect (and (visibility ?n invisible) (decoration ?n camouflaged))\n)\n\n",
        "(:action gather_tinder\n    :parameters (?npc - npc ?path - path ?tinder - tinder)\n    :precondition (and (on_path ?npc ?path) (uncollected ?tinder))\n    :effect (and (collected ?npc ?tinder) (not (uncollected ?tinder)))\n)\n\n"
    ],
    "build": [
        "(:action build_bamboo_container\n    :parameters (?bin - bin)\n    :precondition (and\n                    (not (built ?bin)))\n    :effect (built ?bin)\n  )\n\n  ;; Action: add_materials\n  ",
        "(:action make_collection\n    :parameters (?npc - npc ?location - location)\n    :precondition (and\n                    (decoration ?npc bare)\n                    (visibility ?npc visible))\n    :effect (and\n              (decoration ?npc camouflaged)\n              (visibility ?npc invisible)\n              (location ?npc ?location))\n)\n```\n\n#### Step 4: Keep baking soda next to your kitchen compost bin.\n```pddl\n",
        "(:action dig_plant\n    :parameters (?fir - fir ?garden_bed - garden_bed)\n    :precondition (and (in_garden ?fir) (created ?garden_bed))\n    :effect (planted ?fir ?garden_bed)\n)\n\n"
    ],
    "add": [
        "(:action add_materials\n    :parameters (?material - grass_tinder ?npc - npc ?bin - bin)\n    :precondition (and\n                    (full ?material)\n                    (empty ?bin))\n    :effect (and\n              (in_bin ?material ?bin)\n              (not (full ?material))\n              (full ?bin))\n  )\n\n  ;; Action: roll_soap\n  ",
        "(:action add_water\n    :parameters (?water - water ?bin - bin)\n    :precondition (and\n                    (emptier ?water)\n                    (dry ?bin))\n    :effect (and\n              (fuller ?water)\n              (wet ?bin)\n              (not (dry ?bin)))\n  )\n\n  ;; Action: get_mixture\n  ",
        "(:action add_fish\n    :parameters (?npc - npc ?composter - composter ?fish - fish)\n    :precondition (and (at ?npc ?composter) (composted ?fish))\n    :effect (and (in_composter ?fish ?composter) (not (composted ?fish)))\n)\n```\n\n### Explanation of Actions:\n\n1. **determine_commercial_composting**\n   - **Parameters**: `?npc` (the non-player character), `?area` (the area being checked)\n   - **Preconditions**: The NPC must be in the area and the area must not already be known to have a commercial composting operation.\n   - **Effect**: The area is marked as having a commercial composting operation available.\n\n2. **compost_fish**\n   - **Parameters**: `?npc` (the non-player character), `?loc` (the location where composting is done), `?fish` (the fish remains)\n   - **Preconditions**: The NPC must be at the location and must have fish remains.\n   - **Effect**: The fish remains are composted, and the NPC no longer has the fish remains.\n\n3. **add_fish**\n   - **Parameters**: `?npc` (the non-player character), `?composter` (the composter), `?fish` (the fish remains)\n   - **Preconditions**: The NPC must be at the composter and the fish remains must be composted.\n   - **Effect**: The fish remains are added to the composter, and they are no longer in the composted state.\n\nThese actions accurately reflect the state changes of the entities involved in the task of composting fish remains.",
        "(:action add-lemon\n    :parameters (?n - npc ?w - water)\n    :precondition (and (location ?w in_tumbler))\n    :effect (and (location ?w lemon_added))\n)\n\n",
        "(:action add_slow_rotating_items\n    :parameters (?p - player ?items - items ?compost_bin - compost_bin)\n    :precondition (and (at ?p ?compost_bin) (at ?items around_house))\n    :effect (and (at ?items ?compost_bin) (messiness ?items organized))\n)\n\n",
        "(:action add_weeds_to_compost_pile\n    :parameters (?p - player ?weeds - grass_tinder ?compost_bin - compost_bin)\n    :precondition (and (at ?p ?compost_bin) (inventory ?p ?weeds))\n    :effect (and (at ?weeds ?compost_bin) (not (inventory ?p ?weeds)))\n)\n\n",
        "(:action add_compostable_container\n    :parameters (?p - player ?container - container ?garden_center - garden_center)\n    :precondition (and (at ?p ?garden_center) (at ?container in_cabinet))\n    :effect (and (at ?container ?garden_center) (location ?container on_countertop))\n)\n```\n\n### Explanation:\n\n1. **heat_potatoes**: This action heats the potatoes on the stove. The precondition checks if the player is at the stove, the potato is on the stove, and the stove is cool. The effect changes the stove temperature to hot and the potato composition to cooked.\n\n2. **add_slow_rotating_items**: This action adds slow-rotting items to the compost bin. The precondition checks if the player is at the compost bin and the items are around the house. The effect moves the items to the compost bin and organizes them.\n\n3. **add_weeds_to_compost_pile**: This action adds weeds (grass tinder) to the compost pile. The precondition checks if the player is at the compost bin and has the weeds in their inventory. The effect moves the weeds to the compost bin and removes them from the player's inventory.\n\n4. **keep_animal_waste_out**: This action ensures animal waste is kept out of the compost bin by making the NPC (representing animal waste) invisible. The precondition checks if the player and the NPC are at the compost bin. The effect changes the NPC's visibility to invisible.\n\n5. **add_compostable_container**: This action adds a compostable container to the garden center. The precondition checks if the player is at the garden center and the container is in the cabinet. The effect moves the container to the garden center and places it on the countertop.",
        "(:action collect_seaweed\n    :parameters (?npc - npc ?loc - beach ?seaweed - seaweed)\n    :precondition (and (at ?npc ?loc) (available ?seaweed ?loc))\n    :effect (and (inventory ?npc ?seaweed) (not (available ?seaweed ?loc)))\n)\n\n",
        "(:action mix_materials\n    :parameters (?alice - alice ?container - container ?seaweed - seaweed ?other_materials - materials)\n    :precondition (and (at ?alice ?container) (inventory ?npc ?seaweed) (inventory ?alice ?other_materials) (chosen ?npc compost))\n    :effect (and (in ?seaweed ?container) (in ?other_materials ?container) (mixed ?container))\n)\n\n",
        "(:action mix_teepee\n    :parameters (?npc - npc ?teepee - teepee ?water - water ?container - container)\n    :precondition (and (holding ?npc ?teepee) (contains ?container ?water))\n    :effect (and (contains ?container (mix ?teepee ?water)) (not (holding ?npc ?teepee)))\n)\n\n"
    ],
    "roll": [
        "(:action roll_soap\n    :parameters (?npc - npc ?material - grass_tinder)\n    :precondition (and\n                    (in_bin ?material ?bin)\n                    (full ?bin))\n    :effect (and\n              (rolled ?material)\n              (not (in_bin ?material ?bin)))\n  )\n\n  ;; Action: add_water\n  ",
        "(:action tumble-and-stabilize-composter\n    :parameters (?y - you ?c - container)\n    :precondition (and (location ?c sunny_spot))\n    :effect (and (location ?c tumbled) (stabilized ?c))\n)\n\n"
    ],
    "use": [
        "(:action use_as_cleaning_container\n    :parameters (?container - container)\n    :precondition (and\n                    (location ?container in_cabinet)\n                    (volume ?container empty))\n    :effect (and\n              (location ?container on_countertop)\n              (volume ?container fuller))\n)\n```\n\n#### Step 2: Keep the container in an easily accessible place to encourage its use.\n```pddl\n",
        "(:action use_seaweed\n    :parameters (?npc - npc ?loc - garden ?seaweed - seaweed)\n    :precondition (and (inventory ?npc ?seaweed) (clean ?seaweed) (chosen ?npc direct_use))\n    :effect (and (used ?seaweed ?loc) (not (inventory ?npc ?seaweed)))\n)\n```\n\n### Explanation of Actions:\n\n1. **collect_seaweed**\n    - **Parameters:** `?npc` (the non-player character), `?loc` (beach), `?seaweed` (seaweed)\n    - **Preconditions:** The NPC is at the beach location, and seaweed is available at the beach.\n    - **Effects:** The NPC collects the seaweed, and it is no longer available at the beach.\n\n2. **wash_sand**\n    - **Parameters:** `?npc` (the non-player character), `?loc` (beach), `?seaweed` (seaweed)\n    - **Preconditions:** The NPC has the seaweed in their inventory, is at the beach, and the seaweed is sandy.\n    - **Effects:** The seaweed is cleaned, and it is no longer sandy.\n\n3. **choose_use**\n    - **Parameters:** `?npc` (the non-player character), `?use` (use_type)\n    - **Preconditions:** The NPC is at a location.\n    - **Effects:** The NPC chooses a specific use for the seaweed (e.g., compost or direct use).\n\n4. **mix_materials**\n    - **Parameters:** `?alice` (another character), `?container` (container), `?seaweed` (seaweed), `?other_materials` (other materials)\n    - **Preconditions:** Alice is at the container, the NPC has seaweed in their inventory, Alice has other materials in her inventory, and the NPC has chosen to use the seaweed for compost.\n    - **Effects:** The seaweed and other materials are mixed in the container.\n\n5. **put_sealed_container**\n    - **Parameters:** `?npc` (the non-player character), `?container` (container)\n    - **Preconditions:** The NPC is at the container, and the container is mixed.\n    - **Effects:** The container is sealed, and the NPC is no longer at the container.\n\n6. **use_seaweed**\n    - **Parameters:** `?npc` (the non-player character), `?loc` (garden), `?seaweed` (seaweed)\n    - **Preconditions:** The NPC has the seaweed in their inventory, the seaweed is clean, and the NPC has chosen to use the seaweed directly in the garden.\n    - **Effects:** The seaweed is used in the garden, and it is no longer in the NPC's inventory.\n\nThese actions reflect the task's steps and ensure that the state changes of the entities involved are accurately represented."
    ],
    "keep": [
        "(:action keep_ingredients_in_container\n    :parameters (?ingredient - baking_soda)\n    :precondition (availability ?ingredient unobtained)\n    :effect (and\n              (availability ?ingredient obtained)\n              (location ?ingredient in_container))\n)\n```\n\n#### Step 5: Consider having two kitchen scrap bins if you have a lot of trouble getting to the compost bin frequently.\n```pddl\n",
        "(:action keep_teepee\n    :parameters (?npc - npc ?teepee - teepee ?container - container)\n    :precondition (and (holding ?npc ?teepee) (not (contains ?container ?teepee)))\n    :effect (and (contains ?container ?teepee) (not (holding ?npc ?teepee)) (cool ?teepee) (not (in_sunlight ?teepee)))\n)\n\n",
        "(:action keep_animal_waste_out\n    :parameters (?p - player ?npc - npc ?compost_bin - compost_bin)\n    :precondition (and (at ?p ?compost_bin) (at ?npc ?compost_bin))\n    :effect (and (visibility ?npc invisible))\n)\n\n"
    ],
    "initiate": [
        "(:action initiate-composter\n    :parameters (?n - npc)\n    :precondition (and (visibility ?n visible))\n    :effect (and (visibility ?n invisible))\n)\n\n"
    ],
    "fill": [
        "(:action fill-tumblers\n    :parameters (?u - user1 ?t - tumbler1)\n    :precondition (and (location ?t sunny_spot))\n    :effect (and (location ?t filled) (volume ?t fuller))\n)\n\n",
        "(:action wash_sand\n    :parameters (?npc - npc ?loc - beach ?seaweed - seaweed)\n    :precondition (and (inventory ?npc ?seaweed) (at ?npc ?loc) (sandy ?seaweed))\n    :effect (and (not (sandy ?seaweed)) (clean ?seaweed))\n)\n\n",
        "(:action put_sealed_container\n    :parameters (?npc - npc ?container - container)\n    :precondition (and (at ?npc ?container) (mixed ?container))\n    :effect (and (sealed ?container) (not (at ?npc ?container)))\n)\n\n",
        "(:action spray_leaves\n    :parameters (?npc - npc ?teepee - teepee ?leaves - leaves ?plant - plant)\n    :precondition (and (holding ?npc ?teepee) (on ?leaves ?plant))\n    :effect (and (covered ?leaves ?teepee))\n)\n\n",
        "(:action pour_into_soil\n    :parameters (?npc - npc ?teepee - teepee ?soil - soil)\n    :precondition (and (holding ?npc ?teepee) (not (contains ?soil ?teepee)))\n    :effect (and (contains ?soil ?teepee) (not (holding ?npc ?teepee)))\n)\n\n"
    ],
    "balance": [
        "(:action balance-water\n    :parameters (?n - npc ?w - water ?p - pot)\n    :precondition (and (location ?w in_tumbler) (location ?p on_stovetop))\n    :effect (and (wetness ?w balanced) (temperature ?p hot))\n)\n```\n\nThese actions reflect the sequence of steps and state changes involved in using a home-built tumble composter to create rich compost. Each action includes relevant parameters, preconditions, and effects that capture the state transitions of the entities involved in the task."
    ],
    "know": [
        "(:action know_when_to_add_compost\n    :parameters (?npc - npc)\n    :precondition (and (knowledge ?npc))\n    :effect (ready_to_add_compost ?npc)\n)\n\n"
    ],
    "remove": [
        "(:action remove_teepee\n    :parameters (?npc - npc ?teepee - teepee ?brewer - brewer)\n    :precondition (and (at ?npc ?brewer) (contains ?brewer ?teepee))\n    :effect (and (not (contains ?brewer ?teepee)) (holding ?npc ?teepee))\n)\n\n"
    ],
    "drink": [
        "(:action drink_teepee\n    :parameters (?npc - npc ?teepee - teepee)\n    :precondition (and (holding ?npc ?teepee) (not (drunk ?npc ?teepee)))\n    :effect (and (drunk ?npc ?teepee) (not (holding ?npc ?teepee)))\n)\n```\n\n### Entity State Transitions:\n- **teepee**: Removed from brewer, kept in a container, sprayed on leaves, poured into soil, mixed with water, drunk by npc.\n- **npc**: Holds and interacts with teepee, plants a plant, drinks teepee.\n- **leaves**: Covered with teepee.\n- **soil**: Contains teepee.\n- **plant**: Planted in soil.\n- **container**: Contains teepee and water mixture.\n\nThese actions reflect the steps and descriptions provided, ensuring the state transitions are accurately captured in the preconditions and effects."
    ],
    "heat": [
        "(:action heat_potatoes\n    :parameters (?p - player ?potato - potato ?stove - stove)\n    :precondition (and (at ?p ?stove) (at ?potato ?stove) (temperature ?stove cool))\n    :effect (and (temperature ?stove hot) (composition ?potato cooked))\n)\n\n"
    ],
    "determine": [
        "(:action determine_commercial_composting\n    :parameters (?npc - npc ?area - area)\n    :precondition (and (in_area ?npc ?area) (not (commercial_composting_available ?area)))\n    :effect (commercial_composting_available ?area)\n)\n\n"
    ],
    "compost": [
        "(:action compost_fish\n    :parameters (?npc - npc ?loc - location ?fish - fish)\n    :precondition (and (at ?npc ?loc) (has_fish_remains ?npc ?fish))\n    :effect (and (composted ?fish) (not (has_fish_remains ?npc ?fish)))\n)\n\n"
    ],
    "in": [
        "(:action in_container\n    :parameters (?container - container)\n    :precondition (location ?container on_countertop)\n    :effect (location ?container on_table)\n)\n```\n\n#### Step 3: Make collection and carrying a cinch.\n```pddl\n"
    ],
    "plant": [
        "(:action plant_seeds\n    :parameters (?npc - npc ?new_plant - new_plant ?container - container)\n    :precondition (and (inventory ?npc ?new_plant) (empty ?container))\n    :effect (and (planted ?new_plant ?container) (not (empty ?container)))\n)\n\n",
        "(:action plant_plant\n    :parameters (?npc - npc ?plant - plant ?soil - soil ?location - location)\n    :precondition (and (at ?npc ?location) (holding ?npc ?plant) (contains ?location ?soil))\n    :effect (and (planted ?plant ?soil) (not (holding ?npc ?plant)))\n)\n\n"
    ],
    "nourish": [
        "(:action nourish_established_houseplants\n    :parameters (?npc - npc ?houseplant - new_plant)\n    :precondition (and (inventory ?npc ?houseplant) (established ?houseplant))\n    :effect (nourished ?houseplant)\n)\n\n"
    ]
}