{
    "print": [
        "(:action print_free_party_decorations\n    :parameters (?p - player ?l - location)\n    :precondition (at ?p ?l)\n    :effect (and (decorations printed) (not (at decorations online)))\n)\n\n",
        "(:action record_video\n    :parameters (?npc - npc ?studio - studio)\n    :precondition (and (at ?npc ?studio) (studio_availability ?studio set_up))\n    :effect (and (video_recorded ?npc))\n)\n```\n\n### Description of PDDL Actions:\n\n1. **take_skill_shot**:\n   - **Parameters**: `?p` (person), `?c` (camera)\n   - **Preconditions**: The person has the skill to take a photo, the camera is ready, and no photo has been taken yet.\n   - **Effect**: A photo is taken with the camera.\n\n2. **gather_members_know**:\n   - **Parameters**: `?npc` (non-player character), `?ct` (covering tracks), `?tr` (track)\n   - **Preconditions**: The NPC is at the location of covering tracks, and the track stability is jerky.\n   - **Effect**: The track stability is changed to smooth.\n\n3. **keep_sos_visibility**:\n   - **Parameters**: `?npc` (non-player character)\n   - **Preconditions**: The NPC is currently visible.\n   - **Effect**: The NPC becomes invisible.\n\n4. **reinjoylife**:\n   - **Parameters**: `?game` (game)\n   - **Preconditions**: The game is unplayed.\n   - **Effect**: The game is played.\n\n5. **make_album**:\n   - **Parameters**: `?npc` (non-player character), `?studio` (studio)\n   - **Preconditions**: The NPC is at the studio, and the studio is set up.\n   - **Effect**: An album is created by the NPC.\n\n6. **record_video**:\n   - **Parameters**: `?npc` (non-player character), `?studio` (studio)\n   - **Preconditions**: The NPC is at the studio, and the studio is set up.\n   - **Effect**: A video is recorded by the NPC.\n\nThese actions capture the essence of the task, focusing on the relevant state changes for each step.",
        "(:action decorate_room\n    :parameters (?npc - player ?loc - location ?room - room)\n    :precondition (and (at ?npc ?loc) (at ?room ?loc))\n    :effect (and (decorated ?room) (not (plain ?room)))\n)\n\n"
    ],
    "make": [
        "(:action make_dessert\n    :parameters (?p - player ?k - kitchen)\n    :precondition (and (at ?p ?k) (clean kitchen))\n    :effect (and (dessert made) (messy kitchen))\n)\n\n",
        "(:action make_rain_water\n    :parameters (?p - player)\n    :precondition (knowledge ?p umbrella_care)\n    :effect (knowledge ?p rain_water_use)\n  )\n\n  ",
        "(:action make_card\n    :parameters (?npc - person)\n    :precondition (and (bare ?npc) (plain ?npc))\n    :effect (and (camouflaged ?npc) (not (bare ?npc)) (not (plain ?npc)))\n)\n\n",
        "(:action make_birthday_video\n    :parameters (?tv - my_dads_tv)\n    :precondition (and (empty ?tv) (unplugged ?tv))\n    :effect (and (full ?tv) (plugged_in ?tv) (not (empty ?tv)) (not (unplugged ?tv)))\n)\n\n",
        "(:action make_album\n    :parameters (?npc - npc ?studio - studio)\n    :precondition (and (at ?npc ?studio) (studio_availability ?studio set_up))\n    :effect (and (album_created ?npc))\n)\n\n",
        "(:action make_compelling_signal ; make wearable punctuation\n      :parameters (?n - npc)\n      :precondition (and (decoration ?n camouflaged) (visibility ?n invisible))\n      :effect (and (decoration ?n plain) (visibility ?n visible))\n   )\n\n",
        "(:action make_inner_harvest_list\n    :parameters (?npc - npc ?garden - garden)\n    :precondition (and (knowledgeable ?npc) (mess ?garden))\n    :effect (and (pruned ?garden) (list_created ?npc))\n)\n\n",
        "(:action make_yule_log\n    :parameters (?npc - player ?loc - location ?log - yule_log)\n    :precondition (and (at ?npc ?loc) (has_materials ?npc))\n    :effect (and (inventory ?npc ?log))\n)\n\n",
        "(:action transform_umbrella\n    :parameters (?p - player ?u - item)\n    :precondition (and (inventory ?p ?u) (clean ?u))\n    :effect (transformed ?u)\n  )\n\n  ",
        "(:action create_members_know\n    :parameters (?n - npc)\n    :precondition (and (informed ?n))\n    :effect (and (members_know ?n) (not (uninformed ?n)))\n)\n```\n\n#### Action: organize_event\n```lisp\n",
        "(:action create_special_cake\n    :parameters (?npc - character ?mixing_bowl - item ?table - place)\n    :precondition (and (npc ?npc) (at ?npc ?table) (clear ?table) (empty ?mixing_bowl))\n    :effect (and (cluttered ?table) (holding_flour_and_salt ?mixing_bowl) (slightly_heavier ?mixing_bowl) (mixed ?mixing_bowl) (wet ?mixing_bowl))\n)\n\n",
        "(:action organize_event\n    :parameters (?a - my_area)\n    :precondition (and (unselected ?a))\n    :effect (and (selected ?a) (not (unselected ?a)))\n)\n```\n\n#### Action: train_new_member\n```lisp\n",
        "(:action cook\n    :parameters (?p - npc ?k - kitchen)\n    :precondition (and (at ?p ?k) (cleanness ?k clean))\n    :effect (and (cleanness ?k messy) (not (cleanness ?k clean)))\n)\n```\n\n### Action: throw_block_party\nThis action involves throwing a block party in the basement.\n\n```pddl\n",
        "(:action construct_memory_book ; construct a memory book in the basement\n      :parameters (?p - person ?l - basement) \n      :precondition (and (graduated ?p) (at ?p ?l) (availability ?l present))\n      :effect (and (memory_book ?p ?l))\n   )\n",
        "(:action turn_home_into_haven\n    :parameters (?npc - npc ?basement - basement)\n    :precondition (and (knowledgeable ?npc) (uncovered ?basement))\n    :effect (and (covered ?basement) (haven ?npc))\n)\n\n",
        "(:action prepare_feast\n    :parameters (?npc - player ?loc - location ?feast - feast)\n    :precondition (and (at ?npc ?loc) (has_ingredients ?npc))\n    :effect (and (prepared ?feast))\n)\n\n",
        "(:action prepare_supplies\n    :parameters (?p - player ?f - food)\n    :precondition (and (at ?p kitchen) (not (ready ?f)))\n    :effect (and (ready ?f) (served ?f))\n)\n\n"
    ],
    "plan": [
        "(:action plan_potluck_picnic\n    :parameters (?p - player ?potatoes - item)\n    :precondition (and (inventory ?p potatoes) (clean potatoes))\n    :effect (and (potluck planned) (potatoes on_table))\n)\n\n",
        "(:action plan_vacation ; plan a vacation\n      :parameters (?p - person) \n      :precondition (and (graduated ?p))\n      :effect (and (vacation_planned ?p))\n   )\n",
        "(:action plan_party\n    :parameters (?npc - character)\n    :precondition (and (npc ?npc))\n    :effect (and (planned party))\n)\n\n"
    ],
    "gather": [
        "(:action gather_husband\n    :parameters (?p - player ?h - husband ?b - basement)\n    :precondition (and (at ?p ?b) (absent ?h))\n    :effect (and (present ?h) (not (absent ?h)))\n)\n```\n\n### Descriptions of Actions:\n\n1. **print_free_party_decorations**\n   - **Parameters**: ?p (player), ?l (location)\n   - **Preconditions**: The player is at the location.\n   - **Effects**: Decorations are printed and no longer just online.\n\n2. **make_dessert**\n   - **Parameters**: ?p (player), ?k (kitchen)\n   - **Preconditions**: The player is in the kitchen, and the kitchen is clean.\n   - **Effects**: A dessert is made, and the kitchen becomes messy.\n\n3. **plan_potluck_picnic**\n   - **Parameters**: ?p (player), ?potatoes (item)\n   - **Preconditions**: The player has potatoes in inventory, and the potatoes are clean.\n   - **Effects**: A potluck picnic is planned, and the potatoes are placed on the table.\n\n4. **throwback_birthday_party**\n   - **Parameters**: ?p (player), ?h (husband)\n   - **Preconditions**: The player and the husband are at the same location.\n   - **Effects**: A throwback birthday party is organized, and the husband is celebrating.\n\n5. **gather_husband**\n   - **Parameters**: ?p (player), ?h (husband), ?b (basement)\n   - **Preconditions**: The player is at the basement, and the husband is absent.\n   - **Effects**: The husband becomes present in the basement, and he is no longer absent.\n\nThese actions capture the intent and logic of the task steps while accurately reflecting the state changes of the entities involved.",
        "(:action gather_members_know\n    :parameters (?npc - npc ?ct - covering_tracks ?tr - track)\n    :precondition (and (at ?npc ?ct) (track_stability ?tr jerky))\n    :effect (and (track_stability ?tr smooth))\n)\n\n",
        "(:action gather_amazed ; show appreciation to high school teachers\n      :parameters (?p - person ?t - teacher) \n      :precondition (and (graduated ?p) (teacher ?t))\n      :effect (and (appreciated ?t ?p))\n   )\n```\n\nExplanation:\n1. **plan_vacation**: This action allows the person (npc) to plan a vacation after graduation.\n2. **throw_party**: This action represents throwing a party in the basement. The basement's availability changes from absent to present.\n3. **buy_item**: This action allows the person to buy an item from the store. The store's fullness attribute changes from more full to more empty.\n4. **invite_parent**: This action allows the person to invite their parents to a thank-you dinner. The dinner's completion state must be ready.\n5. **construct_memory_book**: This action represents constructing a memory book in the basement. The basement's availability must be present.\n6. **gather_amazed**: This action represents showing appreciation to high school teachers.\n\nThese actions are designed to reflect the changes in the state of the entities involved in each step, making sure that the preconditions and effects accurately capture the transitions described in the task.",
        "(:action gather_chocolates\n    :parameters (?npc - character)\n    :precondition (and (npc ?npc))\n    :effect (and (gathered chocolates))\n)\n\n",
        "(:action buy_gifts\n    :parameters (?npc - person)\n    :precondition (and (camouflaged ?npc) (invisible ?npc))\n    :effect (and (visible ?npc) (not (invisible ?npc)))\n)\n\n",
        "(:action buy_item ; buy an item from the store\n      :parameters (?p - person ?s - store ?i - item) \n      :precondition (and (graduated ?p) (at ?p ?s) (in_store ?i ?s) (fullness ?s more_full))\n      :effect (and (inventory ?p ?i) (fullness ?s more_empty))\n   )\n",
        "(:action buy_tickets\n    :parameters (?npc - visitor)\n    :precondition (not (has_tickets ?npc))\n    :effect (has_tickets ?npc)\n)\n```\n\n#### Step 2: Pay Visibility\n- **Action Name:** pay_respects\n- **Parameters:** (?npc - visitor ?memorial - memorial)\n- **Preconditions:** (and (has_tickets ?npc) (at ?npc ?memorial) (visible ?memorial))\n- **Effect:** (paid_respects ?npc)\n\n```lisp\n",
        "(:action get_knowledge ; find out some quirky facts about punctuation\n      :parameters (?n - npc)\n      :precondition (and (decoration ?n bare) (visibility ?n visible))\n      :effect (and (decoration ?n camouflaged) (visibility ?n invisible))\n   )\n\n",
        "(:action get_into_garden\n    :parameters (?garden - garden)\n    :precondition (and (dry ?garden))\n    :effect (and (wetter ?garden))\n)\n```\n\n### Explanation:\n\n- **understand_autumn_equinox**: This action represents the NPC gaining knowledge about the autumn equinox.\n- **stay_up_to_welcome_autumn**: This action reflects the NPC staying awake to welcome autumn.\n- **set_monument_to_autumn**: This action involves setting up a monument at the stonehouse, changing its state to selected and decorating the NPC.\n- **be_creative**: This action indicates the NPC engaging in creative activities.\n- **make_inner_harvest_list**: This action involves the NPC making a list of their inner harvest, which results in pruning the garden.\n- **express_fall_awe**: This action reflects the \"you\" entity expressing amazement, changing focus.\n- **contemplate_autumn**: This action represents the NPC contemplating the autumn equinox.\n- **seek_health_improvement**: This action involves the NPC helping a person in the bathroom, resulting in improved health and changing the bathroom's cleanliness.\n- **turn_home_into_haven**: This action involves the NPC turning their home into a haven by covering the basement.\n- **honor_ancestors**: This action reflects the NPC honoring their family, resulting in the family being clean.\n- **get_into_garden**: This action involves getting into the garden, making it wetter.",
        "(:action get_shelter\n    :parameters (?npc - player ?loc - location ?shelter - shelter)\n    :precondition (and (at ?npc ?loc) (at ?shelter ?loc))\n    :effect (and (inventory ?npc ?shelter))\n)\n\n",
        "(:action assign_objectinreceptacle ; assign a special homework assignment or project\n      :parameters (?a - agent ?h - homework ?as - assignment ?p - project)\n      :precondition (and (not (assigned ?h ?as ?p)))\n      :effect (and (assigned ?h ?as ?p))\n   )\n\n",
        "(:action choose_where_to_hold_party\n    :parameters (?npc - character ?party - event ?location - place)\n    :precondition (and (npc ?npc) (planned ?party))\n    :effect (and (chosen ?party ?location))\n)\n\n",
        "(:action choose_through_visibility\n    :parameters (?npc - character ?passage - text)\n    :precondition (and (npc ?npc) (passage ?passage))\n    :effect (and (chosen ?npc ?passage))\n)\n\n"
    ],
    "study": [
        "(:action study_word\n    :parameters (?p - player ?l - location)\n    :precondition (at ?p ?l)\n    :effect (knowledge ?p word_origin)\n  )\n\n  "
    ],
    "learn": [
        "(:action learn_superstition\n    :parameters (?p - player)\n    :precondition (knowledge ?p word_origin)\n    :effect (knowledge ?p umbrella_superstition)\n  )\n\n  ",
        "(:action learn_unice\n    :parameters (?p - player)\n    :precondition (knowledge ?p umbrella_count)\n    :effect (knowledge ?p umbrella_care)\n  )\n\n  ",
        "(:action read_book\n    :parameters (?p - player ?d - daughter ?b - book)\n    :precondition (and (at ?p home) (at ?d home) (at ?b home))\n    :effect (and (knowledge_shared ?p ?d ?b) (read ?b))\n)\n\n"
    ],
    "listen": [
        "(:action listen_to_converter_of_water\n    :parameters (?p - player ?l - location)\n    :precondition (at ?p ?l)\n    :effect (knowledge ?p water_converter)\n  )\n\n  ",
        "(:action listen_to_daddies_advice\n    :parameters (?advice - advice)\n    :precondition (and (impossible ?advice) (withheld ?advice))\n    :effect (and (possible ?advice) (given ?advice) (not (impossible ?advice)) (not (withheld ?advice)))\n)\n\n",
        "(:action listen_to_lecture\n    :parameters (?n - npc)\n    :precondition (and (invisible ?n))\n    :effect (and (informed ?n) (not (uninformed ?n)))\n)\n```\n\n#### Action: create_members_know\n```lisp\n",
        "(:action seek_health_improvement\n    :parameters (?person - person ?bathroom - bathroom ?npc - npc)\n    :precondition (and (silent ?person) (clean ?bathroom) (knowledgeable ?npc))\n    :effect (and (talking ?person) (dirty ?bathroom) (health_improved ?npc))\n)\n\n",
        "(:action explore_exhibits\n    :parameters (?npc - visitor ?basement - basement_level)\n    :precondition (and (passed_security ?npc) (at ?npc ?basement))\n    :effect (explored_exhibits ?npc)\n)\n```\n\n#### Step 5: Get Level Up\n- **Action Name:** proceed_to_main_exhibition\n- **Parameters:** (?npc - visitor ?basement - basement_level ?ground - ground_surface)\n- **Preconditions:** (and (explored_exhibits ?npc) (at ?npc ?basement))\n- **Effect:** (at ?npc ?ground)\n\n```lisp\n"
    ],
    "count": [
        "(:action count_umbrellas\n    :parameters (?p - player)\n    :precondition (knowledge ?p umbrella_superstition)\n    :effect (knowledge ?p umbrella_count)\n  )\n\n  "
    ],
    "take": [
        "(:action take_umbrella_out\n    :parameters (?p - player ?u - item)\n    :precondition (and (inventory ?p ?u) (transformed ?u))\n    :effect (umbrella_out ?p)\n  )\n)\n```\n\n### Explanation:\n\n1. **study_word**: This action represents the NPC studying the origins of the word. It requires the NPC to be at a specific location (root_of_tree) and results in the NPC gaining knowledge about the word origin.\n  \n2. **learn_superstition**: This action represents the NPC learning about umbrella superstition. It requires the NPC to have knowledge of the word origin and results in gaining knowledge of umbrella superstition.\n\n3. **listen_to_converter_of_water**: This action represents the NPC listening to a water converter. It requires the NPC to be at a specific location and results in gaining knowledge about the water converter.\n\n4. **count_umbrellas**: This action represents the NPC counting how many umbrellas they own. It requires the NPC to have knowledge of umbrella superstition and results in gaining knowledge of the umbrella count.\n\n5. **learn_unice**: This action represents the NPC learning how to care for umbrellas. It requires the NPC to have knowledge of the umbrella count and results in gaining knowledge of umbrella care.\n\n6. **make_rain_water**: This action represents the NPC learning what other uses can be made of an umbrella, specifically related to rainwater. It requires the NPC to have knowledge of umbrella care and results in gaining knowledge of rainwater use.\n\n7. **transform_umbrella**: This action represents the NPC transforming their umbrella. It requires the NPC to have the umbrella in their inventory and for the umbrella to be clean. The result is that the umbrella is transformed.\n\n8. **take_umbrella_out**: This action represents the NPC taking their transformed umbrella out with them today. It requires the NPC to have the transformed umbrella in their inventory and results in the NPC having the umbrella out with them.\n\nThese actions ensure that the steps of the task are accurately represented with the appropriate preconditions and effects reflecting the state changes of the entities involved.",
        "(:action take_dad_to_shelter\n    :parameters (?npc - person)\n    :precondition (and (visible ?npc) (possible ?advice))\n    :effect (and (invisible ?npc) (not (visible ?npc)))\n)\n```\n\n### Explanation of Actions:\n\n1. **make_card**\n    - **Parameters**: `?npc - person`\n    - **Preconditions**: The person (`?npc`) is `bare` and `plain`.\n    - **Effect**: The person (`?npc`) becomes `camouflaged` and is no longer `bare` or `plain`.\n\n2. **make_birthday_video**\n    - **Parameters**: `?tv - my_dads_tv`\n    - **Preconditions**: The TV (`?tv`) is `empty` and `unplugged`.\n    - **Effect**: The TV (`?tv`) becomes `full` and `plugged_in`.\n\n3. **listen_to_daddies_advice**\n    - **Parameters**: `?advice - advice`\n    - **Preconditions**: The advice (`?advice`) is `impossible` and `withheld`.\n    - **Effect**: The advice (`?advice`) becomes `possible` and `given`.\n\n4. **buy_gifts**\n    - **Parameters**: `?npc - person`\n    - **Preconditions**: The person (`?npc`) is `camouflaged` and `invisible`.\n    - **Effect**: The person (`?npc`) becomes `visible`.\n\n5. **take_dad_to_shelter**\n    - **Parameters**: `?npc - person`\n    - **Preconditions**: The person (`?npc`) is `visible` and the advice (`?advice`) is `possible`.\n    - **Effect**: The person (`?npc`) becomes `invisible`.\n\nThese actions reflect the state changes of the entities involved in each step of the task.",
        "(:action take_skill_shot\n    :parameters (?p - person ?c - camera)\n    :precondition (and (has_skill ?p) (camera_ready ?c) (not (photo_taken ?c)))\n    :effect (and (photo_taken ?c))\n)\n\n",
        "(:action pass_security\n    :parameters (?npc - visitor ?security - security)\n    :precondition (and (has_tickets ?npc) (not (passed_security ?npc)))\n    :effect (passed_security ?npc)\n)\n```\n\n#### Step 4: Gather Exhibitions\n- **Action Name:** explore_exhibits\n- **Parameters:** (?npc - visitor ?basement - basement_level)\n- **Preconditions:** (and (passed_security ?npc) (at ?npc ?basement))\n- **Effect:** (explored_exhibits ?npc)\n\n```lisp\n"
    ],
    "keep": [
        "(:action keep_sos_visibility\n    :parameters (?npc - npc)\n    :precondition (and (visibility ?npc visible))\n    :effect (and (visibility ?npc invisible))\n)\n\n",
        "(:action keep_fire_burning\n    :parameters (?npc - player ?loc - location ?campfire - fire)\n    :precondition (and (at ?npc ?loc) (at ?campfire ?loc) (lit ?campfire))\n    :effect (and (burning ?campfire))\n)\n```\n\n### Descriptions of Actions:\n\n1. **get_shelter**:\n   - **Parameters**: `?npc` (player), `?loc` (location), `?shelter` (shelter)\n   - **Preconditions**: The NPC is at the location where the shelter is.\n   - **Effect**: The NPC has the shelter in inventory.\n\n2. **understand_solstice**:\n   - **Parameters**: `?npc` (player), `?loc` (location)\n   - **Preconditions**: The NPC is at the location.\n   - **Effect**: The NPC understands the solstice.\n\n3. **decorate_room**:\n   - **Parameters**: `?npc` (player), `?loc` (location), `?room` (room)\n   - **Preconditions**: The NPC and the room are at the location.\n   - **Effect**: The room is decorated, and it is no longer plain.\n\n4. **make_yule_log**:\n   - **Parameters**: `?npc` (player), `?loc` (location), `?log` (yule log)\n   - **Preconditions**: The NPC is at the location and has the necessary materials.\n   - **Effect**: The NPC has the Yule log in inventory.\n\n5. **prepare_feast**:\n   - **Parameters**: `?npc` (player), `?loc` (location), `?feast` (feast)\n   - **Preconditions**: The NPC is at the location and has the necessary ingredients.\n   - **Effect**: The feast is prepared.\n\n6. **go_wassailing**:\n   - **Parameters**: `?npc` (player), `?loc` (location), `?destination` (location)\n   - **Preconditions**: The NPC is at the location, and the location is connected to the destination.\n   - **Effect**: The NPC moves to the destination.\n\n7. **stay_up_until_sunrise**:\n   - **Parameters**: `?npc` (player), `?loc` (location)\n   - **Preconditions**: The NPC is at the location.\n   - **Effect**: The NPC stays awake until sunrise.\n\n8. **keep_fire_burning**:\n   - **Parameters**: `?npc` (player), `?loc` (location), `?campfire` (fire)\n   - **Preconditions**: The NPC is at the location, and the campfire is lit.\n   - **Effect**: The campfire keeps burning."
    ],
    "go": [
        "(:action go_visibility\n    :parameters (?n - npc)\n    :precondition (and (visible ?n))\n    :effect (and (invisible ?n) (not (visible ?n)))\n)\n```\n\n#### Action: listen_to_lecture\n```lisp\n",
        "(:action go\n    :parameters (?dir - direction ?p - npc ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n)\n```\n\nThese actions should cover the steps required to celebrate Flag Day as described. Each action reflects the changes in the state of the relevant entities, such as the status of the flag parade, the cleanliness of the kitchen, and the coverage of the basement.",
        "(:action go_wassailing\n    :parameters (?npc - player ?loc - location ?destination - location)\n    :precondition (and (at ?npc ?loc) (connected ?loc ?destination))\n    :effect (and (at ?npc ?destination) (not (at ?npc ?loc)))\n)\n\n"
    ],
    "train": [
        "(:action train_new_member\n    :parameters (?a - adrian ?l - liam ?s - ss)\n    :precondition (and (unselected ?a) (unselected ?l) (raw ?s))\n    :effect (and (selected ?a) (selected ?l) (cooked ?s) (not (unselected ?a)) (not (unselected ?l)) (not (raw ?s)))\n)\n```\n\n### Descriptions to Actions Mapping\n\n1. **Head to a museum or gallery exhibit about African American history.**\n   - **Action:** go_visibility\n   - **Description:** The NPC becomes invisible to explore the museum or gallery.\n\n2. **Attend lectures on Black culture if you can.**\n   - **Action:** listen_to_lecture\n   - **Description:** The NPC listens to a lecture and becomes informed.\n\n3. **Look for local events to celebrate the month with others.**\n   - **Action:** create_members_know\n   - **Description:** The NPC shares the information with members so they become aware of local events.\n\n4. **Organize your own event if your area doesn\u2019t have one.**\n   - **Action:** organize_event\n   - **Description:** The area is selected for organizing an event.\n\n5. **Participate in Black History Month activities at school.**\n   - **Action:** train_new_member\n   - **Description:** Train new members (Adrian, Liam, and SS) to participate in activities, representing the change in their knowledge and state.\n\nThese actions reflect the state changes for each entity involved in the task and capture the intent and logic of the steps provided."
    ],
    "review": [
        "(:action review_punctuation ; review your use of punctuation\n      :parameters (?y - you ?p - punctuation)\n      :precondition (and (focused_on ?y making_bracelet) (step ?p unselected))\n      :effect (and (focused_on ?y admiring_bracelet) (step ?p selected))\n   )\n\n"
    ],
    "spot": [
        "(:action spot_location ; spot punctuation in unusual places during the day\n      :parameters (?c - character)\n      :precondition (and (step ?c unselected))\n      :effect (and (step ?c selected))\n   )\n\n"
    ],
    "throw": [
        "(:action throw_punctuation_party ; throw a punctuation party\n      :parameters (?p - party)\n      :precondition (and (location ?p in_cabinet))\n      :effect (and (location ?p on_table))\n   )\n```\n\nIn this task, the actions represent the different steps involved in celebrating National Punctuation Day. Each action reflects the state changes of specific entities before and after the action is performed. The preconditions ensure that the necessary conditions are met before executing the action, and the effects describe the resulting state changes.",
        "(:action throw_party ; throw a party in the basement\n      :parameters (?p - person ?l - basement) \n      :precondition (and (graduated ?p) (at ?p ?l) (availability ?l absent))\n      :effect (and (party ?p ?l) (availability ?l present))\n   )\n",
        "(:action throw_block_party\n    :parameters (?p - npc ?b - basement)\n    :precondition (and (at ?p ?b) (availability ?b present))\n    :effect (and (coverage ?b covered) (not (coverage ?b uncovered)))\n)\n```\n\n### Additional Actions for Movement\nTo facilitate movement between locations, we include the following movement actions:\n\n#### Action: go\nThis action involves moving the NPC between locations.\n\n```pddl\n"
    ],
    "show": [
        "(:action show_students_stuff ; show students things from the last 100 days\n      :parameters (?n - npc ?h - hallway)\n      :precondition (and (not (shown ?n ?h)))\n      :effect (and (shown ?n ?h))\n   )\n\n"
    ],
    "understand": [
        "(:action understand_autumn_equinox\n    :parameters (?npc - npc)\n    :precondition (and (visible ?npc))\n    :effect (and (knowledgeable ?npc))\n)\n\n",
        "(:action understand_solstice\n    :parameters (?npc - player ?loc - location)\n    :precondition (at ?npc ?loc)\n    :effect (understands_solstice ?npc)\n)\n\n"
    ],
    "stay": [
        "(:action stay_up_to_welcome_autumn\n    :parameters (?npc - npc)\n    :precondition (and (knowledgeable ?npc))\n    :effect (and (awake ?npc))\n)\n\n",
        "(:action stay_up_until_sunrise\n    :parameters (?npc - player ?loc - location)\n    :precondition (at ?npc ?loc)\n    :effect (awake_until_sunrise ?npc)\n)\n\n"
    ],
    "set": [
        "(:action set_monument_to_autumn\n    :parameters (?npc - npc ?sh - stonehouse)\n    :precondition (and (knowledgeable ?npc) (unchosen ?sh))\n    :effect (and (selected ?sh) (decorated ?npc))\n)\n\n",
        "(:action set_fire\n    :parameters (?p - npc ?l - location)\n    :precondition (and (at ?p ?l) (at flag_parade ?l) (status flag_parade in_progress))\n    :effect (and (status flag_parade completed) (not (status flag_parade in_progress)))\n)\n```\n\n### Action: cook\nThis action involves cooking in the kitchen.\n\n```pddl\n",
        "(:action fill_bottles\n    :parameters (?p - player ?b - bottles)\n    :precondition (and (at ?p bathroom) (empty ?b) (dry ?b))\n    :effect (and (full ?b) (wet ?b))\n)\n\n"
    ],
    "express": [
        "(:action express_fall_awe\n    :parameters (?you - you)\n    :precondition (and (focused ?you))\n    :effect (and (amazed ?you))\n)\n\n"
    ],
    "honor": [
        "(:action honor_ancestors\n    :parameters (?npc - npc ?family - family)\n    :precondition (and (knowledgeable ?npc) (messy ?family))\n    :effect (and (clean ?family) (honored_ancestors ?npc))\n)\n\n",
        "(:action celebrate_with_family\n    :parameters (?npc - character)\n    :precondition (and (npc ?npc))\n    :effect (and (celebrated ?npc family))\n)\n```\n\nExplanation of the actions:\n\n1. **plan_party**: The NPC plans the party.\n   - Preconditions: The NPC must exist.\n   - Effects: The party is planned.\n\n2. **choose_where_to_hold_party**: The NPC chooses the location for the party.\n   - Preconditions: The NPC exists and the party is planned.\n   - Effects: The location for the party is chosen.\n\n3. **cook**: The NPC cooks in the kitchen.\n   - Preconditions: The NPC must be in the kitchen, and the kitchen must be clean.\n   - Effects: The kitchen becomes messy, and food is cooked.\n\n4. **choose_through_visibility**: The NPC chooses a passage to read aloud.\n   - Preconditions: The NPC exists and the passage is available.\n   - Effects: The passage is chosen.\n\n5. **play_game**: The NPC plays a game.\n   - Preconditions: The game must be unplayed.\n   - Effects: The game is played.\n\n6. **create_special_cake**: The NPC creates a special cake using a mixing bowl on the table.\n   - Preconditions: The NPC must be at the table, the table must be clear, and the mixing bowl must be empty.\n   - Effects: The table becomes cluttered, and the mixing bowl holds flour and salt, becomes slightly heavier, mixed, and wet.\n\n7. **gather_chocolates**: The NPC gathers chocolates.\n   - Preconditions: The NPC exists.\n   - Effects: Chocolates are gathered.\n\n8. **celebrate_with_family**: The NPC celebrates with the family.\n   - Preconditions: The NPC exists.\n   - Effects: The NPC celebrates with the family."
    ],
    "play": [
        "(:action play_game\n    :parameters (?npc - character ?game - activity)\n    :precondition (and (npc ?npc) (unplayed ?game))\n    :effect (and (played ?game))\n)\n\n",
        "(:action visit_museum_store\n    :parameters (?npc - visitor ?store - museum_store)\n    :precondition (and (at ?npc ?ground_surface) (not (visited_store ?npc)))\n    :effect (visited_store ?npc)\n)\n```\n\nThese actions capture the steps involved in visiting the September 11th Memorial Museum, focusing on the relevant state changes for each step."
    ],
    "pay": [
        "(:action pay_respects\n    :parameters (?npc - visitor ?memorial - memorial)\n    :precondition (and (has_tickets ?npc) (at ?npc ?memorial) (visible ?memorial))\n    :effect (paid_respects ?npc)\n)\n```\n\n#### Step 3: Pass Through Security Screen\n- **Action Name:** pass_security\n- **Parameters:** (?npc - visitor ?security - security)\n- **Preconditions:** (and (has_tickets ?npc) (not (passed_security ?npc)))\n- **Effect:** (passed_security ?npc)\n\n```lisp\n"
    ],
    "proceed": [
        "(:action proceed_to_main_exhibition\n    :parameters (?npc - visitor ?basement - basement_level ?ground - ground_surface)\n    :precondition (and (explored_exhibits ?npc) (at ?npc ?basement))\n    :effect (at ?npc ?ground)\n)\n```\n\n#### Step 6: Get Museum Store\n- **Action Name:** visit_museum_store\n- **Parameters:** (?npc - visitor ?store - museum_store)\n- **Preconditions:** (and (at ?npc ?ground_surface) (not (visited_store ?npc)))\n- **Effect:** (visited_store ?npc)\n\n```lisp\n"
    ],
    "talk": [
        "(:action talk_about_unice\n    :parameters (?p - player ?d - daughter)\n    :precondition (and (at ?p home) (at ?d home))\n    :effect (and (knowledge_shared ?p ?d puberty) (talked_about ?p unice))\n)\n\n",
        "(:action talk_about_amazing_periods\n    :parameters (?p - player ?d - daughter)\n    :precondition (and (at ?p home) (at ?d home) (knowledge_shared ?p ?d puberty))\n    :effect (and (positive_outlook ?d periods))\n)\n\n"
    ],
    "reassure": [
        "(:action reassure_with_personal_stories\n    :parameters (?p - player ?d - daughter)\n    :precondition (and (at ?p home) (at ?d home) (knowledge_shared ?p ?d puberty))\n    :effect (and (supported ?d) (reassured_with_stories ?d))\n)\n```\n\n### Descriptions and Entity States:\n1. **talk_about_unice**:\n   - **Parameters**: Player and Daughter.\n   - **Preconditions**: Both are at home.\n   - **Effect**: Knowledge about puberty is shared, and the topic of Unice is discussed.\n\n2. **prepare_supplies**:\n   - **Parameters**: Player and Food.\n   - **Preconditions**: Player is in the kitchen, and the food is not ready.\n   - **Effect**: Food becomes ready and served.\n\n3. **talk_about_amazing_periods**:\n   - **Parameters**: Player and Daughter.\n   - **Preconditions**: Both are at home, and knowledge about puberty is shared.\n   - **Effect**: Daughter has a positive outlook on periods.\n\n4. **fill_bottles**:\n   - **Parameters**: Player and Bottles.\n   - **Preconditions**: Player is in the bathroom, and bottles are empty and dry.\n   - **Effect**: Bottles become full and wet.\n\n5. **read_book**:\n   - **Parameters**: Player, Daughter, and Book.\n   - **Preconditions**: All are at home.\n   - **Effect**: Knowledge from the book is shared, and the book is read.\n\n6. **reassure_with_personal_stories**:\n   - **Parameters**: Player and Daughter.\n   - **Preconditions**: Both are at home, and knowledge about puberty is shared.\n   - **Effect**: Daughter feels supported and reassured with personal stories.\n\nThese actions reflect the steps and entity state changes involved in the task of celebrating your daughter's first period."
    ],
    "throwback": [
        "(:action throwback_birthday_party\n    :parameters (?p - player ?h - husband)\n    :precondition (and (at ?p ?h))\n    :effect (and (party throwback) (celebrating ?h))\n)\n\n"
    ],
    "reinjoylife": [
        "(:action reinjoylife\n    :parameters (?game - game)\n    :precondition (and (game_status ?game unplayed))\n    :effect (and (game_status ?game played))\n)\n\n"
    ],
    "punctuation": [
        "(:action punctuation_with_love ; show punctuation some love\n      :parameters (?l - love)\n      :precondition (and (at ?l in_store))\n      :effect (and (at ?l in_home))\n   )\n\n"
    ],
    "theme": [
        "(:action theme_plan ; theme lesson plans towards the number 100\n      :parameters (?e - my_equipment)\n      :precondition (and (not (themed ?e)))\n      :effect (and (themed ?e))\n   )\n\n"
    ],
    "have": [
        "(:action have_fun_activities ; have fun activities for the students\n      :parameters (?k - kids)\n      :precondition (and (not (had_fun_activities ?k)))\n      :effect (and (had_fun_activities ?k))\n   )\n\n"
    ],
    "invite": [
        "(:action invite_parent ; invite parents to a thank you dinner\n      :parameters (?p - person ?d - dinner ?pa - parent) \n      :precondition (and (graduated ?p) (completion ?d ready))\n      :effect (and (invited ?pa ?d))\n   )\n"
    ],
    "be": [
        "(:action be_creative\n    :parameters (?npc - npc)\n    :precondition (and (knowledgeable ?npc))\n    :effect (and (creative ?npc))\n)\n\n"
    ],
    "contemplate": [
        "(:action contemplate_autumn\n    :parameters (?npc - npc)\n    :precondition (and (knowledgeable ?npc))\n    :effect (and (contemplative ?npc))\n)\n\n"
    ]
}