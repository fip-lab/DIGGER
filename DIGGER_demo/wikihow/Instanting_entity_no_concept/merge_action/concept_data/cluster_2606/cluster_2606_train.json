{
    "choose": [
        "(:action gather_members\n    :parameters (?npc - npc)\n    :precondition (bare ?npc)\n    :effect (not (bare ?npc))\n)\n\n",
        "(:action gather_memebers\n      :parameters (?npc - person ?memory_book - item)\n      :precondition (and (at ?memory_book in_home))\n      :effect (and (at ?memory_book shared) (not (at ?memory_book in_home)))\n   )\n   ```\n\n### Descriptions and Entity State Transitions\n\n- **Find a template or program you like.**\n  - **Entity State Change:** `track`\n    - `location` changes from `present` to `absent`.\n\n- **Ready your content.**\n  - **Entity State Change:** `content`\n    - `location` changes from `in store` to `in home`.\n\n- **Pick a consistent style.**\n  - **Entity State Change:** `character`\n    - `step` changes from `unselected` to `selected`.\n    - `choice` changes from `nameless` to `named`.\n\n- **Design your memory book.**\n  - **Entity State Change:** `memory book`\n    - `location` changes from `in store` to `in home`.\n\n- **Share your memory book.**\n  - **Entity State Change:** `memory book`\n    - `location` changes from `in home` to `shared`.\n\nThese actions reflect the necessary steps and state changes involved in making a memory book, ensuring that each step is accurately captured in the PDDL actions.",
        "(:action gather_cook\n    :parameters (?p - npc ?l - location)\n    :precondition (and (at ?p ?l) (has_kitchen ?l))\n    :effect (and (gathered_recipes ?p))\n)\n\n",
        "(:action gather_gems\n    :parameters (?p - npc)\n    :precondition (and (at ?p kitchen))\n    :effect (and (gathered_gems ?p))\n)\n```\n\n### Explanation of Actions\n\n1. **choose_scraps**\n    - **Parameters**: ?p - npc\n    - **Preconditions**: The npc must be in the kitchen.\n    - **Effects**: The npc has chosen scraps.\n\n2. **gather_cook**\n    - **Parameters**: ?p - npc, ?l - location\n    - **Preconditions**: The npc must be at a location with a kitchen.\n    - **Effects**: The npc has gathered recipes.\n\n3. **create_theme**\n    - **Parameters**: ?p - npc, ?s - scrapbook\n    - **Preconditions**: The npc has chosen scraps and gathered recipes.\n    - **Effects**: The theme for the scrapbook is created.\n\n4. **choose_cardstock**\n    - **Parameters**: ?p - npc\n    - **Preconditions**: The theme for the scrapbook is created.\n    - **Effects**: The npc has chosen cardstock.\n\n5. **protect_heirloom_card**\n    - **Parameters**: ?c - recipe_cards\n    - **Preconditions**: The recipe cards are available.\n    - **Effects**: The recipe cards are protected.\n\n6. **add_ingredients_to_scraps**\n    - **Parameters**: ?b - book\n    - **Preconditions**: The cardstock has been chosen.\n    - **Effects**: Ingredients are added to the scraps book.\n\n7. **create_room**\n    - **Parameters**: ?p - npc, ?t - track\n    - **Preconditions**: The npc is at the track and the track is jerky.\n    - **Effects**: The track becomes smooth.\n\n8. **place_tape_on_panel**\n    - **Parameters**: ?t - tabs\n    - **Preconditions**: The tabs are clear.\n    - **Effects**: The tabs become cluttered.\n\n9. **gather_gems**\n    - **Parameters**: ?p - npc\n    - **Preconditions**: The npc is in the kitchen.\n    - **Effects**: The npc has gathered gems.\n\nThese actions reflect the steps required to make a cookbook scrapbook, focusing on the relevant state changes for each entity involved in the task.",
        "(:action get_know\n    :parameters (?npc - npc ?l - location)\n    :precondition (at ?npc ?l)\n    :effect (knows ?npc memory_cookbook)\n)\n\n",
        "(:action get_amazed\n    :parameters (?b - bride ?bouquet - bouquet ?garters - garters)\n    :precondition (and (at ?b album) (status ?bouquet in_progress) (location ?garters apart))\n    :effect (and (amazed ?b) (status ?bouquet completed) (location ?garters together))\n)\n\n",
        "(:action choose_method_of_prepare\n    :parameters (?cb - cookbook)\n    :precondition (empty ?cb)\n    :effect (prepared ?cb)\n)\n\n",
        "(:action choose_scraps\n    :parameters (?p - npc)\n    :precondition (and (at ?p kitchen))\n    :effect (and (chosen_scraps ?p))\n)\n\n",
        "(:action choose_cardstock\n    :parameters (?p - npc)\n    :precondition (and (theme_created ?s))\n    :effect (and (cardstock_chosen ?p))\n)\n\n",
        "(:action choose-website\n    :parameters (?npc - npc ?ct - covering_tracks ?track - track)\n    :precondition (and (not (website-chosen ?npc)) (not (knowledge ?npc)))\n    :effect (and (website-chosen ?npc) (knowledge ?npc))\n)\n\n;; Action 2: Upload pictures\n",
        "(:action choose_application\n    :parameters (?p - npc ?app - track)\n    :precondition (and (at ?p ?loc))\n    :effect (and (chosen_application ?p ?app))\n  )\n\n  ",
        "(:action find_template\n      :parameters (?npc - person ?template - item ?track - track)\n      :precondition (and (at ?npc covering_tracks) (at ?track present))\n      :effect (and (at ?template found) (not (at ?track present)) (at ?track absent))\n   )\n   ```\n\n2. **Action: prepare_content**\n   ```pddl\n   ",
        "(:action buy_shelter\n    :parameters (?npc - npc ?shelter - shelter)\n    :precondition (and (not (has_shelter ?npc)))\n    :effect (has_shelter ?npc)\n)\n\n",
        "(:action buy-copy\n    :parameters (?npc - npc ?book - book)\n    :precondition (and (page-customized ?npc) (not (copy-bought ?book)))\n    :effect (copy-bought ?book)\n)\n```\n\n### Descriptions of Actions:\n\n1. **choose-website**: This action represents the step where the user chooses a website to create their memory book.\n   - **Parameters**: `?npc` (user), `?ct` (covering tracks), `?track` (track)\n   - **Preconditions**: The website has not been chosen yet, and the user does not have knowledge of it.\n   - **Effect**: The website is chosen, and the user gains knowledge of it.\n\n2. **upload-pictures**: This action involves uploading pictures to the chosen website.\n   - **Parameters**: `?npc` (user), `?ct` (covering tracks), `?track` (track)\n   - **Preconditions**: The website has been chosen, and pictures have not been uploaded yet.\n   - **Effect**: The pictures are uploaded to the website.\n\n3. **select-theme**: This action is about selecting a design theme for the memory book.\n   - **Parameters**: `?npc` (user), `?ct` (covering tracks), `?track` (track)\n   - **Preconditions**: Pictures have been uploaded, and the theme has not been selected yet.\n   - **Effect**: A theme is selected for the memory book.\n\n4. **customize-page**: This action involves customizing each page of the memory book.\n   - **Parameters**: `?npc` (user), `?ct` (covering tracks), `?track` (track)\n   - **Preconditions**: The theme has been selected, and pages have not been customized yet.\n   - **Effect**: The pages are customized to the user's satisfaction.\n\n5. **buy-copy**: This action is about ordering a copy of the memory book.\n   - **Parameters**: `?npc` (user), `?book` (memory book)\n   - **Preconditions**: The pages have been customized, and the copy has not been bought yet.\n   - **Effect**: A copy of the memory book is ordered.\n\nThese actions capture the sequence of steps required to create a wedding memory book, focusing on the state changes of the user (`npc`) and the memory book (`book`).",
        "(:action select-theme\n    :parameters (?npc - npc ?ct - covering_tracks ?track - track)\n    :precondition (and (pictures-uploaded ?npc) (not (theme-selected ?npc)))\n    :effect (theme-selected ?npc)\n)\n\n;; Action 4: Customize page\n",
        "(:action save_money\n    :parameters (?npc - npc)\n    :precondition (and\n                    (visible ?npc)\n                    (bare ?npc))\n    :effect (and\n              (camouflaged ?npc)\n              (not (bare ?npc))\n              (invisible ?npc)\n              (not (visible ?npc)))\n  )\n\n  ;; Action 2: Create a packing list to prepare for travel\n  ",
        "(:action save_page\n    :parameters (?p - player ?page - page ?track - track)\n    :precondition (and (at ?p album) (checked ?page) (on ?track ?page))\n    :effect (and (saved ?page) (not (on ?track ?page)))\n)\n\n"
    ],
    "place": [
        "(:action place_in_memory_cookbook\n    :parameters (?npc - npc ?l - location)\n    :precondition (and (at ?npc ?l) (focused memory_cookbook))\n    :effect (and (in ?npc memory_cookbook) (not (at ?npc ?l)))\n)\n\n",
        "(:action place_tape_on_panel\n    :parameters (?t - tabs)\n    :precondition (and (cleanness ?t clear))\n    :effect (and (cleanness ?t cluttered))\n)\n\n",
        "(:action place_marker ; place a marker on the exact site of a buried capsule\n    :parameters (?npc - npc ?gs - ground_surface)\n    :precondition (and (at ?npc ?gs) (unprepared ?gs))\n    :effect (and (marked ?gs) (prepared ?gs))\n)\n```\n\n### Descriptions and Entity State Transitions:\n- **mark_container**: The container is marked with relevant dates.\n  - **Entity**: container\n  - **State Change**: `empty` -> `marked`\n\n- **remind_you_about_time_commissioner**: Remind about the time capsule.\n  - **Entity**: time_commissioner\n  - **State Change**: `available` -> `reminded`\n\n- **make_add_extra_amplifications**: Make extra arrangements for the time capsule.\n  - **Entity**: time_capsule\n  - **State Change**: `unfinished` -> `amplified` and `finished`\n\n- **store_time_commissioner**: Store the sealed time capsule in the basement.\n  - **Entity**: time_capsule\n  - **State Change**: `finished` -> `stored` in `basement`\n\n- **place_marker**: Place a marker on the ground surface.\n  - **Entity**: ground_surface\n  - **State Change**: `unprepared` -> `marked` and `prepared`\n\nEach action accurately reflects the state changes of the entities involved as part of the preconditions and effects.",
        "(:action put_object_in_receptacle\n    :parameters (?agent - agent ?object - object ?receptacle - receptacle)\n    :precondition (and (inventory ?agent ?object) (open ?receptacle))\n    :effect (and (in ?object ?receptacle) (not (inventory ?agent ?object)))\n)\n\n",
        "(:action put_in_cocoa\n    :parameters (?user - user ?bottle - bottle ?cocoa - cocoa)\n    :precondition (and (inventory ?user ?bottle) (clean ?bottle) (not (full ?bottle)))\n    :effect (and (full ?bottle) (contains ?bottle ?cocoa))\n)\n\n",
        "(:action put_focus\n    :parameters (?p - player ?c - ceremony)\n    :precondition (and (at ?p album) (in_progress ?c))\n    :effect (and (focus ?c) (completed ?c))\n)\n\n"
    ],
    "create": [
        "(:action create_members_know\n    :parameters (?p - npc)\n    :precondition (and (at ?p ?loc) (new_member_taught ?p))\n    :effect (members_knowledge_created ?p)\n  )\n\n  ",
        "(:action create_memebers_know\n      :parameters (?npc - person ?memory_book - item)\n      :precondition (and (at ?memory_book in_store))\n      :effect (and (at ?memory_book in_home) (not (at ?memory_book in_store)))\n   )\n   ```\n\n5. **Action: gather_memebers**\n   ```pddl\n   ",
        "(:action create_family\n    :parameters (?npc - npc ?family - family)\n    :precondition (and (not (exists ?f - family (member_of ?npc ?f))))\n    :effect (member_of ?npc ?family)\n)\n\n",
        "(:action create_theme\n    :parameters (?p - npc ?s - scrapbook)\n    :precondition (and (chosen_scraps ?p) (gathered_recipes ?p))\n    :effect (and (theme_created ?s))\n)\n\n",
        "(:action create_room\n    :parameters (?p - npc ?t - track)\n    :precondition (and (at ?p ?t) (stability ?t jerky))\n    :effect (and (stability ?t smooth))\n)\n\n",
        "(:action create_account\n    :parameters (?p - npc)\n    :precondition (and (at ?p ?loc))\n    :effect (account_created ?p)\n  )\n\n  ",
        "(:action create_mixture_and_dreams\n    :parameters (?p - npc ?character - character)\n    :precondition (and (at ?p ?loc))\n    :effect (mixture_and_dreams_created ?p ?character)\n  )\n)\n```\n\nThese actions cover the steps required to create a pregnancy memory album, focusing on the specific state changes and actions described in the task. Each action includes the necessary parameters, preconditions, and effects to accurately reflect the changes in the state of the entities involved.",
        "(:action create_packing_list\n    :parameters (?npc - npc ?basement - basement)\n    :precondition (and\n                    (present ?basement)\n                    (uncovered ?basement))\n    :effect (and\n              (covered ?basement)\n              (not (uncovered ?basement))\n              (absent ?basement)\n              (not (present ?basement)))\n  )\n\n  ;; Action 3: Brainstorm a bucket list to motivate goal accomplishment\n  ",
        "(:action create_bucket_list\n    :parameters (?goal - goal)\n    :precondition (unplayed ?goal)\n    :effect (and\n              (played ?goal)\n              (not (unplayed ?goal)))\n  )\n)\n\n(define (problem make_lists_problem)\n  (:domain make_lists)\n  (:objects\n    npc1 - npc\n    basement1 - basement\n    goal1 - goal\n  )\n  (:init\n    (visible npc1)\n    (bare npc1)\n    (present basement1)\n    (uncovered basement1)\n    (unplayed goal1)\n  )\n  (:goal\n    (and\n      (camouflaged npc1)\n      (invisible npc1)\n      (absent basement1)\n      (covered basement1)\n      (played goal1)\n    )\n  )\n)\n```\n\nExplanation of Actions:\n1. **save_money**: This action represents writing a grocery list to save money. It changes the state of the `npc` from visible and bare to camouflaged and invisible.\n2. **create_packing_list**: This action represents creating a packing list, which involves changing the state of the `basement` from present and uncovered to absent and covered.\n3. **create_bucket_list**: This action represents brainstorming a bucket list to motivate goal accomplishment, changing the state of the `goal` from unplayed to played.\n\nEach action is defined with its parameters, preconditions, and effects, reflecting the state changes of the entities involved.",
        "(:action create_group_shot\n    :parameters (?p - player)\n    :precondition (and (at ?p album))\n    :effect (and (group_shot ?p))\n)\n\n",
        "(:action prepare_content\n      :parameters (?you - person ?content - item)\n      :precondition (and (at ?content in_store))\n      :effect (and (at ?content in_home) (not (at ?content in_store)))\n   )\n   ```\n\n3. **Action: pick_composing_style**\n   ```pddl\n   ",
        "(:action make_add_extra_amplifications ; make extra arrangements for a time capsule that will outlive you\n    :parameters (?npc - npc ?tc - time_capsule)\n    :precondition (and (at ?npc ?tc) (unfinished ?tc))\n    :effect (and (amplified ?tc) (finished ?tc))\n)\n\n",
        "(:action make_family_tree\n    :parameters (?p - npc ?tree - tree)\n    :precondition (and (at ?p ?loc))\n    :effect (family_tree_created ?p ?tree)\n  )\n\n  "
    ],
    "pick": [
        "(:action pick_composing_style\n      :parameters (?character - person ?style - item)\n      :precondition (and (at ?character unselected))\n      :effect (and (at ?character selected) (at ?style named))\n   )\n   ```\n\n4. **Action: create_memebers_know**\n   ```pddl\n   "
    ],
    "cut": [
        "(:action cut_family_member\n    :parameters (?npc - npc ?family_member - family_member ?hair_cutting - hair_cutting)\n    :precondition (and (member_of ?npc ?family) (not (has_hair_cutting ?family_member)))\n    :effect (and (has_hair_cutting ?family_member) (inventory ?npc ?hair_cutting))\n)\n\n",
        "(:action cut_cake\n    :parameters (?p - player ?b - mixing_bowl ?t - table)\n    :precondition (and (at ?p ?t) (contains ?b cake))\n    :effect (and (cut cake) (cluttered ?t))\n)\n\n"
    ],
    "write": [
        "(:action write_family_member_object_in_receptacle\n    :parameters (?agent - agent ?questionnaire - questionnaire ?family_member - family_member)\n    :precondition (and (member_of ?agent ?family_member) (not (answered ?questionnaire ?family_member)))\n    :effect (answered ?questionnaire ?family_member)\n)\n\n",
        "(:action teach_new_member_secret\n    :parameters (?p - npc)\n    :precondition (and (at ?p ?loc) (members_collected ?p))\n    :effect (new_member_taught ?p)\n  )\n\n  "
    ],
    "listen": [
        "(:action listen_to_secret\n    :parameters (?npc - npc ?family_member - family_member ?secret - secret)\n    :precondition (and (member_of ?npc ?family_member) (not (shared_secret ?family_member ?npc)))\n    :effect (shared_secret ?family_member ?npc)\n)\n\n",
        "(:action scan_invitation\n    :parameters (?p - player ?s - studio)\n    :precondition (and (at ?p ?s) (available ?s))\n    :effect (and (scanned invitation) (not (available ?s)))\n)\n\n",
        "(:action check_page\n    :parameters (?p - player ?page - page ?track - track)\n    :precondition (and (at ?p album) (on ?track ?page))\n    :effect (and (checked ?page) (smooth ?track))\n)\n\n"
    ],
    "mark": [
        "(:action mark_date\n    :parameters (?npc - npc ?capsule - time_capsule ?date - date)\n    :precondition (and (has_shelter ?npc ?capsule) (not (marked ?capsule ?date)))\n    :effect (marked ?capsule ?date)\n)\n```\n\nThese actions capture the steps involved in making a family time capsule, with a focus on the state changes of the entities involved in each step.",
        "(:action mark_container ; mark the container with the current date and the intended opening date\n    :parameters (?c - container ?p - player)\n    :precondition (and (at ?p ?c) (empty ?c))\n    :effect (and (marked ?c) (not (empty ?c)))\n)\n\n"
    ],
    "protect": [
        "(:action protect_heirloom_card\n    :parameters (?c - recipe_cards)\n    :precondition (and (available ?c))\n    :effect (and (protected ?c))\n)\n\n"
    ],
    "add": [
        "(:action add_ingredients_to_scraps\n    :parameters (?b - book)\n    :precondition (and (cardstock_chosen ?p))\n    :effect (and (ingredients_added ?b))\n)\n\n",
        "(:action collect_members\n    :parameters (?p - npc)\n    :precondition (and (at ?p ?loc))\n    :effect (members_collected ?p)\n  )\n\n  "
    ],
    "store": [
        "(:action store_time_commissioner ; seal the time capsule and store it\n    :parameters (?npc - npc ?b - basement)\n    :precondition (and (at ?npc ?tc) (finished ?tc))\n    :effect (and (stored ?tc ?b))\n)\n\n",
        "(:action keep_camera_and_film\n    :parameters (?p - npc ?camera - camera)\n    :precondition (and (at ?p ?loc))\n    :effect (and (inventory ?p ?camera))\n  )\n\n  "
    ],
    "dedicate": [
        "(:action dedicate_page\n    :parameters (?p - player ?ss - subject)\n    :precondition (and (at ?p album) (not (dedicated ?ss)))\n    :effect (and (dedicated ?ss) (not (at ?p album)))\n)\n\n"
    ],
    "take": [
        "(:action take_page_with_vendor\n    :parameters (?p - player ?v - vendor ?page - page)\n    :precondition (and (at ?p ?v) (has ?v ?page))\n    :effect (and (has ?p ?page) (not (has ?v ?page)))\n)\n\n"
    ],
    "celebrate": [
        "(:action celebrate_wreath\n    :parameters (?p - player ?w - wreath)\n    :precondition (and (at ?p album) (in_progress ?w))\n    :effect (and (celebrated ?w) (completed ?w))\n)\n\n"
    ],
    "use": [
        "(:action use_as_gems\n    :parameters (?p - player ?track - track)\n    :precondition (and (at ?p album) (smooth ?track))\n    :effect (and (used_as_gems ?track))\n)\n\n"
    ],
    "finish": [
        "(:action finish_album\n    :parameters (?p - player)\n    :precondition (and (at ?p album))\n    :effect (finished album)\n)\n```\n\nThese PDDL actions reflect the steps required to create a storybook wedding album, capturing the relevant state changes and actions needed to complete the task."
    ],
    "determine": [
        "(:action determine_focus\n    :parameters (?m - memory_cookbook)\n    :precondition (empty ?m)\n    :effect (focused ?m)\n)\n\n",
        "(:action determine_need_for_illustrator\n    :parameters (?npc - npc ?ct - covering_tracks ?track - track)\n    :precondition (and (knows ?npc memory_cookbook) (at ?npc ?ct) (present ?track))\n    :effect (illustrator_needed ?memory_cookbook)\n)\n\n"
    ],
    "upload": [
        "(:action upload-pictures\n    :parameters (?npc - npc ?ct - covering_tracks ?track - track)\n    :precondition (and (website-chosen ?npc) (not (pictures-uploaded ?npc)))\n    :effect (pictures-uploaded ?npc)\n)\n\n;; Action 3: Select theme\n"
    ],
    "customize": [
        "(:action customize-page\n    :parameters (?npc - npc ?ct - covering_tracks ?track - track)\n    :precondition (and (theme-selected ?npc) (not (page-customized ?npc)))\n    :effect (page-customized ?npc)\n)\n\n;; Action 5: Buy copy\n"
    ],
    "remind": [
        "(:action remind_you_about_time_commissioner ; remind yourself or others about the time capsule\n    :parameters (?tc - time_commissioner ?p - player)\n    :precondition (and (available ?tc))\n    :effect (and (reminded ?tc))\n)\n\n"
    ],
    "document": [
        "(:action document_cravings\n    :parameters (?p - npc ?food - food)\n    :precondition (and (at ?p ?loc) (inventory ?p ?food))\n    :effect (documented_cravings ?p ?food)\n  )\n\n  ",
        "(:action document_new_name\n    :parameters (?p - npc ?track - track)\n    :precondition (and (at ?p ?loc) (chosen_application ?p ?track))\n    :effect (documented_new_name ?p ?track)\n  )\n\n  "
    ],
    "be": [
        "(:action be_amazed\n    :parameters (?c - couple)\n    :precondition (and (at ?c album))\n    :effect (amazed ?c)\n)\n\n"
    ]
}