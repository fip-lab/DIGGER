{
    "start": [
        "(:action start_in_infancy\n    :parameters (?npc - person ?infancy - state)\n    :precondition (and (not (exists ?infancy)))\n    :effect (and (exists ?infancy) (availability ?infancy created))\n)\n\n"
    ],
    "use": [
        "(:action use_toddler_tooth_care_products\n    :parameters (?npc - person ?product - item)\n    :precondition (and (at ?npc infancy) (is_toddler_tooth_care_product ?product))\n    :effect (and (inventory ?npc ?product))\n)\n\n"
    ],
    "floss": [
        "(:action floss\n    :parameters (?npc - person ?floss - item ?teeth - bodypart)\n    :precondition (and (inventory ?npc ?floss) (is_teeth ?teeth))\n    :effect (and (clean ?teeth))\n)\n\n"
    ],
    "remove": [
        "(:action brush_toddler_teeth\n    :parameters (?npc - person ?brush - item ?teeth - bodypart)\n    :precondition (and (inventory ?npc ?brush) (is_teeth ?teeth))\n    :effect (and (clean ?teeth))\n)\n\n",
        "(:action remove_tags\n    :parameters (?n - npc)\n    :precondition (and\n      (not (tags_removed ?n))\n    )\n    :effect (tags_removed ?n)\n  )\n\n  ;; Action 2: Sort through hand-me-downs thoroughly\n  ",
        "(:action remove_add_unnecessary_challenges\n    :parameters (?n - npc)\n    :precondition (and\n      (at ?n visible)\n    )\n    :effect (and\n      (not (at ?n visible))\n      (at ?n invisible)\n    )\n  )\n  \n  ;; Action 4: Give your child opportunities to practice zipping\n  ",
        "(:action clean_floor\n    :parameters (?rug - rug)\n    :precondition (dirty ?rug)\n    :effect (and\n              (clean ?rug)\n              (not (dirty ?rug)))\n  )\n\n  ;; Action 3: Limit the use of dryer sheets\n  "
    ],
    "go": [
        "(:action go_to_dentist\n    :parameters (?npc - person ?dentist - location)\n    :precondition (and (at ?npc infancy) (is_dentist ?dentist))\n    :effect (and (at ?npc ?dentist))\n)\n\n"
    ],
    "drink": [
        "(:action drink_fluoridated_water\n    :parameters (?npc - person ?water - item)\n    :precondition (and (is_fluoridated ?water))\n    :effect (and (drink ?npc ?water))\n)\n\n"
    ],
    "choose": [
        "(:action get_well_balanced_diet\n    :parameters (?npc - person ?food - item)\n    :precondition (and (is_well_balanced ?food))\n    :effect (and (inventory ?npc ?food))\n)\n```\n\n### Descriptions of Actions:\n\n1. **start_in_infancy**\n   - **Parameters**: `?npc` (person), `?infancy` (state)\n   - **Preconditions**: `not (exists ?infancy)` - The infancy state does not exist.\n   - **Effect**: `exists ?infancy` - The infancy state is created, and its availability is set to 'created'.\n\n2. **use_toddler_tooth_care_products**\n   - **Parameters**: `?npc` (person), `?product` (item)\n   - **Preconditions**: `at ?npc infancy` - The person is in the infancy state. `is_toddler_tooth_care_product ?product` - The product is a toddler tooth care product.\n   - **Effect**: `inventory ?npc ?product` - The person now has the product in their inventory.\n\n3. **floss**\n   - **Parameters**: `?npc` (person), `?floss` (item), `?teeth` (bodypart)\n   - **Preconditions**: `inventory ?npc ?floss` - The person has floss in their inventory. `is_teeth ?teeth` - The target is teeth.\n   - **Effect**: `clean ?teeth` - The teeth are cleaned.\n\n4. **brush_toddler_teeth**\n   - **Parameters**: `?npc` (person), `?brush` (item), `?teeth` (bodypart)\n   - **Preconditions**: `inventory ?npc ?brush` - The person has a brush in their inventory. `is_teeth ?teeth` - The target is teeth.\n   - **Effect**: `clean ?teeth` - The teeth are cleaned.\n\n5. **go_to_dentist**\n   - **Parameters**: `?npc` (person), `?dentist` (location)\n   - **Preconditions**: `at ?npc infancy` - The person is in the infancy state. `is_dentist ?dentist` - The target location is a dentist.\n   - **Effect**: `at ?npc ?dentist` - The person is now at the dentist.\n\n6. **drink_fluoridated_water**\n   - **Parameters**: `?npc` (person), `?water` (item)\n   - **Preconditions**: `is_fluoridated ?water` - The water is fluoridated.\n   - **Effect**: `drink ?npc ?water` - The person drinks the water.\n\n7. **get_well_balanced_diet**\n   - **Parameters**: `?npc` (person), `?food` (item)\n   - **Preconditions**: `is_well_balanced ?food` - The food is well-balanced.\n   - **Effect**: `inventory ?npc ?food` - The person now has the well-balanced food in their inventory.\n\nThese actions reflect the steps needed to clean a toddler's teeth, ensuring that each action accurately captures the changes in the states of the entities involved.",
        "(:action gather_reinforced\n    :parameters (?p - person ?n - npc)\n    :precondition (and\n      (at ?p talking)\n      (at ?n invisible)\n    )\n    :effect (and\n      (reinforced ?p ?n)\n    )\n  )\n  \n  ;; Action 6: Reward your child for a job well done\n  ",
        "(:action choose_clothes\n    :parameters (?npc - person ?clothes - clothing)\n    :precondition (and\n                    (person ?npc)\n                    (clothing ?clothes)\n                    (easy_to_pull_on ?clothes)\n                  )\n    :effect (and\n              (chosen ?clothes)\n              (not (unselected ?clothes))\n            )\n)\n\n;; Action 2: Get your toddler to practice wearing their winter clothes\n",
        "(:action choose_detergent\n    :parameters (?npc - person ?det - detergent ?loc - location)\n    :precondition (and (at ?npc ?loc) (at ?det ?loc))\n    :effect (and (chosen ?npc ?det) (not (at ?det ?loc)) (in_use ?det))\n)\n```\n\n3. **Dry Clothes**\n```pddl\n"
    ],
    "put": [
        "(:action wash_baby\n    :parameters (?n - npc)\n    :precondition (and\n      (dirty ?n)\n    )\n    :effect (and\n      (not (dirty ?n))\n      (clean ?n)\n    )\n  )\n\n  ;; Action 4: Put the clothes in the dryer\n  ",
        "(:action put_clothes_in_dryer\n    :parameters (?c - clothes)\n    :precondition (and\n      (clean ?c)\n      (not (in_dryer ?c))\n    )\n    :effect (in_dryer ?c)\n  )\n\n  ;; Action 5: Fold laundry and put away\n  ",
        "(:action put_zipper_in_machine\n    :parameters (?z - zipper)\n    :precondition (and\n      (at ?z in_package)\n      (whole ?z)\n    )\n    :effect (and\n      (in_machine ?z)\n      (not (at ?z in_package))\n    )\n  )\n  \n  ;; Action 2: Have your child practice zipping with your help\n  ",
        "(:action pack_clothes\n    :parameters (?npc - person ?clothes - summer_clothing)\n    :precondition (and\n                    (person ?npc)\n                    (summer_clothing ?clothes)\n                    (available ?clothes)\n                  )\n    :effect (and\n              (packed ?clothes)\n              (not (available ?clothes))\n            )\n)\n\n;; Action 4: Make getting dressed a familiar routine\n"
    ],
    "make": [
        "(:action fold-and-put-away\n    :parameters (?l - laundry)\n    :precondition (and\n      (in_dryer ?l)\n      (not (folded ?l))\n    )\n    :effect (and\n      (folded ?l)\n      (put_away ?l)\n    )\n  )\n\n  ;; Action 6: Keep baby's dirty clothes in a separate basket\n  ",
        "(:action make_familiar_routine\n    :parameters (?npc - person ?routine - routine)\n    :precondition (and\n                    (person ?npc)\n                    (routine ?routine)\n                    (not (familiar ?routine))\n                  )\n    :effect (and\n              (familiar ?routine)\n              (not (unfamiliar ?routine))\n            )\n)\n\n;; Action 5: Avoid forcing your toddler to wear the winter clothes\n",
        "(:action make_child_friendly\n    :parameters (?a - area)\n    :precondition (and\n      (knowledge ?a unselected)\n    )\n    :effect (and\n      (knowledge ?a selected)\n    )\n  )\n\n  ;; Action 2: Have young children participate with safe tasks\n  ",
        "(:action make_fun\n    :parameters (?l - laundry)\n    :precondition (and\n      (fullness ?l empty)\n    )\n    :effect (and\n      (fullness ?l full_with_polar_fleece)\n    )\n  )\n\n  ;; Action 4: Encourage teenagers to be more independent\n  "
    ],
    "keep": [
        "(:action keep-dirty-wicks-in-basket\n    :parameters (?n - npc)\n    :precondition (and\n      (dirty ?n)\n      (not (in_basket ?n))\n    )\n    :effect (in_basket ?n)\n  )\n)\n```\n\nExplanation of the PDDL actions:\n\n1. **remove_tags**:\n   - **Parameters**: `?n` - npc (new clothes, blankets, and sheets)\n   - **Preconditions**: The tags have not been removed yet.\n   - **Effect**: Tags are removed from the items.\n\n2. **sort_hand-me-downs**:\n   - **Parameters**: `?kr` - kids-room\n   - **Preconditions**: The hand-me-downs are not yet sorted.\n   - **Effect**: The hand-me-downs are sorted.\n\n3. **wash_baby**:\n   - **Parameters**: `?n` - npc (baby's clothes)\n   - **Preconditions**: The baby's clothes are dirty.\n   - **Effect**: The baby's clothes are cleaned.\n\n4. **put_clothes_in_dryer**:\n   - **Parameters**: `?c` - clothes\n   - **Preconditions**: The clothes are clean and not in the dryer.\n   - **Effect**: The clothes are put in the dryer.\n\n5. **fold-and-put-away**:\n   - **Parameters**: `?l` - laundry\n   - **Preconditions**: The laundry is in the dryer and not yet folded.\n   - **Effect**: The laundry is folded and put away.\n\n6. **keep-dirty-wicks-in-basket**:\n   - **Parameters**: `?n` - npc (baby's dirty clothes)\n   - **Preconditions**: The baby's clothes are dirty and not in the basket.\n   - **Effect**: The baby's dirty clothes are kept in a separate basket."
    ],
    "teach": [
        "(:action teach-child\n    :parameters (?c - child)\n    :precondition (and\n      (practicing_zipping ?c)\n    )\n    :effect (and\n      (opportunities_given ?c)\n    )\n  )\n  \n  ;; Action 5: Give positive reinforcement\n  ",
        "(:action teach_child\n    :parameters (?npc - child ?lice - lice)\n    :precondition (and (present ?npc) (unaware ?lice))\n    :effect (and (aware ?lice) (not (unaware ?lice)))\n)\n\n"
    ],
    "avoid": [
        "(:action avoid_forcing\n    :parameters (?npc - person ?clothes - winter_clothing)\n    :precondition (and\n                    (person ?npc)\n                    (winter_clothing ?clothes)\n                    (not (forced ?npc ?clothes))\n                  )\n    :effect (and\n              (voluntary ?npc ?clothes)\n              (not (forced ?npc ?clothes))\n            )\n)\n```\n\nIn these actions, the preconditions and effects have been tailored to reflect the entity state transitions relevant to the task of getting a toddler to wear winter clothes. Each action ensures that the state changes are accurately represented, capturing the intent and logic of the task steps.",
        "(:action avoid_sharing\n    :parameters (?npc - person ?b - basement)\n    :precondition (and (trusting_family ?npc) (in_basement ?b))\n    :effect (and (not (trusting_family ?npc)) (not (in_basement ?b)))\n)\n\n",
        "(:action avoid_inserting_cotton_swab\n    :parameters (?child - npc)\n    :precondition (and\n                    (checked_ears ?child)\n                    (not (inserted_cotton_swab ?child)))\n    :effect (and\n              (not (inserted_cotton_swab ?child))\n              (safe_ears ?child))\n  )\n\n  ;; Action 3: Watch for signs of ear pain\n  "
    ],
    "learn": [
        "(:action learn_signal\n    :parameters (?npc - npc)\n    :precondition (and (not (knowledgeable ?npc)))\n    :effect (knowledgeable ?npc)\n  )\n\n  ;; Action 2: Keep the floor around the dryer clean\n  "
    ],
    "check": [
        "(:action check_sheets\n    :parameters (?sheet - dryer_sheet)\n    :precondition (and (in_use ?sheet))\n    :effect (and\n              (limited_use ?sheet)\n              (not (in_use ?sheet)))\n  )\n\n  ;; Action 4: Stick to brief dry cycles\n  ",
        "(:action check_lice\n    :parameters (?npc - person)\n    :precondition (and (present ?npc) (dirty_hair ?npc))\n    :effect (and (checked_for_lice ?npc) (not (dirty_hair ?npc)))\n)\n\n",
        "(:action check_louse\n    :parameters (?louse - louse)\n    :precondition (and (present ?louse) (idle ?louse))\n    :effect (and (identified ?louse) (not (idle ?louse)))\n)\n\n",
        "(:action check_child\n    :parameters (?npc - child)\n    :precondition (and (present ?npc) (unexamined ?npc))\n    :effect (and (examined ?npc) (not (unexamined ?npc)))\n)\n```\n\n### Task Descriptions and Entity States:\n\n1. **Avoid sharing.**\n   - **Action Name:** avoid_sharing\n   - **Parameters:** ?npc - person, ?b - basement\n   - **Preconditions:** trusting_family (?npc), in_basement (?b)\n   - **Effect:** not (trusting_family ?npc), not (in_basement ?b)\n\n2. **Ensure hair hygiene.**\n   - **Action Name:** ensure_hair_hygiene\n   - **Parameters:** ?e - equipment\n   - **Preconditions:** unwashed_hair (?e), scattered (?e)\n   - **Effect:** washed_hair (?e), organized (?e), not (unwashed_hair ?e), not (scattered ?e)\n\n3. **Teach your children steps to avoid lice.**\n   - **Action Name:** teach_child\n   - **Parameters:** ?npc - child, ?lice - lice\n   - **Preconditions:** present (?npc), unaware (?lice)\n   - **Effect:** aware (?lice), not (unaware ?lice)\n\n4. **Make sure your child's school or organization checks for lice.**\n   - **Action Name:** check_lice\n   - **Parameters:** ?npc - person\n   - **Preconditions:** present (?npc), dirty_hair (?npc)\n   - **Effect:** checked_for_lice (?npc), not (dirty_hair ?npc)\n\n5. **Look for the telltale signs of a louse.**\n   - **Action Name:** check_louse\n   - **Parameters:** ?louse - louse\n   - **Preconditions:** present (?louse), idle (?louse)\n   - **Effect:** identified (?louse), not (idle ?louse)\n\n6. **Check your child\u2019s hair.**\n   - **Action Name:** check_child\n   - **Parameters:** ?npc - child\n   - **Preconditions:** present (?npc), unexamined (?npc)\n   - **Effect:** examined (?npc), not (unexamined ?npc)\n```\n\nThese actions capture the intent, logic, and state changes of each step in the task \"How to Free Your Child from Lice.\" The preconditions and effects reflect the changes in the state of the relevant entities such as the child, equipment, and lice.",
        "(:action check_child_ears\n    :parameters (?child - npc)\n    :precondition (and\n                    (visible ?child)\n                    (not (checked_ears ?child)))\n    :effect (and\n              (checked_ears ?child)\n              (not (visible ?child))\n              (invisible ?child))\n  )\n\n  ;; Action 2: Insert cotton swab (modified to reflect the correct guidance of not inserting anything into child's ear)\n  ",
        "(:action watch_child\n    :parameters (?child - npc)\n    :precondition (and\n                    (checked_ears ?child)\n                    (not (watched_child ?child)))\n    :effect (and\n              (watched_child ?child)\n              (observing_signs_of_pain ?child))\n  )\n)\n```\n\n### Descriptions of Actions:\n\n1. **check_child_ears**:\n   - **Action Name**: check_child_ears\n   - **Parameters**: ?child - npc\n   - **Preconditions**: The child must be visible and their ears must not have been checked yet.\n   - **Effects**: The child's ears are checked, the child becomes invisible (indicating the action has been performed), and the checked_ears state is set.\n\n2. **avoid_inserting_cotton_swab**:\n   - **Action Name**: avoid_inserting_cotton_swab\n   - **Parameters**: ?child - npc\n   - **Preconditions**: The child's ears must have been checked, and no cotton swab should be inserted.\n   - **Effects**: Ensures that no cotton swab is inserted into the child's ears, maintaining the safe_ears state.\n\n3. **watch_child**:\n   - **Action Name**: watch_child\n   - **Parameters**: ?child - npc\n   - **Preconditions**: The child's ears must have been checked, and the child must not have been watched for signs of ear pain yet.\n   - **Effects**: The child is watched for signs of ear pain, setting the observing_signs_of_pain state.\n\nThese actions ensure that the task of cleaning a toddler's ears is performed safely and according to the given steps and descriptions."
    ],
    "stick": [
        "(:action stick_to_dry_cycles\n    :parameters (?npc - npc)\n    :precondition (and (not (sticking_to_dry_cycles ?npc)))\n    :effect (sticking_to_dry_cycles ?npc)\n  )\n)\n```\n\nThis PDDL captures the essential steps and state changes for the task \"How to Clean a Clothes Dryer Vent.\" Each action is designed to reflect the specific changes in entity states as described.",
        "(:action add_dryer_sheets\n    :parameters (?npc - person ?sheets - dryer_sheets ?dryer - dryer)\n    :precondition (and (at ?npc ?dryer) (at ?sheets ?npc))\n    :effect (and (in_dryer ?sheets ?dryer) (not (at ?sheets ?npc)))\n)\n```\n\n### Descriptions and State Changes:\n\n- **Determine Temperature of Water**:\n  - **Precondition**: The NPC must be at the water source and the temperature of the water must be known.\n  - **Effect**: The temperature of the water is determined by the NPC.\n\n- **Choose Detergent**:\n  - **Precondition**: The NPC must be at the location where the detergent is stored.\n  - **Effect**: The detergent is chosen by the NPC, and it is no longer at the storage location but is now in use.\n\n- **Dry Clothes**:\n  - **Precondition**: The NPC must be at the work station with the clothes.\n  - **Effect**: The clothes are dried, changing their state from wet to dry.\n\n- **Add Dryer Sheets**:\n  - **Precondition**: The NPC must be at the dryer with the dryer sheets.\n  - **Effect**: The dryer sheets are added to the dryer, changing their location from with the NPC to in the dryer.\n\nThese actions should cover the steps required to wash a toddler's clothes, focusing on the relevant state changes of the entities involved in each step."
    ],
    "dry": [
        "(:action dry_clothes\n    :parameters (?npc - person ?clothes - clothes ?work_station - work_station)\n    :precondition (and (at ?npc ?work_station) (has_clothes ?npc ?clothes))\n    :effect (and (dry ?clothes) (not (wet ?clothes)))\n)\n```\n\n4. **Add Dryer Sheets**\n```pddl\n"
    ],
    "participate": [
        "(:action participate_with_children\n    :parameters (?n - npc ?k - kids)\n    :precondition (and\n      (decoration ?n plain)\n      (availability ?k unmade)\n    )\n    :effect (and\n      (decoration ?n camouflaged)\n      (availability ?k created)\n    )\n  )\n\n  ;; Action 3: Make laundry fun for older kids\n  "
    ],
    "encourage": [
        "(:action encourage_teenagers\n    :parameters (?n - npc)\n    :precondition (and\n      (visibility ?n visible)\n    )\n    :effect (and\n      (visibility ?n invisible)\n    )\n  )\n)\n```\n\nEach action is designed to reflect the specific steps and entity state changes described in the task. The parameters, preconditions, and effects are tailored to match the provided entity attributes and their transitions."
    ],
    "sort": [
        "(:action sort_hand-me-downs\n    :parameters (?kr - kids-room)\n    :precondition (and\n      (not (sorted ?kr))\n    )\n    :effect (sorted ?kr)\n  )\n\n  ;; Action 3: Wash baby's clothes as you would any other clothes\n  "
    ],
    "receptacle": [
        "(:action receptacle\n    :parameters (?a - agent ?c - child ?n - npc)\n    :precondition (and\n      (reinforced ?a ?n)\n      (opportunities_given ?c)\n    )\n    :effect (and\n      (rewarded ?c)\n    )\n  )\n)\n```\n\nIn this PDDL domain:\n- `put_zipper_in_machine` models the zipper use.\n- `teach-child` is used twice: once to have the child practice with help, and again to give the child more opportunities.\n- `remove_add_unnecessary_challenges` removes unnecessary challenges by making the `npc` invisible.\n- `gather_reinforced` provides positive reinforcement.\n- `receptacle` rewards the child for a job well done.\n\nEach action has preconditions that need to be satisfied before the action can be executed, and effects that describe the state changes resulting from the action."
    ],
    "practice": [
        "(:action practice_wearing_winter_clothes\n    :parameters (?npc - person ?clothes - winter_clothing)\n    :precondition (and\n                    (person ?npc)\n                    (winter_clothing ?clothes)\n                    (clean ?clothes)\n                    (not (wearing ?npc ?clothes))\n                  )\n    :effect (and\n              (wearing ?npc ?clothes)\n              (not (unworn ?clothes))\n            )\n)\n\n;; Action 3: Pack their summer clothes\n"
    ],
    "determine": [
        "(:action determine_temperature\n    :parameters (?npc - person ?water - water ?temp - temperature)\n    :precondition (and (at ?npc ?water) (temperature ?water ?temp))\n    :effect (and (determined_temperature ?npc ?water ?temp))\n)\n```\n\n2. **Choose Detergent**\n```pddl\n"
    ],
    "ensure": [
        "(:action ensure_hair_hygiene\n    :parameters (?e - equipment)\n    :precondition (and (unwashed_hair ?e) (scattered ?e))\n    :effect (and (washed_hair ?e) (organized ?e) (not (unwashed_hair ?e)) (not (scattered ?e)))\n)\n\n"
    ]
}