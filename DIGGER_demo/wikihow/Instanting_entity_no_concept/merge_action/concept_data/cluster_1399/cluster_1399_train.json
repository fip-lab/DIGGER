{
    "gather": [
        "(:action gather-ingredients\n    :parameters (?p - person ?i - ingredients ?b - mixing_bowl)\n    :precondition (and (aroundHouse ?i))\n    :effect (and (inBowl ?i ?b) (organized ?i))\n  )\n\n",
        "(:action obtain_glue_gun\n    :parameters (?n - npc ?g - glue_gun)\n    :precondition (and (not (has ?n ?g)))\n    :effect (and (has ?n ?g))\n)\n\n"
    ],
    "put": [
        "(:action put-ingredients-in-container\n    :parameters (?p - person ?c - cream ?cont - container)\n    :precondition (and (inBowl ?c ?b) (empty ?cont))\n    :effect (and (inContainer ?c ?cont) (full ?cont))\n  )\n\n",
        "(:action put_ingredients_in_measuring_cup\n      :parameters (?p - person ?butter - butter ?cup - measuring_cup)\n      :precondition (and (at ?p ?butter) (at ?p ?cup) (sliced ?butter) (full ?cup))\n      :effect (and (in ?butter ?cup) (not (at ?butter ?p)))\n)\n\n",
        "(:action put_ingredients_in_machine\n    :parameters (?a - agent ?b - butter ?m - microwave)\n    :precondition (and (cubed ?b) (on_cutting_board ?b) (off ?m))\n    :effect (and (in_microwave ?b) (not (on_cutting_board ?b)) (not (off ?m)) (on ?m))\n)\n\n",
        "(:action place-ingredients\n    :parameters (?butter - entity ?container - container)\n    :precondition (and (chopped ?cream) (empty ?container))\n    :effect (and (inContainer ?butter ?container) (full ?container) (not (empty ?container)))\n)\n\n",
        "(:action set-oven\n    :parameters (?p - person ?npc - npc)\n    :precondition (and (off ?npc))\n    :effect (and (on ?npc))\n  )\n\n",
        "(:action set_burner_add_ingredients\n    :parameters (?a - agent ?k - stove_knob ?b - butter)\n    :precondition (and (in_microwave ?b) (on ?k))\n    :effect (and (softened ?b) (not (in_microwave ?b)) (on_counter ?b) (not (on ?k)))\n)\n\n",
        "(:action fill_cup\n      :parameters (?p - person ?cup - measuring_cup ?water - water)\n      :precondition (and (at ?p ?cup) (at ?p ?water) (not (full ?cup)) (cold ?water))\n      :effect (and (full ?cup) (in ?water ?cup))\n)\n\n",
        "(:action plug_in_glue_gun\n    :parameters (?u - user ?g - glue_gun ?v - velveeta)\n    :precondition (and (has ?u ?g) (unplugged ?g) (on_surface ?v))\n    :effect (and (plugged_in ?g) (not (unplugged ?g)))\n)\n\n",
        "(:action squeeze_trigger\n    :parameters (?u - user ?g - glue_gun ?gl - glue_stick)\n    :precondition (and (plugged_in ?g) (loaded ?g ?gl) (trigger_ready ?g))\n    :effect (and (feeding ?g ?gl) (not (trigger_ready ?g)))\n)\n\n",
        "(:action squeeze-lemon\n    :parameters (?lemon - entity ?water - entity)\n    :precondition (and (whole ?lemon) (inContainer ?water))\n    :effect (and (squeezed ?lemon) (mixed ?lemon ?water) (not (whole ?lemon)))\n)\n\n",
        "(:action insert_stick\n    :parameters (?n - npc ?g - glue_gun ?gl - glue_stick ?s - stick)\n    :precondition (and (feeding ?g ?gl) (not (feeding ?g ?s)))\n    :effect (and (feeding ?g ?s) (not (feeding ?g ?gl)))\n)\n```\n\n### Descriptions of Each Action:\n1. **obtain_glue_gun**:\n   - **Parameters**: `?n` (npc), `?g` (glue_gun)\n   - **Preconditions**: The npc does not have the glue gun.\n   - **Effects**: The npc obtains the glue gun.\n\n2. **plug_in_glue_gun**:\n   - **Parameters**: `?u` (user), `?g` (glue_gun), `?v` (velveeta)\n   - **Preconditions**: The user has the glue gun, the glue gun is unplugged, and it is on a surface (velveeta).\n   - **Effects**: The glue gun is plugged in.\n\n3. **squeeze_trigger**:\n   - **Parameters**: `?u` (user), `?g` (glue_gun), `?gl` (glue_stick)\n   - **Preconditions**: The glue gun is plugged in, loaded with a glue stick, and the trigger is ready.\n   - **Effects**: The glue stick starts feeding through the glue gun.\n\n4. **insert_stick**:\n   - **Parameters**: `?n` (npc), `?g` (glue_gun), `?gl` (glue_stick), `?s` (stick)\n   - **Preconditions**: The glue stick is feeding through the glue gun, and the new stick is not yet feeding.\n   - **Effects**: The new stick starts feeding through the glue gun, replacing the previous stick.\n\nThese actions reflect the necessary steps and state changes required to melt glue sticks using a glue gun.",
        "(:action scoop_peanut_butter\n    :parameters (?p - player ?b - blender)\n    :precondition (and (at ?p ?b) (measured peanut_butter) (not (fuller ?b)))\n    :effect (and (scooped peanut_butter ?b) (fuller ?b) (dirty ?b))\n)\n\n"
    ],
    "start": [
        "(:action start-shaking\n    :parameters (?p - person ?cont - container)\n    :precondition (and (sealed ?cont) (full ?cont))\n    :effect (and (shaking ?p ?cont))\n  )\n\n",
        "(:action stop_adding_ingredients_to_water\n      :parameters (?p - person ?butter - butter ?water - water)\n      :precondition (and (at ?p ?butter) (at ?p ?water) (in ?butter ?cup) (full ?cup))\n      :effect (and (stopped_adding ?butter ?water))\n)\n\n"
    ],
    "add": [
        "(:action add-salt-to-ingredients\n    :parameters (?salt - entity ?bowl - container)\n    :precondition (and (inContainer ?cream ?bowl) (full ?bowl))\n    :effect (and (salted ?cream) (not (unsalted ?cream)))\n)\n\n",
        "(:action mix_ingredients ; mix canola oil and other ingredients in blender\n    :parameters (?p - person ?blender - blender ?canola_oil - canola_oil ?mixture - mixture)\n    :precondition (and (at ?p ?location) (is_blender ?blender) (is_canola_oil ?canola_oil) (is_mixture ?mixture) (in_blender ?mixture) (not (mixed ?mixture)))\n    :effect (and (mixed ?mixture) (not (separate ?mixture)) (fuller ?blender) (heavier ?blender))\n)\n```\n\n### Descriptions of Actions:\n\n1. **cut_ingredients**:\n    - **Action Name**: Cut Ingredients\n    - **Parameters**: `?p` (person), `?butter` (butter)\n    - **Preconditions**: \n        - The person is at the location.\n        - The item is butter.\n        - The butter is frozen.\n    - **Effects**: \n        - The butter is no longer frozen.\n        - The butter is cut into cubes.\n\n2. **pulse_ingredients**:\n    - **Action Name**: Pulse Ingredients\n    - **Parameters**: `?p` (person), `?blender` (blender), `?mixture` (mixture)\n    - **Preconditions**: \n        - The person is at the location.\n        - The item is a blender.\n        - The item is a mixture.\n        - The mixture is in the blender.\n    - **Effects**: \n        - The mixture is pulsed.\n        - The mixture is no longer separate.\n        - The mixture is mixed.\n\n3. **mix_ingredients**:\n    - **Action Name**: Mix Ingredients\n    - **Parameters**: `?p` (person), `?blender` (blender), `?canola_oil` (canola oil), `?mixture` (mixture)\n    - **Preconditions**: \n        - The person is at the location.\n        - The item is a blender.\n        - The item is canola oil.\n        - The item is a mixture.\n        - The mixture is in the blender.\n        - The mixture is not mixed.\n    - **Effects**: \n        - The mixture is mixed.\n        - The mixture is no longer separate.\n        - The blender is fuller.\n        - The blender is heavier.\n\nThese actions accurately reflect the state changes associated with each step in the task \"How to Cut in Butter.\"",
        "(:action blend_on_low_speed\n    :parameters (?p - player ?b - blender)\n    :precondition (and (at ?p ?b) (scooped peanut_butter ?b) (off ?b))\n    :effect (and (blending ?b) (on ?b) (spinning ?b))\n)\n\n"
    ],
    "open": [
        "(:action open-container\n    :parameters (?p - person ?cont - container)\n    :precondition (and (sealed ?cont) (full ?cont))\n    :effect (and (open ?cont) (not (sealed ?cont)))\n  )\n\n"
    ],
    "wet": [
        "(:action wet-wicks\n    :parameters (?p - person ?w - wick)\n    :precondition (and (dry ?w))\n    :effect (and (wet ?w) (not (dry ?w)))\n  )\n\n",
        "(:action microwave_butter\n    :parameters (?a - agent ?b - butter ?m - microwave)\n    :precondition (and (cubed ?b) (in_microwave ?b) (on ?m))\n    :effect (and (softened ?b) (not (cubed ?b)) (not (in_microwave ?b)) (on_counter ?b))\n)",
        "(:action soften-butter\n    :parameters (?b - butter ?bowl - mixing-bowl)\n    :precondition (and (cut ?b into-pieces) (location ?bowl on-counter))\n    :effect (and (softened ?b) (in-bowl ?b ?bowl))\n)\n\n",
        "(:action warm-cream\n    :parameters (?cream - entity ?stove - entity)\n    :precondition (and (cool ?cream) (off ?stove))\n    :effect (and (warm ?cream) (on ?stove) (not (cool ?cream)) (not (off ?stove)))\n)\n\n",
        "(:action cool-mixture\n    :parameters (?mixture - entity ?fridge - entity)\n    :precondition (and (inContainer ?mixture ?container) (onCounter ?container))\n    :effect (and (cool ?mixture) (inFridge ?container) (not (onCounter ?container)))\n)\n```\n\nIn this task, the focus is on the state transitions of the entities involved in making butter with a food processor. The actions reflect the changes in temperature, location, composition, and other relevant attributes."
    ],
    "drain": [
        "(:action drain-buttermilk\n    :parameters (?buttermilk - entity)\n    :precondition (and (chopped ?cream))\n    :effect (and (drained ?buttermilk) (not (inContainer ?buttermilk)))\n)\n\n",
        "(:action drain_water\n      :parameters (?npc - npc ?water - water)\n      :precondition (and (at ?npc ?water) (full ?cup))\n      :effect (and (drained ?water) (empty ?cup))\n)\n```\n\n### Explanation:\n1. **slice_ingredients**: Slices the butter into cubes and places it in the blender.\n   - Preconditions: The person and butter are at the same location, and the butter is not yet sliced.\n   - Effects: The butter is sliced and in the blender.\n\n2. **fill_cup**: Fills the measuring cup with cold water.\n   - Preconditions: The person, measuring cup, and water are at the same location, and the cup is not full.\n   - Effects: The cup is full of water.\n\n3. **calculate_amounts**: Calculates the amount of butter needed.\n   - Preconditions: The person, butter, and mixing bowl are at the same location, and the butter is sliced.\n   - Effects: The amount of butter is calculated.\n\n4. **put_ingredients_in_measuring_cup**: Puts the sliced butter into the measuring cup.\n   - Preconditions: The person, butter, and measuring cup are at the same location, the butter is sliced, and the cup is full of water.\n   - Effects: The butter is in the measuring cup.\n\n5. **push_ingredients_into_machine**: Pushes the butter down into the machine (blender) if it starts piling up.\n   - Preconditions: The person, butter, and machine are at the same location, and the butter is in the measuring cup.\n   - Effects: The butter is pushed into the machine.\n\n6. **stop_adding_ingredients_to_water**: Stops adding butter when the water reaches the desired level.\n   - Preconditions: The person, butter, and water are at the same location, the butter is in the measuring cup, and the cup is full.\n   - Effects: Stops adding butter to the water.\n\n7. **drain_water**: Drains the water after measuring the butter.\n   - Preconditions: The NPC and water are at the same location, and the cup is full.\n   - Effects: The water is drained, and the cup is empty.\n\nThese actions capture the state changes and transitions for each step in the task of measuring butter.",
        "(:action remove-ingredients\n    :parameters (?p - person ?t - towel ?c - container)\n    :precondition (and (drained ?t))\n    :effect (and (not (inContainer ?t ?c)) (clean ?t))\n  )\n\n"
    ],
    "knead": [
        "(:action knead-ingredients\n    :parameters (?p - person ?b - butter ?bowl - mixing_bowl)\n    :precondition (and (inContainer ?b ?t))\n    :effect (and (kneaded ?b) (not (inContainer ?b ?t)))\n  )\n\n",
        "(:action cook\n    :parameters (?p - person ?npc - npc)\n    :precondition (and (on ?npc))\n    :effect (and (cooked ?npc))\n  )\n)\n```\n\nIn this PDDL representation, the actions reflect the steps of making butter in a sealed container, with a focus on the relevant state changes of the entities involved. The preconditions and effects capture the transitions in the state of the entities, such as ingredients being placed in a container, the container being sealed and shaken, and the butter being kneaded and salted.",
        "(:action turn_off_blender\n    :parameters (?p - player ?b - blender)\n    :precondition (and (at ?p ?b) (on ?b))\n    :effect (and (not (on ?b)) (not (spinning ?b)))\n)\n```\n\nExplanation:\n1. **measure_peanut_butter**: This action measures the peanut butter. The precondition checks if the player is at the blender and the blender is empty. The effect is that the peanut butter is measured, and the blender becomes fuller.\n2. **scoop_peanut_butter**: This action scoops the measured peanut butter into the blender. The precondition checks if the player is at the blender, the peanut butter is measured, and the blender is not fuller yet. The effect is that the peanut butter is scooped into the blender, making it fuller and dirty.\n3. **blend_on_low_speed**: This action blends the peanut butter on low speed. The precondition checks if the player is at the blender, the peanut butter is scooped into the blender, and the blender is off. The effect is that the blender starts blending, is turned on, and starts spinning.\n4. **turn_off_blender**: This action turns off the blender after blending. The precondition checks if the player is at the blender and the blender is on. The effect is that the blender is turned off and stops spinning.",
        "(:action prepare-food-processor\n    :parameters (?processor - entity)\n    :precondition (and (inDrawer ?processor))\n    :effect (and (onCounter ?processor) (not (inDrawer ?processor)))\n)\n\n"
    ],
    "cut": [
        "(:action slice_ingredients\n      :parameters (?p - person ?butter - butter ?blender - blender)\n      :precondition (and (at ?p ?butter) (at ?p ?blender) (not (sliced ?butter)))\n      :effect (and (sliced ?butter) (in ?butter ?blender))\n)\n\n",
        "(:action cut_ingredients ; cut chilled or frozen butter into cubes\n    :parameters (?p - person ?butter - butter)\n    :precondition (and (at ?p ?location) (is_butter ?butter) (frozen ?butter))\n    :effect (and (not (frozen ?butter)) (cut ?butter))\n)\n\n",
        "(:action cut-butter\n    :parameters (?b - butter ?knife - tool)\n    :precondition (and (whole ?b) (in-hand ?knife))\n    :effect (and (cut ?b into-pieces) (not (whole ?b)))\n)\n\n",
        "(:action chop-ingredients\n    :parameters (?processor - entity ?bowl - container)\n    :precondition (and (onCounter ?processor) (inContainer ?cream ?bowl) (full ?bowl))\n    :effect (and (chopped ?cream) (not (whole ?cream)))\n)\n\n"
    ],
    "push": [
        "(:action push_ingredients_into_machine\n      :parameters (?p - person ?butter - butter ?machine - blender)\n      :precondition (and (at ?p ?butter) (at ?p ?machine) (in ?butter ?cup))\n      :effect (and (pushed ?butter ?machine) (not (in ?butter ?cup)))\n)\n\n"
    ],
    "know": [
        "(:action know-when-to-soften-butter\n    :parameters (?you - person ?b - butter)\n    :precondition (and (focused-on ?you making-butter) (location ?b in-fridge))\n    :effect (and (aware ?you when-soft ?b) (location ?b on-counter))\n)\n\n"
    ],
    "measure": [
        "(:action measure_peanut_butter\n    :parameters (?p - player ?b - blender)\n    :precondition (and (at ?p ?b) (empty ?b))\n    :effect (and (measured peanut_butter) (not (empty ?b)) (fuller ?b))\n)\n\n"
    ],
    "calculate": [
        "(:action calculate_amounts\n      :parameters (?p - person ?butter - butter ?bowl - mixing_bowl)\n      :precondition (and (at ?p ?butter) (at ?p ?bowl) (sliced ?butter))\n      :effect (and (calculated ?butter ?bowl))\n)\n\n"
    ],
    "rapidly": [
        "(:action rapidly-soften-butter\n    :parameters (?b - butter ?grater - tool)\n    :precondition (and (frozen ?b) (in-hand ?grater))\n    :effect (and (softened ?b) (not (frozen ?b)))\n)\n```\n\n### Explanation\n\n1. **know-when-to-soften-butter**: This action represents understanding when the butter is ready to be softened, transitioning its location from the fridge to the counter.\n\n2. **cut-butter**: This action involves cutting the butter into pieces, which changes its granularity from whole to cut into pieces.\n\n3. **soften-butter**: This action involves softening the butter in a mixing bowl, changing its state to softened and placing it in the bowl.\n\n4. **place-butter-in-water-bath**: This action involves placing the softened butter in a container and then in a hot water bath, resulting in the butter melting.\n\n5. **rapidly-soften-butter**: This action involves using a grater to rapidly soften frozen butter, changing its state from frozen to softened.\n\nThese actions focus on the relevant entity states and transitions needed to complete the task of melting butter."
    ],
    "pulse": [
        "(:action pulse_ingredients ; pulse all ingredients in a blender\n    :parameters (?p - person ?blender - blender ?mixture - mixture)\n    :precondition (and (at ?p ?location) (is_blender ?blender) (is_mixture ?mixture) (in_blender ?mixture))\n    :effect (and (pulsed ?mixture) (not (separate ?mixture)) (mixed ?mixture))\n)\n\n"
    ]
}