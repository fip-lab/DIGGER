{
    "make": [
        "(:action make_side_braid\n    :parameters (?h - hair)\n    :precondition (and (shape ?h straight) (location ?h on_head))\n    :effect (and (shape ?h fishtail_braid) (location ?h on_side))\n)\n\n",
        "(:action make_topsy_turvy\n    :parameters (?p - ponytail)\n    :precondition (and (shape ?p straight) (location ?p on_head))\n    :effect (and (shape ?p topsy_turvy) (location ?p on_head))\n)\n\n",
        "(:action make_sliplargerbeads\n    :parameters (?p - person)\n    :precondition (and (shape ?braid straight) (focus ?p focused_on_braiding_hair))\n    :effect (and (shape ?braid twisted_and_folded))\n)\n\n",
        "(:action make_braided_braid\n    :parameters (?npc - person ?b - braid)\n    :precondition (and\n                    (knows_Dutch_braid ?npc)\n                    (shape ?b twisted_and_folded)\n                  )\n    :effect (shape ?b more_twisted_and_folded)\n)\n\n;; Action 5: Try a rope braid\n",
        "(:action make_loop\n    :parameters (?l - loop)\n    :precondition (not (loop-created ?l))\n    :effect (loop-created ?l)\n  )\n\n  ;; Action 3: Push the long side through the loop\n  ",
        "(:action weave_string\n    :parameters (?npc - person ?s1 - string ?s2 - string ?s3 - string)\n    :precondition (and\n                    (grouped ?s1)\n                    (grouped ?s2)\n                    (grouped ?s3)\n                  )\n    :effect (and\n              (weaved ?s1 ?s2)\n              (weaved ?s3 ?s2)\n            )\n)\n\n",
        "(:action weave_remaining_string\n    :parameters (?npc - person ?s4 - string ?s5 - string ?s3 - string)\n    :precondition (and\n                    (grouped ?s4)\n                    (grouped ?s5)\n                    (weaved ?s3 ?s2)\n                  )\n    :effect (and\n              (weaved ?s4 ?s3)\n              (weaved ?s5 ?s3)\n            )\n)\n\n",
        "(:action create_braided_headband\n    :parameters (?npc - person ?b - braid)\n    :precondition (and\n                    (knows_Dutch_braid ?npc)\n                    (shape ?b twisted_and_folded)\n                  )\n    :effect (wearing_headband ?npc)\n)\n\n;; Action 4: Make a braided braid\n",
        "(:action create_loop\n    :parameters (?l - loop)\n    :precondition (loop-created ?l)\n    :effect (loop-created ?l)\n  )\n\n  ;; Action 6: Repeat through the length of the rope\n  ",
        "(:action turn_into_new_loop\n    :parameters (?u - part)\n    :precondition (not (new-loop-formed ?u))\n    :effect (new-loop-formed ?u)\n  )\n\n  ;; Action 5: Create another loop\n  "
    ],
    "hang": [
        "(:action cover_with_clip\n    :parameters (?h - hair ?c - clip)\n    :precondition (and (shape ?h tied) (location ?h on_head) (state ?c available))\n    :effect (and (state ?c in_use) (appearance ?h covered))\n)\n\n",
        "(:action put_hook\n    :parameters (?n - npc)\n    :precondition (shape-bent-twice ?n)\n    :effect (hook-put ?n)\n  )\n\n  ;; Hang the hanger\n  ",
        "(:action hang_hanger\n    :parameters (?h - hanger)\n    :precondition (hook-put ?n)\n    :effect (hanger-hung ?h)\n  )\n\n  ;; Loop each end around some fixtures\n  ",
        "(:action hang_on_rack\n    :parameters (?n - npc)\n    :precondition (ends-looped ?e)\n    :effect (rack-hung ?n)\n  )\n\n  ;; Braid the three strands\n  "
    ],
    "roll": [
        "(:action roll_bun\n    :parameters (?h - hair)\n    :precondition (and (shape ?h fishtail_braid) (location ?h on_head))\n    :effect (and (shape ?h bun) (location ?h nape_of_neck))\n)\n\n",
        "(:action sweep_all_of_hair\n    :parameters (?npc - person)\n    :precondition (and (hair_position ?npc normal))\n    :effect (and (hair_position ?npc swept_to_side))\n)\n```\n\n2. **part_of_hair**\n```pddl\n"
    ],
    "add": [
        "(:action add_color_extensions\n    :parameters (?h - hair ?e - extensions)\n    :precondition (and (shape ?h straight) (state ?e available))\n    :effect (and (shape ?h colored) (state ?e in_use))\n)\n```\n\n### Descriptions of Actions:\n\n1. **make_side_braid**:\n   - **Parameters**: ?h - hair\n   - **Precondition**: The hair is straight and located on the head.\n   - **Effect**: The hair is transformed into a fishtail braid and positioned on the side.\n\n2. **make_topsy_turvy**:\n   - **Parameters**: ?p - ponytail\n   - **Precondition**: The ponytail is straight and located on the head.\n   - **Effect**: The ponytail is made into a topsy-turvy style and remains on the head.\n\n3. **cover_with_clip**:\n   - **Parameters**: ?h - hair, ?c - clip\n   - **Precondition**: The hair is tied and on the head, and the clip is available.\n   - **Effect**: The clip is now in use, and the appearance of the hair is covered.\n\n4. **roll_bun**:\n   - **Parameters**: ?h - hair\n   - **Precondition**: The hair is in a fishtail braid and located on the head.\n   - **Effect**: The hair is rolled into a bun and positioned at the nape of the neck.\n\n5. **add_color_extensions**:\n   - **Parameters**: ?h - hair, ?e - extensions\n   - **Precondition**: The hair is straight, and the extensions are available.\n   - **Effect**: The hair is now colored with the extensions, and the extensions are in use.\n\nThese actions accurately reflect the changes in the state of the entities involved in each step of the task.",
        "(:action add_hair_to_section\n    :parameters (?n - npc ?s - section)\n    :precondition (and (braiding ?s) (unselected ?s))\n    :effect (and (selected ?s) (not (unselected ?s)))\n)\n\n",
        "(:action add_hair_to_side_part\n    :parameters (?n - npc ?s - section)\n    :precondition (and (crossed ?s) (unselected ?s))\n    :effect (and (selected ?s) (not (unselected ?s)))\n)\n\n",
        "(:action knot_strings_together\n    :parameters (?npc - person ?s1 - string ?s2 - string ?s3 - string ?s4 - string ?s5 - string)\n    :precondition (and\n                    (state ?s1 cut)\n                    (state ?s2 cut)\n                    (state ?s3 cut)\n                    (state ?s4 cut)\n                    (state ?s5 cut)\n                  )\n    :effect (and\n              (state ?s1 knotted)\n              (state ?s2 knotted)\n              (state ?s3 knotted)\n              (state ?s4 knotted)\n              (state ?s5 knotted)\n            )\n)\n\n",
        "(:action tie_ends_of_braid\n    :parameters (?npc - person ?s1 - string ?s2 - string ?s3 - string ?s4 - string ?s5 - string)\n    :precondition (and\n                    (braided ?s1 ?s2 ?s3 ?s4 ?s5)\n                  )\n    :effect (and\n              (tied ?s1 ?s2 ?s3 ?s4 ?s5)\n            )\n)\n\n",
        "(:action attach_completed_braid\n    :parameters (?n - npc ?b - braid)\n    :precondition (and (completed ?b) (resting ?n))\n    :effect (and (secured ?b) (decorated ?n) (not (resting ?n)))\n)\n```\n\n### Key Points:\n- **Entities and Attributes**: The primary entities are sections of hair and the braid itself. The attributes track whether sections are selected, gathered, crossed, or braided.\n- **Preconditions and Effects**: Each action has preconditions that must be met before execution, and effects that describe the changes in state after the action is taken.\n- **Logical Flow**: The actions follow a logical sequence that reflects the steps involved in braiding hair, from parting and gathering to completing and securing the braid.",
        "(:action loop_bands\n    :parameters (?n - npc)\n    :precondition (smallest-tubing-found ?n)\n    :effect (bands-looped ?n)\n  )\n\n  ;; Divide the full length into thirds and cut it into separate pieces\n  ",
        "(:action loop_ends\n    :parameters (?e - ends)\n    :precondition (hanger-hung ?h)\n    :effect (ends-looped ?e)\n  )\n\n  ;; Hang the line on the rack\n  "
    ],
    "cut": [
        "(:action cut_string\n    :parameters (?npc - person ?s - string)\n    :precondition (and\n                    (length ?s longer)\n                    (state ?s uncut)\n                  )\n    :effect (and\n              (length ?s shorter)\n              (state ?s cut)\n              (not (length ?s longer))\n              (not (state ?s uncut))\n            )\n)\n\n"
    ],
    "divide": [
        "(:action divide_strings\n    :parameters (?npc - person ?s1 - string ?s2 - string ?s3 - string ?s4 - string ?s5 - string)\n    :precondition (and\n                    (state ?s1 knotted)\n                    (state ?s2 knotted)\n                    (state ?s3 knotted)\n                    (state ?s4 knotted)\n                    (state ?s5 knotted)\n                  )\n    :effect (and\n              (grouped ?s1)\n              (grouped ?s2)\n              (grouped ?s3)\n              (grouped ?s4)\n              (grouped ?s5)\n            )\n)\n\n",
        "(:action divide_chunk\n    :parameters (?n - npc ?b - basement)\n    :precondition (and (gathered ?b) (absent ?b))\n    :effect (and (present ?b) (not (absent ?b)))\n)\n\n",
        "(:action divide_length\n    :parameters (?n - npc)\n    :precondition (bands-looped ?n)\n    :effect (length-divided ?n)\n  )\n\n  ;; String one of the hooks along one of the strands\n  ",
        "(:action separate_weave\n    :parameters (?n - npc)\n    :precondition (and\n                    (decoration ?n camouflaged)\n                    (visibility ?n visible)\n                  )\n    :effect (and\n              (visibility ?n invisible)\n              (not (visibility ?n visible))\n            )\n  )\n\n;; Action 3: Pull the wire strands correctly\n",
        "(:action part_of_hair\n    :parameters (?npc - person)\n    :precondition (and (hair_position ?npc swept_to_side) (hair_sections ?npc unpartitioned))\n    :effect (and (hair_sections ?npc partitioned))\n)\n```\n\n3. **start_braid**\n```pddl\n",
        "(:action part_hair\n    :parameters (?n - npc ?s - section)\n    :precondition (and (unselected ?s))\n    :effect (and (selected ?s) (not (unselected ?s)))\n)\n\n"
    ],
    "repeat": [
        "(:action repeat_process\n    :parameters (?npc - person ?s1 - string ?s2 - string ?s3 - string ?s4 - string ?s5 - string)\n    :precondition (and\n                    (weaved ?s1 ?s2)\n                    (weaved ?s3 ?s2)\n                    (weaved ?s4 ?s3)\n                    (weaved ?s5 ?s3)\n                  )\n    :effect (and\n              (braided ?s1 ?s2 ?s3 ?s4 ?s5)\n            )\n)\n\n",
        "(:action repeat_through_length\n    :parameters (?r - rope)\n    :precondition (not (rope-braided ?r))\n    :effect (rope-braided ?r)\n  )\n\n  ;; Action 7: Pass the end through the final loop\n  ",
        "(:action start_braid\n    :parameters (?n - npc ?b - basement)\n    :precondition (and (present ?b))\n    :effect (and (braiding ?b) (not (present ?b)))\n)\n\n",
        "(:action start_with_unstuck\n    :parameters (?c - cord)\n    :precondition (unstuck ?c)\n    :effect (unstuck ?c)\n  )\n\n  ;; Action 2: Make a loop\n  ",
        "(:action end_braid\n    :parameters (?b - braid)\n    :precondition (and (twisted ?b))\n    :effect (and (completed ?b) (not (twisted ?b)))\n)\n\n",
        "(:action stop_braiding\n    :parameters (?n - npc)\n    :precondition (and (completed ?n))\n    :effect (and (resting ?n) (not (completed ?n)))\n)\n\n"
    ],
    "peel": [
        "(:action peel_tape\n    :parameters (?npc - person ?t - tape)\n    :precondition (and\n                    (state ?t on_roll)\n                  )\n    :effect (and\n              (state ?t unrolled)\n              (not (state ?t on_roll))\n            )\n)",
        "(:action brush_with_hair\n    :parameters (?p - person)\n    :precondition (and (focus ?p focused_on_making_bracelet))\n    :effect (and (focus ?p focused_on_braiding_hair))\n)\n\n"
    ],
    "pull": [
        "(:action pull_twice\n    :parameters (?n - npc)\n    :precondition (and\n                    (decoration ?n camouflaged)\n                    (visibility ?n invisible)\n                  )\n    :effect (and\n              (visibility ?n visible)\n              (not (visibility ?n invisible))\n            )\n  )\n\n;; Action 4: Secure the loose ends\n",
        "(:action pass_end_through_loop\n    :parameters (?r - rope ?p1 - player ?p2 - player)\n    :precondition (and\n                    (rope-braided ?r)\n                    (rope-braided ?r)\n                  )\n    :effect (end-passed-through ?r ?p1 ?p2)\n  )\n)\n```\n\nIn this PDDL domain definition, the actions are designed to reflect the task steps of braiding a rope. Each action specifies the parameters, preconditions, and effects, ensuring that the state transitions are accurately captured. The actions are named concisely and descriptively to match the task steps.",
        "(:action slip_larger_beads\n    :parameters (?n - npc)\n    :precondition (length-divided ?n)\n    :effect (beads-slipped ?n)\n  )\n\n  ;; Bend the strands to shape twice\n  "
    ],
    "secure": [
        "(:action secure_ends\n    :parameters (?e - ends)\n    :precondition (and\n                    (organization ?e separate)\n                    (form ?e bare)\n                  )\n    :effect (and\n              (organization ?e touching)\n              (form ?e joined_together)\n              (not (organization ?e separate))\n              (not (form ?e bare))\n            )\n  )\n```\n\n### Descriptions of Actions:\n\n1. **braiding_with_wire**: \n   - Parameters: `?n` (npc)\n   - Preconditions: The npc's decoration is bare, and visibility is visible.\n   - Effects: The npc's decoration changes to camouflaged.\n\n2. **separate_weave**:\n   - Parameters: `?n` (npc)\n   - Preconditions: The npc's decoration is camouflaged, and visibility is visible.\n   - Effects: The npc's visibility changes to invisible.\n\n3. **pull_twice**:\n   - Parameters: `?n` (npc)\n   - Preconditions: The npc's decoration is camouflaged, and visibility is invisible.\n   - Effects: The npc's visibility changes back to visible.\n\n4. **secure_ends**:\n   - Parameters: `?e` (ends)\n   - Preconditions: The ends are separate and bare.\n   - Effects: The ends become touching and joined together.\n\nThese actions capture the state changes required for the task of braiding wire rope, focusing on the relevant entity attributes and their transitions.",
        "(:action secure_braid\n    :parameters (?b - braid)\n    :precondition (and (shape ?b twisted_and_folded))\n    :effect (and (shape ?b secured))\n)\n```\n\nThese actions reflect the process of braiding your own hair, including brushing, parting, starting the braid, continuing the braid, and securing it at the end. The entity states and their transitions are captured in the preconditions and effects of each action.",
        "(:action secure_with_hair_elastic\n    :parameters (?npc - person ?elastic - hair_elastic)\n    :precondition (and (braid_status ?npc in_progress) (elastic_position ?elastic available))\n    :effect (and (braid_status ?npc secured) (elastic_position ?elastic used))\n)\n```\n\n### Entity States and Attributes\n\n- **npc (person)**\n  - hair_position: normal, swept_to_side\n  - hair_sections: unpartitioned, partitioned\n  - braid_status: not_started, in_progress, secured\n\n- **elastic (hair_elastic)**\n  - elastic_position: available, used\n\nThese actions capture the relevant state changes of the entities involved in the task of side braiding hair. Each action reflects the conditions necessary to perform the step and the resulting changes in the state of the entities.",
        "(:action gather_hair\n    :parameters (?n - npc ?s - section)\n    :precondition (and (selected ?s))\n    :effect (and (gathered ?s) (not (unselected ?s)))\n)\n\n",
        "(:action find_smallest_tubing\n    :parameters (?n - npc)\n    :precondition (not (smallest-tubing-found ?n))\n    :effect (smallest-tubing-found ?n)\n  )\n\n  ;; Loop the bands together\n  "
    ],
    "learn": [
        "(:action learn_Dutch_braid\n    :parameters (?npc - person)\n    :precondition (not (knows_Dutch_braid ?npc))\n    :effect (knows_Dutch_braid ?npc)\n)\n\n;; Action 2: Try a waterfall braid\n"
    ],
    "try": [
        "(:action try_waterfall_braid\n    :parameters (?npc - person ?b - braid)\n    :precondition (and\n                    (knows_Dutch_braid ?npc)\n                    (shape ?b straight)\n                  )\n    :effect (shape ?b twisted_and_folded)\n)\n\n;; Action 3: Create a braided headband\n",
        "(:action try_rope_braid\n    :parameters (?npc - person ?b - braid)\n    :precondition (and\n                    (knows_Dutch_braid ?npc)\n                    (shape ?b straight)\n                  )\n    :effect (shape ?b twisted_and_folded)\n)\n```\n\n### Explanation of Actions:\n\n1. **learn_Dutch_braid**\n   - **Parameters:** `?npc` - the person learning the braid.\n   - **Preconditions:** The person does not know how to Dutch braid.\n   - **Effect:** The person now knows how to Dutch braid.\n\n2. **try_waterfall_braid**\n   - **Parameters:** `?npc` - the person trying the braid, `?b` - the braid.\n   - **Preconditions:** The person knows how to Dutch braid, and the braid is in a straight shape.\n   - **Effect:** The braid is now twisted and folded.\n\n3. **create_braided_headband**\n   - **Parameters:** `?npc` - the person creating the headband, `?b` - the braid.\n   - **Preconditions:** The person knows how to Dutch braid, and the braid is twisted and folded.\n   - **Effect:** The person is now wearing a headband.\n\n4. **make_braided_braid**\n   - **Parameters:** `?npc` - the person making the braid, `?b` - the braid.\n   - **Preconditions:** The person knows how to Dutch braid, and the braid is twisted and folded.\n   - **Effect:** The braid is now more twisted and folded.\n\n5. **try_rope_braid**\n   - **Parameters:** `?npc` - the person trying the braid, `?b` - the braid.\n   - **Preconditions:** The person knows how to Dutch braid, and the braid is in a straight shape.\n   - **Effect:** The braid is now twisted and folded.\n\nThese actions are tailored to the specific task of braiding hair and reflect the changes in the state of the braid and the knowledge of the person performing the task."
    ],
    "push": [
        "(:action push_long_side_through_loop\n    :parameters (?l - loop ?p - player)\n    :precondition (loop-created ?l)\n    :effect (long-side-pushed ?l ?p)\n  )\n\n  ;; Action 4: Turn the u-shaped part into a new loop\n  "
    ],
    "cross": [
        "(:action cross_hairline\n    :parameters (?s - section)\n    :precondition (and (selected ?s))\n    :effect (and (crossed ?s) (not (selected ?s)))\n)\n\n",
        "(:action cross_panel\n    :parameters (?p - panel)\n    :precondition (and (unadjusted ?p) (invisible ?p))\n    :effect (and (adjusted ?p) (visible ?p) (not (invisible ?p)))\n)\n\n",
        "(:action cross_over_sections\n    :parameters (?n - npc)\n    :precondition (and (braiding ?n))\n    :effect (and (twisted ?n) (not (braiding ?n)))\n)\n\n"
    ],
    "bend": [
        "(:action bend_to_shape_twice\n    :parameters (?n - npc)\n    :precondition (beads-slipped ?n)\n    :effect (shape-bent-twice ?n)\n  )\n\n  ;; Put the second hook in one of the strands\n  "
    ],
    "braid": [
        "(:action braid_strands\n    :parameters (?n - npc)\n    :precondition (rack-hung ?n)\n    :effect (braided ?n)\n  )\n)\n```\n\nThis PDDL domain captures the actions and state transitions necessary to complete the task of making a clothesline without hangers. Each action reflects the state changes of the entities involved, ensuring the task is accurately represented."
    ],
    "StartWithSmoothTangleFreeHair": [
        "(:action StartWithSmoothTangleFreeHair\n    :parameters (?h - hair)\n    :precondition (not (smooth ?h))\n    :effect (smooth ?h)\n)\n\n"
    ],
    "SeparateHair": [
        "(:action SeparateHair\n    :parameters (?npc - person ?h - hair)\n    :precondition (and (smooth ?h) (not (separated ?h)))\n    :effect (separated ?h)\n)\n\n"
    ],
    "PlaitAsNormal": [
        "(:action PlaitAsNormal\n    :parameters (?h - hair)\n    :precondition (and (separated ?h) (not (plaited ?h)))\n    :effect (plaited ?h)\n)\n\n"
    ],
    "SecureBraid": [
        "(:action SecureBraid\n    :parameters (?npc - person ?h - hair)\n    :precondition (and (plaited ?h) (not (secured ?h)))\n    :effect (secured ?h)\n)\n```\n\n### Descriptions of Each Action:\n\n1. **StartWithSmoothTangleFreeHair**\n   - **Parameters**: `?h - hair`\n   - **Precondition**: The hair is not smooth.\n   - **Effect**: The hair becomes smooth.\n\n2. **SeparateHair**\n   - **Parameters**: `?npc - person`, `?h - hair`\n   - **Precondition**: The hair is smooth and not separated.\n   - **Effect**: The hair becomes separated.\n\n3. **PlaitAsNormal**\n   - **Parameters**: `?h - hair`\n   - **Precondition**: The hair is separated and not plaited.\n   - **Effect**: The hair becomes plaited.\n\n4. **SecureBraid**\n   - **Parameters**: `?npc - person`, `?h - hair`\n   - **Precondition**: The hair is plaited and not secured.\n   - **Effect**: The hair becomes secured.\n\nThese actions capture the state changes of the hair and the NPC (person) as they perform the task of plaiting the hair, ensuring that each step's preconditions and effects are accurately represented."
    ],
    "GatherHair": [
        "(:action GatherHair\n    :parameters (?pony - ponytail)\n    :precondition (not (gathered ?pony))\n    :effect (gathered ?pony)\n)\n\n"
    ],
    "PullHair": [
        "(:action PullHair\n    :parameters (?npc - person ?s - scissors)\n    :precondition (and (gathered ?npc) (not (pulled ?npc)))\n    :effect (pulled ?npc)\n  )\n\n  "
    ],
    "BraidHair": [
        "(:action BraidHair\n    :parameters (?npc - person)\n    :precondition (pulled ?npc)\n    :effect (braided ?npc)\n  )\n)\n\n(define (problem braid_curly_hair_problem)\n  (:domain braid_curly_hair)\n  (:objects\n    npc1 - person\n    scissors1 - scissors\n  )\n  (:init\n    (not (gathered npc1))\n    (not (pulled npc1))\n    (not (braided npc1))\n  )\n  (:goal\n    (braided npc1)\n  )\n)\n```\n\n### Explanation:\n1. **GatherHair Action**\n   - **Name**: GatherHair\n   - **Parameters**: `?npc` (the person whose hair is being gathered)\n   - **Preconditions**: The hair of `?npc` has not been gathered.\n   - **Effect**: The hair of `?npc` is now gathered.\n\n2. **PullHair Action**\n   - **Name**: PullHair\n   - **Parameters**: `?npc` (the person whose hair is being pulled), `?s` (the scissors used)\n   - **Preconditions**: The hair of `?npc` has been gathered but not yet pulled.\n   - **Effect**: The hair of `?npc` is now pulled.\n\n3. **BraidHair Action**\n   - **Name**: BraidHair\n   - **Parameters**: `?npc` (the person whose hair is being braided)\n   - **Preconditions**: The hair of `?npc` has been pulled.\n   - **Effect**: The hair of `?npc` is now braided.\n\n### Entity State Transitions:\n- **npc**: The states transition from `not gathered` to `gathered`, then to `pulled`, and finally to `braided`.\n- **scissors**: The state of scissors is used in the `PullHair` action to signify that scissors are involved in the process.\n\nThese PDDL actions capture the steps needed to braid curly hair, following the logical sequence of gathering, pulling, and braiding the hair."
    ],
    "FashionBraidedLeather": [
        "(:action FashionBraidedLeather\n    :parameters (?l - leather)\n    :precondition (not (fashioned ?l))\n    :effect (fashioned ?l)\n  )\n\n  "
    ],
    "MakeCompleted": [
        "(:action MakeCompleted\n    :parameters (?n - npc)\n    :precondition (not (completed ?n))\n    :effect (completed ?n)\n  )\n\n  "
    ],
    "UseAsLeatherRing": [
        "(:action UseAsLeatherRing\n    :parameters (?l - leather)\n    :precondition (and (fashioned ?l) (not (used_as_ring ?l)))\n    :effect (used_as_ring ?l)\n  )\n)\n```\n\n### Explanation:\n1. **FashionBraidedLeather**:\n   - **Parameters**: `?l - leather`\n   - **Preconditions**: The leather is not yet fashioned (`not (fashioned ?l)`).\n   - **Effect**: The leather becomes fashioned (`fashioned ?l`).\n\n2. **MakeCompleted**:\n   - **Parameters**: `?n - npc`\n   - **Preconditions**: The NPC task is not yet completed (`not (completed ?n)`).\n   - **Effect**: The NPC task is completed (`completed ?n`).\n\n3. **UseAsLeatherRing**:\n   - **Parameters**: `?l - leather`\n   - **Preconditions**: The leather is already fashioned (`fashioned ?l`) and not yet used as a ring (`not (used_as_ring ?l)`).\n   - **Effect**: The leather is used as a ring (`used_as_ring ?l`).\n\nThese actions reflect the steps of the task \"How to Braid Leather\" and ensure that the state changes are accurately captured as preconditions and effects."
    ],
    "braiding": [
        "(:action braiding_with_wire\n    :parameters (?n - npc)\n    :precondition (and\n                    (decoration ?n bare)\n                    (visibility ?n visible)\n                  )\n    :effect (and\n              (decoration ?n camouflaged)\n              (not (decoration ?n bare))\n            )\n  )\n\n;; Action 2: Separate the strands of wire\n",
        "(:action braiding_with_hair\n    :parameters (?e - equipment)\n    :precondition (and (organization ?e scattered) (equipment ?e unorganized))\n    :effect (and (organization ?e gathered) (equipment ?e laid_in_pattern))\n)\n\n"
    ],
    "StartBlowDriedHair": [
        "(:action StartBlowDriedHair\n    :parameters (?n - npc)\n    :precondition (not (blow_dried ?n))\n    :effect (blow_dried ?n)\n  )\n\n"
    ],
    "PartOfHair": [
        "(:action PartOfHair\n    :parameters (?n - npc)\n    :precondition (and (blow_dried ?n) (not (parted ?n)))\n    :effect (parted ?n)\n  )\n\n"
    ],
    "ApplyGelControlPomade": [
        "(:action ApplyGelControlPomade\n    :parameters (?n - npc ?g - gel ?p - pomade)\n    :precondition (and (parted ?n) (not (applied ?g)) (not (applied ?p)))\n    :effect (and (applied ?g) (applied ?p))\n  )\n\n"
    ],
    "StartBraid": [
        "(:action StartBraid\n    :parameters (?n - npc)\n    :precondition (and (applied ?g) (applied ?p) (not (braiding ?n)))\n    :effect (braiding ?n)\n  )\n\n"
    ],
    "StartDutchBraid": [
        "(:action StartDutchBraid\n    :parameters (?n - npc)\n    :precondition (and (braiding ?n) (not (dutch_braiding ?n)))\n    :effect (dutch_braiding ?n)\n  )\n\n"
    ],
    "BendToIntoHalfTwice": [
        "(:action BendToIntoHalfTwice\n    :parameters (?n - npc)\n    :precondition (dutch_braiding ?n)\n    :effect (half_bent ?n)\n  )\n\n"
    ],
    "FinishWithBraid": [
        "(:action FinishWithBraid\n    :parameters (?n - npc ?b - braid)\n    :precondition (half_bent ?n)\n    :effect (and (braided ?n) (finished_braid ?b))\n  )\n\n"
    ],
    "RepeatProcess": [
        "(:action RepeatProcess\n    :parameters (?n - npc)\n    :precondition (finished_braid ?n)\n    :effect (repeated ?n)\n  )\n\n"
    ],
    "CrossBraids": [
        "(:action CrossBraids\n    :parameters (?n - npc ?b - braid)\n    :precondition (repeated ?n)\n    :effect (crossed_braids ?n ?b)\n  )\n)\n```\n\nExplanation of the PDDL actions:\n\n1. **StartBlowDriedHair**:\n   - **Parameters**: `?n - npc`\n   - **Precondition**: `not (blow_dried ?n)`\n   - **Effect**: `blow_dried ?n`\n\n2. **PartOfHair**:\n   - **Parameters**: `?n - npc`\n   - **Preconditions**: `and (blow_dried ?n) (not (parted ?n))`\n   - **Effect**: `parted ?n`\n\n3. **ApplyGelControlPomade**:\n   - **Parameters**: `?n - npc ?g - gel ?p - pomade`\n   - **Preconditions**: `and (parted ?n) (not (applied ?g)) (not (applied ?p))`\n   - **Effect**: `and (applied ?g) (applied ?p)`\n\n4. **StartBraid**:\n   - **Parameters**: `?n - npc`\n   - **Preconditions**: `and (applied ?g) (applied ?p) (not (braiding ?n))`\n   - **Effect**: `braiding ?n`\n\n5. **StartDutchBraid**:\n   - **Parameters**: `?n - npc`\n   - **Preconditions**: `and (braiding ?n) (not (dutch_braiding ?n))`\n   - **Effect**: `dutch_braiding ?n`\n\n6. **BendToIntoHalfTwice**:\n   - **Parameters**: `?n - npc`\n   - **Precondition**: `dutch_braiding ?n`\n   - **Effect**: `half_bent ?n`\n\n7. **FinishWithBraid**:\n   - **Parameters**: `?n - npc ?b - braid`\n   - **Precondition**: `half_bent ?n`\n   - **Effect**: `and (braided ?n) (finished_braid ?b)`\n\n8. **RepeatProcess**:\n   - **Parameters**: `?n - npc`\n   - **Precondition**: `finished_braid ?n`\n   - **Effect**: `repeated ?n`\n\n9. **CrossBraids**:\n   - **Parameters**: `?n - npc ?b - braid`\n   - **Precondition**: `repeated ?n`\n   - **Effect**: `crossed_braids ?n ?b`\n\nThese actions capture the steps in the task and the state changes of the entities involved, ensuring that each step logically follows the previous one."
    ],
    "PartHair": [
        "(:action PartHair\n    :parameters (?npc - person)\n    :precondition (not (parted ?npc))\n    :effect (parted ?npc)\n)\n\n"
    ],
    "GrabSmallArea": [
        "(:action GrabSmallArea\n    :parameters (?npc - person ?scissors - tool)\n    :precondition (and (parted ?npc) (not (grabbed ?npc)))\n    :effect (grabbed ?npc)\n)\n\n"
    ],
    "DivideSection": [
        "(:action DivideSection\n    :parameters (?section - hair_section)\n    :precondition (and (grabbed ?npc) (not (divided ?section)))\n    :effect (divided ?section)\n)\n\n"
    ],
    "TieStrands": [
        "(:action TieStrands\n    :parameters (?npc - person ?section - hair_section)\n    :precondition (and (divided ?section) (not (tied ?section)))\n    :effect (tied ?section)\n)\n\n"
    ],
    "AddHairToStrand": [
        "(:action AddHairToStrand\n    :parameters (?npc - person ?section - hair_section)\n    :precondition (and (tied ?section) (not (added_hair ?section)))\n    :effect (added_hair ?section)\n)\n\n"
    ],
    "TieWithSpider": [
        "(:action TieWithSpider\n    :parameters (?npc - person ?section - hair_section)\n    :precondition (added_hair ?section)\n    :effect (tied_with_spider ?section)\n)\n\n"
    ],
    "TieBraid": [
        "(:action TieBraid\n    :parameters (?npc - person ?section - hair_section)\n    :precondition (added_hair ?section)\n    :effect (tied_braid ?section)\n)\n\n"
    ],
    "BendToShapeOthersHair": [
        "(:action BendToShapeOthersHair\n    :parameters (?npc - person)\n    :precondition (tied_braid ?section)\n    :effect (shaped ?npc)\n)\n\n"
    ],
    "TwistPonytailIntoBun": [
        "(:action TwistPonytailIntoBun\n    :parameters (?bun - bun ?pony - ponytail)\n    :precondition (gathered ?pony)\n    :effect (and (twisted ?bun) (in_bun ?pony))\n)\n```\n\n### Explanation of Actions:\n\n1. **PartHair**: This action represents parting the hair down the center.\n   - Parameters: `?npc` (the person whose hair is being parted)\n   - Preconditions: The hair is not yet parted.\n   - Effects: The hair becomes parted.\n\n2. **GrabSmallArea**: This action represents grabbing a small section of hair from next to the part.\n   - Parameters: `?npc` (the person), `?scissors` (tool used to grab the hair)\n   - Preconditions: The hair is parted and not yet grabbed.\n   - Effects: The hair is grabbed.\n\n3. **DivideSection**: This action represents dividing the section of hair into two thinner strands.\n   - Parameters: `?section` (the section of hair)\n   - Preconditions: The section is grabbed and not yet divided.\n   - Effects: The section is divided.\n\n4. **TieStrands**: This action represents tying the strands into a knot.\n   - Parameters: `?npc` (the person), `?section` (the section of hair)\n   - Preconditions: The section is divided and not yet tied.\n   - Effects: The section is tied.\n\n5. **AddHairToStrand**: This action represents adding hair to each strand, just like French braiding.\n   - Parameters: `?npc` (the person), `?section` (the section of hair)\n   - Preconditions: The section is tied and not yet added hair.\n   - Effects: Hair is added to the section.\n\n6. **TieWithSpider**: This action represents tying the strands into another knot.\n   - Parameters: `?npc` (the person), `?section` (the section of hair)\n   - Preconditions: Hair is added to the section.\n   - Effects: The section is tied with a spider.\n\n7. **TieBraid**: This action represents tying the braid off with an elastic.\n   - Parameters: `?npc` (the person), `?section` (the section of hair)\n   - Preconditions: Hair is added to the section.\n   - Effects: The braid is tied.\n\n8. **BendToShapeOthersHair**: This action represents braiding the other section of hair.\n   - Parameters: `?npc` (the person)\n   - Preconditions: The braid is tied.\n   - Effects: The person's hair is shaped.\n\n9. **GatherHair**: This action represents gathering the hair into a half-up, half-down ponytail or two pigtails.\n   - Parameters: `?pony` (the ponytail)\n   - Preconditions: The ponytail is not yet gathered.\n   - Effects: The ponytail is gathered.\n\n10. **TwistPonytailIntoBun**: This action represents twisting the ponytail or pigtails into a bun.\n    - Parameters: `?bun` (the bun), `?pony` (the ponytail)\n    - Preconditions: The ponytail is gathered.\n    - Effects: The ponytail is twisted into a bun and the ponytail is in the bun."
    ]
}