[
    "(:action prepare\n   ; Universal preparation action for various tasks\n   :parameters (?entity - entity ?context - context)\n   :precondition (and (not (prepared ?entity)) (in-context ?entity ?context))\n   :effect (and (prepared ?entity) (context-changed ?context))",
    "(:action cut\n  ; General action to cut various objects with appropriate tools and conditions\n  :parameters (?npc - npc ?item - object ?tool - tool ?surface - surface)\n  :precondition (and \n                 (or (prepared ?item) \n                     (intact ?item) \n                     (squishy ?item) \n                     (too_long ?item))\n                 (or (has_tool ?npc ?tool) \n                     (not (has_tool ?npc ?tool)))\n                 (not (cut ?item)))\n  :effect (and \n           (cut ?item)\n           (or (on_cutting_board ?item ?surface)\n               (not (intact ?item))",
    "(:action remove\n  :parameters (?actor - entity ?item - object)\n  :precondition (and \n    (or (cut ?item) (contains ?item) (in_mixture ?item) (in_mold ?item) (hand_near_flame ?actor) (dirty ?item))\n    (or (not (peeled ?item)) (frozen ?item) (hardened ?item) (lit ?item) (dirty ?item))\n    (in_hand ?actor)\n  )\n  :effect (and \n    (or (peeled ?item) (not (frozen ?item))",
    "(:action add ; Add an entity to another entity or modify its state\n  :parameters (?npc - person ?item1 - entity ?item2 - entity)\n  :precondition (and (not (added ?item1 ?item2)) (available ?npc))\n  :effect (and (added ?item1 ?item2))",
    "(:action modify ; Modify the state of an entity\n  :parameters (?npc - person ?item - entity ?new_state - state)\n  :precondition (and (available ?npc) (not (in_state ?item ?new_state)))\n  :effect (and (in_state ?item ?new_state))",
    "(:action create ; Create a new entity or prepare an entity\n  :parameters (?npc - person ?new_entity - entity ?base_entity - entity ?state - state)\n  :precondition (and (available ?npc) (not (exists ?new_entity)))\n  :effect (and (exists ?new_entity) (in_state ?new_entity ?state))",
    "(:action add ; Add oil to fridge\n  :parameters (?npc - person ?oil - oil_tank ?fridge - fridge)\n  :precondition (and (available ?npc) (not (added ?oil ?fridge)))\n  :effect (added ?oil ?fridge)\n)",
    "(:action add ; Add scent to mixture\n  :parameters (?npc - person ?scent - scent ?mixture - mixture)\n  :precondition (and (available ?npc) (not (added ?scent ?mixture)))\n  :effect (added ?scent ?mixture)\n)",
    "(:action modify ; Add water to hob\n  :parameters (?npc - person ?water - water ?hob - hob)\n  :precondition (and (available ?npc) (at-temperature ?water cold) (at-fullness ?water emptier) (at-location ?water in-pipes) (at-power ?hob off))\n  :effect (and (at-temperature ?water hot) (at-fullness ?water fuller) (at-location ?water out-of-faucet) (at-power ?hob on))",
    "(:action add ; Add chocolate sauce to mixing bowl\n  :parameters (?npc - person ?chocolate - chocolate ?mixing_bowl - mixing_bowl)\n  :precondition (and (available ?npc) (at-location ?mixing_bowl empty) (at-texture ?chocolate solid))\n  :effect (and (at-location ?mixing_bowl in-bowl) (at-texture ?chocolate mixed))",
    "(:action modify ; Add scenting sauce\n  :parameters (?npc - person ?sauce - scenting_sauce)\n  :precondition (and (available ?npc) (unselected ?sauce))\n  :effect (and (selected ?sauce) (not (unselected ?sauce))",
    "(:action add ; Add ingredients to mixture\n  :parameters (?npc - person ?ingredient - ingredient ?mixture - mixture)\n  :precondition (and (available ?npc) (not (added ?ingredient ?mixture)))\n  :effect (added ?ingredient ?mixture)\n)",
    "(:action modify ; Add ingredient to candle\n  :parameters (?npc - person ?wax - wax ?crayon - crayon ?candle - candle)\n  :precondition (and (available ?npc) (melted ?wax) (broken ?crayon) (not (colored ?candle)))\n  :effect (colored ?candle)\n)",
    "(:action modify ; Stir candle\n  :parameters (?npc - person ?saucepan - saucepan)\n  :precondition (and (available ?npc) (inventory ?npc candle) (has ?npc saucepan))\n  :effect (and (melted candle) (not (inventory ?npc candle))",
    "(:action modify ; Stir wand\n  :parameters (?npc - person ?wand - wand ?candle - candle)\n  :precondition (and (available ?npc) (colored ?candle) (not (stirred ?candle)))\n  :effect (stirred ?candle)\n)",
    "(:action add ; Attach spoons to wood\n  :parameters (?npc - person ?spoon - spoon ?wood - wood)\n  :precondition (and (available ?npc) (clean ?spoon) (prepared ?wood))\n  :effect (and (attached ?spoon ?wood) (dirty ?spoon))",
    "(:action modify ; Mix ingredients for candle wall art\n  :parameters (?npc - person ?wand - wand ?candle - candle)\n  :precondition (and (available ?npc) (stirred ?candle) (not (fragrant ?candle)))\n  :effect (fragrant ?candle)\n)",
    "(:action create ; Tape papyrus\n  :parameters (?npc - person ?tarts - tarts ?papyrus - papyrus)\n  :precondition (and (available ?npc) (cooled ?wick) (not (released ?tarts)))\n  :effect (released ?tarts)\n)",
    "(:action add ; Collect candle\n  :parameters (?npc - person ?candle - candle ?location - location)\n  :precondition (and (available ?npc) (at ?npc ?location) (at ?candle ?location) (partially_used ?candle))\n  :effect (and (inventory ?npc ?candle) (not (at ?candle ?location))",
    "(:action break ; Perform a state-changing operation on an object\n  :parameters (?npc - person ?item - object ?target - object)\n  :precondition (and \n                 (not (broken ?item))\n                 (or (and (inventory ?npc ?item) (whole ?item))\n                     (and (lit ?item) (not (lit ?item)))\n                     (and (wet ?item))\n                     (and (in_cup ?npc ?target))\n                     (and (bent ?item))\n                     (and (decoration ?item painted) (wetness ?item wet))))\n  :effect (and \n           (or (broken ?item) \n               (lit ?item) \n               (dry ?item) \n               (straight ?item))",
    "(:action place\n  :parameters (?agent - agent ?item - object ?destination - location)\n  :precondition (and\n    (available ?agent)\n    (at-location ?item ?source)\n    (not (at-location ?item ?destination))\n  )\n  :effect (and\n    (at-location ?item ?destination)\n    (not (at-location ?item ?source))",
    "(:action place\n     :parameters (?user - user ?candle - candle ?jar - jar)\n     :precondition (and (available ?user) (not (in_jar ?candle ?jar)))\n     :effect (in_jar ?candle ?jar)\n   )",
    "(:action place\n     :parameters (?npc - npc ?saucepan - saucepan ?stove - stove)\n     :precondition (and (available ?npc) (inventory ?npc ?saucepan) (not (on ?saucepan ?stove)))\n     :effect (and (on ?saucepan ?stove) (not (inventory ?npc ?saucepan))",
    "(:action place\n     :parameters (?npc - npc ?loc - basement)\n     :precondition (and (available ?npc) (not (in_safe_area ?npc ?loc)))\n     :effect (and (in_safe_area ?npc ?loc))",
    "(:action place\n     :parameters (?npc - npc ?wick - wick ?holder - candle_holder)\n     :precondition (and (available ?npc) (dry ?wick) (not (in_holder ?wick ?holder)))\n     :effect (and (in_holder ?wick ?holder))",
    "(:action place\n     :parameters (?npc - npc ?candle - candle ?workbench - workbench)\n     :precondition (and (available ?npc) (not (on ?candle ?workbench)))\n     :effect (and (on ?candle ?workbench))",
    "(:action place\n     :parameters (?npc - npc ?supplies - supplies ?storage - storage)\n     :precondition (and (available ?npc) (not (in ?supplies ?storage)))\n     :effect (and (in ?supplies ?storage))",
    "(:action freeze ; Freeze an item or container\n  :parameters (?entity - entity ?item - object)\n  :precondition (and (contains ?entity ?item) (not (frozen ?entity)))\n  :effect (frozen ?entity))",
    "(:action pop ; Pop an item and update its status\n:parameters (?entity - entity ?container - container ?item - item)\n:precondition (and (contains ?container ?item) (not (contains_pop ?container)))\n:effect (and (not (contains ?container ?item))",
    "(:action get ;  Get a resource and update status\n:parameters (?npc - entity ?item - object ?loc - location ?attr - attribute ?val - value)\n:precondition (and\n  (available ?npc)\n  (at ?npc ?loc)\n  (or\n    (not (inventory ?npc ?item))\n    (not (gathered ?item))\n    (on_sale ?item)\n    (metal_sustainer ?item)\n    (has_access ?npc ?loc)\n    (not (present ?item))\n    (not (checked ?npc ?item))\n  )\n  (or\n    (at-texture ?item solid)\n    (visible ?npc)\n  )\n)\n:effect (and\n  (or\n    (inventory ?npc ?item)\n    (gathered ?item)\n    (privileged ?npc ?loc)\n    (present ?item)\n    (checked ?npc ?item)\n    (attached ?item)\n    (purchased ?item)\n    (at-texture ?item melted)\n    (invisible ?npc)\n  )",
    "(:action burn ; Burn a resource and update its status\n  :parameters (?entity - object ?resource - object)\n  :precondition (and \n    (not (burned ?resource))\n    (or \n      (and (has_wick ?resource))\n      (and (wax_poured ?resource ?entity))\n    )\n  )\n  :effect (burned ?resource)\n)",
    "(:action gather ; Gather resources and update status\n  :parameters (?entity - object ?resource - object)\n  :precondition (not (gathered ?resource))\n  :effect (gathered ?resource)\n)",
    "(:action prepare_wick ; Prepare and set the wick in the container\n  :parameters (?entity - object ?wick - object ?container - object)\n  :precondition (and (gathered ?container) (not (wick_set ?wick ?container)))\n  :effect (wick_set ?wick ?container)\n)",
    "(:action process_wax ; Measure, melt, and scent the wax\n  :parameters (?entity - object ?wax - object)\n  :precondition (and (gathered ?wax) (not (scented ?wax)))\n  :effect (scented ?wax)\n)",
    "(:action pour_wax ; Pour wax into the container\n  :parameters (?entity - object ?wax - object ?container - object)\n  :precondition (and (scented ?wax) (wick_set ?wax ?container) (not (wax_poured ?wax ?container)))\n  :effect (wax_poured ?wax ?container)\n)",
    "(:action burn ; Burn the resource (candle or wick)\n  :parameters (?entity - object ?resource - object)\n  :precondition (and \n    (not (burned ?resource))\n    (or \n      (and (has_wick ?resource))\n      (and (wax_poured ?resource ?entity))\n    )\n  )\n  :effect (burned ?resource)\n)",
    "(:action close_stuffing ; Close the candle after stuffing\n  :parameters (?item - object ?candle - object ?entity - object)\n  :precondition (and (stuffed ?item ?candle) (not (closed ?candle)))\n  :effect (closed ?candle)\n)",
    "(:action free ; Free a resource and update its status\n  :parameters (?resource - object)\n  :precondition (and (not (freed ?resource)))\n  :effect (freed ?resource))",
    "(:action decorate ;  Decorate an item and update its state\n  :parameters (?npc - person ?item - object)\n  :precondition (and (freed ?item))\n  :effect (and (decorated ?item))",
    "(:action measure ; Measure an entity and update its status\n  :parameters (?entity - object)\n  :precondition (and (gathered ?entity) (not (measured ?entity)))\n  :effect (measured ?entity)\n)",
    "(:action take\n  :parameters (?item - object ?from - location ?to - location)\n  :precondition (and (at ?item ?from) (not (at ?item ?to)))\n  :effect (and (not (at ?item ?from))",
    "(:action drink ;  Perform an action to relieve thirst and change entity's state\n  :parameters (?npc - npc)\n  :precondition (or (thirsty ?npc) (not (wet_fingers ?npc)))\n  :effect (and\n            (when (thirsty ?npc) (and (not (thirsty ?npc))",
    "(:action store ; Store an item in a location\n:parameters (?npc - entity ?location - place ?item - object)\n:precondition (and (has ?npc ?item) (accessible ?location))\n:effect (and (stored ?item ?location) (not (has ?npc ?item))",
    "(:action check\n  ; Check a resource and update task status\n  :parameters (?agent - agent ?resource - resource)\n  :precondition (and \n    (available ?agent)\n    (not (checked ?agent ?resource))\n  )\n  :effect (checked ?agent ?resource)\n)",
    "(:action wait ; Wait until a condition is met and update the status\n  :parameters (?entity - object)\n  :precondition (and\n    (or (at-time ?entity earlier) (wet ?entity))\n    (or (at-completion ?entity unfinished))\n  )\n  :effect (and\n    (or (at-time ?entity later))",
    "(:action use\n    :parameters (?actor - person ?resource - object ?context - context)\n    :precondition (and \n        (available ?actor)\n        (not (in_use ?actor ?resource ?context))\n        (condition_met ?resource ?context)  ; Abstract condition specific to the resource and context\n    )\n    :effect (and \n        (in_use ?actor ?resource ?context)\n        (update_state ?resource ?context)  ; Abstract state update specific to the resource and context\n    )\n)",
    "(:action locate ; Locate an item and update its status\n  :parameters (?agent - agent ?item - object)\n  :precondition (not (located ?item))\n  :effect (located ?item)\n)",
    "(:action practice_resource_management\n  :parameters (?agent - agent ?resource - resource)\n  :precondition (and (available ?agent) (not (managed ?agent ?resource)))\n  :effect (managed ?agent ?resource)\n)",
    "(:action cleaned ; Clean an entity and update its state\n    :parameters (?actor - agent ?entity - object)\n    :precondition (and (dirty ?entity))\n    :effect (and (clean ?entity) (not (dirty ?entity))",
    "(:action wick_mold\n   :parameters (?w - wick ?m - mold)\n   :precondition (and (not (wicked ?m)))\n   :effect (and (wicked ?m) (centered ?w ?m))",
    "(:action transform\n   :parameters (?agent - entity ?target - entity ?state_change - state)\n   :precondition (and (not (in_state ?target ?state_change)))\n   :effect (and (in_state ?target ?state_change) (processed ?agent ?target))"
]