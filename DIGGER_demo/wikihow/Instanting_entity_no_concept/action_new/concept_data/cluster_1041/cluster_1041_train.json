[
    "(:action create ; General action to create or modify an entity's state\n  :parameters (?npc - entity ?item - object ?context - context)\n  :precondition (and \n                (available ?npc)\n                (not (created ?npc ?item ?context)))\n  :effect (and \n          (created ?npc ?item ?context)\n          ;; Specific effects based on item and context\n          (when (structured_approach ?item) (structured_approach ?npc))",
    "(:action create_structibility\n    :parameters (?npc - entity ?item - structibility ?context - context)\n    :precondition (and (available ?npc) (not (structured_approach ?npc)))\n    :effect (structured_approach ?npc)\n  )",
    "(:action create_journal\n    :parameters (?npc - entity ?item - journal ?context - therapy_session)\n    :precondition (and (available ?npc) (journal_entry ?npc) (attended_therapy ?npc ?context))\n    :effect (and (journal_created ?item) (journal_for_therapy ?item))",
    "(:action create_location\n    :parameters (?npc - entity ?item - location ?context - new_location)\n    :precondition (and (available ?npc) (at ?npc ?item))\n    :effect (and (not (at ?npc ?item))",
    "(:action listen ; Universal listening action\n  :parameters (?npc - npc ?item - object ?context - context)\n  :precondition (and (not (listened ?npc ?item))\n                     (or (and (topic_chosen ?npc ?context)\n                              (not (notes_taken ?npc)))\n                         (and (at ?npc ?context)\n                              (broadcasting ?item ?context))\n                         (and (journal_kept ?npc)\n                              (not (listened_to_family ?npc)))\n                         (and (dedicated ?npc journaling))\n                         (and (status ?item in_progress))\n                         (and (at ?npc library)\n                              (library_has_books ?context))))\n  :effect (and (listened ?npc ?item)\n               (or (notes_taken ?npc)\n                   (listened_to_family ?npc)\n                   (observing ?npc)\n                   (status ?item completed)\n                   (checked_library ?item)\n                   (checked_journal_items ?item))",
    "(:action use ; Utilize a resource or perform a task with an item\n    :parameters (?npc - person ?item - object)\n    :precondition (and (available ?npc) (not (used ?npc ?item)))\n    :effect (and (used ?npc ?item))",
    "(:action use\n    :parameters (?npc - person)\n    :precondition (and (notes_taken ?npc) (not (used ?npc ?visual_prompts)))\n    :effect (used ?npc ?visual_prompts)\n)",
    "(:action use\n    :parameters (?npc - person ?j - journal)\n    :precondition (and (carrying ?npc ?j) (not (used ?npc ?writing_prompt)))\n    :effect (used ?npc ?writing_prompt)\n)",
    "(:action use\n    :parameters (?npc - person)\n    :precondition (and (thoughts_organized ?npc) (word_count_set ?track) (not (used ?npc ?grammar)))\n    :effect (used ?npc ?grammar)\n)",
    "(:action use\n    :parameters (?npc - person ?track - track)\n    :precondition (and (at ?npc ?track) (full_text_available ?track) (not (used ?npc ?full_text)))\n    :effect (used ?npc ?full_text)\n)",
    "(:action use\n    :parameters (?npc - person ?library - library)\n    :precondition (and (at ?npc ?library) (interlibrary_loan_available ?library) (not (used ?npc ?interlibrary_loan)))\n    :effect (used ?npc ?interlibrary_loan)\n)",
    "(:action evaluate ; Evaluate a resource and update status\n    :parameters (?npc - person ?resource - object ?aspect - aspect ?time - time-period ?goal - goal)\n    :precondition (and\n        (journal_entry ?npc)\n        (expressed_feelings ?npc)\n        (journal_kept ?npc)\n        (journal_in_use ?resource)\n        (time_to_review ?time)\n        (goal_set ?goal)\n        (prayer_written ?npc)\n        (not (evaluated ?npc ?resource ?aspect))\n    )\n    :effect (and\n        (evaluated_actions ?npc)\n        (evaluated_thoughts ?npc)\n        (evaluated_emotions ?npc)\n        (journal_reviewed ?resource)\n        (entries_organized ?resource)\n        (evaluated ?npc ?resource ?aspect)\n    )",
    "(:action go ; Detail a person's interaction with an item and update its status\n    :parameters (?p - person ?item - object)\n    :precondition (and (interaction_required ?item) (has_entry ?p))\n    :effect (and (detailed_entry ?p ?item))",
    "(:action think_of_journal_as_friend\n    :parameters (?p - person ?j - journal)\n    :precondition (and (journal_for_therapy ?j) (writing_prompts ?p ?j))\n    :effect (and (friendship_with_journal ?p ?j))",
    "(:action think_of_solution_to_problem\n    :parameters (?p - person ?problem - issue)\n    :precondition (and (problem_present ?problem) (thinking_cap ?p))\n    :effect (and (solved ?problem ?p))",
    "(:action think ; Think about a resource and update mental state\n  :parameters (?p - person ?item - object)\n  :precondition (and (can_think ?p) (relevant ?item))\n  :effect (and (thought_about ?p ?item))",
    "(:action think ; Think about a resource and update mental state\n  :parameters (?p - person ?item - object)\n  :precondition (and (can_think ?p) (relevant ?item))\n  :effect (thought_about ?p ?item)\n)",
    "(:action read\n    ; Description: Perform reading-related tasks, update state, and reflect on entries.\n    :parameters (?npc - person ?item - object ?location - location)\n    \n    :precondition (and\n        (at ?npc ?location)\n        (or (inventory ?npc ?item) (friendship_with_journal ?npc ?item) (journal_for_therapy ?item) (reading ?npc ?item))\n    )\n    \n    :effect (and\n        (or\n            (reading ?npc ?item)\n            (slowing ?npc ?item)\n            (journal_read ?npc ?item)\n            (reflected_on_entries ?npc ?item)\n            (knowledge ?npc)\n        )",
    "(:action keep ; Keep an item in a specified location, update tracking status, or ensure consistency\n  :parameters (?npc - person ?item - object ?location - location ?track - track)\n  :precondition (and \n                  (or (inventory ?npc ?item)\n                      (carrying ?npc ?item)\n                      (at ?item on_counter)\n                      (at ?npc ?location)\n                      (not (track_consistent ?track)) \n                      (location ?track present))\n                  (or (not (inventory ?npc ?item))\n                      (not (note_kept ?item))\n                      (not (track_consistent ?track))\n                      (not (at ?item on_counter))))\n  :effect (and \n            (or (at ?item ?location)\n                (note_kept ?item)\n                (track_consistent ?track)\n                (inventory ?npc ?item))",
    "(:action write ; Write information to a resource\n  :parameters (?npc - npc ?resource - object ?target - object)\n  :precondition (and \n    (or \n      (inventory ?npc ?resource)\n      (journal_kept ?npc)\n    )\n    (inventory ?npc ?target)\n    (or \n      (not (written ?resource ?target))\n      (not (page_numbers_written ?resource ?target))\n      (not (prayer_written ?npc))\n    )\n  )\n  :effect (and \n    (or \n      (written ?resource ?target)\n      (page_numbers_written ?resource ?target)\n      (prayer_written ?npc)\n    )",
    "(:action take ; Take an item and perform an associated task\n  :parameters (?npc - person ?item - object ?task - task)\n  :precondition (and \n                 (inventory ?npc ?item) \n                 (not (completed ?npc ?task))\n                 (or (and (task_type ?task note-taking) (reading ?npc ?item))\n                     (and (task_type ?task photography) (charged ?item))\n                     (and (task_type ?task inventory) (location ?item on_counter))\n                     (and (task_type ?task carrying) (not (carried ?item))))\n  :effect (and \n           (completed ?npc ?task)\n           (or (and (task_type ?task note-taking) (notes_taken ?npc ?item))",
    "(:action reflect ; Reflect on an item and record thoughts\n    :parameters (?npc - person ?item - object ?record - record)\n    :precondition (and (inventory ?npc ?item) (inventory ?npc ?record) (completed ?item))\n    :effect (and (reflection_recorded ?record ?item) (reflecting ?npc))",
    "(:action start\n  ; General action for starting or initiating various tasks\n  :parameters (?npc - person ?item - object ?location - location ?context - context)\n  :precondition (and \n    (or \n      (and (inventory ?npc ?item) (at ?npc home)) ; for starting a journal\n      (and (at ?npc ?location) (observing ?npc)) ; for starting with location and track\n      (knowledge ?context) ; for starting a fire in a garden center\n      (carrying ?npc ?item) ; for finishing a journal\n    )\n  )\n  :effect (and \n    (or \n      (carrying ?npc ?item) ; for starting a journal\n      (recorded ?npc ?context) ; for starting with location and track\n      (fire_started ?context) ; for starting a fire in a garden center\n      (journal_finished ?item) ; for finishing a journal\n    )\n  )",
    "(:action record ; Record an observation or data in a specified medium\n  :parameters (?entity - agent ?item - object)\n  :precondition (and (carrying ?entity ?item))\n  :effect (recorded ?entity ?item)\n)",
    "(:action attach ; Attach an item to a resource and update status\n  :parameters (?npc - npc ?item - object ?resource - object)\n  :precondition (and (carrying ?npc ?resource) (inventory ?npc ?item))\n  :effect (and (attached ?resource ?item) (not (inventory ?npc ?item))",
    "(:action draw ; Draw in a resource and update its content\n  :parameters (?actor - person ?resource - object)\n  :precondition (and (carrying ?actor ?resource))\n  :effect (drawing_added ?resource)\n)",
    "(:action study ; Study a resource and update task status\n:parameters (?p - person ?resource - object)\n:precondition (and (not (studied ?p ?resource)))\n:effect (studied ?p ?resource))",
    "(:action dedicate_time :parameters (?npc - npc ?activity - activity) :precondition (and (at ?npc ?loc)) :effect (and (dedicated ?npc ?activity))",
    "(:action dedicate ; Dedicate a resource to an activity and update the status\n  :parameters (?npc - person ?activity - object)\n  :precondition (and (available ?npc) (at ?npc ?loc))\n  :effect (dedicated ?npc ?activity)\n)",
    "(:action set ; Set a parameter or condition for an entity\n  :parameters (?npc - entity ?param - parameter ?value - value)\n  :precondition (and (has_precondition ?npc ?param) (not (set ?npc ?param)))\n  :effect (and (set ?npc ?param) (value_assigned ?param ?value))",
    "(:action stay ;  Ensure entity stays in a specific state\n  :parameters (?npc - npc)\n  :precondition (and (visibility ?npc visible))\n  :effect (visibility ?npc invisible)\n)",
    "(:action break ;  Perform a state change on an entity to progress towards a goal state\n  :parameters (?npc - person ?item - object ?location - place)\n  :precondition (and \n                  (or (inventory ?npc ?item) \n                      (visible ?npc ?location) \n                      (present ?item ?location)\n                      (jerky ?item))\n                  (not (goal_state ?npc)))\n  :effect (and \n            (or (not (writer_block ?npc))",
    "(:action ask_library_help_desk\n      :parameters (?npc - npc ?library - library)\n      :precondition (and (at ?npc ?library) (help_desk_available ?library))\n      :effect (and (asked_help_desk ?library))",
    "(:action use_interlibrary_loan\n      :parameters (?npc - npc ?library - library ?book - book)\n      :precondition (and (at ?npc ?library) (interlibrary_loan_available ?library))\n      :effect (and (requested_interlibrary_loan ?npc ?book))",
    "(:action ask ; Ask for assistance or request a resource\n  :parameters (?npc - npc ?entity - object)\n  :precondition (and (at ?npc ?entity) (available ?entity))\n  :effect (requested ?npc ?entity))",
    "(:action divide ; Divide a resource into sections\n  :parameters (?entity - agent ?resource - divisible)\n  :precondition (and (prepared ?entity))\n  :effect (divided ?resource))",
    "(:action share\n    :parameters (?npc - person ?item - object)\n    :precondition (and (available ?npc) (not (shared ?npc ?item)))\n    :effect (shared ?npc ?item)\n)",
    "(:action journal ; Record a feeling or thought and update emotional state\n  :parameters (?p - person ?s - state)\n  :precondition (and (feeling ?p) (not (journal_entry ?p ?s)))\n  :effect (and (journal_entry ?p ?s) (expressed_feelings ?p ?s))",
    "(:action reread ; Reread an item and update the status\n    :parameters (?npc - person ?item - object ?location - location)\n    :precondition (and (at ?npc ?location) (inventory ?npc ?item) (not (rereading ?npc ?item)))\n    :effect (and (rereading ?npc ?item))",
    "(:action be ;  Transform the state of an entity to a desired property\n  :parameters (?npc - person ?property - property)\n  :precondition (and (not (?property ?npc)))\n  :effect (and (?property ?npc))",
    "(:action revisit\n  :parameters (?entity - entity ?resource - resource ?task - task)\n  :precondition (and\n                  (available ?entity)\n                  (not (completed ?entity ?task))\n                  (knowledge ?entity) ; Entity must have relevant knowledge\n                )\n  :effect (and\n            (completed ?entity ?task) ; Mark the task as completed\n            (revisited ?entity ?resource) ; Entity has revisited the resource\n            (observed ?entity ?resource) ; Entity has made new observations\n            (recorded ?entity ?task) ; Entity has recorded the task\n          )\n)",
    "(:action proofread ; Proofread a resource and update its status\n  :parameters (?npc - person ?entry - document)\n  :precondition (and (thoughts_organized ?npc) (word_count_set ?entry) (grammar_checked ?npc) (not (proofread ?npc ?entry)))\n  :effect (proofread ?npc ?entry)\n)",
    "(:action putobjectinreceptacle ; Place an item into a receptacle after performing necessary checks\n  :parameters (?agent - person ?item - object ?receptacle - location)\n  \n  :precondition (and \n    (proofread ?agent)\n    (not (in_receptacle ?item))\n    (thoughts_organized ?agent)\n    (word_count_set ?item)\n    (grammar_checked ?agent)\n  )\n  \n  :effect (and \n    (in_receptacle ?item)\n  )"
]