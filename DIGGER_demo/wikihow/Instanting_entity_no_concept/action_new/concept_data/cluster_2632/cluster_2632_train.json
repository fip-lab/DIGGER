[
    "(:action cook\n  :parameters (?agent - entity ?item - entity ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (at ?item ?location)\n    (not (cooked ?item))\n  )\n  :effect (and \n    (cooked ?item)\n    (not (raw ?item))",
    "(:action prepare\n  :parameters (?agent - entity ?item - entity ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (inventory ?agent ?item)\n    (not (processed ?item))\n  )\n  :effect (and \n    (processed ?item)\n    (not (inventory ?agent ?item))",
    "(:action make\n  :parameters (?agent - entity ?item - entity ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (not (created ?item))\n  )\n  :effect (and \n    (created ?item)\n  )",
    "(:action combine\n  :parameters (?agent - entity ?item1 - entity ?item2 - entity ?result - entity ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (inventory ?agent ?item1)\n    (inventory ?agent ?item2)\n    (not (combined ?item1 ?item2 ?result))\n  )\n  :effect (and \n    (combined ?item1 ?item2 ?result)\n    (not (inventory ?agent ?item1))",
    "(:action heat\n  :parameters (?agent - entity ?item - entity ?appliance - appliance ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (at ?item ?appliance)\n    (heated ?appliance)\n  )\n  :effect (and \n    (heated ?item)\n  )",
    "(:action mix\n  :parameters (?agent - entity ?item - entity ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (not (mixed ?item))\n  )\n  :effect (and \n    (mixed ?item)\n  )",
    "(:action finish\n  :parameters (?agent - entity ?item - entity ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (cooked ?item)\n  )\n  :effect (and \n    (finished ?item)\n  )",
    "(:action serve\n  :parameters (?agent - entity ?meal - entity ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (finished ?meal)\n    (not (served ?meal))\n  )\n  :effect (and \n    (served ?meal)\n  )",
    "(:action boil ; Universal action to boil, flatten, cook, toast, or defrost an item\n    :parameters (?npc - person ?item - object ?container - tool ?location - place)\n    :precondition (and \n        (inventory ?npc ?item) \n        (at ?container ?location) \n        (not (processed ?item))\n        (or (and (type ?item meat) (heated ?container))\n            (and (type ?item mixture) (at ?item freezer) (frozen ?item))\n            (and (type ?item toast) (untreated ?item))\n            (and (type ?item patties) (clean ?container))))\n    :effect (and \n        (processed ?item)\n        (or (and (type ?item meat) (flattened ?item) (in-container ?item ?container))",
    "(:action finish\n  :parameters (?p - player ?item - object ?loc - location ?state_before - state ?state_after - state)\n  :precondition (and (at ?p ?loc) (?state_before ?item))\n  :effect (and (?state_after ?item) (not (?state_before ?item))",
    "(:action place\n  ;; Place an item in a specified location or container and update its state\n  :parameters (?actor - agent ?item - object ?target - object ?loc - location)\n  :precondition (and\n    (available ?actor)\n    (or (and (ingredient ?item) (tool ?target) (at ?item ?loc) (at-tool ?target ?loc))\n        (and (beef ?item) (stove_knob ?target) (seasoned ?item) (fire ?target))\n        (and (burger ?item) (cooked ?item) (at-tool ?item ?loc))\n        (and (flattened ?item) (in-pan ?item))\n        (and (chilled ?item))\n        (and (food ?item) (container ?target) (full ?target)))\n  )\n  :effect (and\n    (or (and (in ?item ?target) (not (at ?item ?loc))",
    "(:action choose ; Choose an item and update its state\n  :parameters (?actor - agent ?item - object ?loc - location ?new_loc - location)\n  :precondition (and (at ?item ?loc) (not (chosen ?actor ?item)))\n  :effect (and \n            (chosen ?actor ?item)\n            (not (at ?item ?loc))",
    "(:action add ; Add an ingredient to a container and mix.\n    :parameters (?entity - entity ?container - container ?tool - tool ?loc - location)\n    :precondition (and\n        (at ?entity ?loc)\n        (at-tool ?tool ?loc)\n        (not (in ?entity ?container))\n        (or (empty ?container) (at_location ?entity in_drawer))\n        (or (power ?tool off) (composition ?tool isolated))\n    )\n    :effect (and\n        (in ?entity ?container)\n        (not (at ?entity ?loc))",
    "(:action chill\n  :parameters (?p - player ?item - object)\n  :precondition (and (inventory ?p ?item) (not (chilled ?item)))\n  :effect (and (chilled ?item) (not (inventory ?p ?item))",
    "(:action pull ; Pull an entity to change its state\n  :parameters (?actor - agent ?entity - item)\n  :precondition (and (formed ?entity) (not (adjusted ?entity)))\n  :effect (adjusted ?entity))",
    "(:action check ; Check a resource and update its status\n  :parameters (?agent - agent ?entity - entity)\n  :precondition (and (available ?agent) (not (checked ?agent ?entity)))\n  :effect (checked ?agent ?entity)\n)",
    "(:action free ; Free an item from an actor's possession and place it in a designated location\n  :parameters (?actor - entity ?item - object ?location - place)\n  :precondition (and (inventory ?actor ?item) (not (at ?item ?location)))\n  :effect (and (at ?item ?location) (not (inventory ?actor ?item))",
    "(:action remove ; Remove an item from a location and update its state\n  :parameters (?p - person ?item - object ?loc - location)\n  :precondition (and (at ?p ?loc) (at ?item ?loc) (ready_for_removal ?item))\n  :effect (and (inventory ?p ?item) (not (at ?item ?loc))",
    "(:action eat\n    :parameters (?p - player ?b - burger_patties ?g - grill ?k - stove_knob ?f - fridge)\n    :precondition (and \n        (at ?p ?f)           ; Player is at the fridge\n        (in_fridge ?b ?f)    ; Burger patties are in the fridge\n        (not (inventory ?p ?b)) ; Player does not have patties in inventory\n        (not (cooked ?b))    ; Patties are not cooked\n        (at ?p ?g)           ; Player is at the grill\n        (off ?g)             ; Grill is off\n        (off ?k)             ; Stove knob is off\n    )\n    :effect (and \n        (inventory ?p ?b)    ; Player has patties in inventory\n        (not (in_fridge ?b ?f))",
    "(:action serve\n    :parameters (?food - entity ?container - entity ?new_container - entity)\n    :precondition (and\n      (at_location ?food ?container)\n      (temperature ?food hot)\n    )\n    :effect (and\n      (not (at_location ?food ?container))"
]