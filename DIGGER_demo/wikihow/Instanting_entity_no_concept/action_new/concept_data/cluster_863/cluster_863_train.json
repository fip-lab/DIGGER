[
    "(:action freeze ; Freeze an item to change its state\n    :parameters (?actor - agent ?item - object)\n    :precondition (and (not (frozen ?item)))\n    :effect (frozen ?item)\n)",
    "(:action wash\n  :parameters (?p - person ?item - object ?substance - substance ?tool - tool)\n  :precondition (and \n    (or (inventory ?p ?item) (at ?p bathroom))\n    (or (composition ?item frozen) (clean ?item) (wet ?item))\n    (or (inventory ?p ?tool) (has_in_hand ?p ?substance))\n    (or (test_patch ?p) (cream_applied ?p) (goggles_available ?substance) (vinegar_in_container ?substance) (water_in_container ?substance))\n  )\n  :effect (and \n    (or (composition ?item scraped) (dry ?item) (clean ?p) (clean ?item) (conditioned ?item) (hair_trimmed ?p) (slime_loosened ?p))",
    "(:action remove\n  :parameters (?entity - entity ?item - item ?tool - tool)\n  :precondition (and \n    (has_item ?entity ?item) \n    (available ?tool)\n  )\n  :effect (and \n    (removed_item ?entity ?item) \n    (not (has_item ?entity ?item))",
    "(:action remove\n     :parameters (?npc - npc ?item - wick ?tool - hand)\n     :precondition (and (has_item ?npc ?item) (available ?tool))\n     :effect (and (removed_item ?npc ?item) (not (has_item ?npc ?item))",
    "(:action remove\n     :parameters (?a - armpit ?item - wax ?tool - oil)\n     :precondition (and (has_item ?a ?item) (available ?tool))\n     :effect (and (removed_item ?a ?item) (not (has_item ?a ?item))",
    "(:action remove\n     :parameters (?p - person ?item - slime ?tool - hand)\n     :precondition (and (has_item ?p ?item) (available ?tool))\n     :effect (and (removed_item ?p ?item) (not (has_item ?p ?item))",
    "(:action examine ; Examine an entity and update its state\n  :parameters (?agent - person ?entity - object)\n  :precondition (and (focused_on_task ?agent) (clean ?entity))\n  :effect (and (examined ?agent ?entity) (not (focused_on_task ?agent))",
    "(:action make ; General action to transform the state of an entity\n  :parameters (?a - entity ?b - resource ?c - condition)\n  :precondition (and \n    (in_state ?a ?b) ; Entity ?a is currently in state ?b\n    (requires ?a ?c) ; Entity ?a requires condition ?c to transform\n  )\n  :effect (and \n    (transformed ?a ?c) ; Entity ?a has been transformed to meet condition ?c\n    (not (requires ?a ?c))",
    "(:action plan\n    :parameters (?entity - object ?state - state ?target_state - state)\n    :precondition (and (not (in_state ?entity ?target_state)) (in_state ?entity ?state))\n    :effect (and (not (in_state ?entity ?state))",
    "(:action wet_dry ; Wet or dry an entity\n  :parameters (?agent - entity ?location - place ?tool - object)\n  :precondition (and \n      (or (at ?agent ?location) (not (at ?agent ?location)))\n      (or (wet ?agent) (not (wet ?agent)))\n      (or (shaved ?agent) (not (shaved ?agent)))\n      (or (wet ?tool) (not (wet ?tool)))\n  )\n  :effect (and \n      (when (and (at ?agent ?location) (not (wet ?agent))",
    "(:action gather ; Gather a resource and update the entity's state\n  :parameters (?npc - agent ?location - place ?resource - item ?condition - condition)\n  :precondition (and (at ?npc ?location) (?condition ?npc ?resource))\n  :effect (gathered ?npc ?resource))",
    "(:action wait ; Wait for a condition and update the entity's state\n  :parameters (?npc - agent ?location - place ?status - state)\n  :precondition (and (at ?npc ?location) (in_state ?npc waiting) (not (in_state ?npc ?status)))\n  :effect (and (in_state ?npc ?status) (not (in_state ?npc waiting))",
    "(:action maintain\n  :parameters (?npc - agent ?item - object)\n  :precondition (and \n    (at ?npc location) \n    (or (and (location ?npc bathroom) (not (maintained ?npc)))\n        (and (location ?npc shelter) (visible ?npc)))\n    (or (and (at ?npc bathroom) (moisturized ?npc))\n        (and (at ?npc shelter) (bare ?decoration)))\n    (or (and (has ?npc ?item) (not (applied ?item ?npc))))\n  )\n  :effect (and \n    (or (and (location ?npc bathroom) (maintained ?npc))",
    "(:action take ; Take an item to modify its state or transform the entity\n    :parameters (?entity - entity ?item - item)\n    :precondition (and (available ?entity) (not (taken ?entity ?item)))\n    :effect (and (taken ?entity ?item))",
    "(:action use\n    :parameters (?p - person ?r - resource)\n    :precondition (and\n        (available ?r)\n        (not (used ?r ?p))\n        (precondition_state ?p ?r)\n    )\n    :effect (and\n        (used ?r ?p)\n        (effect_state ?p ?r)\n        (not (available ?r))",
    "(:action chip ; Modify or remove an item from a state\n    :parameters (?a - person ?item - object ?tool - tool ?state_before - state ?state_after - state)\n    :precondition (and \n        (in_state ?item ?state_before) ; The item is in the initial state\n        (requires_tool ?item ?tool) ; The tool is required for the action\n    )\n    :effect (and \n        (not (in_state ?item ?state_before))",
    "(:action drink ;  Drink a liquid and update hydration status\n:parameters (?npc - person ?liquid - liquid)\n:precondition (and (not (hydrated ?npc)) (available ?liquid))\n:effect (hydrated ?npc)\n)",
    "(:action add ; Add an item and update its status\n  :parameters (?entity - object ?item - object)\n  :precondition (and (available ?entity) (not (used ?item)))\n  :effect (used ?item)\n)",
    "(:action shave\n    :parameters (?person - agent ?tool - object)\n    :precondition (and (prepared ?person) (not (shaved ?person)))\n    :effect (and (shaved ?person) (used ?tool))",
    "(:action transform_state ; Transform the state of an entity\n  :parameters (?entity - object ?attribute - attribute)\n  :precondition (and (not (state_changed ?entity ?attribute)))\n  :effect (state_changed ?entity ?attribute)\n)",
    "(:action transform_entity_state\n  ; Universal action to check, modify, or create resources and update task status\n  :parameters (?actor - person ?entity - object)\n  :precondition (and (available ?actor) (not (transformed ?actor ?entity)))\n  :effect (transformed ?actor ?entity)\n)",
    "(:action run_fingers_through_hair ;  Perform an action to change the state of hair\n    :parameters (?p - person ?h - hair ?w - wax)\n    :precondition (and (combed ?h) (wax_warmed ?w) (not (tousled ?h)))\n    :effect (tousled ?h)\n)",
    "(:action modify_state\n  :parameters (?entity - object ?attribute - attribute ?condition - condition ?effect - effect)\n  :precondition (and (?condition ?entity ?attribute))\n  :effect (and (?effect ?entity ?attribute))",
    "(:action AddTextureToPiece\n  :parameters (?p - person ?h - hair ?w - wax ?ws - workstation)\n  :precondition (and \n                   (not (combed ?h)) ; for CombHairWithDryWicks\n                   (not (warmed ?w)) ; for WarmPeaSizedWax\n                   (combed ?h) ; for RunFingersThroughHair\n                   (warmed ?w) ; for RunFingersThroughHair\n                   (not (tousled ?h)) ; for RunFingersThroughHair\n                   (tousled ?h) ; for CreateAddPeaSizeToVolume\n                   (not (volume_added ?h)) ; for CreateAddPeaSizeToVolume\n                   (volume_added ?h) ; for AddTextureToPiece\n                   (not (texture_added ?h)) ; for AddTextureToPiece\n                )\n  :effect (and \n            (combed ?h) ; for CombHairWithDryWicks\n            (warmed ?w) ; for WarmPeaSizedWax\n            (tousled ?h) ; for RunFingersThroughHair\n            (volume_added ?h) ; for CreateAddPeaSizeToVolume\n            (texture_added ?h) ; for AddTextureToPiece\n          )\n)",
    "(:action purchase ; Purchase an item from a location and update ownership\n  :parameters (?agent - person ?item - object ?from_location - place ?to_location - place)\n  :precondition (and (not (has ?agent ?item)) (location ?item ?from_location))\n  :effect (and (has ?agent ?item) (not (location ?item ?from_location))",
    "(:action add_to_machine ; Add an item to a machine and update the state\n    :parameters (?p - person ?item - object ?machine - machine)\n    :precondition (and (has ?p ?item) (not (in_machine ?item ?machine)))\n    :effect (in_machine ?item ?machine)\n)",
    "(:action apply\n    :parameters (?agent - person ?material - item ?target - object)\n    :precondition (and (prepared ?material) (not (applied ?material ?target)))\n    :effect (applied ?material ?target)\n)",
    "(:action ScoopWax ; Generic action to modify the state of an entity\n  :parameters (?entity - entity ?state - state)\n  :precondition (and (not (has_state ?entity ?state)))\n  :effect (has_state ?entity ?state)\n)",
    "(:action RubWax\n    :parameters (?npc - npc)\n    :precondition (wax_on_fingers ?npc)\n    :effect (wax_rubbed ?npc)\n)",
    "(:action RubWax ; Rub wax to achieve a desired state\n    :parameters (?entity - actor ?substance - material)\n    :precondition (applied ?substance ?entity)\n    :effect (transformed ?substance ?entity)\n)",
    "(:action RestyleWax ; Restyle an item and update its status\n  :parameters (?p - person ?item - object)\n  :precondition (and (has ?p ?item) (not (restyled ?item)))\n  :effect (restyled ?item)\n)",
    "(:action WashWax\n    :parameters (?npc - npc ?p - person ?w - wand ?ct - covering_tracks)\n    :precondition (and \n        (or \n            (not (has_wand ?p ?w)) \n            (at_store ?w)\n        ) \n        (or \n            (not (in_hair_machine ?w)) \n            (has_wand ?p ?w)\n        ) \n        (or \n            (not (has_wax ?npc)) \n            (on_countertop ?ct)\n        ) \n        (or \n            (not (has_wax_fingers ?npc)) \n            (has_wax ?npc)\n        ) \n        (or \n            (not (wax_rubbed ?npc)) \n            (has_wax_fingers ?npc)\n        )\n    )\n    :effect (and \n        (or \n            (has_wand ?p ?w) \n            (not (at_store ?w))",
    "(:action apply ; Apply a resource to an entity and update task status\n  :parameters (?actor - agent ?resource - object)\n  :precondition (and \n                  (inventory ?actor ?resource) \n                  (not (applied ?actor ?resource))\n                  (or \n                    (at ?actor bathroom) \n                    (pinch_taken ?actor ?resource) \n                    (hair_pulled ?actor)))\n  :effect (and (applied ?actor ?resource))",
    "(:action in_test_patch\n     :parameters (?npc - agent)\n     :precondition (and (at ?npc bathroom) (waiting ?npc))\n     :effect (test_patch ?npc)\n   )",
    "(:action in\n  :parameters (?entity - agent ?location - place ?state - state ?task - task)\n  :precondition (and (at ?entity ?location) (?state ?entity))\n  :effect (?task ?entity)\n)",
    "(:action massage ;  Perform a massage action on an entity with a given item\n  :parameters (?u - person ?item - object ?target - entity)\n  :precondition (and (has_in_hand ?u ?item) (on ?item ?target))\n  :effect (and (loosened ?target) (not (on ?item ?target))",
    "(:action SearchForWax\n       :parameters (?npc - person ?location - place)\n       :precondition (not (has_wax ?npc))\n       :effect (has_wax ?npc)\n   )",
    "(:action SearchForResource ; Search for a specific resource and update the status of the search\n    :parameters (?npc - person ?resource - object ?location - place)\n    :precondition (and (not (has_resource ?npc ?resource)) (in_location ?npc ?location))\n    :effect (has_resource ?npc ?resource)\n)",
    "(:action HeatWax\n    :parameters (?npc - person ?w - wax)\n    :precondition (and (has_wax ?npc) (not (melted ?w)))\n    :effect (melted ?w)\n)",
    "(:action transform_state ; Universal action to transform the state of an entity\n    :parameters (?actor - person ?entity - object ?initial_state - state ?final_state - state)\n    :precondition (and (has ?actor ?entity) (not (?final_state ?entity)))\n    :effect (and (?final_state ?entity) (not (?initial_state ?entity))",
    "(:action PlaceClothStrip\n    :parameters (?npc - person ?c - cloth_strip ?l - leg)\n    :precondition (and (not (on_leg ?c)) (applied ?w ?l))\n    :effect (on_leg ?c)\n)",
    "(:action apply\n    :parameters (?npc - person ?resource - object ?target - entity)\n    :precondition (and (available ?npc) (not (applied ?resource ?target)))\n    :effect (applied ?resource ?target)\n)",
    "(:action PullClothStrip ; Pull a cloth strip and update the leg's state\n    :parameters (?npc - person ?c - object ?l - object)\n    :precondition (on ?c ?l)\n    :effect (and (not (on ?c ?l))",
    "(:action soothe_skin ; Soothe skin after performing a task\n  :parameters (?npc - person ?area - body_part)\n  :precondition (waxed ?area)\n  :effect (soothed ?area)\n)",
    "(:action LayOutTowel ; Lay out a towel in a specified location\n    :parameters (?item - object ?location - place)\n    :precondition (and (not (laid_out ?item)) (clean ?item) (dry ?item))\n    :effect (and (laid_out ?item) (location ?item ?location))",
    "(:action SitComfortably\n  :parameters (?npc - person ?item - object)\n  :precondition (and (available ?npc) (not (sitting ?npc)) (comfortable ?npc))\n  :effect (and (sitting ?npc) (checked ?npc ?item))",
    "(:action transform_state\n  ; Transform the state of an entity\n  :parameters (?entity - object ?initial_state - state ?final_state - state)\n  :precondition (and (not (?final_state ?entity)) (?initial_state ?entity))\n  :effect (and (?final_state ?entity) (not (?initial_state ?entity))",
    "(:action transform_state\n  :parameters (?s - strip ?initial_state - (cold) ?final_state - (warmed))\n  :precondition (and (not (warmed ?s)) (cold ?s))\n  :effect (and (warmed ?s) (not (cold ?s))",
    "(:action PeelStrips\n    :parameters (?npc - person ?item - strip)\n    :precondition (and (not (peeled ?item)) (warmed ?item))\n    :effect (and (peeled ?item) (location ?item on_towel))",
    "(:action ApplyStripToSkin ;  Apply a strip to a person's skin and update its status\n  :parameters (?npc - person ?strip - strip)\n  :precondition (and (peeled ?strip) (not (applied ?strip)))\n  :effect (applied ?strip)\n)",
    "(:action ApplyStripToSkin ;  Apply a strip to a person's skin and update its status\n  :parameters (?npc - person ?item - object)\n  :precondition (and (peeled ?item) (not (applied ?item)))\n  :effect (applied ?item)\n)",
    "(:action RubStripOnSkin ; Rub a strip on a person's skin and update task status\n  :parameters (?npc - person ?s - strip)\n  :precondition (and (applied ?s) (not (rubbed ?s)))\n  :effect (rubbed ?s)\n)",
    "(:action PullStripOff ; Remove a strip and update its state\n  :parameters (?npc - person ?item - object)\n  :precondition (and (prepared ?item) (not (removed ?item)))\n  :effect (removed ?item)\n)",
    "(:action GraspEndStrip ; Grasp and update the status of an item\n    :parameters (?npc - person ?item - object)\n    :precondition (and (available ?npc) (not (checked ?npc ?item)) (pulled ?item) (not (grasped ?item)))\n    :effect (and (checked ?npc ?item) (grasped ?item))",
    "(:action apply_wax_strips ; Apply wax strips to a person and update their status\n  :parameters (?a - person ?strip - object)\n  :precondition (and (available ?a) (not (wax_applied ?a)))\n  :effect (wax_applied ?a)\n)",
    "(:action WaxAndWipe\n  :parameters (?npc - person ?item - object ?surface - surface)\n  :precondition (and \n    (wax_applied ?npc)\n    (not (wiped ?npc))\n    (not (towel_layout ?surface))\n    (comfortable ?npc)\n    (not (strip_warmed ?item))\n    (not (strips_peeled ?item))\n    (not (strip_applied ?npc ?item))\n    (not (strip_rubbed ?npc ?item))\n    (not (strip_pulled ?npc ?item))\n    (not (strip_grasped ?npc ?item))\n    (not (wax_strips_applied ?npc))\n  )\n  :effect (and\n    (wiped ?npc)\n    (towel_layout ?surface)\n    (comfortable ?npc)\n    (strip_warmed ?item)\n    (strips_peeled ?item)\n    (strip_applied ?npc ?item)\n    (strip_rubbed ?npc ?item)\n    (strip_pulled ?npc ?item)\n    (strip_grasped ?npc ?item)\n    (wax_strips_applied ?npc)\n  )",
    "(:action WarmWicks ; Warm a wick if it is not already heated\n  :parameters (?w - wick)\n  :precondition (not (heated ?w))\n  :effect (heated ?w)\n)",
    "(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (?npc - person ?book - book) \n  :precondition (and (available ?npc) (not (checked_list ?npc ?book)))\n  :effect (checked_list ?npc ?book)\n)",
    "(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n  :parameters (?leader - player ?member - player ?bc - book_club)\n  :precondition (and (in ?leader ?bc) (in ?member ?bc) (not (loan_tracker ?member ?bc)))\n  :effect (loan_tracker ?member ?bc)\n)",
    "(:action WarmWicks\n  :parameters (?w - wick)\n  :precondition (not (heated ?w))\n  :effect (heated ?w)\n)",
    "(:action TransformEntity ; General action to transform the state of an entity\n  :parameters (?entity - object ?state - predicate)\n  :precondition (not (?state ?entity))\n  :effect (?state ?entity)\n)",
    "(:action DipInWicks ; Dip a wick and update its status\n  :parameters (?entity - entity ?target - object)\n  :precondition (and (prepared ?target) (not (interacted ?entity ?target)))\n  :effect (interacted ?entity ?target)\n)",
    "(:action transform_state\n  :parameters (?entity - entity_type ?resource - resource_type)\n  :precondition (and \n    (current_state ?entity ?resource ?initial_state) \n    (not (current_state ?entity ?resource ?goal_state))\n  )\n  :effect (and \n    (not (current_state ?entity ?resource ?initial_state))",
    "(:action transform_state\n  :parameters (?wick - wick ?resource - temperature)\n  :precondition (and \n    (current_state ?wick ?resource cool) \n    (not (current_state ?wick ?resource heated))\n  )\n  :effect (and \n    (not (current_state ?wick ?resource cool))",
    "(:action transform_state\n  :parameters (?user - user ?resource - applicator)\n  :precondition (and \n    (current_state ?user ?resource not_dipped) \n    (current_state ?wick temperature heated)\n  )\n  :effect (and \n    (not (current_state ?user ?resource not_dipped))",
    "(:action transform_state\n  :parameters (?user - user ?strip - strip)\n  :precondition (and \n    (current_state ?user applicator dipped) \n    (current_state ?strip applied_state not_applied)\n  )\n  :effect (and \n    (not (current_state ?strip applied_state not_applied))"
]