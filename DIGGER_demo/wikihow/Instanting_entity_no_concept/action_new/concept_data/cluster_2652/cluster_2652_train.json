[
    "(:action choose\n  :parameters (?agent - agent ?item - item ?attribute - attribute)\n  :precondition (and \n                  (available ?agent)\n                  (not (chosen ?agent ?item))\n                  (precondition_met ?item ?attribute))\n  :effect (and \n            (chosen ?agent ?item)\n            (effect_applied ?item ?attribute))",
    "(:action build ; Build or modify a resource and update its state\n  :parameters (?entity - entity ?location - location)\n  :precondition (and\n                  (not (built ?entity))\n                  (available ?entity))\n  :effect (and\n            (built ?entity)\n            (located_at ?entity ?location)\n            (state ?entity modified))",
    "(:action add\n  :parameters (?actor - entity ?item - object ?target - location)\n  :precondition (and \n                  (at ?actor ?target)\n                  (or (inventory ?actor ?item)\n                      (available ?item ?target)\n                      (not (full ?item))\n                      (not (emptier ?item))\n                      (not (dry ?target))\n                      (composted ?item)\n                      (location ?item in_cabinet)\n                      (at ?item around_house)))\n  :effect (and\n            (or (in_bin ?item ?target)\n                (full ?target)\n                (wet ?target)\n                (in_composter ?item ?target)\n                (not (composted ?item))",
    "(:action roll\n    ; Roll a material/object and update its state\n    :parameters (?npc - entity ?item - object ?container - container)\n    :precondition (and \n                    (in ?item ?container)\n                    (or (full ?container) (location ?container sunny_spot)))\n    :effect (and \n              (rolled ?item)\n              (not (in ?item ?container))",
    "(:action use\n  :parameters (?actor - person ?item - object ?loc - location ?container - container ?material - material)\n  :precondition (and\n                  (available ?actor)\n                  (or (and (location ?container in_cabinet) (volume ?container empty))\n                      (and (inventory ?actor ?item) (or (clean ?item) (sandy ?item)) (chosen ?actor direct_use))\n                      (at ?actor ?loc)\n                      (and (inventory ?actor ?material) (at ?actor ?container) (mixed ?container)))\n                )\n  :effect (and\n            (or (and (location ?container on_countertop) (volume ?container fuller))",
    "(:action keep ; Store an item in a designated location and update its status\n :parameters (?actor - entity ?item - object ?location - place)\n :precondition (and (not (contains ?location ?item)) (or (holding ?actor ?item) (availability ?item unobtained) (at ?actor ?location)))\n :effect (and (contains ?location ?item) (not (holding ?actor ?item))",
    "(:action initiate ; Initiate a process or state change for an entity\n  :parameters (?n - entity ?s1 - state ?s2 - state)\n  :precondition (and (has_state ?n ?s1))\n  :effect (and (not (has_state ?n ?s1))",
    "(:action fill ; Perform a filling or modifying task and update the item's state\n    :parameters (?npc - agent ?item - object ?target - location)\n    :precondition (and \n        (at ?npc ?target)\n        (or \n            (location ?item ?target) ; for filling tumblers\n            (inventory ?npc ?item) ; for washing sand\n            (holding ?npc ?item) ; for spraying leaves or pouring into soil\n        )\n        (not (completed ?item))\n    )\n    :effect (and \n        (completed ?item)\n        (or\n            (and (location ?item filled) (volume ?item fuller))",
    "(:action balance ; Balance an entity's state and update the status\n  :parameters (?actor - entity ?resource - object ?target - target)\n  :precondition (and (location ?resource ?intermediate_state) (location ?target ?required_state))\n  :effect (and (state ?resource balanced) (state ?target transformed))",
    "(:action know ; Know a specific condition and update status\n :parameters (?entity - entity ?condition - condition)\n :precondition (and (knowledge ?entity ?condition))\n :effect (ready ?entity ?condition)\n)",
    "(:action remove ;  Remove an item from a container and update the state\n  :parameters (?entity - entity ?item - item ?container - container)\n  :precondition (and (at ?entity ?container) (contains ?container ?item))\n  :effect (and (not (contains ?container ?item))",
    "(:action heat ; Heat an item and transform its state\n    :parameters (?p - person ?item - object ?source - heating_source)\n    :precondition (and (at ?p ?source) (at ?item ?source) (temperature ?source cool))\n    :effect (and (temperature ?source hot) (state ?item transformed))",
    "(:action determine ; Determine the availability or status of a resource and update the state\n    :parameters (?npc - person ?resource - object ?location - location)\n    :precondition (and (in_area ?npc ?location) (not (available ?resource ?location)))\n    :effect (available ?resource ?location)\n)",
    "(:action compost ; Compost a resource and update its status\n  :parameters (?npc - entity ?loc - location ?item - compostable)\n  :precondition (and (at ?npc ?loc) (has_remains ?npc ?item))\n  :effect (and (composted ?item) (not (has_remains ?npc ?item))",
    "(:action in ; Manage the state change of an entity to being inside or within another entity\n  :parameters (?entity - object ?location - place)\n  :precondition (and (location ?entity on_countertop) (not (in ?entity ?location)))\n  :effect (and (location ?entity on_table) (in ?entity ?location))",
    "(:action plant\n    :parameters (?npc - npc ?entity - entity ?location - location ?container - container ?soil - soil)\n    :precondition (and \n        (or (inventory ?npc ?entity) (holding ?npc ?entity))\n        (or (empty ?container) (contains ?location ?soil))\n        (at ?npc ?location))\n    :effect (and \n        (planted ?entity (or ?container ?soil))",
    "(:action nourish ; Nourish an entity and update its state\n  :parameters (?actor - agent ?entity - object)\n  :precondition (and (inventory ?actor ?entity) (established ?entity))\n  :effect (nourished ?entity)\n)"
]