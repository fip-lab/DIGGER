[
    "(:action mix\n    :parameters (?entity1 - entity ?entity2 - entity ?container - container)\n    :precondition (and \n                    (not (mixed ?entity1 ?entity2 ?container)) \n                    (or (empty ?container) (clean ?container)) \n                    (or (full ?entity1) (assembled ?entity1) (wet ?entity1))\n                    (or (full ?entity2) (salt ?entity2)))\n    :effect (and \n             (mixed ?entity1 ?entity2 ?container)\n             (not (empty ?container))",
    "(:action pour ; Perform a pouring or placing action to change the state of a container or area\n  :parameters (?actor - entity ?item - object ?container - container ?area - area)\n  \n  :precondition (and \n    (or \n      (and (onPaper ?item) (empty ?container))\n      (and (mixed ?item) (clean ?container) (empty ?container))\n      (and (heated ?container) (formedCrust ?container))\n      (and (user ?actor) (bowl ?container) (salt ?item) (empty ?container))\n      (unselected ?area)\n      (wet ?item)\n      (and (plain ?actor) (visible ?actor) (inCabinet ?item) (present ?area))\n    )\n  )\n  \n  :effect (and\n    (or \n      (and (inBag ?item ?container) (full ?container))",
    "(:action boil\n  :parameters (?a - agent ?o - object)\n  :precondition (and \n                  (not (final_state ?o)) \n                  (initial_state ?o))\n  :effect (and \n           (final_state ?o) \n           (not (initial_state ?o))",
    "(:action keep ; Maintain or update the status of a process or entity\n  :parameters (?entity - entity_type ?status - status_type)\n  :precondition (and (not (status ?entity ?status)))\n  :effect (and (status ?entity ?status))",
    "(:action drain ; Drain a resource and update its state\n  :parameters (?item - object ?npc - person)\n  :precondition (and (inBowl ?item) (juicy ?item) (available ?npc))\n  :effect (and (drained ?item) (dry ?item))",
    "(:action eat\n  :parameters (?eater - person ?item - object ?container - container ?bowl - container ?stove - appliance ?pot - container)\n  :precondition (and\n    (not (empty ?container))\n    (or \n      (and (inContainer ?item ?container))\n      (and (inContainer ?item ?bowl) (heated ?item))\n      (and (inContainer ?item ?pot) (boiled ?item))\n      (and (mixed ?item) (on ?item ?stove) (scraped ?item))\n      (and (drained ?item) (inContainer ?item ?bowl))\n    )\n  )\n  :effect (and\n    (eaten ?item)\n    (not (full ?container))",
    "(:action create ; Create or transform an item to achieve a desired state\n    :parameters (?agent - entity ?item - object ?resource - resource)\n    :precondition (and (available ?agent) (not (created ?item)))\n    :effect (and (created ?item) (used ?resource))",
    "(:action create ; Create or transform an item to achieve a desired state\n    :parameters (?agent - entity ?item - object ?resource1 - resource ?resource2 - resource)\n    :precondition (and (available ?agent) (not (created ?item)) (hasResource ?agent ?resource1) (hasResource ?agent ?resource2))\n    :effect (and (created ?item) (consumed ?resource1) (consumed ?resource2))",
    "(:action create ; Create or transform an item to achieve a desired state\n    :parameters (?agent - entity ?item - object ?resource - resource)\n    :precondition (and (available ?agent) (not (created ?item)) (prepared ?resource))\n    :effect (and (created ?item) (transformed ?resource))",
    "(:action create ; Create or transform an item to achieve a desired state\n    :parameters (?agent - entity ?item - object ?resource - resource)\n    :precondition (and (available ?agent) (not (created ?item)) (prepared ?resource) (hasSkill ?agent ?skill))\n    :effect (and (created ?item) (transformed ?resource) (utilizedSkill ?agent ?skill))",
    "(:action create ; Create or transform an item to achieve a desired state\n    :parameters (?agent - entity ?item - object)\n    :precondition (and (available ?agent) (not (created ?item)) (assembledIngredients ?agent))\n    :effect (and (created ?item) (assembled ?agent))",
    "(:action tip ; Perform a tip action on an item and update its state\n  :parameters (?npc - person ?item - object)\n  :precondition (and (available ?npc) (dry ?item) (salted ?item))\n  :effect (excess_salt_removed ?item)\n)",
    "(:action finish ; Complete a task and update its status\n    :parameters (?entity - object)\n    :precondition (in_progress ?entity)\n    :effect (and (completed ?entity) (not (in_progress ?entity))",
    "(:action gather ;  Gather resources or select options and update status\n    :parameters (?agent - entity ?resource - object ?container - object ?state - state)\n    :precondition (and \n        (available ?agent) \n        (not (inDesiredState ?resource ?state))\n    )\n    :effect (and \n        (inDesiredState ?resource ?state) \n        (not (available ?agent))",
    "(:action divide_dough\n       :parameters (?d - dough ?npc - npc)\n       :precondition (kneaded ?d)\n       :effect (and (divided ?d) (lettersCreated ?npc))",
    "(:action divide\n    :parameters (?entity - object ?npc - person)\n    :precondition (and (prepared ?entity))\n    :effect (and (divided ?entity) (updated_status ?npc))",
    "(:action shape ; Shape an entity and update the state\n:parameters (?e - entity ?npc - person)\n:precondition (divided ?e)\n:effect (and (shaped ?e) (transformed ?npc))",
    "(:action poke\n    :parameters (?actor - entity ?target - entity)\n    :precondition (and (not (poked ?actor ?target)))\n    :effect (poked ?actor ?target)\n)",
    "(:action decorate ; Decorate a space and update its status\n  :parameters (?agent - person ?space - location)\n  :precondition (and (available ?agent) (unmade ?space))\n  :effect (and (decorated ?space) (not (unmade ?space))",
    "(:action take\n  :parameters (?actor - entity ?item - object ?location - place)\n  :precondition (and \n      (actor ?actor) \n      (item ?item) \n      (location ?location)\n      (not (held ?actor ?item))\n  )\n  :effect (and \n      (held ?actor ?item)\n      (not (available ?item ?location))",
    "(:action use\n  :parameters (?actor - entity ?item - object ?target - object)\n  :precondition (and \n      (held ?actor ?item)\n      (target ?target)\n      (not (used ?actor ?item ?target))\n  )\n  :effect (and \n      (used ?actor ?item ?target)\n      (prepared ?target)\n  )",
    "(:action use\n    :parameters (?actor - entity ?resource - item ?container - container)\n    :precondition (and \n        (inContainer ?resource ?container)\n        (full ?container)\n        (available ?actor)\n    )\n    :effect (and \n        (used ?resource) \n        (not (full ?container))",
    "(:action wait ; Wait for a transformation in the state of an entity over time\n  :parameters (?entity - object ?time - time_unit)\n  :precondition (and (transforming ?entity) (not (elapsed ?time)))\n  :effect (and (transformed ?entity) (elapsed ?time))"
]