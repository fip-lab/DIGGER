[
    "(:action heat ; Heat a resource and update its state\n  :parameters (?entity - object ?heat_source - heat_source ?location - location)\n  :precondition (and\n    (at ?entity ?location)\n    (not (heated ?entity))\n    (or\n      (and (temperature ?heat_source cool) (power ?heat_source off))\n      (and (inventory ?entity) (is_egg ?entity) (or (heating ?heat_source) (very_hot_day)))\n      (and (inPan ?entity ?heat_source) (not (hot ?heat_source)))\n      (and (rolls_finished) (at ?entity ?location))\n      (and (at-appliance ?heat_source ?location) (has-power ?heat_source) (clean ?heat_source))\n    )\n  )\n  :effect (and\n    (heated ?entity)\n    (or\n      (and (temperature ?heat_source hot) (power ?heat_source on) (temperature ?entity warming))",
    "(:action cook ; Perform a cooking-related task\n  :parameters (?npc - person ?item - object ?loc - location ?container - container ?tool - tool)\n  :precondition (and \n    (at ?npc ?loc)\n    (at ?item ?loc)\n    (or \n      (and (fullness ?container empty))\n      (and (location ?item in_bowl) (temperature ?item cold))\n      (inPan ?item ?tool)\n      (wet ?item)\n      (prepared ?item)\n      (in_container ?item)\n      (cooked ?item)\n      (separate ?item)\n      (chopped ?item)\n    )\n  )\n  :effect (and \n    (or\n      (fullness ?container full)\n      (location ?item on_counter)\n      (temperature ?item warm)\n      (cooked ?item)\n      (not (raw ?item))",
    "(:action roll ; Roll an item and change its state\n    :parameters (?actor - agent ?item - object)\n    :precondition (and (location ?item on_surface) (temperature ?item warm))\n    :effect (location ?item rolled)\n)",
    "(:action finish\n    :parameters (?entity - object ?task - task ?location - location)\n    :precondition (and \n        (at ?entity ?location)\n        (inProgress ?task)\n    )\n    :effect (and \n        (completed ?task)\n        (not (inProgress ?task))",
    "(:action remove\n  :parameters (?entity - object ?location_from - location ?location_to - location ?context - context)\n  :precondition (and \n    (at ?entity ?location_from)\n    (context ?context ?entity))\n  :effect (and\n    (at ?entity ?location_to)\n    (updated_context ?context ?entity))",
    "(:action add ; Add an item to a container or modify an entity's state\n  :parameters (?item - object ?container - container ?tool - tool ?location - location)\n  :precondition (and \n    ;; Preconditions for adding wet ingredients\n    (or \n      (and (cooked ?item) (at ?item ?container))\n      ;; Preconditions for adding ingredients into a bowl\n      (and (separate ?item) (empty ?container))\n      ;; Preconditions for sealing edges of pastry\n      (and (at ?item ?location) (at ?tool ?location) (edges_unsealed ?item))\n    )\n  )\n  :effect (and \n    ;; Effects for adding wet ingredients\n    (or \n      (and (in ?item ?container) (wet ?container))",
    "(:action place\n  :parameters (?item - object ?location - location ?npc - person ?condition - boolean)\n  :precondition (and \n    (at ?item ?location)\n    (if (is_metal ?item) (not (heated ?item)) ?condition)\n    (if (prepared ?item) (not (at ?item ?location)) ?condition)\n  )\n  :effect (and \n    (if (is_metal ?item) (heating ?item))",
    "(:action fold_and_roll_wrapped\n  :parameters (?item1 - ingredient ?item2 - ingredient ?tool - tool ?location - location)\n  :precondition (and\n    (at ?item1 ?location)\n    (at ?item2 ?location)\n    (at ?tool ?location)\n    (or (unbaked ?item1) (baked ?item1) (cut ?item1) (empty ?tool))\n  )\n  :effect (and\n    (if (unbaked ?item1) (spread ?item1 ?item2))",
    "(:action serve\n    :parameters (?npc - npc ?item - ingredient ?location - location ?dish - dish)\n    :precondition (and\n      (fried ?item)\n      (at ?npc ?location)\n      (at ?dish dining_table)\n    )\n    :effect (and\n      (served ?item)\n      (in_dish ?item ?dish)\n      (not (fried ?item))",
    "(:action flip ; Flip and transform the state of an item\n    :parameters (?item - object ?tool - tool ?person - person ?loc - location)\n    :precondition (and\n      (at ?person ?loc)  ; The person must be at the location\n      (or\n        (and (fried ?item) (in-pan ?item ?tool) (at-tool ?tool ?loc)) ; If the item is an egg being fried in a pan\n        (and (cracked ?item) (or (on_metal ?item) (on_sidewalk ?item))) ; If the item is a cracked egg on metal or sidewalk\n      )\n    )\n    :effect (and\n      (not (fried ?item))",
    "(:action wait ; Wait for a specific condition to be met\n  :parameters (?p - entity ?condition - condition_type)\n  :precondition (and (at ?p ?location))\n  :effect (?condition)\n)",
    "(:action chop ;  Chop an ingredient and update its state\n  :parameters (?item - ingredient ?container - container)\n  :precondition (and \n    (whole ?item) \n    (or \n      (at ?item kitchen_counter)\n      (empty ?container)\n    )\n  )\n  :effect (and \n    (chopped ?item) \n    (not (whole ?item))",
    "(:action toast ; Toast an item and update its state\n    :parameters (?item - object)\n    :precondition (and (raw ?item))\n    :effect (and (toasted ?item) (not (raw ?item))",
    "(:action secure\n  :parameters (?item - object ?egg_wash - ingredient ?brush - tool ?table - location)\n  :precondition (and\n    (at ?item ?table)\n    (at ?egg_wash ?table)\n    (at ?brush ?table)\n    (not (secured ?item ?egg_wash))\n  )\n  :effect (secured ?item ?egg_wash)\n)",
    "(:action shape_into_ball_shape\n    :parameters (?mixture - ingredient)\n    :precondition (and\n      (at ?mixture kitchen_counter)\n    )\n    :effect (and\n      (shaped ?mixture)\n    )",
    "(:action cut_bread\n    :parameters (?bread - ingredient)\n    :precondition (and\n      (at ?bread kitchen_counter)\n    )\n    :effect (and\n      (cut ?bread)\n    )",
    "(:action shape\n  :parameters (?item - ingredient)\n  :precondition (and\n    (at ?item kitchen_counter)\n  )\n  :effect (and\n    (transformed ?item)\n  )",
    "(:action be_amazed\n    :parameters (?npc - npc)\n    :precondition (and (cooked ?eggroll) (not (amazed ?npc)))\n    :effect (amazed ?npc)\n)",
    "(:action heat_peanut_oil\n    :parameters (?chef - person ?oil - ingredient)\n    :precondition (and (available ?chef) (not (heated ?oil)))\n    :effect (heated ?oil)\n)",
    "(:action be\n    :parameters (?actor - entity ?item - object ?state - state)\n    :precondition (and (available ?actor) (not (?state ?item)))\n    :effect (?state ?item)\n)",
    "(:action be\n    :parameters (?npc - npc ?eggroll - object ?state - state)\n    :precondition (and (cooked ?eggroll) (not (amazed ?npc)))\n    :effect (amazed ?npc)\n)",
    "(:action be\n    :parameters (?chef - person ?oil - ingredient ?state - state)\n    :precondition (and (available ?chef) (not (heated ?oil)))\n    :effect (heated ?oil)\n)",
    "(:action deep_fry\n       :parameters (?item - ingredient ?pan - utensil ?oil - ingredient)\n       :precondition (and\n           (wrapped ?item ?oil)\n           (has_oil ?pan)\n           (at ?pan kitchen_stove)\n           (heated ?stove)\n       )\n       :effect (and\n           (fried ?item)\n           (dirty ?pan)\n       )",
    "(:action serve_potatoes\n       :parameters (?potatoes - ingredient ?plate - utensil)\n       :precondition (and\n           (fried ?potatoes)\n           (clean ?plate)\n       )\n       :effect (and\n           (served ?potatoes ?plate)\n           (dirty ?plate)\n       )",
    "(:action deep\n    :parameters (?item - ingredient ?utensil - utensil ?place - location)\n    :precondition (and\n        (wrapped ?item ?wrapper)\n        (has_oil ?utensil)\n        (at ?utensil ?place)\n        (heated ?place)\n        (clean ?utensil)\n    )\n    :effect (and\n        (fried ?item)\n        (dirty ?utensil)\n        (served ?item ?utensil)\n    )"
]