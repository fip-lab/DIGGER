[
    "(:action choose\n  :parameters (?p - person ?item - object ?location - place)\n  :precondition (and (at ?p ?location) (not (chosen ?p ?item)))\n  :effect (chosen ?p ?item)\n)",
    "(:action start\n    :parameters (?npc - person ?item - object ?location - location)\n    :precondition (and (at ?npc ?location) (not (started ?npc ?item)))\n    :effect (and (started ?npc ?item))",
    "(:action start\n    :parameters (?npc - person ?item - object ?location - location)\n    :precondition (and (at ?npc ?location) (not (started ?npc ?item)))\n    :effect (and (started ?npc ?item))",
    "(:action listen\n  :parameters (?npc - person ?item - object)\n  :precondition (and\n    (at ?npc ?loc) ;; Ensure the npc is at a relevant location\n    (or\n      (and (has_radio ?npc) (broadcast_available)) ;; Listening to a broadcast\n      (and (not (listened ?npc ?item)) ;; General listening condition\n           (or (is_alarm_system ?item) ;; Specific conditions for different items\n               (is_battery ?item)\n               (is_warranty ?item)\n               (is_conceptacle ?item))))\n  )\n  :effect (and\n    (listened ?npc ?item) ;; General effect of having listened to the item\n    (when (is_alarm_system ?item) (listened_to_alarm_system ?npc ?item))",
    "(:action read_brochures :parameters (?a - agent) :precondition (contacted_manufacturers ?a) :effect (read_brochures ?a))",
    "(:action research_remote_starter_systems :parameters (?a - agent) :precondition (online_access ?a) :effect (researched ?a remote_starter_systems))",
    "(:action read ; Read a resource and update the agent's knowledge\n    :parameters (?a - agent ?resource - object)\n    :precondition (and (available ?a) (not (read ?a ?resource)))\n    :effect (read ?a ?resource)\n)",
    "(:action compare ; Compare a resource and update comparison status\n  :parameters (?actor - entity ?item1 - object ?item2 - object)\n  :precondition (and (available ?actor) (not (compared ?item1 ?item2)))\n  :effect (compared ?item1 ?item2)\n)",
    "(:action perform_task\n  :parameters (?agent - entity ?task - task ?resource - resource ?location - location)\n  :precondition (and (available ?agent)\n                     (not (task_completed ?agent ?task))\n                     (task_requires_resource ?task ?resource)\n                     (at ?agent ?location)\n                     (not (resource_used ?agent ?resource))\n                     (not (task_performed ?agent ?task ?location))\n                     ;; Add specific preconditions for the task\n                     (or (and (task = fill_tank) (cool_temperature ?location))\n                         (and (task = fill_tank_basement) (has_fuel ?agent))\n                         (and (task = install_system) (checked ?agent ?resource) (listened_to ?agent ?resource) (compared ?agent ?resource)))\n                    )\n  :effect (and (task_completed ?agent ?task)\n               (resource_used ?agent ?resource)\n               (task_performed ?agent ?task ?location)\n               ;; Add specific effects for the task\n               (or (and (task = fill_tank) (tank_filled ?agent))",
    "(:action take_mental_note\n    :parameters (?p - npc)\n    :precondition (and (driving ?p) (observing ?p))\n    :effect (mental_note_taken ?p)\n)",
    "(:action take\n    :parameters (?actor - person ?subject - object ?context - context)\n    :precondition (and (involved ?actor ?context) (not (taken ?actor ?subject ?context)))\n    :effect (taken ?actor ?subject ?context)\n)",
    "(:action talk ; Engage in conversation and update communication status\n    :parameters (?npc - person ?target - entity)\n    :precondition (and (can_communicate ?npc) (available ?target) (not (talked ?npc ?target)))\n    :effect (talked ?npc ?target)\n)",
    "(:action make\n  ; Universal action for creating, recording, or deciding on an entity\n  :parameters (?npc - npc ?entity - object ?location - location)\n  \n  ; Preconditions: The NPC must be at the specific location, and entity-specific preconditions must be met\n  :precondition (and \n                 (at ?npc ?location)\n                 (or \n                   (chosen_name ?npc ?name)       ; For listening to converter with name\n                   (not (record_made ?npc))       ; For making a record\n                   (not (vehicle_protected ?location)) ; For making a defending vehicle\n                 ))\n\n  ; Effects: The state change resulting from the action\n  :effect (and \n           (or \n             (listened_to_converter ?npc)       ; Effect of listening to converter with name\n             (record_made ?npc)                 ; Effect of making a record\n             (vehicle_protected ?location)      ; Effect of making a defending vehicle\n           ))",
    "(:action confirm ; Confirm a player's knowledge or status regarding a tool or object\n  :parameters (?p - player ?obj - object)\n  :precondition (and (at ?p ?loc) (selected ?p ?obj))\n  :effect (confirmed ?p ?obj)\n)",
    "(:action pick ; Pick an item and update task status\n  :parameters (?actor - entity ?item - object)\n  :precondition (and (selected ?actor ?item) (display_chosen ?actor))\n  :effect (picked ?actor ?item)\n)",
    "(:action evaluate ; Evaluate a resource and update its assessment status\n    :parameters (?npc - person ?item - object)\n    :precondition (and (considering ?npc ?item) (not (evaluated ?npc ?item)))\n    :effect (evaluated ?npc ?item))",
    "(:action fix ; Fix a malfunctioning system or object\n  :parameters (?p - person ?o - object)\n  :precondition (and (at ?p ?o) (malfunctioning ?o))\n  :effect (and (not (malfunctioning ?o))",
    "(:action diagnose ; Diagnose a resource and update its status\n  :parameters (?entity - agent ?resource - object)\n  :precondition (and (at ?entity ?resource) (not (diagnosed ?resource)))\n  :effect (diagnosed ?resource)\n)",
    "(:action diagnose ; Diagnose a resource and update its status\n  :parameters (?entity - agent ?resource - object)\n  :precondition (and (at ?entity ?resource) (not (diagnosed ?resource)))\n  :effect (diagnosed ?resource)\n)",
    "(:action determine\n  ; Determine a property or state of an entity\n  :parameters (?actor - entity ?target - entity ?property - property)\n  \n  :precondition (and (not (determined ?target ?property))\n                     (or (at ?actor ?target)\n                         (available ?actor)))\n  \n  :effect (determined ?target ?property)\n)",
    "(:action list_features\n       :parameters (?a - agent)\n       :precondition (determined_remote_starter ?a)\n       :effect (features_listed ?a)\n   )",
    "(:action list ; List features or resources and update status\n    :parameters (?actor - agent ?resource - object)\n    :precondition (and (determined ?actor ?resource) (not (listed ?actor ?resource)))\n    :effect (listed ?actor ?resource)\n)",
    "(:action contact ; Contact a resource and update task status\n:parameters (?a - agent ?resource - entity)\n:precondition (and (searched ?a ?resource) (not (contacted ?a ?resource)))\n:effect (contacted ?a ?resource))",
    "(:action research ; Research a subject and document findings\n  :parameters (?a - agent ?subject - object)\n  :precondition (and (read_brochures ?a) (not (researched ?a ?subject)))\n  :effect (researched ?a ?subject)\n)",
    "(:action recycle ; Recycle an item and update its status\n  :parameters (?npc - person ?item - object ?location - place)\n  :precondition (and \n    (has_item ?npc ?item) \n    (at ?npc ?location) \n    (at ?item ?location)\n    (recyclable ?item)\n  )\n  :effect (and \n    (not (has_item ?npc ?item))",
    "(:action decide ; Make a decision regarding a task and update the task status\n  :parameters (?npc - person ?location - place ?task - task)\n  :precondition (and \n                (at ?npc ?location)\n                (not (task_decided ?npc ?task)))\n  :effect (and \n          (task_decided ?npc ?task))",
    "(:action pickupobjectnoreceptacle ; Universal action for picking up objects without a receptacle\n  :parameters (?npc - npc ?item - object ?location - location)\n  :precondition (and \n    (at ?npc ?location) \n    (store_found ?npc) \n    (available ?item ?location) \n    (not (inventory ?npc ?item))\n  )\n  :effect (and \n    (inventory ?npc ?item) \n    (not (available ?item ?location))"
]