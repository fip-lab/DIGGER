[
    "(:action gather ; Gather resources and update possession status\n  :parameters (?agent - person ?item - object ?location - place)\n  :precondition (and (available ?agent) (not (possessed ?agent ?item)) (at ?item ?location))\n  :effect (and (possessed ?agent ?item) (organized ?item))",
    "(:action start\n  :parameters (?p - person ?item1 - object ?item2 - object)\n  :precondition (and (at ?p ?item1) (at ?p ?item2) (or (sealed ?item2) (in ?item1 ?item2) (full ?item2)))\n  :effect (and (or (shaking ?p ?item2) (stopped_adding ?item1 ?item2))",
    "(:action add\n    ; Add or modify an entity within a container or mixture\n    :parameters (?p - person ?container - container ?item - entity)\n    :precondition (and \n        (at ?p ?location)\n        (is_container ?container)\n        (is_entity ?item)\n        (not (processed ?item ?container))\n    )\n    :effect (and\n        (processed ?item ?container)\n        (not (unprocessed ?item ?container))",
    "(:action mix\n    ; Mix entities within a container\n    :parameters (?p - person ?container - container ?item1 - entity ?item2 - entity)\n    :precondition (and \n        (at ?p ?location)\n        (is_container ?container)\n        (is_entity ?item1)\n        (is_entity ?item2)\n        (in_container ?item1 ?container)\n        (in_container ?item2 ?container)\n        (not (mixed ?item1 ?item2))\n    )\n    :effect (and\n        (mixed ?item1 ?item2)\n        (not (separate ?item1 ?item2))",
    "(:action blend\n    ; Blend entities in a blender or similar device\n    :parameters (?p - person ?device - device ?item - entity)\n    :precondition (and \n        (at ?p ?device)\n        (is_device ?device)\n        (is_entity ?item)\n        (in_device ?item ?device)\n        (not (blended ?item))\n        (off ?device)\n    )\n    :effect (and\n        (blended ?item)\n        (not (separate ?item))",
    "(:action open ; Open a resource and update its status\n    :parameters (?p - person ?item - object)\n    :precondition (and (sealed ?item) (full ?item))\n    :effect (and (open ?item) (not (sealed ?item))",
    "(:action transform_state ; Transform the state of an entity based on specific conditions\n  :parameters (?entity - object ?tool - object ?state_from - state ?state_to - state)\n  :precondition (and (has_state ?entity ?state_from) (can_use ?tool) (available ?tool))\n  :effect (and (has_state ?entity ?state_to) (not (has_state ?entity ?state_from))",
    "(:action wet_wicks\n  :parameters (?p - person ?w - wick ?water - tool)\n  :precondition (and (has_state ?w dry) (available ?water) (can_use ?water))\n  :effect (and (has_state ?w wet) (not (has_state ?w dry))",
    "(:action microwave_butter\n  :parameters (?a - agent ?b - butter ?m - microwave)\n  :precondition (and (has_state ?b cubed) (in_microwave ?b) (available ?m) (can_use ?m))\n  :effect (and (has_state ?b softened) (not (has_state ?b cubed))",
    "(:action warm_cream\n  :parameters (?c - cream ?s - stove)\n  :precondition (and (has_state ?c cool) (available ?s) (can_use ?s))\n  :effect (and (has_state ?c warm) (not (has_state ?c cool))",
    "(:action cool_mixture\n  :parameters (?m - mixture ?f - fridge)\n  :precondition (and (has_state ?m room_temp) (available ?f) (can_use ?f))\n  :effect (and (has_state ?m cool) (in_fridge ?m) (not (has_state ?m room_temp))",
    "(:action drain\n  :parameters (?p - person ?entity - entity ?container - container)\n  :precondition (and (available ?p) (not (drained ?entity)) (or (inContainer ?entity ?container) (full ?container)))\n  :effect (and \n            (drained ?entity) \n            (not (inContainer ?entity ?container))",
    "(:action knead\n  :parameters (?p - person ?item - object ?container - container ?npc - npc ?b - blender ?processor - entity)\n  :precondition (and \n    (or (and (inContainer ?item ?container) (not (kneaded ?item)))\n        (and (at ?p ?b) (on ?b))\n        (and (inDrawer ?processor))\n        (on ?npc))\n  )\n  :effect (and \n    (or (and (kneaded ?item) (not (inContainer ?item ?container))",
    "(:action cut ;  Cut an object and update its state\n  :parameters (?p - person ?item - object ?tool - tool ?location - location ?container - container)\n  :precondition (and \n                  (at ?p ?location)\n                  (in-hand ?tool)\n                  (or (is_butter ?item) (is_cream ?item) (is_ingredient ?item))\n                  (or (frozen ?item) (whole ?item) (not (sliced ?item)))\n                  (or (at ?p ?item) (inContainer ?item ?container))\n                  (or (onCounter ?location) (full ?container))\n                )\n  :effect (and \n            (or (cut ?item into-pieces) (sliced ?item) (chopped ?item))",
    "(:action push ; Push an item into a container or device and update the status\n  :parameters (?p - person ?item - object ?container - container)\n  :precondition (and (at ?p ?item) (at ?p ?container) (in ?item ?origin))\n  :effect (and (pushed ?item ?container) (not (in ?item ?origin))",
    "(:action know ; Know a fact and update understanding\n  :parameters (?person - person ?object - entity ?context - context)\n  :precondition (and (focused-on ?person ?context) (location ?object in-context ?context))\n  :effect (and (aware ?person when-applicable ?object) (location ?object in-new-context ?context))",
    "(:action measure ; Measure a resource and update container status\n    :parameters (?p - agent ?resource - object ?container - container)\n    :precondition (and (at ?p ?container) (empty ?container))\n    :effect (and (measured ?resource) (not (empty ?container))",
    "(:action calculate\n  :parameters (?entity - agent ?resource - object ?location - place)\n  :precondition (and (at ?entity ?resource) (at ?entity ?location) (prepared ?resource))\n  :effect (calculated ?resource ?location)\n)",
    "(:action modify_state\n  :parameters (?entity - object ?tool - object ?state_before - state ?state_after - state)\n  :precondition (and (has_state ?entity ?state_before) (in_hand ?tool))\n  :effect (and (has_state ?entity ?state_after) (not (has_state ?entity ?state_before))",
    "(:action modify_state\n    :parameters (?butter - butter ?grater - tool ?frozen - state ?softened - state)\n    :precondition (and (has_state ?butter ?frozen) (in_hand ?grater))\n    :effect (and (has_state ?butter ?softened) (not (has_state ?butter ?frozen))",
    "(:action modify_state\n    :parameters (?npc - person ?book - book ?unchecked - state ?checked - state)\n    :precondition (and (has_state ?npc ?unchecked) (in_hand ?book))\n    :effect (and (has_state ?npc ?checked) (not (has_state ?npc ?unchecked))",
    "(:action pulse ; Pulse an item to transform its state\n  :parameters (?p - person ?device - device ?item - object)\n  :precondition (and (at ?p ?location) (is_device ?device) (contains ?device ?item))\n  :effect (and (pulsed ?item) (transformed ?item))"
]