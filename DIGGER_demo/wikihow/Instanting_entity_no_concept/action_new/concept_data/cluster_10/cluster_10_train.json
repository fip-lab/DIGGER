[
    "(:action join ; Join an entity to a group or system\n:parameters (?entity - object ?group - group)\n:precondition (and (willing_to_join ?entity) (not (member ?entity ?group)))\n:effect (member ?entity ?group))",
    "(:action find ; Find a resource, person, or information and update status\n  :parameters (?entity - entity ?target - target)\n  :precondition (and \n                  (available ?entity) \n                  (not (found ?entity ?target))\n                  (or \n                    (supervisable ?entity ?target)\n                    (visible ?entity)\n                    (willing_to_join ?entity)\n                    (knows_preferences ?entity)\n                    (theme_selectable ?target)\n                    (has_books ?entity ?target)\n                  )\n                )\n  :effect (and \n            (found ?entity ?target)\n            (or \n              (supervisor ?entity ?target)\n              (has_other_club_info ?entity ?target)\n              (member ?entity ?target)\n              (snacks_ready ?target)\n              (visibility ?entity invisible)\n              (theme_selected ?target)\n              (chosen_books ?entity ?target)\n            )",
    "(:action create ; General action to create or compose a resource, item, or state\n  :parameters (?entity - entity ?resource - resource ?context - context ?condition - condition)\n  :precondition (and (not (created ?resource)) (in ?entity ?context) (condition_met ?condition))\n  :effect (and (created ?resource) (updated_state ?entity ?context ?condition))",
    "(:action create\n    :parameters (?p - person ?b - book ?bc - book_club ?condition - condition)\n    :precondition (and (not (created ?b)) (member ?p ?bc) (condition_met ?condition))\n    :effect (and (created ?b) (updated_state ?p ?bc ?condition))",
    "(:action create\n    :parameters (?p - player ?bc - book_club ?condition - condition)\n    :precondition (and (not (created ?bc)) (in ?p ?bc) (condition_met ?condition))\n    :effect (and (created ?bc) (updated_state ?p ?bc ?condition))",
    "(:action create\n    :parameters (?npc - npc ?system - system ?condition - condition)\n    :precondition (and (not (created ?system)) (condition_met ?condition))\n    :effect (and (created ?system) (updated_state ?npc ?context ?condition))",
    "(:action create\n    :parameters (?npc - npc ?bt - book_themed ?condition - condition)\n    :precondition (and (not (created ?bt)) (step_selected ?bt) (condition_met ?condition))\n    :effect (and (created ?bt) (updated_state ?npc ?context ?condition))",
    "(:action set ; Set a property or assign a status for an entity\n  :parameters (?actor - person ?entity - object ?status - status)\n  :precondition (and (active ?actor) (not (has_status ?entity ?status)))\n  :effect (and (has_status ?entity ?status))",
    "(:action know\n  ; Clarify important information related to the book club\n  :parameters (?p - person ?bc - book_club ?info - information)\n  \n  :precondition (and (member ?p ?bc) \n                    (or (and (eq ?info purpose) (not (purpose_clarified ?bc)))\n                        (and (eq ?info next_meeting) (meeting_time_set ?bc) (not (next_meeting_known ?bc))))\n                   )\n                   \n  :effect (and (or (and (eq ?info purpose) (purpose_clarified ?bc))",
    "(:action stick ; Stick with a specific choice and update the entity's status\n  :parameters (?entity - character ?choice - option)\n  :precondition (and (step ?entity unselected) (valid_choice ?choice))\n  :effect (and (step ?entity selected) (chosen ?entity ?choice))",
    "(:action pick ; Pick an item and update its status\n  :parameters (?agent - agent ?item - object ?context - context)\n  :precondition (and (available ?agent) (not (picked ?agent ?item ?context)))\n  :effect (and (picked ?agent ?item ?context))",
    "(:action venture\n    ; Venture into a new state or domain\n    :parameters (?entity - entity ?domain - domain)\n    :precondition (and (in_domain ?entity visible ?domain))\n    :effect (and (in_domain ?entity invisible ?domain))",
    "(:action read ; Read a resource and update its status\n  :parameters (?npc - person ?item - object)\n  :precondition (and (not (read ?npc ?item)))\n  :effect (and (read ?npc ?item))",
    "(:action read_romance\n  :parameters (?npc - person ?book - book)\n  :precondition (and (decoration ?npc bare) (not (read ?npc ?book)))\n  :effect (and (decoration ?npc camouflaged) (read ?npc ?book))",
    "(:action read_books\n  :parameters (?npc - person ?book - book)\n  :precondition (and (step ?book unselected) (not (read ?npc ?book)))\n  :effect (and (step ?book selected) (read ?npc ?book))",
    "(:action ask ; Ask for information or suggestions and update the status\n    :parameters (?requester - entity ?responder - entity ?item - object)\n    :precondition (and \n        (available ?requester) \n        (available ?responder)\n        (or (location ?item on_counter)\n            (and (in ?responder ?item) (has_questions ?responder))\n            (not (has_advice ?responder ?item))\n            (visible ?responder))\n    )\n    :effect (and \n        (or (location ?item in_hand)\n            (members_prepared ?item)\n            (has_advice ?responder ?item)\n            (has_recommendation ?responder))",
    "(:action write ; Write a policy or document and update status\n  :parameters (?p - person ?context - object)\n  :precondition (and (has_info ?p) (in ?p ?context) (not (written ?context)))\n  :effect (written ?context)\n)",
    "(:action manage_task\n  :parameters (?actor - agent ?entity - object ?context - context ?property - attribute)\n  :precondition (and \n                  (available ?actor)\n                  (in ?actor ?context)\n                  (not (has_property ?entity ?property)))\n  :effect (has_property ?entity ?property)\n)",
    "(:action manage_task\n  :parameters (?npc - person ?book - book ?bc - book_club ?property - attribute)\n  :precondition (and \n                  (available ?npc)\n                  (in ?npc ?bc)\n                  (not (checked_list ?book ?property)))\n  :effect (checked_list ?book ?property)\n)",
    "(:action manage_task\n  :parameters (?p1 - player ?p2 - player ?bc - book_club ?property - attribute)\n  :precondition (and \n                  (available ?p1)\n                  (in ?p1 ?bc)\n                  (in ?p2 ?bc)\n                  (not (knows_secret ?p1 ?p2)))\n  :effect (knows_secret ?p1 ?p2)\n)",
    "(:action manage_task\n  :parameters (?leader - player ?bc - book_club ?location - location)\n  :precondition (and \n                  (available ?leader)\n                  (in ?leader ?bc)\n                  (not (has_meeting_location ?bc)))\n  :effect (has_meeting_location ?bc)\n)",
    "(:action start ; Begin a task and update the entity's state\n  :parameters (?actor - entity ?target - object)\n  :precondition (and (precondition_met ?target))\n  :effect (and (task_started ?actor ?target))",
    "(:action keep ; Maintain or update the state of an entity\n  :parameters (?entity - object ?state1 - state ?state2 - state)\n  :precondition (and (has_state ?entity ?state1))\n  :effect (and (not (has_state ?entity ?state1))",
    "(:action study ; Study an item and update its status\n  :parameters (?npc - person ?item - object)\n  :precondition (and (selected ?item) (named ?item) (not (studied ?item)))\n  :effect (and (studied ?item))",
    "(:action nudge ; Nudge entities to ensure tasks are on track\n  :parameters (?npc - npc ?task - task)\n  :precondition (and (task_derailed ?task))\n  :effect (and (task_on_track ?task))",
    "(:action nudge_group_back_on_tracks ; nudge the group back on track if the discussion gets derailed\n         :parameters (?npc - npc)\n         :precondition (and (discussion_derailed))\n         :effect (and (discussion_on_track))",
    "(:action strike ; Strike an agreement or perform a task\n  :parameters (?entity - entity ?target - target)\n  :precondition (not (struck ?entity ?target))\n  :effect (struck ?entity ?target)\n)",
    "(:action bring\n    ; Bring a resource and update task status\n    :parameters (?p - player ?item - object)\n    :precondition (and (prepared ?p) (not (brought ?p ?item)))\n    :effect (brought ?p ?item)\n)",
    "(:action visit ; Visit a resource to gain information or update status\n  :parameters (?npc - person ?resource - object)\n  :precondition (and (visible ?npc) (not (visited ?npc ?resource)))\n  :effect (and (visited ?npc ?resource) (has_knowledge ?npc ?resource))",
    "(:action putobjectinreceptacle ; Perform an action on an object or person and update status\n  :parameters (?a - agent ?o - object ?r - receptacle)\n  :precondition (and (not (status_updated ?a ?o ?r)))\n  :effect (and (status_updated ?a ?o ?r))",
    "(:action market_new_member_group\n        :parameters (?npc - npc ?adrian - adrian ?ss - ss)\n        :precondition (and (knowledge ?adrian unselected))\n        :effect (and (knowledge ?adrian selected))",
    "(:action market\n    :parameters (?agent - agent ?entity - entity ?context - context)\n    :precondition (and (knowledge ?entity unselected))\n    :effect (and (knowledge ?entity selected))"
]