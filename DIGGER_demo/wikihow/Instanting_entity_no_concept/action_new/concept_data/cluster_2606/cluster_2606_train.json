[
    "(:action choose\n    :parameters (?npc - person ?item - object ?location - location ?state - state)\n    :precondition (and\n                    (available ?npc)\n                    (at ?npc ?location)\n                    (not (checked ?npc ?item))\n                    (valid_state ?item ?state))\n    :effect (and\n              (checked ?npc ?item)\n              (updated_state ?item ?state))",
    "(:action choose\n        :parameters (?npc - person ?item - object ?location - location ?state - state)\n        :precondition (and (available ?npc) (at ?npc ?location) (not (checked ?npc ?item)) (valid_state ?item ?state))\n        :effect (and (checked ?npc ?item) (updated_state ?item ?state))",
    "(:action choose\n        :parameters (?npc - person ?item - object ?location - location ?state - state)\n        :precondition (and (available ?npc) (at ?npc ?location) (not (checked ?npc ?item)) (valid_state ?item ?state))\n        :effect (and (checked ?npc ?item) (updated_state ?item ?state))",
    "(:action choose\n        :parameters (?npc - person ?item - object ?location - location ?state - state)\n        :precondition (and (available ?npc) (at ?npc ?location) (not (checked ?npc ?item)) (valid_state ?item ?state))\n        :effect (and (checked ?npc ?item) (updated_state ?item ?state))",
    "(:action place\n  ; General action to place an item, marker, or person in a specified context\n  :parameters (?agent - agent ?item - object ?location - location)\n  :precondition (and (at ?agent ?location) (not (placed ?item ?location)) (applicable_conditions ?location))\n  :effect (and (placed ?item ?location) (apply_effects ?location))",
    "(:action create\n  :parameters (?creator - entity ?item1 - entity ?item2 - entity ?location - place)\n  :precondition (and\n                  (at ?creator ?location)\n                  (or (new_member_taught ?creator)\n                      (chosen_scraps ?creator)\n                      (gathered_recipes ?creator)\n                      (unfinished ?item1)\n                      (present ?location)\n                      (uncovered ?location)\n                      (unplayed ?item1)))\n  :effect (and\n            (or (members_knowledge_created ?creator)\n                (theme_created ?item1)\n                (stability ?item1 smooth)\n                (account_created ?creator)\n                (mixture_and_dreams_created ?creator ?item2)\n                (covered ?location)\n                (not (uncovered ?location))",
    "(:action pick\n  ; Pick a style or assign knowledge to a member\n  :parameters (?entity - person ?item - object)\n  :precondition (and (at ?entity unselected) (not (picked ?entity ?item)))\n  :effect (and (at ?entity selected) (picked ?entity ?item))",
    "(:action cut ; Cut a resource and update its status\n  :parameters (?actor - entity ?item - object ?tool - tool ?location - place)\n  :precondition (and (available ?actor) (has_tool ?actor ?tool) (at ?actor ?location) (not (cut ?item)))\n  :effect (and (cut ?item) (updated ?location))",
    "(:action write ;  Write information and update task status\n  :parameters (?agent - agent ?item - object ?recipient - entity)\n  :precondition (and (available ?agent) (not (processed ?item ?recipient)))\n  :effect (processed ?item ?recipient)\n)",
    "(:action listen ; Listen to a resource and update task status\n  :parameters (?agent - person ?resource - object)\n  :precondition (and (available ?agent) (not (processed ?agent ?resource)))\n  :effect (processed ?agent ?resource)\n)",
    "(:action mark ; Mark an item or container with specific information\n    :parameters (?actor - entity ?target - object ?info - information)\n    :precondition (and \n        (available ?actor) \n        (not (marked ?target ?info))\n    )\n    :effect (marked ?target ?info)\n)",
    "(:action protect ; Protect a resource and update its status\n  :parameters (?entity - object)\n  :precondition (and (available ?entity))\n  :effect (protected ?entity)\n)",
    "(:action add ; Add a resource or entity and update task status\n    :parameters (?entity - object ?resource - object)\n    :precondition (and (available ?entity) (not (added ?entity ?resource)))\n    :effect (added ?entity ?resource)\n)",
    "(:action store ; Store an item in a specific location or inventory\n  :parameters (?npc - npc ?item - object ?loc - location)\n  :precondition (and (at ?npc ?loc) (not (stored ?item ?loc)))\n  :effect (stored ?item ?loc))",
    "(:action dedicate ; Dedicate a subject and update status\n  :parameters (?entity - agent ?subject - entity)\n  :precondition (and (at ?entity location) (not (dedicated ?subject)))\n  :effect (and (dedicated ?subject) (not (at ?entity location))",
    "(:action take ; Take an item from an entity and update their respective possession statuses\n :parameters (?actor - agent ?entity - entity ?item - item)\n :precondition (and (at ?actor ?entity) (has ?entity ?item))\n :effect (and (has ?actor ?item) (not (has ?entity ?item))",
    "(:action celebrate ; Celebrate an achievement and update the status\n  :parameters (?actor - entity ?achievement - object)\n  :precondition (and (at ?actor location) (in_progress ?achievement))\n  :effect (and (celebrated ?achievement) (completed ?achievement))",
    "(:action use_as_gems\n       :parameters (?p - player ?track - track)\n       :precondition (and (at ?p album) (smooth ?track))\n       :effect (and (used_as_gems ?track))",
    "(:action use ; Use a resource and update its status\n    :parameters (?agent - agent ?resource - resource ?context - context)\n    :precondition (and (at ?agent ?context) (usable ?resource))\n    :effect (used ?resource)\n)",
    "(:action finish\n    ; Finish a task and mark it as completed\n    :parameters (?actor - agent ?task - activity)\n    :precondition (and (assigned ?actor ?task) (not (completed ?task)))\n    :effect (completed ?task)\n)",
    "(:action determine  ; Determine a specific state or requirement\n  :parameters (?entity - object ?context - context)\n  :precondition (and (not (determined ?entity ?context)))\n  :effect (determined ?entity ?context)\n)",
    "(:action upload-pictures\n        :parameters (?npc - npc ?ct - covering_tracks ?track - track)\n        :precondition (and (website-chosen ?npc) (not (pictures-uploaded ?npc)))\n        :effect (pictures-uploaded ?npc)\n    )",
    "(:action upload\n    :parameters (?uploader - person ?resource - object)\n    :precondition (and (ready-to-upload ?uploader) (not (uploaded ?uploader ?resource)))\n    :effect (uploaded ?uploader ?resource)\n)",
    "(:action customize\n    :parameters (?agent - entity ?target - object)\n    :precondition (and (ready ?agent) (not (customized ?agent ?target)))\n    :effect (customized ?agent ?target)\n)",
    "(:action remind ; Remind about a task or event\n  :parameters (?reminder - entity ?target - entity)\n  :precondition (and (available ?reminder) (not (reminded ?reminder ?target)))\n  :effect (reminded ?reminder ?target))",
    "(:action document ;  Document a specific detail and update the status\n    :parameters (?p - npc ?item - object)\n    :precondition (and (at ?p ?loc) (relevant ?p ?item))\n    :effect (documented ?p ?item)\n)",
    "(:action be ; Express a state of being or emotion based on conditions\n    :parameters (?entity - entity ?condition - condition)\n    :precondition (and (at ?entity ?condition))\n    :effect (expressed ?entity ?condition)\n)"
]