[
    "(:action place\n    :parameters (?p - person ?item - object ?container - container)\n    :precondition (and \n        (inventory ?p ?item) \n        (inventory ?p ?container)\n        (not (in ?item ?container))\n    )\n    :effect (and \n        (in ?item ?container) \n        (not (inventory ?p ?item))",
    "(:action add\n  :parameters (?entity1 - entity ?entity2 - entity ?container - entity)\n  :precondition (and \n    (available ?entity1) \n    (available ?entity2) \n    (in_container ?container)\n    (not (in_mixed_state ?container))\n  )\n  :effect (and \n    (not (available ?entity1))",
    "(:action cook\n  :parameters (?agent - entity ?item - entity ?location - location ?tool - entity ?ingredient - entity)\n  :precondition (and\n    (at ?agent ?location)\n    (available ?item)\n    (clean ?location)\n    (off ?tool)\n    (not (prepared ?ingredient))\n    (not (cooked ?item))\n  )\n  :effect (and\n    (not (available ?item))",
    "(:action serve\n    ; Serve a meal with various items\n    :parameters (?item1 - entity ?item2 - entity ?plate - entity)\n    :precondition (and\n      (is_cooked ?item1)\n      (at_location ?item1 ?loc1)\n      (at_location ?item2 ?loc2)\n    )\n    :effect (and\n      (not (at_location ?item1 ?loc1))",
    "(:action cut_into_thickest_piece\n    :parameters (?steak - ingredient)\n    :precondition (and\n      (at ?steak kitchen_counter)\n      (whole ?steak)\n    )\n    :effect (and\n      (cut ?steak)\n      (not (whole ?steak))",
    "(:action check_doneness_of_steak\n    :parameters (?steak - ingredient)\n    :precondition (and\n      (cut ?steak)\n      (at ?steak kitchen_counter)\n    )\n    :effect (and\n      (checked_doneness ?steak)\n    )",
    "(:action cut\n    :parameters (?item - object)\n    :precondition (and\n      (at ?item kitchen_counter)\n      (or\n        (whole ?item)\n        (cut ?item)\n      )\n    )\n    :effect (and\n      (when (whole ?item)\n        (and\n          (cut ?item)\n          (not (whole ?item))",
    "(:action check ;  Check an item and update its status\n  :parameters (?npc - entity ?item - object ?location - place)\n  :precondition (and \n    (available ?npc) \n    (at ?item ?location)\n    (not (checked ?npc ?item))\n  )\n  :effect (checked ?npc ?item)\n)",
    "(:action use ; Use a resource and update entity status\n  :parameters (?entity - entity ?resource - resource)\n  :precondition (and (available ?resource) (requires_use ?entity ?resource))\n  :effect (and (used ?entity ?resource) (not (requires_use ?entity ?resource))",
    "(:action submerge ; Submerge an item in a liquid to change its state\n  :parameters (?p - person ?item - object ?liquid - substance)\n  :precondition (and (inventory ?p ?item) (inventory ?p ?liquid) (not (submerged ?item)) (can_be_submerged ?item ?liquid))\n  :effect (submerged ?item)\n)",
    "(:action choose ; Choose an item and update its status\n :parameters (?p - person ?item - object ?loc - location)\n :precondition (and (at ?p ?loc) (at ?item ?loc) (available ?item) (not (chosen ?item)))\n :effect (and (chosen ?item) (not (available ?item))",
    "(:action rest ; Rest an entity and update its state\n  :parameters (?entity - object ?loc - location)\n  :precondition (and (at ?entity ?loc) (prepared ?entity))\n  :effect (resting ?entity))",
    "(:action finish\n  :parameters (?p - person ?item - object ?loc - location)\n  :precondition (and (at ?p ?loc) (status ?item in_progress))\n  :effect (and (status ?item completed))",
    "(:action store_chuck_steak\n       :parameters (?p - player ?cs - chuck_steak ?l - location)\n       :precondition (and (chosen ?cs) (at ?p ?l))\n       :effect (and (stored ?cs) (not (chosen ?cs))",
    "(:action cook_chuck_steak\n       :parameters (?p - player ?cs - chuck_steak ?k - kitchen)\n       :precondition (and (chosen ?cs) (at ?p ?k) (stored ?cs))\n       :effect (and (cooked ?cs) (not (stored ?cs))",
    "(:action store_or_cook\n    :parameters (?p - player ?item - object ?loc - location ?kitchen - kitchen)\n    :precondition (and (chosen ?item) (at ?p ?loc) (or (not (stored ?item)) (and (at ?p ?kitchen) (stored ?item))))\n    :effect (and (or (and (stored ?item) (not (chosen ?item))",
    "(:action marinate ; Marinate an entity with a specified marinade\n  :parameters (?entity - entity ?marinade - entity)\n  :precondition (and\n    (at_location ?entity plain)\n    (has_visibility ?entity visible)\n    (has_flavor ?entity none)\n  )\n  :effect (and\n    (not (at_location ?entity plain))",
    "(:action apply ; Apply a process or resource to an entity\n  :parameters (?p - person ?entity - object ?loc - location)\n  :precondition (and (at ?p ?loc) (chosen ?entity) (ready ?p))\n  :effect (applied ?entity))"
]