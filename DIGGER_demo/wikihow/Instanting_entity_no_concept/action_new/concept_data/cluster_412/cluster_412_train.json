[
    "(:action place\n  :parameters (?actor - entity ?item - object ?target - location_or_container)\n  :precondition (and \n    (possesses ?actor ?item) \n    (at ?actor ?target)\n    (not (placed ?item ?target))\n    (or (and (inventory ?actor ?item) (not (inventory ?actor ?item))) ; For actions involving inventory\n        (and (filled_with_water ?target) (not (filled_with_water ?target))) ; For actions involving water\n        (and (dug ?target) (not (dug ?target))) ; For actions involving dug areas\n        (and (has_roots ?item) (not (has_roots ?item))) ; For actions involving roots\n        (and (dry ?item) (not (dry ?item))) ; For actions involving dryness\n        (and (cleaved ?target) (not (cleaved ?target))) ; For actions involving cleaved rootstock\n        (and (prepared ?item) (not (prepared ?item))) ; For actions involving prepared scions\n        (and (exposed ?target) (not (exposed ?target))) ; For actions involving exposed containers\n        (and (at ?target inside_window) (not (at ?target inside_window))) ; For actions involving specific locations\n    )\n  )\n  :effect (and \n    (placed ?item ?target)\n    (or (and (inventory ?actor ?item) (not (inventory ?actor ?item))",
    "(:action dig ; A universal action for digging and modifying entity states\n  :parameters (?npc - agent ?item - entity ?location - place)\n  :precondition (and \n                  (at ?npc ?location)\n                  (or (not (dug ?item)) \n                      (and (inventory ?npc ?item) (at ?item ?location))\n                      (and (in_garden ?npc) (soil_removed ?item) (not (dug ?item))))\n                )\n  :effect (and \n            (dug ?item)\n            (or (not (at ?item ?location))",
    "(:action remove ; A universal action for removing entities and updating their states\n  :parameters (?npc - agent ?item - entity ?location - place)\n  :precondition (and \n                  (at ?npc ?location)\n                  (or (and (at ?item ?location) (inventory ?npc ?item))\n                      (and (in_garden ?item) (watered ?item)))\n                )\n  :effect (and \n            (not (at ?item ?location))",
    "(:action build ; A universal action for building structures and modifying states\n  :parameters (?npc - agent ?structure - structure ?location - place)\n  :precondition (and \n                  (at ?npc ?location)\n                  (or (planted ?structure ?location)\n                      (not (created ?structure)))\n                )\n  :effect (and \n            (or (water_basin_built ?location)\n                (created ?structure))",
    "(:action prepare ; A universal action for preparing items and updating their states\n  :parameters (?npc - agent ?item - entity)\n  :precondition (and \n                  (raw ?item))\n  :effect (and \n            (prepared ?item))",
    "(:action check\n  ; Check a resource and update task status\n  :parameters (?npc - agent ?item - object ?location - place)\n  :precondition (and \n                  (available ?npc)\n                  (not (checked ?npc ?item))\n                  (or (at ?npc ?location) (hole_dug ?location) (at ?npc ?gc))\n                )\n  :effect (and \n            (checked ?npc ?item)\n            (or (soil_checked ?location) (tested ?item))",
    "(:action remove ; Remove or modify an entity's state\n  :parameters (?npc - npc ?entity - entity ?location - location ?tool - tool)\n  :precondition (and \n    (at ?npc ?location) \n    (or (inventory ?npc ?tool) (accessible ?tool ?location))\n    (or\n      (and (inventory ?npc ?tool) (dirt ?entity))\n      (and (staked ?entity))\n      (and (tied ?entity ?location) (healed ?entity))\n      (and (cut_branch ?entity) (at ?npc ?location))\n      (and (at ?entity ?location) (watered ?entity))\n      (and (at ?entity ?location) (harvested ?entity))\n      (and (at ?npc ?location) (at ?entity ?location))\n    )\n  )\n  :effect (and \n    (or\n      (and (not (dirt ?entity))",
    "(:action add\n    :parameters (?actor - entity ?target - entity ?location - location ?state - state)\n    :precondition (and \n        (at ?actor ?location) \n        (not (in_state ?target ?state)) \n        (precondition_for_state_change ?actor ?target ?location ?state)\n    )\n    :effect (and \n        (in_state ?target ?state) \n        (postcondition_for_state_change ?actor ?target ?location ?state)\n    )",
    "(:action drink_water :parameters (?p - player ?b - boxwood) :precondition (and (at ?p ?b) (placed ?b)) :effect (watered ?b))",
    "(:action drink\n  :parameters (?actor - person ?resource - object)\n  :precondition (and (at ?actor ?resource) (not (used ?actor ?resource)))\n  :effect (and (used ?actor ?resource) (satisfied ?actor))",
    "(:action keep ; Keep an entity in a specific state or place\n  :parameters (?entity - object ?container - container ?loc - location ?npc - person)\n  :precondition (and\n    (or \n      (and (at ?entity ?loc) (at ?container ?loc) (not (stored ?entity)))\n      (and (not (kept_in_spot ?entity)) (location ?entity in_cupboard))\n      (inventory ?npc ?entity)\n    )\n  )\n  :effect (and\n    (or \n      (and (stored ?entity) (in ?entity ?container) (not (at ?entity ?loc))",
    "(:action use_slow_release\n    :parameters (?fertilizer - fertilizer ?plant - plant ?container - container ?loc - location)\n    :precondition (and (at ?fertilizer ?loc) (in ?plant ?container) (at ?container ?loc) (not (fertilized ?plant)))\n    :effect (and (fertilized ?plant))",
    "(:action use_bulb_composter\n    :parameters (?alice - alice)\n    :precondition (not (used_bulb_composter ?alice))\n    :effect (used_bulb_composter ?alice)\n)",
    "(:action use ; Use a resource to update the state of an entity\n    :parameters (?agent - agent ?resource - resource ?target - entity ?location - location)\n    :precondition (and (at ?resource ?location) (at ?agent ?location) (not (used ?agent ?resource ?target)))\n    :effect (used ?agent ?resource ?target)\n)",
    "(:action choose\n    :parameters (?agent - entity ?object - entity ?context - context)\n    :precondition (and (at ?agent ?context) (not (chosen ?agent ?object)))\n    :effect (and (chosen ?agent ?object))",
    "(:action treat ; Treat an entity and update its status\n  :parameters (?entity - object ?location - location)\n  :precondition (and (at ?entity ?location))\n  :effect (and (treated ?entity) (not (at ?entity ?location))",
    "(:action loosen\n  :parameters (?actor - agent ?location - place ?target - entity)\n  :precondition (and (at ?actor ?location))\n  :effect (and (loosened ?target))",
    "(:action pull ; Pull an entity from a container\n    :parameters (?agent - entity ?container - container ?item - object)\n    :precondition (and (contains ?container ?item))\n    :effect (and (exposed ?item) (not (contains ?container ?item))",
    "(:action cut ; Cut a resource and update task status\n  :parameters (?npc - npc ?location - location ?resource - resource)\n  :precondition (and (at ?npc ?location) (not (cut ?resource)))\n  :effect (and (cut ?resource) (not (has_resource ?resource ?location))",
    "(:action move ; Move an entity from one location to another\n  :parameters (?agent - agent ?entity - object ?from_location - location ?to_location - location)\n  :precondition (and (at ?entity ?from_location))\n  :effect (and (at ?entity ?to_location) (not (at ?entity ?from_location))",
    "(:action stop \n  :parameters (?npc - person ?entity - object ?location - place ?condition - predicate)\n  :precondition (and (at ?npc ?location) (?condition ?entity))\n  :effect (and (not (?condition ?entity))",
    "(:action stop\n    :parameters (?npc - person ?spider_mite - spider_mite ?location - place)\n    :precondition (and (at ?npc ?location) (alive ?spider_mite))\n    :effect (and (not (alive ?spider_mite))",
    "(:action stop\n    :parameters (?npc - person ?oak_log - oak ?location - path)\n    :precondition (and (at ?npc ?location) (not (at ?oak_log ?location)))\n    :effect (and (at ?oak_log ?location))",
    "(:action stop\n    :parameters (?npc - person ?kumquat - kumquat ?location - outside)\n    :precondition (and (at ?npc ?location) (at ?kumquat ?location))\n    :effect (and (not (at ?kumquat ?location))",
    "(:action learn ; Learn about a resource and acquire knowledge\n  :parameters (?entity - person ?resource - object)\n  :precondition (and (has_resource ?entity ?resource))\n  :effect (knowledge_acquired ?entity ?resource)\n)",
    "(:action unpack\n    :parameters (?agent - agent ?container - container ?item - object)\n    :precondition (and (at ?agent ?container) (in ?item ?container))\n    :effect (and (not (in ?item ?container))",
    "(:action plant ; Planting action for various entities\n  :parameters (?entity - entity ?location - location ?container - container ?npc - npc ?player - player)\n  :precondition (and \n    (or (at ?npc ?location) (at ?player ?container)) \n    (or (hole_dug ?location) (location ?container in_garden)) \n    (or (soil_checked ?location) (at ?entity ?container)) \n    (or (inventory ?npc ?entity) (inventory ?player ?entity))\n    (not (planted ?entity ?location))\n    (not (planted ?fir ?container))\n  )\n  :effect (and \n    (planted ?entity ?location) \n    (planted ?fir ?container)\n    (not (inventory ?npc ?entity))",
    "(:action stake_oak\n    :parameters (?npc - npc ?oak - oak ?oak_log - oak_log)\n    :precondition (and (at ?npc ?oak_log) (inventory ?npc ?oak))\n    :effect (and (staked ?oak ?oak_log) (not (inventory ?npc ?oak))",
    "(:action replant_new_bulb\n    :parameters (?bulb - bulb ?garden_center - garden_center)\n    :precondition (and (not (replanted ?bulb ?garden_center)) (composition ?bulb wicked))\n    :effect (and (replanted ?bulb ?garden_center) (composition ?bulb wickless))",
    "(:action replant ; Replant a resource and update its state\n    :parameters (?resource - object ?location - location)\n    :precondition (and (not (replanted ?resource ?location)) (composition ?resource wicked))\n    :effect (and (replanted ?resource ?location) (composition ?resource wickless))",
    "(:action transplant\n  :parameters (?actor - agent ?source - location ?target - location ?item - object)\n  :precondition (and (at ?actor ?source)\n                     (not (at ?item ?target))\n                     (condition ?item ?source))\n  :effect (and (at ?item ?target)\n               (not (at ?item ?source))",
    "(:action harvest ; Harvest a resource and update its status\n  :parameters (?npc - npc ?resource - resource)\n  :precondition (and (at ?resource outside) (ripe ?resource))\n  :effect (and (inventory ?npc ?resource) (not (at ?resource outside))",
    "(:action determine_where_to_plant :parameters (?f - fir ?c - container ?p - player) :precondition (and (at ?p ?c) (inventory ?p ?f)) :effect (determined ?c))",
    "(:action determine\n  :parameters (?agent - agent ?entity - object ?context - context)\n  :precondition (and (at ?agent ?context) (inventory ?agent ?entity))\n  :effect (determined ?context)\n)",
    "(:action sliplargerbuck ; Transform an entity's visibility state\n:parameters (?entity - object)\n:precondition (and (visible ?entity))\n:effect (sealed ?entity))",
    "(:action apply_soil\n    :parameters (?fir - fir ?container - container ?soil - soil)\n    :precondition (and (at ?fir ?container) (at ?soil ?container))\n    :effect (and (soil_applied ?fir ?container) (not (at ?soil ?container))",
    "(:action apply\n    :parameters (?agent - person ?entity - object ?resource - object ?location - location)\n    :precondition (and (at ?entity ?location) (at ?resource ?location) (available ?agent))\n    :effect (and (applied ?entity ?resource) (not (at ?resource ?location))",
    "(:action adjust ; Adjust a parameter of an entity to change its state\n  :parameters (?entity - object ?adjustment - object)\n  :precondition (and (at ?entity ?location) (at ?adjustment ?location))\n  :effect (and (state_adjusted ?entity) (not (at ?adjustment ?location))",
    "(:action gotolocation\n  :parameters (?agent - agent ?entity - object ?location1 - location ?location2 - location)\n  :precondition (and (at ?agent ?location1) (at ?entity ?location2))\n  :effect (and (moved ?entity ?location2) (not (at ?entity ?location1))"
]