[
    "(:action make\n    :parameters (?entity - object ?state1 - state ?state2 - state ?context - context)\n    :precondition (and \n                    (current_shape ?entity ?state1)\n                    (applicable_context ?entity ?context)\n                  )\n    :effect (and \n              (current_shape ?entity ?state2)\n              (updated_context ?entity ?context)\n            )",
    "(:action hang ; Hang an item and update its status\n  :parameters (?entity - object ?support - object)\n  :precondition (and (available ?support) (not (hung ?entity ?support)))\n  :effect (and (in_use ?support) (hung ?entity ?support))",
    "(:action roll ; Transform the state of an entity's hair\n    :parameters (?npc - person ?h - hair)\n    :precondition (and (hair_attached ?h ?npc) (or (shape ?h fishtail_braid) (hair_position ?npc normal)))\n    :effect (and (or (shape ?h bun) (hair_position ?npc swept_to_side))",
    "(:action cut\n  ; Cut an object and update its status\n  :parameters (?npc - person ?item - object)\n  :precondition (and\n                  (length ?item longer)\n                  (state ?item uncut)\n                )\n  :effect (and\n            (length ?item shorter)\n            (state ?item cut)\n            (not (length ?item longer))",
    "(:action divide ; Divide and transform the state of an entity\n  :parameters (?npc - person ?item - object ?attribute - attribute ?state - state)\n  :precondition (and \n                  (available ?npc)\n                  (state ?item ?state)\n                )\n  :effect (and \n            (transformed ?item ?attribute)\n            (not (state ?item ?state))",
    "(:action repeat ; Perform a repetitive task to transform the state of an entity\n  :parameters (?entity - object ?context - context ?attribute - attribute ?state1 - state ?state2 - state)\n  :precondition (and\n                  (has-state ?entity ?state1)\n                  (context ?entity ?context)\n                  (attribute ?entity ?attribute)\n                  (not (has-state ?entity ?state2))\n                )\n  :effect (and\n            (has-state ?entity ?state2)\n            (not (has-state ?entity ?state1))",
    "(:action peel ; Transform the state of an item or person\n  :parameters (?actor - person ?item - object)\n  :precondition (and \n                  (or \n                      (state ?item on_roll)\n                      (focus ?actor focused_on_making_bracelet)\n                  )\n                )\n  :effect (and \n              (or \n                  (and (state ?item unrolled) (not (state ?item on_roll))",
    "(:action pull ; Perform a pull-related task and update the state\n  :parameters (?agent - entity ?resource - object ?target1 - entity ?target2 - entity)\n  :precondition (and \n                  (or (decoration ?agent camouflaged) ; for pull_twice\n                      (rope-braided ?resource)        ; for pass_end_through_loop\n                      (length-divided ?agent))        ; for slip_larger_beads\n                  (or (visibility ?agent invisible)   ; additional precondition for pull_twice\n                      (and (rope-braided ?resource)   ; ensuring rope is braided twice for pass_end_through_loop\n                           (rope-braided ?resource)))\n                )\n  :effect (and \n            (or (visibility ?agent visible)           ; effect for pull_twice\n                (end-passed-through ?resource ?target1 ?target2) ; effect for pass_end_through_loop\n                (beads-slipped ?agent))",
    "(:action secure\n    :parameters (?entity - object ?item - object ?state1 - state ?state2 - state)\n    :precondition (and \n                    (current_state ?entity ?state1)\n                    (available ?item)\n                  )\n    :effect (and \n              (current_state ?entity ?state2)\n              (used ?item)\n              (not (current_state ?entity ?state1))",
    "(:action learn ; Learn a new skill or knowledge\n    :parameters (?npc - person ?skill - skill)\n    :precondition (not (knows ?npc ?skill))\n    :effect (knows ?npc ?skill)\n)",
    "(:action try\n    :parameters (?npc - person ?item - object)\n    :precondition (and\n                    (knows_Dutch_braid ?npc)\n                    (shape ?item straight)\n                  )\n    :effect (shape ?item twisted_and_folded)\n)",
    "(:action push_long_side_through_loop\n    :parameters (?l - loop ?p - player)\n    :precondition (loop-created ?l)\n    :effect (long-side-pushed ?l ?p)\n  )",
    "(:action push ; Push a component through a loop or form a new loop\n    :parameters (?entity - object ?loop - loop ?actor - person)\n    :precondition (and (loop-created ?loop) (not (pushed ?entity ?loop)))\n    :effect (pushed ?entity ?loop)\n)",
    "(:action cross ; Transition the state of an entity\n  :parameters (?entity - entity ?state1 - state ?state2 - state)\n  :precondition (and (?state1 ?entity) (not (?state2 ?entity)))\n  :effect (and (?state2 ?entity) (not (?state1 ?entity))",
    "(:action bend ; Bend an entity to a desired shape\n  :parameters (?n - npc ?s - shape)\n  :precondition (and (ready_to_bend ?n) (not (bent ?n ?s)))\n  :effect (bent ?n ?s))",
    "(:action braid_strands\n    :parameters (?n - npc)\n    :precondition (and (rack-hung ?n))\n    :effect (braided ?n)\n)",
    "(:action braid\n  :parameters (?agent - entity ?resource - object)\n  :precondition (and (available ?agent) (rack-hung ?resource))  ; Assuming rack-hung is a precondition for braiding\n  :effect (braided ?resource)\n)",
    "(:action StartWithSmoothTangleFreeHair :parameters (?h - hair) :precondition (not (smooth ?h)) :effect (smooth ?h))",
    "(:action update_state ; General action to update the state of an entity\n  :parameters (?entity - object ?property - attribute)\n  :precondition (not (has_attribute ?entity ?property))\n  :effect (has_attribute ?entity ?property))",
    "(:action transform_state ; General action to transform the state of an entity\n    :parameters (?npc - person ?entity - object ?state - state ?new_state - state)\n    :precondition (and (available ?npc) (not (equals ?entity ?new_state)))\n    :effect (and (equals ?entity ?new_state))",
    "(:action PlaitAsNormal ; Transform an object's state from 'separated' to 'plaited'\n    :parameters (?entity - object)\n    :precondition (and (separated ?entity) (not (plaited ?entity)))\n    :effect (plaited ?entity)\n)",
    "(:action TransformHair\n    :parameters (?npc - person ?h - hair)\n    :precondition (and \n        (not (secured ?h))\n        (or \n            (not (smooth ?h)) \n            (and (smooth ?h) (not (separated ?h)))\n            (and (smooth ?h) (separated ?h) (not (plaited ?h)))\n            (plaited ?h)\n        )\n    )\n    :effect (and\n        (when (not (smooth ?h))",
    "(:action interact_and_update ; Interact with an entity to perform a task and update its status\n  :parameters (?npc - agent ?entity - object)\n  :precondition (and (available ?npc) (not (updated ?npc ?entity)))\n  :effect (updated ?npc ?entity)\n)",
    "(:action PullHair ; Pull hair and update the state of the entity\n  :parameters (?npc - person ?tool - object)\n  :precondition (and (gathered ?npc) (not (pulled ?npc ?tool)))\n  :effect (pulled ?npc ?tool)\n)",
    "(:action BraidHair\n   :parameters (?npc - person ?s - scissors)\n   :precondition (and (not (gathered ?npc)) (not (pulled ?npc)) (not (braided ?npc)))\n   :effect (and (gathered ?npc) (pulled ?npc) (braided ?npc))",
    "(:action FashionBraidedLeather ; Fashion braided leather and update its status\n  :parameters (?entity - object)\n  :precondition (not (fashioned ?entity))\n  :effect (fashioned ?entity)\n)",
    "(:action MakeCompleted\n    :parameters (?entity - object)\n    :precondition (not (completed ?entity))\n    :effect (completed ?entity)\n)",
    "(:action transform_state\n  :parameters (?entity - object ?state1 - state ?state2 - state)\n  :precondition (and (?state1 ?entity) (not (?state2 ?entity)))\n  :effect (and (not (?state1 ?entity))",
    "(:action transform_state\n  :parameters (?npc - person ?book - book)\n  :precondition (and (available ?npc) (not (checked_list ?npc ?book)))\n  :effect (and (not (available ?npc))",
    "(:action transform_state\n  :parameters (?leader - player ?member - player ?bc - book_club)\n  :precondition (and (in ?leader ?bc) (in ?member ?bc) (not (loan_tracker ?member ?bc)))\n  :effect (and (not (in ?leader ?bc))",
    "(:action transform_state\n  :parameters (?l - leather)\n  :precondition (and (fashioned ?l) (not (used_as_ring ?l)))\n  :effect (and (not (fashioned ?l))",
    "(:action braiding ;  Perform a braiding task on an entity to change its decoration or organization state\n  :parameters (?entity - object ?decor - state ?organize - state)\n  :precondition (and \n                  (or (decoration ?entity ?decor) (organization ?entity ?organize))\n                  (or (visibility ?entity visible) (equipment ?entity unorganized))\n                )\n  :effect (and \n            (or (decoration ?entity camouflaged) (organization ?entity gathered))",
    "(:action start_task\n    :parameters (?entity - object ?task - task_type)\n    :precondition (and (not (task_completed ?entity ?task)))\n    :effect (task_completed ?entity ?task)\n)",
    "(:action PartOfHair\n       :parameters (?n - npc)\n       :precondition (and (blow_dried ?n) (not (parted ?n)))\n       :effect (parted ?n)\n   )",
    "(:action style_hair\n    :parameters (?n - npc)\n    :precondition (and (blow_dried ?n) (not (parted ?n)))\n    :effect (parted ?n)\n)",
    "(:action ApplyGelControlPomade\n    :parameters (?entity - agent ?item1 - item ?item2 - item)\n    :precondition (and (prepared ?entity) (not (applied ?item1)) (not (applied ?item2)))\n    :effect (and (applied ?item1) (applied ?item2))",
    "(:action StartBraid\n    :parameters (?n - npc)\n    :precondition (and (applied ?g) (applied ?p) (not (braiding ?n)))\n    :effect (braiding ?n)\n  )",
    "(:action StartProcess\n    :parameters (?entity - agent ?process - activity)\n    :precondition (and (applied ?g ?entity) (applied ?p ?entity) (not (engaged_in ?entity ?process)))\n    :effect (engaged_in ?entity ?process)\n)",
    "(:action StartDutchBraid\n    :parameters (?n - npc)\n    :precondition (and (braiding ?n) (not (dutch_braiding ?n)))\n    :effect (dutch_braiding ?n)\n)",
    "(:action StartTask\n    :parameters (?n - entity ?task - task)\n    :precondition (and (ready_for ?n ?task) (not (started ?n ?task)))\n    :effect (started ?n ?task)\n)",
    "(:action BendToIntoHalfTwice\n        :parameters (?n - npc)\n        :precondition (dutch_braiding ?n)\n        :effect (half_bent ?n)\n    )",
    "(:action BendToIntoHalfTwice ; Bend an NPC into half twice\n    :parameters (?n - npc)\n    :precondition (dutch_braiding ?n)\n    :effect (half_bent_twice ?n)\n)",
    "(:action FinishWithBraid ; Complete a task involving braiding\n  :parameters (?n - npc ?item - object)\n  :precondition (and (half_bent ?n) (not (completed ?n ?item)))\n  :effect (and (braided ?n) (finished_braid ?item) (completed ?n ?item))",
    "(:action RepeatProcess\n  :parameters (?entity - agent ?task - task)\n  :precondition (and (completed ?entity ?task))\n  :effect (and (repeated ?entity ?task))",
    "(:action CrossBraids\n    :parameters (?n - npc ?b - braid ?g - gel ?p - pomade)\n    :precondition (and (available ?n)\n                       (not (checked ?n ?b))\n                       (not (blow_dried ?n))\n                       (not (parted ?n))\n                       (not (applied ?g))\n                       (not (applied ?p))\n                       (not (braiding ?n))\n                       (not (dutch_braiding ?n))\n                       (not (half_bent ?n))\n                       (not (finished_braid ?b))\n                       (not (repeated ?n))\n                       (repeated ?n)\n                       (not (crossed_braids ?n ?b)))\n    :effect (and (checked ?n ?b)\n                 (blow_dried ?n)\n                 (parted ?n)\n                 (applied ?g)\n                 (applied ?p)\n                 (braiding ?n)\n                 (dutch_braiding ?n)\n                 (half_bent ?n)\n                 (finished_braid ?b)\n                 (repeated ?n)\n                 (crossed_braids ?n ?b))",
    "(:action PartHair\n    :parameters (?npc - person)\n    :precondition (not (parted ?npc))\n    :effect (parted ?npc)\n)",
    "(:action transform_state\n    :parameters (?entity - entity ?state - state)\n    :precondition (not (in_state ?entity ?state))\n    :effect (in_state ?entity ?state)\n)",
    "(:action GrabSmallArea ; Grab a small area with a specific tool\n  :parameters (?npc - person ?tool - tool)\n  :precondition (and (parted ?npc) (not (grabbed ?npc)))\n  :effect (grabbed ?npc)\n)",
    "(:action DivideSection\n        :parameters (?section - hair_section)\n        :precondition (and (grabbed ?npc) (not (divided ?section)))\n        :effect (divided ?section)\n    )",
    "(:action transform ; Transform a resource and update its status\n    :parameters (?npc - entity ?item - resource)\n    :precondition (and (available ?npc) (not (transformed ?npc ?item)))\n    :effect (transformed ?npc ?item)\n)",
    "(:action TieStrands ; Universal action to tie strands and update status\n  :parameters (?entity - person ?item - object)\n  :precondition (and (divided ?item) (not (tied ?item)))\n  :effect (tied ?item)\n)",
    "(:action AddHairToStrand ; Add hair to a strand and update the status\n    :parameters (?entity - object ?section - part)\n    :precondition (and (tied ?section) (not (added ?section)))\n    :effect (added ?section)\n)",
    "(:action TieWithSpider ; Use an abstract tool to perform a task on an object\n  :parameters (?entity - person ?object - object ?tool - tool)\n  :precondition (and (available ?entity) (prepared ?object) (not (used ?entity ?object)))\n  :effect (and (used ?entity ?object) (updated_state ?object ?tool))",
    "(:action TieBraid\n  :parameters (?npc - person ?item - object)\n  :precondition (and (available ?npc) (added ?item))\n  :effect (tied ?item)\n)",
    "(:action BendToShapeOthersHair ;  Bend an element into a desired shape\n    :parameters (?npc - person ?section - object)\n    :precondition (and (available ?npc) (tied_braid ?section))\n    :effect (shaped ?npc ?section)\n)",
    "(:action transform_state\n  :parameters (?entity - object ?state1 - state ?state2 - state)\n  :precondition (and (current_state ?entity ?state1) (not (current_state ?entity ?state2)))\n  :effect (and (not (current_state ?entity ?state1))",
    "(:action transform_state\n     :parameters (?npc - person ?hair_unparted - state ?hair_parted - state)\n     :precondition (and (current_state ?npc ?hair_unparted) (not (current_state ?npc ?hair_parted)))\n     :effect (and (not (current_state ?npc ?hair_unparted))",
    "(:action transform_state\n     :parameters (?npc - person ?hair_parted - state ?hair_grabbed - state)\n     :precondition (and (current_state ?npc ?hair_parted) (not (current_state ?npc ?hair_grabbed)))\n     :effect (and (not (current_state ?npc ?hair_parted))",
    "(:action transform_state\n     :parameters (?pony - ponytail ?pony_gathered - state ?pony_twisted - state)\n     :precondition (and (current_state ?pony ?pony_gathered) (not (current_state ?pony ?pony_twisted)))\n     :effect (and (not (current_state ?pony ?pony_gathered))"
]