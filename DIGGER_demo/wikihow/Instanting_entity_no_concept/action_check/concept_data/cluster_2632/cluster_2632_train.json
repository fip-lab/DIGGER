[
    "```pddl\n['(:action cook\n  :parameters (?agent - agent ?item - item ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (at ?item ?location)\n    (not (cooked ?item))\n  )\n  :effect (and \n    (cooked ?item)\n    (not (raw ?item))\n  )\n)', '(:action prepare\n  :parameters (?agent - agent ?item - item ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (inventory ?agent ?item)\n    (not (processed ?item))\n  )\n  :effect (and \n    (processed ?item)\n    (not (inventory ?agent ?item))\n  )\n)', '(:action make\n  :parameters (?agent - agent ?item - item ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (not (created ?item))\n  )\n  :effect (and \n    (created ?item)\n  )\n)', '(:action combine\n  :parameters (?agent - agent ?item1 - item ?item2 - item ?result - item ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (inventory ?agent ?item1)\n    (inventory ?agent ?item2)\n    (not (combined ?item1 ?item2 ?result))\n  )\n  :effect (and \n    (combined ?item1 ?item2 ?result)\n    (not (inventory ?agent ?item1))\n    (not (inventory ?agent ?item2))\n    (inventory ?agent ?result)\n  )\n)', '(:action heat\n  :parameters (?agent - agent ?item - item ?appliance - appliance ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (at ?item ?appliance)\n    (heated ?appliance)\n  )\n  :effect (and \n    (heated ?item)\n  )\n)', '(:action mix\n  :parameters (?agent - agent ?item - item ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (not (mixed ?item))\n  )\n  :effect (and \n    (mixed ?item)\n  )\n)', '(:action finish\n  :parameters (?agent - agent ?item - item ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (cooked ?item)\n  )\n  :effect (and \n    (finished ?item)\n  )\n)', '(:action serve\n  :parameters (?agent - agent ?meal - item ?location - location)\n  :precondition (and \n    (at ?agent ?location)\n    (finished ?meal)\n    (not (served ?meal))\n  )\n  :effect (and \n    (served ?meal)\n  )\n)', '(:action boil\n  :parameters (?agent - agent ?item - item ?container - tool ?location - location)\n  :precondition (and \n    (inventory ?agent ?item) \n    (at ?container ?location) \n    (not (processed ?item))\n    (or (and (type ?item meat) (heated ?container))\n        (and (type ?item mixture) (at ?item freezer) (frozen ?item))\n        (and (type ?item toast) (untreated ?item))\n        (and (type ?item patties) (clean ?container))\n    )\n  )\n  :effect (and \n    (processed ?item)\n    (or (and (type ?item meat) (flattened ?item) (in-container ?item ?container))\n        (and (type ?item mixture) (mixed ?item))\n        (and (type ?item toast) (toasted ?item))\n        (and (type ?item patties) (cooked ?item))\n    )\n  )\n)', '(:action finish\n  :parameters (?agent - agent ?item - item ?location - location ?state_before - state ?state_after - state)\n  :precondition (and (at ?agent ?location) (?state_before ?item))\n  :effect (and (?state_after ?item) (not (?state_before ?item)))\n)', '(:action place\n  :parameters (?actor - agent ?item - item ?target - object ?location - location)\n  :precondition (and\n    (available ?actor)\n    (or (and (ingredient ?item) (tool ?target) (at ?item ?location) (at-tool ?target ?location))\n        (and (beef ?item) (stove_knob ?target) (seasoned ?item) (fire ?target))\n        (and (burger ?item) (cooked ?item) (at-tool ?item ?location))\n        (and (flattened ?item) (in-pan ?item))\n        (chilled ?item)\n        (and (food ?item) (container ?target) (full ?target))\n    )\n  )\n  :effect (and\n    (or (and (in ?item ?target) (not (at ?item ?location)))\n  )\n)', '(:action choose\n  :parameters (?actor - agent ?item - item ?location - location ?new_location - location)\n  :precondition (and (at ?item ?location) (not (chosen ?actor ?item)))\n  :effect (and \n    (chosen ?actor ?item)\n    (not (at ?item ?location))\n    (at ?item ?new_location)\n  )\n)', '(:action add\n  :parameters (?entity - item ?container - container ?tool - tool ?location - location)\n  :precondition (and\n    (at ?entity ?location)\n    (at-tool ?tool ?location)\n    (not (in ?entity ?container))\n    (or (empty ?container) (at_location ?entity in_drawer))\n    (or (power ?tool off) (composition ?tool isolated))\n  )\n  :effect (and\n    (in ?entity ?container)\n    (not (at ?entity ?location))\n  )\n)', '(:action chill\n  :parameters (?agent - agent ?item - item)\n  :precondition (and (inventory ?agent ?item) (not (chilled ?item)))\n  :effect (and (chilled ?item) (not (inventory ?agent ?item)))\n)', '(:action pull\n  :parameters (?actor - agent ?entity - item)\n  :precondition (and (formed ?entity) (not (adjusted ?entity)))\n  :effect (adjusted ?entity)\n)', '(:action check\n  :parameters (?agent - agent ?entity - item)\n  :precondition (and (available ?agent) (not (checked ?agent ?entity)))\n  :effect (checked ?agent ?entity)\n)', '(:action free\n  :parameters (?actor - agent ?item - item ?location - location)\n  :precondition (and (inventory ?actor ?item) (not (at ?item ?location)))\n  :effect (and (at ?item ?location) (not (inventory ?actor ?item)))\n)', '(:action remove\n  :parameters (?agent - agent ?item - item ?location - location)\n  :precondition (and (at ?agent ?location) (at ?item ?location) (ready_for_removal ?item))\n  :effect (and (inventory ?agent ?item) (not (at ?item ?location)))\n)', '(:action eat\n  :parameters (?agent - agent ?item - item ?grill - appliance ?stove_knob - appliance ?fridge - appliance)\n  :precondition (and \n    (at ?agent ?fridge)         \n    (in_fridge ?item ?fridge)    \n    (not (inventory ?agent ?item)) \n    (not (cooked ?item))    \n    (at ?agent ?grill)           \n    (off ?grill)             \n    (off ?stove_knob)             \n  )\n  :effect (and \n    (inventory ?agent ?item)    \n    (not (in_fridge ?item ?fridge))\n  )\n)', '(:action serve\n  :parameters (?food - item ?container - container ?new_container - container)\n  :precondition (and\n    (at_location ?food ?container)\n    (temperature ?food hot)\n  )\n  :effect (and\n    (not (at_location ?food ?container))\n    (at_location ?food ?new_container)\n  )\n)']\n```"
]