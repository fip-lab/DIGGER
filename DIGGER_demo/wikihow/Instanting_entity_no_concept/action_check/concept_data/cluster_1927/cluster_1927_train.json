[
    "```pddl\n['(:action print ; Print or record a resource and update task status\n    :parameters (?agent - agent ?resource - resource ?location - location)\n    :precondition (and (at ?agent ?location) (available ?resource))\n    :effect (and (recorded ?agent ?resource) (not (at ?resource online)))\n)',\n\n'(:action make\n  :parameters (?entity - entity ?item - object ?context - location)\n  :precondition (and (at ?entity ?context)\n                     (or (clean ?context)\n                         (knowledge ?entity umbrella_care)\n                         (bare ?entity)\n                         (empty ?item)\n                         (studio_availability ?context set_up)\n                         (decoration ?entity camouflaged)\n                         (knowledgeable ?entity)\n                         (has_materials ?entity)\n                         (inventory ?entity ?item)\n                         (informed ?entity)))\n  :effect (and (or (dessert ?entity ?context)\n                   (knowledge ?entity rain_water_use)\n                   (camouflaged ?entity)\n                   (full ?item)\n                   (album_created ?entity)\n                   (plain ?entity)\n                   (pruned ?context)\n                   (list_created ?entity)\n                   (inventory ?entity ?item)\n                   (transformed ?item)\n                   (members_know ?entity)))\n)',\n\n'(:action gather\n  :parameters (?actor - entity ?target - entity ?location - location)\n  :precondition (and \n    (at ?actor ?location) \n    (not (gathered ?target)) \n    (or \n      (absent ?target)\n      (camouflaged ?target)\n      (not (present ?target))\n      (dry ?target)\n      (visible ?target)\n      (track_stability ?target jerky)\n      (graduated ?actor)\n      (clean ?target)\n      (planned ?target)\n      (in_store ?target ?location)\n      (npc ?target)\n    )\n  )\n  :effect (and \n    (gathered ?target) \n    (present ?target) \n    (not (absent ?target)))\n)',\n\n'(:action study ; Study a resource and gain knowledge\n  :parameters (?p - entity ?resource - resource)\n  :precondition (and (at ?p ?resource_location) (not (knowledge ?p ?resource)))\n  :effect (knowledge ?p ?resource)\n)',\n\n'(:action learn ; Learn a new piece of knowledge or share it through reading\n  :parameters (?p - entity ?x - entity ?y - entity)\n  :precondition (and (at ?p home) (knowledge ?p ?x))\n  :effect (and (knowledge ?p ?y) (knowledge_shared ?p ?y ?x))\n)',\n\n'(:action listen ; Listen to a source of information and update knowledge status\n  :parameters (?agent - entity ?source - entity)\n  :precondition (and (in_proximity ?agent ?source) (not (informed ?agent ?source)))\n  :effect (and (informed ?agent ?source) (not (uninformed ?agent ?source)))\n)',\n\n'(:action seek_health_improvement ; Seek health improvement through interaction with environment and NPCs\n  :parameters (?person - entity ?location - location ?helper - entity)\n  :precondition (and (ready ?person) (suitable ?location) (assisting ?helper))\n  :effect (and (improved ?person) (changed ?location) (assisted ?helper))\n)',\n\n'(:action proceed_to_main_exhibition ; Move an entity to the main exhibition area after exploring exhibits\n  :parameters (?entity - entity ?start - location ?end - location)\n  :precondition (and (explored ?entity ?start) (at ?entity ?start))\n  :effect (and (at ?entity ?end) (not (at ?entity ?start)))\n)',\n\n'(:action count ; Count an item and update knowledge status\n :parameters (?entity - entity ?item - object)\n :precondition (and (knowledge ?entity ?item_superstition) (not (knowledge ?entity ?item_count)))\n :effect (knowledge ?entity ?item_count)\n)',\n\n'(:action take\n  :parameters (?agent - entity ?subject - entity ?context - context)\n  :precondition (and \n                  (available ?agent)\n                  (not (processed ?agent ?subject ?context))\n                  (relevant ?subject ?context))\n  :effect (and \n            (processed ?agent ?subject ?context)\n            (update_state ?agent ?subject ?context))\n)',\n\n'(:action keep\n  :parameters (?npc - entity ?item - entity ?loc - location)\n  :precondition (and (at ?npc ?loc) (or (visibility ?npc visible) (lit ?item) (available ?npc)))\n  :effect (and (or (visibility ?npc invisible) (burning ?item) (checked ?npc ?item)))\n)',\n\n'(:action go ; Navigate between locations and update visibility\n    :parameters (?npc - entity ?loc1 - location ?loc2 - location ?dir - direction)\n    :precondition (and \n        (visible ?npc) \n        (at ?npc ?loc1) \n        (connected ?loc1 ?dir ?loc2) \n        (not (blocked ?loc1 ?dir ?loc2))\n    )\n    :effect (and \n        (at ?npc ?loc2) \n        (not (at ?npc ?loc1)))\n)',\n\n'(:action train\n  :parameters (?trainer - entity ?trainee - entity ?resource - object)\n  :precondition (and (untrained ?trainee) (prepared ?resource))\n  :effect (and (trained ?trainee) (used ?resource) (not (untrained ?trainee)))\n)',\n\n'(:action go_visibility\n  :parameters (?npc - entity ?museum - location)\n  :precondition (and (visible ?npc) (accessible ?museum))\n  :effect (and (not (visible ?npc)))\n)',\n\n'(:action listen_to_lecture\n  :parameters (?npc - entity ?lecture - event)\n  :precondition (and (uninformed ?npc) (available ?lecture))\n  :effect (and (informed ?npc) (attended ?npc ?lecture))\n)',\n\n'(:action create_members_know\n  :parameters (?npc - entity ?event - event ?members - group)\n  :precondition (and (aware ?npc ?event) (not (aware ?members ?event)))\n  :effect (and (aware ?members ?event))\n)',\n\n'(:action organize_event\n  :parameters (?organizer - entity ?area - location ?event - event)\n  :precondition (and (not (organized ?area ?event)))\n  :effect (and (organized ?area ?event))\n)',\n\n'(:action train_new_member\n  :parameters (?trainer - entity ?trainee1 - entity ?trainee2 - entity ?resource - activity)\n  :precondition (and (untrained ?trainee1) (untrained ?trainee2) (prepared ?resource))\n  :effect (and (trained ?trainee1) (trained ?trainee2) (used ?resource) (not (untrained ?trainee1)))\n)',\n\n'(:action review ; General action to review and update the status of an entity\n  :parameters (?actor - entity ?entity - object ?state_before - state ?state_after - state)\n  :precondition (and (focused_on ?actor ?entity) (state ?entity ?state_before))\n  :effect (and (focused_on ?actor ?entity) (state ?entity ?state_after))\n)',\n\n'(:action spot ; Spot an entity and update its status\n  :parameters (?agent - entity ?entity - object)\n  :precondition (and (step ?agent unselected) (not (spotted ?agent ?entity)))\n  :effect (and (step ?agent selected) (spotted ?agent ?entity))\n)',\n\n'(:action throw ; Organize and execute a variety of parties or celebrations\n  :parameters (?p - entity ?l - location)\n  :precondition (and \n    (graduated ?p)   ; applicable for party in basement\n    (at ?p ?l)       ; applicable for party in basement and block party\n    (location ?p in_cabinet)   ; applicable for punctuation party\n    (availability ?l absent)   ; applicable for party in basement\n    (availability ?l present)  ; applicable for block party\n  )\n  :effect (and \n    (party ?p ?l)        ; applicable for party in basement\n    (location ?p on_table)   ; applicable for punctuation party\n    (coverage ?l covered)    ; applicable for block party\n    (availability ?l present) ; applicable for party in basement\n    (not (coverage ?l uncovered)))\n)',\n\n'(:action go ; Move an entity between locations\n  :parameters (?npc - entity ?from - location ?to - location)\n  :precondition (and (at ?npc ?from))\n  :effect (and (not (at ?npc ?from)) (at ?npc ?to))\n)',\n\n'(:action show ; Show a resource to an entity and update the display status\n  :parameters (?npc - entity ?item - object)\n  :precondition (and (not (shown ?npc ?item)))\n  :effect (and (shown ?npc ?item))\n)',\n\n'(:action understand ; Understand a concept and update knowledge status\n  :parameters (?npc - entity ?concept - concept ?loc - location)\n  :precondition (and (visible ?npc) (or (at ?npc ?loc) (not (at ?npc ?loc))))\n  :effect (and (knowledgeable ?npc ?concept) (understands ?npc ?concept))\n)',\n\n'(:action stay ; Stay in a state to achieve a goal\n  :parameters (?npc - entity ?state - goal_state ?loc - location)\n  :precondition (and (precondition_for_state ?npc ?state) (at ?npc ?loc))\n  :effect (achieved_state ?npc ?state)\n)',\n\n'(:action set_monument_to_autumn\n  :parameters (?npc - entity ?sh - stonehouse)\n  :precondition (and (knowledgeable ?npc) (unchosen ?sh))\n  :effect (and (selected ?sh) (decorated ?npc))\n)',\n\n'(:action set_fire\n  :parameters (?p - entity ?l - location)\n  :precondition (and (at ?p ?l) (at flag_parade ?l) (status flag_parade in_progress))\n  :effect (and (status flag_parade completed) (not (status flag_parade in_progress)))\n)',\n\n'(:action fill_bottles\n  :parameters (?p - entity ?b - bottles)\n  :precondition (and (at ?p bathroom) (empty ?b) (dry ?b))\n  :effect (and (full ?b) (wet ?b))\n)',\n\n'(:action set\n  :parameters (?actor - entity ?entity - entity ?location - location ?status - status)\n  :precondition (and (available ?actor) (at ?actor ?location) (not (status ?entity ?status)))\n  :effect (and (status ?entity ?status))\n)',\n\n'(:action express_fall_awe\n  :parameters (?you - entity)\n  :precondition (and (focused ?you))\n  :effect (and (amazed ?you))\n)',\n\n'(:action express ; Express an emotion or state\n  :parameters (?actor - entity ?emotion - state)\n  :precondition (and (focused ?actor))\n  :effect (and (expressed ?actor ?emotion))\n)',\n\n'(:action honor ; Honor individuals or entities and perform associated tasks\n  :parameters (?npc - entity ?entity - entity ?task - task)\n  :precondition (and (exists ?npc) (suitable_for_honor ?entity) (task_available ?task))\n  :effect (and (task_completed ?task) (honored ?npc ?entity))\n)',\n\n'(:action perform_task ; Perform a general task and update its status\n  :parameters (?npc - entity ?task - task ?location - location ?object - object)\n  :precondition (and (exists ?npc) (task_available ?task) (location_available ?location) (object_available ?object))\n  :effect (and (task_completed ?npc ?task) (location_used ?location) (object_used ?object))\n)',\n\n'(:action play ; Engage in an activity and update task status\n  :parameters (?npc - entity ?activity - object)\n  :precondition (and (available ?npc) (not (participated ?npc ?activity)))\n  :effect (participated ?npc ?activity)\n)',\n\n'(:action pay ; Perform a payment or tribute action\n  :parameters (?actor - entity ?target - object)\n  :precondition (and (has_tickets ?actor) (at ?actor ?target) (visible ?target) (not (paid ?actor ?target)))\n  :effect (paid ?actor ?target)\n)',\n\n'(:action proceed ; Move an entity to a new location and update its status\n  :parameters (?entity - entity ?from - location ?to - location)\n  :precondition (and (at ?entity ?from) (not (at ?entity ?to)) (explored ?entity))\n  :effect (and (at ?entity ?to) (not (at ?entity ?from)))\n)',\n\n'(:action talk ; Share knowledge and update status\n  :parameters (?p - entity ?other - entity ?topic - topic)\n  :precondition (and (at ?p home) (at ?other home) (not (discussed ?p ?topic)))\n  :effect (and (discussed ?p ?topic) (knowledge_shared ?p ?other ?topic))\n)',\n\n'(:action reassure ; Reassure and support someone by sharing knowledge or preparing resources\n  :parameters (?p - entity ?target - entity ?item - object)\n  :precondition (and\n        (at ?p home)\n        (or\n            (and (at ?target home) (knowledge_shared ?p ?target puberty))\n            (and (in ?p kitchen) (not (ready ?item)))\n            (and (in ?p bathroom) (empty ?item) (dry ?item))\n        )\n    )\n  :effect (and\n        (or\n            (and (supported ?target) (reassured_with_stories ?target))))\n)',\n\n'(:action throwback_birthday_party\n  :parameters (?p - entity ?h - entity)\n  :precondition (and (at ?p ?h))\n  :effect (and (party throwback) (celebrating ?h))\n)',\n\n'(:action throwback ; Organize a throwback event and update status\n  :parameters (?actor - entity ?entity - entity)\n  :precondition (at ?actor ?entity)\n  :effect (and (party throwback) (celebrating ?entity))\n)',\n\n'(:action reinjoylife ; Engage in an activity and update its status\n  :parameters (?entity - entity ?activity - activity)\n  :precondition (and (activity_status ?activity unengaged))\n  :effect (and (activity_status ?activity engaged))\n)',\n\n'(:action punctuation ; Show punctuation some love and update its location\n  :parameters (?x - entity ?y - location ?z - location)\n  :precondition (and (at ?x ?y))\n  :effect (and (at ?x ?z))\n)',\n\n'(:action theme_plan ; theme lesson plans towards the number 100\n  :parameters (?e - entity)\n  :precondition (and (not (themed ?e)))\n  :effect (and (themed ?e))\n)',\n\n'(:action theme ; Apply a theme to an entity\n  :parameters (?entity - object)\n  :precondition (and (not (themed ?entity)))\n  :effect (themed ?entity)\n)',\n\n'(:action have ; Have an experience or status change for an entity\n  :parameters (?entity - object ?activity - activity)\n  :precondition (and (not (experienced ?entity ?activity)))\n  :effect (experienced ?entity ?activity)\n)',\n\n'(:action invite ; Invite a person to an event and update the invitation status\n  :parameters (?p - entity ?e - event ?i - entity)\n  :precondition (and (qualified ?p) (ready ?e) (not (invited ?i ?e)))\n  :effect (invited ?i ?e)\n)',\n\n'(:action be_creative\n  :parameters (?npc - entity)\n  :precondition (and (knowledgeable ?npc))\n  :effect (and (creative ?npc))\n)',\n\n'(:action be\n  :parameters (?entity - entity ?state - state ?new_state - state)\n  :precondition (and (?state ?entity))\n  :effect (and (?new_state ?entity))\n)',\n\n'(:action contemplate ; Reflect on a topic and update the state of contemplation\n  :parameters (?entity - entity ?topic - topic)\n  :precondition (and (knowledgeable ?entity) (not (contemplative ?entity)))\n  :effect (contemplative ?entity)\n)']\n```"
]