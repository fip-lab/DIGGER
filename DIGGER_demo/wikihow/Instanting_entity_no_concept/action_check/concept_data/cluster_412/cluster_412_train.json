[
    "```lisp\n[\n  (:action place\n    :parameters (?actor - agent ?item - object ?target - location_or_container)\n    :precondition (and \n      (possesses ?actor ?item) \n      (at ?actor ?target)\n      (not (placed ?item ?target))\n    )\n    :effect (and \n      (placed ?item ?target)\n    )\n  )\n\n  (:action dig\n    :parameters (?npc - agent ?item - entity ?location - place)\n    :precondition (and \n      (at ?npc ?location)\n      (or (not (dug ?item)) \n          (and (inventory ?npc ?item) (at ?item ?location))\n          (and (in_garden ?npc) (soil_removed ?item) (not (dug ?item)))\n      )\n    )\n    :effect (and \n      (dug ?item)\n    )\n  )\n\n  (:action remove\n    :parameters (?npc - agent ?item - entity ?location - place)\n    :precondition (and \n      (at ?npc ?location)\n      (or (and (at ?item ?location) (inventory ?npc ?item))\n          (and (in_garden ?item) (watered ?item))\n      )\n    )\n    :effect (and \n      (not (at ?item ?location))\n    )\n  )\n\n  (:action build\n    :parameters (?npc - agent ?structure - structure ?location - place)\n    :precondition (and \n      (at ?npc ?location)\n      (or (planted ?structure ?location)\n          (not (created ?structure)))\n    )\n    :effect (and \n      (or (water_basin_built ?location)\n          (created ?structure))\n    )\n  )\n\n  (:action prepare\n    :parameters (?npc - agent ?item - entity)\n    :precondition (and \n      (raw ?item))\n    :effect (and \n      (prepared ?item))\n  )\n\n  (:action check\n    :parameters (?npc - agent ?item - object ?location - place)\n    :precondition (and \n      (available ?npc)\n      (not (checked ?npc ?item))\n      (or (at ?npc ?location) (hole_dug ?location) (at ?npc ?gc))\n    )\n    :effect (and \n      (checked ?npc ?item)\n      (or (soil_checked ?location) (tested ?item))\n    )\n  )\n\n  (:action remove\n    :parameters (?npc - agent ?entity - entity ?location - location ?tool - tool)\n    :precondition (and \n      (at ?npc ?location) \n      (or (inventory ?npc ?tool) (accessible ?tool ?location))\n      (or\n        (and (inventory ?npc ?tool) (dirt ?entity))\n        (staked ?entity)\n        (and (tied ?entity ?location) (healed ?entity))\n        (and (cut_branch ?entity) (at ?npc ?location))\n        (and (at ?entity ?location) (watered ?entity))\n        (and (at ?entity ?location) (harvested ?entity))\n        (and (at ?npc ?location) (at ?entity ?location))\n      )\n    )\n    :effect (and \n      (not (dirt ?entity))\n    )\n  )\n\n  (:action add\n    :parameters (?actor - agent ?target - entity ?location - location ?state - state)\n    :precondition (and \n      (at ?actor ?location) \n      (not (in_state ?target ?state)) \n      (precondition_for_state_change ?actor ?target ?location ?state)\n    )\n    :effect (and \n      (in_state ?target ?state) \n      (postcondition_for_state_change ?actor ?target ?location ?state)\n    )\n  )\n\n  (:action drink_water\n    :parameters (?p - agent ?b - boxwood)\n    :precondition (and (at ?p ?b) (placed ?b))\n    :effect (watered ?b)\n  )\n\n  (:action drink\n    :parameters (?actor - agent ?resource - object)\n    :precondition (and (at ?actor ?resource) (not (used ?actor ?resource)))\n    :effect (and (used ?actor ?resource) (satisfied ?actor))\n  )\n\n  (:action keep\n    :parameters (?entity - object ?container - container ?loc - location ?npc - agent)\n    :precondition (and\n      (or \n        (and (at ?entity ?loc) (at ?container ?loc) (not (stored ?entity)))\n        (and (not (kept_in_spot ?entity)) (location ?entity in_cupboard))\n        (inventory ?npc ?entity)\n      )\n    )\n    :effect (and\n      (or \n        (and (stored ?entity) (in ?entity ?container) (not (at ?entity ?loc)))\n      )\n    )\n  )\n\n  (:action use_slow_release\n    :parameters (?fertilizer - fertilizer ?plant - plant ?container - container ?loc - location)\n    :precondition (and (at ?fertilizer ?loc) (in ?plant ?container) (at ?container ?loc) (not (fertilized ?plant)))\n    :effect (and (fertilized ?plant))\n  )\n\n  (:action use_bulb_composter\n    :parameters (?npc - agent)\n    :precondition (not (used_bulb_composter ?npc))\n    :effect (used_bulb_composter ?npc)\n  )\n\n  (:action use\n    :parameters (?agent - agent ?resource - resource ?target - entity ?location - location)\n    :precondition (and (at ?resource ?location) (at ?agent ?location) (not (used ?agent ?resource ?target)))\n    :effect (used ?agent ?resource ?target)\n  )\n\n  (:action choose\n    :parameters (?agent - agent ?object - entity ?context - context)\n    :precondition (and (at ?agent ?context) (not (chosen ?agent ?object)))\n    :effect (and (chosen ?agent ?object))\n  )\n\n  (:action treat\n    :parameters (?entity - object ?location - location)\n    :precondition (and (at ?entity ?location))\n    :effect (and (treated ?entity) (not (at ?entity ?location)))\n  )\n\n  (:action loosen\n    :parameters (?actor - agent ?location - place ?target - entity)\n    :precondition (and (at ?actor ?location))\n    :effect (and (loosened ?target))\n  )\n\n  (:action pull\n    :parameters (?agent - agent ?container - container ?item - object)\n    :precondition (and (contains ?container ?item))\n    :effect (and (exposed ?item) (not (contains ?container ?item)))\n  )\n\n  (:action cut\n    :parameters (?npc - agent ?location - place ?resource - resource)\n    :precondition (and (at ?npc ?location) (not (cut ?resource)))\n    :effect (and (cut ?resource) (not (has_resource ?resource ?location)))\n  )\n\n  (:action move\n    :parameters (?agent - agent ?entity - object ?from_location - location ?to_location - location)\n    :precondition (and (at ?entity ?from_location))\n    :effect (and (at ?entity ?to_location) (not (at ?entity ?from_location)))\n  )\n\n  (:action stop\n    :parameters (?npc - agent ?entity - object ?location - place ?condition - predicate)\n    :precondition (and (at ?npc ?location) (?condition ?entity))\n    :effect (and (not (?condition ?entity)))\n  )\n\n  (:action stop\n    :parameters (?npc - agent ?spider_mite - entity ?location - place)\n    :precondition (and (at ?npc ?location) (alive ?spider_mite))\n    :effect (and (not (alive ?spider_mite)))\n  )\n\n  (:action stop\n    :parameters (?npc - agent ?oak_log - object ?location - place)\n    :precondition (and (at ?npc ?location) (not (at ?oak_log ?location)))\n    :effect (and (at ?oak_log ?location))\n  )\n\n  (:action stop\n    :parameters (?npc - agent ?kumquat - entity ?location - place)\n    :precondition (and (at ?npc ?location) (at ?kumquat ?location))\n    :effect (and (not (at ?kumquat ?location)))\n  )\n\n  (:action learn\n    :parameters (?entity - agent ?resource - object)\n    :precondition (and (has_resource ?entity ?resource))\n    :effect (knowledge_acquired ?entity ?resource)\n  )\n\n  (:action unpack\n    :parameters (?agent - agent ?container - container ?item - object)\n    :precondition (and (at ?agent ?container) (in ?item ?container))\n    :effect (and (not (in ?item ?container)))\n  )\n\n  (:action plant\n    :parameters (?entity - entity ?location - location ?container - container ?npc - agent ?player - agent)\n    :precondition (and \n      (or (at ?npc ?location) (at ?player ?container)) \n      (or (hole_dug ?location) (location ?container in_garden)) \n      (or (soil_checked ?location) (at ?entity ?container)) \n      (or (inventory ?npc ?entity) (inventory ?player ?entity))\n      (not (planted ?entity ?location))\n      (not (planted ?fir ?container))\n    )\n    :effect (and \n      (planted ?entity ?location) \n      (planted ?fir ?container)\n      (not (inventory ?npc ?entity))\n    )\n  )\n\n  (:action stake_oak\n    :parameters (?npc - agent ?oak - oak ?oak_log - object)\n    :precondition (and (at ?npc ?oak_log) (inventory ?npc ?oak))\n    :effect (and (staked ?oak ?oak_log) (not (inventory ?npc ?oak)))\n  )\n\n  (:action replant_new_bulb\n    :parameters (?bulb - bulb ?garden_center - location)\n    :precondition (and (not (replanted ?bulb ?garden_center)) (composition ?bulb wicked))\n    :effect (and (replanted ?bulb ?garden_center) (composition ?bulb wickless))\n  )\n\n  (:action replant\n    :parameters (?resource - object ?location - location)\n    :precondition (and (not (replanted ?resource ?location)) (composition ?resource wicked))\n    :effect (and (replanted ?resource ?location) (composition ?resource wickless))\n  )\n\n  (:action transplant\n    :parameters (?actor - agent ?source - location ?target - location ?item - object)\n    :precondition (and (at ?actor ?source)\n                       (not (at ?item ?target))\n                       (condition ?item ?source))\n    :effect (and (at ?item ?target)\n                 (not (at ?item ?source))\n    )\n  )\n\n  (:action harvest\n    :parameters (?npc - agent ?resource - resource)\n    :precondition (and (at ?resource outside) (ripe ?resource))\n    :effect (and (inventory ?npc ?resource) (not (at ?resource outside))\n    )\n  )\n\n  (:action determine_where_to_plant\n    :parameters (?f - fir ?c - container ?p - agent)\n    :precondition (and (at ?p ?c) (inventory ?p ?f))\n    :effect (determined ?c)\n  )\n\n  (:action determine\n    :parameters (?agent - agent ?entity - object ?context - context)\n    :precondition (and (at ?agent ?context) (inventory ?agent ?entity))\n    :effect (determined ?context)\n  )\n\n  (:action sliplargerbuck\n    :parameters (?entity - object)\n    :precondition (and (visible ?entity))\n    :effect (sealed ?entity)\n  )\n\n  (:action apply_soil\n    :parameters (?fir - fir ?container - container ?soil - soil)\n    :precondition (and (at ?fir ?container) (at ?soil ?container))\n    :effect (and (soil_applied ?fir ?container) (not (at ?soil ?container))\n  )\n\n  (:action apply\n    :parameters (?agent - agent ?entity - object ?resource - object ?location - location)\n    :precondition (and (at ?entity ?location) (at ?resource ?location) (available ?agent))\n    :effect (and (applied ?entity ?resource) (not (at ?resource ?location))\n  )\n\n  (:action adjust\n    :parameters (?entity - object ?adjustment - object)\n    :precondition (and (at ?entity ?location) (at ?adjustment ?location))\n    :effect (and (state_adjusted ?entity) (not (at ?adjustment ?location))\n  )\n\n  (:action gotolocation\n    :parameters (?agent - agent ?entity - object ?location1 - location ?location2 - location)\n    :precondition (and (at ?agent ?location1) (at ?entity ?location2))\n    :effect (and (moved ?entity ?location2) (not (at ?entity ?location1))\n  )\n]\n```"
]