[
    "```pddl\n['(:action choose\\n    :parameters (?npc - person ?item - object ?location - location ?state - state)\\n    :precondition (and\\n                    (available ?npc)\\n                    (at ?npc ?location)\\n                    (not (checked ?npc ?item))\\n                    (valid_state ?item ?state))\\n    :effect (and\\n              (checked ?npc ?item)\\n              (updated_state ?item ?state)))', '(:action place\\n  :parameters (?agent - agent ?item - object ?location - location)\\n  :precondition (and (at ?agent ?location) (not (placed ?item ?location)) (applicable_conditions ?location))\\n  :effect (and (placed ?item ?location) (apply_effects ?location)))', '(:action create\\n  :parameters (?creator - agent ?item1 - object ?item2 - object ?location - location)\\n  :precondition (and\\n                  (at ?creator ?location)\\n                  (or (new_member_taught ?creator)\\n                      (chosen_scraps ?creator)\\n                      (gathered_recipes ?creator)\\n                      (unfinished ?item1)\\n                      (present ?location)\\n                      (uncovered ?location)\\n                      (unplayed ?item1)))\\n  :effect (and\\n            (or (members_knowledge_created ?creator)\\n                (theme_created ?item1)\\n                (stability ?item1 smooth)\\n                (account_created ?creator)\\n                (mixture_and_dreams_created ?creator ?item2)\\n                (covered ?location)\\n                (not (uncovered ?location)))))', '(:action pick\\n  :parameters (?entity - agent ?item - object)\\n  :precondition (and (at ?entity unselected) (not (picked ?entity ?item)))\\n  :effect (and (at ?entity selected) (picked ?entity ?item)))', '(:action cut\\n  :parameters (?actor - agent ?item - object ?tool - tool ?location - location)\\n  :precondition (and (available ?actor) (has_tool ?actor ?tool) (at ?actor ?location) (not (cut ?item)))\\n  :effect (and (cut ?item) (updated ?location)))', '(:action write\\n  :parameters (?agent - agent ?item - object ?recipient - agent)\\n  :precondition (and (available ?agent) (not (processed ?item ?recipient)))\\n  :effect (processed ?item ?recipient))', '(:action listen\\n  :parameters (?agent - agent ?resource - object)\\n  :precondition (and (available ?agent) (not (processed ?agent ?resource)))\\n  :effect (processed ?agent ?resource))', '(:action mark\\n    :parameters (?actor - agent ?target - object ?info - information)\\n    :precondition (and \\n        (available ?actor) \\n        (not (marked ?target ?info)))\\n    :effect (marked ?target ?info))', '(:action protect\\n  :parameters (?entity - object)\\n  :precondition (and (available ?entity))\\n  :effect (protected ?entity))', '(:action add\\n    :parameters (?entity - object ?resource - object)\\n    :precondition (and (available ?entity) (not (added ?entity ?resource)))\\n    :effect (added ?entity ?resource))', '(:action store\\n  :parameters (?npc - agent ?item - object ?loc - location)\\n  :precondition (and (at ?npc ?loc) (not (stored ?item ?loc)))\\n  :effect (stored ?item ?loc))', '(:action dedicate\\n  :parameters (?entity - agent ?subject - object)\\n  :precondition (and (at ?entity location) (not (dedicated ?subject)))\\n  :effect (and (dedicated ?subject) (not (at ?entity location))))', '(:action take\\n :parameters (?actor - agent ?entity - agent ?item - object)\\n :precondition (and (at ?actor ?entity) (has ?entity ?item))\\n :effect (and (has ?actor ?item) (not (has ?entity ?item))))', '(:action celebrate\\n  :parameters (?actor - agent ?achievement - object)\\n  :precondition (and (at ?actor location) (in_progress ?achievement))\\n  :effect (and (celebrated ?achievement) (completed ?achievement)))', '(:action use_as_gems\\n       :parameters (?p - agent ?track - object)\\n       :precondition (and (at ?p album) (smooth ?track))\\n       :effect (and (used_as_gems ?track)))', '(:action use\\n    :parameters (?agent - agent ?resource - object ?context - location)\\n    :precondition (and (at ?agent ?context) (usable ?resource))\\n    :effect (used ?resource))', '(:action finish\\n    :parameters (?actor - agent ?task - activity)\\n    :precondition (and (assigned ?actor ?task) (not (completed ?task)))\\n    :effect (completed ?task))', '(:action determine\\n  :parameters (?entity - object ?context - location)\\n  :precondition (and (not (determined ?entity ?context)))\\n  :effect (determined ?entity ?context))', '(:action upload-pictures\\n        :parameters (?npc - agent ?ct - covering_tracks ?track - object)\\n        :precondition (and (website-chosen ?npc) (not (pictures-uploaded ?npc)))\\n        :effect (pictures-uploaded ?npc))', '(:action upload\\n    :parameters (?uploader - agent ?resource - object)\\n    :precondition (and (ready-to-upload ?uploader) (not (uploaded ?uploader ?resource)))\\n    :effect (uploaded ?uploader ?resource))', '(:action customize\\n    :parameters (?agent - agent ?target - object)\\n    :precondition (and (ready ?agent) (not (customized ?agent ?target)))\\n    :effect (customized ?agent ?target))', '(:action remind\\n  :parameters (?reminder - agent ?target - agent)\\n  :precondition (and (available ?reminder) (not (reminded ?reminder ?target)))\\n  :effect (reminded ?reminder ?target))', '(:action document\\n    :parameters (?p - agent ?item - object)\\n    :precondition (and (at ?p ?loc) (relevant ?p ?item))\\n    :effect (documented ?p ?item))', '(:action be\\n    :parameters (?entity - agent ?condition - condition)\\n    :precondition (and (at ?entity ?condition))\\n    :effect (expressed ?entity ?condition))']\n```"
]