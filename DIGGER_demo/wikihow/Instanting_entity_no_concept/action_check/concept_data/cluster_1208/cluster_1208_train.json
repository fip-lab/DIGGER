[
    "```pddl\n[\n  '(:action learn ;  Learn a new skill or information\\n    :parameters (?learner - agent ?resource - object ?context - location)\\n    :precondition (and (at ?learner ?context) (not (learned ?learner ?resource)))\\n    :effect (and (learned ?learner ?resource)))',\n  '(:action get\\n    :parameters (?entity - object ?actor - agent ?location - location)\\n    :precondition (and (at ?actor ?location) (at ?entity ?location))\\n    :effect (and (inventory ?actor ?entity) (not (at ?entity ?location))))',\n  '(:action move\\n    :parameters (?entity - object ?from - location ?to - location)\\n    :precondition (and (at ?entity ?from))\\n    :effect (and (at ?entity ?to) (not (at ?entity ?from))))',\n  '(:action treat_new_member_with_salt\\n  :parameters (?p - agent ?salt - object ?marshmallow_cream - object)\\n  :precondition (and (inventory ?p ?salt) (inventory ?p ?marshmallow_cream) (composition ?marshmallow_cream solid))\\n  :effect (and (composition ?marshmallow_cream blended_with_salt)))',\n  '(:action treat ; Treat an item with another item to change its state\\n  :parameters (?actor - agent ?item1 - object ?item2 - object)\\n  :precondition (and (inventory ?actor ?item1) (inventory ?actor ?item2) (composition ?item2 solid))\\n  :effect (composition ?item2 blended_with_?item1))',\n  '(:action clean_resource\\n  :parameters (?user - agent ?resource - object ?location - location ?tool - object ?substance - object)\\n  :precondition (and\\n    (at ?resource ?location)\\n    (at ?user ?location)\\n    (not (clean ?resource))\\n  )\\n  :effect (and\\n    (clean ?resource)))',\n  '(:action remove_item\\n  :parameters (?user - agent ?item - object ?container - object ?location - location)\\n  :precondition (and\\n    (at ?container ?location)\\n    (at ?user ?location)\\n    (in ?item ?container)\\n  )\\n  :effect (and\\n    (not (in ?item ?container))))',\n  '(:action prepare_ingredient\\n  :parameters (?user - agent ?ingredient - object ?utensil - object ?location - location)\\n  :precondition (and\\n    (at ?ingredient ?location)\\n    (at ?user ?location)\\n    (clean ?ingredient)\\n    (clean ?utensil)\\n  )\\n  :effect (and\\n    (prepared ?ingredient)\\n    (dirty ?utensil)))',\n  '(:action process_substance\\n  :parameters (?substance - object ?condition - state ?result - state)\\n  :precondition (and\\n    (in_state ?substance ?condition)\\n  )\\n  :effect (and\\n    (in_state ?substance ?result)\\n    (not (in_state ?substance ?condition))))',\n  '(:action add ; Add a resource to a target and update its status\\n  :parameters (?agent - agent ?resource - object ?target - object ?location - location)\\n  :precondition (and \\n    (at ?agent ?location)\\n    (at ?target ?location)\\n    (not (added ?resource ?target)))\\n  :effect (and \\n    (added ?resource ?target)))',\n  '(:action put\\n    :parameters (?actor - agent ?item - object ?container - container ?location - location)\\n    :precondition (and \\n        (at ?actor ?location)\\n        (at ?container ?location)\\n        (or \\n            (and (added ?water ?container) (not (in ?item ?container)) (egg ?item) (boiler ?container))\\n            (and (inventory ?actor ?item) (empty ?container) (not (egg ?item)))\\n            (and (in_container ?item ?container) (covered ?item))\\n            (and (inventory ?actor ?item) (not (spread ?item)) (soft ?item))\\n        )\\n    )\\n    :effect (and\\n        (or \\n            (in ?item ?container)\\n            (in_container ?item ?container)\\n            (spread ?item)\\n            (closed ?container)\\n            (in_refrigerator ?container ?location))))',\n  '(:action use ; Use an item and update its status\\n    :parameters (?user - agent ?item - object ?location - location)\\n    :precondition (and\\n        (at ?item ?location)\\n        (available ?user)\\n        (clean ?item)\\n    )\\n    :effect (and\\n        (used ?item)\\n        (dirty ?item)))',\n  '(:action cool\\n    :parameters (?entity - object ?context - object ?location - location)\\n    :precondition (and\\n        (cooked ?entity)\\n        (heated ?context)\\n        (at ?entity ?context)\\n        (not (cooled ?entity))\\n    )\\n    :effect (and\\n        (cooled ?entity)\\n        (not (heated ?context))))',\n  '(:action mash_potatoes\\n        :parameters (?potato - object ?mixing_bowl - object ?canola_oil - object ?table - location)\\n        :precondition (and\\n            (boiled ?potato)\\n            (at ?potato on_counter)\\n            (at ?mixing_bowl on_counter)\\n            (clean ?mixing_bowl)\\n            (at ?canola_oil in_bottle)\\n            (at ?table in_kitchen)\\n        )\\n        :effect (and\\n            (mashed ?potato ?mixing_bowl)\\n            (added ?canola_oil ?mixing_bowl)\\n            (dirty ?mixing_bowl)))',\n  '(:action cool_potatoes\\n        :parameters (?potato - object ?cooling_rack - object ?table - location)\\n        :precondition (and\\n            (boiled ?potato)\\n            (at ?potato on_counter)\\n            (at ?cooling_rack on_counter)\\n            (at ?table in_kitchen)\\n        )\\n        :effect (and\\n            (cooled ?potato ?cooling_rack)\\n            (at ?potato ?table)))',\n  '(:action mash\\n    :parameters (?item - object ?container - object ?additive - object ?location - location ?action_type - task_type)\\n    :precondition (and\\n        (boiled ?item)\\n        (at ?item on_counter)\\n        (at ?container on_counter)\\n        (clean ?container)\\n        (at ?additive in_bottle)\\n        (at ?location in_kitchen)\\n    )\\n    :effect (and\\n        (when (eq ?action_type mash)\\n            (mashed ?item ?container)\\n            (added ?additive ?container)\\n            (dirty ?container))))',\n  '(:action freeze ; Freeze an item and update its state\\n    :parameters (?p - agent ?item - object ?freezer - object)\\n    :precondition (and \\n        (owned ?p ?item) (cooled ?item) (temperature ?item room_temperature) \\n        (owned ?p ?freezer) (empty ?freezer)\\n    )\\n    :effect (and\\n        (frozen ?item)\\n        (at ?item freezer_location)\\n        (not (saved ?item))))',\n  '(:action shape\\n  :parameters (?npc - agent ?item - object)\\n  :precondition (and (inventory ?npc ?item) (holding ?item))\\n  :effect (and (shaped ?npc) (not (holding ?item))))',\n  '(:action free ; Free an entity and update its state\\n    :parameters (?a - agent ?entity - object ?tool - object ?material - object)\\n    :precondition (and \\n        (in_inventory ?a ?tool)\\n        (in_inventory ?a ?entity)\\n        (in_inventory ?a ?material)\\n        (empty ?tool)\\n        (shaped ?entity)\\n        (not (camouflaged ?entity))\\n        (not (invisible ?entity))\\n    )\\n    :effect (and \\n        (covered ?entity)\\n        (dirty ?tool)\\n        (holding_dough ?tool)\\n        (heavier ?tool)\\n        (wet ?tool)\\n        (not (holding_dough ?tool))))',\n  '(:action pick ; Pick an item and update its status\\n :parameters (?actor - agent ?item - object)\\n :precondition (and (at ?actor ?item) (not (picked ?item)))\\n :effect (picked ?item))',\n  '(:action store\\n    :parameters (?p - agent ?item - object ?container - container)\\n    :precondition (and (at ?p ?item) (not (stored ?item)) (or (used ?item) (inventory ?p ?item)))\\n    :effect (and (stored ?item) (at ?item ?container) (when (inventory ?p ?item) (not (inventory ?p ?item)))))',\n  '(:action go\\n    :parameters (?entity - agent ?from - location ?to - location ?condition - condition)\\n    :precondition (and (at ?entity ?from) (connected ?from ?to) (not (blocked ?from ?to)) (satisfies ?condition ?entity ?from))\\n    :effect (and (at ?entity ?to) (not (at ?entity ?from))))',\n  '(:action default ; Generalized action for various tasks\\n  :parameters (?agent - agent ?entity1 - object ?entity2 - object)\\n  :precondition (and (at ?agent ?entity1) (at ?entity1 ?entity2) (not (processed ?entity1)))\\n  :effect (processed ?entity1))'\n]\n```"
]