[
    "[\n  '(:action choose\\n  :parameters (?agent - agent ?item - item ?attribute - attribute)\\n  :precondition (and \\n                  (available ?agent)\\n                  (not (chosen ?agent ?item))\\n                  (precondition_met ?item ?attribute))\\n  :effect (and \\n            (chosen ?agent ?item)\\n            (effect_applied ?item ?attribute)))',\n\n  '(:action build\\n  :parameters (?entity - entity ?location - location)\\n  :precondition (and\\n                  (not (built ?entity))\\n                  (available ?entity))\\n  :effect (and\\n            (built ?entity)\\n            (located_at ?entity ?location)\\n            (state ?entity modified)))',\n\n  '(:action add\\n  :parameters (?actor - entity ?item - object ?target - location)\\n  :precondition (and \\n                  (at ?actor ?target)\\n                  (or (inventory ?actor ?item)\\n                      (available ?item ?target)\\n                      (not (full ?item))\\n                      (not (emptier ?item))\\n                      (not (dry ?target))\\n                      (composted ?item)\\n                      (location ?item in_cabinet)\\n                      (at ?item around_house)))\\n  :effect (and\\n            (or (in_bin ?item ?target)\\n                (full ?target)\\n                (wet ?target)\\n                (in_composter ?item ?target)\\n                (not (composted ?item)))))',\n\n  '(:action roll\\n  :parameters (?npc - entity ?item - object ?container - container)\\n  :precondition (and\\n                  (in ?item ?container)\\n                  (or (full ?container) (location ?container sunny_spot)))\\n  :effect (and\\n            (rolled ?item)\\n            (not (in ?item ?container))))',\n\n  '(:action use\\n  :parameters (?actor - entity ?item - object ?loc - location ?container - container ?material - material)\\n  :precondition (and\\n                  (available ?actor)\\n                  (or (and (location ?container in_cabinet) (volume ?container empty))\\n                      (and (inventory ?actor ?item) (or (clean ?item) (sandy ?item)) (chosen ?actor direct_use))\\n                      (at ?actor ?loc)\\n                      (and (inventory ?actor ?material) (at ?actor ?container) (mixed ?container))))\\n  :effect (and\\n            (or (and (location ?container on_countertop) (volume ?container fuller)))))',\n\n  '(:action keep\\n  :parameters (?actor - entity ?item - object ?location - place)\\n  :precondition (and (not (contains ?location ?item)) (or (holding ?actor ?item) (availability ?item unobtained) (at ?actor ?location)))\\n  :effect (and (contains ?location ?item) (not (holding ?actor ?item))))',\n\n  '(:action initiate\\n  :parameters (?n - entity ?s1 - state ?s2 - state)\\n  :precondition (and (has_state ?n ?s1))\\n  :effect (and (not (has_state ?n ?s1)) (has_state ?n ?s2)))',\n\n  '(:action fill\\n  :parameters (?npc - agent ?item - object ?target - location)\\n  :precondition (and\\n                  (at ?npc ?target)\\n                  (or\\n                    (location ?item ?target)\\n                    (inventory ?npc ?item)\\n                    (holding ?npc ?item))\\n                  (not (completed ?item)))\\n  :effect (and\\n            (completed ?item)\\n            (or\\n              (and (location ?item filled) (volume ?item fuller)))))',\n\n  '(:action balance\\n  :parameters (?actor - entity ?resource - object ?target - target)\\n  :precondition (and (location ?resource ?intermediate_state) (location ?target ?required_state))\\n  :effect (and (state ?resource balanced) (state ?target transformed)))',\n\n  '(:action know\\n  :parameters (?entity - entity ?condition - condition)\\n  :precondition (and (knowledge ?entity ?condition))\\n  :effect (ready ?entity ?condition))',\n\n  '(:action remove\\n  :parameters (?entity - entity ?item - item ?container - container)\\n  :precondition (and (at ?entity ?container) (contains ?container ?item))\\n  :effect (and (not (contains ?container ?item))))',\n\n  '(:action heat\\n  :parameters (?p - entity ?item - object ?source - heating_source)\\n  :precondition (and (at ?p ?source) (at ?item ?source) (temperature ?source cool))\\n  :effect (and (temperature ?source hot) (state ?item transformed)))',\n\n  '(:action determine\\n  :parameters (?npc - entity ?resource - object ?location - location)\\n  :precondition (and (in_area ?npc ?location) (not (available ?resource ?location)))\\n  :effect (available ?resource ?location))',\n\n  '(:action compost\\n  :parameters (?npc - entity ?loc - location ?item - compostable)\\n  :precondition (and (at ?npc ?loc) (has_remains ?npc ?item))\\n  :effect (and (composted ?item) (not (has_remains ?npc ?item))))',\n\n  '(:action in\\n  :parameters (?entity - object ?location - place)\\n  :precondition (and (location ?entity on_countertop) (not (in ?entity ?location)))\\n  :effect (and (location ?entity on_table) (in ?entity ?location)))',\n\n  '(:action plant\\n  :parameters (?npc - entity ?entity - entity ?location - location ?container - container ?soil - soil)\\n  :precondition (and\\n                  (or (inventory ?npc ?entity) (holding ?npc ?entity))\\n                  (or (empty ?container) (contains ?location ?soil))\\n                  (at ?npc ?location))\\n  :effect (and\\n            (planted ?entity (or ?container ?soil))))',\n\n  '(:action nourish\\n  :parameters (?actor - agent ?entity - object)\\n  :precondition (and (inventory ?actor ?entity) (established ?entity))\\n  :effect (nourished ?entity))'\n]"
]