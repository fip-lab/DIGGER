[
    "```pddl\n[\n  '(:action start ;  Start a state and update availability\\n:parameters (?entity - entity ?state - state)\\n:precondition (and (not (exists ?state)))\\n:effect (and (exists ?state) (availability ?state created)))',\n  '(:action use ; Use an item and update the inventory or task status\\n    :parameters (?npc - person ?item - object)\\n    :precondition (and (at ?npc infancy) (is_toddler_tooth_care_product ?item))\\n    :effect (and (inventory ?npc ?item)))',\n  '(:action floss ; Perform an action using a tool to clean or maintain a specific body part\\n:parameters (?npc - person ?tool - object ?bodypart - bodypart)\\n:precondition (and (inventory ?npc ?tool) (is_bodypart ?bodypart))\\n:effect (clean ?bodypart))',\n  '(:action remove ; Remove a property or change the state of an entity to clean or invisible\\n  :parameters (?entity - object ?property - property)\\n  :precondition (and (or (inventory ?npc ?entity) (at ?entity visible) (dirty ?entity) (is_teeth ?entity)) \\n                     (not (tags_removed ?entity)))\\n  :effect (and (or (tags_removed ?entity) (clean ?entity) (at ?entity invisible))))',\n  '(:action go ;  Go to a designated location\\n  :parameters (?npc - person ?loc - location)\\n  :precondition (and (at ?npc infancy) (is_location ?loc))\\n  :effect (at ?npc ?loc))',\n  '(:action drink\\n    ; General action to drink any item with specific properties\\n    :parameters (?npc - person ?item - object)\\n    :precondition (and (is_drinkable ?item) (not (drunk ?npc ?item)))\\n    :effect (drunk ?npc ?item))',\n  '(:action choose ; Select an item and update the inventory or status\\n  :parameters (?npc - person ?item - object ?location - location)\\n  :precondition (and \\n                   (available ?npc) \\n                   (at ?npc ?location)\\n                   (not (chosen ?npc ?item))\\n                   (or (is_well_balanced ?item)\\n                       (clothing ?item)\\n                       (easy_to_pull_on ?item)\\n                       (is_toddler_tooth_care_product ?item)\\n                       (is_fluoridated ?item)\\n                       (detergent ?item))\\n                 )\\n  :effect (and \\n             (chosen ?npc ?item)\\n             (inventory ?npc ?item)\\n             (not (unselected ?item))))',\n  '(:action put\\n  :parameters (?actor - entity ?item - object ?location - location)\\n  :precondition (and\\n    (available ?actor)\\n    (not (in ?item ?location))\\n    ;; Dynamic preconditions based on item type\\n    (or \\n      (and (type ?item dirty_object) (dirty ?item))\\n      (and (type ?item clean_object) (clean ?item))\\n      (and (type ?item whole_object) (whole ?item) (at ?item in_package))\\n      (and (type ?item summer_clothing) (person ?actor) (available ?item))\\n    )\\n  )\\n  :effect (and\\n    (in ?item ?location)\\n    ;; Dynamic effects based on item type\\n    (or\\n      (and (type ?item dirty_object) (not (dirty ?item)))))',\n  '(:action make ; Perform a task to change the state of an entity\\n  :parameters (?actor - person ?entity - object ?attribute - attribute ?initial_state - state ?target_state - state)\\n  :precondition (and\\n                  (state ?entity ?attribute ?initial_state)\\n                  (not (state ?entity ?attribute ?target_state))\\n                )\\n  :effect (and\\n            (state ?entity ?attribute ?target_state)\\n            (not (state ?entity ?attribute ?initial_state))))',\n  '(:action make\\n     :parameters (?actor - person ?entity - laundry ?attribute - folded ?initial_state - false ?target_state - true)\\n     :precondition (and\\n                     (state ?entity ?attribute false)\\n                     (in_dryer ?entity)\\n                   )\\n     :effect (and\\n               (state ?entity ?attribute true)\\n               (put_away ?entity)))',\n  '(:action make\\n     :parameters (?actor - person ?entity - routine ?attribute - familiar ?initial_state - false ?target_state - true)\\n     :precondition (and\\n                     (state ?entity ?attribute false)\\n                     (person ?actor)\\n                   )\\n     :effect (and\\n               (state ?entity ?attribute true)\\n               (not (unfamiliar ?entity))))',\n  '(:action make\\n     :parameters (?actor - person ?entity - area ?attribute - selected ?initial_state - unselected ?target_state - selected)\\n     :precondition (and\\n                     (state ?entity ?attribute unselected)\\n                   )\\n     :effect (and\\n               (state ?entity ?attribute selected)))',\n  '(:action make\\n     :parameters (?actor - person ?entity - laundry ?attribute - fullness ?initial_state - empty ?target_state - full_with_polar_fleece)\\n     :precondition (and\\n                     (state ?entity ?attribute empty)\\n                   )\\n     :effect (and\\n               (state ?entity ?attribute full_with_polar_fleece)))',\n  '(:action keep\\n  :parameters (?entity - object ?location - location)\\n  :precondition (and\\n    (not (in_location ?entity ?location))\\n    (or \\n      (and (dirty ?entity) (location ?location basket))\\n      (and (clean ?entity) (location ?location dryer))\\n      (and (tagged ?entity) (location ?location untagged))\\n      (and (unsorted ?entity) (location ?location sorted))\\n      (and (in_dryer ?entity) (location ?location folded))\\n    )\\n  )\\n  :effect (and\\n    (in_location ?entity ?location)\\n    (or \\n      (and (dirty ?entity) (not (dirty ?entity)))))',\n  '(:action teach ; Teach or provide awareness about a subject to an entity\\n  :parameters (?entity - person ?subject - object)\\n  :precondition (and (present ?entity) (unaware ?subject))\\n  :effect (and (aware ?subject) (not (unaware ?subject))))',\n  '(:action avoid ; Prevent an action or state from occurring and ensure safety\\n  :parameters (?npc - person ?item - object)\\n  :precondition (and \\n                  (not (avoided ?npc ?item))\\n                  (or (and (person ?npc) (winter_clothing ?item))\\n                      (and (trusting_family ?npc) (in_basement ?item))\\n                      (checked_ears ?npc))\\n                )\\n  :effect (and\\n            (avoided ?npc ?item)\\n            (or (voluntary ?npc ?item)\\n                (not (trusting_family ?npc))))',\n  '(:action learn_signal\\n    :parameters (?npc - person)\\n    :precondition (and (not (knowledgeable ?npc)))\\n    :effect (knowledgeable ?npc))',\n  '(:action clean_floor\\n    :parameters (?npc - person ?floor - floor)\\n    :precondition (and (not (clean ?floor)))\\n    :effect (clean ?floor))',\n  '(:action learn\\n    :parameters (?entity - person ?target - object)\\n    :precondition (and \\n        (or \\n            (not (knowledgeable ?entity))\\n            (not (clean ?target))\\n        )\\n    )\\n    :effect (and \\n        (when (not (knowledgeable ?entity)) (knowledgeable ?entity))\\n        (when (not (clean ?target)) (clean ?target))))',\n  '(:action stick ; Stick to a task or process and update state\\n  :parameters (?npc - person ?task - task ?item - object)\\n  :precondition (and \\n    (available ?npc) \\n    (at ?npc ?task) \\n    (not (completed ?npc ?task))\\n    (or \\n      (not (sticking_to_dry_cycles ?npc)) \\n      (at ?item ?npc)\\n    )\\n  )\\n  :effect (and \\n    (completed ?npc ?task)\\n    (or \\n      (sticking_to_dry_cycles ?npc) \\n      (in_dryer ?item ?task))))',\n  '(:action dry_clothes\\n    :parameters (?npc - person ?clothes - clothes ?work_station - work_station)\\n    :precondition (and (at ?npc ?work_station) (has_clothes ?npc ?clothes))\\n    :effect (and (dry ?clothes) (not (wet ?clothes))))',\n  '(:action add_dryer_sheets\\n    :parameters (?npc - person ?dryer_sheet - object ?work_station - work_station)\\n    :precondition (and (at ?npc ?work_station) (has_dryer_sheet ?npc ?dryer_sheet) (not (added_dryer_sheet ?work_station)))\\n    :effect (added_dryer_sheet ?work_station))',\n  '(:action dry\\n    :parameters (?npc - person ?item - object ?work_station - work_station)\\n    :precondition (and (at ?npc ?work_station) \\n                       (or (and (has_clothes ?npc ?item) (not (dry ?item))) \\n                           (and (has_dryer_sheet ?npc ?item) (not (added_dryer_sheet ?work_station)))))\\n    :effect (and (or (and (dry ?item) (not (wet ?item))) (added_dryer_sheet ?work_station))))',\n  '(:action participate\\n    :parameters (?entity - person ?target - object)\\n    :precondition (and\\n      (state ?entity initial_state)\\n      (state ?target initial_state))\\n    :effect (and\\n      (state ?entity transformed_state)\\n      (state ?target transformed_state)))',\n  '(:action encourage ; Encourage an entity and update its state\\n  :parameters (?npc - person ?state_after - state)\\n  :precondition (and (visible ?npc) (not (state ?npc ?state_after)))\\n  :effect (and (not (visible ?npc)) (state ?npc ?state_after)))',\n  '(:action sort_hand-me-downs\\n    :parameters (?kr - kids-room)\\n    :precondition (and\\n      (not (sorted ?kr)))\\n    :effect (sorted ?kr))',\n  '(:action wash_clothes\\n    :parameters (?laundry - laundry-basket)\\n    :precondition (and\\n      (not (cleaned ?laundry)))\\n    :effect (cleaned ?laundry))',\n  '(:action sort\\n    :parameters (?agent - person ?item - object)\\n    :precondition (and\\n      (not (processed ?item)))\\n    :effect (processed ?item))',\n  '(:action receptacle\\n    :parameters (?agent - person ?entity - object ?context - context)\\n    :precondition (and\\n        (engaged ?agent ?context)\\n        (not (processed ?entity ?context)))\\n    :effect (and\\n        (processed ?entity ?context)\\n        (reinforced ?agent ?context)\\n        (rewarded ?entity)))',\n  '(:action practice ; Practice a task involving an item and update the status\\n  :parameters (?npc - person ?item - object)\\n  :precondition (and \\n                  (person ?npc) \\n                  (object ?item) \\n                  (not (engaged ?npc ?item)))\\n  :effect (and \\n            (engaged ?npc ?item)\\n            (not (unengaged ?item))))',\n  '(:action determine ; Determine a specific attribute of an item and record the result\\n    :parameters (?npc - person ?item - object ?attribute - attribute)\\n    :precondition (and (at ?npc ?item) (has_attribute ?item ?attribute))\\n    :effect (and (determined ?npc ?item ?attribute)))',\n  '(:action ensure ; Ensure the cleanliness and organization of an item\\n  :parameters (?e - object)\\n  :precondition (and (unwashed ?e) (disorganized ?e))\\n  :effect (and (washed ?e) (organized ?e) (not (unwashed ?e))))'\n]\n```"
]