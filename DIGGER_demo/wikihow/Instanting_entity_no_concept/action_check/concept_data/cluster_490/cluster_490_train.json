[
    "```pddl\n[\n  '(:action wash ; Wash an item and update its state\n  :parameters (?npc - person ?item - object ?location - location ?container - container ?resource - resource ?machine - machine)\n  :precondition (and \n                  (at ?npc ?location)\n                  (held ?npc ?item)\n                  (not (washed ?item))\n                  (or \n                    (and (flattened ?item) (not (garnished ?item)))\n                    (and (not (grated ?item)) (not (contains ?container ?item)))\n                    (and (at ?npc ?location) (has ?npc ?resource) (at ?machine ?location) (not (in ?resource ?machine)))\n                    (and (at ?npc ?machine) (bleach_in_machine ?machine) (machine_full ?machine) (not (blend_in_machine ?machine)))\n                    (and (not (ink_stained ?item)) (not (clean ?item)))\n                    (hair-bleached ?item)\n                  )\n                )\n  :effect (and \n            (washed ?item)\n            (or \n              (garnished ?item)\n              (contains ?container ?item)\n              (in ?resource ?machine)\n              (blend_in_machine ?machine)\n              (clean ?item)\n              (not (hair-bleached ?item))\n            )\n          )\n)',\n\n  '(:action add\n  :parameters (?actor - person ?entity1 - object ?entity2 - object ?location - location)\n  :precondition (and\n    (available ?actor)\n    (at ?actor ?location)\n    (not (combined ?entity1 ?entity2 ?location))\n    (or\n      (and (camouflaged ?entity1))\n      (and (location ?entity1 bare))\n      (and (has ?actor ?entity2))\n      (and (filled ?entity1 ?entity2))\n      (and (contains ?entity1 ?entity2))\n      (and (wearing ?actor gloves) (ventilated ?location))\n    )\n  )\n  :effect (and\n    (combined ?entity1 ?entity2 ?location)\n    (or\n      (and (camouflaged ?entity1) (wet ?entity2))\n    )\n  )\n)',\n\n  '(:action clean_resource\n  :parameters (?agent - person ?resource - object ?location - place)\n  :precondition (and \n    (at ?agent ?location)\n    (not (cleaned ?resource))\n    (or\n      (and (object_type ?resource ?type1) (available ?resource))\n      (and (object_type ?resource ?type2) (soaked ?resource ?agent))\n      (and (object_type ?resource ?type3) (not (wearing ?agent ?resource)))\n    )\n  )\n  :effect (and \n    (cleaned ?resource)\n    (or\n      (and (object_type ?resource ?type1) (not (available ?resource)))\n    )\n  )\n)',\n\n  '(:action transform ; Perform a transformation on an entity\n  :parameters (?agent - person ?entity - object ?container - container ?location - location ?resource - resource)\n  :precondition (and\n                  (available ?agent)\n                  (at ?agent ?location)\n                  (not (transformed ?entity))\n                )\n  :effect (and\n            (transformed ?entity)\n            (not (available ?resource))\n          )\n)',\n\n  '(:action prepare\n  ; General action to prepare an item or create a state change\n  :parameters (?agent - person ?item - object ?location - location)\n  :precondition (and\n    (at ?agent ?location)\n    (or (dry ?item) (wet ?item) (and (contains ?item ?hp) (contains ?item ?s)))\n  )\n  :effect (and\n    (or (wet ?item) (flat ?item) (paste_created ?item))\n  )\n)',\n\n  '(:action hold ; Hold an item and update its status\n  :parameters (?npc - person ?item - object ?loc - location)\n  :precondition (and (at ?npc ?loc) (needs_processing ?item) (has_required_material ?loc))\n  :effect (and (held ?npc ?item) (processed ?item))\n)',\n\n  '(:action choose\n  ;; Choose a resource and update task status\n  :parameters (?agent - person ?resource - object)\n  :precondition (and \n                  (available ?agent)\n                  (not (chosen ?resource))\n                  ;; Additional preconditions for specific tasks\n                  (or (recommended ?resource)\n                      (sunny ?resource)\n                      (knows_bleach_safety ?agent)\n                      (and (not (mixed ?resource))\n                           (not (is_bleach ?resource))\n                           (is_cleaning_product ?resource))\n                      (not (wearing_gloves ?agent))\n                      (and (wearing_gloves ?agent)\n                           (not (mixed ?resource))\n                           (well_ventilated ?resource_location)))\n                )\n  :effect (and \n            (chosen ?resource)\n            ;; Additional effects for specific tasks\n            (or (best_results ?resource)\n                (garments_gathered ?agent)\n                (mixed ?resource)\n                (not (safe ?resource))\n            )\n          )\n)',\n\n  '(:action line ; Manage an item and update its status\n  :parameters (?agent - person ?item - object ?location - location)\n  :precondition (and (at ?agent ?location) (at ?item ?location) (or (flat ?item) (waiting ?agent)))\n  :effect (and (or (drying ?item) (not (waiting ?agent))))\n)',\n\n  '(:action bring ; Bring an item to a specified location\n  :parameters (?npc - person ?item - object ?location - location)\n  :precondition (and (at ?npc ?location) (at ?item ?location) (ready_to_bring ?item))\n  :effect (and (brought ?item ?location))\n)',\n\n  '(:action repeat ; Repeat a process for various tasks\n  :parameters (?actor - person ?task - task)\n  :precondition (and (ready ?actor) (in_progress ?task))\n  :effect (and (completed ?task))\n)',\n\n  '(:action throw ; Throw an item and update its state\n  :parameters (?npc - person ?item - object ?location - place)\n  :precondition (and (at ?npc ?location) (at ?item ?location) (ready_to_throw ?item))\n  :effect (and (thrown ?item))\n)',\n\n  '(:action run ; Run a machine to execute a task\n  :parameters (?entity - object ?machine - object)\n  :precondition (and (full_with_resources ?entity) (ready ?machine))\n  :effect (running ?machine)\n)',\n\n  '(:action check_conditioner\n  :parameters (?person - person ?hair - object ?conditioner - object)\n  :precondition (and (unprocessed ?hair) (not (conditioned ?hair)))\n  :effect (and\n            (conditioned ?hair)\n            (less-full ?conditioner)\n          )\n)',\n\n  '(:action juice_lemons\n  :parameters (?person - person ?lemons - object ?juicer - object)\n  :precondition (and (unjuiced ?lemons) (has_juicer ?person ?juicer))\n  :effect (and\n            (juiced ?lemons)\n            (used ?juicer)\n          )\n)',\n\n  '(:action check\n  :parameters (?actor - person ?item - object ?tool - object)\n  :precondition (and (not (processed ?item)) (has_tool ?actor ?tool))\n  :effect (and\n            (processed ?item)\n            (used ?tool)\n          )\n)',\n\n  '(:action sit ; Sit and update entity\\'s state based on conditions\n  :parameters (?entity - person ?attribute - attribute)\n  :precondition (and (has_attribute ?entity ?attribute) (attribute_condition ?attribute))\n  :effect (transformed_attribute ?entity ?attribute)\n)',\n\n  '(:action read_tag\n  :parameters (?npc - person)\n  :precondition (and\n                  (has_garment ?npc)\n                  (not (read_tag ?npc))\n                )\n  :effect (and\n            (read_tag ?npc)\n            (knows_bleach_safety ?npc)\n          )\n)',\n\n  '(:action read ; Read a resource and update knowledge status\n  :parameters (?npc - person ?resource - object)\n  :precondition (and (has_resource ?npc ?resource) (not (read ?npc ?resource)))\n  :effect (and (read ?npc ?resource) (knows_info ?npc ?resource))\n)',\n\n  '(:action use\n  :parameters (?agent - person ?item - object ?target - object)\n  :precondition (and (at ?agent ?loc) (at ?item ?target) (usable ?item ?target))\n  :effect (and (used ?item ?target) (not (at ?item ?target)))\n)',\n\n  '(:action let\n  :parameters (?entity - object ?state_from - state ?state_to - state ?location - location)\n  :precondition (and (at ?entity ?location) (?state_from ?entity))\n  :effect (and (?state_to ?entity) (not (?state_from ?entity)))\n)',\n\n  '(:action let\n  :parameters (?w - wick ?state_from - state ?state_to - state ?loc - location)\n  :precondition (and (at ?w ?loc) (?state_from ?w))\n  :effect (and (?state_to ?w) (not (?state_from ?w)))\n)',\n\n  '(:action restart\n  :parameters (?actor - person ?machine - machine ?item - object)\n  :precondition (and (at ?actor ?machine) (has ?actor ?item) (machine_ready ?machine))\n  :effect (and (machine_on ?machine) (not (machine_off ?machine)))\n)',\n\n  '(:action determine_agent\n  :parameters (?p - person ?a - person)\n  :precondition (and\n    (not (has_agent ?p ?a))\n  )\n  :effect (has_agent ?p ?a)\n)',\n\n  '(:action determine\n  :parameters (?entity - object ?attribute - attribute ?value - value)\n  :precondition (and\n    (not (has ?entity ?attribute ?value))\n  )\n  :effect (and\n    (has ?entity ?attribute ?value)\n  )\n)',\n\n  '(:action apply\n  :parameters (?p - person ?a - person ?w - object ?f - object ?l - object ?n - object ?b - object ?c - object)\n  :precondition (and\n    (or (and (not (has_agent ?p ?a)) ; for determining agent\n             (not (applied ?a ?c)))    ; for applying agent to skin\n        (and (not (blended ?w))         ; for blending wood\n             (not (applied ?a ?c)))    ; for applying agent to skin\n        (and (not (cleaned ?f ?l))      ; for cleaning wood\n             (not (applied ?a ?c)))    ; for applying agent to skin\n        (and (not (mixed ?n ?b))        ; for mixing neutralizer\n             (not (applied ?a ?c)))    ; for applying agent to skin\n        (and (has_agent ?p ?a)          ; for applying neutralizing agent\n             (blended ?w)\n             (cleaned ?f ?l)\n             (mixed ?n ?b)\n             (not (neutralized ?w)))\n        (and (paste_created ?c)         ; for applying agent to skin\n             (not (applied ?a ?c))))\n  )\n  :effect (and\n    (or (has_agent ?p ?a)               ; effect of determining agent\n        (blended ?w)                    ; effect of blending wood\n        (cleaned ?f ?l)                 ; effect of cleaning wood\n        (mixed ?n ?b)                   ; effect of mixing neutralizer\n        (neutralized ?w)                ; effect of applying neutralizing agent\n        (and (applied ?a ?c)            ; effect of applying agent to skin\n             (waiting ?a)))\n)',\n\n  '(:action juice\n  :parameters (?entity - object ?juice - object ?source - object)\n  :precondition (and (not (processed ?entity)) (power-on ?source))\n  :effect (and\n            (processed ?entity)\n            (juice-available ?juice)\n          )\n)'\n]\n```"
]