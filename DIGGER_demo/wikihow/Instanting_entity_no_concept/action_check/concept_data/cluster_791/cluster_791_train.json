[
    "```pddl\n['(:action prepare\n   :parameters (?entity - entity ?context - context)\n   :precondition (and (not (prepared ?entity)) (in-context ?entity ?context))\n   :effect (and (prepared ?entity) (context-changed ?context)))',\n '(:action cut\n  :parameters (?npc - person ?item - object ?tool - tool ?surface - surface)\n  :precondition (and \n                 (or (prepared ?item) \n                     (intact ?item) \n                     (squishy ?item) \n                     (too_long ?item))\n                 (has_tool ?npc ?tool)\n                 (not (cut ?item)))\n  :effect (and \n           (cut ?item)\n           (on_cutting_board ?item ?surface)))',\n '(:action remove\n  :parameters (?actor - person ?item - object)\n  :precondition (and \n    (or (cut ?item) (contains ?item) (in_mixture ?item) (in_mold ?item) (hand_near_flame ?actor) (dirty ?item))\n    (or (not (peeled ?item)) (frozen ?item) (hardened ?item) (lit ?item) (dirty ?item))\n    (in_hand ?actor))\n  :effect (and (peeled ?item) (not (frozen ?item))))',\n '(:action add\n  :parameters (?npc - person ?item1 - entity ?item2 - entity)\n  :precondition (and (not (added ?item1 ?item2)) (available ?npc))\n  :effect (added ?item1 ?item2))',\n '(:action modify\n  :parameters (?npc - person ?item - entity ?new_state - state)\n  :precondition (and (available ?npc) (not (in_state ?item ?new_state)))\n  :effect (in_state ?item ?new_state))',\n '(:action create\n  :parameters (?npc - person ?new_entity - entity ?base_entity - entity ?state - state)\n  :precondition (and (available ?npc) (not (exists ?new_entity)))\n  :effect (and (exists ?new_entity) (in_state ?new_entity ?state)))',\n '(:action add\n  :parameters (?npc - person ?oil - oil_tank ?fridge - fridge)\n  :precondition (and (available ?npc) (not (added ?oil ?fridge)))\n  :effect (added ?oil ?fridge))',\n '(:action add\n  :parameters (?npc - person ?scent - scent ?mixture - mixture)\n  :precondition (and (available ?npc) (not (added ?scent ?mixture)))\n  :effect (added ?scent ?mixture))',\n '(:action modify\n  :parameters (?npc - person ?water - water ?hob - hob)\n  :precondition (and (available ?npc) (at-temperature ?water cold) (at-fullness ?water emptier) (at-location ?water in-pipes) (at-power ?hob off))\n  :effect (and (at-temperature ?water hot) (at-fullness ?water fuller) (at-location ?water out-of-faucet) (at-power ?hob on)))',\n '(:action add\n  :parameters (?npc - person ?chocolate - chocolate ?mixing_bowl - mixing_bowl)\n  :precondition (and (available ?npc) (at-location ?mixing_bowl empty) (at-texture ?chocolate solid))\n  :effect (and (at-location ?mixing_bowl in-bowl) (at-texture ?chocolate mixed)))',\n '(:action modify\n  :parameters (?npc - person ?sauce - scenting_sauce)\n  :precondition (and (available ?npc) (unselected ?sauce))\n  :effect (and (selected ?sauce) (not (unselected ?sauce))))',\n '(:action add\n  :parameters (?npc - person ?ingredient - ingredient ?mixture - mixture)\n  :precondition (and (available ?npc) (not (added ?ingredient ?mixture)))\n  :effect (added ?ingredient ?mixture))',\n '(:action modify\n  :parameters (?npc - person ?wax - wax ?crayon - crayon ?candle - candle)\n  :precondition (and (available ?npc) (melted ?wax) (broken ?crayon) (not (colored ?candle)))\n  :effect (colored ?candle))',\n '(:action modify\n  :parameters (?npc - person ?saucepan - saucepan)\n  :precondition (and (available ?npc) (inventory ?npc candle) (has ?npc saucepan))\n  :effect (and (melted candle) (not (inventory ?npc candle))))',\n '(:action modify\n  :parameters (?npc - person ?wand - wand ?candle - candle)\n  :precondition (and (available ?npc) (colored ?candle) (not (stirred ?candle)))\n  :effect (stirred ?candle))',\n '(:action add\n  :parameters (?npc - person ?spoon - spoon ?wood - wood)\n  :precondition (and (available ?npc) (clean ?spoon) (prepared ?wood))\n  :effect (and (attached ?spoon ?wood) (dirty ?spoon)))',\n '(:action modify\n  :parameters (?npc - person ?wand - wand ?candle - candle)\n  :precondition (and (available ?npc) (stirred ?candle) (not (fragrant ?candle)))\n  :effect (fragrant ?candle))',\n '(:action create\n  :parameters (?npc - person ?tarts - tarts ?papyrus - papyrus)\n  :precondition (and (available ?npc) (cooled ?wick) (not (released ?tarts)))\n  :effect (released ?tarts))',\n '(:action add\n  :parameters (?npc - person ?candle - candle ?location - location)\n  :precondition (and (available ?npc) (at ?npc ?location) (at ?candle ?location) (partially_used ?candle))\n  :effect (and (inventory ?npc ?candle) (not (at ?candle ?location))))',\n '(:action break\n  :parameters (?npc - person ?item - object ?target - object)\n  :precondition (and \n                 (not (broken ?item))\n                 (or (and (inventory ?npc ?item) (whole ?item))\n                     (lit ?item)\n                     (wet ?item)\n                     (in_cup ?npc ?target)\n                     (bent ?item)\n                     (decoration ?item painted)))\n  :effect (or (broken ?item) \n              (lit ?item) \n              (dry ?item) \n              (straight ?item)))',\n '(:action place\n  :parameters (?agent - person ?item - object ?destination - location)\n  :precondition (and\n    (available ?agent)\n    (at-location ?item ?source)\n    (not (at-location ?item ?destination)))\n  :effect (and\n    (at-location ?item ?destination)\n    (not (at-location ?item ?source))))',\n '(:action place\n  :parameters (?user - person ?candle - candle ?jar - jar)\n  :precondition (and (available ?user) (not (in_jar ?candle ?jar)))\n  :effect (in_jar ?candle ?jar))',\n '(:action place\n  :parameters (?npc - person ?saucepan - saucepan ?stove - stove)\n  :precondition (and (available ?npc) (inventory ?npc ?saucepan) (not (on ?saucepan ?stove)))\n  :effect (and (on ?saucepan ?stove) (not (inventory ?npc ?saucepan))))',\n '(:action place\n  :parameters (?npc - person ?loc - basement)\n  :precondition (and (available ?npc) (not (in_safe_area ?npc ?loc)))\n  :effect (in_safe_area ?npc ?loc))',\n '(:action place\n  :parameters (?npc - person ?wick - wick ?holder - candle_holder)\n  :precondition (and (available ?npc) (dry ?wick) (not (in_holder ?wick ?holder)))\n  :effect (in_holder ?wick ?holder))',\n '(:action place\n  :parameters (?npc - person ?candle - candle ?workbench - workbench)\n  :precondition (and (available ?npc) (not (on ?candle ?workbench)))\n  :effect (on ?candle ?workbench))',\n '(:action place\n  :parameters (?npc - person ?supplies - supplies ?storage - storage)\n  :precondition (and (available ?npc) (not (in ?supplies ?storage)))\n  :effect (in ?supplies ?storage))',\n '(:action freeze\n  :parameters (?entity - entity ?item - object)\n  :precondition (and (contains ?entity ?item) (not (frozen ?entity)))\n  :effect (frozen ?entity))',\n '(:action pop\n  :parameters (?entity - entity ?container - container ?item - item)\n  :precondition (and (contains ?container ?item) (not (contains_pop ?container)))\n  :effect (not (contains ?container ?item)))',\n '(:action get\n  :parameters (?npc - person ?item - object ?loc - location ?attr - attribute ?val - value)\n  :precondition (and\n    (available ?npc)\n    (at ?npc ?loc)\n    (or\n      (not (inventory ?npc ?item))\n      (not (gathered ?item))\n      (on_sale ?item)\n      (metal_sustainer ?item)\n      (has_access ?npc ?loc)\n      (not (present ?item))\n      (not (checked ?npc ?item)))\n    (or\n      (at-texture ?item solid)\n      (visible ?npc)))\n  :effect (and\n    (or\n      (inventory ?npc ?item)\n      (gathered ?item)\n      (privileged ?npc ?loc)\n      (present ?item)\n      (checked ?npc ?item)\n      (attached ?item)\n      (purchased ?item)\n      (at-texture ?item melted)\n      (invisible ?npc)))',\n '(:action burn\n  :parameters (?entity - object ?resource - object)\n  :precondition (and \n    (not (burned ?resource))\n    (or \n      (has_wick ?resource)\n      (wax_poured ?resource ?entity)))\n  :effect (burned ?resource))',\n '(:action gather\n  :parameters (?entity - object ?resource - object)\n  :precondition (not (gathered ?resource))\n  :effect (gathered ?resource))',\n '(:action prepare_wick\n  :parameters (?entity - object ?wick - object ?container - object)\n  :precondition (and (gathered ?container) (not (wick_set ?wick ?container)))\n  :effect (wick_set ?wick ?container))',\n '(:action process_wax\n  :parameters (?entity - object ?wax - object)\n  :precondition (and (gathered ?wax) (not (scented ?wax)))\n  :effect (scented ?wax))',\n '(:action pour_wax\n  :parameters (?entity - object ?wax - object ?container - object)\n  :precondition (and (scented ?wax) (wick_set ?wax ?container) (not (wax_poured ?wax ?container)))\n  :effect (wax_poured ?wax ?container))',\n '(:action burn\n  :parameters (?entity - object ?resource - object)\n  :precondition (and \n    (not (burned ?resource))\n    (or \n      (has_wick ?resource)\n      (wax_poured ?resource ?entity)))\n  :effect (burned ?resource))',\n '(:action close_stuffing\n  :parameters (?item - object ?candle - object ?entity - object)\n  :precondition (and (stuffed ?item ?candle) (not (closed ?candle)))\n  :effect (closed ?candle))',\n '(:action free\n  :parameters (?resource - object)\n  :precondition (not (freed ?resource))\n  :effect (freed ?resource))',\n '(:action decorate\n  :parameters (?npc - person ?item - object)\n  :precondition (freed ?item)\n  :effect (decorated ?item))',\n '(:action measure\n  :parameters (?entity - object)\n  :precondition (and (gathered ?entity) (not (measured ?entity)))\n  :effect (measured ?entity))',\n '(:action take\n  :parameters (?item - object ?from - location ?to - location)\n  :precondition (and (at ?item ?from) (not (at ?item ?to)))\n  :effect (not (at ?item ?from)))',\n '(:action drink\n  :parameters (?npc - person)\n  :precondition (or (thirsty ?npc) (not (wet_fingers ?npc)))\n  :effect (not (thirsty ?npc)))',\n '(:action store\n  :parameters (?npc - person ?location - place ?item - object)\n  :precondition (and (has ?npc ?item) (accessible ?location))\n  :effect (and (stored ?item ?location) (not (has ?npc ?item))))',\n '(:action check\n  :parameters (?agent - person ?resource - resource)\n  :precondition (and \n    (available ?agent)\n    (not (checked ?agent ?resource)))\n  :effect (checked ?agent ?resource))',\n '(:action wait\n  :parameters (?entity - object)\n  :precondition (and\n    (or (at-time ?entity earlier) (wet ?entity))\n    (at-completion ?entity unfinished))\n  :effect (at-time ?entity later))',\n '(:action use\n  :parameters (?actor - person ?resource - object ?context - context)\n  :precondition (and \n    (available ?actor)\n    (not (in_use ?actor ?resource ?context))\n    (condition_met ?resource ?context))\n  :effect (and \n    (in_use ?actor ?resource ?context)\n    (update_state ?resource ?context)))',\n '(:action locate\n  :parameters (?agent - person ?item - object)\n  :precondition (not (located ?item))\n  :effect (located ?item))',\n '(:action practice_resource_management\n  :parameters (?agent - person ?resource - resource)\n  :precondition (and (available ?agent) (not (managed ?agent ?resource)))\n  :effect (managed ?agent ?resource))',\n '(:action cleaned\n  :parameters (?actor - person ?entity - object)\n  :precondition (dirty ?entity)\n  :effect (and (clean ?entity) (not (dirty ?entity))))',\n '(:action wick_mold\n  :parameters (?w - wick ?m - mold)\n  :precondition (not (wicked ?m))\n  :effect (and (wicked ?m) (centered ?w ?m)))',\n '(:action transform\n  :parameters (?agent - person ?target - entity ?state_change - state)\n  :precondition (not (in_state ?target ?state_change))\n  :effect (and (in_state ?target ?state_change) (processed ?agent ?target)))']\n```"
]