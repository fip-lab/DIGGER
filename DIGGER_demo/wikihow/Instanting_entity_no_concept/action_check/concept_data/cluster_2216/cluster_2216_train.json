[
    "```lisp\n['(:action choose\n  :parameters (?p - agent ?item - object ?location - location)\n  :precondition (and (at ?p ?location) (not (chosen ?p ?item)))\n  :effect (chosen ?p ?item)\n)',\n\n'(:action start\n  :parameters (?npc - agent ?item - object ?location - location)\n  :precondition (and (at ?npc ?location) (not (started ?npc ?item)))\n  :effect (started ?npc ?item)\n)',\n\n'(:action listen\n  :parameters (?npc - agent ?item - object)\n  :precondition (and\n    (at ?npc ?loc)\n    (or\n      (and (has_radio ?npc) (broadcast_available))\n      (and (not (listened ?npc ?item))\n           (or (is_alarm_system ?item)\n               (is_battery ?item)\n               (is_warranty ?item)\n               (is_conceptacle ?item))))\n  )\n  :effect (and\n    (listened ?npc ?item)\n    (when (is_alarm_system ?item) (listened_to_alarm_system ?npc ?item))\n  )\n)',\n\n'(:action read_brochures\n  :parameters (?a - agent)\n  :precondition (contacted_manufacturers ?a)\n  :effect (read_brochures ?a)\n)',\n\n'(:action research_remote_starter_systems\n  :parameters (?a - agent)\n  :precondition (online_access ?a)\n  :effect (researched ?a remote_starter_systems)\n)',\n\n'(:action read\n  :parameters (?a - agent ?resource - object)\n  :precondition (and (available ?a) (not (read ?a ?resource)))\n  :effect (read ?a ?resource)\n)',\n\n'(:action compare\n  :parameters (?actor - agent ?item1 - object ?item2 - object)\n  :precondition (and (available ?actor) (not (compared ?item1 ?item2)))\n  :effect (compared ?item1 ?item2)\n)',\n\n'(:action perform_task\n  :parameters (?agent - agent ?task - task ?resource - resource ?location - location)\n  :precondition (and (available ?agent)\n                     (not (task_completed ?agent ?task))\n                     (task_requires_resource ?task ?resource)\n                     (at ?agent ?location)\n                     (not (resource_used ?agent ?resource))\n                     (not (task_performed ?agent ?task ?location))\n                     (or (and (task = fill_tank) (cool_temperature ?location))\n                         (and (task = fill_tank_basement) (has_fuel ?agent))\n                         (and (task = install_system) (checked ?agent ?resource) (listened_to ?agent ?resource) (compared ?agent ?resource)))\n                    )\n  :effect (and (task_completed ?agent ?task)\n               (resource_used ?agent ?resource)\n               (task_performed ?agent ?task ?location)\n               (or (and (task = fill_tank) (tank_filled ?agent))\n               ))\n)',\n\n'(:action take_mental_note\n  :parameters (?p - agent)\n  :precondition (and (driving ?p) (observing ?p))\n  :effect (mental_note_taken ?p)\n)',\n\n'(:action take\n  :parameters (?actor - agent ?subject - object ?context - context)\n  :precondition (and (involved ?actor ?context) (not (taken ?actor ?subject ?context)))\n  :effect (taken ?actor ?subject ?context)\n)',\n\n'(:action talk\n  :parameters (?npc - agent ?target - agent)\n  :precondition (and (can_communicate ?npc) (available ?target) (not (talked ?npc ?target)))\n  :effect (talked ?npc ?target)\n)',\n\n'(:action make\n  :parameters (?npc - agent ?entity - object ?location - location)\n  :precondition (and \n                 (at ?npc ?location)\n                 (or \n                   (chosen_name ?npc ?name)\n                   (not (record_made ?npc))\n                   (not (vehicle_protected ?location))\n                 ))\n  :effect (and \n           (or \n             (listened_to_converter ?npc)\n             (record_made ?npc)\n             (vehicle_protected ?location)\n           ))\n)',\n\n'(:action confirm\n  :parameters (?p - agent ?obj - object)\n  :precondition (and (at ?p ?loc) (selected ?p ?obj))\n  :effect (confirmed ?p ?obj)\n)',\n\n'(:action pick\n  :parameters (?actor - agent ?item - object)\n  :precondition (and (selected ?actor ?item) (display_chosen ?actor))\n  :effect (picked ?actor ?item)\n)',\n\n'(:action evaluate\n  :parameters (?npc - agent ?item - object)\n  :precondition (and (considering ?npc ?item) (not (evaluated ?npc ?item)))\n  :effect (evaluated ?npc ?item)\n)',\n\n'(:action fix\n  :parameters (?p - agent ?o - object)\n  :precondition (and (at ?p ?o) (malfunctioning ?o))\n  :effect (and (not (malfunctioning ?o)))\n)',\n\n'(:action diagnose\n  :parameters (?entity - agent ?resource - object)\n  :precondition (and (at ?entity ?resource) (not (diagnosed ?resource)))\n  :effect (diagnosed ?resource)\n)',\n\n'(:action determine\n  :parameters (?actor - agent ?target - agent ?property - property)\n  :precondition (and (not (determined ?target ?property))\n                     (or (at ?actor ?target)\n                         (available ?actor)))\n  :effect (determined ?target ?property)\n)',\n\n'(:action list_features\n  :parameters (?a - agent)\n  :precondition (determined_remote_starter ?a)\n  :effect (features_listed ?a)\n)',\n\n'(:action list\n  :parameters (?actor - agent ?resource - object)\n  :precondition (and (determined ?actor ?resource) (not (listed ?actor ?resource)))\n  :effect (listed ?actor ?resource)\n)',\n\n'(:action contact\n  :parameters (?a - agent ?resource - agent)\n  :precondition (and (searched ?a ?resource) (not (contacted ?a ?resource)))\n  :effect (contacted ?a ?resource)\n)',\n\n'(:action research\n  :parameters (?a - agent ?subject - object)\n  :precondition (and (read_brochures ?a) (not (researched ?a ?subject)))\n  :effect (researched ?a ?subject)\n)',\n\n'(:action recycle\n  :parameters (?npc - agent ?item - object ?location - location)\n  :precondition (and \n    (has_item ?npc ?item) \n    (at ?npc ?location) \n    (at ?item ?location)\n    (recyclable ?item)\n  )\n  :effect (and \n    (not (has_item ?npc ?item))\n    (recycled ?item)\n  )\n)',\n\n'(:action decide\n  :parameters (?npc - agent ?location - location ?task - task)\n  :precondition (and \n                (at ?npc ?location)\n                (not (task_decided ?npc ?task)))\n  :effect (task_decided ?npc ?task)\n)',\n\n'(:action pickupobjectnoreceptacle\n  :parameters (?npc - agent ?item - object ?location - location)\n  :precondition (and \n    (at ?npc ?location) \n    (store_found ?npc) \n    (available ?item ?location) \n    (not (inventory ?npc ?item))\n  )\n  :effect (and \n    (inventory ?npc ?item) \n    (not (available ?item ?location))\n  )\n)']\n```"
]