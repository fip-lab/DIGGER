[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:wash\n\n\nAction sets that need to be merged:\n(:action garnish-with-flattened-shorts\n    :parameters (?s - shorts)\n    :precondition (flattened ?s)\n    :effect (garnished ?s)\n)\n\n;; Action 2: Add designer signal using fabric painting\n\n(:action garnish_soap\n    :parameters (?s - item ?c - container)\n    :precondition (and\n      (not (grated ?s))\n      (not (contains ?c ?s))\n    )\n    :effect (and\n      (grated ?s)\n      (contains ?c ?s)\n    )\n  )\n\n  ;;; Action 2: Add Hydrogen Peroxide to Container\n  \n(:action put_gens_in_machine ; put gens in machine\n    :parameters (?npc - npc ?machine - machine ?gen - gen ?loc - location)\n    :precondition (and (at ?npc ?loc) (has ?npc ?gen) (at ?machine ?loc))\n    :effect (and (in ?gen ?machine) (not (has ?npc ?gen)))\n)\n\n\n(:action put_blend_in_machine\n    :parameters (?npc - npc ?wm - washingmachine)\n    :precondition (and (at ?npc ?wm) (bleach_in_machine ?wm) (machine_full ?wm))\n    :effect (and (blend_in_machine ?wm))\n)\n\n\n(:action wash_paper ; wash the paper\n    :parameters (?npc - npc ?paper - paper ?loc - location)\n    :precondition (and (at ?npc ?loc) (held ?npc ?paper))\n    :effect (and (washed ?paper) (not (ink_stained ?paper)))\n)\n\n\n(:action wash_papyrus ; wash the cloth diapers\n    :parameters (?npc - npc ?diapers - cloth_diapers ?location - location)\n    :precondition (and (at ?npc ?location) (at ?diapers ?location) (not (wet ?diapers)))\n    :effect (and (wet ?diapers) (clean ?diapers))\n)\n\n\n(:action wash_wicks\n    :parameters (?person - entity ?hair - entity ?water - entity)\n    :precondition (hair-bleached ?hair)\n    :effect (and\n              (hair-clean ?hair)\n              (not (hair-bleached ?hair))\n            )\n)\n```\n\n### Descriptions of Actions:\n\n- `start_with_unprocessed_hair`: This action sets the hair to an initial unprocessed state.\n- `check_conditioner`: This action applies a deep conditioner to the hair, changing its state to conditioned.\n- `juice-lemon`: This action extracts juice from lemons using a faucet.\n- `dilute_lemon_juice`: This action dilutes the lemon juice with water in a pitcher.\n- `pour_soap_into_fridge`: This action pours the diluted lemon juice solution into a spray bottle.\n- `spray_with_lemon_juice`: This action sprays the hair with the lemon juice solution.\n- `sit_in_sunshine`: This action involves sitting outside in bright sunshine to bleach the hair.\n- `wash_wicks`: This action washes the hair after bleaching.\n\nThese actions reflect the steps required to bleach hair using lemon juice and sunshine, with appropriate state changes for each entity involved.\n(:action wash_clothes\n    :parameters (?npc - npc)\n    :precondition (and\n                    (lightened_garment ?npc)\n                    (has_washing_machine ?npc))\n    :effect (clean_clothes ?npc)\n  )\n)\n```\n\n### Descriptions of Actions:\n\n- `read_tag`:\n  - **Parameters**: `?npc` (the person checking the tag)\n  - **Preconditions**: The person has the garment and has not read the tag yet.\n  - **Effect**: The tag is read, and the person knows if the fabric is safe to bleach.\n\n- `gather_garments`:\n  - **Parameters**: `?npc` (the person gathering the garments)\n  - **Preconditions**: The person knows if the fabric is safe to bleach and has not gathered the garments yet.\n  - **Effect**: The garments are gathered.\n\n- `fill_spice_bottle`:\n  - **Parameters**: `?user` (the user filling the bottle), `?bottle` (the bottle to be filled)\n  - **Preconditions**: The bottle is empty, and the user has bleach.\n  - **Effect**: The bottle is filled with bleach and water.\n\n- `spritz_with_garnish`:\n  - **Parameters**: `?npc` (the person spritzing the garment), `?bottle` (the bottle with bleach)\n  - **Preconditions**: The garments are gathered, the bottle is full, and it contains bleach.\n  - **Effect**: The garment is lightened, and the bottle is empty.\n\n- `wash_clothes`:\n  - **Parameters**: `?npc` (the person washing the clothes)\n  - **Preconditions**: The garment is lightened, and the person has access to a washing machine.\n  - **Effect**: The clothes are clean.\n\nThese actions accurately reflect the steps involved in lightening clothing with bleach and the state changes associated with each step.\n(:action set_wicks_in_machine\n    :parameters (?wm - washingmachine ?wicks - wicks)\n    :precondition (and (at ?wicks ?wm) (machine_empty ?wm))\n    :effect (and (machine_full ?wm) (not (machine_empty ?wm)))\n)\n\n\n(:action set_washer_to_highest_heat\n    :parameters (?washer - washer ?heat - heat)\n    :precondition (and (not (highest_heat ?washer)))\n    :effect (and (highest_heat ?washer))\n)\n\n\n(:action set_room\n    :parameters (?p - person ?r - room)\n    :precondition (and (at ?p ?loc) (ventilated ?r))\n    :effect (and (at ?p ?r) (not (at ?p ?loc)))\n)\n\n\n(:action spray_lemon_juice ; spray lemon juice onto the worst stains\n    :parameters (?npc - npc ?diapers - cloth_diapers ?juice - lemon_juice ?location - location)\n    :precondition (and (at ?npc ?location) (at ?diapers ?location) (at ?juice ?location) (drying ?diapers) (worst_stains ?diapers))\n    :effect (and (treated ?diapers))\n)\n\n\n(:action spray_with_lemon_juice\n    :parameters (?person - entity ?hair - entity ?bottle - entity)\n    :precondition (and (conditioned ?hair) (full ?bottle))\n    :effect (and\n              (hair-wet ?hair)\n              (empty ?bottle)\n            )\n)\n\n;; Action to sit outside in bright sunshine\n\n(:action pour_soap_into_fridge\n    :parameters (?user - entity ?bottle - entity ?pitcher - entity)\n    :precondition (and (full ?pitcher) (empty ?bottle))\n    :effect (and\n              (full ?bottle)\n              (empty ?pitcher)\n            )\n)\n\n;; Action to spray hair with lemon juice solution\n\n(:action pour_blend_into_sink_or_tub\n    :parameters (?p - person ?b - bleach ?c - container ?s - sink)\n    :precondition (and (at ?p ?loc) (holding ?p ?b) (holding ?p ?c) (at ?s ?loc))\n    :effect (and (in ?b ?s) (not (holding ?p ?b)) (not (in ?b ?c)))\n)\n\n\n(:action fill_spice_bottle\n    :parameters (?user - user ?bottle - bottle)\n    :precondition (and\n                    (empty ?bottle)\n                    (has_bleach ?user))\n    :effect (and\n              (full ?bottle)\n              (contains_bleach ?bottle))\n  )\n\n  ;; Action 4: Spritz the garment until it's as lightened as you like\n  \n(:action fill_bucket\n    :parameters (?p - person ?b - bucket ?w - water_source)\n    :precondition (and (at ?p ?b) (has_water_source ?w))\n    :effect (and (filled ?b ?w) (not (empty ?b)))\n)\n\n\n(:action spritz_with_garnish\n    :parameters (?npc - npc ?bottle - bottle)\n    :precondition (and\n                    (garments_gathered ?npc)\n                    (full ?bottle)\n                    (contains_bleach ?bottle))\n    :effect (and\n              (lightened_garment ?npc)\n              (empty ?bottle))\n  )\n\n  ;; Action 5: Machine wash the clothes according to the care label\n  \n(:action soak_laundry\n    :parameters (?p - person ?l - laundry ?b - bucket)\n    :precondition (and (at ?p ?b) (mixed ?b ?bleach ?detergent) (has ?p ?l))\n    :effect (and (soaked ?l ?b))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:add\n\n\nAction sets that need to be merged:\n(:action add_designer_signal\n    :parameters (?n - npc ?f - fabric_painting)\n    :precondition (and\n                    (plain ?n)\n                    (dry ?f)\n                  )\n    :effect (and\n              (camouflaged ?n)\n              (wet ?f)\n            )\n)\n\n;; Action 3: Draw designer with bleach\n\n(:action add-sliplargerbuck\n    :parameters (?s - shorts ?st - studs)\n    :precondition (and\n                    (location ?st down)\n                    (location ?s bare)\n                  )\n    :effect (and\n              (location ?st up)\n              (location ?s decorated)\n            )\n)\n\n;; Action 5: Fray the bottom of the shorts\n\n(:action add_blend_into_machine\n    :parameters (?user - user ?bleach - bleach ?wm - washingmachine)\n    :precondition (and (at ?user ?wm) (has ?user ?bleach) (machine_full ?wm))\n    :effect (and (bleach_in_machine ?wm) (not (has ?user ?bleach)))\n)\n\n\n(:action add_detergent_and_bleach\n    :parameters (?machine - machine ?detergent - detergent ?bleach - bleach)\n    :precondition (and (not (full_with_detergent_and_bleach ?machine)))\n    :effect (and (full_with_detergent_and_bleach ?machine))\n)\n\n\n(:action add_water\n    :parameters (?washer - washer ?water - water)\n    :precondition (and (at_location ?water in_pipes) (not (full_with_water ?washer)))\n    :effect (and (full_with_water ?washer) (at_location ?water out_of_faucet))\n)\n\n\n(:action add_bleach_to_cycle\n    :parameters (?alice - person ?washer - washer ?bleach - bleach)\n    :precondition (and (full_with_water ?washer) (not (bleach_added ?washer)))\n    :effect (and (bleach_added ?washer))\n)\n\n\n(:action add_clothing\n    :parameters (?washer - washer ?clothing - clothing)\n    :precondition (and (full_with_water ?washer) (not (full_with_clothing ?washer)))\n    :effect (and (full_with_clothing ?washer))\n)\n\n\n(:action add_dish\n    :parameters (?p - person ?wm - washing_machine ?b - bucket)\n    :precondition (and (at ?p ?wm) (mixed ?b ?bleach ?detergent))\n    :effect (and (treated ?wm ?b))\n)\n\n\n(:action add_hydrogen_peroxide\n    :parameters (?c - container ?hp - item)\n    :precondition (and\n      (contains ?c ?hp)\n    )\n    :effect (contains ?c ?hp)\n  )\n\n  ;;; Action 3: Create Paste\n  \n(:action mix-bleach-solution\n    :parameters (?agent - person ?bleach - bleach ?location - location)\n    :precondition (and (wearing ?agent gloves) (not (mixed ?bleach)) (ventilated ?location))\n    :effect (and (mixed ?bleach) (safe ?bleach)))\n\n\n(:action mix_neutralizer\n    :parameters (?p - person ?n - neutralizer ?b - mixing_bowl)\n    :precondition (and\n      (not (mixed ?n ?b))\n    )\n    :effect (mixed ?n ?b)\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5e94\u7528\u4e2d\u548c\u5242\n  \n(:action mix_ingredients\n    :parameters (?p - person ?b - bucket ?w - water ?bleach - bleach ?detergent - detergent)\n    :precondition (and (filled ?b ?w) (at ?p ?b) (has ?p ?bleach) (has ?p ?detergent))\n    :effect (and (mixed ?b ?bleach ?detergent))\n)\n\n\n(:action blend_wood\n    :parameters (?p - person ?w - wood)\n    :precondition (and\n      (not (blended ?w))\n    )\n    :effect (blended ?w)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6e05\u6d01\u6728\u6750\n  \nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:clean\n\n\nAction sets that need to be merged:\n(:action draw_designer_with_blend\n    :parameters (?a - alice)\n    :precondition (unselected ?a)\n    :effect (and\n              (selected ?a)\n              (named ?a)\n            )\n)\n\n;; Action 4: Add studs\n\n(:action wear-rubber-gloves\n    :parameters (?agent - person ?gloves - gloves)\n    :precondition (and (not (wearing ?agent ?gloves)))\n    :effect (and (wearing ?agent ?gloves)))\n\n\n(:action wear_rubber_gloves\n    :parameters (?p - person ?g - gloves)\n    :precondition (and (at ?p ?loc) (available ?g))\n    :effect (and (wearing ?p ?g) (not (available ?g)))\n)\n\n\n(:action clean_wood\n    :parameters (?p - person ?f - fir ?l - log)\n    :precondition (and\n      (not (cleaned ?f ?l))\n    )\n    :effect (cleaned ?f ?l)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u6df7\u5408\u4e2d\u548c\u5242\n  \n(:action clean_items\n    :parameters (?p - person ?l - laundry ?w - water_source)\n    :precondition (and (soaked ?l ?b) (has_water_source ?w) (at ?p ?l))\n    :effect (and (clean ?l) (not (soaked ?l ?b)))\n)\n```\n\n### Explanation of Actions\n\n1. **fill_bucket**:\n   - **Parameters**: A person, a bucket, and a water source.\n   - **Preconditions**: The person is at the bucket and there is a water source available.\n   - **Effect**: The bucket is filled with water and is no longer empty.\n\n2. **mix_ingredients**:\n   - **Parameters**: A person, a bucket, water, bleach, and detergent.\n   - **Preconditions**: The bucket is filled with water, the person is at the bucket, and the person has bleach and detergent.\n   - **Effect**: The bleach and detergent are mixed in the bucket.\n\n3. **add_dish**:\n   - **Parameters**: A person, a washing machine, and a bucket.\n   - **Preconditions**: The person is at the washing machine and the bucket contains mixed bleach and detergent.\n   - **Effect**: The washing machine is treated with the mixture from the bucket.\n\n4. **soak_laundry**:\n   - **Parameters**: A person, laundry items, and a bucket.\n   - **Preconditions**: The person is at the bucket, the bucket contains mixed bleach and detergent, and the person has laundry items.\n   - **Effect**: The laundry items are soaked in the bucket.\n\n5. **clean_items**:\n   - **Parameters**: A person, laundry items, and a water source.\n   - **Preconditions**: The laundry items have been soaked in the bucket, there is a water source available, and the person is at the laundry items.\n   - **Effect**: The laundry items are cleaned and no longer soaked.\n\nThese actions capture the necessary steps and state changes required to use bleach when doing laundry, ensuring that each action reflects the changes in the state of the entities involved.\n(:action clean_paste_with_water\n    :parameters (?a - agent)\n    :precondition (not (waiting ?a))\n    :effect (clean ?a)\n  )\n\n  ;;; Action 7: Lighten Skin\n  \nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:fray\n\n\nAction sets that need to be merged:\n(:action fray_bottom_of_shorts\n    :parameters (?n - npc ?s - shorts)\n    :precondition (plain ?n)\n    :effect (camouflaged ?n)\n)\n\n;; Action 6: Dissolve shorts\n\n(:action dissolve_shorts\n    :parameters (?n - npc ?s - shorts)\n    :precondition (and\n                    (camouflaged ?n)\n                    (garnished ?s)\n                  )\n    :effect (and\n              (invisible ?n)\n              (clean ?s)\n            )\n)\n```\n\nIn these actions, the entities and their state transitions have been translated into preconditions and effects in the PDDL format. Each action reflects the changes in the state of the entities involved in the task.\n(:action dilute_lemon_juice\n    :parameters (?juice - entity ?pitcher - entity ?water - entity)\n    :precondition (and (juice-available ?juice) (not (diluted ?juice)) (water-out ?water))\n    :effect (and\n              (diluted ?juice)\n              (full ?pitcher)\n            )\n)\n\n;; Action to pour the solution into a spray bottle\n\n(:action break_blender\n    :parameters (?p - person ?b - bottle)\n    :precondition (and (at ?p ?loc) (holding ?p ?b))\n    :effect (and (broken ?b) (not (holding ?p ?b)))\n)\n\n```\n\n**Explanation:**\n\n1. **wear_rubber_gloves**: This action ensures that the person wears rubber gloves before handling bleach. The precondition checks if the person is at the location and if the gloves are available. The effect is that the person is now wearing the gloves, and the gloves are no longer available.\n\n2. **set_room**: This action sets the current room to a well-ventilated room. The precondition checks if the person is at the current location and if the room is ventilated. The effect is that the person is now in the ventilated room.\n\n3. **pour_blend_into_sink_or_tub**: This action involves pouring bleach from a container into a sink or tub. The precondition checks if the person is at the location, holding the bleach and the container, and if the sink is at the location. The effect is that the bleach is now in the sink, and the person is no longer holding the bleach.\n\n4. **use_water**: This action involves using cold water to dilute the bleach. The precondition checks if the person is at the location, the water is at the sink, and the water is cold. The effect is that the water is now diluted with the bleach, and the water is no longer at the sink.\n\n5. **break_blender**: This action involves breaking the bottle. The precondition checks if the person is at the location and holding the bottle. The effect is that the bottle is now broken, and the person is no longer holding the bottle.\n\nThese actions ensure that the task of diluting bleach is performed safely and accurately, adhering to the provided descriptions and entity state transitions.\n(:action lighten_skin\n    :parameters (?a - agent)\n    :precondition (clean ?a)\n    :effect (lightened ?a)\n  )\n)\n```\n\n### Explanation of Actions:\n\n1. **garnish_soap**:\n   - **Parameters**: `?s` (soap), `?c` (container)\n   - **Preconditions**: The soap is not grated, and the container does not contain the soap.\n   - **Effects**: The soap is grated, and it is added to the container.\n\n2. **add_hydrogen_peroxide**:\n   - **Parameters**: `?c` (container), `?hp` (hydrogen peroxide)\n   - **Preconditions**: The container contains hydrogen peroxide.\n   - **Effects**: The container continues to contain hydrogen peroxide.\n\n3. **create_paste**:\n   - **Parameters**: `?c` (container)\n   - **Preconditions**: The container contains both soap and hydrogen peroxide.\n   - **Effects**: A paste is created in the container.\n\n4. **apply_ingredients_to_skin**:\n   - **Parameters**: `?a` (agent), `?c` (container)\n   - **Preconditions**: The paste is created in the container, and the agent has not applied it yet.\n   - **Effects**: The agent applies the paste and starts waiting.\n\n5. **wait_for_paste**:\n   - **Parameters**: `?a` (agent)\n   - **Preconditions**: The agent is waiting.\n   - **Effects**: The agent stops waiting.\n\n6. **clean_paste_with_water**:\n   - **Parameters**: `?a` (agent)\n   - **Preconditions**: The agent is not waiting.\n   - **Effects**: The agent is clean.\n\n7. **lighten_skin**:\n   - **Parameters**: `?a` (agent)\n   - **Preconditions**: The agent is clean.\n   - **Effects**: The agent's skin is lightened.\n\nThese actions accurately reflect the steps and entity state transitions required to bleach skin with peroxide as described in the task.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:prepare\n\n\nAction sets that need to be merged:\n(:action prepare_acetone_wicks ; prepare acetone wash\n    :parameters (?a - agent ?w - wick ?loc - location)\n    :precondition (and (at ?a ?loc) (dry ?w))\n    :effect (and (wet ?w) (not (dry ?w)))\n)\n\n\n(:action lay_add_stick ; lay the diapers out flat with stains facing up\n    :parameters (?npc - npc ?diapers - cloth_diapers ?location - location)\n    :precondition (and (at ?npc ?location) (at ?diapers ?location) (wet ?diapers))\n    :effect (and (flat ?diapers))\n)\n\n\n(:action create_paste\n    :parameters (?c - container)\n    :precondition (and\n      (contains ?c ?hp)\n      (contains ?c ?s)\n    )\n    :effect (paste_created ?c)\n  )\n\n  ;;; Action 4: Apply Paste to Skin\n  \nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:hold\n\n\nAction sets that need to be merged:\n(:action hold_ink_stained_paper ; hold ink-stained paper under acetone\n    :parameters (?npc - npc ?paper - paper ?loc - location)\n    :precondition (and (at ?npc ?loc) (ink_stained ?paper) (has_acetone ?loc))\n    :effect (and (held ?npc ?paper) (washed ?paper))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:choose\n\n\nAction sets that need to be merged:\n(:action choose-bleach-product\n    :parameters (?agent - person ?bleach - bleach)\n    :precondition (and (not (chosen ?bleach)) (recommended ?bleach))\n    :effect (and (chosen ?bleach)))\n```\n\n### Explanation of Actions:\n\n1. **mix-bleach-with-cleaning-products**\n    - **Parameters:** `?agent` (person), `?product` (cleaning_product)\n    - **Precondition:** The product is not already mixed and it is not bleach.\n    - **Effect:** The product becomes mixed, and it is no longer safe (because mixing bleach with other cleaning products is dangerous).\n\n2. **wear-rubber-gloves**\n    - **Parameters:** `?agent` (person), `?gloves` (gloves)\n    - **Precondition:** The agent is not already wearing gloves.\n    - **Effect:** The agent is now wearing gloves.\n\n3. **mix-bleach-solution**\n    - **Parameters:** `?agent` (person), `?bleach` (bleach), `?location` (location)\n    - **Precondition:** The agent is wearing gloves, the bleach is not already mixed, and the location is well-ventilated.\n    - **Effect:** The bleach solution is mixed and safe to use.\n\n4. **choose-bleach-product**\n    - **Parameters:** `?agent` (person), `?bleach` (bleach)\n    - **Precondition:** The bleach product is not already chosen and it is recommended for laundry use.\n    - **Effect:** The bleach product is chosen.\n\nThese actions ensure that the steps are followed correctly and safely, with appropriate preconditions and effects to reflect the state changes of the entities involved.\n(:action choose_amazing ; choose a sunny day to achieve the best results\n    :parameters (?npc - npc ?day - day)\n    :precondition (and (sunny ?day))\n    :effect (and (best_results ?day))\n)\n\n\n(:action gather_garments\n    :parameters (?npc - npc)\n    :precondition (and\n                    (knows_bleach_safety ?npc)\n                    (not (garments_gathered ?npc)))\n    :effect (garments_gathered ?npc)\n  )\n\n  ;; Action 3: Fill a spray bottle with bleach and water\n  \nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:line\n\n\nAction sets that need to be merged:\n(:action line_dry_papyrus ; line-dry the diapers or drape them over a drying rack\n    :parameters (?npc - npc ?diapers - cloth_diapers ?location - location)\n    :precondition (and (at ?npc ?location) (at ?diapers ?location) (flat ?diapers))\n    :effect (and (drying ?diapers))\n)\n\n\n(:action wait_for_paste\n    :parameters (?a - agent)\n    :precondition (waiting ?a)\n    :effect (not (waiting ?a))\n  )\n\n  ;;; Action 6: Clean Paste with Water\n  \nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:bring\n\n\nAction sets that need to be merged:\n(:action bring_closest_to_bed ; bring the cloth diapers in after a few hours pass\n    :parameters (?npc - npc ?diapers - cloth_diapers ?location - location)\n    :precondition (and (at ?npc ?location) (at ?diapers ?location) (treated ?diapers))\n    :effect (and (brought_in ?diapers))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:repeat\n\n\nAction sets that need to be merged:\n(:action repeat_process ; repeat the process for stubborn stains\n    :parameters (?npc - npc ?diapers - cloth_diapers ?location - location)\n    :precondition (and (at ?npc ?location) (at ?diapers ?location) (brought_in ?diapers) (stubborn_stains ?diapers))\n    :effect (and (treated_again ?diapers))\n)\n\n\n(:action finish_wreath\n    :parameters (?wreath - wreath)\n    :precondition (and (in_progress ?wreath))\n    :effect (and (completed ?wreath))\n)\n```\n\n### Description of Actions\n\n1. **set_washer_to_highest_heat**\n   - **Parameters**: `?washer - washer`, `?heat - heat`\n   - **Preconditions**: The washer is not already set to the highest heat.\n   - **Effects**: The washer is now set to the highest heat.\n\n2. **add_detergent_and_bleach**\n   - **Parameters**: `?machine - machine`, `?detergent - detergent`, `?bleach - bleach`\n   - **Preconditions**: The machine is not already full with detergent and bleach.\n   - **Effects**: The machine is now full with detergent and bleach.\n\n3. **add_water**\n   - **Parameters**: `?washer - washer`, `?water - water`\n   - **Preconditions**: The water is in the pipes and the washer is not already full with water.\n   - **Effects**: The washer is now full with water and the water is out of the faucet.\n\n4. **add_bleach_to_cycle**\n   - **Parameters**: `?alice - person`, `?washer - washer`, `?bleach - bleach`\n   - **Preconditions**: The washer is full with water and bleach has not been added yet.\n   - **Effects**: Bleach is now added to the washer.\n\n5. **add_clothing**\n   - **Parameters**: `?washer - washer`, `?clothing - clothing`\n   - **Preconditions**: The washer is full with water and is not already full with clothing.\n   - **Effects**: The washer is now full with clothing.\n\n6. **run_washer**\n   - **Parameters**: `?washer - washer`, `?machine - machine`\n   - **Preconditions**: The washer is full with clothing, full with detergent and bleach and full with water.\n   - **Effects**: The washer is now running.\n\n7. **finish_wreath**\n   - **Parameters**: `?wreath - wreath`\n   - **Preconditions**: The wreath is in progress.\n   - **Effects**: The wreath is now completed.\n\nThese actions capture the steps involved in bleaching cotton, focusing on the state changes of the washer, clothing, and other relevant entities.\n(:action start_with_unprocessed_hair\n    :parameters (?person - entity ?hair - entity)\n    :precondition (not (processed ?hair))\n    :effect (unprocessed ?hair)\n)\n\n;; Action to pre-condition hair with a deep conditioner\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:throw\n\n\nAction sets that need to be merged:\n(:action throw_in_dryer ; throw the diapers into the dryer for a few minutes\n    :parameters (?npc - npc ?diapers - cloth_diapers ?dryer - dryer)\n    :precondition (and (at ?npc ?dryer) (at ?diapers ?dryer) (treated ?diapers))\n    :effect (and (dry ?diapers))\n)\n```\n\n### Explanation of Actions:\n\n1. **wash_papyrus**: This action washes the cloth diapers.\n   - **Parameters**: `?npc` (the person), `?diapers` (the cloth diapers), `?location` (the location where washing occurs)\n   - **Preconditions**: The person and diapers must be at the same location, and the diapers must not be wet.\n   - **Effect**: The diapers become wet and clean.\n\n2. **lay_add_stick**: This action lays the diapers out flat with stains facing up.\n   - **Parameters**: `?npc` (the person), `?diapers` (the cloth diapers), `?location` (the location where the diapers are laid out)\n   - **Preconditions**: The person and diapers must be at the same location, and the diapers must be wet.\n   - **Effect**: The diapers become flat.\n\n3. **line_dry_papyrus**: This action line-dries the diapers or drapes them over a drying rack.\n   - **Parameters**: `?npc` (the person), `?diapers` (the cloth diapers), `?location` (the location where the diapers are dried)\n   - **Preconditions**: The person and diapers must be at the same location, and the diapers must be flat.\n   - **Effect**: The diapers start drying.\n\n4. **choose_amazing**: This action chooses a sunny day for the best results.\n   - **Parameters**: `?npc` (the person), `?day` (the day)\n   - **Preconditions**: The day must be sunny.\n   - **Effect**: The day is chosen for the best results.\n\n5. **spray_lemon_juice**: This action sprays lemon juice onto the worst stains.\n   - **Parameters**: `?npc` (the person), `?diapers` (the cloth diapers), `?juice` (the lemon juice), `?location` (the location where the spraying occurs)\n   - **Preconditions**: The person, diapers, and juice must be at the same location, the diapers must be drying, and they must have the worst stains.\n   - **Effect**: The diapers are treated with lemon juice.\n\n6. **bring_closest_to_bed**: This action brings the cloth diapers in after a few hours.\n   - **Parameters**: `?npc` (the person), `?diapers` (the cloth diapers), `?location` (the location where the diapers are brought in)\n   - **Preconditions**: The person and diapers must be at the same location, and the diapers must be treated.\n   - **Effect**: The diapers are brought in.\n\n7. **repeat_process**: This action repeats the process for stubborn stains.\n   - **Parameters**: `?npc` (the person), `?diapers` (the cloth diapers), `?location` (the location where the process is repeated)\n   - **Preconditions**: The person and diapers must be at the same location, the diapers must be brought in, and they must have stubborn stains.\n   - **Effect**: The diapers are treated again.\n\n8. **throw_in_dryer**: This action throws the diapers into the dryer for a few minutes.\n   - **Parameters**: `?npc` (the person), `?diapers` (the cloth diapers), `?dryer` (the dryer)\n   - **Preconditions**: The person and diapers must be at the dryer, and the diapers must be treated.\n   - **Effect**: The diapers become dry.\n\nThese actions capture the steps and state changes involved in solar bleaching cloth diapers.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:run\n\n\nAction sets that need to be merged:\n(:action run_washer\n    :parameters (?washer - washer ?machine - machine)\n    :precondition (and (full_with_clothing ?washer) (full_with_detergent_and_bleach ?machine) (full_with_water ?washer))\n    :effect (and (running ?washer))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:check\n\n\nAction sets that need to be merged:\n(:action check_conditioner\n    :parameters (?person - entity ?hair - entity ?conditioner - entity)\n    :precondition (and (unprocessed ?hair) (not (conditioned ?hair)))\n    :effect (and\n              (conditioned ?hair)\n              (less-full ?conditioner)\n            )\n)\n\n;; Action to juice several lemons\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:sit\n\n\nAction sets that need to be merged:\n(:action sit_in_sunshine\n    :parameters (?person - entity ?hair - entity)\n    :precondition (hair-wet ?hair)\n    :effect (hair-bleached ?hair)\n)\n\n;; Action to wash hair\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:read\n\n\nAction sets that need to be merged:\n(:action read_tag\n    :parameters (?npc - npc)\n    :precondition (and\n                    (has_garment ?npc)\n                    (not (read_tag ?npc)))\n    :effect (and\n              (read_tag ?npc)\n              (knows_bleach_safety ?npc))\n  )\n\n  ;; Action 2: Gather garments\n  \nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:use\n\n\nAction sets that need to be merged:\n(:action use_water\n    :parameters (?p - person ?w - water ?s - sink)\n    :precondition (and (at ?p ?loc) (at ?w ?s) (temperature ?w cold))\n    :effect (and (diluted ?w ?b) (not (at ?w ?s)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:let\n\n\nAction sets that need to be merged:\n(:action let_paper_wicks_open ; let the paper wicks open to dry\n    :parameters (?w - wick ?loc - location)\n    :precondition (and (at ?w ?loc) (wet ?w))\n    :effect (and (dry ?w) (not (wet ?w)))\n)\n```\n\nExplanation of the actions:\n\n1. **prepare_acetone_wicks**: This action prepares the acetone wash by wetting the wicks.\n   - **Parameters**: `?a` (agent), `?w` (wick), `?loc` (location)\n   - **Preconditions**: The agent is at the location, and the wick is dry.\n   - **Effect**: The wick becomes wet.\n\n2. **put_gens_in_machine**: This action involves putting gens into a machine.\n   - **Parameters**: `?npc` (npc), `?machine` (machine), `?gen` (gen), `?loc` (location)\n   - **Preconditions**: The npc is at the location, has the gen, and the machine is at the location.\n   - **Effect**: The gen is placed in the machine.\n\n3. **hold_ink_stained_paper**: This action involves holding the ink-stained paper under acetone.\n   - **Parameters**: `?npc` (npc), `?paper` (paper), `?loc` (location)\n   - **Preconditions**: The npc is at the location, the paper is ink-stained, and the location has acetone.\n   - **Effect**: The paper is held by the npc and starts the washing process.\n\n4. **wash_paper**: This action washes the paper.\n   - **Parameters**: `?npc` (npc), `?paper` (paper), `?loc` (location)\n   - **Preconditions**: The npc is at the location and is holding the paper.\n   - **Effect**: The paper is washed and no longer ink-stained.\n\n5. **let_paper_wicks_open**: This action lets the paper wicks open to dry.\n   - **Parameters**: `?w` (wick), `?loc` (location)\n   - **Preconditions**: The wick is at the location and is wet.\n   - **Effect**: The wick becomes dry.\n\nThese actions encapsulate the steps required to bleach paper, focusing on the relevant state changes such as the wetness of the wicks and the ink-stained state of the paper.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:restart\n\n\nAction sets that need to be merged:\n(:action restart_machine\n    :parameters (?npc - npc ?wm - washingmachine)\n    :precondition (and (at ?npc ?wm) (blend_in_machine ?wm))\n    :effect (and (machine_on ?wm) (not (machine_off ?wm)))\n)\n```\n\n### Explanation of Actions:\n\n1. **set_wicks_in_machine**\n   - **Parameters**: `?wm - washingmachine`, `?wicks - wicks`\n   - **Preconditions**: The wicks are at the washing machine and the machine is empty.\n   - **Effects**: The machine becomes full and is no longer empty.\n\n2. **add_blend_into_machine**\n   - **Parameters**: `?user - user`, `?bleach - bleach`, `?wm - washingmachine`\n   - **Preconditions**: The user is at the washing machine, the user has bleach, and the machine is full.\n   - **Effects**: The bleach is added to the machine, and the user no longer has the bleach.\n\n3. **put_blend_in_machine**\n   - **Parameters**: `?npc - npc`, `?wm - washingmachine`\n   - **Preconditions**: The NPC is at the washing machine, bleach is in the machine, and the machine is full.\n   - **Effects**: The blend (combination of bleach and wicks) is in the machine.\n\n4. **restart_machine**\n   - **Parameters**: `?npc - npc`, `?wm - washingmachine`\n   - **Preconditions**: The NPC is at the washing machine and the blend is in the machine.\n   - **Effects**: The machine is turned on and is no longer off.\n\nThese actions reflect the steps required to use bleach in a washing machine, ensuring the machine's state transitions are accurately captured.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:determine\n\n\nAction sets that need to be merged:\n(:action determine_agent\n    :parameters (?p - person ?a - agent)\n    :precondition (and\n      (not (has_agent ?p ?a))\n    )\n    :effect (has_agent ?p ?a)\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u6df7\u5408\u6728\u6750\n  \nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:apply\n\n\nAction sets that need to be merged:\n(:action apply_neutralizing_agent\n    :parameters (?p - person ?a - agent ?w - wood)\n    :precondition (and\n      (has_agent ?p ?a)\n      (blended ?w)\n      (cleaned ?f ?l)\n      (mixed ?n ?b)\n      (not (neutralized ?w))\n    )\n    :effect (neutralized ?w)\n  )\n)\n\n(define (problem neutralize_bleach_problem)\n  (:domain neutralize_bleach)\n  (:objects\n    alice - person\n    fir1 - fir\n    log1 - log\n    wood1 - wood\n    neutralizer1 - neutralizer\n    mixing_bowl1 - mixing_bowl\n    agent1 - agent\n  )\n  (:init\n    (not (has_agent alice agent1))\n    (not (blended wood1))\n    (not (cleaned fir1 log1))\n    (not (mixed neutralizer1 mixing_bowl1))\n    (not (neutralized wood1))\n  )\n  (:goal\n    (and\n      (neutralized wood1)\n    )\n  )\n)\n```\n\n### Descriptions of Actions:\n\n1. **determine_agent**:\n   - **Action name**: determine_agent\n   - **Parameters**: (?p - person, ?a - agent)\n   - **Preconditions**: The person does not have the agent.\n   - **Effects**: The person has the agent.\n\n2. **blend_wood**:\n   - **Action name**: blend_wood\n   - **Parameters**: (?p - person, ?w - wood)\n   - **Preconditions**: The wood is not blended.\n   - **Effects**: The wood is blended.\n\n3. **clean_wood**:\n   - **Action name**: clean_wood\n   - **Parameters**: (?p - person, ?f - fir, ?l - log)\n   - **Preconditions**: The fir and log are not cleaned.\n   - **Effects**: The fir and log are cleaned.\n\n4. **mix_neutralizer**:\n   - **Action name**: mix_neutralizer\n   - **Parameters**: (?p - person, ?n - neutralizer, ?b - mixing_bowl)\n   - **Preconditions**: The neutralizer is not mixed in the mixing bowl.\n   - **Effects**: The neutralizer is mixed in the mixing bowl.\n\n5. **apply_neutralizing_agent**:\n   - **Action name**: apply_neutralizing_agent\n   - **Parameters**: (?p - person, ?a - agent, ?w - wood)\n   - **Preconditions**: The person has the agent, the wood is blended, the fir and log are cleaned, the neutralizer is mixed, and the wood is not neutralized.\n   - **Effects**: The wood is neutralized.\n(:action apply_ingredients_to_skin\n    :parameters (?a - agent ?c - container)\n    :precondition (and\n      (paste_created ?c)\n      (not (applied ?a ?c))\n    )\n    :effect (and\n      (applied ?a ?c)\n      (waiting ?a)\n    )\n  )\n\n  ;;; Action 5: Wait for Paste to Work\n  \nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:juice\n\n\nAction sets that need to be merged:\n(:action juice-lemon\n    :parameters (?lemon - entity ?juice - entity ?faucet - entity)\n    :precondition (and (not (juice-extracted ?lemon)) (power-on ?faucet))\n    :effect (and\n              (juice-extracted ?lemon)\n              (juice-available ?juice)\n            )\n)\n\n;; Action to dilute the lemon juice\n\nThe actions after the merger are:"
]