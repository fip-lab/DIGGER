[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:remove\n\n\nAction sets that need to be merged:\n(:action remove_shine_from_nail\n    :parameters (?p - person ?nail - nail)\n    :precondition (and (has_shine ?nail))\n    :effect (and (not (has_shine ?nail)) (buffed ?nail))\n)\n\n\n(:action remove_tape\n    :parameters (?p - person ?nail - nail)\n    :precondition (and (tape_on ?nail))\n    :effect (and (not (tape_on ?nail)))\n)\n\n\n(:action remove_nail_polish\n    :parameters (?fairy_moss - fairy_moss)\n    :precondition (and (got_nail_polish ?npc) (excess_nail_polish ?fairy_moss))\n    :effect (and (removed_excess_nail_polish ?fairy_moss) (not (excess_nail_polish ?fairy_moss)))\n)\n```\n\n3. **Action: use_acetone**\n   - **Parameters:** `(?acetone - acetone ?bottle - bottle)`\n   - **Preconditions:** `(and (removed_excess_nail_polish ?fairy_moss) (in_bottle ?acetone ?bottle))`\n   - **Effect:** `(and (acetone_used ?acetone) (not (in_bottle ?acetone ?bottle)) (on_surface ?acetone))`\n\n```lisp\n\n(:action remove_polish\n    :parameters (?p - person ?nails - nails ?water - water)\n    :precondition (and (applied ?polish ?nails) (inventory ?p ?water))\n    :effect (and (soaked ?nails) (not (inventory ?p ?water)))\n)\n\n\n(:action clean_room\n    :parameters (?p - person ?rug - rug ?cloth - cloth)\n    :precondition (and (dirty ?rug) (dry ?cloth))\n    :effect (and (clean ?rug) (wet ?cloth))\n)\n\n\n(:action clean_bottle\n    :parameters (?b - bottle)\n    :precondition (dirty ?b)\n    :effect (and\n        (clean ?b)\n        (not (dirty ?b))\n    )\n)\n\n;;; Action 2: Choose Items for Small Storage Container\n\n(:action clean_work_station\n    :parameters (?p - person ?w - workstation)\n    :precondition (and\n      (not (cleaned ?w))\n    )\n    :effect (cleaned ?w)\n)\n\n;; Action 3: Clean nails\n\n(:action clean_nails\n    :parameters (?p - person ?n - nails)\n    :precondition (and\n      (wiped ?n)\n      (not (cleaned ?n))\n    )\n    :effect (cleaned ?n)\n)\n\n;; Action 4: Choose lighter stick\n\n(:action brush_and_flatten_gel_polish\n    :parameters (?p - person ?gel_polish - gel_polish)\n    :precondition (and (has_brush ?p))\n    :effect (and (applied ?gel_polish) (flattened ?gel_polish))\n)\n\n\n(:action cure_foundation\n    :parameters (?p - person ?nail - nail ?lamp - lamp)\n    :precondition (and (applied ?gel_polish) (has_lamp ?p))\n    :effect (and (cured ?gel_polish))\n)\n\n\n(:action cure_wound\n    :parameters (?p - person ?wick - wick ?lamp - lamp)\n    :precondition (and (has_wound ?p))\n    :effect (and (not (has_wound ?p)) (cured ?wick))\n)\n\n\n(:action peel_and_flatten_gremixture\n    :parameters (?glue - glue ?container - container)\n    :precondition (and (glue_applied ?nail) (not (glue_removed ?nail)))\n    :effect (and (glue_removed ?nail) (glue_in_container ?glue ?container))\n)\n```\n\n### Explanation of Actions:\n\n1. **gather_materials**\n   - **Parameters:** `?p` (person), `?m` (materials)\n   - **Preconditions:** The person does not currently have the materials.\n   - **Effect:** The person has the materials.\n\n2. **paint_with_glue**\n   - **Parameters:** `?npc` (person), `?nail` (nail), `?glue` (glue)\n   - **Preconditions:** The person has the glue, and the glue is not yet applied to the nail.\n   - **Effect:** The glue is applied to the nail.\n\n3. **dry_wicks**\n   - **Parameters:** `?wick` (wick)\n   - **Preconditions:** The wick is wet.\n   - **Effect:** The wick becomes dry.\n\n4. **paint_nail_with_polish**\n   - **Parameters:** `?npc` (person), `?nail` (nail), `?polish` (polish)\n   - **Preconditions:** The glue is applied to the nail, and the polish is not yet applied.\n   - **Effect:** The polish is applied to the nail.\n\n5. **dry_nail**\n   - **Parameters:** `?npc` (person), `?nail` (nail)\n   - **Preconditions:** The polish is applied to the nail, and the nail is not yet dry.\n   - **Effect:** The nail becomes dry.\n\n6. **peel_and_flatten_gremixture**\n   - **Parameters:** `?glue` (glue), `?container` (container)\n   - **Preconditions:** The glue is applied to the nail, and the glue is not yet removed.\n   - **Effect:** The glue is removed from the nail and placed in the container.\n\nThese actions capture the sequence and state changes required to complete the task of removing nail polish from around the nails.\n(:action peel_gel\n    :parameters (?alice - person ?nail - nail)\n    :precondition (and (at ?alice ?loc) (peelable ?nail))\n    :effect (not (gel_applied ?nail))\n  )\n\n  \n(:action peel_strip\n    :parameters (?npc - nail_polish_pack ?strip - strip)\n    :precondition (and (size_chosen ?npc) (attached ?strip))\n    :effect (and (removed ?strip) (not (attached ?strip)))\n)\n\n\n(:action peel_old_polish\n    :parameters (?p - person ?nails - nails)\n    :precondition (and (soaked ?nails) (applied ?polish ?nails))\n    :effect (and (clean ?nails) (not (applied ?polish ?nails)))\n)\n```\n\n### Descriptions of PDDL Actions:\n\n1. **make_base_coathanger**\n    - **Parameters**: ?p (person), ?glue (glue), ?water (water), ?coathanger (coathanger)\n    - **Preconditions**: The person has glue, water, and a coathanger in their inventory.\n    - **Effect**: The coathanger is now considered to have a base coat. The glue and water are no longer in the inventory.\n\n2. **dry_gems**\n    - **Parameters**: ?p (person), ?gems (gems), ?glue_base_coathanger (coathanger)\n    - **Preconditions**: The person has gems in their inventory and the coathanger has a base coat.\n    - **Effect**: The gems are dried and attached to the coathanger. The gems are no longer in the inventory.\n\n3. **apply_nail_polish**\n    - **Parameters**: ?p (person), ?polish (nail_polish), ?nails (nails)\n    - **Preconditions**: The person has nail polish in their inventory and the nails are clean.\n    - **Effect**: The nail polish is applied to the nails. The nail polish is no longer in the inventory.\n\n4. **remove_polish**\n    - **Parameters**: ?p (person), ?nails (nails), ?water (water)\n    - **Preconditions**: The nail polish is applied to the nails and the person has water in their inventory.\n    - **Effect**: The nails are soaked. The water is no longer in the inventory.\n\n5. **peel_old_polish**\n    - **Parameters**: ?p (person), ?nails (nails)\n    - **Preconditions**: The nails are soaked and have nail polish applied.\n    - **Effect**: The nails are clean and the nail polish is no longer applied.\n(:action polish_and_press_on\n  :parameters (?npc - player ?ws - work_station ?desk - desk)\n  :precondition (and (at ?npc ?ws) (at ?ws ?desk) (state ?npc bare) (state ?desk laden))\n  :effect (and (state ?npc camouflaged) (state ?desk empty))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:dry\n\n\nAction sets that need to be merged:\n(:action dry_polish\n    :parameters (?p - person ?nail - nail)\n    :precondition (and (applied ?nail_polish))\n    :effect (and (dry ?nail_polish))\n)\n\n\n(:action dry_wicks\n    :parameters (?wick - wick)\n    :precondition (wet ?wick)\n    :effect (and (dry ?wick) (not (wet ?wick)))\n)\n\n\n(:action dry_nail\n      :parameters (?n - npc ?np - nail_polish)\n      :precondition (and (not (dry ?np)) (located ?np on_wood))\n      :effect (dry ?np)\n   )\n```\n\n### Action 3: cut_time\n```pddl\n\n(:action dry_gems\n    :parameters (?p - person ?gems - gems ?glue_base_coathanger - coathanger)\n    :precondition (and (inventory ?p ?gems) (base_coat ?glue_base_coathanger))\n    :effect (and (dry ?gems) (attached ?gems ?glue_base_coathanger) (not (inventory ?p ?gems)))\n)\n\n\n(:action smooth_strip\n    :parameters (?strip - strip)\n    :precondition (and (on_nail ?strip) (not (smooth ?strip)))\n    :effect (and (smooth ?strip))\n)\n\n\n(:action bend_to_pick\n  :parameters (?npc - player)\n  :precondition (and (state ?npc short_nails))\n  :effect (state ?npc buffed_nails)\n)\n\n\n(:action dissolve_polish\n  :parameters (?n - npc ?b - bottle ?thinner - nail_polish_thinner)\n  :precondition (and (at ?n ?b) (hardened_polish ?b) (has ?n ?thinner))\n  :effect (and (not (hardened_polish ?b)) (dissolved_polish ?b))\n)\n\n\n(:action soften_stick\n  :parameters (?n - npc ?b - bottle ?water - hot_water)\n  :precondition (and (at ?n ?b) (stuck_polish ?b) (has ?n ?water))\n  :effect (and (not (stuck_polish ?b)) (softened_polish ?b))\n)\n```\n\n### Explanation:\n\n1. **open_bottle**:\n   - **Parameters**: `?u` (user), `?b` (bottle)\n   - **Preconditions**: The user is at the location of the bottle, and the bottle is closed with a lid.\n   - **Effect**: The bottle is opened, and it is no longer closed with a lid.\n\n2. **set_cap_on_counter**:\n   - **Parameters**: `?u` (user), `?b` (bottle), `?c` (counter)\n   - **Preconditions**: The user is at the location of the bottle, the bottle is open, and the user has the cap.\n   - **Effect**: The cap is set on the counter, and the user no longer has the cap.\n\n3. **wrap_rubber_band**:\n   - **Parameters**: `?u` (user), `?b` (bottle), `?rb` (rubber band)\n   - **Preconditions**: The user is at the location of the bottle, the bottle is open, and the user has a rubber band.\n   - **Effect**: The rubber band is wrapped around the bottle.\n\n4. **dissolve_polish**:\n   - **Parameters**: `?n` (npc), `?b` (bottle), `?thinner` (nail polish thinner)\n   - **Preconditions**: The npc is at the location of the bottle, the polish in the bottle is hardened, and the npc has nail polish thinner.\n   - **Effect**: The polish in the bottle is dissolved and no longer hardened.\n\n5. **soften_stick**:\n   - **Parameters**: `?n` (npc), `?b` (bottle), `?water` (hot water)\n   - **Preconditions**: The npc is at the location of the bottle, the polish in the bottle is stuck, and the npc has hot water.\n   - **Effect**: The polish in the bottle is softened and no longer stuck.\n\nThese actions reflect the steps required to open a nail polish bottle, ensuring that the relevant states and conditions are accurately captured in the PDDL actions.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:add\n\n\nAction sets that need to be merged:\n(:action add_gel_topcoat\n    :parameters (?p - person ?topcoat - gel_topcoat ?nail - nail)\n    :precondition (and (dry ?nail_polish))\n    :effect (and (applied ?topcoat))\n)\n\n\n(:action add_gel_coat\n    :parameters (?p - player ?top_coat - gel_top_coat ?nails - nails) \n    :precondition (and (applied ?polish ?nails) (at ?p ?nails) (not (coated ?nails)))\n    :effect (and (coated ?nails) (air_drying ?nails))\n)\n```\n\n### Explanation of Actions:\n\n1. **select_gel_polish**\n   - **Parameters**: `?p` (player), `?polish` (gel polish), `?location` (location)\n   - **Preconditions**: The player is at the location, the gel polish is at the location, and the polish is not already selected.\n   - **Effect**: The polish is selected and no longer at the location.\n\n2. **apply_polish**\n   - **Parameters**: `?p` (player), `?polish` (gel polish), `?nails` (nails)\n   - **Preconditions**: The gel polish is selected, and the player is at the nails.\n   - **Effect**: The polish is applied to the nails, the polish is no longer selected, and the nails are air drying.\n\n3. **add_gel_coat**\n   - **Parameters**: `?p` (player), `?top_coat` (gel top coat), `?nails` (nails)\n   - **Preconditions**: The polish has been applied to the nails, the player is at the nails, and the nails are not yet coated.\n   - **Effect**: The nails are coated with the top coat and are air drying.\n\nThese actions capture the steps needed to dry gel nail polish, focusing on the selection, application, and final coating stages, along with the necessary state changes such as selection, application, and air drying.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:wipe\n\n\nAction sets that need to be merged:\n(:action wipe_tape_with_alcohol_clean\n    :parameters (?p - person ?nail - nail)\n    :precondition (and (applied ?topcoat) (cured ?topcoat))\n    :effect (and (clean ?nail))\n)\n```\n\n### Explanation of PDDL Actions:\n\n1. **remove_shine_from_nail**\n    - **Parameters**: Person and Nail\n    - **Preconditions**: Nail has shine\n    - **Effects**: Nail no longer has shine and is buffed\n\n2. **clean_room**\n    - **Parameters**: Person, Rug, Cloth\n    - **Preconditions**: Rug is dirty, Cloth is dry\n    - **Effects**: Rug is clean, Cloth is wet\n\n3. **brush_and_flatten_gel_polish**\n    - **Parameters**: Person, Gel Polish\n    - **Preconditions**: Person has a brush\n    - **Effects**: Gel Polish is applied and flattened\n\n4. **cure_foundation**\n    - **Parameters**: Person, Nail, Lamp\n    - **Preconditions**: Gel Polish is applied, Person has a lamp\n    - **Effects**: Gel Polish is cured\n\n5. **remove_tape**\n    - **Parameters**: Person, Nail\n    - **Preconditions**: Tape is on Nail\n    - **Effects**: Tape is removed from Nail\n\n6. **apply_nail_polish**\n    - **Parameters**: Person, Nail Polish, Nail\n    - **Preconditions**: Gel Polish is cured\n    - **Effects**: Nail Polish is applied\n\n7. **dry_polish**\n    - **Parameters**: Person, Nail\n    - **Preconditions**: Nail Polish is applied\n    - **Effects**: Nail Polish is dry\n\n8. **add_gel_topcoat**\n    - **Parameters**: Person, Gel Topcoat, Nail\n    - **Preconditions**: Nail Polish is dry\n    - **Effects**: Gel Topcoat is applied\n\n9. **cure_wound**\n    - **Parameters**: Person, Wick, Lamp\n    - **Preconditions**: Person has a wound\n    - **Effects**: Person's wound is cured, Wick is cured\n\n10. **wipe_tape_with_alcohol_clean**\n    - **Parameters**: Person, Nail\n    - **Preconditions**: Gel Topcoat is applied and cured\n    - **Effects**: Nail is clean\n(:action wipe_nails\n    :parameters (?p - person ?n - nails)\n    :precondition (and\n      (not (wiped ?n))\n    )\n    :effect (wiped ?n)\n)\n\n;; Action 2: Clean the workstation\n\n(:action insert_cuticle_stick\n    :parameters (?npc - person ?nail - nail ?cuticle_stick - item)\n    :precondition (and (at ?npc ?loc) (chipped ?nail) (has ?npc ?cuticle_stick))\n    :effect (peelable ?nail)\n  )\n\n  \n(:action place_strip_on_nail\n    :parameters (?npc - nail_polish_pack ?strip - strip)\n    :precondition (and (removed ?strip))\n    :effect (and (on_nail ?strip) (not (removed ?strip)))\n)\n\n\n(:action replenish_wicks\n  :parameters (?wick - wick)\n  :precondition (and (state ?wick dry))\n  :effect (state ?wick wet)\n)\n\n\n(:action set_cap_on_counter\n  :parameters (?u - user ?b - bottle ?c - counter)\n  :precondition (and (at ?u ?b) (open ?b) (has_cap ?u))\n  :effect (and (not (has_cap ?u)) (on_counter ?c ?b))\n)\n\n\n(:action wrap_rubber_band\n  :parameters (?u - user ?b - bottle ?rb - rubber_band)\n  :precondition (and (at ?u ?b) (open ?b) (has ?u ?rb))\n  :effect (and (wrapped ?b ?rb))\n)\n\n\n(:action wash_soap_with_clean\n    :parameters (?cloth - cloth)\n    :precondition (and (acetone_used ?acetone) (clean ?cloth))\n    :effect (and (stain_washed ?cloth) (not (clean ?cloth)) (wet ?cloth))\n)\n```\n\nThis set of PDDL actions captures the steps and state transitions required to remove nail polish from a surface, ensuring that the entity states are appropriately updated before and after each action.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:choose\n\n\nAction sets that need to be merged:\n(:action select_gel_polish\n    :parameters (?p - player ?polish - gel_polish ?location - location) \n    :precondition (and (at ?p ?location) (at ?polish ?location) (not (selected ?polish)))\n    :effect (and (selected ?polish) (not (at ?polish ?location)))\n)\n\n\n(:action gather_materials\n    :parameters (?p - person ?m - materials)\n    :precondition (and (not (has_materials ?p ?m)))\n    :effect (has_materials ?p ?m)\n)\n\n\n(:action choose_items\n    :parameters (?ci - craft_item ?c - container)\n    :precondition (and\n        (disorganized ?ci)\n        (empty ?c)\n    )\n    :effect (and\n        (organized ?ci)\n        (fuller ?c)\n        (not (disorganized ?ci))\n        (not (empty ?c))\n    )\n)\n\n;;; Action 3: Reuse the Bottle as a Glue Dispenser\n\n(:action choose_size\n    :parameters (?npc - nail_polish_pack)\n    :precondition (and (opened ?npc) (not (size_chosen ?npc)))\n    :effect (and (size_chosen ?npc))\n)\n\n\n(:action choose_lightestick\n    :parameters (?p - person ?s - lightestick)\n    :precondition (and\n      (cleaned ?n)\n      (not (chosen ?s))\n    )\n    :effect (chosen ?s)\n)\n```\n\nIn this task, the entity states focus on whether the nails are wiped and cleaned, whether the workstation is cleaned, and whether the lighter stick is chosen. Each action reflects these state changes in its preconditions and effects.\n(:action get_nail_polish\n    :parameters (?npc - npc)\n    :precondition ()\n    :effect (got_nail_polish ?npc)\n)\n```\n\n2. **Action: remove_nail_polish**\n   - **Parameters:** `(?fairy_moss - fairy_moss)`\n   - **Preconditions:** `(and (got_nail_polish ?npc) (excess_nail_polish ?fairy_moss))`\n   - **Effect:** `(and (removed_excess_nail_polish ?fairy_moss) (not (excess_nail_polish ?fairy_moss)))`\n\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:paint\n\n\nAction sets that need to be merged:\n(:action paint_with_glue\n    :parameters (?npc - person ?nail - nail ?glue - glue)\n    :precondition (and (has_materials ?npc ?glue) (not (glue_applied ?nail)))\n    :effect (glue_applied ?nail)\n)\n\n\n(:action paint_nail_with_polish\n    :parameters (?npc - person ?nail - nail ?polish - polish)\n    :precondition (and (glue_applied ?nail) (not (polish_applied ?nail)))\n    :effect (polish_applied ?nail)\n)\n\n\n(:action make_horizontal_bar\n    :parameters (?np - nail_polish ?b - bottle)\n    :precondition (and\n        (in_tin ?np)\n        (empty ?b)\n    )\n    :effect (and\n        (on_wood ?np)\n        (full ?b)\n        (not (in_tin ?np))\n        (not (empty ?b))\n    )\n)\n```\n\n### Descriptions and Entity States:\n\n1. **Clean the Bottle**:\n   - **Precondition**: The bottle must be dirty.\n   - **Effect**: The bottle becomes clean.\n\n2. **Choose Items for Small Storage Container**:\n   - **Precondition**: The craft items are disorganized and the container is empty.\n   - **Effect**: The craft items become organized and the container becomes fuller.\n\n3. **Reuse the Bottle as a Glue Dispenser**:\n   - **Precondition**: The bottle is clean and the user has selected it.\n   - **Effect**: The bottle is now used as a glue dispenser and is no longer considered clean.\n\n4. **Make Horizontal Bar with Nail Polish**:\n   - **Precondition**: The nail polish is in a tin and the bottle is empty.\n   - **Effect**: The nail polish is placed on wood and the bottle is filled with nail polish.\n\nThese actions accurately reflect the state changes in the entities involved in the task.\n(:action make_base_coathanger\n    :parameters (?p - person ?glue - glue ?water - water ?coathanger - coathanger)\n    :precondition (and (inventory ?p ?glue) (inventory ?p ?water) (inventory ?p ?coathanger))\n    :effect (and (base_coat ?coathanger) (not (inventory ?p ?glue)) (not (inventory ?p ?water)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:cut\n\n\nAction sets that need to be merged:\n(:action chip_nail\n    :parameters (?npc - person ?nail - nail)\n    :precondition (and (at ?npc ?loc) (gel_applied ?nail))\n    :effect (chipped ?nail)\n  )\n\n  \n(:action cut_nail\n  :parameters (?npc - player)\n  :precondition (and (state ?npc camouflaged))\n  :effect (state ?npc short_nails)\n)\n\n\n(:action cut_time\n      :parameters (?n - npc ?np - nail_polish)\n      :precondition (and (dry ?np) (not (quick_dry ?np)))\n      :effect (quick_dry ?np)\n   )\n```\n\n### Description of Actions:\n\n1. **use_as_quick_drying**\n   - **Parameters**: ?n (nail_polish), ?p (products)\n   - **Preconditions**: \n     - The nail polish is located in the tin.\n     - The quick-drying products are located around the house.\n   - **Effects**:\n     - The nail polish is now located on wood (indicating that it has been applied).\n     - The quick-drying products are now in the waste basket (indicating they have been used).\n\n2. **dry_nail**\n   - **Parameters**: ?n (npc), ?np (nail_polish)\n   - **Preconditions**: \n     - The nail polish is not dry.\n     - The nail polish is located on wood.\n   - **Effects**:\n     - The nail polish is now dry.\n\n3. **cut_time**\n   - **Parameters**: ?n (npc), ?np (nail_polish)\n   - **Preconditions**: \n     - The nail polish is dry.\n     - The nail polish is not quick-dry.\n   - **Effects**:\n     - The nail polish is now quick-dry (indicating that drying drops or setting spray has been used to accelerate the drying process).\n\nThese actions capture the essence of the task and the necessary state transitions for drying nail polish quickly.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:condition\n\n\nAction sets that need to be merged:\n(:action condition_nail\n    :parameters (?npc - person ?nail - nail ?conditioner - item)\n    :precondition (and (at ?npc ?loc) (not (gel_applied ?nail)) (has ?npc ?conditioner))\n    :effect (conditioned ?nail)\n  )\n)\n```\n\n### Explanation:\n\n1. **chip_nail**:\n   - **Action Name**: chip_nail\n   - **Parameters**: `?npc` (person), `?nail` (nail)\n   - **Preconditions**: The `npc` is at the location and the nail has gel applied.\n   - **Effect**: The nail becomes chipped.\n\n2. **insert_cuticle_stick**:\n   - **Action Name**: insert_cuticle_stick\n   - **Parameters**: `?npc` (person), `?nail` (nail), `?cuticle_stick` (item)\n   - **Preconditions**: The `npc` is at the location, the nail is chipped, and the `npc` has a cuticle stick.\n   - **Effect**: The nail becomes peelable.\n\n3. **peel_gel**:\n   - **Action Name**: peel_gel\n   - **Parameters**: `?alice` (person), `?nail` (nail)\n   - **Preconditions**: Alice is at the location and the nail is peelable.\n   - **Effect**: The gel is removed from the nail.\n\n4. **condition_nail**:\n   - **Action Name**: condition_nail\n   - **Parameters**: `?npc` (person), `?nail` (nail), `?conditioner` (item)\n   - **Preconditions**: The `npc` is at the location, the gel is removed from the nail, and the `npc` has a conditioner.\n   - **Effect**: The nail is conditioned.\n\nThese actions capture the steps and the state changes involved in the task of removing gel nail polish.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:open\n\n\nAction sets that need to be merged:\n(:action open_pack\n    :parameters (?npc - nail_polish_pack)\n    :precondition (and (closed ?npc))\n    :effect (and (opened ?npc) (not (closed ?npc)))\n)\n\n\n(:action open_bottle\n  :parameters (?u - user ?b - bottle)\n  :precondition (and (at ?u ?b) (closed_with_lid ?b))\n  :effect (and (not (closed_with_lid ?b)) (open ?b))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:take\n\n\nAction sets that need to be merged:\n(:action take_file\n    :parameters (?npc - nail_polish_pack)\n    :precondition (and (not (file_taken ?npc)))\n    :effect (and (file_taken ?npc))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:use\n\n\nAction sets that need to be merged:\n(:action use_as_quick_drying\n      :parameters (?n - nail_polish ?p - products)\n      :precondition (and (located ?n in_tin) (located ?p around_house))\n      :effect (and (located ?n on_wood) (located ?p in_waste_basket))\n   )\n```\n\n### Action 2: dry_nail\n```pddl\n\n(:action use_acetone\n    :parameters (?acetone - acetone ?bottle - bottle)\n    :precondition (and (removed_excess_nail_polish ?fairy_moss) (in_bottle ?acetone ?bottle))\n    :effect (and (acetone_used ?acetone) (not (in_bottle ?acetone ?bottle)) (on_surface ?acetone))\n)\n```\n\n4. **Action: wash_soap_with_clean**\n   - **Parameters:** `(?cloth - cloth)`\n   - **Preconditions:** `(and (acetone_used ?acetone) (clean ?cloth))`\n   - **Effect:** `(and (stain_washed ?cloth) (not (clean ?cloth)) (wet ?cloth))`\n\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:apply\n\n\nAction sets that need to be merged:\n(:action apply_nail_polish\n    :parameters (?p - person ?polish - nail_polish ?nails - nails)\n    :precondition (and (inventory ?p ?polish) (clean ?nails))\n    :effect (and (applied ?polish ?nails) (not (inventory ?p ?polish)))\n)\n\n\n(:action apply_polish\n    :parameters (?p - player ?polish - gel_polish ?nails - nails) \n    :precondition (and (selected ?polish) (at ?p ?nails))\n    :effect (and (applied ?polish ?nails) (not (selected ?polish)) (air_drying ?nails))\n)\n\n\n(:action apply_top_coat\n    :parameters (?npc - nail_polish_pack ?velveeta - top_coat)\n    :precondition (and (smooth ?strip) (not (top_coat_applied ?velveeta)))\n    :effect (and (top_coat_applied ?velveeta))\n)\n```\n\nIn these actions, the preconditions and effects reflect the changes in states such as \"opened\", \"removed\", \"on_nail\", \"smooth\", and \"top_coat_applied\". These states are crucial to the task of applying nail polish strips, ensuring the sequence of actions is accurately represented.\n(:action apply_top_coathanger\n  :parameters (?npc - player)\n  :precondition (and (state ?npc buffed_nails))\n  :effect (state ?npc top_coat_applied)\n)\n```\n\n### Explanation of Each Action\n\n1. **polish_and_press_on**:\n   - **Parameters**: The player (npc), the work station (work_station), and the desk (desk).\n   - **Preconditions**: The player is at the work station and the work station is at the desk. The player's nails are bare, and the desk is laden.\n   - **Effect**: The player's nails become camouflaged, and the desk becomes empty.\n\n2. **cut_nail**:\n   - **Parameters**: The player (npc).\n   - **Preconditions**: The player's nails are camouflaged.\n   - **Effect**: The player's nails are cut short.\n\n3. **bend_to_pick**:\n   - **Parameters**: The player (npc).\n   - **Preconditions**: The player's nails are short.\n   - **Effect**: The player's nails are buffed.\n\n4. **replenish_wicks**:\n   - **Parameters**: The wick (wick).\n   - **Preconditions**: The wick is dry.\n   - **Effect**: The wick becomes wet.\n\n5. **apply_top_coathanger**:\n   - **Parameters**: The player (npc).\n   - **Preconditions**: The player's nails are buffed.\n   - **Effect**: A top coat is applied to the player's nails.\n\nThese actions are designed to follow the logical steps of the task \"How to Remove Press\u2010On Nails\" while capturing the state changes of the relevant entities.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:reuse\n\n\nAction sets that need to be merged:\n(:action reuse_bottle\n    :parameters (?u - user ?b - bottle)\n    :precondition (and\n        (clean ?b)\n        (selected ?u)\n    )\n    :effect (and\n        (used_as_glue_dispenser ?b)\n        (not (clean ?b))\n    )\n)\n\n;;; Action 4: Make Horizontal Bar with Nail Polish\n\nThe actions after the merger are:"
]