[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:prepare\n\n\nAction sets that need to be merged:\n(:action prepare_orange\n    :parameters (?o - orange)\n    :precondition (not (prepared ?o))\n    :effect (prepared ?o)\n  )\n\n  ;; Cutting the orange on the cutting board\n  \n(:action prepare_candle\n    :parameters (?npc - player)\n    :precondition (and (melted candle))\n    :effect (and (prepared container))\n)\n\n\n(:action prepare_spoons\n    :parameters (?b - mixing_bowl)\n    :precondition (and\n      (empty ?b)\n    )\n    :effect (and\n      (holding_spoons ?b)\n      (not (empty ?b))\n    )\n)\n\n;; Action 3: Attach spoons to wood\n\n(:action prepare_container\n    :parameters (?chocolate_comb - entity ?container - entity)\n    :precondition (and\n      (at-location ?container in-cabinet)\n    )\n    :effect (and\n      (at-location ?container on-countertop)\n      (at-volume ?container fuller)\n    )\n)\n\n\n(:action prepare_area\n   :parameters (?a - area)\n   :precondition (and (not (prepared ?a)))\n   :effect (and (prepared ?a))\n)\n\n\n(:action prepare_candle_holders\n    :parameters (?user - user ?wick - wick)\n    :precondition (and (at ?user candle_holders) (clean ?candle_holders))\n    :effect (and (prepared ?candle_holders) (wick_placed ?candle_holders ?wick))\n)\n\n\n(:action create_design\n    :parameters (?npc - npc ?ws - work_station)\n    :precondition (not (designed ?ws))\n    :effect (designed ?ws)\n  )\n\n  ;; Lighting the candle\n  \n(:action make_sliplargerbeads\n    :parameters (?npc - npc)\n    :precondition (not (slip_larger_beads ?npc))\n    :effect (slip_larger_beads ?npc)\n  )\n)\n```\n\nEach action reflects the steps needed to make a candle out of an orange, including the necessary preconditions and effects that track the state changes of the entities involved.\n(:action make_wicks_harden\n    :parameters (?wick - wick ?npc - player)\n    :precondition (and (in_dip ?wick))\n    :effect (and (hardened ?wick))\n)\n\n\n(:action make_drill\n   :parameters (?npc - npc ?w - wood ?d - drill)\n   :precondition (and (not (drilled ?w)))\n   :effect (and (drilled ?w))\n)\n```\n\nEach action reflects the state changes of the entities involved in the task of making a tie-dye candle. The parameters, preconditions, and effects are defined to capture the relevant state transitions for each step.\n(:action make_slip_larger_beads\n    :parameters (?npc - person)\n    :precondition (and (released ?tarts) (not (enjoyed ?npc)))\n    :effect (and (enjoyed ?npc))\n)\n```\n\nEach action captures the state transitions and preconditions necessary for making candle tarts. The entity states and their changes are accurately reflected in the preconditions and effects.\n(:action melt_wax\n   :parameters (?w - wax ?m - mold)\n   :precondition (and (not (wax_melted ?w)))\n   :effect (and (wax_melted ?w))\n)\n\n\n(:action cook\n    :parameters (?npc - entity ?kitchen - entity)\n    :precondition (and\n      (at-cleanness ?kitchen clean)\n    )\n    :effect (and\n      (at-cleanness ?kitchen messy)\n    )\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:cut\n\n\nAction sets that need to be merged:\n(:action cut_orange\n    :parameters (?npc - npc ?o - orange ?c - cutting_board)\n    :precondition (and (prepared ?o) (not (cut ?o)))\n    :effect (and (cut ?o) (on_cutting_board ?o ?c))\n  )\n\n  ;; Peeling the orange\n  \n(:action cut_papyrus\n   :parameters (?npc - npc ?papyrus - papyrus)\n   :precondition (and (has_tool ?npc knife) (intact ?papyrus))\n   :effect (and (cut ?papyrus) (not (intact ?papyrus)))\n)\n\n\n(:action cut_squishy_object\n   :parameters (?npc - npc ?item - item)\n   :precondition (and (has_tool ?npc knife) (squishy ?item) (not (cut ?item)))\n   :effect (and (cut ?item))\n)\n\n\n(:action cut_wick\n    :parameters (?wick - wick)\n    :precondition (and (not (cut ?wick)))\n    :effect (and (cut ?wick))\n)\n\n\n(:action cut_final_wick\n    :parameters (?w - wick)\n    :precondition (and (too_long ?w))\n    :effect (and (cut ?w) (not (too_long ?w)))\n  )\n```\n\nEach action reflects the state changes in the entities involved, focusing on their attributes such as cleanliness, attachment, and length. The preconditions and effects are designed to ensure that actions can only be performed when the necessary conditions are met, and they accurately reflect the changes in the state of the entities after the action is performed.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:remove\n\n\nAction sets that need to be merged:\n(:action peel_orange\n    :parameters (?npc - npc ?o - orange ?p - peeler)\n    :precondition (and (cut ?o) (not (peeled ?o)) (in_hand ?p))\n    :effect (peeled ?o)\n  )\n\n  ;; Locating the wick\n  \n(:action remove_from_freezer\n  :parameters (?u - user ?j - jar ?c - candle)\n  :precondition (and (contains ?j ?c) (frozen ?j))\n  :effect (and (not (frozen ?j)))\n)\n\n\n(:action remove_from_mixture\n   :parameters (?c - cubes ?m - mixture)\n   :precondition (and (in_mixture ?c ?m) (hardened ?c))\n   :effect (and (not (in_mixture ?c ?m)) (removed ?c))\n)\n\n\n(:action remove_candle_from_mold\n   :parameters (?v - velveeta ?c - candle)\n   :precondition (and (frozen ?c) (in_mold ?c))\n   :effect (and (not (in_mold ?c)) (removed ?c))\n)\n\n\n(:action grab_wick\n    :parameters (?npc - npc ?w - wick ?c - candle)\n    :precondition (and (hand_near_flame ?npc) (lit ?c))\n    :effect (and (not (lit ?c)) (wick_grabbed ?w))\n)\n\n;; Action to practice with equipment\n\n(:action clean_glass\n    :parameters (?g - glass_filled)\n    :precondition (and (dirty ?g))\n    :effect (and (clean ?g) (not (dirty ?g)))\n  )\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:add\n\n\nAction sets that need to be merged:\n(:action add_oil_to_fridge\n    :parameters (?o - oil_tank ?npc - npc)\n    :precondition (not (added_oil ?o))\n    :effect (added_oil ?o)\n  )\n\n  ;; Creating a design\n  \n(:action add_scent\n   :parameters (?a - alice ?m - mixture)\n   :precondition (and (not (scent_added ?m)))\n   :effect (and (scent_added ?m))\n)\n\n\n(:action add_water_to_hob\n    :parameters (?stove - entity ?water - entity)\n    :precondition (and\n      (at-temperature ?water cold)\n      (at-fullness ?water emptier)\n      (at-location ?water in-pipes)\n      (at-power ?stove off)\n    )\n    :effect (and\n      (at-temperature ?water hot)\n      (at-fullness ?water fuller)\n      (at-location ?water out-of-faucet)\n      (at-power ?stove on)\n    )\n)\n\n\n(:action add-chocolate-sauce\n    :parameters (?mixing_bowl - entity ?chocolate - entity)\n    :precondition (and\n      (at-location ?mixing_bowl empty)\n      (at-texture ?chocolate solid)\n    )\n    :effect (and\n      (at-location ?mixing_bowl in-bowl)\n      (at-texture ?chocolate mixed)\n    )\n)\n\n\n(:action add_scenting_sauce\n    :parameters (?a - alice)\n    :precondition (and (unselected ?a))\n    :effect (and (selected ?a) (not (unselected ?a)))\n  )\n\n\n(:action add_ingredients\n   :parameters (?a - additives ?m - mixture)\n   :precondition (and (not (added ?a ?m)))\n   :effect (and (added ?a ?m))\n)\n\n\n(:action add_ingredient\n    :parameters (?wax - wax ?crayon - crayon ?candle - candle)\n    :precondition (and (melted ?wax) (broken ?crayon) (not (colored ?candle)))\n    :effect (and (colored ?candle))\n)\n\n\n(:action stir_candle\n    :parameters (?npc - player ?saucepan - saucepan)\n    :precondition (and (inventory ?npc candle) (has ?npc saucepan))\n    :effect (and (melted candle) (not (inventory ?npc candle)))\n)\n\n\n(:action stir_wand\n    :parameters (?npc - person ?wand - wand ?candle - candle)\n    :precondition (and (colored ?candle) (not (stirred ?candle)))\n    :effect (and (stirred ?candle))\n)\n\n\n(:action attach_spoons_to_wood\n    :parameters (?s - spoon ?w - wood)\n    :precondition (and\n      (clean ?s)\n      (prepared ?w)\n    )\n    :effect (and\n      (attached ?s ?w)\n      (dirty ?s)\n    )\n)\n\n;; Action 4: Mount candle wall art\n\n(:action mix_ingredients\n    :parameters (?alice - person ?wand - wand ?candle - candle)\n    :precondition (and (stirred ?candle) (not (fragrant ?candle)))\n    :effect (and (fragrant ?candle))\n)\n\n\n(:action tape_papyrus\n    :parameters (?tarts - tarts)\n    :precondition (and (cooled ?wick) (not (released ?tarts)))\n    :effect (and (released ?tarts))\n)\n\n\n(:action collect_candle\n    :parameters (?npc - npc ?c - candle ?l - location)\n    :precondition (and (at ?npc ?l) (at ?c ?l) (partially_used ?c))\n    :effect (and (inventory ?npc ?c) (not (at ?c ?l)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:break\n\n\nAction sets that need to be merged:\n(:action light_candle\n    :parameters (?u - user ?c - candle)\n    :precondition (and (not (lit ?c)))\n    :effect (and (lit ?c))\n)\n\n;; Action to lick fingers\n\n(:action break_wicks\n    :parameters (?wick - wick ?npc - player)\n    :precondition (and (inventory ?npc wick) (whole ?wick))\n    :effect (and (broken ?wick) (not (whole ?wick)))\n)\n\n\n(:action break_paraffin\n    :parameters (?npc - person ?paraffin - paraffin)\n    :precondition (and (has ?npc ?paraffin) (not (broken ?paraffin)))\n    :effect (and (broken ?paraffin))\n)\n\n\n(:action break_candle_into_measuring_cup\n    :parameters (?npc - npc ?cup - measuring_cup)\n    :precondition (not (broken ?npc))\n    :effect (and (broken ?npc) (in_cup ?npc ?cup))\n)\n\n\n(:action dry_wicks\n    :parameters (?w - wick)\n    :precondition (wet ?w)\n    :effect (and (dry ?w) (not (wet ?w)))\n)\n\n;; Place the wick into the empty jar\n\n(:action dry_wicks_again\n    :parameters (?w - wick)\n    :precondition (wet ?w)\n    :effect (and (dry ?w) (not (wet ?w)))\n)\n\n;; Place the candle in a safe area\n\n(:action dry_painting\n    :parameters (?g - glass_filled)\n    :precondition (and (decoration ?g painted) (wetness ?g wet))\n    :effect (and (wetness ?g dry))\n)\n\n\n(:action straighten_wick\n    :parameters (?w - wick)\n    :precondition (and (bent ?w))\n    :effect (and (straight ?w) (not (bent ?w)))\n  )\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:place\n\n\nAction sets that need to be merged:\n(:action place_wicks_in_hole\n    :parameters (?w - wick ?o - orange)\n    :precondition (and (peeled ?o) (located ?w) (not (in_hole ?w ?o)))\n    :effect (in_hole ?w ?o)\n  )\n\n  ;; Making slip larger beads\n  \n(:action place_candle_in_jar\n    :parameters (?user - user ?c - candle ?j - jar)\n    :precondition (and (not (in_jar ?c ?j)))\n    :effect (and (in_jar ?c ?j))\n)\n\n;; Put the candle on the hot plate\n\n(:action place_wick_in_empty_jar\n    :parameters (?w - wick ?j - jar)\n    :precondition (and (dry ?w) (not (in_jar ?w ?j)))\n    :effect (and (in_jar ?w ?j))\n)\n\n;; Pour the melted wax into the jar with the wick\n\n(:action place_safe_area\n    :parameters (?npc - npc ?loc - basement)\n    :precondition (and (not (in_safe_area ?npc ?loc)))\n    :effect (and (in_safe_area ?npc ?loc))\n)\n\n;; Light the candle\n\n(:action place_in_close_cage\n   :parameters (?npc - npc ?basement - basement)\n   :precondition (and (hidden_stash ?npc ?basement))\n   :effect (and (stash_hidden ?basement))\n)\n\n\n(:action place_hand_near_flame\n    :parameters (?npc - npc ?c - candle)\n    :precondition (and (lit ?c) (wet_fingers ?npc))\n    :effect (hand_near_flame ?npc)\n)\n\n;; Action to grab the wick\n\n(:action place_candle_on_table\n    :parameters (?candle - entity ?table - entity)\n    :precondition (and\n      (at-location ?candle in-storage)\n      (at-cleanness ?table clear)\n    )\n    :effect (and\n      (at-location ?candle on-table)\n      (at-cleanness ?table cluttered)\n    )\n)\n\n\n(:action place_bowl_in_saupan\n    :parameters (?bowl - entity ?saucepan - entity)\n    :precondition (and\n      (at-location ?bowl on-countertop)\n      (at-temperature ?saucepan warm)\n    )\n    :effect (and\n      (at-location ?bowl in-saucepan)\n    )\n)\n\n\n(:action place_dip_in_hot_glue\n    :parameters (?u - user ?h - hot_gems)\n    :precondition (and (acquired ?h))\n    :effect (and (placed ?h) (not (acquired ?h)))\n  )\n\n\n(:action place_wicks_in_container\n    :parameters (?w - wax ?c - container)\n    :precondition (and (microwaveable ?w) (empty ?c))\n    :effect (and (fuller ?c) (not (empty ?c)))\n  )\n\n\n(:action place_measuring_cup_into_pan\n    :parameters (?cup - measuring_cup ?stove - stove ?pot - pot ?water - water)\n    :precondition (and (in_cup ?npc ?cup) (not (in_pot ?cup)))\n    :effect (and (in_pot ?cup) (in_pot ?water) (on_stove ?pot ?stove))\n)\n\n\n(:action place_wicks_in_shot_glass\n    :parameters (?w - wick ?g - glass)\n    :precondition (not (in_glass ?w ?g))\n    :effect (and (in_glass ?w ?g))\n)\n\n\n(:action place_saucepan\n    :parameters (?npc - npc ?sp - saucepan ?stove - stove_knob)\n    :precondition (and (inventory ?npc ?sp) (at ?npc ?stove))\n    :effect (and (on ?sp ?stove) (not (inventory ?npc ?sp)))\n)\n\n\n(:action place_full_candle_holders\n    :parameters (?npc - npc ?ch - candle_holders ?hallway - hallway)\n    :precondition (and (at ?npc ?ch) (full ?ch))\n    :effect (and (at ?ch ?hallway) (not (at ?ch ?npc)))\n)\n```\n\n### Explanation of Actions:\n\n1. **collect_candle**:\n   - **Parameters**: `?npc - npc`, `?c - candle`, `?l - location`\n   - **Precondition**: The NPC must be at the location where the partially used candle is.\n   - **Effect**: The candle is added to the NPC's inventory, and it is no longer at the location.\n\n2. **purchase_supplies**:\n   - **Parameters**: `?npc - npc`, `?store - store`\n   - **Precondition**: The NPC must be at the store.\n   - **Effect**: Supplies are added to the NPC's inventory, and they are no longer at the store.\n\n3. **find_saucepan**:\n   - **Parameters**: `?npc - npc`, `?sp - saucepan`, `?l - location`\n   - **Precondition**: The NPC must be at the location where the saucepan is stored (in the cabinet).\n   - **Effect**: The saucepan is added to the NPC's inventory, and it is no longer in the cabinet.\n\n4. **place_saucepan**:\n   - **Parameters**: `?npc - npc`, `?sp - saucepan`, `?stove - stove_knob`\n   - **Precondition**: The NPC must have the saucepan in their inventory and be at the stove.\n   - **Effect**: The saucepan is placed on the stove, and it is no longer in the NPC's inventory.\n\n5. **prepare_candle_holders**:\n   - **Parameters**: `?user - user`, `?wick - wick`\n   - **Precondition**: The user must be at the candle holders and the candle holders must be clean.\n   - **Effect**: The candle holders are prepared, and the wick is placed in them.\n\n6. **check_wax**:\n   - **Parameters**: `?user - user`, `?wick - wick`\n   - **Precondition**: The user must be at the wick, and the wick must be heated.\n   - **Effect**: The wax is stirred.\n\n7. **pour_wicks_into_pan**:\n   - **Parameters**: `?wick - wick`, `?pan - pan`\n   - **Precondition**: The wick must be heated, and the pan must be on the stove.\n   - **Effect**: The wick is placed in the pan, and it is melted.\n\n8. **pour_wax**:\n   - **Parameters**: `?npc - npc`, `?pan - pan`, `?candle_holders - candle_holders`\n   - **Precondition**: The NPC must be at the pan, and the wax in the pan must be melted.\n   - **Effect**: The wax is poured into the candle holders, and the pan no longer contains melted wax.\n\n9. **place_full_candle_holders**:\n   - **Parameters**: `?npc - npc`, `?ch - candle_holders`, `?hallway - hallway`\n   - **Precondition**: The NPC must have the full candle holders.\n   - **Effect**: The full candle holders are placed in the hallway.\n\nThese actions capture the sequence and state transitions required to recycle candles as described in the task.\n(:action wash_jar\n  :parameters (?u - user ?j - jar ?o - canola_oil)\n  :precondition (and (not (clean ?j)) (contains_wax ?j))\n  :effect (and (clean ?j) (not (contains_wax ?j)))\n)\n```\n\n### Descriptions of Actions\n\n1. **freeze_candle_holder**: This action places the jar containing the candle in the freezer to freeze the wax.\n   - **Parameters**: ?u (user), ?j (jar), ?c (candle)\n   - **Preconditions**: The jar contains the candle and is not already frozen.\n   - **Effects**: The jar becomes frozen.\n\n2. **remove_from_freezer**: This action removes the jar from the freezer.\n   - **Parameters**: ?u (user), ?j (jar), ?c (candle)\n   - **Preconditions**: The jar contains the candle and is currently frozen.\n   - **Effects**: The jar is no longer frozen.\n\n3. **pop_wax_out**: This action uses a knife to pop the wax out of the jar.\n   - **Parameters**: ?npc (non-player character), ?j (jar), ?c (candle)\n   - **Preconditions**: The jar contains the candle and does not already contain wax.\n   - **Effects**: The jar no longer contains the candle and now contains wax.\n\n4. **wash_jar**: This action washes the jar to clean it.\n   - **Parameters**: ?u (user), ?j (jar), ?o (canola_oil)\n   - **Preconditions**: The jar is not clean and contains wax.\n   - **Effects**: The jar becomes clean and no longer contains wax.\n\nThese actions capture the steps required to clean a candle jar, focusing on the state changes of the jar, candle, and wax throughout the process.\n(:action pour_into_glass\n    :parameters (?npc - player ?water - water ?faucet - faucet)\n    :precondition (and (melted candle) (power ?faucet on))\n    :effect (and (poured candle) (not (melted candle)))\n)\n\n\n(:action pour_wicks_into_dip\n    :parameters (?wick - wick ?npc - player)\n    :precondition (and (burned ?wick))\n    :effect (and (in_dip ?wick))\n)\n\n\n(:action pour_wax_into_container\n    :parameters (?w - wax ?c - container ?a - alice)\n    :precondition (and (scented ?w) (wick_set ?w ?c) (not (wax_poured ?w ?c)))\n    :effect (wax_poured ?w ?c)\n)\n\n;; Burn candle\n\n(:action pour_wicks_into_machine\n    :parameters (?w - wick ?j - jar ?c - candle)\n    :precondition (and (in_jar ?w ?j) (melted ?c))\n    :effect (and (in_jar ?c ?j) (wick_in_wax ?w ?c))\n)\n\n;; Take the wick out of the jar\n\n(:action pour_wand\n    :parameters (?npc - npc)\n    :precondition (and (heated ?npc))\n    :effect (and (poured ?npc) (not (heated ?npc)))\n  )\n\n\n(:action pour_wax_into_pan\n   :parameters (?v - velveeta ?p - pan)\n   :precondition (and (wax_melted ?v) (not (wax_in_pan ?p)))\n   :effect (and (wax_in_pan ?p))\n)\n\n\n(:action pour_wax\n    :parameters (?npc - npc ?pan - pan ?candle_holders - candle_holders)\n    :precondition (and (at ?npc ?pan) (melted_wax ?pan))\n    :effect (and (in_wax ?candle_holders ?pan) (not (melted_wax ?pan)))\n)\n\n\n(:action pour_wax_into_mixture\n    :parameters (?wick - wick ?container - container)\n    :precondition (and (melted ?wax) (wrapped ?wick) (not (poured ?container)))\n    :effect (and (poured ?container))\n)\n\n\n(:action pour_wax_into_shot_glass\n    :parameters (?npc - npc ?g - glass)\n    :precondition (and (melting ?npc ?cup) (not (in_glass ?npc ?g)))\n    :effect (and (in_glass ?npc ?g) (filled ?g))\n)\n\n\n(:action pour_wicks_into_pan\n    :parameters (?wick - wick ?pan - pan)\n    :precondition (and (heated ?wick) (on ?pan stove))\n    :effect (and (in ?wick ?pan) (melted ?wick))\n)\n\n\n(:action set_wick\n    :parameters (?w - wick ?g - glass)\n    :precondition (and (in_glass ?w ?g) (filled ?g))\n    :effect (and (centered ?w ?g))\n)\n\n\n(:action set_burner_add_candle\n    :parameters (?npc - npc ?c - candle)\n    :precondition (and (on_hot_plate ?c))\n    :effect (and (melted ?c))\n)\n\n;; Dip the new wick into the melted wax\n\n(:action set_double_boiler_with_heat\n    :parameters (?user - person ?stove - stove ?heat - heat)\n    :precondition (and (off ?stove) (off ?heat) (has_double_boiler ?user))\n    :effect (and (on ?stove) (on ?heat) (double_boiler_set ?user))\n)\n\n\n(:action set_burner_add_wicks\n    :parameters (?npc - person ?burner - stove ?wicks - wick)\n    :precondition (and (on ?burner) (not (added ?wicks)))\n    :effect (and (added ?wicks))\n)\n\n\n(:action set_wicks_to_cool\n    :parameters (?wick - wick)\n    :precondition (and (poured ?container) (not (cooled ?wick)))\n    :effect (and (cooled ?wick))\n)\n\n\n(:action set_burner_add_wicks_to_oven\n    :parameters (?stove - stove ?npc - npc)\n    :precondition (and (on_stove ?pot ?stove) (in_pot ?cup))\n    :effect (and (stove_on ?stove) (melting ?npc ?cup))\n)\n\n\n(:action plug_candle_wicks_into_socket\n    :parameters (?npc - npc ?s - socket)\n    :precondition (and (not (plugged_in ?npc ?s)))\n    :effect (and (plugged_in ?npc ?s) (turned_on ?s))\n)\n\n;; Place the candle in a jar\n\n(:action plug_in_hot_glue_gun\n    :parameters (?u - user ?h - hot_tool)\n    :precondition (and (on_table ?h) (unplugged ?h))\n    :effect (and (plugged_in ?h) (not (unplugged ?h)))\n  )\n\n\n(:action put_candle_on_table\n    :parameters (?c - candle ?hp - hot_plate)\n    :precondition (and (in_jar ?c) (not (on_hot_plate ?c ?hp)))\n    :effect (and (on_hot_plate ?c ?hp))\n)\n\n;; Set the burner and add the candle\n\n(:action dip_wick\n    :parameters (?w - wick ?c - candle)\n    :precondition (and (melted ?c) (not (dipped ?w)))\n    :effect (and (dipped ?w) (wet ?w))\n)\n\n;; Dry the wick\n\n(:action dip_candle_in_dye\n   :parameters (?npc - npc ?c - candle)\n   :precondition (and (not (dyed ?c)))\n   :effect (and (dyed ?c))\n)\n\n\n(:action mount_candle\n    :parameters (?npc - person ?h - hallway ?w - wood)\n    :precondition (and\n      (attached_spoons ?w)\n      (present ?w)\n      (clean ?h)\n    )\n    :effect (and\n      (mounted ?w ?h)\n      (decorated ?h)\n    )\n)\n```\n\n### Explanation:\n- **Action 1: `select_wood`**\n  - **Parameters:** `?npc` (person), `?w` (wood), `?f` (wood_floor)\n  - **Preconditions:** The wood (`?w`) is not present, and the wood floor (`?f`) is present.\n  - **Effects:** The wood (`?w`) becomes present and prepared.\n\n- **Action 2: `prepare_spoons`**\n  - **Parameters:** `?b` (mixing_bowl)\n  - **Preconditions:** The mixing bowl (`?b`) is empty.\n  - **Effects:** The mixing bowl (`?b`) holds spoons and is no longer empty.\n\n- **Action 3: `attach_spoons_to_wood`**\n  - **Parameters:** `?s` (spoon), `?w` (wood)\n  - **Preconditions:** The spoon (`?s`) is clean, and the wood (`?w`) is prepared.\n  - **Effects:** The spoon (`?s`) is attached to the wood (`?w`) and becomes dirty.\n\n- **Action 4: `mount_candle`**\n  - **Parameters:** `?npc` (person), `?h` (hallway), `?w` (wood)\n  - **Preconditions:** The wood (`?w`) has attached spoons, is present, and the hallway (`?h`) is clean.\n  - **Effects:** The wood (`?w`) is mounted in the hallway (`?h`), and the hallway (`?h`) is decorated.\n(:action wipe_glass_with_rubbing_alcohol\n    :parameters (?g - glass_filled)\n    :precondition (and (cleanness ?g clean) (wetness ?g dry))\n    :effect (and (cleanness ?g cleaner) (wetness ?g wet))\n)\n\n\n(:action wrap_lace\n    :parameters (?n - npc ?g - glass_filled)\n    :precondition (and (decoration ?g undecorated) (decoration ?n bare))\n    :effect (and (decoration ?g decorated) (decoration ?n camouflaged))\n)\n\n\n(:action wrap_wick_with_ink\n    :parameters (?wick - wick ?pencil - pencil)\n    :precondition (and (cut ?wick) (not (wrapped ?wick)))\n    :effect (and (wrapped ?wick))\n)\n\n\n(:action coat_candle_with_paint\n    :parameters (?n - npc ?g - glass_filled)\n    :precondition (and (decoration ?g decorated) (decoration ?n camouflaged))\n    :effect (and (decoration ?g painted) (decoration ?n painted))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:freeze\n\n\nAction sets that need to be merged:\n(:action freeze_candle_holder\n  :parameters (?u - user ?j - jar ?c - candle)\n  :precondition (and (contains ?j ?c) (not (frozen ?j)))\n  :effect (and (frozen ?j))\n)\n\n\n(:action freeze_candle\n   :parameters (?npc - npc ?c - candle)\n   :precondition (and (dyed ?c) (not (frozen ?c)))\n   :effect (and (frozen ?c))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:pop\n\n\nAction sets that need to be merged:\n(:action pop_wax_out\n  :parameters (?npc - npc ?j - jar ?c - candle)\n  :precondition (and (contains ?j ?c) (not (contains_wax ?j)))\n  :effect (and (not (contains ?j ?c)) (contains_wax ?j))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:get\n\n\nAction sets that need to be merged:\n(:action obtain_candle\n    :parameters (?npc - player)\n    :precondition (and (not (inventory ?npc candle)))\n    :effect (and (inventory ?npc candle))\n)\n\n\n(:action find_saucepan\n    :parameters (?npc - npc ?sp - saucepan ?l - location)\n    :precondition (and (at ?npc ?l) (in_cabinet ?sp))\n    :effect (and (inventory ?npc ?sp) (not (in_cabinet ?sp)))\n)\n\n\n(:action gather_materials\n    :parameters (?m - materials)\n    :precondition (not (gathered ?m))\n    :effect (gathered ?m)\n)\n\n;; Set the wick\n\n(:action get_privileges\n   :parameters (?npc - npc ?home - home)\n   :precondition (and (has_access ?npc ?home))\n   :effect (and (privileged ?npc ?home))\n)\n```\n\nEach action accurately reflects the state changes of the entities involved. The preconditions ensure that the necessary conditions are met before the action can be performed, and the effects describe the resulting state changes.\n(:action get_chocolates\n    :parameters (?chocolate - entity ?candle1 - entity)\n    :precondition (and\n      (at-texture ?chocolate solid)\n      (at-location ?candle1 on-table)\n    )\n    :effect (and\n      (at-texture ?chocolate melted)\n      (at-location ?candle1 in-container)\n    )\n)\n```\n\nThis set of actions captures the steps and state changes involved in making a chocolate candle. Each action includes parameters, preconditions, and effects that reflect the necessary conditions and outcomes of each step in the task.\n(:action get_teepee\n    :parameters (?npc - npc)\n    :precondition (and (visible ?npc))\n    :effect (and (invisible ?npc))\n  )\n\n\n(:action select_wood\n    :parameters (?npc - person ?w - wood ?f - wood_floor)\n    :precondition (and\n      (not (present ?w))\n      (present ?f)\n    )\n    :effect (and\n      (present ?w)\n      (prepared ?w)\n    )\n)\n\n;; Action 2: Prepare spoons\n\n(:action buy_wicks\n    :parameters (?w - wick)\n    :precondition (and (on_sale ?w))\n    :effect (and (purchased ?w) (not (on_sale ?w)))\n  )\n\n\n(:action secure_wick\n    :parameters (?w - wick)\n    :precondition (and (metal_sustainer ?w) (not (attached ?w)))\n    :effect (and (attached ?w) (not (not_attached ?w)))\n  )\n\n\n(:action purchase_supplies\n    :parameters (?npc - npc ?store - store)\n    :precondition (at ?npc ?store)\n    :effect (and (inventory ?npc supplies) (not (at supplies ?store)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:burn\n\n\nAction sets that need to be merged:\n(:action burn_wicks\n   :parameters (?npc - npc ?w - wick)\n   :precondition (and (has_wick ?w) (not (burned ?w)))\n   :effect (and (burned ?w))\n)\n\n\n(:action burn_candle\n    :parameters (?u - user ?c - candle)\n    :precondition (and (wax_poured ?w ?c) (not (burning ?c)))\n    :effect (burning ?c)\n)\n```\n\n### Descriptions and Entity States:\n\n1. **gather_materials**:\n   - **Parameters**: ?m - materials\n   - **Preconditions**: (not (gathered ?m))\n   - **Effects**: (gathered ?m)\n\n2. **set_wick**:\n   - **Parameters**: ?w - wick, ?c - container\n   - **Preconditions**: (and (gathered ?m) (not (wick_set ?w ?c)))\n   - **Effects**: (wick_set ?w ?c)\n\n3. **measure_wax**:\n   - **Parameters**: ?w - wax\n   - **Preconditions**: (and (gathered ?m) (not (measured ?w)))\n   - **Effects**: (measured ?w)\n\n4. **melt_wax**:\n   - **Parameters**: ?w - wax, ?a - alice\n   - **Preconditions**: (and (measured ?w) (not (melted ?w)))\n   - **Effects**: (melted ?w)\n\n5. **add_scent**:\n   - **Parameters**: ?a - alice, ?w - wax\n   - **Preconditions**: (and (melted ?w) (not (scented ?w)))\n   - **Effects**: (scented ?w)\n\n6. **pour_wax_into_container**:\n   - **Parameters**: ?w - wax, ?c - container, ?a - alice\n   - **Preconditions**: (and (scented ?w) (wick_set ?w ?c) (not (wax_poured ?w ?c)))\n   - **Effects**: (wax_poured ?w ?c)\n\n7. **burn_candle**:\n   - **Parameters**: ?u - user, ?c - candle\n   - **Preconditions**: (and (wax_poured ?w ?c) (not (burning ?c)))\n   - **Effects**: (burning ?c)\n\nThese actions outline the process of adding scent to a candle, from gathering materials to burning the final product, with each step's preconditions and effects clearly defined.\n(:action close_stuffing\n   :parameters (?item - item ?candle - candle ?alice - npc)\n   :precondition (and (stuffed ?item ?candle) (not (closed ?candle)))\n   :effect (and (closed ?candle))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:free\n\n\nAction sets that need to be merged:\n(:action free_candle\n    :parameters (?npc - player)\n    :precondition (and (lit candle))\n    :effect (and (freed candle))\n)\n\n\n(:action free_tart_papyrus\n    :parameters (?tart_papyrus - tart_papyrus ?mixing_bowl - mixing_bowl ?tins - tins)\n    :precondition (and (not (sprayed ?tins)))\n    :effect (and (sprayed ?tins))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:decorate\n\n\nAction sets that need to be merged:\n(:action decorate_candle\n    :parameters (?npc - player)\n    :precondition (and (freed candle))\n    :effect (and (decorated candle))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:finish\n\n\nAction sets that need to be merged:\n(:action finish_wreath\n    :parameters (?wreath - wreath)\n    :precondition (in_progress ?wreath)\n    :effect (and (completed ?wreath) (not (in_progress ?wreath)))\n)\n```\n\n### Descriptions of Actions:\n\n1. **break_candle_into_measuring_cup**:\n    - **Parameters**: `?npc - npc`, `?cup - measuring_cup`\n    - **Precondition**: The candle is not yet broken.\n    - **Effect**: The candle is broken and placed into the measuring cup.\n\n2. **place_measuring_cup_into_pan**:\n    - **Parameters**: `?cup - measuring_cup`, `?stove - stove`, `?pot - pot`, `?water - water`\n    - **Precondition**: The candle pieces are in the measuring cup and the cup is not in the pot.\n    - **Effect**: The measuring cup is placed into the pot with water, and the pot is placed on the stove.\n\n3. **set_burner_add_wicks_to_oven**:\n    - **Parameters**: `?stove - stove`, `?npc - npc`\n    - **Precondition**: The pot is on the stove and the measuring cup is in the pot.\n    - **Effect**: The stove is turned on, and the candle wax in the measuring cup starts melting.\n\n4. **place_wicks_in_shot_glass**:\n    - **Parameters**: `?w - wick`, `?g - glass`\n    - **Precondition**: The wick is not yet in the shot glass.\n    - **Effect**: The wick is placed inside the shot glass.\n\n5. **pour_wax_into_shot_glass**:\n    - **Parameters**: `?npc - npc`, `?g - glass`\n    - **Precondition**: The wax is melting in the measuring cup and the shot glass is empty.\n    - **Effect**: The melted wax is poured into the shot glass, filling it.\n\n6. **set_wick**:\n    - **Parameters**: `?w - wick`, `?g - glass`\n    - **Precondition**: The wick is in the shot glass and the glass is filled with wax.\n    - **Effect**: The wick is centered in the shot glass.\n\n7. **finish_wreath**:\n    - **Parameters**: `?wreath - wreath`\n    - **Precondition**: The wreath is in progress.\n    - **Effect**: The wreath is completed.\n\nThis set of PDDL actions should accurately represent the steps involved in making shot glass candles, with appropriate state changes for each action.\n(:action start_lighter\n   :parameters (?npc - npc)\n   :precondition (and (has_tool ?npc lighter) (not (lit ?lighter)))\n   :effect (and (lit ?lighter))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:measure\n\n\nAction sets that need to be merged:\n(:action measure_wax\n    :parameters (?w - wax)\n    :precondition (and (gathered ?m) (not (measured ?w)))\n    :effect (measured ?w)\n)\n\n;; Melt the wax\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:take\n\n\nAction sets that need to be merged:\n(:action take_out_of_candle\n    :parameters (?c - candle ?loc - location)\n    :precondition (at ?c ?loc)\n    :effect (and (not (at ?c ?loc)) (taken_out ?c))\n)\n\n;; Plug the candle warmer into the socket and turn it on\n\n(:action take_wick_out_of_jar\n    :parameters (?w - wick ?j - jar)\n    :precondition (in_jar ?w ?j)\n    :effect (and (not (in_jar ?w ?j)) (taken_out ?w))\n)\n\n;; Dry the wick again\n\n(:action take_candle_holder_to_well_ventilated_area\n    :parameters (?g - glass_filled ?a - area)\n    :precondition (and (location ?g in_package) (knowledge ?a unselected))\n    :effect (and (location ?g in_well_ventilated_area) (knowledge ?a selected))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:drink\n\n\nAction sets that need to be merged:\n(:action drink_water\n   :parameters (?npc - npc)\n   :precondition (and (thirsty ?npc))\n   :effect (and (not (thirsty ?npc)) (hydrated ?npc))\n)\n\n\n(:action lick_fingers\n    :parameters (?npc - npc)\n    :precondition (not (wet_fingers ?npc))\n    :effect (wet_fingers ?npc)\n)\n\n;; Action to place hand near flame\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:store\n\n\nAction sets that need to be merged:\n(:action store_stuff\n   :parameters (?npc - npc ?basement - basement ?item - item)\n   :precondition (and (has_stuff ?npc ?item) (accessible ?basement))\n   :effect (and (stored ?item ?basement) (not (has_stuff ?npc ?item)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:check\n\n\nAction sets that need to be merged:\n(:action check_wicks\n    :parameters (?wick1 - entity)\n    :precondition (and\n      (at-cost ?wick1 on-sale-at-store)\n    )\n    :effect (and\n      (at-cost ?wick1 purchased-from-store)\n    )\n)\n\n\n(:action check_wax\n    :parameters (?user - user ?wick - wick)\n    :precondition (and (at ?user ?wick) (heated ?wick))\n    :effect (stirred ?wick)\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:wait\n\n\nAction sets that need to be merged:\n(:action wait_until_sets\n    :parameters (?set - entity)\n    :precondition (and\n      (at-time ?set earlier)\n      (at-completion ?set unfinished)\n    )\n    :effect (and\n      (at-time ?set later)\n      (at-completion ?set finished)\n    )\n)\n\n\n(:action wait_for_wicks\n    :parameters (?w - wick)\n    :precondition (and (wet ?w))\n    :effect (and (dry ?w) (not (wet ?w)))\n  )\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:use\n\n\nAction sets that need to be merged:\n(:action use_candle_holder\n    :parameters (?u - user ?c - candle ?l - lamp ?g - glass_filled)\n    :precondition (and (decoration ?g painted) (wetness ?g dry) (volume ?c full) (composition ?l wicked))\n    :effect (and (in_use ?u ?c ?l ?g))\n)\n```\n\n### Descriptions of the Generated Actions:\n1. **wipe_glass_with_rubbing_alcohol**: This action wipes down a glass candleholder with rubbing alcohol, changing its cleanness state from clean to cleaner and wetness state from dry to wet.\n2. **wrap_lace**: This action wraps lace around the candleholder, changing its decoration state from undecorated to decorated and the NPC's state from bare to camouflaged.\n3. **take_candle_holder_to_well_ventilated_area**: This action moves the candleholder to a well-ventilated area, changing its location state and selecting the area.\n4. **coat_candle_with_paint**: This action coats the candleholder with paint, changing its decoration state from decorated to painted and the NPC's state from camouflaged to painted.\n5. **dry_painting**: This action allows the paint to dry on the candleholder, changing its wetness state from wet to dry.\n6. **use_candle_holder**: This action uses the candleholder, ensuring the candle is full and the lamp is wicked, and marks the candleholder as in use.\n\nThese actions follow the structure and format shown in the example and accurately reflect the state changes of the entities involved in the task.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:locate\n\n\nAction sets that need to be merged:\n(:action locate_wicks\n    :parameters (?user - user ?w - wick)\n    :precondition (not (located ?w))\n    :effect (located ?w)\n  )\n\n  ;; Adding oil to the fridge\n  \nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:practice\n\n\nAction sets that need to be merged:\n(:action practice_with_equipment\n    :parameters (?npc - npc)\n    :precondition (not (practiced ?npc))\n    :effect (practiced ?npc)\n)\n```\n\n### Descriptions of Actions\n\n1. **light_candle**: This action lights the candle, setting its state to \"lit\".\n    - **Parameters**: `?u` (user), `?c` (candle)\n    - **Preconditions**: The candle must not be lit.\n    - **Effects**: The candle is now lit.\n\n2. **lick_fingers**: This action involves the NPC licking their fingers to wet them.\n    - **Parameters**: `?npc` (npc)\n    - **Preconditions**: The NPC's fingers must not already be wet.\n    - **Effects**: The NPC's fingers become wet.\n\n3. **place_hand_near_flame**: This action places the NPC's hand near the candle flame.\n    - **Parameters**: `?npc` (npc), `?c` (candle)\n    - **Preconditions**: The candle must be lit, and the NPC's fingers must be wet.\n    - **Effects**: The NPC's hand is now near the flame.\n\n4. **grab_wick**: This action involves the NPC quickly grabbing the wick to put out the flame.\n    - **Parameters**: `?npc` (npc), `?w` (wick), `?c` (candle)\n    - **Preconditions**: The NPC's hand must be near the flame, and the candle must be lit.\n    - **Effects**: The candle is no longer lit, and the wick is grabbed.\n\n5. **practice_with_equipment**: This action represents the NPC practicing with the equipment.\n    - **Parameters**: `?npc` (npc)\n    - **Preconditions**: The NPC must not have practiced yet.\n    - **Effects**: The NPC has now practiced.\n\nThis set of PDDL actions accurately reflects the steps needed to put out a candle with fingers, ensuring that each action's preconditions and effects are clearly defined to capture the state changes of the entities involved.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:cleaned\n\n\nAction sets that need to be merged:\n(:action cleaned_cup\n    :parameters (?u - user ?c - cup)\n    :precondition (and (dirty ?c))\n    :effect (and (clean ?c) (not (dirty ?c)))\n  )\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:wick\n\n\nAction sets that need to be merged:\n(:action wick_mold\n   :parameters (?w - wick ?m - mold)\n   :precondition (and (not (wicked ?m)))\n   :effect (and (wicked ?m) (centered ?w ?m))\n)\n\n\nThe actions after the merger are:"
]