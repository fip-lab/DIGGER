[
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is get_coconut_meat_with_oven.\n- go west npc counter fridge\n- get coconut npc fridge\n- go east npc fridge counter\n- go north npc counter rack\n- get knife npc rack\n- get towel npc rack\n- pierce npc\n- drain npc rack\n- go south npc rack counter\n- get bag npc counter\n- go south npc counter oven\n- turn_on_oven npc\n- burn_item npc\n- turn_off_oven npc\n- go north npc oven counter\n- wrap_coconut npc bag\n- smash_with_hands npc\n- drop towel npc counter\n- unwrap_coconut npc bag\n- separate npc bag\n- peel npc\n\nDescriptions:\n- Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.\n- Use a knife to separate the meat from the shell. Remove the coconut pieces from the towel. Take each piece, and wedge a knife between the shell and the white meat of the coconut to carefully separate the two. Then, use the knife (or a vegetable peeler) or remove the fibrous layer that might still be clinging to the outside of the meat.\n- Wrap the mature coconut in a kitchen towel. Place the coconut in the center of the towel, and gather the corners of the towel together to form a pouch. This will keep coconut bits from flying when you go to smash it with a hammer.\n- Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef’s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.\n- Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.\n- Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step.\n\nPDDL Actions:\n(:action turn_off_oven\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (on oven))\n      :effect (not (on oven))\n   )\n(:action drop\n      :parameters (?i - item ?p - player ?l - location)\n      :precondition (and (at ?p ?l) (inventory ?p ?i))\n      :effect (and (at ?i ?l) (not (inventory ?p ?i)))\n   )\n(:action pierce ; pierce the coconut\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (not(pierced coconut)) (inventory ?p knife))\n      :effect (pierced coconut)\n   )\n(:action unwrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (wrapped coconut) (wrapped_with coconut ?w))\n      :effect (and (not (wrapped coconut)) (not(wrapped_with coconut ?w)) (inventory ?p ?w))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action drain\n      :parameters (?p - player ?l - location)\n      :precondition (and (inventory ?p coconut) (pierced coconut) (not(smashed coconut)) (not(burnt coconut)) (at glass ?l) (at ?p ?l))\n      :effect (and (inventory ?p coconut_juice) (empty coconut))\n   )\n(:action turn_on_oven\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (not (on oven)))\n      :effect (on oven)\n   )\n(:action wrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (not(wrapped coconut)) (not(smashed coconut)) (inventory ?p ?w))\n      :effect (and (wrapped coconut) (wrapped_with coconut ?w) (not(inventory ?p ?w)))\n   )\n(:action smash_with_hands\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (wrapped_with coconut bag) (not(smashed coconut)) (not(on oven)) (burnt coconut) (at ?p counter))\n      :effect (smashed coconut)\n   )\n(:action separate\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (inventory ?p knife) (not (wrapped coconut)) (smashed coconut) (at towel counter) (at ?p counter))\n      :effect (and (not (inventory ?p coconut)) (inventory ?p coconut_shell) (inventory ?p coconut_meat))\n   )\n(:action burn_item\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (on oven) (inventory ?p coconut) (empty coconut) (not(burnt coconut)) (not(smashed coconut)))\n      :effect (burnt coconut)\n   )\n(:action peel\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut_meat) (inventory ?p knife) (not(peeled coconut_meat)) (at towel counter) (at ?p counter))\n      :effect (peeled coconut_meat)\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Grill That Perfect Burger\n\nSteps:\n- start_with_fresh_ground_chuck ground_cheese\n- make_chuck chuck\n- chill beef patties\n- season-meat beef\n- form_into_ball ground_chuck\n- pull-in-sliplargerbeads potato\n- form_patties pc1\n- build_fire npc brickhouse\n- place_burger_on_grill stove_knob\n- peek_into_papyrus npc\n- cook npc\n- finish-wreath wreath\n\nDescriptions:\n- Start with fresh ground chuck.\n- Make sure the chuck has a fat content of at least 15 to 22 percent to ensure juiciness.\n- Chill the beef well before forming patties.\n- Season the meat with salt and pepper.\n- Make each patty by forming about half a pound of ground chuck into a tight ball about the size of a baseball.\n- Use a spatula or other straight-edged tool to \"pull in\" the sides of the patty so that they remain together and tight.\n- Form patties about 1/2- to 3/4-inch thick.\n- Build a hot fire in the grill.\n- Place the burgers on the grill over direct heat.\n- Check doneness by peeking inside a patty with a spatula, or use an instant-read food thermometer inserted into the center of the patty.\n- Serve on fresh buns with any toppings you prefer: cheese, tomatoes, lettuce, onion, pickles and condiments such as ketchup, mayonnaise or mustard.\n- Finished.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Taco Filling.\n- brown_meat_and_onion beef1 onion1 pan1 stove1 kitchen_counter\n- move_pan_to_counter pan1 kitchen_counter sink_location\n- drain_fat pan1\n- move_pan_to_counter pan1 sink_location kitchen_counter\n- add_ingredients_and_simmer pan1 spice1 tomato1 stove1 kitchen_counter\n- finish_preparation pan1 serving_dish1 beef1 kitchen_counter\n\nDescriptions:\n- Brown the meat and the onion in a medium sized frying pan.\n- Drain the excess fat.\n- Add the remaining ingredients (except for the hot sauce) and simmer for fifteen minutes.\n- Finished.\n\nPDDL Actions:\n(:action brown_meat_and_onion\n    :parameters (?meat - ingredient ?onion - ingredient ?pan - tool ?stove - appliance ?loc - location)\n    :precondition (and\n      (at ?meat ?loc)\n      (at ?onion ?loc)\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n      (clean ?pan)\n    )\n    :effect (and\n      (cooked ?meat)\n      (cooked ?onion)\n      (heated ?pan)\n      (not (clean ?pan))\n      (in-pan ?meat ?pan)\n      (in-pan ?onion ?pan)\n      (not (at ?meat ?loc))\n      (not (at ?onion ?loc))\n    )\n  )\n\n  ;; 动作2：将煎锅移到水槽\n(:action move_pan_to_sink\n    :parameters (?pan - tool ?from - location ?to - location)\n    :precondition (and\n      (at-tool ?pan ?from)\n    )\n    :effect (and\n      (at-tool ?pan ?to)\n      (not (at-tool ?pan ?from))\n    )\n  )\n\n  ;; 动作3：排出多余的脂肪\n(:action drain_fat\n    :parameters (?pan - tool)\n    :precondition (and\n      (heated ?pan)\n      (at-tool ?pan sink_location)\n    )\n    :effect (and\n      (drained ?pan)\n    )\n  )\n\n  ;; 动作4：将煎锅移回柜台\n(:action move_pan_to_counter\n    :parameters (?pan - tool ?from - location ?to - location)\n    :precondition (and\n      (at-tool ?pan ?from)\n    )\n    :effect (and\n      (at-tool ?pan ?to)\n      (not (at-tool ?pan ?from))\n    )\n  )\n\n  ;; 动作5：添加剩余食材并炖煮\n(:action add_ingredients_and_simmer\n    :parameters (?pan - tool ?ingredient1 - ingredient ?ingredient2 - ingredient ?stove - appliance ?loc - location)\n    :precondition (and\n      (drained ?pan)\n      (at ?ingredient1 ?loc)\n      (at ?ingredient2 ?loc)\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n    )\n    :effect (and\n      (in-pan ?ingredient1 ?pan)\n      (in-pan ?ingredient2 ?pan)\n      (cooked ?ingredient1)\n      (cooked ?ingredient2)\n      (simmering ?pan)\n      (heated ?pan)\n      (not (at ?ingredient1 ?loc))\n      (not (at ?ingredient2 ?loc))\n    )\n  )\n\n  ;; 动作6：完成准备\n(:action finish_preparation\n    :parameters (?pan - tool ?dish - dish ?ingredients - ingredient ?loc - location)\n    :precondition (and\n      (simmering ?pan)\n      (at-tool ?pan ?loc)\n      (at-dish ?dish ?loc)\n      (forall (?i - ingredient)\n        (in-pan ?i ?pan))\n    )\n    :effect (and\n      (forall (?i - ingredient)\n        (and\n          (in-dish ?i ?dish)\n          (not (in-pan ?i ?pan))\n        ))\n      (not (simmering ?pan))\n      (clean ?pan)\n      (not (heated ?pan))\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Cook a Cheeseburger\n\nSteps:\n- start_with_meat beef\n- place-ingredients ground beef mixing_bowl\n- choose_ingredient onion_and_garlic garlic\n- add-ingredients egg_yolk mixing_bowl\n- mix_ingredients mixture\n- create_burger npc\n- build_burger npc kitchen\n- choose_cooking_method stove\n- prepare_add_ingredients burger\n- wrap_bun npc\n\nDescriptions:\n- Start with good meat.\n- Place the ground beef in a bowl.\n- Roughly chop the onion and garlic.\n- Add the egg yolk.\n- Mix it all together.\n- Create the burgers.\n- Arrange the burgers on a plate.\n- Choose your cooking method.\n- While the burgers are cooking, prepare the toppings:.\n- Cover each with the top half of its bun, and enjoy.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is stay_sheltered_with_food.\n- make_plan npc home\n- walk north npc home garage\n- get car npc garage\n- get_in_car npc garage car\n- drive east npc garage highway\n- drive down npc highway mall\n- drive east npc mall homedepot\n- get concrete npc homedepot\n- walk west npc homedepot mall\n- drive north npc mall wholefoods\n- get_food canned_food npc wholefoods\n- walk south npc wholefoods mall\n- drive up npc mall highway\n- drive west npc highway garage\n- drive south npc garage home\n- drive in npc home basement\n- reinforce npc basement concrete\n- stay_in_shelter npc basement canned_food\n\nDescriptions:\n- Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food — you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival.\n- Stock up on non-perishable food. Non-perishables can last several years, whether it's in storage or in sustaining you after an attack. Choose items that contain a lot of carbohydrates, so you get more caloric bang for your buck, and store them in a cool, dry place.\n\nPDDL Actions:\n(:action reinforce\n      :parameters (?p - player ?l1 - location ?obj - item) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj) (is_construction_material ?obj))\n      :effect (and (reinforced ?l1) )\n  )\n(:action walk\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_food\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (is_supermarket ?l1) (is_nonperishable ?obj) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n   )\n(:action make_plan\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_home ?l1))\n      :effect (and (has_plan ?p))\n   )\n(:action get_medicine\n      :parameters (?obj -item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_pharmacy ?l1) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n  )\n(:action get\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (not (is_supermarket ?l1)))\n      :effect (and (inventory ?p ?obj))\n   )\n(:action drive\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (driving ?p) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_in_car\n      :parameters (?p - player ?l1 - location ?obj - item)\n      :precondition (and (at ?p ?l1) (inventory ?p ?obj) (is_car ?obj))\n      :effect (and (driving ?p) (inventory ?p ?obj))\n  )\n\n)\n(:action stay_in_shelter\n      :parameters (?p - player ?l1 - location ?obj1 - item ) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj1) (is_nonperishable ?obj1) (reinforced ?l1) (is_underground ?l1))\n      :effect (and (sheltered ?p) )\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Write a Hamburger Paragraph\n\nSteps:\n- write_topic_sentiment hamburger\n- add_detail tomato_center\n- layer-cheese cheese mixing_bowl\n- add_spear npc\n- add-lemon water npc\n- choose_ingredient onion1 bowl1\n- finish_with_bun bun\n- analyze_finished_paragraph npc covering_tracks track\n- listen_to_all_member_of_family npc\n\nDescriptions:\n- Write a topic sentence as the \"top bun\" of your hamburger.\n- Add a detail as your tomato.\n- Layer on another detail as the cheese.\n- Add another sentence as your burger.\n- Add the lettuce, another detail that connects with the topic sentence.\n- Offer up the onions.\n- Finish up with the bottom bun.\n- Analyse your finished paragraph.\n- Review it again and consider any possible improvements.My friend Allie is really great, always there for me when I need her, no matter what.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Seasoned Salt.\n- mix-ingredients celery_salt\n- grind-ingredients celery_salt mortar_and_pestle\n- season-food celery_salt salads\n\nDescriptions:\n- Mix the ingredients together thoroughly.\n- Pour into an air-tight container with a lid.\n- It goes well in dips, salad dressings, soups and on sandwiches.\n- Grind the ingredients together in a mortar and pestle.\n- Transfer to a storage container as needed.\n\nPDDL Actions:\n(:action mix-ingredients\n    :parameters (?e - entity)\n    :precondition (and (stratified ?e) (separate ?e))\n    :effect (and (mixed ?e) (not (stratified ?e)) (not (separate ?e)))\n  )\n(:action pour-into-container\n    :parameters (?e - entity ?c - container)\n    :precondition (and (mixed ?e) (empty ?c))\n    :effect (and (inContainer ?e ?c) (full ?c) (onCounter ?c) (not (empty ?c)))\n  )\n(:action season-food\n    :parameters (?e - entity ?f - food)\n    :precondition (mixed ?e)\n    :effect (and (flavorful ?f) (not (plain ?f)))\n  )\n(:action grind-ingredients\n    :parameters (?e - entity ?t - tool)\n    :precondition (and (mixed ?e) (absent ?t))\n    :effect (and (present ?t))\n  )\n(:action transfer-to-storage\n    :parameters (?e - entity ?c - container)\n    :precondition (inContainer ?e ?c)\n    :effect (and (empty ?c))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Make Corned Beef Hash\n\nSteps:\n- gather_ingredients mixture\n- combine_ingredients beef_hash mixing_bowl\n- light_flavorful toast\n- garnish_with_cheese velveeta\n\nDescriptions:\n- Gather the ingredients.\n- Combine corned roast beef hash, onion , mayonnaise, salt and pepper in a bowl.\n- Lightly toast bread.\n- Spread the corned beef hash mixture on bread.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is prepare_meat.\n- go north npc beach root_of_tree\n- go north npc root_of_tree jungle\n- go east npc jungle hills\n- get sharp_stone npc hills\n- go west npc hills jungle\n- hunt_animal npc jungle sharp_stone animal\n- prepare_animal npc jungle sharp_stone animal\n\nDescriptions:\n- \n- Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:\n\nPDDL Actions:\n(:action prepare_animal ; prepare animals with a sharp stone before eating it.\n      :parameters (?p - player ?loc - location ?s - sharp_stone ?a - animal) \n      :precondition (and (at ?p ?loc) (inventory ?p ?s) (inventory ?p ?a))\n      :effect (and (treated ?a))\n   )\n(:action hunt_animal ; hunt animals with a sharp stone.\n      :parameters (?p - player ?loc - location ?s - sharp_stone ?a - animal) \n      :precondition (and (at ?p ?loc) (at ?a ?loc) (inventory ?p ?s))\n      :effect (and (inventory ?p ?a) (not (treated ?a)))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Make Burger Bites\n\nSteps:\n- defrost-mixture mixture\n- prepare_bread mixing_bowl\n- prepare_sauce stove_knob velveeta\n- cook npc\n- finish_meat beef\n- finish-ingredients bread\n- finish-mixture soup\n- cook npc kitchen\n\nDescriptions:\n- Defrost.\n- Prep bread.\n- Prep sauce.\n- Cook the meat.\n- Finish the meat.\n- Finish the bread.\n- Finish the meal.\n- Enjoy your burger bites!.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is get_coconut_meat_with_oven.\n- go west npc counter fridge\n- get coconut npc fridge\n- go east npc fridge counter\n- go north npc counter rack\n- get knife npc rack\n- get towel npc rack\n- pierce npc\n- drain npc rack\n- go south npc rack counter\n- get bag npc counter\n- go south npc counter oven\n- turn_on_oven npc\n- burn_item npc\n- turn_off_oven npc\n- go north npc oven counter\n- wrap_coconut npc bag\n- smash_with_hands npc\n- drop towel npc counter\n- unwrap_coconut npc bag\n- separate npc bag\n- peel npc\n\nDescriptions:\n- Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.\n- Use a knife to separate the meat from the shell. Remove the coconut pieces from the towel. Take each piece, and wedge a knife between the shell and the white meat of the coconut to carefully separate the two. Then, use the knife (or a vegetable peeler) or remove the fibrous layer that might still be clinging to the outside of the meat.\n- Wrap the mature coconut in a kitchen towel. Place the coconut in the center of the towel, and gather the corners of the towel together to form a pouch. This will keep coconut bits from flying when you go to smash it with a hammer.\n- Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef’s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.\n- Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.\n- Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step.\n\nPDDL Actions:\n(:action turn_off_oven\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (on oven))\n      :effect (not (on oven))\n   )\n(:action drop\n      :parameters (?i - item ?p - player ?l - location)\n      :precondition (and (at ?p ?l) (inventory ?p ?i))\n      :effect (and (at ?i ?l) (not (inventory ?p ?i)))\n   )\n(:action pierce ; pierce the coconut\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (not(pierced coconut)) (inventory ?p knife))\n      :effect (pierced coconut)\n   )\n(:action unwrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (wrapped coconut) (wrapped_with coconut ?w))\n      :effect (and (not (wrapped coconut)) (not(wrapped_with coconut ?w)) (inventory ?p ?w))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action drain\n      :parameters (?p - player ?l - location)\n      :precondition (and (inventory ?p coconut) (pierced coconut) (not(smashed coconut)) (not(burnt coconut)) (at glass ?l) (at ?p ?l))\n      :effect (and (inventory ?p coconut_juice) (empty coconut))\n   )\n(:action turn_on_oven\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (not (on oven)))\n      :effect (on oven)\n   )\n(:action wrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (not(wrapped coconut)) (not(smashed coconut)) (inventory ?p ?w))\n      :effect (and (wrapped coconut) (wrapped_with coconut ?w) (not(inventory ?p ?w)))\n   )\n(:action smash_with_hands\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (wrapped_with coconut bag) (not(smashed coconut)) (not(on oven)) (burnt coconut) (at ?p counter))\n      :effect (smashed coconut)\n   )\n(:action separate\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (inventory ?p knife) (not (wrapped coconut)) (smashed coconut) (at towel counter) (at ?p counter))\n      :effect (and (not (inventory ?p coconut)) (inventory ?p coconut_shell) (inventory ?p coconut_meat))\n   )\n(:action burn_item\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (on oven) (inventory ?p coconut) (empty coconut) (not(burnt coconut)) (not(smashed coconut)))\n      :effect (burnt coconut)\n   )\n(:action peel\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut_meat) (inventory ?p knife) (not(peeled coconut_meat)) (at towel counter) (at ?p counter))\n      :effect (peeled coconut_meat)\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Grill a Burger on a Foreman Grill\n\nSteps:\n- choose_burger patties\n- prepare_grill stove_knob velveeta\n- free_patties potato1 grill1\n- cook npc\n- remove-burger burgers\n- eat_burger burgers\n\nDescriptions:\n- Choose frozen burger patties that are no more than 0.5 in (1.3 cm) thick.\n- Preheat the grill for 5 minutes.\n- Place 2-4 frozen patties on the lower grill plate.\n- Close the lid and cook the burgers for 4.5-6.5 minutes.\n- Remove the burgers and test the internal temperature for doneness.\n- Eat the burgers before the internal temperature falls below 140 °F (60 °C).\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Taco Filling.\n- brown_meat_and_onion beef1 onion1 pan1 stove1 kitchen_counter\n- move_pan_to_counter pan1 kitchen_counter sink_location\n- drain_fat pan1\n- move_pan_to_counter pan1 sink_location kitchen_counter\n- add_ingredients_and_simmer pan1 spice1 tomato1 stove1 kitchen_counter\n- finish_preparation pan1 serving_dish1 beef1 kitchen_counter\n\nDescriptions:\n- Brown the meat and the onion in a medium sized frying pan.\n- Drain the excess fat.\n- Add the remaining ingredients (except for the hot sauce) and simmer for fifteen minutes.\n- Finished.\n\nPDDL Actions:\n(:action brown_meat_and_onion\n    :parameters (?meat - ingredient ?onion - ingredient ?pan - tool ?stove - appliance ?loc - location)\n    :precondition (and\n      (at ?meat ?loc)\n      (at ?onion ?loc)\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n      (clean ?pan)\n    )\n    :effect (and\n      (cooked ?meat)\n      (cooked ?onion)\n      (heated ?pan)\n      (not (clean ?pan))\n      (in-pan ?meat ?pan)\n      (in-pan ?onion ?pan)\n      (not (at ?meat ?loc))\n      (not (at ?onion ?loc))\n    )\n  )\n\n  ;; 动作2：将煎锅移到水槽\n(:action move_pan_to_sink\n    :parameters (?pan - tool ?from - location ?to - location)\n    :precondition (and\n      (at-tool ?pan ?from)\n    )\n    :effect (and\n      (at-tool ?pan ?to)\n      (not (at-tool ?pan ?from))\n    )\n  )\n\n  ;; 动作3：排出多余的脂肪\n(:action drain_fat\n    :parameters (?pan - tool)\n    :precondition (and\n      (heated ?pan)\n      (at-tool ?pan sink_location)\n    )\n    :effect (and\n      (drained ?pan)\n    )\n  )\n\n  ;; 动作4：将煎锅移回柜台\n(:action move_pan_to_counter\n    :parameters (?pan - tool ?from - location ?to - location)\n    :precondition (and\n      (at-tool ?pan ?from)\n    )\n    :effect (and\n      (at-tool ?pan ?to)\n      (not (at-tool ?pan ?from))\n    )\n  )\n\n  ;; 动作5：添加剩余食材并炖煮\n(:action add_ingredients_and_simmer\n    :parameters (?pan - tool ?ingredient1 - ingredient ?ingredient2 - ingredient ?stove - appliance ?loc - location)\n    :precondition (and\n      (drained ?pan)\n      (at ?ingredient1 ?loc)\n      (at ?ingredient2 ?loc)\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n    )\n    :effect (and\n      (in-pan ?ingredient1 ?pan)\n      (in-pan ?ingredient2 ?pan)\n      (cooked ?ingredient1)\n      (cooked ?ingredient2)\n      (simmering ?pan)\n      (heated ?pan)\n      (not (at ?ingredient1 ?loc))\n      (not (at ?ingredient2 ?loc))\n    )\n  )\n\n  ;; 动作6：完成准备\n(:action finish_preparation\n    :parameters (?pan - tool ?dish - dish ?ingredients - ingredient ?loc - location)\n    :precondition (and\n      (simmering ?pan)\n      (at-tool ?pan ?loc)\n      (at-dish ?dish ?loc)\n      (forall (?i - ingredient)\n        (in-pan ?i ?pan))\n    )\n    :effect (and\n      (forall (?i - ingredient)\n        (and\n          (in-dish ?i ?dish)\n          (not (in-pan ?i ?pan))\n        ))\n      (not (simmering ?pan))\n      (clean ?pan)\n      (not (heated ?pan))\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Keep Burgers Flat\n\nSteps:\n- cook npc\n- smash_meat potato1 pan1\n- season-burger burgers\n- cook_burger burger\n- flatten_patties potato1 container1\n- cook_patties potato1 stove1\n\nDescriptions:\n- Warm vegetable oil over medium-high heat in a skillet or flat top.\n- Place the meat in your pan and smash it flat.\n- Season the burgers with salt and pepper if you wish.\n- Cook the burger for about 2 minutes until the bottom is brown.\n- Flip the patties over and season them with salt and pepper.\n- Cook the patties for another minute until they are brown all over.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Cheese Sauce with Jalapeño Peppers.\n- cut_velveeta velveeta cutting_board\n- set_burner_add_cheese stove_knob velveeta pot\n- add_peppers_and_olives olives peppers pot\n- serve_cheese_sauce cheese_sauce pot\n\nDescriptions:\n- First cut the Velveeta in to tiny squares and set aside.\n- Set the burner on a medium to low setting, before that you begin adding the cheese product.\n- Wait until the Velveeta has melted lower the heat somewhat and add in the (Rotel) tomatoes.\n- Add in the Jalapeno peppers, and black olives if desired.\n- Cheese sauce is at its best if served very warm.\n\nPDDL Actions:\n(:action cut_velveeta\n    :parameters (?velveeta - entity ?cutting_board - entity)\n    :precondition (and\n      (has_granularity ?velveeta whole)\n      (has_openness ?velveeta closed)\n      (at_location ?velveeta in_package)\n      (has_cleanness ?cutting_board clean)\n      (has_moisture ?cutting_board dry)\n    )\n    :effect (and\n      (not (has_granularity ?velveeta whole))\n      (has_granularity ?velveeta cubed)\n      (not (has_openness ?velveeta closed))\n      (has_openness ?velveeta open)\n      (not (at_location ?velveeta in_package))\n      (at_location ?velveeta on_cutting_board)\n      (not (has_cleanness ?cutting_board clean))\n      (has_cleanness ?cutting_board dirty)\n      (not (has_moisture ?cutting_board dry))\n      (has_moisture ?cutting_board wet)\n    )\n  )\n\n  ; Action for Step 2\n(:action set_burner_add_cheese\n    :parameters (?stove - entity ?velveeta - entity ?pot - entity)\n    :precondition (and\n      (has_power ?stove off)\n      (has_orientation ?stove off_position)\n      (has_granularity ?velveeta cubed)\n      (at_location ?velveeta on_cutting_board)\n      (at_location ?pot in_cupboard)\n    )\n    :effect (and\n      (not (has_power ?stove off))\n      (has_power ?stove on)\n      (not (has_orientation ?stove off_position))\n      (has_orientation ?stove medium_low)\n      (not (at_location ?velveeta on_cutting_board))\n      (at_location ?velveeta in_pot)\n      (not (at_location ?pot in_cupboard))\n      (at_location ?pot on_stove)\n    )\n  )\n\n  ; Action for Step 3\n(:action melt_cheese_add_tomatoes\n    :parameters (?velveeta - entity ?stove - entity ?rotel_can - entity)\n    :precondition (and\n      (has_granularity ?velveeta cubed)\n      (has_power ?stove on)\n      (has_orientation ?stove medium_low)\n      (at_location ?velveeta in_pot)\n      (has_openness ?rotel_can closed)\n      (at_location ?rotel_can in_fridge)\n    )\n    :effect (and\n      (not (has_granularity ?velveeta cubed))\n      (has_granularity ?velveeta liquid)\n      (not (has_temperature ?velveeta room_temperature))\n      (has_temperature ?velveeta hot)\n      (has_texture ?velveeta runny)\n      (not (has_orientation ?stove medium_low))\n      (has_orientation ?stove low)\n      (not (has_openness ?rotel_can closed))\n      (has_openness ?rotel_can open)\n      (not (at_location ?rotel_can in_fridge))\n      (at_location ?rotel_can in_pot)\n    )\n  )\n\n  ; Action for Step 4\n(:action add_peppers_and_olives\n    :parameters (?peppers - entity ?olives - entity ?pot - entity)\n    :precondition (and\n      (at_location ?peppers in_can)\n      (at_location ?olives in_can)\n      (at_location ?pot on_stove)\n    )\n    :effect (and\n      (not (at_location ?peppers in_can))\n      (at_location ?peppers in_pot)\n      (not (at_location ?olives in_can))\n      (at_location ?olives in_pot)\n    )\n  )\n\n  ; Action for Step 5\n(:action serve_cheese_sauce\n    :parameters (?cheese_sauce - entity ?pot - entity)\n    :precondition (and\n      (at_location ?cheese_sauce in_pot)\n      (has_temperature ?cheese_sauce hot)\n      (at_location ?pot on_stove)\n    )\n    :effect (and\n      (not (at_location ?cheese_sauce in_pot))\n      (at_location ?cheese_sauce in_bowl)\n      (not (at_location ?pot on_stove))\n      (at_location ?pot in_sink)\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Cook Polenta\n\nSteps:\n- gather_ingredients mixture\n- make_polenta_recipe alice\n- stirf_ingredients cream_cheese mixing_bowl\n- mix_ingredients canola_oil blender\n- serve-polenta polenta mixing_bowl\n\nDescriptions:\n- Gather the ingredients.\n- Make the basic polenta recipe from Method 1.\n- Stir in the butter and cheese.\n- Stir in the milk, parsley and spices.\n- Place the polenta in a bowl and serve hot.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
]