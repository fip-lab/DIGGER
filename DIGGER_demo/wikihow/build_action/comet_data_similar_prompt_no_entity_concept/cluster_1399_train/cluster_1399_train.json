[
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Chinese Macaroni in Just 20 Minutes.\n- boil_macaroni macaroni pan kitchen\n- serve_macaroni macaroni plate dining_table pan\n\nDescriptions:\n- Boil macaroni in hot boiling water with some salt and oil for 10-15 minutes.\n- After the macaroni has boiled put under running water for about 15 seconds to prevent over cooking.\n- In another pan add some oil and toss in the macaroni.\n- Add salt, red chilli powder ,soy sauce,white vinegar and ajino moto.\n- Cook for some seconds.\n- Serve hot with chilled drinks.\n\nPDDL Actions:\n(:action boil_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?kitchen - location)\n    :precondition (and\n      (at ?macaroni ?kitchen)\n      (at ?pot ?kitchen)\n      (not (cooked ?macaroni))\n    )\n    :effect (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n    )\n  )\n\n  ;; 动作2：冷却通心粉\n(:action cool_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?sink - location)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n      (at ?pot ?sink)\n    )\n    :effect (and\n      (cooled ?macaroni)\n    )\n  )\n\n  ;; 动作3：在平底锅中翻炒通心粉\n(:action toss_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container ?kitchen - location)\n    :precondition (and\n      (cooled ?macaroni)\n      (at ?pan ?kitchen)\n      (at ?macaroni ?kitchen)\n    )\n    :effect (and\n      (in ?macaroni ?pan)\n    )\n  )\n\n  ;; 动作4：加入调味料\n(:action add_seasoning\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (not (seasoned ?macaroni))\n    )\n    :effect (and\n      (seasoned ?macaroni)\n    )\n  )\n\n  ;; 动作5：烹饪通心粉\n(:action cook_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (seasoned ?macaroni)\n    )\n    :effect (and\n      (cooked ?macaroni)\n    )\n  )\n\n  ;; 动作6：盛盘并上桌\n(:action serve_macaroni\n    :parameters (?macaroni - ingredient ?plate - container ?dining_table - location ?pan - container)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pan)\n      (at ?plate ?dining_table)\n    )\n    :effect (and\n      (in ?macaroni ?plate)\n      (served ?macaroni)\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Melt Ice Quickly\n\nSteps:\n- move_to_sink npc\n- melt_ice npc\n- add-salt-and-water ice_cube mixing_bowl\n\nDescriptions:\n- Run the ice under hot water if it’s easy to move to the sink.\n- Use a hair dryer to melt ice in the refrigerator or freezer.\n- Pour ordinary table salt on the ice if you’re melting ice cubes.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is throw-hotdogs.\n- go east npc kitchen hallway\n- thaw_food items npc\n- lay_masking_tape masking_tape npc hallway\n- throw items npc hallway\n\nDescriptions:\n- Lay down masking tape in parallel strips across the floor as far apart as your projectile is long. The strips should be perpendicular to the direction you will be throwing. If your item is 15-45 cm (6-18 inches) long, lay down about 6-10 strips; lay down fewer if longer and more if shorter.\n- Select a food item to throw. There are a couple of qualifications. First, it must be long, thin, hard, and straight, like a frozen hot dog, for example. Second, it must be a reasonably stiff item. Third, it should be somewhere between 15 and 20 cm (6-8 inches) long; the experiment can be performed otherwise, but read on, and you will see why this size is optimal. There are lots of other items that fit these criteria including Otter Pops, celery, and churros. (If you simply can't come to grips with throwing perfectly good food, see the Tips section for some additional ideas.)\n\nPDDL Actions:\n(:action thaw_food ; thaw food items\n      :parameters (?object - items ?p - player)\n      :precondition (and (inventory ?p ?object) (is_food_item ?object) (frozen ?object))\n      :effect (not (frozen ?object))\n   )\n(:action record_tosses ; record tosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (tosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (tosses_recorded ?object)\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action record_crosses ; record crosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (crosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (crosses_recorded ?object)\n   )\n(:action lay_masking_tape ; lay masking tape\n      :parameters (?object - masking_tape ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?object) (has_ten_strips ?object))\n      :effect (and (not (has_ten_strips ?object)) (has_ten_strips ?l1))\n   )\n(:action throw ; throw food items\n      :parameters (?object - items ?p - player ?l1 - location) \n      :precondition (and \n      (at ?p ?l1)\n      (has_throwing_distance ?l1) \n      (is_clear ?l1) \n      (is_food_item ?object) \n      (is_long ?object) \n      (is_thin ?object) \n      (is_hard ?object) \n      (is_straight ?object) \n      (is_stiff ?object) \n      (has_ten_strips ?l1) \n      (not (frozen ?object))\n      )\n      :effect (thrown_food_items ?l1)\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Cut in Butter\n\nSteps:\n- cut_ingredients alice\n- pulse_ingredients blender mixture\n- mix_ingredients canola_oil blender\n\nDescriptions:\n- Cut chilled or frozen butter into ½-inch (1.3 cm) cubes.\n- Pulse all ingredients about 8 times in a processor.\n- Mix the butter in by hand or continue mixing in the food processor.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Duct Tape Necklace.\n- unroll_tape tape1\n- fold_tape tape1\n- smooth_tape tape1\n- tape_ends_together tape1 ends1\n\nDescriptions:\n- Take one roll of duct tape and make a piece about a little bigger than your head.\n- Measure it around your head, and cut it off the roll.\n- Fold it halfway through the middle, like shown.\n- Fold the other half so there is no sticky part showing.\n- Tape the ends together.\n- And you are done!\n\nPDDL Actions:\n(:action unroll_tape\n    :parameters (?t - tape)\n    :precondition (and (rolled ?t) (on_roll ?t))\n    :effect (and (in_pieces ?t) (not (rolled ?t)))\n  )\n(:action measure_and_cut_tape\n    :parameters (?t - tape ?tb - table)\n    :precondition (and (in_pieces ?t) (elongated ?t) (not (measured ?tb)))\n    :effect (and (measured ?tb) (in_pieces ?t))\n  )\n(:action fold_tape\n    :parameters (?t - tape)\n    :precondition (and (in_pieces ?t) (elongated ?t))\n    :effect (and (folded ?t) (not (elongated ?t)))\n  )\n(:action smooth_tape\n    :parameters (?t - tape)\n    :precondition (and (folded ?t) (sticky ?t))\n    :effect (and (smooth ?t) (not (sticky ?t)))\n  )\n(:action tape_ends_together\n    :parameters (?t - tape ?e - ends)\n    :precondition (and (smooth ?t) (separate_pieces ?t) (separate_ends ?e))\n    :effect (and (one_piece ?t) (joined_ends ?e) (not (separate_ends ?e)) (not (separate_pieces ?t)))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Melt Glue Sticks\n\nSteps:\n- obtain_glue_gun npc\n- plug_in_glue_gun user1 velveeta\n- squeeze_trigger user1 glue1\n- insert_stick npc stick\n\nDescriptions:\n- Obtain a glue gun at least as big as the glue sticks.\n- Plug in the glue gun over cardboard or newspaper.\n- Squeeze the trigger of the glue gun to feed the sticks.\n- Insert another stick once the first no longer feeds through.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is get_coconut_meat_with_oven.\n- go west npc counter fridge\n- get coconut npc fridge\n- go east npc fridge counter\n- go north npc counter rack\n- get knife npc rack\n- get towel npc rack\n- pierce npc\n- drain npc rack\n- go south npc rack counter\n- get bag npc counter\n- go south npc counter oven\n- turn_on_oven npc\n- burn_item npc\n- turn_off_oven npc\n- go north npc oven counter\n- wrap_coconut npc bag\n- smash_with_hands npc\n- drop towel npc counter\n- unwrap_coconut npc bag\n- separate npc bag\n- peel npc\n\nDescriptions:\n- Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.\n- Use a knife to separate the meat from the shell. Remove the coconut pieces from the towel. Take each piece, and wedge a knife between the shell and the white meat of the coconut to carefully separate the two. Then, use the knife (or a vegetable peeler) or remove the fibrous layer that might still be clinging to the outside of the meat.\n- Wrap the mature coconut in a kitchen towel. Place the coconut in the center of the towel, and gather the corners of the towel together to form a pouch. This will keep coconut bits from flying when you go to smash it with a hammer.\n- Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef’s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.\n- Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.\n- Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step.\n\nPDDL Actions:\n(:action turn_off_oven\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (on oven))\n      :effect (not (on oven))\n   )\n(:action drop\n      :parameters (?i - item ?p - player ?l - location)\n      :precondition (and (at ?p ?l) (inventory ?p ?i))\n      :effect (and (at ?i ?l) (not (inventory ?p ?i)))\n   )\n(:action pierce ; pierce the coconut\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (not(pierced coconut)) (inventory ?p knife))\n      :effect (pierced coconut)\n   )\n(:action unwrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (wrapped coconut) (wrapped_with coconut ?w))\n      :effect (and (not (wrapped coconut)) (not(wrapped_with coconut ?w)) (inventory ?p ?w))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action drain\n      :parameters (?p - player ?l - location)\n      :precondition (and (inventory ?p coconut) (pierced coconut) (not(smashed coconut)) (not(burnt coconut)) (at glass ?l) (at ?p ?l))\n      :effect (and (inventory ?p coconut_juice) (empty coconut))\n   )\n(:action turn_on_oven\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (not (on oven)))\n      :effect (on oven)\n   )\n(:action wrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (not(wrapped coconut)) (not(smashed coconut)) (inventory ?p ?w))\n      :effect (and (wrapped coconut) (wrapped_with coconut ?w) (not(inventory ?p ?w)))\n   )\n(:action smash_with_hands\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (wrapped_with coconut bag) (not(smashed coconut)) (not(on oven)) (burnt coconut) (at ?p counter))\n      :effect (smashed coconut)\n   )\n(:action separate\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (inventory ?p knife) (not (wrapped coconut)) (smashed coconut) (at towel counter) (at ?p counter))\n      :effect (and (not (inventory ?p coconut)) (inventory ?p coconut_shell) (inventory ?p coconut_meat))\n   )\n(:action burn_item\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (on oven) (inventory ?p coconut) (empty coconut) (not(burnt coconut)) (not(smashed coconut)))\n      :effect (burnt coconut)\n   )\n(:action peel\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut_meat) (inventory ?p knife) (not(peeled coconut_meat)) (at towel counter) (at ?p counter))\n      :effect (peeled coconut_meat)\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Melt Peanut Butter\n\nSteps:\n- measure-peanut-butter blender-1\n- scoop_peanut_butter blender\n- blend_on_low_speed blender\n\nDescriptions:\n- Measure your peanut butter.\n- Scoop peanut butter into the blender or food processor.\n- Blend on low speed for 30 seconds.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is boil_water.\n- get pot npc camp\n- go west npc camp path\n- go south npc path oaks\n- log_oak npc oaks pot oak_log\n- get flat_wood npc oaks\n- get oak_log npc oaks\n- go north npc oaks path\n- go north npc path grassland\n- go north npc grassland bush\n- break_branch npc bush branch_piece\n- get_branch npc bush branch\n- get branch_piece npc bush\n- go south npc bush grassland\n- get_water npc grassland water pot\n- get grass npc grassland\n- go south npc grassland path\n- go east npc path camp\n- cluster_grass npc grass grass_tinder\n- stack_log npc oak_log log_stack\n- build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure\n- ignite_wood npc camp flat_wood branch teepee_structure\n- ignite_teepee npc camp flat_wood teepee_structure\n- boil_water npc camp teepee_structure water\n\nDescriptions:\n- Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- Search for a source of fresh water.\n- Melt snow or ice if you can find some. If you find ice or snow on the ground in the woods, collect it so you can melt it down for fresh drinking water. You can place the ice or snow in a container and place it next to a fire to melt it or you can hold the container to use your body heat to melt it.\n- Use dry sticks, branches, or tree bark to serve as your kindling.\n- Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.\n- Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.\n- Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.\n\nPDDL Actions:\n(:action ignite_teepee ; ignite teepe with ignited wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (ignited ?wood))\n      :effect (and (ignited ?teepee))\n   )\n(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )\n(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )\n(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )\n(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )\n(:action boil_water ; boil water using a started fire pit\n      :parameters (?p - player ?loc - location ?teepee - teepee ?water - water)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (ignited ?teepee) (inventory ?p ?water))\n      :effect (and (boiled ?water))\n   )\n)\n(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )\n(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )\n(:action ignite_wood ; ignite wood by plough it to create heat via friction\n      :parameters (?p - player ?loc - location ?wood - wood ?branch - branch ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (inventory ?p ?branch))\n      :effect (and (ignited ?wood))\n   )\n(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )\n(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )\n(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )\n(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Clarify Butter\n\nSteps:\n- put_ingredients_in_glass alice\n- put_glass_into_mixture glass_filled\n- set_glass_stand glass_stalks\n- squeeze_turbo_baster_bulle\n- gotolocation agent container\n\nDescriptions:\n- Put unsalted butter in a standard tall and wide drinking glass.\n- Put the glass into the microwave.\n- Let the glass stand for a couple minutes.\n- Squeeze the turkey baster bulb.\n- Transfer it into a separate container.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is fill-inventory.\n- go south npc parkinglot pond\n- get_water npc pond water\n- go north npc pond parkinglot\n- go north npc parkinglot park\n- go east npc park store\n- get npc store bandage\n- go west npc store park\n- go west npc park car\n- go west npc car brickhouse\n- loot_shelter npc brickhouse food\n\nDescriptions:\n- Learn basic first-aid to treat minor injuries. Injuries are unfortunately inevitable, and they can range from minor to serious. Develop at least a basic knowledge of first aid to treat the injuries you or a partner may encounter. When searching for supplies, take any first aid gear you may find and build a basic first aid kit.\n- Purify any water you drink that isn’t from a sealed bottle. A waterborne illness can be life-threatening in a survival situation. If need to use any unbottled water for drinking, always purify it first. The most common method is boiling the water for 1 minute to kill any pathogens. Then filter out larger objects by pouring the water through a fine net or cloth.\n\nPDDL Actions:\n(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )\n(:action barter_food_for_healing ; get food in exchange for healing.\n      :parameters (?p - player ?p_inj - player ?water - water ?bandage - bandage ?food - food ?l -location) \n      :precondition (and (inventory ?p ?water) (inventory ?p ?bandage) (is_injured ?p_inj) (at ?p ?l) (at ?p_inj ?l))\n      :effect (and (not (is_injured ?p_inj)) (gettable ?food)  )\n   )\n\n   \n)\n(:action gofish \n      :parameters (?p - player ?l - location ?fp - fishingpole ?f - fish)\n      :precondition (and (at ?p ?l) (inventory ?p ?fp) (haslake ?l) (at ?f ?l))\n      :effect (and (gettable ?f) )\n   )\n(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get\n      :parameters (?p - player ?l - location ?i - item)\n      :precondition (and (at ?p ?l) (at ?i ?l) (gettable ?i))\n      :effect (and (not (at ?i ?l)) (inventory ?p ?i))\n   )\n(:action loot_shelter ; steal food from location that is occupied.\n      :parameters (?p - player ?loc - location ?food - food) \n      :precondition (and (at ?food ?loc) (at ?p ?loc) (is_occupied ?loc))\n      :effect (and (inventory ?p ?food) (not (at ?food ?loc)))\n   )\n(:action break_car_window ; steal food from car.\n      :parameters (?p - player ?car - car ?rock - rock ?item - item) \n      :precondition (and (at ?p ?car) (inventory ?p ?rock) (has_windows ?car) (at ?item ?car))\n      :effect (and (gettable ?item) (not (inventory ?p ?rock)) (not (has_windows ?car)))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Measure Butter\n\nSteps:\n- slice_ingredients butter_into_balls blender\n- fill-cup measuring_cup\n- calculate_amounts butter_cup mixing_bowl\n- put_ingredients_in_measuring_cup alice\n- push_ingredients_into_machine canola_oil stove_knob velveeta\n- stop adding_ingredients_to_water water\n- drain_water npc water\n\nDescriptions:\n- Slice your butter into cubes.\n- Fill a measuring cup up to the 1 cup line with cold water.\n- Calculate the amount of butter cups you need.\n- Put the butter pieces in the measuring cup.\n- Push the butter down if it starts piling up.\n- Stop adding butter when the water reaches the point you need.\n- Drain the water.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Seasoned Salt.\n- mix-ingredients celery_salt\n- grind-ingredients celery_salt mortar_and_pestle\n- season-food celery_salt salads\n\nDescriptions:\n- Mix the ingredients together thoroughly.\n- Pour into an air-tight container with a lid.\n- It goes well in dips, salad dressings, soups and on sandwiches.\n- Grind the ingredients together in a mortar and pestle.\n- Transfer to a storage container as needed.\n\nPDDL Actions:\n(:action mix-ingredients\n    :parameters (?e - entity)\n    :precondition (and (stratified ?e) (separate ?e))\n    :effect (and (mixed ?e) (not (stratified ?e)) (not (separate ?e)))\n  )\n(:action pour-into-container\n    :parameters (?e - entity ?c - container)\n    :precondition (and (mixed ?e) (empty ?c))\n    :effect (and (inContainer ?e ?c) (full ?c) (onCounter ?c) (not (empty ?c)))\n  )\n(:action season-food\n    :parameters (?e - entity ?f - food)\n    :precondition (mixed ?e)\n    :effect (and (flavorful ?f) (not (plain ?f)))\n  )\n(:action grind-ingredients\n    :parameters (?e - entity ?t - tool)\n    :precondition (and (mixed ?e) (absent ?t))\n    :effect (and (present ?t))\n  )\n(:action transfer-to-storage\n    :parameters (?e - entity ?c - container)\n    :precondition (inContainer ?e ?c)\n    :effect (and (empty ?c))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Make Butter With a Food Processor\n\nSteps:\n- warm_cream cream_machine stove_knob velveeta\n- prepare-food-processor food_processor blender\n- place-ingredients cream_machine mixing_bowl\n- add_salt_to_ingredients canola_oil stove_knob alice\n- chop_ingredients canola_oil stove_knob blender\n- drain_buttermilk canola_oil\n- squeeze-lemon water\n- place-ingredients butter_container container\n- cool-mixture mixture1 refrigerator1\n\nDescriptions:\n- Warm the heavy cream to room temperature.\n- Prepare the food processor.\n- Place the cream in the bowl of the food processor.\n- If you like your butter salty, add salt to taste.\n- Turn on the food processor to churn the butter, preferably at low speed.\n- Drain the buttermilk.\n- Squeeze any remaining buttermilk from the butter.\n- Place the butter into a container.\n- Cool in the refrigerator.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Seasoned Salt.\n- mix-ingredients celery_salt\n- grind-ingredients celery_salt mortar_and_pestle\n- season-food celery_salt salads\n\nDescriptions:\n- Mix the ingredients together thoroughly.\n- Pour into an air-tight container with a lid.\n- It goes well in dips, salad dressings, soups and on sandwiches.\n- Grind the ingredients together in a mortar and pestle.\n- Transfer to a storage container as needed.\n\nPDDL Actions:\n(:action mix-ingredients\n    :parameters (?e - entity)\n    :precondition (and (stratified ?e) (separate ?e))\n    :effect (and (mixed ?e) (not (stratified ?e)) (not (separate ?e)))\n  )\n(:action pour-into-container\n    :parameters (?e - entity ?c - container)\n    :precondition (and (mixed ?e) (empty ?c))\n    :effect (and (inContainer ?e ?c) (full ?c) (onCounter ?c) (not (empty ?c)))\n  )\n(:action season-food\n    :parameters (?e - entity ?f - food)\n    :precondition (mixed ?e)\n    :effect (and (flavorful ?f) (not (plain ?f)))\n  )\n(:action grind-ingredients\n    :parameters (?e - entity ?t - tool)\n    :precondition (and (mixed ?e) (absent ?t))\n    :effect (and (present ?t))\n  )\n(:action transfer-to-storage\n    :parameters (?e - entity ?c - container)\n    :precondition (inContainer ?e ?c)\n    :effect (and (empty ?c))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Make Butter in a Sealed Container\n\nSteps:\n- gather_ingredients you ingredients (inventory into mixing_bowl) (garnished marshmallow\n- put_ingredients_in_container cream_filled container\n- start_shank npc\n- add-ingredients cream_flavorful cream blender\n- open_container container1\n- wet_wicks wick1\n- place-in-container paper towel1 cup1\n- drain_liquid npc\n- remove-ingredients cheesecloth or paper towel1\n- knead-ingredients butter mixing_bowl\n- add-salt-to-treat mixture\n- set_oven npc\n- cook npc\n\nDescriptions:\n- Gather your ingredients (below).\n- Pour the cream into your container and seal the lid.\n- Start shaking at a steady pace - about one shake per second.\n- When the cream thickens to a paste, add a pinch of salt.\n- Keep shaking, but do not open the container.\n- When a liquid is formed, you should keep shaking steadily, about 100 more times.\n- Place paper towel/cheesecloth over cup, and make a well.\n- Slowly pour the liquid into the paper towel, and let the liquid drain into the cup below.\n- Remove the butter from the cheesecloth or paper towel.\n- Gently knead the butter, while running under very cold water to wash the butter, work the butter with your hand or utensil until all the milk is washed out and any liquid is clear,any milk left in will spoil the butter.\n- Add salt to taste.\n- Let cool and set overnight.\n- Enjoy on crackers, toast, etc.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
]