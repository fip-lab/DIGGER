[
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is eat_plants.\n- go west npc camp path\n- go west npc path cliff\n- go up npc cliff waterfall\n- get_water npc waterfall water\n- go east npc waterfall mountain\n- get flowers npc mountain\n- wash flowers npc water\n- eat flowers npc\n\nDescriptions:\n- Pick wild edible berries to eat. If you happen to come by an identifiable berry bush, definitely take advantage. Never consume any berries that you cannot positively identify as many are toxic. To be safe, stick to eating berries that you recognize like blackberries, raspberries, and wild strawberries.\n- Search for a source of fresh water.\n\nPDDL Actions:\n(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )\n(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Plant a Shrub\n\nSteps:\n- plant_shrub fir1 container1\n- remove_plant fir1 container1\n- prepare_roots root_center\n- sliplargerbamboo_center shrub\n- replace_dirt_with_water npc garden\n- spread_mixture mulch container1 container2\n- drink_water area water\n\nDescriptions:\n- Keep the shrub in the container before planting.\n- Remove the plant from the container.\n- Prepare the roots.\n- Situate the shrub in the hole.\n- Replace dirt around the plant.\n- Spread mulch around the shrub.\n- Water the area.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is build_shelter.\n- go west npc camp path\n- go west npc path cliff\n- go up npc cliff waterfall\n- go east npc waterfall mountain\n- get branch npc mountain\n- go east npc mountain west_plain\n- insert_beam branch tree npc west_plain beam\n- go east npc west_plain east_plain\n- get branches npc east_plain\n- get leaves npc east_plain\n- get twigs npc east_plain\n- go west npc east_plain west_plain\n- lean_branches branches npc west_plain beam frame\n- clear_spider leaves npc\n- layer twigs leaves npc west_plain frame shelter\n\nDescriptions:\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- In the event that you have no containers and no way to purify water, you can dig a deep hole, let it fill with groundwater, and wait for the particles to settle at the bottom and the water is clear before you drink it. You should only do this if you have no other option.\n- Place the other end of the branch into the split of the other tree. Form a horizontal frame with the main branch by inserting the other end in the split of a nearby tree. Make sure the branch is firmly held in place by shaking it a little.\n- Insert 1 end of the branch into the split of 1 of the trees. Where the tree splits and forms a “V” shape, place 1 end of the branch to hold it up as a support beam. If the tree doesn't have a split, use a log that ends in a “V” shape and lean it against a tree so the branch is supported by the tree.\n\nPDDL Actions:\n(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )\n(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )\n(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )\n(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)\n(:action drop ; drop down an item and remove it from the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?item) (not (at ?item ?l1)))\n      :effect (and (not (inventory ?p ?item)) (at ?item ?l1))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action lean_branches ; Lean branches against the main branch to form the structure of your shelter.\n      :parameters (?branches - branches ?p - player ?l1 - location ?beam - beam ?frame - frame) \n      :precondition (and (at ?p ?l1) (inventory ?p ?branches) (at ?beam ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?branches)) (at ?frame ?l1))\n   )\n(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )\n(:action clear_spider ; clear off any critters or spiders that may be on the branch or leaves\n      :parameters (?item - item ?p - player) \n      :precondition (and (inventory ?p ?item) (has_bug ?item))\n      :effect (and (not (has_bug ?item)) (inventory ?p ?item))\n   )\n(:action insert_beam ; insert end(s) of the branch into the split(s) of the tree(s)\n      :parameters (?b - branch ?t - tree ?p - player ?l1 - location ?beam - beam) \n      :precondition (and (at ?p ?l1) (dry ?l1) (flat ?l1) (at ?t ?l1) (has_split_in_trunk ?t) (inventory ?p ?b) (not (has_bug ?b)) (long ?b) (thick ?b) )\n      :effect (and (at ?p ?l1) (not (inventory ?p ?b)) (at ?beam ?l1))\n   )\n(:action layer ; Lay twigs and leaves\n      :parameters (?twigs - twigs ?leaves - leaves ?p - player ?l1 - location ?frame - frame ?shelter - shelter) \n      :precondition (and (at ?p ?l1) (inventory ?p ?twigs) (inventory ?p ?leaves) (not (has_bug ?leaves)) (at ?frame ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?twigs)) (not (inventory ?p ?leaves)) (at ?shelter ?l1))\n   )\n(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Plant Boxwood\n\nSteps:\n- plant_boxwood fir1 container1\n- choose_correct_time plant\n- determine_where_to_plant fir1 container1\n- test_soil soil1 garden_center\n- loosen_tinder npc path tinder\n- dig_hole npc root_center\n- place_tinder npc boxwood tinder\n- add_mulch mulch1 garden_center\n- drink_water npc boxwood\n\nDescriptions:\n- Decide whether to plant boxwood in a garden or a pot.\n- Choose the correct time to plant.\n- Determine where to plant.\n- Test your soil.\n- Loosen the ball of roots on a new boxwood plant so they are mostly spread out.\n- Dig a hole in the soil about as deep as the plant's height and as wide as the spread of the roots.\n- Place the boxwood inside the hole and cover the roots with water and soil about 2 inches (5.08 cm) short of the top.\n- Pour 2 inches (5.08 cm) of mulch into the remainder of the hole and pack it down.\n- Water the boxwood once a week during warm months and much less often during cooler periods.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is make_papyrus.\n- cut_stalks npc knife papyrus_plant papyrus_stalks\n- cut_strips npc papyrus_strips papyrus_stalks knife\n- soak_strips npc water papyrus_strips\n- roll_strips npc rolling_pin papyrus_strips\n- weave_strips npc papyrus_strips\n- bundle_strips npc papyrus_strips wooden_boards linen_sheets\n- cut_sheet npc papyrus_strips knife papyrus\n\nDescriptions:\n- Cut the stalks. About 12 inches (30 cm) of papyrus plant will make a large piece of paper that will be nearly 24 inches (61 cm) in length. Cut off as many stalks as you will need to make the amount of paper you want. The cuts must be diagonally made. Then, cut the tips of the papyrus. You will not use the tips, which are the thinner, grass-like end of the plant.\n- Weave the strips together. Lay the strips on the cloth. Get a dry sheet of linen cloth or felt. Then, begin to weave them together. You want to create 2 layers of strips, with the top layer strips being perpendicular to the bottom layer strips. It should resemble a placemat. The strips should slightly overlap one another to prevent the papyrus from falling apart later.\n- Roll the excess water and sugar out of the plant. Grab a rolling pin and use it to roll the strips flat. The rolling pin should be squeezing the water out of them and flattening the strips into sheets.\n- Cut the paper. The sheet may be larger than you want when it is finished. Use a razor, scissors, or paper cutter to cut the papyrus into smaller sheets. Measure the sizes you are cutting so you will have multiple sheets of the same size.\n- Cut up the inner portion into strips. Use the knife you used to cut off the outer portion to cut the inner layers of the papyrus plant (pith) into thin strips. Hold the plant in your hand and cut towards you vertically. Make sure that all of the strips have the same size and thickness.\n- Place the bundle between 2 wooden boards. Make sure that the wooden boards are somewhat heavy. The pressure is necessary to flatten the papyrus strips together. Once the strips have been placed between the boards, press them together. Lay the sandwiched papyrus sheet on a flat surface and allow the wooden boards to flatten the sheet using gravity.\n\nPDDL Actions:\n(:action roll_strips; roll the excess water and sugar out of the strips to dry them\n    :parameters (?p - player ?rolling_pin - rolling_pin ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?rolling_pin) (inventory ?p ?papyrus_strips) (soaked ?papyrus_strips))\n    :effect (dried ?papyrus_strips)\n  )\n(:action soak_strips; place papyrus strips in water and let them soak\n    :parameters (?p - player ?water - water ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?water) (inventory ?p ?papyrus_strips))\n    :effect (soaked ?papyrus_strips)\n  )\n(:action weave_strips; weave the dried papyrus strips into a lattice\n    :parameters (?p - player ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?papyrus_strips) (dried ?papyrus_strips))\n    :effect (woven ?papyrus_strips)\n  )\n(:action bundle_strips; bundle the woven strips between linen sheets and wooden boards\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?wooden_boards - wooden_boards ?linen_sheets - linen_sheets)\n    :precondition (and (inventory ?p ?papyrus_strips) (woven ?papyrus_strips) (inventory ?p ?wooden_boards) (inventory ?p ?linen_sheets))\n    :effect (finished ?papyrus_strips)\n  )\n(:action cut_sheet; the finished sheet is cut to size to complete the papyrus\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?knife - knife ?papyrus - papyrus)\n    :precondition (and (inventory ?p ?papyrus_strips) (finished ?papyrus_strips) (inventory ?p ?knife))\n    :effect (and (inventory ?p ?papyrus) (not (inventory ?p ?papyrus_strips)))\n  )\n)\n(:action cut_stalks; cut papyrus plant into stalks\n    :parameters (?p - player ?knife - knife ?papyrus_plant - papyrus_plant ?papyrus_stalks - papyrus_stalks)\n    :precondition (and (inventory ?p ?knife) (inventory ?p ?papyrus_plant))\n    :effect (and (inventory ?p ?papyrus_stalks) (not (inventory ?p ?papyrus_plant)))\n  )\n(:action cut_strips; cut papyrus stalks into strips\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?papyrus_stalks - papyrus_stalks ?knife - knife)\n    :precondition (and (inventory ?p ?knife) (inventory ?p ?papyrus_stalks))\n    :effect (and (inventory ?p ?papyrus_strips) (not (inventory ?p ?papyrus_stalks)))\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Transplant a Plant\n\nSteps:\n- move_plant fir1 container1\n- harden_plant fir1 container1\n- plan_transplant npc\n- fill_planted_soil container\n- dip_pot fir1 pot1\n- slide_pot_out root_ball1 container1\n- peel npc clifftop\n- loosen_tinder npc root_ball\n- place_root_ball_into_hole root_balls\n- fill soil_container root_ball1 container1\n- wet_plant fir1 container1\n\nDescriptions:\n- Research the date when you should move your plant outside.\n- Begin to harden the plant off 2 weeks before the transplanting date.\n- Plan to transplant during the cool part of the day.\n- Fill the planting bed with gardening soil.\n- Dig a hole big enough to hold the plant's pot.\n- Turn the pot upside down and slide the root ball out.\n- Leave the plant in the pot if it's made from peat or paper.\n- Loosen the root ball with your fingers, if needed.\n- Place the root ball into the hole.\n- Fill the space around the root ball with more soil and pat it down.\n- Water the plant thoroughly.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is drink_water.\n- get container npc camp\n- go east npc camp path\n- go east npc path riverside\n- collect_water npc container water riverside\n- go north npc riverside rainforest\n- get_wood npc wood rainforest\n- make_drill npc wood drill\n- make_fire npc drill rainforest\n- filter_water npc water\n- boil_water npc water rainforest\n- drink_water npc water\n\nDescriptions:\n- Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.\n- The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.\n- If you don’t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.\n- Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container.\n\nPDDL Actions:\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action collect_water ; use container to collect water from a location that has water\n      :parameters (?p - player ?container - container ?water - water ?loc - location) \n      :precondition (and (at ?p ?loc) (has_water ?loc) (inventory ?p ?container) (not (inventory ?p ?water)))\n      :effect (and (inventory ?p ?water) (not (filtered ?water)) (not (boiled ?water)))\n   )\n(:action boil_water ; boil water to kill any bacteria\n      :parameters (?p - player ?water - water ?loc - location) \n      :precondition (and (inventory ?p ?water) (at ?p ?loc) (filtered ?water) (not (boiled ?water)) (has_fire ?loc))\n      :effect (and (boiled ?water))\n   )\n(:action get_foliage ; get foliage from a location that has trees\n      :parameters (?p - player ?foliage - foliage ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?foliage)))\n      :effect (and (inventory ?p ?foliage))\n   )\n(:action filter_water ; filter water to remove any particles\n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (not (filtered ?water)))\n      :effect (and (filtered ?water))\n   )\n(:action drink_water ; drink boiled water \n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (boiled ?water))\n      :effect (and (not (thirsty ?p)))\n   )\n(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )\n(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )\n(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Remove a Tree\n\nSteps:\n- remove_soil fir1 container1 water1\n- remove_tinder npc path tinder\n- dig_tinder npc path tinder\n- dig_tinder npc root_ball\n\nDescriptions:\n- Water the soil surrounding the tree the day before you remove it.\n- Remove the topsoil surrounding the top roots.\n- Dig the roots out with a spade.\n- Dig underneath the root ball and pull it out of the ground.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is build_shelter.\n- go west npc camp path\n- go west npc path cliff\n- go up npc cliff waterfall\n- go east npc waterfall mountain\n- get branch npc mountain\n- go east npc mountain west_plain\n- insert_beam branch tree npc west_plain beam\n- go east npc west_plain east_plain\n- get branches npc east_plain\n- get leaves npc east_plain\n- get twigs npc east_plain\n- go west npc east_plain west_plain\n- lean_branches branches npc west_plain beam frame\n- clear_spider leaves npc\n- layer twigs leaves npc west_plain frame shelter\n\nDescriptions:\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- In the event that you have no containers and no way to purify water, you can dig a deep hole, let it fill with groundwater, and wait for the particles to settle at the bottom and the water is clear before you drink it. You should only do this if you have no other option.\n- Place the other end of the branch into the split of the other tree. Form a horizontal frame with the main branch by inserting the other end in the split of a nearby tree. Make sure the branch is firmly held in place by shaking it a little.\n- Insert 1 end of the branch into the split of 1 of the trees. Where the tree splits and forms a “V” shape, place 1 end of the branch to hold it up as a support beam. If the tree doesn't have a split, use a log that ends in a “V” shape and lean it against a tree so the branch is supported by the tree.\n\nPDDL Actions:\n(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )\n(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )\n(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )\n(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)\n(:action drop ; drop down an item and remove it from the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?item) (not (at ?item ?l1)))\n      :effect (and (not (inventory ?p ?item)) (at ?item ?l1))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action lean_branches ; Lean branches against the main branch to form the structure of your shelter.\n      :parameters (?branches - branches ?p - player ?l1 - location ?beam - beam ?frame - frame) \n      :precondition (and (at ?p ?l1) (inventory ?p ?branches) (at ?beam ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?branches)) (at ?frame ?l1))\n   )\n(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )\n(:action clear_spider ; clear off any critters or spiders that may be on the branch or leaves\n      :parameters (?item - item ?p - player) \n      :precondition (and (inventory ?p ?item) (has_bug ?item))\n      :effect (and (not (has_bug ?item)) (inventory ?p ?item))\n   )\n(:action insert_beam ; insert end(s) of the branch into the split(s) of the tree(s)\n      :parameters (?b - branch ?t - tree ?p - player ?l1 - location ?beam - beam) \n      :precondition (and (at ?p ?l1) (dry ?l1) (flat ?l1) (at ?t ?l1) (has_split_in_trunk ?t) (inventory ?p ?b) (not (has_bug ?b)) (long ?b) (thick ?b) )\n      :effect (and (at ?p ?l1) (not (inventory ?p ?b)) (at ?beam ?l1))\n   )\n(:action layer ; Lay twigs and leaves\n      :parameters (?twigs - twigs ?leaves - leaves ?p - player ?l1 - location ?frame - frame ?shelter - shelter) \n      :precondition (and (at ?p ?l1) (inventory ?p ?twigs) (inventory ?p ?leaves) (not (has_bug ?leaves)) (at ?frame ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?twigs)) (not (inventory ?p ?leaves)) (at ?shelter ?l1))\n   )\n(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Plant a Bare Root Tree\n\nSteps:\n- unpack_bare_branch npc container\n- set_tree fir1 bucket1\n- dig_hole npc path oak_log\n- check_soil npc path\n- plant_tinder npc path tinder\n- peel_dirt npc\n- build_water_basin npc west_plain\n- add_area mulch area2\n- drink_water npc\n- stake_oak npc oaks oak_log\n- remove-stake alice\n\nDescriptions:\n- Carefully unpack the bare root tree from the container or material it came in.\n- Set the tree into a bucket filled with water.\n- Dig a hole slightly larger than the diameter and depth of the tree and soil width.\n- Check to be sure there are no large weed roots in the hole you have dug.\n- Plant the tree so that where the roots meet the base of the tree.\n- Shovel the remaining dirt from the container.\n- Build a water basin around the outside of the tree.\n- Add a mulch area of a metre /a yard wide and 5 centimeter (2.0 in) deep around the tree base.\n- Water the tree again and again.\n- Stake large trees.\n- Remove the stake after a year.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is build_shelter.\n- go west npc camp path\n- go west npc path cliff\n- go up npc cliff waterfall\n- go east npc waterfall mountain\n- get branch npc mountain\n- go east npc mountain west_plain\n- insert_beam branch tree npc west_plain beam\n- go east npc west_plain east_plain\n- get branches npc east_plain\n- get leaves npc east_plain\n- get twigs npc east_plain\n- go west npc east_plain west_plain\n- lean_branches branches npc west_plain beam frame\n- clear_spider leaves npc\n- layer twigs leaves npc west_plain frame shelter\n\nDescriptions:\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- In the event that you have no containers and no way to purify water, you can dig a deep hole, let it fill with groundwater, and wait for the particles to settle at the bottom and the water is clear before you drink it. You should only do this if you have no other option.\n- Place the other end of the branch into the split of the other tree. Form a horizontal frame with the main branch by inserting the other end in the split of a nearby tree. Make sure the branch is firmly held in place by shaking it a little.\n- Insert 1 end of the branch into the split of 1 of the trees. Where the tree splits and forms a “V” shape, place 1 end of the branch to hold it up as a support beam. If the tree doesn't have a split, use a log that ends in a “V” shape and lean it against a tree so the branch is supported by the tree.\n\nPDDL Actions:\n(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )\n(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )\n(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )\n(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)\n(:action drop ; drop down an item and remove it from the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?item) (not (at ?item ?l1)))\n      :effect (and (not (inventory ?p ?item)) (at ?item ?l1))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action lean_branches ; Lean branches against the main branch to form the structure of your shelter.\n      :parameters (?branches - branches ?p - player ?l1 - location ?beam - beam ?frame - frame) \n      :precondition (and (at ?p ?l1) (inventory ?p ?branches) (at ?beam ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?branches)) (at ?frame ?l1))\n   )\n(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )\n(:action clear_spider ; clear off any critters or spiders that may be on the branch or leaves\n      :parameters (?item - item ?p - player) \n      :precondition (and (inventory ?p ?item) (has_bug ?item))\n      :effect (and (not (has_bug ?item)) (inventory ?p ?item))\n   )\n(:action insert_beam ; insert end(s) of the branch into the split(s) of the tree(s)\n      :parameters (?b - branch ?t - tree ?p - player ?l1 - location ?beam - beam) \n      :precondition (and (at ?p ?l1) (dry ?l1) (flat ?l1) (at ?t ?l1) (has_split_in_trunk ?t) (inventory ?p ?b) (not (has_bug ?b)) (long ?b) (thick ?b) )\n      :effect (and (at ?p ?l1) (not (inventory ?p ?b)) (at ?beam ?l1))\n   )\n(:action layer ; Lay twigs and leaves\n      :parameters (?twigs - twigs ?leaves - leaves ?p - player ?l1 - location ?frame - frame ?shelter - shelter) \n      :precondition (and (at ?p ?l1) (inventory ?p ?twigs) (inventory ?p ?leaves) (not (has_bug ?leaves)) (at ?frame ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?twigs)) (not (inventory ?p ?leaves)) (at ?shelter ?l1))\n   )\n(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Graft Plants\n\nSteps:\n- plant_plant fir1 container1\n- graft_plant npc clifftop fir1\n- make_cut npc rootstock_plant container\n- cut_buds npc nursery\n- insert_bamboo_log npc\n- tie_plant fir1 container1\n- remove_binding npc\n- cut_branch npc path\n- remove_branch npc path\n\nDescriptions:\n- Plant the rootstock plants in advance.\n- Prepare to graft the plants in cool weather when the scion plant is budding.\n- Make a T-shaped cut on the rootstock plant.\n- Cut a healthy bud and attached wood from the scion plant.\n- Insert the bud wood into the T cut.\n- Tie the plants together.\n- Wait for it to heal before removing the binding.\n- Cut the rootstock branch some distance above the new bud.\n- Once the bud wood has grown a few new leaves, remove the rest of the rootstock branch.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Grow a Rose Bush from Rose Bush Cuttings.\n- prepare_area clipping\n- take_cutting clipping\n- moisten_clipping clipping\n- plant_cutting clipping\n\nDescriptions:\n- Prepare the pot or area in your yard where you plan to plant your clipping.\n- Take a cutting from the rose bush you would like to grow your new bush from.\n- Moisten the part of the clipping that you just scraped and dip it into rooting hormone.\n- Immediately plant the cutting.\n\nPDDL Actions:\n(:action prepare_area\n    :parameters (?e - entity)\n    :precondition (not (prepared ?e))\n    :effect (prepared ?e)\n  )\n(:action take_cutting\n    :parameters (?e - entity)\n    :precondition (and (prepared ?e) (not (cut ?e)))\n    :effect (cut ?e)\n  )\n(:action moisten_clipping\n    :parameters (?e - entity)\n    :precondition (and (cut ?e) (not (moistened ?e)))\n    :effect (moistened ?e)\n  )\n(:action plant_cutting\n    :parameters (?e - entity)\n    :precondition (and (moistened ?e) (not (planted ?e)))\n    :effect (planted ?e)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Transplant Daffodils\n\nSteps:\n- plant_daffodil_in fir1 container1\n- use_bulp_composter alice\n- keep_pot_in_spot pot\n- fertilize_potted_daffodils npc garden\n- replant_new_bulb bulb1 garden_center\n- transplant_daffodils npc garden_center\n\nDescriptions:\n- Plant daffodil bulbs in a deep pot with good drainage.\n- Use bulb compost or regular potting compost.\n- Keep the pot in a cool, dark spot for the first few months.\n- Fertilize potted daffodils with bone meal.\n- Replant fresh bulbs each year.\n- Transplant daffodils from a pot to the ground.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is build_shelter.\n- go west npc camp path\n- go west npc path cliff\n- go up npc cliff waterfall\n- go east npc waterfall mountain\n- get branch npc mountain\n- go east npc mountain west_plain\n- insert_beam branch tree npc west_plain beam\n- go east npc west_plain east_plain\n- get branches npc east_plain\n- get leaves npc east_plain\n- get twigs npc east_plain\n- go west npc east_plain west_plain\n- lean_branches branches npc west_plain beam frame\n- clear_spider leaves npc\n- layer twigs leaves npc west_plain frame shelter\n\nDescriptions:\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- In the event that you have no containers and no way to purify water, you can dig a deep hole, let it fill with groundwater, and wait for the particles to settle at the bottom and the water is clear before you drink it. You should only do this if you have no other option.\n- Place the other end of the branch into the split of the other tree. Form a horizontal frame with the main branch by inserting the other end in the split of a nearby tree. Make sure the branch is firmly held in place by shaking it a little.\n- Insert 1 end of the branch into the split of 1 of the trees. Where the tree splits and forms a “V” shape, place 1 end of the branch to hold it up as a support beam. If the tree doesn't have a split, use a log that ends in a “V” shape and lean it against a tree so the branch is supported by the tree.\n\nPDDL Actions:\n(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )\n(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )\n(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )\n(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)\n(:action drop ; drop down an item and remove it from the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?item) (not (at ?item ?l1)))\n      :effect (and (not (inventory ?p ?item)) (at ?item ?l1))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action lean_branches ; Lean branches against the main branch to form the structure of your shelter.\n      :parameters (?branches - branches ?p - player ?l1 - location ?beam - beam ?frame - frame) \n      :precondition (and (at ?p ?l1) (inventory ?p ?branches) (at ?beam ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?branches)) (at ?frame ?l1))\n   )\n(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )\n(:action clear_spider ; clear off any critters or spiders that may be on the branch or leaves\n      :parameters (?item - item ?p - player) \n      :precondition (and (inventory ?p ?item) (has_bug ?item))\n      :effect (and (not (has_bug ?item)) (inventory ?p ?item))\n   )\n(:action insert_beam ; insert end(s) of the branch into the split(s) of the tree(s)\n      :parameters (?b - branch ?t - tree ?p - player ?l1 - location ?beam - beam) \n      :precondition (and (at ?p ?l1) (dry ?l1) (flat ?l1) (at ?t ?l1) (has_split_in_trunk ?t) (inventory ?p ?b) (not (has_bug ?b)) (long ?b) (thick ?b) )\n      :effect (and (at ?p ?l1) (not (inventory ?p ?b)) (at ?beam ?l1))\n   )\n(:action layer ; Lay twigs and leaves\n      :parameters (?twigs - twigs ?leaves - leaves ?p - player ?l1 - location ?frame - frame ?shelter - shelter) \n      :precondition (and (at ?p ?l1) (inventory ?p ?twigs) (inventory ?p ?leaves) (not (has_bug ?leaves)) (at ?frame ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?twigs)) (not (inventory ?p ?leaves)) (at ?shelter ?l1))\n   )\n(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Plant\n\nSteps:\n- choose_location fir1\n- treat_soil soil1 garden_center\n- dig_area root_ball area\n- loosen_branch npc root_center\n- pull_container container1 root_ball1\n- get_roots npc root_of_tree\n- place_root_of_tree fir1 garden_center\n- mix_soil npc garden soil\n- fill_area area1 container1\n- create_berm berm1\n- cover_area area1\n- stabilize_tree npc path\n- drink_water area water\n- gather_gems npc garden\n\nDescriptions:\n- Choose the best location for your tree.\n- Till the soil lightly with a pick or a shovel.\n- Dig a hole in the area that is twice as wide as the root ball of your tree.\n- Loosen the roots in preparation for the transplant.\n- Pull the container away from the root ball until it is completely exposed.\n- Look for roots that are circling.\n- Place the root ball of the tree in your hole.\n- Mix one part compost with three parts soil before you fill the hole around the tree.\n- Fill in the area around the root ball with your mixture of compost and soil.\n- Create a circular berm, or small mounded hill.\n- Cover the area with a layer of mulch.\n- Use stakes to support the tree.\n- Water the area.\n- Enjoy your gift to the earth!.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is build_shelter.\n- go west npc camp path\n- go west npc path cliff\n- go up npc cliff waterfall\n- go east npc waterfall mountain\n- get branch npc mountain\n- go east npc mountain west_plain\n- insert_beam branch tree npc west_plain beam\n- go east npc west_plain east_plain\n- get branches npc east_plain\n- get leaves npc east_plain\n- get twigs npc east_plain\n- go west npc east_plain west_plain\n- lean_branches branches npc west_plain beam frame\n- clear_spider leaves npc\n- layer twigs leaves npc west_plain frame shelter\n\nDescriptions:\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- In the event that you have no containers and no way to purify water, you can dig a deep hole, let it fill with groundwater, and wait for the particles to settle at the bottom and the water is clear before you drink it. You should only do this if you have no other option.\n- Place the other end of the branch into the split of the other tree. Form a horizontal frame with the main branch by inserting the other end in the split of a nearby tree. Make sure the branch is firmly held in place by shaking it a little.\n- Insert 1 end of the branch into the split of 1 of the trees. Where the tree splits and forms a “V” shape, place 1 end of the branch to hold it up as a support beam. If the tree doesn't have a split, use a log that ends in a “V” shape and lean it against a tree so the branch is supported by the tree.\n\nPDDL Actions:\n(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )\n(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )\n(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )\n(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)\n(:action drop ; drop down an item and remove it from the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?item) (not (at ?item ?l1)))\n      :effect (and (not (inventory ?p ?item)) (at ?item ?l1))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action lean_branches ; Lean branches against the main branch to form the structure of your shelter.\n      :parameters (?branches - branches ?p - player ?l1 - location ?beam - beam ?frame - frame) \n      :precondition (and (at ?p ?l1) (inventory ?p ?branches) (at ?beam ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?branches)) (at ?frame ?l1))\n   )\n(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )\n(:action clear_spider ; clear off any critters or spiders that may be on the branch or leaves\n      :parameters (?item - item ?p - player) \n      :precondition (and (inventory ?p ?item) (has_bug ?item))\n      :effect (and (not (has_bug ?item)) (inventory ?p ?item))\n   )\n(:action insert_beam ; insert end(s) of the branch into the split(s) of the tree(s)\n      :parameters (?b - branch ?t - tree ?p - player ?l1 - location ?beam - beam) \n      :precondition (and (at ?p ?l1) (dry ?l1) (flat ?l1) (at ?t ?l1) (has_split_in_trunk ?t) (inventory ?p ?b) (not (has_bug ?b)) (long ?b) (thick ?b) )\n      :effect (and (at ?p ?l1) (not (inventory ?p ?b)) (at ?beam ?l1))\n   )\n(:action layer ; Lay twigs and leaves\n      :parameters (?twigs - twigs ?leaves - leaves ?p - player ?l1 - location ?frame - frame ?shelter - shelter) \n      :precondition (and (at ?p ?l1) (inventory ?p ?twigs) (inventory ?p ?leaves) (not (has_bug ?leaves)) (at ?frame ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?twigs)) (not (inventory ?p ?leaves)) (at ?shelter ?l1))\n   )\n(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Grow Kumquat\n\nSteps:\n- transplant_oak npc path oak_log\n- keep_kumquat npc\n- gotolocation agent kumquat inside_window\n- drink_water person water pot\n- harvest_fruit npc\n- prune_stalks npc nursery\n- cut_tinder npc path tinder\n- stop npc spider_mite\n\nDescriptions:\n- Transplant trees in early spring or fall.\n- Keep your kumquat in 6 hours of sunlight outside in the summer.\n- Move your kumquat inside to a south-facing window in the winter.\n- Water the potting mix so the soil is damp 1 in (2.5 cm) deep.\n- Harvest the fruits when they are bright orange in the summer.\n- Prune the growing stems after you harvest the fruit.\n- Cut back the roots by 1 in (2.5 cm) each year.\n- Use neem oil to prevent spider mites and other pests.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
    "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is build_shelter.\n- go west npc camp path\n- go west npc path cliff\n- go up npc cliff waterfall\n- go east npc waterfall mountain\n- get branch npc mountain\n- go east npc mountain west_plain\n- insert_beam branch tree npc west_plain beam\n- go east npc west_plain east_plain\n- get branches npc east_plain\n- get leaves npc east_plain\n- get twigs npc east_plain\n- go west npc east_plain west_plain\n- lean_branches branches npc west_plain beam frame\n- clear_spider leaves npc\n- layer twigs leaves npc west_plain frame shelter\n\nDescriptions:\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- In the event that you have no containers and no way to purify water, you can dig a deep hole, let it fill with groundwater, and wait for the particles to settle at the bottom and the water is clear before you drink it. You should only do this if you have no other option.\n- Place the other end of the branch into the split of the other tree. Form a horizontal frame with the main branch by inserting the other end in the split of a nearby tree. Make sure the branch is firmly held in place by shaking it a little.\n- Insert 1 end of the branch into the split of 1 of the trees. Where the tree splits and forms a “V” shape, place 1 end of the branch to hold it up as a support beam. If the tree doesn't have a split, use a log that ends in a “V” shape and lean it against a tree so the branch is supported by the tree.\n\nPDDL Actions:\n(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )\n(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )\n(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )\n(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)\n(:action drop ; drop down an item and remove it from the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?item) (not (at ?item ?l1)))\n      :effect (and (not (inventory ?p ?item)) (at ?item ?l1))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action lean_branches ; Lean branches against the main branch to form the structure of your shelter.\n      :parameters (?branches - branches ?p - player ?l1 - location ?beam - beam ?frame - frame) \n      :precondition (and (at ?p ?l1) (inventory ?p ?branches) (at ?beam ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?branches)) (at ?frame ?l1))\n   )\n(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )\n(:action clear_spider ; clear off any critters or spiders that may be on the branch or leaves\n      :parameters (?item - item ?p - player) \n      :precondition (and (inventory ?p ?item) (has_bug ?item))\n      :effect (and (not (has_bug ?item)) (inventory ?p ?item))\n   )\n(:action insert_beam ; insert end(s) of the branch into the split(s) of the tree(s)\n      :parameters (?b - branch ?t - tree ?p - player ?l1 - location ?beam - beam) \n      :precondition (and (at ?p ?l1) (dry ?l1) (flat ?l1) (at ?t ?l1) (has_split_in_trunk ?t) (inventory ?p ?b) (not (has_bug ?b)) (long ?b) (thick ?b) )\n      :effect (and (at ?p ?l1) (not (inventory ?p ?b)) (at ?beam ?l1))\n   )\n(:action layer ; Lay twigs and leaves\n      :parameters (?twigs - twigs ?leaves - leaves ?p - player ?l1 - location ?frame - frame ?shelter - shelter) \n      :precondition (and (at ?p ?l1) (inventory ?p ?twigs) (inventory ?p ?leaves) (not (has_bug ?leaves)) (at ?frame ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?twigs)) (not (inventory ?p ?leaves)) (at ?shelter ?l1))\n   )\n(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: How to Plant Trees for a Reforestation Project\n\nSteps:\n- make_contact_with_local_extension_office npc covering_tracks track\n- order_seeds fir1 container1\n- plan_plant fir1 container1\n- mow_area reforested area\n- buy_shelter npc brickhouse\n- place_reforestation_seeds fir1 container1\n- dig_hole npc garden soil\n- plant_plant fir1 garden_center\n- press_soil npc garden soil\n- place_shelter npc nursery\n\nDescriptions:\n- Contact your local extension office.\n- Order numerous seedlings.\n- Plan your planting time.\n- Mow the reforested area with a tractor and a shredding attachment.\n- Purchase a specialized planting tool such as a power auger, planting bar, dibble, or hoedad to dig the holes for the seedlings.\n- Place the reforestation seedlings in a planting bag.\n- Dig the hole for the seedling.\n- Plant a seedling in the hole in an upright position with the roots straight down.\n- Press the soil firmly around the roots of the seedling with the dibble or planting bar.\n- Place seedling protectors around the newly planted trees.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
]