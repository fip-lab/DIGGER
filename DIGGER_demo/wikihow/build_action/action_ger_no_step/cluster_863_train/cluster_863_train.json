[
    "Here are the PDDL actions for the task \"How to Remove Hair from Your Bikini Area with Nair,\" based on the provided steps and descriptions. Irrelevant or ambiguous steps have been adjusted to ensure they align with the task and descriptions.\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action decide_hair_removal_extent\n    :parameters (?p - player ?area - body_part)\n    :precondition (and (clean ?area) (not (trimmed ?area)))\n    :effect (and (decided_hair_removal ?area))\n)\n\n(:action clean_area\n    :parameters (?p - player ?area - body_part)\n    :precondition (and (not (clean ?area)))\n    :effect (clean ?area)\n)\n\n(:action trim_hair\n    :parameters (?p - player ?area - body_part ?trimmer - tool)\n    :precondition (and (clean ?area) (not (trimmed ?area)) (inventory ?p ?trimmer))\n    :effect (and (trimmed ?area) (not (long_hair ?area)))\n)\n\n(:action wet_skin\n    :parameters (?p - player ?area - body_part)\n    :precondition (and (clean ?area) (trimmed ?area) (not (wet ?area)))\n    :effect (wet ?area)\n)\n\n(:action apply_nair\n    :parameters (?p - player ?area - body_part ?nair - item)\n    :precondition (and (wet ?area) (inventory ?p ?nair) (not (applied ?nair ?area)))\n    :effect (and (applied ?nair ?area) (waiting_for_effect ?nair ?area))\n)\n\n(:action wait_for_nair_effect\n    :parameters (?p - player ?area - body_part ?nair - item)\n    :precondition (and (applied ?nair ?area) (waiting_for_effect ?nair ?area))\n    :effect (and (effect_applied ?nair ?area) (not (waiting_for_effect ?nair ?area)))\n)\n\n(:action rinse_test_patch\n    :parameters (?p - player ?area - body_part ?nair - item)\n    :precondition (and (effect_applied ?nair ?area) (test_patch ?area))\n    :effect (and (test_patch_rinsed ?area) (not (test_patch ?area)) (safe_to_continue ?area))\n)\n\n(:action rinse_all_nair\n    :parameters (?p - player ?area - body_part ?nair - item)\n    :precondition (and (effect_applied ?nair ?area) (safe_to_continue ?area))\n    :effect (and (nair_removed ?area) (clean ?area) (not (applied ?nair ?area)))\n)\n\n(:action wait_24_hours\n    :parameters (?p - player ?area - body_part)\n    :precondition (and (nair_removed ?area) (not (moisturized ?area)))\n    :effect (and (waited_24_hours ?area))\n)\n\n(:action moisturize_skin\n    :parameters (?p - player ?area - body_part ?moisturizer - item)\n    :precondition (and (waited_24_hours ?area) (inventory ?p ?moisturizer) (not (moisturized ?area)))\n    :effect (moisturized ?area)\n)\n\n(:action maintain_bikini_area\n    :parameters (?p - player ?area - body_part ?routine - item)\n    :precondition (and (moisturized ?area) (inventory ?p ?routine))\n    :effect (well_maintained ?area)\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`decide_hair_removal_extent`**: Captures the decision-making process about how much hair to remove.\n2. **`clean_area`**: Ensures the area is cleaned before proceeding.\n3. **`trim_hair`**: Trims the hair to a manageable length, as per the step description.\n4. **`wet_skin`**: Prepares the skin by wetting it, per the instructions.\n5. **`apply_nair`**: Applies the Nair cream to the designated area.\n6. **`wait_for_nair_effect`**: Waits for the Nair to take effect.\n7. **`rinse_test_patch`**: Rinses a small test patch to check for adverse reactions.\n8. **`rinse_all_nair`**: Rinses off all the Nair after confirming safety.\n9. **`wait_24_hours`**: Waits 24 hours before moisturizing, as described.\n10. **`moisturize_skin`**: Moisturizes the skin after the waiting period.\n11. **`maintain_bikini_area`**: Represents ongoing maintenance of the bikini area.\n\n### Adjustments Made:\n- Steps were clarified or adjusted to align with the task (e.g., \"Clean up down south\" became `clean_area`).\n- Irrelevant or ambiguous steps were rephrased to fit the task description.\n- Entity states were used to define preconditions and effects for each action.\n\nLet me know if you need further refinements!",
    "Here is the PDDL representation of the task \"How to Remove Butt Hair\" based on the provided steps and descriptions. Since the entity state provided is unrelated to the task, I will focus on generating task-specific PDDL actions based on the descriptions and logical steps for hair removal.\n\n---\n\n### PDDL Actions:\n\n#### 1. Use an Epilator to Pull Out the Hairs\n```lisp\n(:action use_epilator\n    :parameters (?area - body_area ?epilator - tool)\n    :precondition (and\n                    (has_hair ?area)\n                    (available ?epilator)\n                    (functional ?epilator))\n    :effect (and\n              (not (has_hair ?area))\n              (irritated_skin ?area))\n)\n```\n\n#### 2. Apply Depilatory Cream to Remove Surface Hairs\n```lisp\n(:action apply_depilatory_cream\n    :parameters (?area - body_area ?cream - product)\n    :precondition (and\n                    (has_hair ?area)\n                    (available ?cream)\n                    (safe_for_use ?cream))\n    :effect (and\n              (not (has_hair ?area))\n              (smooth_skin ?area))\n)\n```\n\n#### 3. Trim Butt Hair Using an Electric Clipper\n```lisp\n(:action trim_hair\n    :parameters (?area - body_area ?clipper - tool)\n    :precondition (and\n                    (has_hair ?area)\n                    (available ?clipper)\n                    (functional ?clipper))\n    :effect (and\n              (short_hair ?area)\n              (not (long_hair ?area)))\n)\n```\n\n#### 4. Consider Laser Hair Removal for a Permanent Fix\n```lisp\n(:action laser_hair_removal\n    :parameters (?area - body_area ?laser - device)\n    :precondition (and\n                    (has_hair ?area)\n                    (available ?laser)\n                    (functional ?laser))\n    :effect (and\n              (not (has_hair ?area))\n              (permanent_hair_removal ?area))\n)\n```\n\n---\n\n### Explanation of Steps and Actions:\n\n1. **Use an Epilator:** This action removes hair from the root using an epilator. The precondition ensures that hair exists in the specified area and that the epilator is available and functional. The effect removes hair but may leave the skin irritated.\n\n2. **Apply Depilatory Cream:** This action uses a depilatory cream to dissolve surface hairs. The precondition checks for the presence of hair, availability of the cream, and its safety for use. The effect removes hair and leaves the skin smooth.\n\n3. **Trim Hair with Clipper:** This action trims longer hair to a shorter length using an electric clipper. The precondition ensures the clipper is available and functional, and the effect changes the hair state from long to short.\n\n4. **Laser Hair Removal:** This action performs a permanent hair removal solution using a laser device. The precondition checks for the presence of hair, availability, and functionality of the laser device. The effect removes hair permanently.\n\n---\n\nThis PDDL representation captures the intent and logic of the task \"How to Remove Butt Hair\" while ensuring each step is translated into a corresponding action with clear preconditions and effects.",
    "Here are the PDDL actions generated for the task \"How to Wash Coconut Oil Out of Hair\" based on the provided steps and descriptions:\n\n---\n\n### PDDL Actions:\n\n#### Step 1: Choose a dry shampoo or powder to soak up the oil.\n```lisp\n(:action choose_dry_shampoo\n    :parameters (?p - powder ?a - agent)\n    :precondition (and (available ?p) (not (selected ?p)))\n    :effect (and (selected ?p))\n)\n```\n\n#### Step 2: Apply the powder to your roots.\n```lisp\n(:action apply_powder_to_roots\n    :parameters (?p - powder ?a - agent ?h - hair)\n    :precondition (and (selected ?p) (not (powder_applied ?h)))\n    :effect (and (powder_applied ?h))\n)\n```\n\n#### Step 3: Comb through your hair until the powder soaks up the oil.\n```lisp\n(:action comb_hair\n    :parameters (?a - agent ?h - hair ?c - comb)\n    :precondition (and (powder_applied ?h) (available ?c) (not (oil_soaked_up ?h)))\n    :effect (and (oil_soaked_up ?h))\n)\n```\n\n---\n\n### Notes:\n1. **Action Naming**: Each action name is concise and describes the specific step being performed.\n2. **Parameters**: The parameters include relevant objects (`?p` for powder, `?c` for comb, `?h` for hair, etc.) and agents (`?a` for the person performing the task).\n3. **Preconditions**: These ensure that the necessary conditions (e.g., powder being selected, comb being available) are met before the action can be executed.\n4. **Effects**: The effects capture the changes in the state of the world after the action is executed (e.g., powder is applied, oil is soaked up).\n\nIf you have additional information or wish to refine the task further, feel free to provide more details!",
    "To generate the PDDL actions for the task **\"How to Wax With Honey\"**, I will carefully analyze the steps and entity states provided. Since the steps are vague and don't fully align with the task, I will adapt and refine them to ensure they are relevant to the overall goal of waxing with honey. The descriptions will guide the logic of the actions.\n\n---\n\n### Refined Steps for the Task:\n1. Wash and dry your skin to prepare it for waxing.\n2. Grow your hair out to a suitable length for waxing.\n3. Heat the honey to the appropriate temperature for waxing.\n4. Apply the honey to the skin and remove the hair.\n\n---\n\n### PDDL Actions:\n\n#### 1. **Wash and Dry Skin**\n```lisp\n(:action wash_and_dry_skin\n    :parameters (?p - person ?s - skin)\n    :precondition (and\n        (dirty ?s)\n        (not (dry ?s))\n    )\n    :effect (and\n        (clean ?s)\n        (dry ?s)\n        (not (dirty ?s))\n    )\n)\n```\n- **Description:** This action prepares the skin by ensuring it is clean and dry. Preconditions check if the skin is dirty and not dry, and the effects update the skin to be clean and dry.\n\n---\n\n#### 2. **Grow Hair Out**\n```lisp\n(:action grow_hair_out\n    :parameters (?p - person ?h - hair)\n    :precondition (and\n        (short ?h)\n        (attached ?h ?p)\n    )\n    :effect (and\n        (long ?h)\n        (not (short ?h))\n    )\n)\n```\n- **Description:** This action ensures that the hair is grown to a suitable length for waxing. Preconditions verify the hair is short and attached to the person, and the effects update the hair to be long.\n\n---\n\n#### 3. **Heat Honey**\n```lisp\n(:action heat_honey\n    :parameters (?h - honey ?c - container ?st - stove)\n    :precondition (and\n        (in ?h ?c)\n        (on ?c ?st)\n        (not (heated ?h))\n    )\n    :effect (and\n        (heated ?h)\n        (not (cool ?h))\n    )\n)\n```\n- **Description:** This action heats the honey to make it suitable for waxing. Preconditions ensure the honey is in a container placed on a stove and not already heated. The effects update the honey to be heated.\n\n---\n\n#### 4. **Apply Honey and Remove Hair**\n```lisp\n(:action apply_honey_and_remove_hair\n    :parameters (?h - honey ?s - skin ?ha - hair)\n    :precondition (and\n        (heated ?h)\n        (clean ?s)\n        (dry ?s)\n        (long ?ha)\n        (attached ?ha ?s)\n    )\n    :effect (and\n        (removed ?ha ?s)\n        (not (attached ?ha ?s))\n        (not (long ?ha))\n    )\n)\n```\n- **Description:** This action applies the heated honey to the skin and removes the hair. Preconditions check that the honey is heated, the skin is clean and dry, and the hair is long and attached. The effects update the hair to be removed and no longer attached to the skin.\n\n---\n\n### Summary of Refinements:\n- The steps were refined to align with the task of waxing with honey.\n- Each action corresponds to a logical step in the waxing process, with preconditions and effects derived from the descriptions and entity states.\n- Irrelevant or unclear steps were modified to ensure relevance and consistency with the task.\n\nIf there are additional details or further clarifications needed, feel free to provide them!",
    "Here are the PDDL actions for the task \"How to Get Wax Off a Tablecloth\" based on the provided steps, descriptions, and entity states:\n\n---\n\n### PDDL Actions:\n\n#### 1. Freeze the Wax\n```lisp\n(:action freeze_wax\n    :parameters (?p - player ?wax - wax ?freezer - freezer)\n    :precondition (and (inventory ?p ?wax) (available ?freezer))\n    :effect (and (frozen ?wax) (not (melted ?wax)))\n)\n```\n**Description:** This action involves freezing the wax to make it solid and brittle, which helps in removing it more easily. The freezer must be available for this action.\n\n---\n\n#### 2. Scrape the Frozen Wax\n```lisp\n(:action scrape_frozen_wax\n    :parameters (?p - player ?knife - knife ?wax - wax ?tablecloth - tablecloth)\n    :precondition (and (inventory ?p ?knife) (frozen ?wax) (on ?wax ?tablecloth))\n    :effect (and (removed ?wax ?tablecloth) (not (on ?wax ?tablecloth)) (scraped ?wax))\n)\n```\n**Description:** Using a dull knife or fingernail, the player carefully scrapes the frozen wax off the tablecloth. The wax must be frozen before this action can be performed.\n\n---\n\n#### 3. Remove Wax with Heat\n```lisp\n(:action remove_wax_with_heat\n    :parameters (?p - player ?heating_element - heating_element ?wax - wax ?tablecloth - tablecloth)\n    :precondition (and (inventory ?p ?heating_element) (scraped ?wax) (on ?wax ?tablecloth) (powered ?heating_element))\n    :effect (and (melted ?wax) (not (on ?wax ?tablecloth)) (clean ?tablecloth))\n)\n```\n**Description:** This action involves applying heat to the wax to melt and remove any remaining residue from the tablecloth. The heating element must be powered and the wax should have been scraped prior to this action.\n\n---\n\n### Notes:\n1. **Entity States Considered:**\n   - Wax must be frozen before it can be scraped.\n   - Scraped wax can then be melted and removed with heat.\n   - The heating element must be powered and available for the heat application step.\n\n2. **Modifications to Steps:**\n   - The steps were adjusted to ensure logical consistency with the task and descriptions.\n   - The \"freeze the dripped wax\" step assumes the availability of a freezer or similar cooling device.\n   - The \"remove wax with heat\" step assumes the use of a heating element, such as an iron or hairdryer.\n\n3. **Preconditions and Effects:**\n   - Preconditions ensure the logical sequence of actions (e.g., wax must be frozen before scraping, and scraped before heating).\n   - Effects reflect the changes in the state of the wax and tablecloth after each action.\n\nLet me know if further refinements are needed!",
    "Here are the PDDL actions for the task \"How to Use Veet on Your Bikini Area\" based on the steps and descriptions provided:\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action LayOutTowel\n    :parameters (?t - towel)\n    :precondition (and (clean ?t) (dry ?t) (not (on_surface ?t)))\n    :effect (and (on_surface ?t) (ready_for_use ?t))\n)\n\n(:action SitComfortably\n    :parameters (?p - person ?t - towel)\n    :precondition (and (on_surface ?t) (ready_for_use ?t) (not (comfortable ?p)))\n    :effect (comfortable ?p)\n)\n\n(:action WarmWaxStrip\n    :parameters (?s - strip)\n    :precondition (and (not (warm ?s)) (not (ready_to_use ?s)))\n    :effect (and (warm ?s) (ready_to_use ?s))\n)\n\n(:action PeelWaxStrip\n    :parameters (?s - strip)\n    :precondition (and (ready_to_use ?s) (not (peeled ?s)))\n    :effect (and (peeled ?s) (wax_side_exposed ?s))\n)\n\n(:action PlaceWaxStrip\n    :parameters (?s - strip ?p - person)\n    :precondition (and (wax_side_exposed ?s) (not (applied ?s)) (comfortable ?p))\n    :effect (applied ?s)\n)\n\n(:action RubWaxStrip\n    :parameters (?s - strip)\n    :precondition (and (applied ?s) (not (secured ?s)))\n    :effect (secured ?s)\n)\n\n(:action HoldSkinTaut\n    :parameters (?p - person)\n    :precondition (and (comfortable ?p) (not (skin_taut ?p)))\n    :effect (skin_taut ?p)\n)\n\n(:action RipWaxStrip\n    :parameters (?s - strip ?p - person)\n    :precondition (and (secured ?s) (skin_taut ?p) (not (removed ?s)))\n    :effect (and (removed ?s) (hair_removed ?p))\n)\n\n(:action ContinueWaxing\n    :parameters (?s - strip ?p - person)\n    :precondition (and (hair_removed ?p) (peeled ?s) (not (fully_hair_free ?p)))\n    :effect (fully_hair_free ?p)\n)\n\n(:action WipeExcessWax\n    :parameters (?c - cloth ?p - person)\n    :precondition (and (fully_hair_free ?p) (clean ?c) (not (wax_removed ?p)))\n    :effect (and (wax_removed ?p) (dirty ?c))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **LayOutTowel**: Prepares the towel for the waxing process by placing it on a surface.\n2. **SitComfortably**: Ensures the person is in a comfortable position to proceed with waxing.\n3. **WarmWaxStrip**: Warms the wax strip by rubbing it between hands to make it ready for use.\n4. **PeelWaxStrip**: Separates the wax strip to expose the wax side for application.\n5. **PlaceWaxStrip**: Applies the wax strip to the skin in the bikini area.\n6. **RubWaxStrip**: Rubs the strip to secure it in place and ensure proper adhesion to the hair.\n7. **HoldSkinTaut**: Ensures the skin is held taut to make it easier to remove the strip.\n8. **RipWaxStrip**: Removes the wax strip, effectively removing hair from the skin.\n9. **ContinueWaxing**: Repeats the process with additional strips until the entire area is hair-free.\n10. **WipeExcessWax**: Cleans up the remaining wax using the cloth provided in the box.\n\n---\n\n### Notes:\n- The actions are designed to reflect the logical flow of the steps in the task.\n- Preconditions and effects are derived from the descriptions and entity states provided.\n- Irrelevant or unclear steps have been adjusted to align with the task's objectives.\n\n",
    "Here is the PDDL representation of the steps for the task \"How to Remove Hair Using Organic Ganda Beroza.\" Each action is carefully designed to capture the intent and logic of the described steps while ensuring relevance and consistency with the task.\n\n---\n\n### PDDL Actions:\n\n#### 1. Exfoliate Skin\n```lisp\n(:action exfoliate_skin\n    :parameters (?p - player ?exfoliating_tool - exfoliating_tool ?skin - skin)\n    :precondition (and (inventory ?p ?exfoliating_tool) (clean ?skin))\n    :effect (and (exfoliated ?skin) (not (clean ?skin)))\n)\n```\n\n#### 2. Wash Hands\n```lisp\n(:action wash_hands\n    :parameters (?p - player ?soap - soap ?water - water ?hands - hands)\n    :precondition (and (inventory ?p ?soap) (inventory ?p ?water) (dirty ?hands))\n    :effect (and (clean ?hands) (not (dirty ?hands)))\n)\n```\n\n#### 3. Take Ganda Beroza\n```lisp\n(:action take_ganda_beroza\n    :parameters (?p - player ?ganda_beroza - ganda_beroza)\n    :precondition (and (inventory ?p ?ganda_beroza) (solid ?ganda_beroza))\n    :effect (and (ready_to_apply ?ganda_beroza))\n)\n```\n\n#### 4. Take Hair Removal Agent\n```lisp\n(:action take_hair_removal_agent\n    :parameters (?p - player ?agent - hair_removal_agent)\n    :precondition (and (inventory ?p ?agent) (pinchable ?agent))\n    :effect (and (ready_to_use ?agent))\n)\n```\n\n#### 5. Apply Ganda Beroza\n```lisp\n(:action apply_ganda_beroza\n    :parameters (?p - player ?ganda_beroza - ganda_beroza ?hair - body_hair)\n    :precondition (and (ready_to_apply ?ganda_beroza) (attached ?hair))\n    :effect (and (coated ?hair ?ganda_beroza) (not (ready_to_apply ?ganda_beroza)))\n)\n```\n\n#### 6. Remove Hair\n```lisp\n(:action remove_hair\n    :parameters (?p - player ?hair - body_hair ?fingers - fingers ?ganda_beroza - ganda_beroza)\n    :precondition (and (coated ?hair ?ganda_beroza) (inventory ?p ?fingers) (attached ?hair))\n    :effect (and (removed ?hair) (not (attached ?hair)) (dirty ?fingers))\n)\n```\n\n#### 7. Repeat Procedure\n```lisp\n(:action repeat_procedure\n    :parameters (?p - player ?hair - body_hair ?ganda_beroza - ganda_beroza ?fingers - fingers)\n    :precondition (and (inventory ?p ?fingers) (coated ?hair ?ganda_beroza) (attached ?hair))\n    :effect (and (removed ?hair) (not (attached ?hair)) (dirty ?fingers))\n)\n```\n\n#### 8. Clean Skin\n```lisp\n(:action clean_skin\n    :parameters (?p - player ?skin - skin ?water - water ?cloth - cloth)\n    :precondition (and (inventory ?p ?cloth) (inventory ?p ?water) (dirty ?skin))\n    :effect (and (clean ?skin) (not (dirty ?skin)))\n)\n```\n\n#### 9. Remove Ganda Beroza from Fingers\n```lisp\n(:action remove_ganda_beroza_from_fingers\n    :parameters (?p - player ?fingers - fingers ?water - water ?soap - soap)\n    :precondition (and (dirty ?fingers) (inventory ?p ?water) (inventory ?p ?soap))\n    :effect (and (clean ?fingers) (not (dirty ?fingers)))\n)\n```\n\n#### 10. Wash Hands Again\n```lisp\n(:action wash_hands_again\n    :parameters (?p - player ?soap - soap ?water - water ?hands - hands)\n    :precondition (and (inventory ?p ?soap) (inventory ?p ?water) (dirty ?hands))\n    :effect (and (clean ?hands) (not (dirty ?hands)))\n)\n```\n\n---\n\n### Notes:\n1. **Relevance Adjustments**: The steps have been modified to ensure relevance to the task. For instance, the second washing of hands is included as a separate action to ensure hygiene after the removal process.\n2. **Entity States**: The preconditions and effects are derived based on the entity states provided in the task description. For example, `dirty` and `clean` states are used to track the cleanliness of the skin, hands, and fingers.\n3. **Iterative Steps**: The `repeat_procedure` action allows for the iterative nature of hair removal until all unwanted hair is removed.\n4. **Consistency**: The structure of each action adheres to the PDDL format, ensuring clarity and logical flow.\n\nLet me know if additional clarifications or modifications are needed!",
    "Here is the PDDL translation for the task \"How to Wax\" based on the provided steps, descriptions, and entity states. I have adjusted and modified the steps where necessary to ensure relevance to the task and consistency with the descriptions.\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action AvoidIngrownHairs\n    :parameters (?area - body_area)\n    :precondition (not (prepared ?area))\n    :effect (prepared ?area)\n)\n\n(:action UseBabyPowder\n    :parameters (?powder - baby_powder ?area - body_area)\n    :precondition (and (not (applied ?powder ?area)) (prepared ?area))\n    :effect (applied ?powder ?area)\n)\n\n(:action AvoidBurningWithWax\n    :parameters (?wax - wax)\n    :precondition (and (heated ?wax) (not (too_hot ?wax)))\n    :effect (safe_temperature ?wax)\n)\n\n(:action EnsureHairLength\n    :parameters (?hair - hair ?area - body_area)\n    :precondition (and (not (long_enough ?hair)) (in_area ?hair ?area))\n    :effect (long_enough ?hair)\n)\n\n(:action AvoidWaxingSameAreaTwice\n    :parameters (?area - body_area)\n    :precondition (and (waxed ?area) (not (reapplied ?area)))\n    :effect (not (reapplied ?area))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **AvoidIngrownHairs**:\n   - **Parameters**: The body area being waxed.\n   - **Precondition**: The body area must not already be prepared.\n   - **Effect**: Marks the body area as prepared to avoid ingrown hairs.\n\n2. **UseBabyPowder**:\n   - **Parameters**: The baby powder and the body area.\n   - **Precondition**: Baby powder must not have been applied to the area, and the area must be prepared.\n   - **Effect**: Baby powder is applied to the body area.\n\n3. **AvoidBurningWithWax**:\n   - **Parameters**: The wax.\n   - **Precondition**: The wax must be heated but not too hot.\n   - **Effect**: Ensures the wax is at a safe temperature for use.\n\n4. **EnsureHairLength**:\n   - **Parameters**: The hair and the body area.\n   - **Precondition**: The hair in the specified area must not be long enough for waxing.\n   - **Effect**: Ensures the hair is long enough for effective waxing.\n\n5. **AvoidWaxingSameAreaTwice**:\n   - **Parameters**: The body area.\n   - **Precondition**: The area must already have been waxed, and the wax should not have been reapplied.\n   - **Effect**: Prevents waxing the same area twice.\n\n---\n\n### Notes:\n- The steps were adjusted to align with the task's intent and descriptions.\n- Preconditions and effects were derived from the provided descriptions and entity states.\n- Irrelevant or unclear steps were omitted or reinterpreted for consistency with the task.",
    "Here are the PDDL actions generated based on the provided task, steps, and descriptions:\n\n### PDDL Actions for \"How to Use Wax on Your Hair\"\n\n```lisp\n(:action StartWithDryCombedHair\n    :parameters (?h - hair)\n    :precondition (and (dry ?h) (combed ?h))\n    :effect (prepared ?h)\n)\n\n(:action WarmWax\n    :parameters (?w - wax ?p - palm)\n    :precondition (and (not (warmed ?w)) (in_palm ?w ?p))\n    :effect (warmed ?w)\n)\n\n(:action TousleHair\n    :parameters (?h - hair ?f - fingers)\n    :precondition (and (prepared ?h) (warmed ?w) (not (tousled ?h)))\n    :effect (tousled ?h)\n)\n\n(:action ApplyWaxForVolume\n    :parameters (?w - wax ?h - hair)\n    :precondition (and (tousled ?h) (warmed ?w) (not (voluminous ?h)))\n    :effect (voluminous ?h)\n)\n\n(:action AddDefinitionAndTexture\n    :parameters (?w - wax ?h - hair ?p - piece)\n    :precondition (and (voluminous ?h) (warmed ?w) (not (defined ?p)))\n    :effect (defined ?p)\n)\n```\n\n---\n\n### Explanation of Generated Actions:\n\n#### 1. **StartWithDryCombedHair**\n   - **Action Name:** `StartWithDryCombedHair`\n   - **Parameters:** Hair (`?h`)\n   - **Preconditions:** Hair must be dry and combed.\n   - **Effects:** The hair is now prepared for styling.\n\n#### 2. **WarmWax**\n   - **Action Name:** `WarmWax`\n   - **Parameters:** Wax (`?w`), Palm (`?p`)\n   - **Preconditions:** The wax must not already be warmed, and it must be in the palm.\n   - **Effects:** The wax becomes warmed.\n\n#### 3. **TousleHair**\n   - **Action Name:** `TousleHair`\n   - **Parameters:** Hair (`?h`), Fingers (`?f`)\n   - **Preconditions:** The hair must be prepared, the wax must be warmed, and the hair must not already be tousled.\n   - **Effects:** The hair becomes tousled.\n\n#### 4. **ApplyWaxForVolume**\n   - **Action Name:** `ApplyWaxForVolume`\n   - **Parameters:** Wax (`?w`), Hair (`?h`)\n   - **Preconditions:** The hair must be tousled, the wax must be warmed, and the hair must not already have volume.\n   - **Effects:** The hair gains volume.\n\n#### 5. **AddDefinitionAndTexture**\n   - **Action Name:** `AddDefinitionAndTexture`\n   - **Parameters:** Wax (`?w`), Hair (`?h`), Specific Hair Piece (`?p`)\n   - **Preconditions:** The hair must be voluminous, the wax must be warmed, and the specific hair piece must not already have definition.\n   - **Effects:** The specific hair piece gains definition and texture.\n\n---\n\n### Notes:\n- The steps were interpreted and adjusted to match the logic of the task \"How to Use Wax on Your Hair.\"\n- Irrelevant or unclear entity states were omitted, as they did not contribute to the task-specific actions.\n- The actions are designed to follow a logical progression, ensuring that preconditions and effects align with the described steps and outcomes.",
    "Here are the PDDL actions for the task \"How to Shave Your Legs Out of Water,\" based on the steps and descriptions provided:\n\n---\n\n### PDDL Actions:\n\n#### Step 1: Wet your legs\n**Description:** Spray your legs with water or use a wet towel to wet your legs.\n\n```pddl\n(:action wet-legs\n    :parameters (?p - person ?t - towel ?w - water)\n    :precondition (and (not (wet ?p)) (has ?p ?t) (wet ?t))\n    :effect (wet ?p)\n)\n```\n\n---\n\n#### Step 2: Apply deodorant\n**Description:** Add some stick deodorant (NOT antiperspirant).\n\n```pddl\n(:action apply-deodorant\n    :parameters (?p - person ?d - deodorant)\n    :precondition (and (not (applied ?p ?d)) (has ?p ?d))\n    :effect (applied ?p ?d)\n)\n```\n\n---\n\n#### Step 3: Add water to gel/foam/deodorant\n**Description:** Squirt just a little bit of water on top of your gel/foamburst/deodorant.\n\n```pddl\n(:action add-water-to-gel\n    :parameters (?p - person ?g - gel ?w - water)\n    :precondition (and (has ?p ?g) (has ?p ?w) (not (hydrated ?g)))\n    :effect (hydrated ?g)\n)\n```\n\n---\n\n#### Step 4: Shave your legs\n**Description:** Now shave your legs as you normally do if you were in a shower.\n\n```pddl\n(:action shave-legs\n    :parameters (?p - person ?r - razor)\n    :precondition (and (wet ?p) (has ?p ?r) (not (shaved ?p)))\n    :effect (shaved ?p)\n)\n```\n\n---\n\n#### Step 5: Dry your legs\n**Description:** Use a dry cloth or towel to dry your legs and get any hair off.\n\n```pddl\n(:action dry-legs\n    :parameters (?p - person ?t - towel)\n    :precondition (and (wet ?p) (has ?p ?t) (not (dry ?p)))\n    :effect (and (dry ?p) (not (wet ?p)))\n)\n```\n\n---\n\n#### Step 6: Apply after-shaving lotion\n**Description:** Once you're finished, use an after-shaving lotion or a body lotion to make your legs even smoother and moisturized.\n\n```pddl\n(:action apply-lotion\n    :parameters (?p - person ?l - lotion)\n    :precondition (and (shaved ?p) (has ?p ?l) (not (moisturized ?p)))\n    :effect (moisturized ?p)\n)\n```\n\n---\n\n### Notes:\n1. Each action corresponds to a specific step in the process and follows the descriptions provided.\n2. Preconditions ensure that the actions occur in the correct sequence and that the required objects or states are present.\n3. Effects describe the resulting changes in the state of the entities involved.\n\nIf further clarification or adjustments are needed, let me know!",
    "Based on the task \"How to Get Gum Out of Your Hair\" and the given instructions, here are the PDDL actions for the steps described:\n\n---\n\n### PDDL Actions:\n\n#### Action 1: apply_ice_wrap\n```lisp\n(:action apply_ice_wrap\n    :parameters (?hair - object ?ice_wrap - tool)\n    :precondition (and\n        (gum_in_hair ?hair)\n        (available ?ice_wrap)\n    )\n    :effect (and\n        (gum_hardened ?hair)\n        (not (gum_soft ?hair))\n    )\n)\n```\n\n**Explanation:** This action represents the step of using an ice wrap to harden the gum in the hair. The precondition checks that there is gum in the hair and that an ice wrap is available. The effect is that the gum becomes hardened.\n\n---\n\n#### Action 2: chip_hardened_gum\n```lisp\n(:action chip_hardened_gum\n    :parameters (?hair - object ?tool - tool)\n    :precondition (and\n        (gum_in_hair ?hair)\n        (gum_hardened ?hair)\n        (available ?tool)\n    )\n    :effect (and\n        (not (gum_in_hair ?hair))\n        (hair_clean ?hair)\n    )\n)\n```\n\n**Explanation:** This action represents the step of chipping the hardened gum out of the hair. The precondition ensures that the gum is both in the hair and hardened, and that a suitable tool is available. The effect is that the gum is removed, and the hair is clean.\n\n---\n\n### Notes:\n1. The entity states provided in the task description contained irrelevant or unrelated information (e.g., references to \"oil/macaroni\"). These were ignored as they do not pertain to the task of removing gum from hair.\n2. The steps were clarified and aligned with the task description to ensure the generated PDDL actions are relevant and accurately represent the task's logic.\n3. Additional conditions like `available` were added to ensure tools or resources (e.g., ice wrap, tool) are present before performing actions.\n\nIf additional steps or refinements are needed, feel free to provide further details!",
    "Here are the PDDL actions based on the task \"How to Use Hair Removing Wax\" and the provided steps and descriptions:\n\n---\n\n### PDDL Actions:\n\n#### Action 1: WarmWax\n```lisp\n(:action WarmWax\n    :parameters (?w - wax)\n    :precondition (and (not (heated ?w)) (at_temperature ?w cool))\n    :effect (and (heated ?w) (not (at_temperature ?w cool)) (at_temperature ?w warm))\n)\n```\n\n#### Action 2: DipApplicator\n```lisp\n(:action DipApplicator\n    :parameters (?a - applicator ?w - wax)\n    :precondition (and (clean ?a) (heated ?w) (at_temperature ?w warm))\n    :effect (and (not (clean ?a)) (coated ?a ?w))\n)\n```\n\n#### Action 3: ApplyFabric\n```lisp\n(:action ApplyFabric\n    :parameters (?f - fabric ?w - wax ?h - hair)\n    :precondition (and (coated ?f ?w) (aligned ?f ?h direction_of_growth))\n    :effect (and (attached ?f ?h) (graspable ?f))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **WarmWax**:\n   - **Parameters**: The wax (`?w`).\n   - **Preconditions**: The wax is not already heated and is currently at a cool temperature.\n   - **Effects**: The wax becomes heated and changes its state from cool to warm.\n\n2. **DipApplicator**:\n   - **Parameters**: The applicator (`?a`) and the wax (`?w`).\n   - **Preconditions**: The applicator is clean, and the wax is heated to a warm temperature.\n   - **Effects**: The applicator is coated with wax, and its clean state is removed.\n\n3. **ApplyFabric**:\n   - **Parameters**: The fabric (`?f`), the wax (`?w`), and the hair (`?h`).\n   - **Preconditions**: The fabric is coated with wax and aligned in the direction of hair growth.\n   - **Effects**: The fabric becomes attached to the hair and is left graspable for removal.\n\n---\n\n### Notes:\n- The steps and descriptions were analyzed to ensure the actions align with the task of using hair-removing wax.\n- The entity states were used to define the preconditions and effects for each action.\n- Irrelevant or incorrect steps were adjusted to fit the logical flow of the task.\n\n",
    "Based on the task \"How to Apply Hair Wax\" and the provided steps and descriptions, I will generate PDDL actions following the example format. Irrelevant or unclear steps will be adjusted to align with the task.\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action PurchaseHairWax\n    :parameters (?hw - hairwax ?s - store)\n    :precondition (and (at ?s) (not (owned ?hw)))\n    :effect (owned ?hw)\n)\n\n(:action ApplyHairWax\n    :parameters (?hw - hairwax ?h - hair)\n    :precondition (and (owned ?hw) (or (dry ?h) (slightly_damp ?h)))\n    :effect (styled ?h)\n)\n\n(:action EnsureClothing\n    :parameters (?p - person)\n    :precondition (not (fully_clothed ?p))\n    :effect (fully_clothed ?p)\n)\n\n(:action ScoopHairWax\n    :parameters (?hw - hairwax ?f - fingers)\n    :precondition (and (owned ?hw) (clean ?f))\n    :effect (wax_on_fingers ?f)\n)\n\n(:action RubHairWax\n    :parameters (?f - fingers)\n    :precondition (wax_on_fingers ?f)\n    :effect (wax_evenly_spread ?f)\n)\n\n(:action RestyleHair\n    :parameters (?h - hair)\n    :precondition (styled ?h)\n    :effect (restyled ?h)\n)\n\n(:action WashOutWax\n    :parameters (?h - hair)\n    :precondition (styled ?h)\n    :effect (and (not (styled ?h)) (clean ?h))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **PurchaseHairWax**: This action represents buying hair wax from a store. Preconditions ensure the person is at the store and does not already own the hair wax. The effect is that the hair wax is now owned.\n\n2. **ApplyHairWax**: This action applies hair wax to the hair. Preconditions ensure the hair is either dry or slightly damp and that the person owns the hair wax. The effect is that the hair becomes styled.\n\n3. **EnsureClothing**: This action ensures the person is fully clothed before applying hair wax. The precondition checks if the person is not fully clothed, and the effect changes their state to being fully clothed.\n\n4. **ScoopHairWax**: This action involves scooping out hair wax with fingers. Preconditions ensure the person owns the hair wax and their fingers are clean. The effect is that wax is now on the fingers.\n\n5. **RubHairWax**: This action spreads the hair wax evenly on the fingers. The precondition checks if wax is already on the fingers. The effect is that the wax is evenly spread on the fingers.\n\n6. **RestyleHair**: This action allows the person to restyle their hair if necessary. The precondition ensures the hair is already styled. The effect is that the hair becomes restyled.\n\n7. **WashOutWax**: This action removes the hair wax from the hair. Preconditions ensure the hair is styled (indicating wax is present). The effect is that the hair is no longer styled and is clean.\n\n---\n\nThese actions collectively represent the process of applying hair wax, ensuring logical flow and adherence to the task's requirements.",
    "Here are the PDDL actions generated for the task \"How to Remove Wax from Wool\" based on the provided steps and descriptions:\n\n---\n\n### PDDL Actions:\n\n#### **Action 1: place_paper_bag**\n```lisp\n(:action place_paper_bag\n    :parameters (?b - bag ?s - spill_area)\n    :precondition (and\n                    (is_paper_bag ?b)\n                    (wax_spill ?s)\n                    (not (bag_placed ?b ?s))\n                  )\n    :effect (and\n              (bag_placed ?b ?s)\n              (not (wax_spill ?s))\n            )\n)\n```\n\n#### **Action 2: run_iron**\n```lisp\n(:action run_iron\n    :parameters (?i - iron ?b - bag ?s - spill_area)\n    :precondition (and\n                    (medium_heat ?i)\n                    (bag_placed ?b ?s)\n                    (wax_spill ?s)\n                  )\n    :effect (and\n              (wax_removed ?b ?s)))\n```",
    "Based on the task \"How to Wax Your Legs,\" the steps provided, and the example format, I will generate the corresponding PDDL actions. Since the entity states provided in the question do not directly relate to the task or steps, I will focus on generating task-specific actions based on the logical flow of waxing your legs. If any steps appear irrelevant or incorrect, I will modify them to align with the task.\n\n---\n\n### PDDL Actions:\n\n#### Step 1: Search for leg wax services in your area.\n```lisp\n(:action SearchForWaxServices\n    :parameters (?p - person ?a - area)\n    :precondition (not (found_services ?p ?a))\n    :effect (found_services ?p ?a)\n)\n```\n\n#### Step 2: Call to make an appointment.\n```lisp\n(:action MakeAppointment\n    :parameters (?p - person ?s - service)\n    :precondition (and (found_services ?p ?s) (not (appointment_scheduled ?p ?s)))\n    :effect (appointment_scheduled ?p ?s)\n)\n```\n\n#### Step 3: Show up for your appointment.\n```lisp\n(:action AttendAppointment\n    :parameters (?p - person ?s - service)\n    :precondition (and (appointment_scheduled ?p ?s) (not (at_service_location ?p ?s)))\n    :effect (at_service_location ?p ?s)\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **SearchForWaxServices**:\n   - **Action Name**: Describes the act of searching for leg waxing services.\n   - **Parameters**: The person performing the search (`?p`) and the area being searched (`?a`).\n   - **Preconditions**: The person has not yet found services in the area.\n   - **Effects**: The person successfully finds services in the area.\n\n2. **MakeAppointment**:\n   - **Action Name**: Indicates the act of calling and scheduling an appointment.\n   - **Parameters**: The person making the appointment (`?p`) and the service being contacted (`?s`).\n   - **Preconditions**: The person must have already found the service and not yet scheduled an appointment.\n   - **Effects**: The appointment is successfully scheduled.\n\n3. **AttendAppointment**:\n   - **Action Name**: Represents showing up for the appointment.\n   - **Parameters**: The person attending (`?p`) and the service location (`?s`).\n   - **Preconditions**: The appointment must already be scheduled, and the person is not yet at the service location.\n   - **Effects**: The person is now at the service location.\n\n---\n\n### Adjustments for Relevance:\n- The provided entity states and descriptions (e.g., related to \"basement\" and \"helmet\") do not directly relate to the task of waxing your legs. Therefore, I have omitted them and focused exclusively on the logical steps required for the task.\n- The steps have been interpreted and adjusted to ensure relevance to the task while maintaining the overall intent.\n\nLet me know if further refinements are needed!"
]