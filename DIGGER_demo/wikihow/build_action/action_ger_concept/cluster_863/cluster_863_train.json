[
    "To translate the given task \"How to Remove Hair from Your Bikini Area with Nair\" into PDDL actions, we need to focus on the key steps and states involved in the process. The task involves preparing the area, applying Nair, and cleaning up afterward. Here is how we can define the PDDL actions for the task:\n\n### PDDL Actions\n\n```lisp\n(:action remove_wailmer ; decide how much hair to remove\n    :parameters (?npc - person)\n    :precondition (and (not (decided ?npc)))\n    :effect (decided ?npc)\n)\n\n(:action clean_shelter ; clean up the area\n    :parameters (?npc - person)\n    :precondition (and (decided ?npc) (not (cleaned ?npc)))\n    :effect (cleaned ?npc)\n)\n\n(:action trim_hair ; trim the hair\n    :parameters (?npc - person)\n    :precondition (and (cleaned ?npc) (not (trimmed ?npc)))\n    :effect (trimmed ?npc)\n)\n\n(:action wet_skin ; wet the skin\n    :parameters (?npc - person)\n    :precondition (and (trimmed ?npc) (not (wet ?npc)))\n    :effect (wet ?npc)\n)\n\n(:action apply_nair ; apply Nair to the skin\n    :parameters (?npc - person ?nair - item)\n    :precondition (and (wet ?npc) (in_hand ?nair) (not (applied ?nair)))\n    :effect (applied ?nair)\n)\n\n(:action gather_time ; allow time for Nair to work\n    :parameters (?npc - person)\n    :precondition (and (applied ?nair) (not (waited ?npc)))\n    :effect (waited ?npc)\n)\n\n(:action in_test_patch ; rinse off Nair in a test patch\n    :parameters (?npc - person)\n    :precondition (and (waited ?npc) (applied ?nair) (not (tested ?npc)))\n    :effect (tested ?npc)\n)\n\n(:action wash_all ; wash off all the Nair\n    :parameters (?npc - person)\n    :precondition (and (tested ?npc) (not (washed ?npc)))\n    :effect (washed ?npc)\n)\n\n(:action wait_for_loot ; wait 24 hours to moisturize skin\n    :parameters (?npc - person)\n    :precondition (and (washed ?npc) (not (moisturized ?npc)))\n    :effect (moisturized ?npc)\n)\n\n(:action maintain_bikini ; maintain the bikini area\n    :parameters (?npc - person)\n    :precondition (and (moisturized ?npc) (not (maintained ?npc)))\n    :effect (maintained ?npc)\n)\n```\n\n### Explanation\n\n- **remove_wailmer**: Represents deciding how much hair to remove. This is a preparatory step.\n- **clean_shelter**: Represents cleaning the area to prepare for hair removal.\n- **trim_hair**: Represents trimming the hair as part of preparation.\n- **wet_skin**: Represents wetting the skin before applying Nair.\n- **apply_nair**: Represents applying Nair to the skin. Preconditions ensure the skin is wet and the Nair is in hand.\n- **gather_time**: Represents allowing time for the Nair to work.\n- **in_test_patch**: Represents rinsing off Nair in a small test area to check the effect.\n- **wash_all**: Represents washing off all the Nair after testing.\n- **wait_for_loot**: Represents waiting for 24 hours to moisturize the skin, ensuring it's safe for further treatment.\n- **maintain_bikini**: Represents maintaining the bikini area, completing the task.\n\nThese actions and their corresponding preconditions and effects capture the logical flow and state changes involved in the task of using Nair for hair removal.",
    "Sure, here's the PDDL actions based on the new task \"How to Remove Butt Hair\":\n\n```lisp\n(define (domain remove_butt_hair)\n  (:requirements :strips :typing)\n  (:types npc laser_removed)\n  \n  ;; Action 1: Use an epilator to pull out the hairs\n  (:action pull_hairs\n    :parameters (?npc - npc)\n    :precondition (and\n                    (has_butt_hair ?npc)\n                    (epilator_available))\n    :effect (and\n              (not (has_butt_hair ?npc))\n              (pulled_hairs ?npc))\n  )\n\n  ;; Action 2: Apply a depilatory cream to get rid of hairs at the surface\n  (:action apply_depilatory_cream\n    :parameters (?npc - npc)\n    :precondition (and\n                    (has_surface_hair ?npc)\n                    (depilatory_cream_available))\n    :effect (and\n              (not (has_surface_hair ?npc))\n              (surface_hair_removed ?npc))\n  )\n\n  ;; Action 3: Trim your butt hair using an electric clipper\n  (:action trim_butt_hair\n    :parameters (?npc - npc)\n    :precondition (and\n                    (has_long_butt_hair ?npc)\n                    (clipper_available))\n    :effect (and\n              (not (has_long_butt_hair ?npc))\n              (butt_hair_trimmed ?npc))\n  )\n\n  ;; Action 4: Consider laser hair removal for a permanent fix\n  (:action remove_lock\n    :parameters (?npc - npc ?laser_removed - laser_removed)\n    :precondition (and\n                    (has_butt_hair ?npc)\n                    (laser_available))\n    :effect (and\n              (not (has_butt_hair ?npc))\n              (permanent_hair_removal ?npc)\n              (laser_removed ?laser_removed))\n  )\n)\n```\n\n### Entity State Transitions:\n- **npc**:\n  - `has_butt_hair` -> `not(has_butt_hair)`\n  - `has_surface_hair` -> `not(has_surface_hair)`\n  - `has_long_butt_hair` -> `not(has_long_butt_hair)`\n  - `butt_hair_trimmed`\n  - `pulled_hairs`\n  - `surface_hair_removed`\n  - `permanent_hair_removal`\n\n- **laser_removed**:\n  - `laser_available` -> `laser_removed`\n\n### Descriptions:\n1. **pull_hairs**: Use an epilator to pull out the hairs.\n2. **apply_depilatory_cream**: Apply a depilatory cream to get rid of hairs at the surface.\n3. **trim_butt_hair**: Trim your butt hair using an electric clipper.\n4. **remove_lock**: Consider laser hair removal for a permanent fix.\n\nThese actions reflect the logical steps and state changes involved in the task of removing butt hair.",
    "Here are the PDDL actions generated for the task \"How to Wash Coconut Oil Out of Hair\" based on the provided steps and descriptions:\n\n---\n\n### PDDL Actions:\n\n#### 1. **Choose Oil**\n```lisp\n(:action choose_oil\n    :parameters (?person - person ?oil - oil)\n    :precondition (and (not (has_chosen_oil ?person)) (is_oil_available ?oil))\n    :effect (and (has_chosen_oil ?person) (oil_selected ?oil))\n)\n```\n- **Explanation**: This action represents the process of choosing an oil (e.g., dry shampoo or powder) to soak up the coconut oil. The precondition ensures the person hasn't already chosen an oil and that the oil is available. The effect updates the state to reflect that the person has chosen the oil and the oil is now selected.\n\n---\n\n#### 2. **Apply Powder to Roots**\n```lisp\n(:action apply_powder_to_roots\n    :parameters (?person - person ?powder - powder)\n    :precondition (and (has_chosen_oil ?person) (oil_selected ?powder) (not (powder_applied ?person)))\n    :effect (and (powder_applied ?person))\n)\n```\n- **Explanation**: This action represents applying the chosen powder (or dry shampoo) to the roots of the person's hair. The precondition ensures the person has chosen an oil (powder) and it has not yet been applied. The effect updates the state to show that the powder has been applied.\n\n---\n\n#### 3. **Comb Through Hair**\n```lisp\n(:action comb_through_hair\n    :parameters (?equipment - comb ?person - person)\n    :precondition (and (powder_applied ?person) (not (oil_removed ?person)) (is_equipment_organized ?equipment))\n    :effect (and (oil_removed ?person))\n)\n```\n- **Explanation**: This action represents combing through the person's hair to distribute the powder and soak up the oil. The precondition ensures the powder has been applied, the oil has not yet been removed, and the comb is organized and ready for use. The effect updates the state to reflect that the oil has been removed.\n\n---\n\n#### 4. **Organize Equipment**\n```lisp\n(:action organize_equipment\n    :parameters (?equipment - equipment)\n    :precondition (and (not (is_equipment_organized ?equipment)))\n    :effect (and (is_equipment_organized ?equipment))\n)\n```\n- **Explanation**: This auxiliary action represents organizing the equipment (e.g., comb) before it can be used effectively. The precondition ensures the equipment is not already organized. The effect updates the state to show the equipment is now organized.\n\n---\n\n### Entity State Transitions:\n\n#### **Entity: My Equipment**\n- **Attribute**: `organization`\n  - **Before**: scattered | laying sporadically\n  - **After**: organized | gathered\n- **Attribute**: `equipment`\n  - **Before**: unorganized\n  - **After**: laid in pattern\n\n#### **Entity: Alice**\n- **Attribute**: `step`\n  - **Before**: unselected\n  - **After**: selected\n- **Attribute**: `choice`\n  - **Before**: nameless\n  - **After**: named\n\n---\n\n### Notes:\n- The action `organize_equipment` is added to address the state transition of the equipment from \"scattered\" to \"organized,\" which is relevant for the task.\n- The action `comb_through_hair` includes a precondition for the equipment to be organized, ensuring logical consistency in the task flow.\n- The entity state transitions for Alice and the equipment are reflected in the preconditions and effects of the actions.\n\n",
    "Based on the provided task and steps, I will generate PDDL actions that reflect the state changes and actions required for \"How to Wax With Honey.\"\n\n### Task: How to Wax With Honey\n\n### Steps:\n1. Wash and dry your skin.\n2. Grow your hair out first.\n3. Plan to wax often in the beginning.\n\n### PDDL Actions:\n\n```lisp\n;; Action 1: Wash and dry your skin\n(:action wash_and_dry_skin\n    :parameters (?p - person ?s - skin)\n    :precondition (and\n      (clean ?p)\n      (dry ?s)\n    )\n    :effect (and\n      (clean ?s)\n      (not (dirty ?s))\n    )\n)\n\n;; Action 2: Grow hair\n(:action grow_hair\n    :parameters (?npc - person)\n    :precondition (and\n      (short_hair ?npc)\n    )\n    :effect (and\n      (long_hair ?npc)\n      (not (short_hair ?npc))\n    )\n)\n\n;; Action 3: Plan to wax\n(:action plan_wax\n    :parameters (?w - wick)\n    :precondition (and\n      (purchased ?w)\n    )\n    :effect (and\n      (planned ?w)\n    )\n)\n```\n\n### Descriptions and Entity State Changes:\n1. **Wash and dry your skin**:\n   - Preconditions: The person is clean and the skin is dry.\n   - Effects: The skin becomes clean and is no longer dirty.\n   \n2. **Grow your hair out first**:\n   - Preconditions: The person has short hair.\n   - Effects: The person grows long hair, and no longer has short hair.\n\n3. **Plan to wax**:\n   - Preconditions: The wick has been purchased.\n   - Effects: The wax is planned for use.\n\nThese actions reflect the steps and state changes required for the task \"How to Wax With Honey\" using the format and structure shown in the example.",
    "Sure, here are the PDDL actions for the task \"How to Get Wax Off a Tablecloth\":\n\n```lisp\n(:action freeze_wax\n    :parameters (?p - player ?wax - wax ?tablecloth - tablecloth ?freezer - freezer)\n    :precondition (and (inventory ?p ?wax) (inventory ?p ?tablecloth) (location ?freezer ?tablecloth))\n    :effect (frozen ?wax)\n)\n\n(:action scrape_wax\n    :parameters (?p - player ?knife - knife ?wax - wax ?tablecloth - tablecloth)\n    :precondition (and (inventory ?p ?knife) (frozen ?wax) (on ?wax ?tablecloth))\n    :effect (and (scraped ?wax) (not (on ?wax ?tablecloth)))\n)\n\n(:action remove_wax_with_heat\n    :parameters (?p - player ?wax - wax ?heat_source - heat_source ?tablecloth - tablecloth)\n    :precondition (and (scraped ?wax) (on ?wax ?tablecloth) (inventory ?p ?heat_source) (power ?heat_source on))\n    :effect (and (removed ?wax) (not (on ?wax ?tablecloth)) (off ?heat_source))\n)\n```\n\n### Explanation of Actions:\n\n1. **freeze_wax**:\n    - **Action Name**: freeze_wax\n    - **Parameters**: `?p` (player), `?wax` (wax), `?tablecloth` (tablecloth), `?freezer` (freezer)\n    - **Preconditions**: The player has the wax and tablecloth in their inventory, and the tablecloth is located in the freezer.\n    - **Effect**: The wax becomes frozen.\n\n2. **scrape_wax**:\n    - **Action Name**: scrape_wax\n    - **Parameters**: `?p` (player), `?knife` (knife), `?wax` (wax), `?tablecloth` (tablecloth)\n    - **Preconditions**: The player has a knife, the wax is frozen, and the wax is on the tablecloth.\n    - **Effect**: The wax is scraped off the tablecloth.\n\n3. **remove_wax_with_heat**:\n    - **Action Name**: remove_wax_with_heat\n    - **Parameters**: `?p` (player), `?wax` (wax), `?heat_source` (heat source), `?tablecloth` (tablecloth)\n    - **Preconditions**: The wax has been scraped, the wax is on the tablecloth, the player has a heat source, and the heat source is powered on.\n    - **Effect**: The wax is removed from the tablecloth, and the heat source is turned off.\n\nEach action reflects the state changes of the entities involved, ensuring that the task steps are accurately captured in the PDDL actions.",
    "Based on the task \"How to Use Veet on Your Bikini Area\" and the given steps, here are the corresponding PDDL actions:\n\n```lisp\n(:action LayOutTowel\n    :parameters (?t - towel)\n    :precondition (not (laid_out ?t))\n    :effect (laid_out ?t)\n)\n\n(:action SitComfortably\n    :parameters (?p - person)\n    :precondition (not (sitting ?p))\n    :effect (sitting ?p)\n)\n\n(:action RubWaxStrip\n    :parameters (?s - strip)\n    :precondition (and (not (warmed ?s)) (intact ?s))\n    :effect (warmed ?s)\n)\n\n(:action PeelStrips\n    :parameters (?s - strip)\n    :precondition (and (intact ?s) (warmed ?s))\n    :effect (and (not (intact ?s)) (peeled ?s))\n)\n\n(:action ApplyStripToSkin\n    :parameters (?s - strip ?p - person)\n    :precondition (peeled ?s)\n    :effect (applied ?s ?p)\n)\n\n(:action RubStripOnSkin\n    :parameters (?s - strip ?p - person)\n    :precondition (applied ?s ?p)\n    :effect (secured ?s ?p)\n)\n\n(:action PullStrip\n    :parameters (?s - strip ?p - person)\n    :precondition (secured ?s ?p)\n    :effect (removed ?s ?p)\n)\n\n(:action GraspEndOfStrip\n    :parameters (?s - strip ?p - person)\n    :precondition (secured ?s ?p)\n    :effect (grasped ?s ?p)\n)\n\n(:action ApplyWaxStrips\n    :parameters (?p - person)\n    :precondition (not (hair_free ?p))\n    :effect (hair_free ?p)\n)\n\n(:action WipeOffExcessWax\n    :parameters (?p - person)\n    :precondition (hair_free ?p)\n    :effect (clean_skin ?p)\n)\n```\n\n### Explanation:\n1. **LayOutTowel**: This action represents laying out a towel.\n   - **Parameters**: `?t - towel`\n   - **Precondition**: The towel is not laid out.\n   - **Effect**: The towel is laid out.\n\n2. **SitComfortably**: This action represents sitting in a comfortable position.\n   - **Parameters**: `?p - person`\n   - **Precondition**: The person is not sitting.\n   - **Effect**: The person is sitting.\n\n3. **RubWaxStrip**: This action represents rubbing a Veet wax strip to warm it up.\n   - **Parameters**: `?s - strip`\n   - **Precondition**: The strip is not warmed and is intact.\n   - **Effect**: The strip is warmed.\n\n4. **PeelStrips**: This action represents peeling the wax strips apart.\n   - **Parameters**: `?s - strip`\n   - **Precondition**: The strip is intact and warmed.\n   - **Effect**: The strip is no longer intact and is peeled.\n\n5. **ApplyStripToSkin**: This action represents applying the strip to the skin.\n   - **Parameters**: `?s - strip, ?p - person`\n   - **Precondition**: The strip is peeled.\n   - **Effect**: The strip is applied to the person.\n\n6. **RubStripOnSkin**: This action represents rubbing the strip on the skin.\n   - **Parameters**: `?s - strip, ?p - person`\n   - **Precondition**: The strip is applied to the person.\n   - **Effect**: The strip is secured on the person.\n\n7. **PullStrip**: This action represents pulling the strip off.\n   - **Parameters**: `?s - strip, ?p - person`\n   - **Precondition**: The strip is secured on the person.\n   - **Effect**: The strip is removed from the person.\n\n8. **GraspEndOfStrip**: This action represents grasping the end of the strip.\n   - **Parameters**: `?s - strip, ?p - person`\n   - **Precondition**: The strip is secured on the person.\n   - **Effect**: The strip is grasped by the person.\n\n9. **ApplyWaxStrips**: This action represents continuing to apply wax strips until the area is hair-free.\n   - **Parameters**: `?p - person`\n   - **Precondition**: The person is not hair-free.\n   - **Effect**: The person is hair-free.\n\n10. **WipeOffExcessWax**: This action represents wiping off the excess wax.\n    - **Parameters**: `?p - person`\n    - **Precondition**: The person is hair-free.\n    - **Effect**: The person's skin is clean.\n\nEach action captures the state changes of the entities involved, ensuring that the preconditions and effects reflect the logical progression of the task steps.",
    "To generate PDDL actions for the task \"How to Remove Hair Using Organic Ganda Beroza,\" we need to focus on the relevant state changes of the entities involved, such as the ganda beroza, water, soap, and the user's skin. Here's a breakdown of each step with corresponding PDDL actions:\n\n### PDDL Actions:\n\n```lisp\n(:action wash_hands\n    :parameters (?p - player ?soap - soap ?water - water)\n    :precondition (and (inventory ?p ?soap) (inventory ?p ?water))\n    :effect (and (clean_hands ?p) (not (inventory ?p ?soap)) (not (inventory ?p ?water)))\n)\n\n(:action take_ganda_beroza\n    :parameters (?p - player ?ganda - ganda)\n    :precondition (inventory ?p ?ganda)\n    :effect (and (holding ?p ?ganda) (not (in_bag ?ganda)))\n)\n\n(:action take_pinch\n    :parameters (?p - player ?ganda - ganda)\n    :precondition (holding ?p ?ganda)\n    :effect (and (pinch_taken ?p ?ganda) (thinner ?ganda))\n)\n\n(:action apply_ganda_beroza\n    :parameters (?p - player ?ganda - ganda)\n    :precondition (and (pinch_taken ?p ?ganda) (clean_hands ?p))\n    :effect (and (applied ?p ?ganda) (thinner ?ganda))\n)\n\n(:action remove_hair\n    :parameters (?p - player ?ganda - ganda)\n    :precondition (applied ?p ?ganda)\n    :effect (and (hair_removed ?p) (clean ?ganda))\n)\n\n(:action clean_skin\n    :parameters (?p - player)\n    :precondition (hair_removed ?p)\n    :effect (clean_skin ?p)\n)\n\n(:action remove_ganda_beroza\n    :parameters (?p - player ?ganda - ganda)\n    :precondition (clean_skin ?p)\n    :effect (and (not (applied ?p ?ganda)) (clean ?ganda))\n)\n\n(:action wash_hands_again\n    :parameters (?p - player ?soap - soap ?water - water)\n    :precondition (and (inventory ?p ?soap) (inventory ?p ?water))\n    :effect (and (clean_hands ?p) (not (inventory ?p ?soap)) (not (inventory ?p ?water)))\n)\n```\n\n### Explanation:\n\n- **wash_hands**: Represents washing hands with soap and water. The action cleans the player's hands and consumes the soap and water.\n- **take_ganda_beroza**: The player takes the ganda beroza from storage, indicating it is no longer in the bag.\n- **take_pinch**: The player takes a pinch of the ganda beroza, making the ganda thinner.\n- **apply_ganda_beroza**: The player applies the ganda beroza to the skin, which requires clean hands and results in the ganda being thinner.\n- **remove_hair**: This action represents the removal of hair after the application of ganda beroza.\n- **clean_skin**: Cleans the skin after hair removal, ensuring the skin is clean.\n- **remove_ganda_beroza**: Removes any residue of ganda beroza from the player's fingers.\n- **wash_hands_again**: The player washes hands again to ensure cleanliness after the procedure.\n\nThese actions capture the essential steps and state transitions involved in using organic ganda beroza for hair removal, focusing on the cleanliness and application process.",
    "Based on the task \"How to Wax\" and the provided steps, I will generate PDDL actions that capture the intent, logic, and entity state changes for each step. \n\n### PDDL Actions\n\n```lisp\n(:action BreakIngrownHairs\n    :parameters (?n - npc)\n    :precondition (not (ingrown_hairs_avoided ?n))\n    :effect (ingrown_hairs_avoided ?n)\n)\n\n(:action UseBabyPowder\n    :parameters (?n - npc)\n    :precondition (not (powder_applied ?n))\n    :effect (powder_applied ?n)\n)\n\n(:action BurnWicks\n    :parameters (?y - person ?w - wick)\n    :precondition (and (not (burned ?w)) (cool ?w))\n    :effect (and (burned ?w) (heated ?w))\n)\n\n(:action WaxHair\n    :parameters (?n - npc)\n    :precondition (and (powder_applied ?n) (hair_long_enough ?n))\n    :effect (waxed ?n)\n)\n\n(:action WaxArea\n    :parameters (?a - area)\n    :precondition (and (selected ?a) (not (waxed ?a)))\n    :effect (waxed ?a)\n)\n```\n\n### Explanation\n\n1. **BreakIngrownHairs**: This action is focused on avoiding ingrown hairs. The state change involves marking that ingrown hairs have been avoided for the NPC.\n\n2. **UseBabyPowder**: The action involves applying baby powder to the NPC. The state change involves marking that powder has been applied.\n\n3. **BurnWicks**: This action involves burning the wick. The precondition checks that the wick is cool and not yet burned. The effect marks the wick as burned and heated.\n\n4. **WaxHair**: This action involves waxing the hair of the NPC. The preconditions ensure that baby powder has been applied and that the hair is long enough. The effect marks the hair as waxed.\n\n5. **WaxArea**: This action involves waxing a specific area. The precondition checks that the area has been selected and not yet waxed. The effect marks the area as waxed.\n\nEach action is designed to reflect the state changes and conditions associated with the task of waxing, following the logic of the provided steps and entity states.",
    "Here are the PDDL actions for the task \"How to Use Wax on Your Hair\":\n\n```lisp\n(:action CombHairWithDryWicks\n    :parameters (?n - npc)\n    :precondition (not (combed ?n))\n    :effect (combed ?n)\n)\n\n(:action WarmWax\n    :parameters (?a - alice)\n    :precondition (and (not (warm ?a)) (step_unselected ?a))\n    :effect (and (warm ?a) (step_selected ?a))\n)\n\n(:action TousleHair\n    :parameters (?t - tousle)\n    :precondition (and (not (tousled ?t)) (fullness_empty ?t))\n    :effect (and (tousled ?t) (fullness_full ?t))\n)\n\n(:action AddVolume\n    :parameters (?p - pc2)\n    :precondition (and (not (volume_added ?p)) (weight_heavier ?p))\n    :effect (and (volume_added ?p) (weight_lighter ?p))\n)\n\n(:action AddTexture\n    :parameters (?w - work_station)\n    :precondition (and (not (textured ?w)) (availability_unmade ?w))\n    :effect (and (textured ?w) (availability_created ?w))\n)\n```\n\n### Explanation:\n- **CombHairWithDryWicks**: Represents starting with dry, combed hair. The precondition checks if the hair is not yet combed, and the effect sets it as combed.\n- **WarmWax**: Represents warming a pea-sized amount of wax. The precondition checks if the wax is not warm and the step is unselected, and the effect changes these states.\n- **TousleHair**: Represents running fingers through hair to tousle it. The precondition checks if the hair is not tousled and fullness is empty, and the effect changes these states.\n- **AddVolume**: Represents applying another pea-sized amount to create additional volume. The precondition checks if volume is not added and weight is heavier, and the effect changes these states.\n- **AddTexture**: Represents using a small amount to add definition and texture. The precondition checks if the texture is not added and the workstation is unmade, and the effect changes these states.",
    "Based on the task \"How to Shave Your Legs Out of Water\" and the provided steps, I will generate PDDL actions that accurately reflect the state changes involved in each step. I'll ensure each action includes relevant parameters, preconditions, and effects.\n\n### PDDL Actions\n\n1. **Action: drink_water**  \n   This step seems irrelevant to the task of shaving legs and does not appear in the description. Therefore, I will omit it from the PDDL actions.\n\n2. **Action: add-stick**  \n   This action involves applying stick deodorant.\n\n   ```pddl\n   (:action add-stick\n      :parameters (?s - stick ?l - legs)\n      :precondition (and (location ?s in_bottle) (not (applied ?s ?l)))\n      :effect (and (location ?s in_drain) (applied ?s ?l))\n   )\n   ```\n\n3. **Action: squirt-lemon**  \n   This action involves squirting water on top of the deodorant.\n\n   ```pddl\n   (:action squirt-lemon\n      :parameters (?w - water ?l - legs)\n      :precondition (and (location ?w in_pipes) (applied deodorant ?l))\n      :effect (location ?w out_of_faucet)\n   )\n   ```\n\n4. **Action: shave_legs**  \n   This action involves shaving the legs.\n\n   ```pddl\n   (:action shave_legs\n      :parameters (?p - person ?t - towel ?l - legs)\n      :precondition (and (location water out_of_faucet) (applied deodorant ?l))\n      :effect (and (clean ?t) (shaved ?l))\n   )\n   ```\n\n5. **Action: dry_legs**  \n   This action involves drying the legs with a towel.\n\n   ```pddl\n   (:action dry_legs\n      :parameters (?p - person ?t - towel ?l - legs)\n      :precondition (and (shaved ?l) (not (wet ?t)))\n      :effect (and (wet ?t) (dry ?l))\n   )\n   ```\n\n6. **Action: make_smooth_legs**  \n   This action involves applying lotion to make the legs smooth.\n\n   ```pddl\n   (:action make_smooth_legs\n      :parameters (?p - person ?l - legs ?lo - lotion)\n      :precondition (and (dry ?l) (location ?lo in_container))\n      :effect (and (smooth ?l) (location ?lo in_bowl))\n   )\n   ```\n\n### Notes:\n- The action `drink_water` was omitted as it does not relate to shaving legs based on the task description.\n- Each action reflects the state changes of the entities involved, such as the application of deodorant, the wetting and drying of legs, and the application of lotion.\n- The entity states are chosen based on the task description, focusing on the location and application status of items like deodorant, water, towel, and lotion.",
    "To generate the PDDL actions for the task \"How to Get Gum Out of Your Hair,\" we need to focus on the relevant state transitions for the entities involved, particularly \"alice\" and \"mixture.\" The task involves freezing the mixture to harden the gum and then chipping it out of the hair. Let's create the PDDL actions accordingly.\n\n### PDDL Actions\n\n```lisp\n;; Action to freeze the mixture\n(:action freeze_mixture\n    :parameters (?m - mixture)\n    :precondition (and\n      (location ?m in_cabinet)\n      (temperature ?m cooler)\n    )\n    :effect (and\n      (temperature ?m colder)\n      (location ?m in_freezer)\n    )\n)\n\n;; Action to harden the gum using the frozen mixture\n(:action make_gum_harden\n    :parameters (?a - person ?m - mixture)\n    :precondition (and\n      (temperature ?m colder)\n      (location ?m in_freezer)\n      (step ?a unselected)\n    )\n    :effect (and\n      (gum_hardened ?a)\n      (step ?a selected)\n    )\n)\n\n;; Action to chip the hardened gum out of hair\n(:action chip_gum_out\n    :parameters (?a - person)\n    :precondition (gum_hardened ?a)\n    :effect (and\n      (gum_removed ?a)\n      (not (gum_hardened ?a))\n    )\n)\n```\n\n### Explanation of Actions\n\n1. **freeze_mixture**: This action involves cooling the mixture by placing it in the freezer to make it colder. The precondition checks if the mixture is in the cabinet and cooler, and the effect updates its location to the freezer and its temperature to colder.\n\n2. **make_gum_harden**: This action uses the frozen mixture to harden the gum in Alice's hair. The precondition ensures the mixture is cold and in the freezer, and Alice's step is unselected. The effect is that the gum becomes hardened, and Alice's step changes to selected.\n\n3. **chip_gum_out**: This action focuses on removing the hardened gum from Alice's hair. The precondition is that the gum must be hardened, and the effect is that the gum is removed, and the hardened state is negated.\n\nThese actions accurately reflect the state changes and logical steps necessary for completing the task of removing gum from hair using a frozen mixture.",
    "To generate PDDL actions for the task \"How to Use Hair Removing Wax,\" I'll focus on the relevant state changes for each entity involved in the steps. Here's how the PDDL actions can be structured based on the task and steps provided:\n\n### PDDL Actions\n\n```lisp\n(:action WarmWicks\n    :parameters (?w - wick)\n    :precondition (not (heated ?w))\n    :effect (heated ?w)\n)\n\n(:action DipInWicks\n    :parameters (?u - user ?w - wick)\n    :precondition (and (heated ?w) (not (dipped ?u ?w)))\n    :effect (dipped ?u ?w)\n)\n\n(:action ApplyFabric\n    :parameters (?n - npc ?s - strip)\n    :precondition (and (dipped ?n ?s) (not (applied ?s)))\n    :effect (applied ?s)\n)\n```\n\n### Explanation\n\n- **WarmWicks**: \n  - **Parameters**: `?w` represents a wick.\n  - **Precondition**: The wick is not heated.\n  - **Effect**: The wick becomes heated.\n\n- **DipInWicks**: \n  - **Parameters**: `?u` represents a user, and `?w` represents a wick.\n  - **Precondition**: The wick is heated, and the user has not yet dipped the applicator in the wick.\n  - **Effect**: The user dips the applicator into the wick.\n\n- **ApplyFabric**: \n  - **Parameters**: `?n` represents an NPC, and `?s` represents a strip.\n  - **Precondition**: The strip has been dipped and not yet applied.\n  - **Effect**: The fabric strip is applied over the wax.\n\nThese actions reflect the sequence of steps needed to use hair removing wax, focusing on the state changes of the wick and strip as they are warmed, dipped, and applied.",
    "Certainly! Based on the task \"How to Apply Hair Wax\" and the provided steps and descriptions, here are the corresponding PDDL actions that capture the state changes of the entities involved:\n\n```lisp\n(:action PurchaseWax\n    :parameters (?a - person ?w - wax)\n    :precondition (not (purchased ?w))\n    :effect (purchased ?w)\n)\n\n(:action AddWicksToHair\n    :parameters (?a - person ?w - wand)\n    :precondition (and (not (on_wreath_base ?w)) (loose ?w))\n    :effect (and (on_wreath_base ?w) (attached ?w))\n)\n\n(:action ApplyWax\n    :parameters (?n - npc ?c - covering_tracks)\n    :precondition (and (not (wax_applied ?n)) (not (fully_clothed ?n)))\n    :effect (and (wax_applied ?n) (fully_clothed ?n))\n)\n\n(:action ScoopWax\n    :parameters (?n - npc)\n    :precondition (not (wax_scooped ?n))\n    :effect (wax_scooped ?n)\n)\n\n(:action RubWicks\n    :parameters (?n - npc)\n    :precondition (not (wax_rubbed ?n))\n    :effect (wax_rubbed ?n)\n)\n\n(:action RestyleWax\n    :parameters (?a - person ?w - wand)\n    :precondition (not (wax_restyled ?a))\n    :effect (wax_restyled ?a)\n)\n\n(:action WashWicks\n    :parameters (?n - npc)\n    :precondition (wax_applied ?n)\n    :effect (not (wax_applied ?n))\n)\n```\n\n### Explanation:\n- **PurchaseWax**: Represents the action of purchasing hair wax. The state change is from not purchased to purchased.\n- **AddWicksToHair**: This action involves attaching wicks (represented by a wand) to the hair, changing the state from loose to attached.\n- **ApplyWax**: Applies wax to the hair while ensuring the person is fully clothed. The state changes involve applying wax and ensuring clothing.\n- **ScoopWax**: Scoops wax using fingers, changing the state to indicate that wax has been scooped.\n- **RubWicks**: Rubbing the wax between fingers, indicating the wax has been rubbed.\n- **RestyleWax**: Allows for restyling the wax, changing the state to indicate restyling has occurred.\n- **WashWicks**: Represents washing the wax out, reverting the wax applied state. \n\nThese actions capture the essence of the task and reflect the state changes of the entities involved.",
    "To generate PDDL actions for the task \"How to Remove Wax from Wool,\" we need to focus on the relevant state transitions for the entities involved, such as the paper bag, wax, and the wool surface. Let's create actions for each step based on the descriptions provided:\n\n### PDDL Actions\n\n#### Action 1: Place Paper Bag\n```lisp\n(:action place_paper_bag\n    :parameters (?p - paperbag ?w - wool ?wax - wax)\n    :precondition (and\n                    (location ?p in_purse)\n                    (location ?wax on_wool)\n                  )\n    :effect (and\n              (location ?p on_wax)\n              (not (location ?p in_purse))\n            )\n)\n```\n\n#### Action 2: Run Iron Over Bag\n```lisp\n(:action run_iron_over_bag\n    :parameters (?p - paperbag ?w - wool ?wax - wax)\n    :precondition (and\n                    (location ?p on_wax)\n                    (heat_setting medium)\n                  )\n    :effect (and\n              (wax_absorbed ?p)\n              (not (location ?wax on_wool))\n            )\n)\n```\n\n#### Action 3: Remove Paper Bag\n```lisp\n(:action remove_paper_bag\n    :parameters (?p - paperbag ?w - wool)\n    :precondition (wax_absorbed ?p)\n    :effect (and\n              (location ?p in_trash)\n              (not (location ?p on_wax))\n            )\n)\n```\n\n#### Action 4: Repeat with Clean Paper Bag\n```lisp\n(:action repeat_with_clean_bag\n    :parameters (?p1 - paperbag ?p2 - paperbag ?w - wool ?wax - wax)\n    :precondition (and\n                    (location ?p1 in_trash)\n                    (location ?wax on_wool)\n                  )\n    :effect (and\n              (location ?p2 on_wax)\n              (not (location ?p2 in_purse))\n            )\n)\n```\n\n### Explanation\n- **Action 1**: Places the paper bag over the wax spill. The state of the paper bag changes from \"in_purse\" to \"on_wax.\"\n- **Action 2**: Runs the iron over the paper bag to absorb the wax. The wax is absorbed by the paper bag, removing it from the wool.\n- **Action 3**: Removes the used paper bag, changing its location to \"in_trash.\"\n- **Action 4**: Repeats the process with a clean paper bag if wax remains on the wool.\n\nThese actions reflect the necessary steps and state transitions to effectively remove wax from wool using paper bags and an iron.",
    "To generate PDDL actions for the task \"How to Wax Your Legs,\" we need to focus on the relevant state changes for the entities involved in each step. Based on the task description, we can identify the key actions and their respective parameters, preconditions, and effects. Here is the PDDL representation for the given task:\n\n```lisp\n(:action SearchForLegWax\n    :parameters (?n - npc ?b - basement)\n    :precondition (and (not (availability ?b present)) (location ?b present))\n    :effect (and (availability ?b present) (location ?b removed))\n)\n\n(:action MakeAppointment\n    :parameters (?n - npc)\n    :precondition (and (not (appointment_made ?n)) (visibility ?n visible))\n    :effect (and (appointment_made ?n) (visibility ?n invisible))\n)\n\n(:action CheckAppointment\n    :parameters (?n - npc)\n    :precondition (and (appointment_made ?n) (not (appointment_checked ?n)))\n    :effect (appointment_checked ?n)\n)\n```\n\n### Explanation:\n\n1. **SearchForLegWax Action:**\n   - **Parameters:** The action involves an NPC (`?n`) and a basement (`?b`).\n   - **Preconditions:** The basement's availability is not present, and its location is present, indicating it hasn't been searched yet.\n   - **Effect:** The availability of leg wax services becomes present, and the basement's location changes to removed, indicating the search is completed.\n\n2. **MakeAppointment Action:**\n   - **Parameters:** This action involves an NPC (`?n`).\n   - **Preconditions:** An appointment hasn't been made yet, and the NPC is visible.\n   - **Effect:** The appointment is made, and the NPC becomes invisible, indicating that the call has been completed.\n\n3. **CheckAppointment Action:**\n   - **Parameters:** This action involves an NPC (`?n`).\n   - **Preconditions:** The appointment has been made, but not yet checked.\n   - **Effect:** The appointment is checked, indicating the NPC has shown up for the appointment.\n\nThese actions capture the logical steps needed to complete the task \"How to Wax Your Legs\" with a focus on the state transitions of the relevant entities."
]