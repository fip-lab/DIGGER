[
    "To generate PDDL actions for the task \"How to Do a Chain Braid,\" we'll focus on the key steps and the relevant state changes for the entities involved. Here's how the task can be translated into PDDL actions:\n\n```pddl\n(:action PartHair\n    :parameters (?n - npc)\n    :precondition (not (parted ?n))\n    :effect (parted ?n)\n)\n\n(:action GrabSmallSection\n    :parameters (?n - npc ?s - section)\n    :precondition (and (parted ?n) (not (selected ?s)))\n    :effect (selected ?s)\n)\n\n(:action DivideSection\n    :parameters (?s - section)\n    :precondition (selected ?s)\n    :effect (divided ?s)\n)\n\n(:action TieStrandsIntoKnot\n    :parameters (?n - npc ?s - section)\n    :precondition (divided ?s)\n    :effect (knotted ?n)\n)\n\n(:action AddHairToStrand\n    :parameters (?n - npc)\n    :precondition (knotted ?n)\n    :effect (reinforced ?n)\n)\n\n(:action TieStrandsAgain\n    :parameters (?n - npc)\n    :precondition (reinforced ?n)\n    :effect (knotted ?n)\n)\n\n(:action TieBraidOff\n    :parameters (?n - npc)\n    :precondition (knotted ?n)\n    :effect (braided ?n)\n)\n\n(:action GatherHair\n    :parameters (?p - pony)\n    :precondition (not (gathered ?p))\n    :effect (gathered ?p)\n)\n\n(:action TwistIntoBun\n    :parameters (?p - pony ?b - bun)\n    :precondition (gathered ?p)\n    :effect (and (bunned ?p) (attached ?b))\n)\n```\n\n### Explanation:\n\n1. **PartHair**: This action represents parting the hair down the center. The state change is from not being parted to parted.\n\n2. **GrabSmallSection**: This action involves grabbing a small section of hair. The section changes from unselected to selected.\n\n3. **DivideSection**: This action divides the selected section into two strands. The state changes to divided.\n\n4. **TieStrandsIntoKnot**: This action ties the strands into a knot. The state changes to knotted.\n\n5. **AddHairToStrand**: This action adds hair to each strand, similar to French braiding, reinforcing the strands.\n\n6. **TieStrandsAgain**: This action ties the strands into another knot, maintaining the knotted state.\n\n7. **TieBraidOff**: This action ties the braid off with an elastic, completing the braid.\n\n8. **GatherHair**: This action gathers the hair into a ponytail or pigtails, changing the state to gathered.\n\n9. **TwistIntoBun**: This action twists the gathered hair into a bun, changing the state to bunned and attached.\n\nThese actions capture the logical sequence and state transitions necessary to perform a chain braid, focusing on the relevant entity changes.",
    "To create PDDL actions for the task \"How to Braid Curly Hair,\" we need to define the relevant entities and their state transitions based on the task description. The task involves gathering hair, pulling more hair from each side, and continuing the braiding process to the end. Here are the PDDL actions:\n\n```lisp\n(:action GatherHair\n    :parameters (?n - npc)\n    :precondition (and (not (braided ?n)) (plain ?n))\n    :effect (and (braided ?n) (not (plain ?n)))\n)\n\n(:action PullHair\n    :parameters (?n - npc ?s - scissors)\n    :precondition (and (braided ?n) (attached ?s))\n    :effect (and (camouflaged ?n) (cut ?s) (not (attached ?s)))\n)\n\n(:action ContinueBraiding\n    :parameters (?n - npc)\n    :precondition (and (camouflaged ?n) (braided ?n))\n    :effect (invisible ?n)\n)\n```\n\n### Explanation:\n- **GatherHair Action:**\n  - **Parameters:** The action involves the non-player character (NPC).\n  - **Preconditions:** The NPC's hair is not yet braided and is plain.\n  - **Effects:** The hair becomes braided, and it is no longer plain.\n\n- **PullHair Action:**\n  - **Parameters:** The action involves both the NPC and the scissors.\n  - **Preconditions:** The NPC's hair is already braided, and the scissors are attached.\n  - **Effects:** The hair becomes camouflaged, the scissors are used to cut, and they are no longer attached.\n\n- **ContinueBraiding Action:**\n  - **Parameters:** The action involves the NPC.\n  - **Preconditions:** The NPC's hair is camouflaged and braided.\n  - **Effects:** The NPC's hair becomes invisible, indicating the completion of the braiding process.\n\nThese actions capture the logical sequence and state changes required to braid curly hair, as described in the task.",
    "To generate PDDL actions for the task \"How to Style Your Braids,\" I'll focus on the relevant entity states and transitions as described in the steps. Here are the PDDL actions for each step:\n\n### PDDL Actions:\n\n```lisp\n(:action dip_braids_in_faucet\n    :parameters (?n - npc)\n    :precondition (and (frizzy_braids ?n) (hot_water_available))\n    :effect (and (set_braids ?n) (not (frizzy_braids ?n)))\n)\n\n(:action re_do_braids\n    :parameters (?n - npc)\n    :precondition (and (braids_around_hairline ?n) (frizzy_braids ?n))\n    :effect (and (neat_braids ?n) (not (frizzy_braids ?n)))\n)\n\n(:action treat_baby_hair\n    :parameters (?n - npc)\n    :precondition (and (unruly_baby_hair ?n) (edge_control_cream_available))\n    :effect (and (tamed_baby_hair ?n) (not (unruly_baby_hair ?n)))\n)\n\n(:action switch_length_and_style_of_braids\n    :parameters (?y - you)\n    :precondition (and (current_style_braids ?y) (desire_new_style ?y))\n    :effect (and (new_style_braids ?y) (not (current_style_braids ?y)))\n)\n\n(:action cover_hair_and_roots\n    :parameters (?n - npc)\n    :precondition (and (unruly_hairlines ?n) (scarf_available))\n    :effect (and (camouflaged_roots ?n) (not (unruly_hairlines ?n)))\n)\n```\n\n### Explanation:\n\n1. **dip_braids_in_faucet**: This action involves setting the braids with hot water, focusing on changing the state from \"frizzy_braids\" to \"set_braids.\"\n\n2. **re_do_braids**: This action re-does the braids around the hairline, changing the state from \"frizzy_braids\" to \"neat_braids.\"\n\n3. **treat_baby_hair**: This action uses edge control cream to tame baby hairs, changing the state from \"unruly_baby_hair\" to \"tamed_baby_hair.\"\n\n4. **switch_length_and_style_of_braids**: This action changes the style of the braids, reflecting a change from \"current_style_braids\" to \"new_style_braids.\"\n\n5. **cover_hair_and_roots**: This action covers unruly hairlines and roots, changing the state from \"unruly_hairlines\" to \"camouflaged_roots.\"\n\nEach action reflects the state changes as part of the preconditions and effects, ensuring that the task's intent is captured accurately.",
    "To generate PDDL actions for the task \"How to Braid Hair,\" we need to focus on the relevant entities and their state transitions as described in the task. Based on the provided steps and descriptions, here are the PDDL actions:\n\n```lisp\n;; Action 1: Learn Dutch braid\n(:action learn_Dutch_braid\n    :parameters (?n - npc)\n    :precondition (and\n                    (not (knows_Dutch_braid ?n))\n                  )\n    :effect (knows_Dutch_braid ?n)\n)\n\n;; Action 2: Treat waterfall braid\n(:action treat_waterfall_braid\n    :parameters (?b - braid ?w - waterfall)\n    :precondition (and\n                    (shape-straight ?b)\n                    (volume-empty ?w)\n                  )\n    :effect (and\n              (shape-twisted-and-folded ?b)\n              (volume-full ?w)\n              (wetness-wetter ?w)\n            )\n)\n\n;; Action 3: Create braided headband\n(:action create_braided_headband\n    :parameters (?n - npc ?b - braid)\n    :precondition (and\n                    (knows_Dutch_braid ?n)\n                    (shape-twisted-and-folded ?b)\n                  )\n    :effect (and\n              (wearing_headband ?n)\n              (visibility-invisible ?n)\n            )\n)\n\n;; Action 4: Make braided braid\n(:action make_braided_braid\n    :parameters (?n - npc ?b - braid)\n    :precondition (and\n                    (knows_Dutch_braid ?n)\n                    (shape-twisted-and-folded ?b)\n                  )\n    :effect (and\n              (braid-done ?b)\n              (decoration-camouflaged ?n)\n            )\n)\n\n;; Action 5: Treat rope braid\n(:action treat_rope_braid\n    :parameters (?n - npc ?b - braid)\n    :precondition (and\n                    (braid-done ?b)\n                    (not (rope-braid ?b))\n                  )\n    :effect (rope-braid ?b)\n)\n```\n\n### Explanation:\n\n- **Action 1 (`learn_Dutch_braid`)**: This action involves the NPC learning how to Dutch braid. The precondition checks if the NPC does not know how to Dutch braid, and the effect is that the NPC gains this knowledge.\n\n- **Action 2 (`treat_waterfall_braid`)**: This action involves treating a braid with a waterfall. The braid must be straight, and the waterfall must be empty. After the action, the braid is twisted and folded, and the waterfall becomes full and wetter.\n\n- **Action 3 (`create_braided_headband`)**: This action involves creating a braided headband. The NPC must know how to Dutch braid, and the braid must be twisted and folded. The effect is that the NPC is now wearing a headband, and their visibility becomes invisible.\n\n- **Action 4 (`make_braided_braid`)**: This action is about making a braided braid. The NPC must know how to Dutch braid, and the braid must be twisted and folded. The effect is that the braid is completed, and the NPC's decoration becomes camouflaged.\n\n- **Action 5 (`treat_rope_braid`)**: This action involves treating a braid to become a rope braid. The braid must be done, and it should not already be a rope braid. The effect is that the braid becomes a rope braid.",
    "Based on the task \"How to Braid Cornrows\" and the provided steps and entity states, here are the PDDL actions:\n\n### PDDL Actions\n\n```lisp\n(:action sliplargerbeads\n    :parameters (?c - cornrows)\n    :precondition (and (location ?c off_strip) (organization ?c random))\n    :effect (and (location ?c on_strip) (organization ?c in_order_on_band))\n)\n\n(:action create_unique_completed\n    :parameters (?c - cornrows)\n    :precondition (and (shape ?c loose) (composition ?c random))\n    :effect (and (shape ?c banded) (composition ?c in_order))\n)\n\n(:action braid_cornrows\n    :parameters (?n - npc)\n    :precondition (and (decoration ?n bare) (visibility ?n visible))\n    :effect (and (decoration ?n camouflaged) (visibility ?n invisible))\n)\n\n(:action choose_cornrows\n    :parameters (?c - cornrows)\n    :precondition (and (shape ?c in_straighter_line) (location ?c off_strip_of_elastic))\n    :effect (and (shape ?c curved) (location ?c on_strip_of_elastic))\n)\n```\n\n### Explanation of Actions:\n\n1. **sliplargerbeads**:\n   - **Parameters**: Cornrows that are being prepared.\n   - **Preconditions**: Cornrows are currently off the strip and organized randomly.\n   - **Effects**: Cornrows are placed on the strip and organized in order on a band.\n\n2. **create_unique_completed**:\n   - **Parameters**: Cornrows to be uniquely styled.\n   - **Preconditions**: Cornrows are loose and compositionally random.\n   - **Effects**: Cornrows are banded and compositionally ordered.\n\n3. **braid_cornrows**:\n   - **Parameters**: NPC (Non-Playable Character) involved in braiding.\n   - **Preconditions**: NPC is bare and visible.\n   - **Effects**: NPC becomes camouflaged and invisible, suggesting a transformation or completion of the braiding process.\n\n4. **choose_cornrows**:\n   - **Parameters**: Cornrows selected for styling.\n   - **Preconditions**: Cornrows are in a straighter line and off the strip of elastic.\n   - **Effects**: Cornrows are curved and placed on the strip of elastic, indicating a new style choice.",
    "Here are the PDDL actions for the task \"How to Braid Wire Rope\":\n\n```lisp\n;; Action 1: Braid the wire\n(:action braiding_with_wire\n    :parameters (?n - npc)\n    :precondition (and\n                    (decoration ?n bare)\n                    (visibility ?n visible)\n                  )\n    :effect (and\n              (decoration ?n camouflaged)\n              (visibility ?n invisible)\n            )\n)\n\n;; Action 2: Separate the strands\n(:action separate_weave\n    :parameters (?n - npc)\n    :precondition (and\n                    (decoration ?n camouflaged)\n                  )\n    :effect (and\n              (decoration ?n bare)\n            )\n)\n\n;; Action 3: Pull the strands correctly\n(:action pull_twice\n    :parameters (?n - npc)\n    :precondition (and\n                    (decoration ?n bare)\n                  )\n    :effect (and\n              (decoration ?n camouflaged)\n            )\n)\n\n;; Action 4: Secure the loose ends\n(:action secure_ends\n    :parameters (?e - ends)\n    :precondition (and\n                    (organization ?e separate)\n                    (form ?e bare)\n                  )\n    :effect (and\n              (organization ?e touching)\n              (form ?e joined-together)\n            )\n)\n```\n\n### Explanation:\n\n1. **braiding_with_wire**: This action represents the initial step of braiding the wire strands. It changes the decoration state of the `npc` from `bare` to `camouflaged` and the visibility from `visible` to `invisible`.\n\n2. **separate_weave**: This action involves separating the wire strands, changing the decoration state of the `npc` from `camouflaged` back to `bare`.\n\n3. **pull_twice**: This action focuses on pulling the strands correctly, changing the decoration state of the `npc` from `bare` to `camouflaged`.\n\n4. **secure_ends**: This action secures the loose ends, changing the organization state of `ends` from `separate` to `touching` and the form from `bare` to `joined together`.",
    "Below are the PDDL actions for the task \"How to Side Braid Hair,\" based on the provided steps and entity states:\n\n### PDDL Actions\n\n```lisp\n(:action sweep_all_of_hair\n    :parameters (?n - npc)\n    :precondition (and (hair_position ?n not_swept) (side ?n not_specified))\n    :effect (and (hair_position ?n swept_to_one_side) (side ?n specified))\n)\n\n(:action part_of_hair\n    :parameters (?n - npc)\n    :precondition (and (hair_position ?n swept_to_one_side) (hair_sections ?n not_partitioned))\n    :effect (and (hair_sections ?n partitioned_into_two))\n)\n\n(:action start_braid\n    :parameters (?n - npc)\n    :precondition (and (hair_sections ?n partitioned_into_two) (braid_state ?n not_started))\n    :effect (and (braid_state ?n in_progress))\n)\n\n(:action secure_with_hair_elastic\n    :parameters (?e - elastic ?n - npc)\n    :precondition (and (braid_state ?n in_progress) (elastic_location ?e on_counter))\n    :effect (and (braid_state ?n completed) (elastic_location ?e in_hair))\n)\n```\n\n### Explanation\n\n1. **sweep_all_of_hair**: This action involves sweeping all the hair to one side. The precondition checks if the hair is not already swept and the side is not specified. The effect is that the hair is now swept to one side, and the side is specified.\n\n2. **part_of_hair**: This action parts the hair into two sections. The precondition is that the hair must be swept to one side and not yet partitioned. The effect is that the hair is now partitioned into two sections.\n\n3. **start_braid**: This action starts the braiding process. The precondition is that the hair must be partitioned into two sections and the braid not yet started. The effect is that the braid is in progress.\n\n4. **secure_with_hair_elastic**: This action secures the braid with a hair elastic. The precondition checks if the braid is in progress and the elastic is on the counter. The effect is that the braid is completed and the elastic is now in the hair.",
    "Based on the task \"How to Plait\" and the provided steps, here's how the PDDL actions can be structured:\n\n### Task: How to Plait\n\n#### PDDL Actions:\n\n```lisp\n(:action StartWithSmoothTangleFreeHair\n    :parameters (?h - hair)\n    :precondition (not (smooth ?h))\n    :effect (smooth ?h)\n)\n\n(:action SeparateHair\n    :parameters (?n - npc)\n    :precondition (and (smooth ?n) (not (separated ?n)))\n    :effect (separated ?n)\n)\n\n(:action PlaitAsNormal\n    :parameters (?n - npc)\n    :precondition (and (separated ?n) (not (plaited ?n)))\n    :effect (plaited ?n)\n)\n\n(:action SecureBraid\n    :parameters (?n - npc)\n    :precondition (and (plaited ?n) (not (secured ?n)))\n    :effect (secured ?n)\n)\n```\n\n### Explanation:\n\n1. **StartWithSmoothTangleFreeHair**:\n   - **Parameters**: `?h` represents the hair.\n   - **Preconditions**: The hair must not be smooth.\n   - **Effects**: The hair becomes smooth.\n\n2. **SeparateHair**:\n   - **Parameters**: `?n` represents the npc whose hair is being plaited.\n   - **Preconditions**: The hair must be smooth and not yet separated.\n   - **Effects**: The hair becomes separated.\n\n3. **PlaitAsNormal**:\n   - **Parameters**: `?n` represents the npc.\n   - **Preconditions**: The hair must be separated and not yet plaited.\n   - **Effects**: The hair becomes plaited.\n\n4. **SecureBraid**:\n   - **Parameters**: `?n` represents the npc.\n   - **Preconditions**: The hair must be plaited and not yet secured.\n   - **Effects**: The braid is secured over the head.\n\nThese actions capture the logical sequence and state transitions necessary to complete the task of plaiting hair. Each action reflects a specific step in the process, with clear preconditions and effects that transition the state of the hair and the npc.",
    "To generate PDDL actions for the task \"How to Do a Basic Hair Braid,\" I'll focus on the relevant state changes for each step, using the provided entity states as a guide. Here are the PDDL actions:\n\n```pddl\n(:action part_of_hair\n    :parameters (?n - npc)\n    :precondition (and (visible ?n) (plain ?n))\n    :effect (and (parted ?n) (not (plain ?n)))\n)\n\n(:action gather_hair\n    :parameters (?n - npc)\n    :precondition (and (parted ?n) (plain ?n))\n    :effect (and (gathered ?n) (not (plain ?n)))\n)\n\n(:action divide_chunk\n    :parameters (?n - npc ?b - basement)\n    :precondition (and (gathered ?n) (absent ?b))\n    :effect (and (divided ?n) (present ?b) (not (absent ?b)))\n)\n\n(:action start_braid\n    :parameters (?n - npc)\n    :precondition (and (divided ?n) (carelessly_placed ?n))\n    :effect (and (braiding_started ?n) (carefully_placed ?n) (not (carelessly_placed ?n)))\n)\n\n(:action add_hair_to_section\n    :parameters (?n - npc ?s - section)\n    :precondition (and (braiding_started ?n) (unselected ?s))\n    :effect (and (hair_added ?n ?s) (selected ?s) (not (unselected ?s)))\n)\n\n(:action cross_hairline\n    :parameters (?s - section)\n    :precondition (and (selected ?s) (unselected ?s))\n    :effect (and (crossed ?s) (selected ?s) (not (unselected ?s)))\n)\n\n(:action add_hair_to_sliplargerbeads\n    :parameters (?n - npc)\n    :precondition (and (crossed ?s) (plain ?n))\n    :effect (and (hair_added_to_slip ?n) (not (plain ?n)))\n)\n\n(:action cross_panel\n    :parameters (?p - panel)\n    :precondition (and (unadjusted ?p) (unselected ?p))\n    :effect (and (adjusted ?p) (selected ?p) (not (unadjusted ?p)) (not (unselected ?p)))\n)\n\n(:action cross_over_crosses\n    :parameters (?n - npc)\n    :precondition (and (adjusted ?p) (carefully_placed ?n))\n    :effect (and (crossed_over ?n) (not (carefully_placed ?n)))\n)\n\n(:action end_braid\n    :parameters (?b - braid)\n    :precondition (and (crossed_over ?n) (straight ?b))\n    :effect (and (twisted_and_folded ?b) (not (straight ?b)))\n)\n\n(:action stop_braiding\n    :parameters (?n - npc)\n    :precondition (and (twisted_and_folded ?b) (visible ?n))\n    :effect (and (braiding_stopped ?n) (invisible ?n) (not (visible ?n)))\n)\n\n(:action attach_completed_braid\n    :parameters (?n - npc)\n    :precondition (and (braiding_stopped ?n) (plain ?n))\n    :effect (and (decorated ?n) (not (plain ?n)))\n)\n```\n\nThese actions capture the key steps in creating a basic hair braid, focusing on the relevant state changes for each step. Adjustments have been made to ensure that each action logically follows from the previous one, and the entity states are updated accordingly.",
    "To create PDDL actions for the task \"How to Make a Fishtail Braid,\" I'll translate each step into a PDDL action, focusing on the relevant state changes for each entity involved. Let's define the actions:\n\n### PDDL Actions\n\n```lisp\n(:action make_side_braid\n    :parameters (?f - fish_tail)\n    :precondition (and (orientation ?f bare) (orientation ?f open))\n    :effect (and (orientation ?f adorned) (orientation ?f closed))\n)\n\n(:action make_topsy_turvy\n    :parameters (?p - ponytail)\n    :precondition (and (orientation ?p bare) (orientation ?p open))\n    :effect (and (orientation ?p adorned) (orientation ?p closed))\n)\n\n(:action cover_with_clip\n    :parameters (?a - alice)\n    :precondition (and (step ?a unselected) (choice ?a nameless))\n    :effect (and (step ?a selected) (choice ?a named))\n)\n\n(:action roll_bun\n    :parameters (?n - npc)\n    :precondition (and (decoration ?n bare) (visibility ?n visible))\n    :effect (and (decoration ?n camouflaged) (visibility ?n invisible))\n)\n\n(:action add_color_completed_braiding\n    :parameters (?m - my_hair ?e - extensions)\n    :precondition (and (location ?m on_ground) (organization ?e scattered))\n    :effect (and (location ?m in_air) (organization ?e bundled))\n)\n```\n\n### Explanation of Actions\n\n1. **make_side_braid**: This action captures the process of creating a fishtail braid by changing its orientation from \"bare\" and \"open\" to \"adorned\" and \"closed.\"\n\n2. **make_topsy_turvy**: This action represents the initial step of making a topsy-turvy ponytail, changing its orientation from \"bare\" and \"open\" to \"adorned\" and \"closed.\"\n\n3. **cover_with_clip**: This action involves using a clip or barrette to cover the hair tie, changing the state of \"alice\" from \"unselected\" and \"nameless\" to \"selected\" and \"named.\"\n\n4. **roll_bun**: This action rolls the braid into a bun, changing the decoration of \"npc\" from \"bare\" to \"camouflaged\" and making it \"invisible.\"\n\n5. **add_color_completed_braiding**: This action involves adding colored hair extensions before braiding, changing the state of \"my_hair\" from \"on_ground\" to \"in_air\" and organizing \"extensions\" from \"scattered\" to \"bundled.\"\n\nThese actions reflect the state changes described in the task and ensure that each step is accurately captured in the PDDL format.",
    "To generate PDDL actions for the task \"How to Braid Leather,\" we need to focus on the relevant state changes for each step. The task involves creating items using braided leather, and we will adjust the steps and state transitions accordingly.\n\n### PDDL Actions:\n\n```lisp\n(:action FashionBraidedLeather\n    :parameters (?l - leather)\n    :precondition (and (not (braided ?l)) (whole ?l))\n    :effect (and (braided ?l) (not (whole ?l)))\n)\n\n(:action MakeCompletedNecklace\n    :parameters (?n - necklace)\n    :precondition (and (not (completed ?n)) (camouflaged ?n))\n    :effect (completed ?n)\n)\n\n(:action UseAsLeatherRing\n    :parameters (?l - leather)\n    :precondition (and (braided ?l) (not (used_as_ring ?l)))\n    :effect (used_as_ring ?l)\n)\n```\n\n### Explanation:\n\n1. **FashionBraidedLeather**\n   - **Parameters**: Takes a piece of leather (`?l`).\n   - **Preconditions**: The leather is not yet braided and is whole.\n   - **Effects**: The leather becomes braided, and it is no longer whole.\n\n2. **MakeCompletedNecklace**\n   - **Parameters**: Involves a necklace (`?n`).\n   - **Preconditions**: The necklace is camouflaged but not completed.\n   - **Effects**: The necklace becomes completed.\n\n3. **UseAsLeatherRing**\n   - **Parameters**: Uses a piece of leather (`?l`).\n   - **Preconditions**: The leather is braided and not yet used as a ring.\n   - **Effects**: The leather is now used as a ring.\n\nThese actions capture the essence of the task by focusing on the relevant state changes, such as transitioning from whole to braided, and from uncompleted to completed. The steps have been modified to align with a logical crafting process involving leather.",
    "To generate PDDL actions for the task \"How to Make a Clothesline to Use Without Hangers,\" we need to identify the key actions and the state transitions of entities involved. Here is a breakdown of the task into PDDL actions:\n\n### PDDL Actions\n\n1. **Action: find-smallest-tubing**\n\n   ```lisp\n   (:action find-smallest-tubing\n       :parameters (?npc - person)\n       :precondition (not (has-tubing ?npc))\n       :effect (has-tubing ?npc)\n   )\n   ```\n\n2. **Action: loop-bands**\n\n   ```lisp\n   (:action loop-bands\n       :parameters (?npc - person)\n       :precondition (and\n                       (has-tubing ?npc)\n                       (not (bands-looped ?npc))\n                     )\n       :effect (bands-looped ?npc)\n   )\n   ```\n\n3. **Action: divide-length**\n\n   ```lisp\n   (:action divide-length\n       :parameters (?npc - person)\n       :precondition (and\n                       (bands-looped ?npc)\n                       (not (length-divided ?npc))\n                     )\n       :effect (length-divided ?npc)\n   )\n   ```\n\n4. **Action: slip-larger-beads**\n\n   ```lisp\n   (:action slip-larger-beads\n       :parameters (?npc - person)\n       :precondition (and\n                       (length-divided ?npc)\n                       (not (beads-slipped ?npc))\n                     )\n       :effect (beads-slipped ?npc)\n   )\n   ```\n\n5. **Action: bend-to-shape-twice**\n\n   ```lisp\n   (:action bend-to-shape-twice\n       :parameters (?npc - person)\n       :precondition (and\n                       (beads-slipped ?npc)\n                       (not (shape-bent ?npc))\n                     )\n       :effect (shape-bent ?npc)\n   )\n   ```\n\n6. **Action: put-hook**\n\n   ```lisp\n   (:action put-hook\n       :parameters (?npc - person)\n       :precondition (and\n                       (shape-bent ?npc)\n                       (not (hook-placed ?npc))\n                     )\n       :effect (hook-placed ?npc)\n   )\n   ```\n\n7. **Action: loop-ends**\n\n   ```lisp\n   (:action loop-ends\n       :parameters (?ends - ends)\n       :precondition (and\n                       (not (ends-looped ?ends))\n                     )\n       :effect (ends-looped ?ends)\n   )\n   ```\n\n8. **Action: hang-on-rack**\n\n   ```lisp\n   (:action hang-on-rack\n       :parameters (?npc - person)\n       :precondition (and\n                       (hook-placed ?npc)\n                       (ends-looped ends)\n                       (not (clothesline-hung ?npc))\n                     )\n       :effect (clothesline-hung ?npc)\n   )\n   ```\n\n### Explanation\n\n- **find-smallest-tubing**: The person finds the smallest tubing, which is a prerequisite for further steps.\n- **loop-bands**: The person loops the bands together, preparing the tubing for use.\n- **divide-length**: The person divides the tubing into the required lengths.\n- **slip-larger-beads**: The person slips larger beads along the tubing, preparing it for use.\n- **bend-to-shape-twice**: The person bends the tubing into shape, making it ready for hanging.\n- **put-hook**: The person places hooks on the tubing, allowing it to be hung.\n- **loop-ends**: The ends of the tubing are looped around fixtures, completing the setup.\n- **hang-on-rack**: The clothesline is hung on a rack, completing the task.\n\nThis sequence captures the transformation of the tubing and the setup of the clothesline. Each action reflects a change in the state of the entities involved, ensuring the task is completed successfully.",
    "To generate PDDL actions for the task \"How to Do Different Braids,\" we'll focus on the relevant entity states and actions that reflect the changes described. Given the task, the main entity states we will consider are the types of braids being created and their arrangement.\n\nHere are the PDDL actions based on the task and steps provided:\n\n```pddl\n(:action wrap_milkmaid_braids\n    :parameters (?p - player ?braids - braids)\n    :precondition (and (inventory ?p ?braids) (type ?braids regular))\n    :effect (wrapped ?braids milkmaid)\n)\n\n(:action create_box_braids\n    :parameters (?p - player ?hair - hair)\n    :precondition (and (inventory ?p ?hair) (natural ?hair))\n    :effect (and (braided ?hair box) (not (natural ?hair)))\n)\n\n(:action create_cornrows\n    :parameters (?p - player ?hair - hair)\n    :precondition (and (inventory ?p ?hair) (natural ?hair))\n    :effect (and (braided ?hair cornrows) (not (natural ?hair)))\n)\n\n(:action wrap_braided_crown\n    :parameters (?p - player ?braids - braids)\n    :precondition (and (inventory ?p ?braids) (type ?braids dutch))\n    :effect (wrapped ?braids crown)\n)\n\n(:action create_upside_down_braid\n    :parameters (?p - player ?hair - hair)\n    :precondition (and (inventory ?p ?hair) (natural ?hair))\n    :effect (and (braided ?hair upside_down) (not (natural ?hair)))\n)\n```\n\n### Explanation:\n1. **wrap_milkmaid_braids**: This action wraps regular braids around the head to form milkmaid braids. Preconditions ensure the player has regular braids, and the effect is that the braids are now wrapped as milkmaid braids.\n\n2. **create_box_braids**: This action transforms natural hair into box braids. The precondition checks for natural hair, and the effect is that the hair is now in box braids.\n\n3. **create_cornrows**: Similar to box braids, this action creates cornrows from natural hair. The precondition checks for natural hair, and the effect is that the hair is now cornrowed.\n\n4. **wrap_braided_crown**: This action wraps Dutch braids around the head to form a braided crown. Preconditions ensure the player has Dutch braids, and the effect is that the braids are wrapped as a crown.\n\n5. **create_upside_down_braid**: This action creates an upside-down braid from natural hair. The precondition checks for natural hair, and the effect is that the hair is now braided upside-down.\n\nThese actions capture the essence of creating and styling different types of braids, focusing on the transformation and arrangement of hair as described in the task.",
    "Based on the task \"How to Braid Your Own Hair\" and the provided steps, here are the PDDL actions capturing the entity state transitions:\n\n```lisp\n(:action brush_with_hair\n    :parameters (?p - person)\n    :precondition (and (hair_state ?p tangled))\n    :effect (and (hair_state ?p smooth))\n  )\n\n(:action part_of_hair\n    :parameters (?p - person)\n    :precondition (and (hair_state ?p smooth) (hair_section ?p unpartitioned))\n    :effect (and (hair_section ?p partitioned))\n  )\n\n(:action start_braid\n    :parameters (?p - person)\n    :precondition (and (hair_section ?p partitioned) (braid_state ?p not_started))\n    :effect (and (braid_state ?p started))\n  )\n\n(:action make_sliplargerbeads\n    :parameters (?p - person)\n    :precondition (and (braid_state ?p started) (braid_shape ?p straight))\n    :effect (and (braid_shape ?p twisted))\n  )\n\n(:action braiding_with_hair\n    :parameters (?e - equipment)\n    :precondition (and (equipment_state ?e unorganized))\n    :effect (and (equipment_state ?e organized))\n  )\n\n(:action secure_braid\n    :parameters (?b - braid)\n    :precondition (and (braid_shape ?b twisted))\n    :effect (and (braid_shape ?b secured))\n  )\n```\n\n### Explanation:\n\n1. **brush_with_hair**: This action represents brushing the hair to make it smooth.\n   - **Precondition**: Hair must be tangled.\n   - **Effect**: Hair becomes smooth.\n\n2. **part_of_hair**: This action represents parting the hair into sections.\n   - **Precondition**: Hair must be smooth and unpartitioned.\n   - **Effect**: Hair is partitioned into sections.\n\n3. **start_braid**: This action initiates the braiding process.\n   - **Precondition**: Hair must be partitioned, and the braid not started.\n   - **Effect**: Braid is started.\n\n4. **make_sliplargerbeads**: This action represents the process of twisting the braid.\n   - **Precondition**: Braid must be started and initially straight.\n   - **Effect**: Braid becomes twisted.\n\n5. **braiding_with_hair**: This action organizes the equipment needed for braiding.\n   - **Precondition**: Equipment must be unorganized.\n   - **Effect**: Equipment becomes organized.\n\n6. **secure_braid**: This action secures the braid at the end with a hair elastic.\n   - **Precondition**: Braid must already be twisted.\n   - **Effect**: Braid becomes secured.\n\nThese actions capture the logical flow and state changes involved in the task of braiding hair."
]