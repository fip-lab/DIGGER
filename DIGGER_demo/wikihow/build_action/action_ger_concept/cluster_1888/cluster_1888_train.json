[
    "Based on the provided task and steps, here are the corresponding PDDL actions:\n\n### PDDL Actions:\n\n1. **Action: wait**\n   ```lisp\n   (:action wait\n      :parameters (?p - npc)\n      :precondition (and (at ?p outdoor))\n      :effect (waiting ?p)\n   )\n   ```\n\n2. **Action: place_in_sunlight**\n   ```lisp\n   (:action place_in_sunlight\n      :parameters (?p - npc ?object - heat ?l - location)\n      :precondition (and (at ?p ?l) (inventory ?p ?object) (is_metal_surface ?object) (sunny ?l))\n      :effect (and (not (inventory ?p ?object)) (heating ?object))\n   )\n   ```\n\n3. **Action: crack_egg**\n   ```lisp\n   (:action crack_egg\n      :parameters (?p - npc ?egg - egg ?surface - heat)\n      :precondition (and (at ?p outdoor) (inventory ?p ?egg) (heating ?surface))\n      :effect (and (not (inventory ?p ?egg)) (cracked ?egg) (on_surface ?egg ?surface))\n   )\n   ```\n\n4. **Action: crack_egg_on_sidewalk**\n   ```lisp\n   (:action crack_egg_on_sidewalk\n      :parameters (?p - npc ?egg - egg ?l - location)\n      :precondition (and (at ?p ?l) (inventory ?p ?egg) (is_sidewalk ?l))\n      :effect (and (not (inventory ?p ?egg)) (cracked ?egg) (on_sidewalk ?egg ?l))\n   )\n   ```\n\n5. **Action: discard_eggs**\n   ```lisp\n   (:action discard_eggs\n      :parameters (?p - npc ?egg1 - egg ?egg2 - egg ?l - location)\n      :precondition (and (at ?p ?l) (cracked ?egg1) (cracked ?egg2))\n      :effect (and (not (on_surface ?egg1 ?l)) (not (on_sidewalk ?egg2 ?l)) (discarded ?egg1) (discarded ?egg2))\n   )\n   ```\n\n### Descriptions of Actions:\n\n- **wait**: The NPC waits for a very hot day to ensure the surface gets hot enough to fry an egg.\n- **place_in_sunlight**: The NPC places a tin foil or metal pan in direct sunlight to heat up.\n- **crack_egg**: The NPC cracks an egg onto the heated metal surface.\n- **crack_egg_on_sidewalk**: The NPC cracks another egg directly onto the sidewalk.\n- **discard_eggs**: The NPC discards the eggs after the experiment.\n\n### Entity State Transitions:\n\n- **heat**:\n  - **attribute**: temperature\n  - **before**: cold\n  - **after**: hot\n\n- **npc**:\n  - **attribute**: visibility\n  - **before**: visible\n  - **after**: visible\n\nThese actions accurately reflect the state changes and conditions required to perform the task of frying an egg on the sidewalk.",
    "Based on the provided task and steps, I will generate the PDDL actions for making crispy vegetable spring rolls. Here are the PDDL actions:\n\n```lisp\n(define (domain crispy_vegetable_spring_rolls)\n  (:requirements :strips :typing)\n  (:types ingredient container location object)\n\n  (:predicates\n    (at ?x - object ?loc - location)\n    (in ?x - ingredient ?y - container)\n    (cooked ?x - ingredient)\n    (mixed ?x - container)\n    (wrapped ?x - ingredient)\n    (fried ?x - ingredient)\n    (served ?x - ingredient)\n  )\n\n  ;; Action 1: Cook the vegetables\n  (:action cook_vegetables\n    :parameters (?npc - agent ?kitchen - location)\n    :precondition (at ?npc ?kitchen)\n    :effect (cooked vegetables)\n  )\n\n  ;; Action 2: Add the wet ingredients\n  (:action add_wet_ingredients\n    :parameters (?wet_ingredients - ingredient ?bowl - container)\n    :precondition (and\n      (cooked vegetables)\n      (at ?wet_ingredients ?bowl)\n    )\n    :effect (mixed ?bowl)\n  )\n\n  ;; Action 3: Make the spring rolls\n  (:action make_spring_rolls\n    :parameters (?velveeta - ingredient ?bowl - container)\n    :precondition (and\n      (mixed ?bowl)\n      (at ?velveeta ?bowl)\n    )\n    :effect (wrapped ?velveeta)\n  )\n\n  ;; Action 4: Lift the wrapper over the top and tuck it in under the filling\n  (:action lift_and_tuck_wrapper\n    :parameters (?npc - agent ?wrapper - ingredient)\n    :precondition (wrapped ?wrapper)\n    :effect (wrapped ?wrapper)\n  )\n\n  ;; Action 5: Repeat until all the rolls are finished\n  (:action repeat_rolls\n    :parameters (?npc - agent ?rolling_board - container)\n    :precondition (at ?npc ?rolling_board)\n    :effect (wrapped all_rolls)\n  )\n\n  ;; Action 6: Fry the egg rolls\n  (:action fry_egg_rolls\n    :parameters (?egg_rolls - ingredient ?mixing_bowl - container)\n    :precondition (wrapped all_rolls)\n    :effect (fried ?egg_rolls)\n  )\n\n  ;; Action 7: Serve\n  (:action serve\n    :parameters (?npc - agent ?kitchen - location)\n    :precondition (and\n      (fried egg_rolls)\n      (at ?npc ?kitchen)\n    )\n    :effect (served ?egg_rolls)\n  )\n)\n```\n\nEach action reflects the steps in making crispy vegetable spring rolls, focusing on the relevant entity state changes such as cooking, mixing, wrapping, frying, and serving.",
    "Certainly! Below are the PDDL actions for the task \"How to Make an Egg Wash\" based on the provided steps and descriptions.\n\n```lisp\n(define (domain egg_wash)\n  (:requirements :strips :typing)\n  (:types ingredient container location object)\n  \n  ;; Action 1: Brush the egg wash over your bread\n  (:action brush_and_flatten_bread\n    :parameters (?bread - ingredient ?brush - object ?table - location)\n    :precondition (and\n      (at ?bread ?table)\n      (at ?brush ?table)\n    )\n    :effect (and\n      (flattened ?bread)\n      (brushed ?bread)\n    )\n  )\n\n  ;; Action 2: Spread egg wash over the bottom of an unbaked pie crust\n  (:action spread_egg_wash\n    :parameters (?egg_wash - ingredient ?pie_crust - ingredient ?table - location)\n    :precondition (and\n      (at ?egg_wash ?table)\n      (at ?pie_crust ?table)\n      (not (baked ?pie_crust))\n    )\n    :effect (and\n      (spread ?egg_wash ?pie_crust)\n    )\n  )\n\n  ;; Action 3: Seal the edges of pastry with egg wash\n  (:action seal_edges\n    :parameters (?egg_wash - ingredient ?pastry - ingredient ?table - location)\n    :precondition (and\n      (at ?egg_wash ?table)\n      (at ?pastry ?table)\n    )\n    :effect (and\n      (sealed ?pastry)\n    )\n  )\n\n  ;; Action 4: Cover the top of the baked goods\n  (:action cover_baked_items\n    :parameters (?egg_wash - ingredient ?baked_goods - ingredient ?table - location)\n    :precondition (and\n      (at ?egg_wash ?table)\n      (at ?baked_goods ?table)\n      (baked ?baked_goods)\n    )\n    :effect (and\n      (covered ?baked_goods)\n    )\n  )\n\n  ;; Action 5: Use the egg wash to secure seeds, sugar, or pastry\n  (:action secure_seeds\n    :parameters (?egg_wash - ingredient ?seeds - ingredient ?item - ingredient ?table - location)\n    :precondition (and\n      (at ?egg_wash ?table)\n      (at ?seeds ?table)\n      (at ?item ?table)\n    )\n    :effect (and\n      (secured ?seeds ?item)\n    )\n  )\n)\n```\n\n### Explanation of Actions:\n\n1. **brush_and_flatten_bread**\n   - **Parameters:** `?bread` (ingredient), `?brush` (object), `?table` (location)\n   - **Preconditions:** The bread and brush are at the table.\n   - **Effects:** The bread is flattened and brushed.\n\n2. **spread_egg_wash**\n   - **Parameters:** `?egg_wash` (ingredient), `?pie_crust` (ingredient), `?table` (location)\n   - **Preconditions:** The egg wash and pie crust are at the table, and the pie crust is not baked.\n   - **Effects:** The egg wash is spread over the pie crust.\n\n3. **seal_edges**\n   - **Parameters:** `?egg_wash` (ingredient), `?pastry` (ingredient), `?table` (location)\n   - **Preconditions:** The egg wash and pastry are at the table.\n   - **Effects:** The pastry edges are sealed with egg wash.\n\n4. **cover_baked_items**\n   - **Parameters:** `?egg_wash` (ingredient), `?baked_goods` (ingredient), `?table` (location)\n   - **Preconditions:** The egg wash and baked goods are at the table, and the baked goods are baked.\n   - **Effects:** The baked goods are covered with egg wash.\n\n5. **secure_seeds**\n   - **Parameters:** `?egg_wash` (ingredient), `?seeds` (ingredient), `?item` (ingredient), `?table` (location)\n   - **Preconditions:** The egg wash, seeds, and item are at the table.\n   - **Effects:** The seeds are secured on the item with egg wash.\n\nThese actions capture the state changes of the entities involved in making an egg wash and applying it to various items.",
    "Here are the PDDL actions for the task \"How to Make Egg Strips\":\n\n```pddl\n(:action place_ingredients ; place eggs into mixing bowl\n    :parameters (?eggs - eggs-in-bowl ?bowl - mixing_bowl ?p - npc)\n    :precondition (and (inventory ?p ?eggs) (empty ?bowl))\n    :effect (and (not (inventory ?p ?eggs)) (in_bowl ?eggs ?bowl))\n)\n\n(:action add_ingredients_into_glass ; add milk into mixing bowl\n    :parameters (?milk - milk ?bowl - mixing_bowl ?p - npc)\n    :precondition (and (inventory ?p ?milk) (in_bowl ?eggs ?bowl))\n    :effect (and (not (inventory ?p ?milk)) (in_bowl ?milk ?bowl))\n)\n\n(:action light_beat_with_oven ; lightly beat the eggs\n    :parameters (?bowl - mixing_bowl ?p - npc)\n    :precondition (and (in_bowl ?eggs ?bowl) (in_bowl ?milk ?bowl))\n    :effect (and (beaten ?eggs ?bowl))\n)\n\n(:action pour_into_frying_pan ; pour mixture into frying pan with oil\n    :parameters (?mixture - mixture ?oil - oil ?bowl - mixing_bowl ?pan - frying_pan ?p - npc)\n    :precondition (and (beaten ?eggs ?bowl) (in_bowl ?milk ?bowl) (in_bowl ?mixture ?bowl) (inventory ?p ?oil) (empty ?pan))\n    :effect (and (not (inventory ?p ?oil)) (in_pan ?mixture ?pan) (oiled ?pan))\n)\n\n(:action turn_off_oven ; turn off the oven\n    :parameters (?p - npc)\n    :precondition (and (oven_on))\n    :effect (and (not (oven_on)) (oven_off))\n)\n\n(:action roll_oven ; roll the cooled egg into a cylinder\n    :parameters (?p - npc ?egg - egg_strip)\n    :precondition (and (cool ?egg))\n    :effect (and (rolled ?egg))\n)\n\n(:action cut_cylinder ; cut the egg cylinder into strips\n    :parameters (?p - npc ?egg - egg_strip)\n    :precondition (and (rolled ?egg))\n    :effect (and (cut ?egg))\n)\n\n(:action put_ingredients_in_dish ; put egg strips into dish\n    :parameters (?egg - egg_strip ?dish - velveeta ?p - npc)\n    :precondition (and (cut ?egg))\n    :effect (and (in_dish ?egg ?dish))\n)\n```\n\nThese actions capture the steps and state changes necessary for making egg strips as described in the task. Each action has specific preconditions and effects that reflect the changes in the state of the entities involved.",
    "Here are the PDDL actions for the task \"How to Make Indian Potato Bread Rolls\" based on the provided steps:\n\n```lisp\n;; Action 1: Peel and boil potatoes\n(:action peel_potatoes\n    :parameters (?potato - ingredient ?stove - appliance)\n    :precondition (and\n      (at ?potato kitchen_counter)\n      (at ?stove kitchen_stove)\n      (clean ?potato)\n    )\n    :effect (and\n      (peeled ?potato)\n      (cooked ?potato)\n    )\n)\n\n;; Action 2: Pour oil into the pan\n(:action pour_oil_into_pan\n    :parameters (?oil - ingredient ?pan - utensil ?stove - appliance)\n    :precondition (and\n      (at ?oil pantry)\n      (at ?pan kitchen_counter)\n      (at ?stove kitchen_stove)\n      (clean ?pan)\n    )\n    :effect (and\n      (in_pan ?oil ?pan)\n      (dirty ?pan)\n    )\n)\n\n;; Action 3: Remove from heat\n(:action remove_from_heat\n    :parameters (?stove - appliance)\n    :precondition (and\n      (at ?stove kitchen_stove)\n      (heated ?stove)\n    )\n    :effect (and\n      (not (heated ?stove))\n      (off ?stove)\n    )\n)\n\n;; Action 4: Shape mixture into ball shapes\n(:action shape_into_ball_shape\n    :parameters (?mixture - ingredient)\n    :precondition (and\n      (at ?mixture kitchen_counter)\n      (mixed ?mixture)\n    )\n    :effect (and\n      (shaped ?mixture)\n      (ball_shape ?mixture)\n    )\n)\n\n;; Action 5: Cut edges off bread slices\n(:action cut_bread_slices\n    :parameters (?bread - ingredient ?knife - utensil)\n    :precondition (and\n      (at ?bread kitchen_counter)\n      (at ?knife kitchen_counter)\n      (clean ?knife)\n    )\n    :effect (and\n      (cut ?bread)\n      (dirty ?knife)\n    )\n)\n\n;; Action 6: Wrap bread around the potato mixture\n(:action wrap_bread\n    :parameters (?bread - ingredient ?mixture - ingredient)\n    :precondition (and\n      (at ?bread kitchen_counter)\n      (at ?mixture kitchen_counter)\n      (cut ?bread)\n      (shaped ?mixture)\n    )\n    :effect (and\n      (wrapped ?bread ?mixture)\n    )\n)\n\n;; Action 7: Deep fry the potato rolls\n(:action deep_fry\n    :parameters (?potato - ingredient ?pan - utensil ?oil - ingredient)\n    :precondition (and\n      (wrapped ?potato)\n      (at ?pan kitchen_stove)\n      (in_pan ?oil ?pan)\n      (heated ?stove)\n    )\n    :effect (and\n      (fried ?potato)\n      (dirty ?pan)\n    )\n)\n\n;; Action 8: Serve the potato rolls with sauce\n(:action serve_potato_rolls\n    :parameters (?potato_rolls - dish ?sauce - ingredient)\n    :precondition (and\n      (fried ?potato_rolls)\n      (at ?sauce kitchen_counter)\n    )\n    :effect (and\n      (in_dish ?potato_rolls ?sauce)\n      (not (fried ?potato_rolls))\n    )\n)\n```\n\nThese actions reflect the steps and the state changes involved in making Indian Potato Bread Rolls. Each action includes parameters, preconditions, and effects to accurately capture the state transitions of the entities involved.",
    "Here are the PDDL actions based on the provided task and steps for making egg rolls:\n\n```lisp\n(:action place-in-container\n    :parameters (?wrap - wrap ?container - container)\n    :precondition (and (at ?wrap flat_surface) (clean ?wrap))\n    :effect (and (in ?wrap ?container) (not (at ?wrap flat_surface)))\n)\n\n(:action put_ingredients_in_container\n    :parameters (?bowl - mixing_bowl ?table - table)\n    :precondition (and (at ?bowl ?table) (empty ?bowl))\n    :effect (and (filled ?bowl) (not (empty ?bowl)))\n)\n\n(:action fold-and-roll-wrapped\n    :parameters (?wrap - wrap ?towel - towel)\n    :precondition (and (in ?wrap ?container) (clean ?towel))\n    :effect (and (rolled ?wrap) (dirty ?towel))\n)\n\n(:action heat_peanut_oil\n    :parameters (?npc - person)\n    :precondition (and (not (oil_heated ?npc)))\n    :effect (oil_heated ?npc)\n)\n\n(:action cook\n    :parameters (?npc - person ?egg_roll - egg_roll)\n    :precondition (and (oil_heated ?npc) (not (cooked ?egg_roll)))\n    :effect (cooked ?egg_roll)\n)\n\n(:action drain_cooked\n    :parameters (?egg_roll - egg_roll ?npc - person)\n    :precondition (and (cooked ?egg_roll) (not (drained ?egg_roll)))\n    :effect (drained ?egg_roll)\n)\n\n(:action be_amazed\n    :parameters (?npc - person)\n    :precondition (and (cooked ?egg_roll) (drained ?egg_roll) (not (amazed ?npc)))\n    :effect (amazed ?npc)\n)\n```\n\n### Explanation of PDDL Actions:\n\n1. **place-in-container**:\n   - **Parameters**: `?wrap` (wrap), `?container` (container)\n   - **Precondition**: The wrap is on a flat surface and is clean.\n   - **Effect**: The wrap is placed in the container and is no longer on the flat surface.\n\n2. **put_ingredients_in_container**:\n   - **Parameters**: `?bowl` (mixing bowl), `?table` (table)\n   - **Precondition**: The mixing bowl is on the table and is empty.\n   - **Effect**: The mixing bowl is filled with ingredients.\n\n3. **fold-and-roll-wrapped**:\n   - **Parameters**: `?wrap` (wrap), `?towel` (towel)\n   - **Precondition**: The wrap is in the container and the towel is clean.\n   - **Effect**: The wrap is folded and rolled, and the towel becomes dirty.\n\n4. **heat_peanut_oil**:\n   - **Parameters**: `?npc` (person)\n   - **Precondition**: The oil is not yet heated.\n   - **Effect**: The oil is heated.\n\n5. **cook**:\n   - **Parameters**: `?npc` (person), `?egg_roll` (egg roll)\n   - **Precondition**: The oil is heated and the egg roll is not yet cooked.\n   - **Effect**: The egg roll is cooked.\n\n6. **drain_cooked**:\n   - **Parameters**: `?egg_roll` (egg roll), `?npc` (person)\n   - **Precondition**: The egg roll is cooked and not yet drained.\n   - **Effect**: The egg roll is drained.\n\n7. **be_amazed**:\n   - **Parameters**: `?npc` (person)\n   - **Precondition**: The egg roll is cooked and drained, and the person is not yet amazed.\n   - **Effect**: The person is amazed.\n\nThese actions capture the steps and the state changes involved in making egg rolls, ensuring that each action reflects the necessary preconditions and effects.",
    "Sure, let's generate the PDDL actions based on the given task and steps for \"How to Fry an Egg\".\n\n### PDDL Actions\n\n#### Action 1: Fry Egg\n```lisp\n(:action fry_egg\n    :parameters (?egg - ingredient ?pan - tool ?stove - appliance ?oil - ingredient ?loc - location)\n    :precondition (and\n      (at ?egg ?loc)\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n      (has ?pan ?oil)\n      (clean ?pan)\n    )\n    :effect (and\n      (fried ?egg)\n      (heated ?pan)\n      (sizzling ?egg)\n      (not (clean ?pan))\n      (in-pan ?egg ?pan)\n      (not (at ?egg ?loc))\n    )\n)\n```\n\n#### Action 2: Flip Egg\n```lisp\n(:action flip_egg\n    :parameters (?egg - ingredient ?pan - tool)\n    :precondition (and\n      (in-pan ?egg ?pan)\n      (heated ?pan)\n    )\n    :effect (and\n      (flipped ?egg)\n      (not (sizzling ?egg))\n    )\n)\n```\n\n#### Action 3: Serve Egg with Toast\n```lisp\n(:action serve_egg_with_toast\n    :parameters (?egg - ingredient ?toast - ingredient ?plate - dish ?loc - location)\n    :precondition (and\n      (fried ?egg)\n      (at ?toast ?loc)\n      (at-dish ?plate ?loc)\n    )\n    :effect (and\n      (on-plate ?egg ?plate)\n      (on-plate ?toast ?plate)\n      (not (at ?toast ?loc))\n    )\n)\n```\n\n#### Action 4: Serve Egg Over Leftovers\n```lisp\n(:action serve_egg_over_leftovers\n    :parameters (?egg - ingredient ?leftovers - ingredient ?plate - dish ?loc - location)\n    :precondition (and\n      (fried ?egg)\n      (at ?leftovers ?loc)\n      (at-dish ?plate ?loc)\n    )\n    :effect (and\n      (on-plate ?egg ?plate)\n      (on-plate ?leftovers ?plate)\n      (not (at ?leftovers ?loc))\n    )\n)\n```\n\n#### Action 5: Place Fried Egg in Fridge\n```lisp\n(:action place_in_fridge\n    :parameters (?egg - ingredient ?fridge - appliance ?loc - location)\n    :precondition (and\n      (fried ?egg)\n      (at-appliance ?fridge ?loc)\n    )\n    :effect (and\n      (in-fridge ?egg ?fridge)\n      (not (at ?egg ?loc))\n    )\n)\n```\n\n#### Action 6: Make Huevos Rancheros\n```lisp\n(:action make_huevos_rancheros\n    :parameters (?alice - person ?egg - ingredient ?sauce - ingredient ?tortilla - ingredient ?plate - dish ?loc - location)\n    :precondition (and\n      (fried ?egg)\n      (at ?sauce ?loc)\n      (at ?tortilla ?loc)\n      (at-dish ?plate ?loc)\n      (at ?alice ?loc)\n    )\n    :effect (and\n      (on-plate ?egg ?plate)\n      (on-plate ?sauce ?plate)\n      (on-plate ?tortilla ?plate)\n      (not (at ?sauce ?loc))\n      (not (at ?tortilla ?loc))\n      (meal-prepared ?alice)\n    )\n)\n```\n\nThese actions capture the essence of frying an egg and the various ways it can be served or used in meals. The preconditions ensure that the necessary items and conditions are met before performing each action, and the effects reflect the changes in the state of the entities involved.",
    "Certainly! Here are the PDDL actions for the task \"How to Make Sunny Side Down Eggs\":\n\n```lisp\n(:action put-ingredients-in-oven\n    :parameters (?s - stove_knob ?v - velveeta)\n    :precondition (and (at ?v in_fridge) (off ?s))\n    :effect (and (at ?v on_counter) (on ?s) (not (at ?v in_fridge)) (not (off ?s)))\n)\n\n(:action set-burner-add-oil\n    :parameters (?s - stove_knob ?v - velveeta)\n    :precondition (and (at ?v on_counter) (on ?s))\n    :effect (and (melted ?v) (hot ?s) (not (solid ?v)) (not (cool ?s)))\n)\n\n(:action crack-egg\n    :parameters (?e - egg ?p - pan)\n    :precondition (and (at ?e in_container) (hot ?p))\n    :effect (and (at ?e in_pan) (not (at ?e in_container)))\n)\n\n(:action turn-off-stove\n    :parameters (?s - stove_knob)\n    :precondition (on ?s)\n    :effect (and (off ?s) (cooling ?p) (not (on ?s)))\n)\n\n(:action flip-egg\n    :parameters (?e - egg)\n    :precondition (and (at ?e in_pan) (white ?e))\n    :effect (and (flipped ?e) (not (white ?e)))\n)\n\n(:action flip-egg-again\n    :parameters (?e - egg)\n    :precondition (flipped ?e)\n    :effect (and (double-flipped ?e) (not (flipped ?e)))\n)\n\n(:action sweep-yolk\n    :parameters (?n - npc ?k - kitchen)\n    :precondition (and (messy ?k) (at ?n kitchen))\n    :effect (and (clean ?k) (not (messy ?k)))\n)\n```\n\n**Descriptions and State Changes:**\n\n1. **put-ingredients-in-oven**:\n   - Parameters: `stove_knob`, `velveeta`\n   - Preconditions: `velveeta` is in the fridge, `stove_knob` is off.\n   - Effects: `velveeta` is on the counter, `stove_knob` is on.\n\n2. **set-burner-add-oil**:\n   - Parameters: `stove_knob`, `velveeta`\n   - Preconditions: `velveeta` is on the counter, `stove_knob` is on.\n   - Effects: `velveeta` is melted, `stove_knob` is hot.\n\n3. **crack-egg**:\n   - Parameters: `egg`, `pan`\n   - Preconditions: `egg` is in the container, `pan` is hot.\n   - Effects: `egg` is in the pan.\n\n4. **turn-off-stove**:\n   - Parameters: `stove_knob`\n   - Preconditions: `stove_knob` is on.\n   - Effects: `stove_knob` is off, `pan` is cooling.\n\n5. **flip-egg**:\n   - Parameters: `egg`\n   - Preconditions: `egg` is in the pan, `egg` whites are white.\n   - Effects: `egg` is flipped.\n\n6. **flip-egg-again**:\n   - Parameters: `egg`\n   - Preconditions: `egg` is flipped.\n   - Effects: `egg` is double-flipped.\n\n7. **sweep-yolk**:\n   - Parameters: `npc`, `kitchen`\n   - Preconditions: `kitchen` is messy, `npc` is in the kitchen.\n   - Effects: `kitchen` is clean.\n\nThese actions capture the necessary steps and state changes involved in making sunny side down eggs, ensuring that each state transition is accurately reflected in the preconditions and effects."
]