[
    "Based on the task \"How to Climb Buildings,\" here are the PDDL actions that capture the intent, logic, and changes in the entity state of each step:\n\n### PDDL Actions for \"How to Climb Buildings\"\n\n1. **identify_building**\n   ```pddl\n   (:action identify_building\n      :parameters (?npc - npc ?b - building)\n      :precondition (and (at ?npc ?b) (not (identified ?b)))\n      :effect (and (identified ?b))\n   )\n   ```\n\n2. **check_holds**\n   ```pddl\n   (:action check_holds\n      :parameters (?p - person ?w - wood ?r - rock)\n      :precondition (and (at ?p ?w) (at ?p ?r) (not (checked ?w)) (not (checked ?r)))\n      :effect (and (checked ?w) (checked ?r) (supported ?p))\n   )\n   ```\n\n3. **find_good_start_point**\n   ```pddl\n   (:action find_good_start_point\n      :parameters (?npc - npc ?b - building)\n      :precondition (and (at ?npc ?b) (identified ?b))\n      :effect (and (found_start_point ?npc ?b))\n   )\n   ```\n\n4. **be_amazed**\n   ```pddl\n   (:action be_amazed\n      :parameters (?npc - npc)\n      :precondition (and (supported ?npc))\n      :effect (and (amazed ?npc))\n   )\n   ```\n\n5. **stay_safe**\n   ```pddl\n   (:action stay_safe\n      :parameters (?npc - npc ?b - building)\n      :precondition (and (at ?npc ?b) (found_start_point ?npc ?b))\n      :effect (and (safe ?npc))\n   )\n   ```\n\n### Descriptions of PDDL Actions:\n\n1. **identify_building**:\n    - **Parameters**: `?npc` (the character identifying the building), `?b` (the building to be identified).\n    - **Preconditions**: The NPC is at the building, and the building is not yet identified.\n    - **Effect**: The building becomes identified.\n\n2. **check_holds**:\n    - **Parameters**: `?p` (the person checking the holds), `?w` (wood holds), `?r` (rock holds).\n    - **Preconditions**: The person is at the location of the wood and rock holds, and the holds have not been checked.\n    - **Effect**: The holds are checked, and the person is supported by the holds.\n\n3. **find_good_start_point**:\n    - **Parameters**: `?npc` (the character finding the start point), `?b` (the building to be climbed).\n    - **Preconditions**: The NPC is at the building, and the building has been identified.\n    - **Effect**: A good starting point is found for the NPC at the building.\n\n4. **be_amazed**:\n    - **Parameters**: `?npc` (the character being amazed).\n    - **Preconditions**: The NPC is supported by the holds.\n    - **Effect**: The NPC becomes amazed.\n\n5. **stay_safe**:\n    - **Parameters**: `?npc` (the character staying safe), `?b` (the building where safety is ensured).\n    - **Preconditions**: The NPC is at the building, and a good starting point has been found.\n    - **Effect**: The NPC stays safe while climbing the building.\n\nThese actions reflect the steps involved in climbing buildings, focusing on the state changes of the entities involved, such as identifying the building, checking holds, finding a starting point, and ensuring safety.",
    "Certainly! Here are the PDDL actions for the task \"How to Lead Climb Indoors\":\n\n```pddl\n(:action check_gym_policy ; check with the local climbing gym about their lead climbing policy\n    :parameters (?a - agent ?g - climbing_gear)\n    :precondition (and (not (informed ?a ?g)))\n    :effect (informed ?a ?g)\n)\n\n(:action pay_fee ; pay a small fee for the class and/or certification test\n    :parameters (?n - npc)\n    :precondition (and (not (paid ?n)))\n    :effect (paid ?n)\n)\n\n(:action attach_quickdraws ; gyms have quickdraws permanently attached to the walls\n    :parameters (?g - gyms)\n    :precondition (and (not (attached ?g quickdraws)))\n    :effect (attached ?g quickdraws)\n)\n\n(:action check_harness ; check that your harness is properly buckled\n    :parameters (?n - npc)\n    :precondition (and (not (checked ?n harness)))\n    :effect (checked ?n harness)\n)\n\n(:action prepare_belay ; ensure that your partner is ready to belay you\n    :parameters (?y - you)\n    :precondition (and (not (ready ?y belay)))\n    :effect (ready ?y belay)\n)\n\n(:action examine_route ; examine the route before you start climbing\n    :parameters (?n - npc)\n    :precondition (and (not (examined ?n route)))\n    :effect (examined ?n route)\n)\n\n(:action get_go_ahead ; tell your partner that you're about to start climbing, and wait for the go-ahead\n    :parameters (?n - npc ?r - rock_surface)\n    :precondition (and (not (go_ahead ?n ?r)))\n    :effect (go_ahead ?n ?r)\n)\n\n(:action clip_rope ; grasp the climbing rope near your harness and clip it through the first quickdraw\n    :parameters (?n - npc)\n    :precondition (and (not (clipped ?n rope)))\n    :effect (clipped ?n rope)\n)\n\n(:action continue_climbing ; continue climbing and clipping into each protection point as you go\n    :parameters (?n - npc ?f - footpath)\n    :precondition (and (clipped ?n rope) (not (reached_top ?n ?f)))\n    :effect (reached_top ?n ?f)\n)\n```\n\nEach action captures the intent and steps involved in the task \"How to Lead Climb Indoors,\" along with the relevant state changes before and after each action.",
    "Based on the task \"How to Build a Home Rock Climbing Wall\" and the steps provided, here are the PDDL actions:\n\n```pddl\n(:action choose_wall\n    :parameters (?npc - npc ?wall - wall)\n    :precondition (and (at ?npc basement) (choice ?wall unchosen))\n    :effect (and (choice ?wall chosen))\n)\n\n(:action plan_walls\n    :parameters (?walls - walls)\n    :precondition (and (location ?walls down))\n    :effect (and (location ?walls up))\n)\n\n(:action check_walls\n    :parameters (?npc - npc ?loc - basement)\n    :precondition (and (at ?npc ?loc) (availability ?loc absent))\n    :effect (and (availability ?loc present))\n)\n\n(:action build_wall\n    :parameters (?npc - npc ?wall - wall ?loc - basement)\n    :precondition (and (at ?npc ?loc) (location ?wall down))\n    :effect (and (location ?wall up))\n)\n\n(:action finish_painting\n    :parameters (?wall_surface - wall_surface)\n    :precondition (and (location ?wall_surface bare))\n    :effect (and (location ?wall_surface decorated))\n)\n\n(:action listen_to_broadcast\n    :parameters (?npc - npc)\n    :precondition (and (at ?npc basement))\n    :effect (and (knowledge ?npc increased))\n)\n\n(:action build_rucksack\n    :parameters (?npc - npc ?loc - basement)\n    :precondition (and (at ?npc ?loc))\n    :effect (and (has_rucksack ?npc))\n)\n```\n\n### Explanation of PDDL Actions:\n\n1. **choose_wall**\n   - **Parameters:** `?npc` (the player), `?wall` (the wall to be chosen)\n   - **Preconditions:** The player is at the basement, and the wall is unchosen.\n   - **Effect:** The wall is now chosen.\n\n2. **plan_walls**\n   - **Parameters:** `?walls` (the walls to be planned)\n   - **Preconditions:** The walls are in the down position.\n   - **Effect:** The walls are now in the up position.\n\n3. **check_walls**\n   - **Parameters:** `?npc` (the player), `?loc` (the basement)\n   - **Preconditions:** The player is at the basement, and the basement is absent.\n   - **Effect:** The basement is now present.\n\n4. **build_wall**\n   - **Parameters:** `?npc` (the player), `?wall` (the wall to be built), `?loc` (the basement)\n   - **Preconditions:** The player is at the basement, and the wall is down.\n   - **Effect:** The wall is now up.\n\n5. **finish_painting**\n   - **Parameters:** `?wall_surface` (the wall surface to be painted)\n   - **Preconditions:** The wall surface is bare.\n   - **Effect:** The wall surface is now decorated.\n\n6. **listen_to_broadcast**\n   - **Parameters:** `?npc` (the player)\n   - **Preconditions:** The player is at the basement.\n   - **Effect:** The player's knowledge is increased.\n\n7. **build_rucksack**\n   - **Parameters:** `?npc` (the player), `?loc` (the basement)\n   - **Preconditions:** The player is at the basement.\n   - **Effect:** The player now has a rucksack.\n\nThese actions capture the state transitions and the logical steps involved in building a home rock climbing wall.",
    "Certainly! Here are the PDDL actions for the task \"How to Belay\" based on the provided steps and descriptions:\n\n```lisp\n(:action get_hanger\n    :parameters (?npc - npc ?loc - location ?hanger - hanger)\n    :precondition (and (at ?npc ?loc) (at ?hanger ?loc))\n    :effect (and (inventory ?npc ?hanger) (not (at ?hanger ?loc)))\n)\n\n(:action put_hanger_on_equipment\n    :parameters (?npc - npc ?passenger - passenger1 ?bike - bike1 ?hanger - hanger)\n    :precondition (and (inventory ?npc ?hanger) (at ?passenger ?bike))\n    :effect (and (attached ?hanger ?bike) (not (inventory ?npc ?hanger)))\n)\n\n(:action lock_carabiner\n    :parameters (?velveeta - velveeta ?carabiner - carabiner)\n    :precondition (and (at ?velveeta ?carabiner) (not (locked ?carabiner)))\n    :effect (and (locked ?carabiner))\n)\n\n(:action get_good_cluster_shoes\n    :parameters (?you - you ?loc - location ?shoes - climbing_shoes)\n    :precondition (and (at ?you ?loc) (at ?shoes ?loc))\n    :effect (and (inventory ?you ?shoes) (not (at ?shoes ?loc)))\n)\n\n(:action cluster_chalk\n    :parameters (?alice - alice ?loc - location ?chalk - climbing_chalk)\n    :precondition (and (at ?alice ?loc) (at ?chalk ?loc))\n    :effect (and (inventory ?alice ?chalk) (not (at ?chalk ?loc)))\n)\n```\n\nHere, each action reflects the specific steps involved in the \"How to Belay\" task. The preconditions ensure that the necessary conditions are met before the action can be executed, and the effects specify the changes in the state of the entities involved.",
    "Based on the task \"How to Climb a Mountain\" and the steps provided, I will generate PDDL actions that capture the intent, logic, and state changes for each step. Here are the PDDL actions:\n\n```pddl\n(:action get_info ; npc gathers information about covering tracks and the track\n    :parameters (?npc - npc ?covering_tracks - covering_tracks ?track - track)\n    :precondition (and (not (informed ?npc ?covering_tracks)) (not (informed ?npc ?track)))\n    :effect (and (informed ?npc ?covering_tracks) (informed ?npc ?track))\n)\n\n(:action assess_mental_strength ; you assess your mental strength\n    :parameters (?you - you)\n    :precondition (not (assessed_mental_strength ?you))\n    :effect (assessed_mental_strength ?you)\n)\n\n(:action get_fit ; you get physically fit\n    :parameters (?you - you)\n    :precondition (not (fit ?you))\n    :effect (fit ?you)\n)\n\n(:action acquire_gear ; you acquire the necessary gear\n    :parameters (?you - you ?gear - gear)\n    :precondition (and (not (has_gear ?you)) (available ?gear))\n    :effect (and (has_gear ?you) (not (available ?gear)))\n)\n\n(:action learn_mountaineering_ethics ; you learn mountaineering ethics\n    :parameters (?you - you ?ethics - ethics)\n    :precondition (not (knows_ethics ?you))\n    :effect (knows_ethics ?you)\n)\n\n(:action train_new_member ; npc trains a new member\n    :parameters (?npc - npc ?new_member - npc)\n    :precondition (not (trained ?new_member))\n    :effect (trained ?new_member)\n)\n\n(:action plan_first_cluster ; you plan your first climb\n    :parameters (?you - you ?footpath - footpath)\n    :precondition (and (fit ?you) (knows_ethics ?you) (has_gear ?you))\n    :effect (planned ?you ?footpath)\n)\n\n(:action teach_new_member_skill ; you teach a new skill to the new member\n    :parameters (?you - you ?new_member - npc)\n    :precondition (and (trained ?new_member) (knows_ethics ?you))\n    :effect (knows_skill ?new_member)\n)\n\n(:action find_good_guidestick ; npc finds a good guide stick\n    :parameters (?npc - npc ?guidestick - gear)\n    :precondition (and (not (has_guidestick ?npc)) (available ?guidestick))\n    :effect (and (has_guidestick ?npc) (not (available ?guidestick)))\n)\n\n(:action prepare_for_vacation ; npc prepares for the trip\n    :parameters (?npc - npc)\n    :precondition (not (prepared ?npc))\n    :effect (prepared ?npc)\n)\n\n(:action understand_arrival ; npc understands what's involved on arrival at the mountain\n    :parameters (?npc - npc)\n    :precondition (and (prepared ?npc) (informed ?npc))\n    :effect (understands ?npc)\n)\n\n(:action start_climb ; npc starts climbing\n    :parameters (?npc - npc ?footpath - footpath)\n    :precondition (and (understands ?npc) (planned ?npc ?footpath))\n    :effect (climbing ?npc)\n)\n\n(:action descend_safely ; npc descends with plenty of time to get back safely\n    :parameters (?npc - npc)\n    :precondition (climbing ?npc)\n    :effect (and (not (climbing ?npc)) (safe ?npc))\n)\n```\n\nEach action reflects the state changes of the relevant entities, ensuring that the preconditions and effects accurately capture the transitions necessary for the task \"How to Climb a Mountain.\"",
    "Sure, here are the PDDL actions for the task \"How to Rock Climb\":\n\n```pddl\n(:action keep_motion_close_wall\n    :parameters (?p - player)\n    :precondition (and (at ?p wall) (not (hips_close_to_wall ?p)))\n    :effect (and (hips_close_to_wall ?p))\n)\n\n(:action loot_handbrakes\n    :parameters (?npc - npc)\n    :precondition (and (at ?npc rock_surface) (not (has_handbrakes ?npc)))\n    :effect (and (has_handbrakes ?npc))\n)\n\n(:action find_dead_point\n    :parameters (?p1 - player ?p2 - player ?p3 - player)\n    :precondition (and (at ?p1 wall) (at ?p2 wall) (at ?p3 wall) (not (dead_point_found ?p1 ?p2 ?p3)))\n    :effect (and (dead_point_found ?p1 ?p2 ?p3))\n)\n\n(:action climb_with_rhythm\n    :parameters (?p - player)\n    :precondition (and (at ?p wall) (not (climbing_with_rhythm ?p)))\n    :effect (and (climbing_with_rhythm ?p))\n)\n\n(:action climb_path\n    :parameters (?npc - npc ?path - path)\n    :precondition (and (at ?npc base) (not (path_climbed ?npc ?path)))\n    :effect (and (path_climbed ?npc ?path))\n)\n\n(:action climb_pistol\n    :parameters (?npc - npc)\n    :precondition (and (at ?npc base) (not (pistol_climbed ?npc)))\n    :effect (and (pistol_climbed ?npc))\n)\n\n(:action learn_new_member_secret\n    :parameters (?npc - npc ?rock_surface - rock_surface)\n    :precondition (and (at ?npc ?rock_surface) (not (secret_learned ?npc ?rock_surface)))\n    :effect (and (secret_learned ?npc ?rock_surface))\n)\n```\n\n### Descriptions and Relevant State Changes:\n1. **keep_motion_close_wall**:\n   - **Description**: Keep your hips close to the wall.\n   - **State Changes**: The player's hips are now close to the wall.\n2. **loot_handbrakes**:\n   - **Description**: Relax your grip.\n   - **State Changes**: The NPC now has handbrakes.\n3. **find_dead_point**:\n   - **Description**: Find your \"dead point\" when making big moves on the wall.\n   - **State Changes**: The dead point is found by the players.\n4. **climb_with_rhythm**:\n   - **Description**: Climb with rhythm.\n   - **State Changes**: The player is now climbing with rhythm.\n5. **climb_path**:\n   - **Description**: Climb down a few routes.\n   - **State Changes**: The NPC has climbed the path.\n6. **climb_pistol**:\n   - **Description**: Increase your climbing pace while staying deliberate in your movements.\n   - **State Changes**: The NPC has climbed using a pistol grip.\n7. **learn_new_member_secret**:\n   - **Description**: Watch other climbers to learn new moves and possible betas.\n   - **State Changes**: The NPC has learned a new secret about rock climbing at the rock surface.\n\nThese actions accurately reflect the state changes and the logical flow required for the task \"How to Rock Climb\".",
    "Here are the PDDL actions based on the given task and steps:\n\n```lisp\n(:action be_in_shape\n    :parameters (?p - person)\n    :precondition (not (in_shape ?p))\n    :effect (in_shape ?p)\n)\n\n(:action learn_glacier_climbing\n    :parameters (?npc - person)\n    :precondition (not (knowledge_glacier_climbing ?npc))\n    :effect (knowledge_glacier_climbing ?npc)\n)\n\n(:action understand_glacial_terrain\n    :parameters (?npc - person)\n    :precondition (knowledge_glacier_climbing ?npc)\n    :effect (knowledge_glacial_terrain ?npc)\n)\n\n(:action learn_glacier_hazard\n    :parameters (?npc - person)\n    :precondition (knowledge_glacial_terrain ?npc)\n    :effect (knowledge_glacier_hazard ?npc)\n)\n\n(:action get_gear\n    :parameters (?npc - person ?gear - gear ?store - location)\n    :precondition (and (at ?npc ?store) (at ?gear ?store))\n    :effect (and (inventory ?npc ?gear) (not (at ?gear ?store)))\n)\n\n(:action be_knowledgeable\n    :parameters (?p - person)\n    :precondition (and (in_shape ?p) (knowledge_glacier_climbing ?p) (knowledge_glacial_terrain ?p) (knowledge_glacier_hazard ?p))\n    :effect (knowledgeable ?p)\n)\n\n(:action learn_weather_reports\n    :parameters (?npc - person)\n    :precondition (not (knowledge_weather_reports ?npc))\n    :effect (knowledge_weather_reports ?npc)\n)\n\n(:action have_gear\n    :parameters (?p - person ?gear - gear)\n    :precondition (inventory ?p ?gear)\n    :effect (ready_for_climbing ?p)\n)\n\n(:action know_your_chosen_glacier\n    :parameters (?p - person ?glacier - glacier)\n    :precondition (knowledge_glacial_terrain ?p)\n    :effect (knowledge_chosen_glacier ?p ?glacier)\n)\n\n(:action know_your_teammate\n    :parameters (?p1 - person ?p2 - person)\n    :precondition (and (knowledgeable ?p1) (knowledgeable ?p2))\n    :effect (team_ready ?p1 ?p2)\n)\n```\n\n### Explanation:\n- **be_in_shape**: Ensures the player is in good shape.\n- **learn_glacier_climbing**: The player learns glacier climbing techniques.\n- **understand_glacial_terrain**: The player understands glacial terrain after learning glacier climbing.\n- **learn_glacier_hazard**: The player learns about glacier hazards after understanding glacial terrain.\n- **get_gear**: The player gets the necessary gear from a store.\n- **be_knowledgeable**: The player becomes knowledgeable after acquiring all necessary knowledge.\n- **learn_weather_reports**: The player learns to read weather reports.\n- **have_gear**: The player is ready for climbing after having the necessary gear.\n- **know_your_chosen_glacier**: The player knows their chosen glacier.\n- **know_your_teammate**: The player knows their teammate, ensuring the team is ready.\n\nThese actions reflect the necessary steps and state changes required for beginning glacier climbing.",
    "Sure, here are the PDDL actions for the task \"How to Climb a Rope\" based on the provided steps and entity states:\n\n```pddl\n(:action choose_rope\n    :parameters (?npc - npc ?rope - rope)\n    :precondition (and (available ?rope))\n    :effect (and (chosen ?npc ?rope) (not (available ?rope)))\n)\n\n(:action build_upper_body\n    :parameters (?npc - npc ?equipment - my_equipment)\n    :precondition (and (scattered ?equipment))\n    :effect (and (organized ?equipment) (not (scattered ?equipment)))\n)\n\n(:action test_yourself\n    :parameters (?npc - npc ?equipment - my_equipment)\n    :precondition (and (organized ?equipment))\n    :effect (and (tested ?npc ?equipment))\n)\n\n(:action fasten_rope\n    :parameters (?npc - npc ?rope - rope ?surface - rock_surface)\n    :precondition (and (chosen ?npc ?rope) (empty ?surface))\n    :effect (and (fastened ?npc ?rope ?surface) (full ?surface))\n)\n\n(:action get_cluster_safety\n    :parameters (?npc - npc ?surface - rock_surface)\n    :precondition (and (full ?surface))\n    :effect (and (clustered_safety ?npc ?surface))\n)\n```\n\n### Explanation of Actions:\n\n1. **choose_rope**:\n   - **Parameters**: The NPC and the rope.\n   - **Preconditions**: The rope must be available.\n   - **Effect**: The rope is chosen by the NPC and is no longer available.\n\n2. **build_upper_body**:\n   - **Parameters**: The NPC and the equipment.\n   - **Preconditions**: The equipment must be scattered.\n   - **Effect**: The equipment becomes organized.\n\n3. **test_yourself**:\n   - **Parameters**: The NPC and the equipment.\n   - **Preconditions**: The equipment must be organized.\n   - **Effect**: The NPC tests themselves with the equipment.\n\n4. **fasten_rope**:\n   - **Parameters**: The NPC, the rope, and the rock surface.\n   - **Preconditions**: The rope must be chosen by the NPC, and the rock surface must be empty.\n   - **Effect**: The rope is fastened to the rock surface, and the rock surface is now full.\n\n5. **get_cluster_safety**:\n   - **Parameters**: The NPC and the rock surface.\n   - **Preconditions**: The rock surface must be full.\n   - **Effect**: The NPC ensures climbing safety by clustering safety equipment on the rock surface.\n\nThese actions capture the essence of the task \"How to Climb a Rope\" and reflect the state changes of the entities involved in each step."
]