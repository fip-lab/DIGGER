[
    "Sure, I'll generate PDDL actions for the task \"How to Thicken Liquids\" based on the given steps and descriptions.\n\nTask: How to Thicken Liquids\n\nSteps:\n- make_nectar nectar_thick liquid\n- make_honey honey_thick mixture1\n- create_add_ingredients pudding_comixture mixing_bowl\n\n### PDDL Actions:\n\n```lisp\n;; Action 1: Make a nectar-thick liquid\n(:action make_nectar\n    :parameters (?n - nectar_thick ?l - liquid)\n    :precondition (and\n      (in ?l container)\n      (not (thick ?l))\n    )\n    :effect (and\n      (thick ?l)\n      (in ?l ?n)\n      (not (in ?l container))\n    )\n)\n\n;; Action 2: Make your liquids honey-thick\n(:action make_honey\n    :parameters (?h - honey_thick ?m - mixture1)\n    :precondition (and\n      (in ?m container)\n      (not (honey_thick ?m))\n    )\n    :effect (and\n      (honey_thick ?m)\n      (in ?m ?h)\n      (not (in ?m container))\n    )\n)\n\n;; Action 3: Create a pudding consistency in your liquids\n(:action create_add_ingredients\n    :parameters (?p - pudding_comixture ?b - mixing_bowl)\n    :precondition (and\n      (in ?p container)\n      (not (pudding_consistency ?p))\n    )\n    :effect (and\n      (pudding_consistency ?p)\n      (in ?p ?b)\n      (not (in ?p container))\n    )\n)\n```\n\n### Explanation:\n\n1. **make_nectar**: This action makes a liquid nectar-thick.\n   - **Parameters**: `?n` (nectar_thick), `?l` (liquid)\n   - **Preconditions**: The liquid is in a container and is not already thick.\n   - **Effects**: The liquid becomes thick and moves to the nectar_thick state, and is no longer in the container.\n\n2. **make_honey**: This action makes a mixture honey-thick.\n   - **Parameters**: `?h` (honey_thick), `?m` (mixture1)\n   - **Preconditions**: The mixture is in a container and is not already honey_thick.\n   - **Effects**: The mixture becomes honey_thick and moves to the honey_thick state, and is no longer in the container.\n\n3. **create_add_ingredients**: This action creates a pudding consistency in the mixture.\n   - **Parameters**: `?p` (pudding_comixture), `?b` (mixing_bowl)\n   - **Preconditions**: The pudding_comixture is in a container and does not have a pudding consistency.\n   - **Effects**: The pudding_comixture achieves a pudding consistency and moves to the mixing_bowl, and is no longer in the container.\n\nThese actions reflect the state changes and the steps described for thickening liquids.",
    "Based on the given task \"How to Sweeten Your Watermelon\" and the steps provided, here are the PDDL actions that capture the intent, logic, and changes in the entity state:\n\n```lisp\n(:action add-ingredients\n   :parameters (?sugar - sugar ?watermelon - watermelon ?npc - npc ?bowl - mixing_bowl)\n   :precondition (and (at ?npc ?bowl) (inventory ?npc ?sugar) (inventory ?npc ?watermelon) (empty ?bowl))\n   :effect (and (not (inventory ?npc ?sugar)) (not (inventory ?npc ?watermelon)) (mixed ?bowl) (contains ?bowl ?sugar) (contains ?bowl ?watermelon))\n)\n\n(:action gather_water\n   :parameters (?npc - npc ?water - water)\n   :precondition (and (at ?npc ?location) (has_water_source ?location))\n   :effect (and (inventory ?npc ?water) (not (at ?water ?location)))\n)\n\n(:action drink_watermelon\n   :parameters (?watermelon - watermelon ?npc - npc ?bowl - mixing_bowl)\n   :precondition (and (at ?npc ?bowl) (contains ?bowl ?watermelon))\n   :effect (and (consumed ?watermelon) (not (contains ?bowl ?watermelon)))\n)\n\n(:action squeeze-lemon\n   :parameters (?watermelon - watermelon ?npc - npc ?lemon - lemon)\n   :precondition (and (at ?npc ?watermelon) (inventory ?npc ?lemon))\n   :effect (and (not (inventory ?npc ?lemon)) (juice_squeezed ?lemon ?watermelon))\n)\n\n(:action cook\n   :parameters (?npc - npc ?kitchen - kitchen)\n   :precondition (and (at ?npc ?kitchen) (clean ?kitchen))\n   :effect (and (messy ?kitchen))\n)\n```\n\nThese actions reflect the steps of the task and the changes in the state of the entities involved. Each action is described with its name, parameters, preconditions, and effects, capturing the transitions in the states of the relevant entities.",
    "Here are the PDDL actions for the task \"How to Make a Sugar and Vanilla Scrub\":\n\n```pddl\n; Action 1: Measure the amount you want to make\n(:action measure_amount\n    :parameters (?you - person ?amount - quantity ?npc - person)\n    :precondition (and\n      (unknown ?amount)\n    )\n    :effect (and\n      (learned ?amount)\n      (knowledge ?npc ?amount)\n    )\n)\n\n; Action 2: Add the chosen amount of sugar and oil to a bowl\n(:action add_ingredients\n    :parameters (?sugar - ingredient ?oil - ingredient ?bowl - container)\n    :precondition (and\n      (separate ?sugar ?oil)\n      (empty ?bowl)\n      (clean ?bowl)\n    )\n    :effect (and\n      (in_container ?sugar ?bowl)\n      (in_container ?oil ?bowl)\n      (mixed ?sugar ?oil)\n      (not (separate ?sugar ?oil))\n      (full ?bowl)\n      (dirty ?bowl)\n      (not (empty ?bowl))\n      (not (clean ?bowl))\n    )\n)\n\n; Action 3: Add vanilla extract to the mixture in the blender\n(:action add_ingredients_vanilla\n    :parameters (?extract - ingredient ?blender - appliance)\n    :precondition (and\n      (in_container ?extract ?blender)\n      (clean ?blender)\n      (turned_off ?blender)\n    )\n    :effect (and\n      (mixed ?extract)\n      (not (separate ?extract))\n      (full ?blender)\n      (dirty ?blender)\n      (not (clean ?blender))\n      (turned_on ?blender)\n    )\n)\n\n; Action 4: Scoop the resulting scrub into a jar\n(:action solve_scrubber\n    :parameters (?npc - person ?scrubber - container)\n    :precondition (and\n      (mixed ?scrubber)\n      (full ?scrubber)\n    )\n    :effect (and\n      (in_container ?scrubber ?npc)\n      (not (full ?scrubber))\n      (empty ?scrubber)\n    )\n)\n```\n\n### Explanation of Actions:\n\n1. **measure_amount**:\n   - **Parameters**: `?you`, `?amount`, `?npc`\n   - **Preconditions**: The amount to be made is unknown.\n   - **Effects**: The amount is learned, and the npc has knowledge of the amount.\n\n2. **add_ingredients**:\n   - **Parameters**: `?sugar`, `?oil`, `?bowl`\n   - **Preconditions**: Sugar and oil are separate, the bowl is empty and clean.\n   - **Effects**: Sugar and oil are added to the bowl, mixed, the bowl is now full and dirty.\n\n3. **add_ingredients_vanilla**:\n   - **Parameters**: `?extract`, `?blender`\n   - **Preconditions**: Vanilla extract is in the blender, the blender is clean and turned off.\n   - **Effects**: The extract is mixed, the blender is full and dirty, and the blender is turned on.\n\n4. **solve_scrubber**:\n   - **Parameters**: `?npc`, `?scrubber`\n   - **Preconditions**: The scrubber is mixed and full.\n   - **Effects**: The scrubber is scooped into a jar, it is now empty.\n\nThese actions reflect the state changes of the entities involved in making the sugar and vanilla scrub.",
    "Based on the provided task steps and the descriptions, here are the PDDL actions to make carbonated water:\n\n```lisp\n(define (domain carbonated_water)\n  (:requirements :strips)\n  (:predicates\n    (at ?p - person ?loc - location)\n    (inventory ?p - person ?item - item)\n    (has_co2 ?machine - soda_machine)\n    (attached_co2 ?machine - soda_machine)\n    (carbonated ?water - water)\n    (has_water ?bottle - bottle ?water - water)\n    (installed_machine ?machine - soda_machine)\n  )\n\n  (:action buy_soda_machine\n    :parameters (?p - person ?machine - soda_machine ?store - location)\n    :precondition (and (at ?p ?store) (not (inventory ?p ?machine)))\n    :effect (and (inventory ?p ?machine))\n  )\n\n  (:action attach_new_co2\n    :parameters (?p - person ?machine - soda_machine ?co2 - co2_cartridge)\n    :precondition (and (inventory ?p ?machine) (inventory ?p ?co2) (not (attached_co2 ?machine)))\n    :effect (and (attached_co2 ?machine))\n  )\n\n  (:action press_carbonating_button\n    :parameters (?p - person ?machine - soda_machine ?water - water ?bottle - bottle)\n    :precondition (and (inventory ?p ?machine) (attached_co2 ?machine) (has_water ?bottle ?water) (not (carbonated ?water)))\n    :effect (and (carbonated ?water))\n  )\n)\n```\n\n### Explanation:\n\n1. **buy_soda_machine**\n   - **Parameters**: `?p` (person), `?machine` (soda machine), `?store` (location)\n   - **Preconditions**: The person is at the store and does not already have the soda machine in their inventory.\n   - **Effect**: The soda machine is added to the person's inventory.\n\n2. **attach_new_co2**\n   - **Parameters**: `?p` (person), `?machine` (soda machine), `?co2` (CO2 cartridge)\n   - **Preconditions**: The person has the soda machine and CO2 cartridge in their inventory, and the CO2 cartridge is not already attached to the machine.\n   - **Effect**: The CO2 cartridge is attached to the soda machine.\n\n3. **press_carbonating_button**\n   - **Parameters**: `?p` (person), `?machine` (soda machine), `?water` (water), `?bottle` (bottle)\n   - **Preconditions**: The person has the soda machine in their inventory, the CO2 cartridge is attached, the bottle contains water, and the water is not yet carbonated.\n   - **Effect**: The water in the bottle becomes carbonated.\n\nThese actions accurately reflect the steps and state changes involved in making carbonated water with a soda machine.",
    "Here are the PDDL actions for the task \"How to Make Sugar Water\":\n\n### PDDL Actions:\n\n```lisp\n(:action use_brown_sugar\n  :parameters (?p - player ?sugar - brown_sugar ?oil - canola_oil ?knob - stove_knob ?blender - blender)\n  :precondition (and (inventory ?p ?sugar) (inventory ?p ?oil) (at ?p ?knob) (at ?p ?blender) (off ?knob))\n  :effect (and (not (inventory ?p ?sugar)) (not (inventory ?p ?oil)) (on ?knob) (in ?blender ?sugar) (in ?blender ?oil) (mixed ?blender))\n)\n\n(:action add_rosewater\n  :parameters (?p - player ?rosewater - rosewater ?water - water ?blender - blender)\n  :precondition (and (inventory ?p ?rosewater) (inventory ?p ?water) (at ?p ?blender) (mixed ?blender))\n  :effect (and (not (inventory ?p ?rosewater)) (not (inventory ?p ?water)) (in ?blender ?rosewater) (in ?blender ?water) (flavored ?blender))\n)\n\n(:action make_no_cook_sugar_water\n  :parameters (?p - player ?sugar - castor_sugar ?water - water ?pot - pot)\n  :precondition (and (inventory ?p ?sugar) (inventory ?p ?water) (at ?p ?pot) (clean ?pot))\n  :effect (and (not (inventory ?p ?sugar)) (not (inventory ?p ?water)) (in ?pot ?sugar) (in ?pot ?water) (sugar_water ?pot))\n)\n\n(:action add_ingredient\n  :parameters (?p - player ?sugar_water - sugar_water ?herb - honeydew ?blender - blender)\n  :precondition (and (inventory ?p ?sugar_water) (inventory ?p ?herb) (at ?p ?blender) (flavored ?blender))\n  :effect (and (not (inventory ?p ?sugar_water)) (not (inventory ?p ?herb)) (in ?blender ?sugar_water) (in ?blender ?herb) (flavored_syrup ?blender))\n)\n```\n\n### Explanation:\n\n1. **use_brown_sugar**:\n   - **Parameters**: Player, brown sugar, canola oil, stove knob, blender.\n   - **Preconditions**: Player has brown sugar and canola oil, is at the stove knob and blender, and the stove knob is off.\n   - **Effects**: Brown sugar and canola oil are added to the blender, the stove knob is turned on, and the ingredients in the blender are mixed.\n\n2. **add_rosewater**:\n   - **Parameters**: Player, rosewater, water, blender.\n   - **Preconditions**: Player has rosewater and water, is at the blender, and the blender ingredients are mixed.\n   - **Effects**: Rosewater and water are added to the blender, and the blender ingredients are flavored.\n\n3. **make_no_cook_sugar_water**:\n   - **Parameters**: Player, castor sugar, water, pot.\n   - **Preconditions**: Player has castor sugar and water, is at the pot, and the pot is clean.\n   - **Effects**: Castor sugar and water are added to the pot, resulting in sugar water.\n\n4. **add_ingredient**:\n   - **Parameters**: Player, sugar water, honeydew, blender.\n   - **Preconditions**: Player has sugar water and honeydew, is at the blender, and the blender ingredients are flavored.\n   - **Effects**: Sugar water and honeydew are added to the blender, resulting in flavored syrup.\n\nThese actions capture the steps and state changes involved in making sugar water with the given ingredients and tools.",
    "To generate PDDL actions for the task \"How to Flavor Sugar,\" I'll create actions based on the given steps and entity states. I'll ensure that each action reflects the state changes as part of the preconditions and effects.\n\n### PDDL Actions\n\n```lisp\n; Action 1: Add sugar to beverages\n(:action add_sugar_to_beverages\n    :parameters (?beverages - container ?sugar - ingredient)\n    :precondition (and\n      (in_location ?beverages cabinet)\n      (whole ?sugar)\n    )\n    :effect (and\n      (in_location ?beverages table)\n      (in_container ?sugar ?beverages)\n      (not (in_location ?beverages cabinet))\n      (mixed ?sugar ?beverages)\n    )\n)\n\n; Action 2: Use sugar in desserts\n(:action use_as_desserts\n    :parameters (?mixing_bowl - container ?table - surface ?sugar - ingredient)\n    :precondition (and\n      (empty ?mixing_bowl)\n      (clear ?table)\n      (whole ?sugar)\n    )\n    :effect (and\n      (in_container ?sugar ?mixing_bowl)\n      (not (empty ?mixing_bowl))\n      (cluttered ?table)\n      (mixed ?sugar ?mixing_bowl)\n    )\n)\n\n; Action 3: Make sugar cubes or shapes\n(:action make_sugar_cubes\n    :parameters (?npc - tool ?sugar - ingredient)\n    :precondition (and\n      (bare ?npc)\n      (whole ?sugar)\n    )\n    :effect (and\n      (camouflaged ?npc)\n      (shaped ?sugar)\n    )\n)\n\n; Action 4: Make rock candy\n(:action make_rock_candy\n    :parameters (?rock_cheese - ingredient ?marshmallow_cream - ingredient ?blender - appliance)\n    :precondition (and\n      (closed ?rock_cheese)\n      (in_location ?marshmallow_cream container)\n      (clean ?blender)\n      (empty ?blender)\n    )\n    :effect (and\n      (open ?rock_cheese)\n      (in_container ?rock_cheese ?blender)\n      (in_container ?marshmallow_cream ?blender)\n      (mixed ?rock_cheese ?marshmallow_cream)\n      (not (empty ?blender))\n      (dirty ?blender)\n      (full ?blender)\n      (spinning ?blender)\n    )\n)\n\n; Action 5: Make cotton candy\n(:action make_cotton_candy\n    :parameters (?cotton_cheese - ingredient ?marshmallow1 - ingredient)\n    :precondition (and\n      (closed ?cotton_cheese)\n      (in_location ?marshmallow1 container)\n    )\n    :effect (and\n      (open ?cotton_cheese)\n      (mixed ?cotton_cheese ?marshmallow1)\n    )\n)\n```\n\n### Explanation\n\n1. **add_sugar_to_beverages**: This action adds sugar to beverages, changing the location of beverages from the cabinet to the table and mixing the sugar with the beverages.\n\n2. **use_as_desserts**: This action involves using sugar in desserts by placing it in a mixing bowl, changing the state of the mixing bowl from empty to not empty, and cluttering the table.\n\n3. **make_sugar_cubes**: This action shapes sugar into cubes or shapes using an NPC tool, changing the NPC's state from bare to camouflaged and the sugar's state to shaped.\n\n4. **make_rock_candy**: This action involves making rock candy by mixing rock cheese and marshmallow cream in a blender, changing the state of the blender to full and dirty, and the rock cheese to open.\n\n5. **make_cotton_candy**: This action makes cotton candy by mixing cotton cheese and marshmallow, changing the cotton cheese's state to open and the ingredients to mixed.\n\nThese actions are designed to accurately capture the state changes and logic of the task \"How to Flavor Sugar.\"",
    "Here's the set of PDDL actions for the task \"How to Make Soda\" based on the provided steps and descriptions:\n\n### PDDL Actions:\n\n#### Action 1: Treat Drink\n```pddl\n(:action treat_drink\n  :parameters (?n - npc ?d - drink)\n  :precondition (and\n    (drink_type ?d root_beer)\n  )\n  :effect (and\n    (treated ?d)\n    (enjoyed ?n ?d)\n  )\n)\n```\n\n#### Action 2: Make Fruit Soda\n```pddl\n(:action make_fruit_soda\n  :parameters (?a - agent)\n  :precondition (and\n    (agent ?a alice)\n  )\n  :effect (and\n    (made_fruit_soda ?a)\n    (soda ?a fruit_soda)\n  )\n)\n```\n\n#### Action 3: Break Coke Code\n```pddl\n(:action break_coke_code\n  :parameters (?n - npc)\n  :precondition (and\n    (npc ?n)\n  )\n  :effect (and\n    (code_broken ?n coke_code)\n  )\n)\n```\n\n#### Action 4: Brew Ingredients\n```pddl\n(:action brew_ingredients\n  :parameters (?g - ingredient ?m - mixing_bowl)\n  :precondition (and\n    (ingredient ?g ginger_alice)\n    (empty ?m)\n  )\n  :effect (and\n    (in ?g ?m)\n    (not (empty ?m))\n    (mixed ?m)\n    (wet ?m)\n  )\n)\n```\n\n### Entity State Transitions:\n\n#### Mixing Bowl\n- **Attribute**: location\n  - **Before**: in separate packages | in pantry | in cupboard | separate\n  - **After**: in bowl | in mixing bowl | mixed\n\n- **Attribute**: volume\n  - **Before**: empty\n  - **After**: holding ingredients\n\n- **Attribute**: weight\n  - **Before**: light\n  - **After**: slightly heavier\n\n- **Attribute**: composition\n  - **Before**: separate\n  - **After**: mixed\n\n- **Attribute**: wetness\n  - **Before**: dry\n  - **After**: wetter | wet\n\n- **Attribute**: temperature\n  - **Before**: warmer | room temperature\n  - **After**: cooler | chilled\n\n#### Root Beer\n- **Attribute**: moisture\n  - **Before**: dry\n  - **After**: wet\n\n#### NPC\n- **Attribute**: decoration\n  - **Before**: bare | plain\n  - **After**: camouflaged\n\n- **Attribute**: visibility\n  - **Before**: visible\n  - **After**: invisible\n\n#### Ginger Alice\n- **Attribute**: composition\n  - **Before**: bare\n  - **After**: decorated\n\n#### Alice\n- **Attribute**: step\n  - **Before**: unselected\n  - **After**: selected\n\n- **Attribute**: choice\n  - **Before**: nameless\n  - **After**: named\n\nThe generated PDDL actions accurately reflect the state changes of the entities involved in the task \"How to Make Soda\" based on the provided steps and descriptions.",
    "Here are the PDDL actions based on the provided task and steps:\n\n### Task: How to Make Your Own Brown Sugar\n\n#### Step 1: Store the brown sugar in an airtight container.\n#### Step 2: Soften brown sugar in the microwave.\n#### Step 3: Place a piece of bread with the brown sugar.\n\n### PDDL Actions:\n\n```lisp\n(:action store-sugar\n    :parameters (?s - sugar ?c - container)\n    :precondition (and (not (in-container ?s)))\n    :effect (and (in-container ?s) (not (empty ?c)) (fuller ?c)))\n\n(:action soften-sugar\n    :parameters (?s - sugar ?m - microwave)\n    :precondition (and (in-container ?s) (off ?m))\n    :effect (and (softened ?s) (on ?m)))\n\n(:action place-ingredients\n    :parameters (?b - bread ?s - sugar)\n    :precondition (and (softened ?s) (not (with-bread ?s)))\n    :effect (and (with-bread ?s) (on-counter ?b)))\n```\n\n### Explanation:\n- **store-sugar**:\n  - **Parameters**: `?s` (sugar), `?c` (container)\n  - **Preconditions**: Sugar is not already in a container.\n  - **Effects**: Sugar is now in the container, the container is not empty, and the container is fuller.\n\n- **soften-sugar**:\n  - **Parameters**: `?s` (sugar), `?m` (microwave)\n  - **Preconditions**: Sugar is in a container, microwave is off.\n  - **Effects**: Sugar is softened, microwave is turned on.\n\n- **place-ingredients**:\n  - **Parameters**: `?b` (bread), `?s` (sugar)\n  - **Preconditions**: Sugar is softened, sugar is not already with bread.\n  - **Effects**: Sugar is now with bread, bread is on the counter.\n\nThis set of PDDL actions captures the steps and state changes involved in the task of making your own brown sugar.",
    "Sure, let's generate PDDL actions for the new task \"How to Sweeten Foods with Maple Syrup\" based on the given steps and descriptions.\n\n### Task: How to Sweeten Foods with Maple Syrup\n\n#### Step 1: Select a root vegetable\n```pddl\n(:action select_plant\n    :parameters (?fir - plant ?pot - container)\n    :precondition (and\n      (at ?fir in_garden)\n      (at ?pot in_cupboard)\n      (clean ?pot)\n    )\n    :effect (and\n      (at ?fir in_hand)\n      (not (at ?fir in_garden))\n      (dirty ?pot)\n    )\n)\n```\n\n#### Step 2: Blend olive oil with maple syrup\n```pddl\n(:action blend_ingredients\n    :parameters (?olive_oil - ingredient ?blender - utensil)\n    :precondition (and\n      (at ?olive_oil in_pantry)\n      (clean ?blender)\n      (power_off ?blender)\n    )\n    :effect (and\n      (mixed ?blender)\n      (power_on ?blender)\n      (dirty ?blender)\n    )\n)\n```\n\n#### Step 3: Slather the mixture on vegetables\n```pddl\n(:action slather_with_mixture\n    :parameters (?mixture - ingredient ?vegetable - plant)\n    :precondition (and\n      (mixed ?mixture)\n      (at ?vegetable in_hand)\n    )\n    :effect (and\n      (slathered ?vegetable ?mixture)\n      (not (at ?mixture in_blender))\n    )\n)\n```\n\n#### Step 4: Roast until soft\n```pddl\n(:action roast\n    :parameters (?vegetable - plant ?pot - container)\n    :precondition (and\n      (slathered ?vegetable mixture)\n      (at ?pot on_stovetop)\n      (clean ?pot)\n    )\n    :effect (and\n      (roasted ?vegetable)\n      (dirty ?pot)\n    )\n)\n```\n\n#### Step 5: Serve vegetables with a grain or protein\n```pddl\n(:action serve\n    :parameters (?vegetable - plant ?dish - dish)\n    :precondition (and\n      (roasted ?vegetable)\n      (at ?dish dining_table)\n    )\n    :effect (and\n      (in_dish ?vegetable ?dish)\n      (not (roasted ?vegetable))\n    )\n)\n```\n\n### Summary\nThe above PDDL actions capture the steps involved in sweetening foods with maple syrup, focusing on the state changes of the entities involved, such as the location of the fir, the cleanliness of the pot, the blending of ingredients, and the final serving of the roasted vegetables.",
    "Based on the provided steps and descriptions, here are the PDDL actions for the task \"How to Caramelize Sugar\":\n\n```lisp\n(:action pour_ingredients\n    :parameters (?p - player ?sugar - sugar ?pot - pot)\n    :precondition (and (inventory ?p ?sugar) (location ?pot in_cupboard))\n    :effect (and (in_pot ?sugar ?pot) (location ?pot on_stovetop))\n)\n\n(:action put_food_colors_in\n    :parameters (?user - user ?ketchup_bottle - ketchup_bottle ?bottle - bottle)\n    :precondition (and (inventory ?user ?ketchup_bottle) (inventory ?user ?bottle) (location ?bottle on_counter))\n    :effect (and (not (inventory ?user ?ketchup_bottle)) (in_bottle ?ketchup_bottle ?bottle))\n)\n\n(:action turn_dry_sugar\n    :parameters (?sugar - sugar ?pot - pot)\n    :precondition (and (in_pot ?sugar ?pot) (location ?pot on_stovetop))\n    :effect (dry ?sugar)\n)\n\n(:action add_water\n    :parameters (?water - water ?pot - pot)\n    :precondition (and (hot ?water) (location ?pot on_stovetop))\n    :effect (in_pot ?water ?pot)\n)\n\n(:action cook\n    :parameters (?npc - npc ?kitchen - kitchen ?pot - pot)\n    :precondition (and (in_kitchen ?npc ?kitchen) (in_pot ?pot))\n    :effect (and (caramelized ?pot) (cleanness ?kitchen messy))\n)\n\n(:action finish_wreath\n    :parameters (?wreath - wreath)\n    :precondition (status ?wreath in_progress)\n    :effect (status ?wreath completed)\n)\n```\n\n### Descriptions and Entity States:\n1. **pour_ingredients**: Pour sugar into a heavy-based pot.\n    - **Parameters**: player, sugar, pot\n    - **Preconditions**: player has sugar, pot is in the cupboard\n    - **Effects**: sugar is in the pot, pot is on the stovetop\n\n2. **put_food_colors_in**: Put drops of liquid food coloring in as it heats.\n    - **Parameters**: user, ketchup_bottle, bottle\n    - **Preconditions**: user has ketchup_bottle and bottle, bottle is on the counter\n    - **Effects**: ketchup_bottle is in the bottle\n\n3. **turn_dry_sugar**: Eventually, the sugar should turn very dry and powdery or gooey.\n    - **Parameters**: sugar, pot\n    - **Preconditions**: sugar is in the pot, pot is on the stovetop\n    - **Effects**: sugar is dry\n\n4. **add_water**: Add hot water to the powdery or gooey mixture.\n    - **Parameters**: water, pot\n    - **Preconditions**: water is hot, pot is on the stovetop\n    - **Effects**: water is in the pot\n\n5. **cook**: Cook down until it caramelizes.\n    - **Parameters**: npc, kitchen, pot\n    - **Preconditions**: npc is in the kitchen, pot is on the stovetop\n    - **Effects**: pot is caramelized, kitchen is messy\n\n6. **finish_wreath**: Finished.\n    - **Parameters**: wreath\n    - **Preconditions**: wreath is in progress\n    - **Effects**: wreath is completed"
]