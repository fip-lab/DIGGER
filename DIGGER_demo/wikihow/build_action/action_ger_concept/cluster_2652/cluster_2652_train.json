[
    "To generate PDDL actions for the task \"How to Compost Fish Remains,\" we need to focus on the relevant steps and entity state transitions. Here are the PDDL actions based on the provided task:\n\n### PDDL Actions\n\n```lisp\n(:action determine_commercial_composting\n    :parameters (?npc - npc ?area - area)\n    :precondition (and (knowledge ?npc ?area unselected))\n    :effect (knowledge ?npc ?area selected)\n)\n\n(:action compost_fish\n    :parameters (?npc - npc ?composting - composting)\n    :precondition (and (at ?npc underground) (location ?composting in_bag))\n    :effect (and (location ?composting in_container))\n)\n\n(:action add_fish_to_composter\n    :parameters (?npc - npc ?spear - spear ?fish - fish ?composter - composter)\n    :precondition (and (inventory ?npc ?fish) (location ?composter open))\n    :effect (and (not (inventory ?npc ?fish)) (in ?fish ?composter))\n)\n```\n\n### Explanation of Actions\n\n1. **determine_commercial_composting**:\n   - **Action Name**: `determine_commercial_composting`\n   - **Parameters**: \n     - `?npc` - the non-player character determining the availability.\n     - `?area` - the area being checked for commercial composting operations.\n   - **Preconditions**: The area knowledge is unselected.\n   - **Effects**: The area knowledge becomes selected.\n\n2. **compost_fish**:\n   - **Action Name**: `compost_fish`\n   - **Parameters**: \n     - `?npc` - the non-player character performing the composting.\n     - `?composting` - the composting material (fish remains).\n   - **Preconditions**: The NPC is at an underground location, and the composting material is in a bag.\n   - **Effects**: The composting material is moved to a container.\n\n3. **add_fish_to_composter**:\n   - **Action Name**: `add_fish_to_composter`\n   - **Parameters**: \n     - `?npc` - the non-player character adding the fish.\n     - `?spear` - the tool used to handle the fish.\n     - `?fish` - the fish remains.\n     - `?composter` - the composter where the fish is added.\n   - **Preconditions**: The NPC has the fish in their inventory, and the composter is open.\n   - **Effects**: The fish is added to the composter, and it is no longer in the NPC's inventory.\n\nThese actions capture the essence of the task \"How to Compost Fish Remains\" by focusing on determining the availability of commercial composting, composting the fish using an underground setup, and adding the fish remains to an enclosed composter.",
    "Based on the provided task and steps for curing manure, I will generate the PDDL actions that capture the intent, logic, and changes in the entity state of each step. Here are the actions:\n\n```lisp\n;; Action 1: Choose a suitable area for the manure compost pile or bins\n(:action choose_area\n    :parameters (?area - area)\n    :precondition (unselected ?area)\n    :effect (and\n              (selected ?area)\n              (not (unselected ?area)))\n)\n\n;; Action 2: Build composting bins or create a manure pile\n(:action build_bamboo_container\n    :parameters (?bin - bin)\n    :precondition (and\n                    (empty ?bin)\n                    (dry ?bin))\n    :effect (and\n              (constructed ?bin)\n              (not (empty ?bin)))\n)\n\n;; Action 3: Add manure and other organic materials\n(:action add_materials\n    :parameters (?material - grass_tinder ?bin - bin)\n    :precondition (and\n                    (full ?material)\n                    (empty ?bin))\n    :effect (and\n              (in_bin ?material ?bin)\n              (not (full ?material))\n              (full ?bin))\n)\n\n;; Action 4: Roll the curing manure pile weekly\n(:action roll_soap\n    :parameters (?npc - npc ?bin - bin)\n    :precondition (and\n                    (full ?bin)\n                    (visible ?npc))\n    :effect (and\n              (rolled ?bin)\n              (not (visible ?npc))\n              (invisible ?npc))\n)\n\n;; Action 5: Add water\n(:action add_water\n    :parameters (?water - water ?bin - bin)\n    :precondition (and\n                    (in pipes ?water)\n                    (dry ?bin))\n    :effect (and\n              (out_of_faucet ?water)\n              (wet ?bin)\n              (not (dry ?bin)))\n)\n\n;; Action 6: Examine the compost to ensure it has cured sufficiently\n(:action get_mixture\n    :parameters (?npc - npc ?bin - bin)\n    :precondition (and\n                    (rolled ?bin)\n                    (wet ?bin))\n    :effect (and\n              (examined ?bin)\n              (cured ?bin)\n              (visible ?npc))\n)\n```\n\nThese actions capture the primary steps involved in curing manure, focusing on the selection of an area, construction and filling of a compost bin, maintenance activities such as rolling and watering, and finally, examining the compost to ensure it is ready for use. Each action reflects the relevant state changes for the entities involved.",
    "Below are the PDDL actions generated based on the task \"How to Use Seaweed in the Garden\" and the provided steps:\n\n```lisp\n(:action collect_seaweed ; collect seaweed from the beach\n    :parameters (?npc - npc ?loc - location ?seaweed - seaweed)\n    :precondition (and (at ?npc ?loc) (at ?seaweed ?loc) (is_beach ?loc))\n    :effect (and (inventory ?npc ?seaweed) (not (at ?seaweed ?loc)))\n)\n\n(:action wash_sand ; wash sand and debris off the seaweed\n    :parameters (?npc - npc ?loc - location ?seaweed - seaweed)\n    :precondition (and (inventory ?npc ?seaweed) (at ?npc ?loc) (is_beach ?loc))\n    :effect (and (clean ?seaweed))\n)\n\n(:action choose_wailmer ; choose a use for the seaweed\n    :parameters (?npc - npc ?use - use)\n    :precondition (and (not (chosen ?use)))\n    :effect (and (chosen ?use))\n)\n\n(:action mix_materials ; mix seaweed with other materials in a container\n    :parameters (?alice - alice ?container - container ?seaweed - seaweed)\n    :precondition (and (inventory ?alice ?seaweed) (at ?container ?alice) (empty ?container))\n    :effect (and (mixed ?seaweed ?container) (not (empty ?container)))\n)\n\n(:action put_sealed_container ; seal the container with the mixed materials\n    :parameters (?npc - npc ?container - container)\n    :precondition (and (mixed ?seaweed ?container) (at ?container ?npc))\n    :effect (and (sealed ?container))\n)\n\n(:action use_seaweed ; use the seaweed in the garden\n    :parameters (?npc - npc ?loc - location ?seaweed - seaweed)\n    :precondition (and (inventory ?npc ?seaweed) (at ?npc ?loc) (garden ?loc) (clean ?seaweed))\n    :effect (and (used ?seaweed ?loc) (not (inventory ?npc ?seaweed)))\n)\n```\n\n### Explanation:\n\n- **collect_seaweed**: This action involves the NPC collecting seaweed from the beach, transferring it to their inventory.\n- **wash_sand**: The NPC washes the sand and debris off the seaweed, resulting in a clean state for the seaweed.\n- **choose_wailmer**: This action reflects the NPC making a choice about how to use the seaweed, marking the chosen use.\n- **mix_materials**: Alice mixes the seaweed with other materials in a container, changing the state of the container from empty to mixed.\n- **put_sealed_container**: The NPC seals the container after mixing, indicating it's ready for further use.\n- **use_seaweed**: This action involves using the cleaned seaweed directly in the garden, ensuring it is no longer in the NPC's inventory after use.",
    "To generate PDDL actions for the task \"How to Use Your Home Built Tumble Composter to Create Rich Compost,\" we need to focus on the relevant state changes for the entities involved. Here are the PDDL actions based on the provided steps and entity states:\n\n```pddl\n(:action choose-spot-for-tumbler\n    :parameters (?t - tumblers ?l - location)\n    :precondition (and (location ?t around_house) (sunny ?l))\n    :effect (and (location ?t ?l) (not (location ?t around_house)))\n)\n\n(:action save-vegetable-scraps\n    :parameters (?npc - npc ?w - waste)\n    :precondition (and (container ?w empty) (visibility ?npc visible))\n    :effect (and (container ?w full) (not (visibility ?npc visible)))\n)\n\n(:action add-garden-waste\n    :parameters (?g - grass ?nw - non-woody ?t - tumbler)\n    :precondition (and (location ?g in_garden) (location ?nw in_garden) (location ?t in_waste_basket))\n    :effect (and (location ?g in_tumbler) (location ?nw in_tumbler) (not (location ?g in_garden)) (not (location ?nw in_garden)))\n)\n\n(:action add-water\n    :parameters (?npc - npc ?w - water ?t - tumbler)\n    :precondition (and (location ?w in_pipes) (wetness ?t dry))\n    :effect (and (wetness ?t wet) (location ?w out_of_faucet))\n)\n\n(:action tumble-composter\n    :parameters (?y - you ?c - container)\n    :precondition (and (location ?c in_tumbler) (temperature ?c cooler))\n    :effect (and (temperature ?c hotter) (focus ?y admiring_bracelet))\n)\n\n(:action initiate-composter\n    :parameters (?npc - npc ?t - tumbler)\n    :precondition (and (location ?t in_waste_basket) (visibility ?npc visible))\n    :effect (and (visibility ?npc invisible) (temperature ?t hotter))\n)\n\n(:action add-lemon-to-water\n    :parameters (?npc - npc ?w - water)\n    :precondition (and (location ?w in_pipes) (visibility ?npc visible))\n    :effect (and (temperature ?w hote) (not (visibility ?npc visible)))\n)\n\n(:action fill-tumbler\n    :parameters (?user - user ?t - tumbler)\n    :precondition (and (knowledge ?user unselected) (location ?t in_waste_basket))\n    :effect (and (knowledge ?user selected) (location ?t in_tumbler))\n)\n\n(:action balance-water-in-pot\n    :parameters (?npc - npc ?w - water ?p - pot)\n    :precondition (and (location ?w out_of_faucet) (cleanness ?p clean))\n    :effect (and (cleanness ?p dirty) (fullness ?w fuller))\n)\n```\n\nThese actions reflect the changes in location, visibility, temperature, and other relevant states for the entities involved in using a home-built tumbler composter to create rich compost. Adjustments have been made to ensure each action is relevant and captures the intended state transitions.",
    "To generate PDDL actions for the task \"How to Compost in a Tumbler,\" we need to focus on the relevant entity states and their transitions. Here's a set of PDDL actions that reflect the steps of the task:\n\n```lisp\n(:action watch-temperature\n    :parameters (?t - tumbler)\n    :precondition (and (located ?t aroundHouse) (disorganized ?t))\n    :effect (and (organized ?t) (not (disorganized ?t)))\n)\n\n(:action keep-compost-moist\n    :parameters (?c - compost)\n    :precondition (and (dry ?c) (visible ?c))\n    :effect (and (moist ?c) (not (dry ?c)))\n)\n\n(:action observe-color-and-consistency\n    :parameters (?c - compost)\n    :precondition (and (bright ?c) (diffused ?c))\n    :effect (and (consistent ?c) (not (diffused ?c)))\n)\n\n(:action use-compost\n    :parameters (?c - compost ?n - npc)\n    :precondition (and (consistent ?c) (camouflaged ?n))\n    :effect (and (used ?c) (not (consistent ?c)) (invisible ?n) (not (visible ?n)))\n)\n```\n\n### Explanation:\n\n1. **watch-temperature**:\n   - **Parameters**: Involves the tumbler (?t).\n   - **Preconditions**: The tumbler is located around the house and is disorganized.\n   - **Effect**: The tumbler becomes organized after watching the temperature.\n\n2. **keep-compost-moist**:\n   - **Parameters**: Involves the compost (?c).\n   - **Preconditions**: The compost is dry and visible.\n   - **Effect**: The compost becomes moist.\n\n3. **observe-color-and-consistency**:\n   - **Parameters**: Involves the compost (?c).\n   - **Preconditions**: The compost has a bright color and is diffused.\n   - **Effect**: The compost becomes consistent.\n\n4. **use-compost**:\n   - **Parameters**: Involves the compost (?c) and the NPC (?n).\n   - **Preconditions**: The compost is consistent, and the NPC is camouflaged.\n   - **Effect**: The compost is used, and the NPC becomes invisible.\n\nThese actions capture the state transitions and interactions necessary for composting in a tumbler, based on the task description and given entity states.",
    "Based on the task \"How to Find Free Compost Ingredients\" and the provided steps, here are the PDDL actions that capture the intent and logic of each step. I've modified or interpreted the steps to align them with the task and provided relevant actions.\n\n```lisp\n(:action inquire_coffee_shop ; inquire at a coffee shop for used coffee grinds\n    :parameters (?npc - player ?shop - location ?coffee_grinds - item)\n    :precondition (and (at ?npc ?shop) (coffee_shop ?shop))\n    :effect (and (inventory ?npc ?coffee_grinds) (not (at ?coffee_grinds ?shop)))\n)\n\n(:action inquire_lumberyard ; inquire at a lumberyard for free sawdust\n    :parameters (?npc - player ?lumberyard - location ?sawdust - item)\n    :precondition (and (at ?npc ?lumberyard) (lumberyard ?lumberyard))\n    :effect (and (inventory ?npc ?sawdust) (not (at ?sawdust ?lumberyard)))\n)\n\n(:action collect_newspapers ; collect newspapers for composting\n    :parameters (?npc - player ?loc - location ?newspapers - item)\n    :precondition (and (at ?npc ?loc) (at ?newspapers ?loc))\n    :effect (and (inventory ?npc ?newspapers) (not (at ?newspapers ?loc)))\n)\n\n(:action contact_dairy ; contact a local dairy for composted cow manure\n    :parameters (?npc - player ?dairy - location ?manure - item)\n    :precondition (and (at ?npc ?dairy) (dairy ?dairy))\n    :effect (and (inventory ?npc ?manure) (not (at ?manure ?dairy)))\n)\n\n(:action contact_food_plant ; contact a food processing plant for organic material\n    :parameters (?npc - player ?plant - location ?organic_material - item)\n    :precondition (and (at ?npc ?plant) (food_processing_plant ?plant))\n    :effect (and (inventory ?npc ?organic_material) (not (at ?organic_material ?plant)))\n)\n\n(:action visit_zoo ; visit zoo to retrieve compost from exhibit animals\n    :parameters (?npc - player ?zoo - location ?compost - item)\n    :precondition (and (at ?npc ?zoo) (zoo ?zoo))\n    :effect (and (inventory ?npc ?compost) (not (at ?compost ?zoo)))\n)\n\n(:action create_worm_castings ; create worm castings using cardboard\n    :parameters (?npc - player ?cardboard - item ?worms - item)\n    :precondition (and (inventory ?npc ?cardboard) (inventory ?npc ?worms))\n    :effect (and (created ?worms ?cardboard))\n)\n\n(:action visit_christmas_tree_lot ; visit Christmas tree lot for mulched trees\n    :parameters (?npc - player ?lot - location ?mulch - item)\n    :precondition (and (at ?npc ?lot) (christmas_tree_lot ?lot))\n    :effect (and (inventory ?npc ?mulch) (not (at ?mulch ?lot)))\n)\n\n(:action contact_city_government ; contact city government for compost resources\n    :parameters (?npc - player ?gov_office - location ?resources - item)\n    :precondition (and (at ?npc ?gov_office) (city_government_office ?gov_office))\n    :effect (and (inventory ?npc ?resources) (not (at ?resources ?gov_office)))\n)\n\n(:action be_neighborly ; be neighborly to share or receive compost materials\n    :parameters (?npc - player ?neighbors - location)\n    :precondition (and (at ?npc ?neighbors) (neighborly ?neighbors))\n    :effect (and (shared_resources ?npc ?neighbors))\n)\n\n(:action collect_wood_ash ; collect wood ash for soil amendment\n    :parameters (?npc - player ?wood_ash - item)\n    :precondition (and (inventory ?npc ?wood_ash))\n    :effect (and (amended_soil ?npc ?wood_ash))\n)\n```\n\nEach action is designed to reflect the task's goal of finding free compost ingredients, with preconditions and effects capturing the state changes of the involved entities.",
    "Based on the task \"How to Add Nitrogen to Compost\" and the provided steps, I'll generate PDDL actions that reflect the necessary processes and state changes. The focus will be on actions related to composting, such as layering materials and maintaining the compost bin.\n\n### PDDL Actions:\n\n```lisp\n(:action lay_twigs\n    :parameters (?twigs - twigs ?container - container)\n    :precondition (and (at ?twigs ?container) (organization ?twigs scattered))\n    :effect (and (organization ?twigs bundled) (volume ?container fuller))\n)\n\n(:action lay_material\n    :parameters (?npc - npc ?material - material ?container - container)\n    :precondition (and (at ?npc ?container) (inventory ?npc ?material) (volume ?container fuller))\n    :effect (and (not (inventory ?npc ?material)) (volume ?container fuller))\n)\n\n(:action start_fire\n    :parameters (?npc - npc ?wood - wood ?drill - drill)\n    :precondition (and (inventory ?npc ?wood) (inventory ?npc ?drill) (moisture ?wood dry))\n    :effect (and (ignited ?wood))\n)\n\n(:action spray_water\n    :parameters (?npc - npc ?container - container ?water - water)\n    :precondition (and (at ?npc ?container) (inventory ?npc ?water) (moisture ?container dry))\n    :effect (and (moisture ?container wet))\n)\n\n(:action keep_bin\n    :parameters (?bin - bin ?location - location)\n    :precondition (and (at ?bin ?location) (temperature ?bin cold))\n    :effect (and (temperature ?bin hot))\n)\n\n(:action turn_on_oven\n    :parameters (?npc - npc ?oven - oven)\n    :precondition (and (at ?npc ?oven) (status ?oven off))\n    :effect (and (status ?oven on))\n)\n\n(:action wait\n    :parameters (?months - months)\n    :precondition (and (time ?months earlier))\n    :effect (and (time ?months later) (completion ?months finished))\n)\n```\n\n### Explanation:\n- **lay_twigs**: This action involves placing twigs inside a container, changing their organization from scattered to bundled, and increasing the container's volume.\n- **lay_material**: This action represents adding nitrogen-rich material to the container, removing it from the NPC's inventory, and increasing the container's volume.\n- **start_fire**: This action involves using a drill to ignite wood, changing its state to ignited.\n- **spray_water**: This action involves spraying water onto the container's contents to change their moisture state from dry to wet.\n- **keep_bin**: This action involves placing the bin in a location where it can become warmer, such as in the sun.\n- **turn_on_oven**: This action involves turning on an oven, changing its status from off to on. Although not directly relevant to composting, it could be part of a broader scenario involving heating.\n- **wait**: This action represents the passage of time necessary for composting, changing the state of time from earlier to later and marking the process as finished.\n\nThese actions capture the essential steps and state changes involved in the task of adding nitrogen to compost, as described in the provided steps and descriptions.",
    "Based on the task \"How to Transport Compost Materials from Your Kitchen to Your Compost Bin\" and the provided steps, here are the PDDL actions:\n\n```lisp\n;; Action 1: Use a container as a cleaning container\n(:action use_as_cleaning_container\n    :parameters (?container - container)\n    :precondition (and\n                    (in_cabinet ?container)\n                    (empty ?container))\n    :effect (and\n              (on_countertop ?container)\n              (not (in_cabinet ?container))\n              (fuller ?container))\n  )\n\n;; Action 2: Keep the container in an easily accessible place\n(:action in_container\n    :parameters (?container - container)\n    :precondition (on_countertop ?container)\n    :effect (and\n              (on_table ?container)\n              (not (on_countertop ?container)))\n  )\n\n;; Action 3: Make collection and carrying a cinch\n(:action make_collection\n    :parameters (?npc - npc ?location - location)\n    :precondition (and\n                    (visible ?npc)\n                    (absent ?location))\n    :effect (and\n              (invisible ?npc)\n              (present ?location))\n  )\n\n;; Action 4: Keep baking soda next to your kitchen compost bin\n(:action keep_ingredients_in_container\n    :parameters (?baking_soda - baking_soda)\n    :precondition (and\n                    (unobtained ?baking_soda)\n                    (sealed ?baking_soda))\n    :effect (and\n              (obtained ?baking_soda)\n              (open ?baking_soda))\n  )\n\n;; Action 5: Get to the compost bin\n(:action get_to_compost_bin\n    :parameters (?bin - bin)\n    :precondition (empty ?bin)\n    :effect (and\n              (full ?bin)\n              (heavier ?bin))\n  )\n```\n\n### Explanation:\n\n- **use_as_cleaning_container**: This action involves using a container from the cabinet and placing it on the countertop, making it fuller and accessible for use.\n- **in_container**: This action moves the container from the countertop to the table, indicating its accessibility.\n- **make_collection**: This action involves making the collection process easier by making an NPC invisible and ensuring the location is present.\n- **keep_ingredients_in_container**: This action places baking soda next to the compost bin by obtaining and opening it.\n- **get_to_compost_bin**: This action involves moving to the compost bin and filling it, making it heavier."
]