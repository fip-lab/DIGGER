[
    "Based on the task \"How to Make Waffles with a Grill Pan\" and the provided steps, here are the PDDL actions that capture the intent and state changes of each step:\n\n### PDDL Actions\n\n#### Action: Prepare Waffle Batter\n```lisp\n(:action prepare_waffle_batter\n    :parameters (?b - mixing_bowl ?w - waffle_batter)\n    :precondition (and (empty ?b) (not (mixed ?w)))\n    :effect (and (mixed ?w) (not (empty ?b)) (contains ?b ?w))\n)\n```\n\n#### Action: Preheat Grill Pan\n```lisp\n(:action preheat_grill_pan\n    :parameters (?s - stove)\n    :precondition (and (off ?s) (cool ?s))\n    :effect (and (on ?s) (hot ?s))\n)\n```\n\n#### Action: Scoop Waffle Batter\n```lisp\n(:action scoop_waffle_batter\n    :parameters (?b - mixing_bowl ?w - waffle_batter ?p - grill_pan)\n    :precondition (and (contains ?b ?w) (hot ?p))\n    :effect (and (on ?p ?w) (not (contains ?b ?w)))\n)\n```\n\n#### Action: Lower Heat\n```lisp\n(:action lower_heat\n    :parameters (?s - stove)\n    :precondition (and (on ?s) (hot ?s))\n    :effect (and (low ?s))\n)\n```\n\n#### Action: Flip Waffle\n```lisp\n(:action flip_waffle\n    :parameters (?w - waffle ?p - grill_pan)\n    :precondition (and (on ?p ?w) (cooked_side1 ?w))\n    :effect (and (cooked_side2 ?w) (not (cooked_side1 ?w)))\n)\n```\n\n#### Action: Cook Waffle\n```lisp\n(:action cook_waffle\n    :parameters (?w - waffle ?p - grill_pan)\n    :precondition (and (on ?p ?w) (not (cooked ?w)))\n    :effect (and (cooked ?w) (flavorful ?w))\n)\n```\n\n#### Action: Repeat Steps\n```lisp\n(:action repeat_steps\n    :parameters (?b - mixing_bowl ?w - waffle_batter)\n    :precondition (and (contains ?b ?w) (not (empty ?b)))\n    :effect (and (empty ?b) (cooked ?w))\n)\n```\n\n#### Action: Serve Waffles\n```lisp\n(:action serve_waffles\n    :parameters (?w - waffle ?k - kitchen)\n    :precondition (and (cooked ?w) (in_kitchen ?k))\n    :effect (and (served ?w) (messy ?k))\n)\n```\n\n### Notes:\n- The steps related to the \"npc\" and \"waffle fatter\" seemed either irrelevant or incorrectly specified, so they were adjusted accordingly.\n- The actions focus on the state changes of the entities involved, such as the waffle batter being mixed, the grill pan being preheated, and the waffles being cooked.\n- The \"serve\" action includes the kitchen becoming messy as a result of serving the waffles, reflecting a change in the kitchen's state.",
    "To generate PDDL actions for the task \"How to Make Egg White Waffles,\" we need to focus on the relevant state changes of the entities involved in each step. Here are the PDDL actions based on the provided task and steps:\n\n### PDDL Actions:\n\n```lisp\n(:action pour_ingredients\n  :parameters (?egg_whites - egg_whites ?bowl - mixing_bowl)\n  :precondition (and (in ?egg_whites ?container) (empty ?bowl))\n  :effect (and (not (in ?egg_whites ?container)) (in ?egg_whites ?bowl) (not (empty ?bowl)) (wetter ?bowl)))\n\n(:action mix_ingredients\n  :parameters (?bowl - mixing_bowl ?mixture - mixture)\n  :precondition (and (in ?mixture ?bowl) (separate ?mixture))\n  :effect (and (mixed ?mixture) (not (separate ?mixture)) (heavier ?bowl)))\n\n(:action add_protein\n  :parameters (?npc - npc ?mixture - mixture)\n  :precondition (and (mixed ?mixture) (not (protein_added ?mixture)))\n  :effect (and (protein_added ?mixture) (heavier ?mixture)))\n\n(:action repeat_whipping_process\n  :parameters (?blender - blender ?mixture - mixture)\n  :precondition (and (protein_added ?mixture) (off ?blender))\n  :effect (and (on ?blender) (spinning ?blender) (mixed ?mixture) (not (off ?blender))))\n\n(:action turn_on_waffle_machine\n  :parameters (?waffles - waffles)\n  :precondition (and (off ?waffles))\n  :effect (and (on ?waffles)))\n\n(:action spray_waffle_iron\n  :parameters (?waffle_inner - waffle_inner)\n  :precondition (and (clean ?waffle_inner))\n  :effect (and (dirty ?waffle_inner)))\n\n(:action pour_into_waffle_iron\n  :parameters (?waffle_inner - waffle_inner ?bowl - mixing_bowl)\n  :precondition (and (in ?mixture ?bowl) (on ?waffles) (dirty ?waffle_inner))\n  :effect (and (in ?mixture ?waffle_inner) (not (in ?mixture ?bowl))))\n\n(:action cook_waffles\n  :parameters (?npc - npc ?waffle_inner - waffle_inner)\n  :precondition (and (in ?mixture ?waffle_inner) (on ?waffles))\n  :effect (and (cooked ?mixture) (not (in ?mixture ?waffle_inner)) (in ?waffle ?waffle_inner)))\n\n(:action remove_waffle\n  :parameters (?waffle - waffle)\n  :precondition (and (cooked ?waffle))\n  :effect (and (not (cooked ?waffle)) (in ?waffle ?plate)))\n\n(:action add_ingredients_waffles\n  :parameters (?waffles - waffles)\n  :precondition (and (in ?waffle ?plate))\n  :effect (and (flavorful ?waffles)))\n\n(:action serve_waffles\n  :parameters (?npc - npc ?waffles - waffles)\n  :precondition (and (flavorful ?waffles))\n  :effect (and (served ?waffles) (enjoyed ?npc)))\n```\n\n### Explanation\n\n1. **pour_ingredients**: This action captures pouring egg whites into the mixing bowl, changing the location and wetness state of the bowl.\n2. **mix_ingredients**: This action involves mixing ingredients in a bowl, changing the mixture's state from separate to mixed.\n3. **add_protein**: Protein is added to the mixture, affecting its state by increasing weight and marking it as protein-added.\n4. **repeat_whipping_process**: Represents the action of using a blender to mix thoroughly, changing the state of the blender and ensuring the mixture is well-mixed.\n5. **turn_on_waffle_machine**: Turns on the waffle machine, changing its state from off to on.\n6. **spray_waffle_iron**: Prepares the waffle iron by spraying it, changing its cleanness state.\n7. **pour_into_waffle_iron**: The mixture is poured into the waffle iron, changing the location of the mixture.\n8. **cook_waffles**: Cooks the waffle, marking it as cooked and transferring it to the waffle inner.\n9. **remove_waffle**: Removes the cooked waffle from the iron to a plate.\n10. **add_ingredients_waffles**: Adds toppings or sides, changing the waffle's flavor state.\n11. **serve_waffles**: Final action to serve the waffles, marking them as served and enjoyed.\n\nThese actions capture the logical flow and state changes necessary to make egg white waffles, as described in the task.",
    "Based on the task \"How to Make Johnnycake\" and the provided steps, here are the PDDL actions that capture the entity state changes, preconditions, and effects:\n\n### PDDL Actions\n\n```lisp\n(:action whisk_ingredients\n    :parameters (?de - dry_equipment ?mb - mixing_bowl)\n    :precondition (and (organized ?de) (empty ?mb))\n    :effect (and (holding_flour_and_salt ?mb) (slightly_heavier ?mb) (mixed ?mb))\n)\n\n(:action rub_ingredients\n    :parameters (?b - blender-1)\n    :precondition (and (empty ?b) (off ?b))\n    :effect (and (fuller ?b) (heavier ?b) (mixed ?b) (on ?b))\n)\n\n(:action knead_dough\n    :parameters (?d - dough1)\n    :precondition (and (smooth ?d) (in_bowl ?d))\n    :effect (and (rigid ?d) (on_wax_paper ?d))\n)\n\n(:action rest_dough\n    :parameters (?d - dough1 ?npc - npc)\n    :precondition (and (rigid ?d) (on_wax_paper ?d) (visible ?npc))\n    :effect (and (warm ?d) (on_counter ?d))\n)\n\n(:action portion_into_balls\n    :parameters (?mb - mixing_bowl ?t - table)\n    :precondition (and (mixed ?mb) (clear ?t))\n    :effect (and (on_table ?mb) (cluttered ?t))\n)\n\n(:action heat_oil\n    :parameters (?sk - stove_knob ?v - velveeta)\n    :precondition (and (off ?sk) (cool ?v))\n    :effect (and (on ?sk) (hot ?v) (melted ?v))\n)\n\n(:action stretch_dough_balls\n    :parameters (?v - velveeta)\n    :precondition (and (melted ?v) (hot ?v))\n    :effect (and (runny ?v) (on_counter ?v))\n)\n\n(:action place_in_oil\n    :parameters (?jc - johnnycakes ?ho - hot_oil)\n    :precondition (and (in_bowl ?jc) (hot ?ho))\n    :effect (and (in_pan ?jc) (colder ?jc))\n)\n```\n\n### Explanation of Actions\n\n1. **whisk_ingredients**: This action involves whisking dry ingredients into the mixing bowl, changing its state to holding flour and salt, and making it slightly heavier and mixed.\n\n2. **rub_ingredients**: This action involves using a blender to mix ingredients, turning it from empty and off to fuller, heavier, mixed, and on.\n\n3. **knead_dough**: This action represents kneading the dough, changing it from smooth and in a bowl to rigid and on wax paper.\n\n4. **rest_dough**: This action allows the dough to rest, changing its state from rigid on wax paper to warm on the counter.\n\n5. **portion_into_balls**: This action involves portioning the dough into balls, moving the mixing bowl to the table and cluttering the table.\n\n6. **heat_oil**: This action heats the oil and melts the velveeta, changing the stove knob from off to on and the velveeta from cool to hot and melted.\n\n7. **stretch_dough_balls**: This action stretches the dough balls, changing the velveeta from melted and hot to runny and on the counter.\n\n8. **place_in_oil**: This action places the johnnycakes in hot oil, moving them from the bowl to the pan and changing their temperature from warm to colder.\n\nThese actions accurately reflect the task's steps and the relevant entity state changes.",
    "Based on the task description and the provided entity states, here are the PDDL actions for the task \"How to Make a Chaffle\":\n\n```lisp\n(:action wash-and-grate-zucchini\n    :parameters (?z - zucchini)\n    :precondition (and (inFridge ?z) (whole ?z))\n    :effect (and (outOnTable ?z) (cutUp ?z) (wet ?z) (not (inFridge ?z)) (not (whole ?z)))\n)\n\n(:action add-ingredients\n    :parameters (?z - zucchini ?t - tomato_center ?b - bowl)\n    :precondition (and (cutUp ?z) (diced ?t) (empty ?b))\n    :effect (and (mixed ?b) (not (empty ?b)))\n)\n\n(:action sprinkle-parmesan\n    :parameters (?p - parmesan ?w - waffle_machine)\n    :precondition (and (empty ?w))\n    :effect (and (fullWithParmesan ?w) (not (empty ?w)))\n)\n\n(:action spread-zucchini-mixture\n    :parameters (?m - mixture ?w - waffle_machine)\n    :precondition (and (fullWithParmesan ?w) (mixed ?m))\n    :effect (and (cooking ?m) (not (fullWithParmesan ?w)))\n)\n\n(:action close-lid\n    :parameters (?l - lid ?w - waffle_machine)\n    :precondition (and (open ?l) (cooking ?w))\n    :effect (and (closed ?l) (not (open ?l)))\n)\n\n(:action cook-chaffle\n    :parameters (?m - mixture ?k - kitchen)\n    :precondition (and (cooking ?m) (clean ?k))\n    :effect (and (cooked ?m) (messy ?k) (not (cooking ?m)))\n)\n\n(:action remove-chaffle\n    :parameters (?m - mixture ?w - waffle_machine)\n    :precondition (and (cooked ?m) (closed ?w))\n    :effect (and (cooling ?m) (open ?w) (not (cooked ?m)))\n)\n```\n\n### Explanation:\n1. **wash-and-grate-zucchini**: This action represents washing and grating the zucchini. The state changes from being in the fridge and whole to being out on the table, cut up, and wet.\n\n2. **add-ingredients**: This action involves adding grated zucchini and diced tomato into a bowl, changing the bowl's state from empty to mixed.\n\n3. **sprinkle-parmesan**: This action involves sprinkling parmesan into the waffle machine, changing its state from empty to full with parmesan.\n\n4. **spread-zucchini-mixture**: This action involves spreading the zucchini mixture into the waffle machine, transitioning the state to cooking and removing the parmesan.\n\n5. **close-lid**: This action involves closing the lid of the waffle machine, changing its state from open to closed.\n\n6. **cook-chaffle**: This action involves cooking the chaffle, changing the mixture's state from cooking to cooked and the kitchen's state from clean to messy.\n\n7. **remove-chaffle**: This action involves removing the chaffle from the waffle machine, changing the mixture's state from cooked to cooling and the waffle machine's state from closed to open.",
    "Based on the task \"How to Make Bacon Flavored Waffles\" and the provided steps, here are the PDDL actions that reflect the entity state changes:\n\n```pddl\n(:action cook_bacon\n    :parameters (?p - player ?b - bacon ?st - stove)\n    :precondition (and (at ?p ?st) (not (cooked ?b)) (on ?st))\n    :effect (and (cooked ?b) (greasy ?b))\n)\n\n(:action turn_off_stove\n    :parameters (?p - player ?st - stove)\n    :precondition (and (at ?p ?st) (on ?st))\n    :effect (not (on ?st))\n)\n\n(:action transfer_bacon\n    :parameters (?p - player ?b - bacon ?rack - cooling_rack)\n    :precondition (and (cooked ?b) (greasy ?b) (inventory ?p ?b) (at ?rack counter))\n    :effect (and (at ?b ?rack) (not (inventory ?p ?b)))\n)\n\n(:action dab_bacon\n    :parameters (?p - player ?b - bacon)\n    :precondition (and (at ?b cooling_rack) (greasy ?b))\n    :effect (not (greasy ?b))\n)\n\n(:action chop_bacon\n    :parameters (?p - player ?b - bacon)\n    :precondition (and (at ?b cooling_rack) (not (greasy ?b)) (not (chopped ?b)))\n    :effect (chopped ?b)\n)\n\n(:action combine_wet_ingredients\n    :parameters (?p - player ?bowl - mixing_bowl)\n    :precondition (and (at ?p counter) (empty ?bowl))\n    :effect (and (wet_ingredients ?bowl) (not (empty ?bowl)))\n)\n\n(:action mix_dry_ingredients\n    :parameters (?p - player ?bowl - mixing_bowl)\n    :precondition (and (at ?p counter) (wet_ingredients ?bowl))\n    :effect (and (mixed_ingredients ?bowl) (not (wet_ingredients ?bowl)))\n)\n\n(:action fold_bacon_into_mixture\n    :parameters (?p - player ?b - bacon ?bowl - mixing_bowl)\n    :precondition (and (chopped ?b) (mixed_ingredients ?bowl))\n    :effect (and (bacon_in_mixture ?bowl) (not (chopped ?b)))\n)\n\n(:action preheat_waffle_iron\n    :parameters (?p - player ?iron - waffle_iron)\n    :precondition (and (at ?p counter) (not (hot ?iron)))\n    :effect (hot ?iron)\n)\n\n(:action add_batter_to_iron\n    :parameters (?p - player ?bowl - mixing_bowl ?iron - waffle_iron)\n    :precondition (and (bacon_in_mixture ?bowl) (hot ?iron))\n    :effect (and (batter_in_iron ?iron) (not (bacon_in_mixture ?bowl)))\n)\n\n(:action cook_waffles\n    :parameters (?p - player ?iron - waffle_iron)\n    :precondition (and (batter_in_iron ?iron) (hot ?iron))\n    :effect (waffles_cooked)\n)\n\n(:action make_waffles\n    :parameters (?p - player ?w - waffles)\n    :precondition (waffles_cooked)\n    :effect (and (flavorful ?w) (tasty ?w))\n)\n\n(:action enjoy_waffles\n    :parameters (?p - player ?w - waffles)\n    :precondition (and (flavorful ?w) (tasty ?w))\n    :effect (enjoyed ?w)\n)\n```\n\nThese actions are designed to reflect the logical steps and entity state changes involved in making bacon-flavored waffles. Each action has a concise name, relevant parameters, preconditions, and effects that capture the essence of the task.",
    "Here are the PDDL actions for the task \"How to Make One Egg Waffles,\" reflecting the state changes of the entities involved:\n\n```lisp\n(:action whisk_ingredients\n    :parameters (?d - dry_equipment ?b - mixing_bowl)\n    :precondition (and (organized ?d) (empty ?b) (at ?d ?b))\n    :effect (and (holding_flour_and_salt ?b) (slightly_heavier ?b) (mixed ?b) (wetter ?b))\n)\n\n(:action add_ingredients_into_container\n    :parameters (?m - milk ?b - mixing_bowl)\n    :precondition (and (in_container ?m) (holding_flour_and_salt ?b) (mixed ?b))\n    :effect (and (in_blender ?m) (blended ?b))\n)\n\n(:action beat_ingredients\n    :parameters (?w - waffle_machine ?b - mixing_bowl)\n    :precondition (and (blended ?b) (empty ?w) (at ?b ?w))\n    :effect (and (full_with_polar_fleece ?w) (on ?w))\n)\n\n(:action cook\n    :parameters (?n - npc ?k - kitchen)\n    :precondition (and (invisible ?n) (messy ?k))\n    :effect (and (visible ?n) (clean ?k))\n)\n\n(:action remove_waffle\n    :parameters (?w - waffle)\n    :precondition (and (dirty ?w))\n    :effect (and (clean ?w) (light ?w))\n)\n\n(:action get_done\n    :parameters (?n - npc)\n    :precondition (and (visible ?n) (not (done ?n)))\n    :effect (done ?n)\n)\n```\n\n### Explanation of PDDL Actions:\n\n1. **whisk_ingredients**: This action involves whisking dry ingredients in a mixing bowl. The preconditions ensure the dry equipment is organized and the mixing bowl is empty. The effects reflect the mixing bowl now holding flour and salt, being slightly heavier, mixed, and wetter.\n\n2. **add_ingredients_into_container**: This action adds milk into the mixing bowl. Preconditions ensure the milk is in a container and the mixing bowl holds flour and salt and is mixed. The effects show the milk is added to the blender and the ingredients in the bowl are blended.\n\n3. **beat_ingredients**: This action involves beating the ingredients using a waffle machine. Preconditions ensure the ingredients are blended and the waffle machine is empty. The effects show the waffle machine is now full and turned on.\n\n4. **cook**: This action represents the cooking process. Preconditions ensure the NPC is invisible and the kitchen is messy. The effects show the NPC becomes visible and the kitchen is cleaned after cooking.\n\n5. **remove_waffle**: This action involves removing the waffle from the machine. Preconditions ensure the waffle is dirty. The effects reflect the waffle being cleaned and light after removal.\n\n6. **get_done**: This action signifies completion of the task. Preconditions ensure the NPC is visible and not done. The effect shows the NPC is now done with the task.",
    "Based on the provided task and steps for cooking frozen waffles, I'll generate PDDL actions that reflect the necessary entity state transitions. Here are the PDDL actions:\n\n```lisp\n(:action get-supplies\n    :parameters (?n - need)\n    :precondition (location ?n in_places)\n    :effect (and (location ?n ready_for_use))\n)\n\n(:action take-out-of-oven\n    :parameters (?g - grill ?o - oven)\n    :precondition (and (inOven ?g ?o) (off ?o))\n    :effect (and (not (inOven ?g ?o)) (onCounter ?g))\n)\n\n(:action turn-oven-broiler\n    :parameters (?s - stove_knob)\n    :precondition (and (power ?s off) (orientation ?s in_the_off_position))\n    :effect (and (power ?s on) (orientation ?s in_the_on_position))\n)\n\n(:action put-in-oven\n    :parameters (?g - grill ?o - oven)\n    :precondition (and (onCounter ?g) (power ?o on))\n    :effect (and (inOven ?g ?o) (not (onCounter ?g)))\n)\n\n(:action watch-waffles\n    :parameters (?w - waffles)\n    :precondition (and (location ?w present) (flavor ?w plain))\n    :effect (and (flavor ?w flavorful) (seasoning ?w tasty))\n)\n\n(:action put-oven\n    :parameters (?m - mitts ?g - grill ?o - oven)\n    :precondition (and (inOven ?g ?o) (onHands ?m))\n    :effect (and (not (inOven ?g ?o)) (onCounter ?g))\n)\n\n(:action flatten-waffles\n    :parameters (?w - waffles ?t - tool)\n    :precondition (and (flavor ?w flavorful) (seasoning ?w tasty) (tool ?t spatula))\n    :effect (and (flat ?w) (not (fluffy ?w)))\n)\n\n(:action finish-wreath\n    :parameters (?w - wreath)\n    :precondition (status ?w in_progress)\n    :effect (and (status ?w completed))\n)\n```\n\n### Notes:\n- The task involves cooking frozen waffles, so steps like \"finish-wreath\" seem unrelated, but I've included it as a placeholder action.\n- The action `put-oven` assumes the use of oven mitts to safely remove the grill from the oven.\n- The entity state transitions focus on changes in location, power, and food preparation status.\n- Some steps were modified or inferred to align with the task's logical flow, such as using a spatula for flipping waffles.",
    "To generate the PDDL actions for the task \"How to Whisk Eggs,\" we need to translate the given steps into meaningful actions that reflect the changes in the state of the entities involved. Given the descriptions and entity state transitions, we will focus on relevant actions and modify any irrelevant steps to fit the task context.\n\n### PDDL Actions:\n\n1. **Select Fresh Eggs**\n\n```pddl\n(:action select_eggs\n    :parameters (?p - person ?eggs - ingredient)\n    :precondition (and\n      (owned ?p ?eggs)\n      (fresh ?eggs)\n      (unselected ?eggs)\n    )\n    :effect (selected ?eggs)\n)\n```\n\n2. **Use Whisk Attachment on Stand Mixer**\n\n```pddl\n(:action attach_whisk\n    :parameters (?p - person ?mixer - appliance ?whisk - tool)\n    :precondition (and\n      (owned ?p ?mixer)\n      (owned ?p ?whisk)\n      (clean ?whisk)\n      (not (attached ?whisk ?mixer))\n    )\n    :effect (attached ?whisk ?mixer)\n)\n```\n\n3. **Combine Eggs and Sugar**\n\n```pddl\n(:action combine_ingredients\n    :parameters (?p - person ?eggs - ingredient ?sugar - ingredient ?bowl - container)\n    :precondition (and\n      (owned ?p ?eggs)\n      (owned ?p ?sugar)\n      (owned ?p ?bowl)\n      (selected ?eggs)\n      (empty ?bowl)\n    )\n    :effect (and\n      (mixed ?bowl)\n      (not (empty ?bowl))\n    )\n)\n```\n\n4. **Beat Mixture Until Pale Yellow**\n\n```pddl\n(:action beat_mixture\n    :parameters (?p - person ?mixer - appliance ?bowl - container)\n    :precondition (and\n      (owned ?p ?mixer)\n      (owned ?p ?bowl)\n      (attached ?whisk ?mixer)\n      (mixed ?bowl)\n    )\n    :effect (and\n      (pale_yellow ?bowl)\n      (not (mixed ?bowl))\n    )\n)\n```\n\n5. **Check for Ribboning**\n\n```pddl\n(:action check_for_ribboning\n    :parameters (?p - person ?bowl - container)\n    :precondition (and\n      (owned ?p ?bowl)\n      (pale_yellow ?bowl)\n    )\n    :effect (ribboned ?bowl)\n)\n```\n\n### Explanation:\n- **Select Fresh Eggs**: This action involves selecting fresh eggs, changing their state from unselected to selected.\n- **Attach Whisk**: This action attaches a clean whisk to the stand mixer, reflecting a change in the whisk's state.\n- **Combine Ingredients**: This action involves combining eggs and sugar in a bowl, transitioning the bowl's state from empty to mixed.\n- **Beat Mixture**: This action beats the mixture until it becomes pale yellow, indicating a change in the mixture's state.\n- **Check for Ribboning**: This action checks if the mixture has reached the desired consistency, marked as \"ribboned.\"\n\nThe steps have been adapted to fit the context of whisking eggs, focusing on the relevant state transitions for each step."
]