[
    "Here are the PDDL actions based on the task \"How to Make a Smash Book\" and its steps:\n\n```lisp\n(:action buy-composition-notebook\n    :parameters (?notebook - entity)\n    :precondition (in-store ?notebook)\n    :effect (and (in-possession ?notebook) (not (in-store ?notebook)))\n)\n\n(:action round-up-supplies\n    :parameters (?supplies - entity ?location - location)\n    :precondition (and (at ?supplies ?location) (not (gathered ?supplies)))\n    :effect (and (gathered ?supplies) (not (at ?supplies ?location)))\n)\n\n(:action choose-theme\n    :parameters (?book - entity ?theme - theme)\n    :precondition (and (has-not-theme ?book) (available ?theme))\n    :effect (and (has-theme ?book ?theme) (not (has-not-theme ?book)))\n)\n\n(:action create-cover\n    :parameters (?notebook - entity ?cover-material - entity)\n    :precondition (and (in-possession ?notebook) (in-possession ?cover-material) (not (decorated ?notebook)))\n    :effect (and (decorated ?notebook) (not (plain ?notebook)))\n)\n\n(:action gather-memorabilia\n    :parameters (?memorabilia - entity ?location - location)\n    :precondition (and (at ?memorabilia ?location) (not (gathered ?memorabilia)))\n    :effect (and (gathered ?memorabilia) (not (at ?memorabilia ?location)))\n)\n\n(:action add-memorabilia\n    :parameters (?memorabilia - entity ?notebook - entity)\n    :precondition (and (gathered ?memorabilia) (in-possession ?notebook) (not (added ?memorabilia ?notebook)))\n    :effect (and (added ?memorabilia ?notebook) (not (gathered ?memorabilia)))\n)\n\n(:action write-title-or-description\n    :parameters (?notebook - entity ?title - text ?page - page)\n    :precondition (and (in-possession ?notebook) (on-page ?page ?notebook) (not (has-title ?page)))\n    :effect (and (has-title ?page ?title) (not (has-no-title ?page)))\n)\n\n(:action hold-memorabilia\n    :parameters (?memorabilia - entity)\n    :precondition (and (not (in-possession ?memorabilia)) (available ?memorabilia))\n    :effect (and (in-possession ?memorabilia) (not (available ?memorabilia)))\n)\n```\n\n### Explanation of Actions:\n1. **`buy-composition-notebook`**: Represents purchasing a notebook, transitioning its state from being in the store to being in possession.\n2. **`round-up-supplies`**: Collects decorating supplies from a specific location, marking them as gathered.\n3. **`choose-theme`**: Assigns a theme to the book, changing its state from `has-not-theme` to `has-theme`.\n4. **`create-cover`**: Decorates the cover of the notebook using available materials, marking it as decorated.\n5. **`gather-memorabilia`**: Collects memorabilia from a location, marking it as gathered.\n6. **`add-memorabilia`**: Adds gathered memorabilia to the notebook, transitioning it to the `added` state.\n7. **`write-title-or-description`**: Allows adding a title or description to a specific page in the notebook, marking the page as titled.\n8. **`hold-memorabilia`**: Represents holding onto additional memorabilia for future use, transitioning its state to being in possession.\n\nThese actions collectively represent the task of making a Smash Book, capturing the relevant entity states and transitions at each step.",
    "Here are the PDDL actions for the task \"How to Create a Wedding Memory Book,\" based on the provided steps and descriptions. Each action captures the relevant entity state transitions and follows the format of the example.\n\n---\n\n### PDDL Actions:\n\n```lisp\n;; Action 1: Choose a website\n(:action choose-website\n    :parameters (?npc - user ?website - website)\n    :precondition (and (not (website-chosen ?npc ?website)))\n    :effect (website-chosen ?npc ?website)\n)\n\n;; Action 2: Upload pictures\n(:action upload-pictures\n    :parameters (?npc - user ?website - website ?pictures - pictures)\n    :precondition (and (website-chosen ?npc ?website)\n                       (not (pictures-uploaded ?npc ?website ?pictures)))\n    :effect (pictures-uploaded ?npc ?website ?pictures)\n)\n\n;; Action 3: Select a theme\n(:action select-theme\n    :parameters (?npc - user ?website - website ?theme - theme)\n    :precondition (and (website-chosen ?npc ?website)\n                       (pictures-uploaded ?npc ?website ?pictures)\n                       (not (theme-selected ?npc ?website ?theme)))\n    :effect (theme-selected ?npc ?website ?theme)\n)\n\n;; Action 4: Customize pages\n(:action customize-page\n    :parameters (?npc - user ?website - website ?theme - theme)\n    :precondition (and (theme-selected ?npc ?website ?theme)\n                       (not (pages-customized ?npc ?website)))\n    :effect (pages-customized ?npc ?website)\n)\n\n;; Action 5: Buy a copy of the book\n(:action buy-copy\n    :parameters (?npc - user ?website - website ?book - book)\n    :precondition (and (pages-customized ?npc ?website)\n                       (not (book-purchased ?npc ?book)))\n    :effect (book-purchased ?npc ?book)\n)\n```\n\n---\n\n### Explanation of Entity State Transitions:\n\n1. **`choose-website`**: The user (`?npc`) selects a website (`?website`) to create the memory book. The state change is represented by `(website-chosen ?npc ?website)`.\n\n2. **`upload-pictures`**: The user uploads pictures (`?pictures`) to the chosen website. The state change is represented by `(pictures-uploaded ?npc ?website ?pictures)`.\n\n3. **`select-theme`**: The user selects a design theme (`?theme`) for the memory book on the website. The state change is represented by `(theme-selected ?npc ?website ?theme)`.\n\n4. **`customize-page`**: The user customizes the pages of the memory book on the website. The state change is represented by `(pages-customized ?npc ?website)`.\n\n5. **`buy-copy`**: The user purchases a copy of the memory book (`?book`) after customizing the pages. The state change is represented by `(book-purchased ?npc ?book)`.\n\n---\n\n### Notes:\n\n- The parameters and state transitions are tailored to match the task's intent and logical flow.\n- Irrelevant or unclear steps were adjusted to align with the overall task (e.g., `npc` was clarified as the user, and redundant parameters like `covering_tracks` and `track` were omitted as they did not contribute to the task logic).\n- Each action's preconditions and effects were carefully crafted to reflect the logical dependencies and outcomes of the steps.",
    "Here are the PDDL actions generated for the task \"How to Make a Memory Book,\" based on the provided steps and descriptions:\n\n---\n\n### PDDL Actions for \"How to Make a Memory Book\"\n\n#### Action: find_template\n```lisp\n(:action find_template\n    :parameters (?npc - agent ?template - item ?track - location)\n    :precondition (and (at ?npc ?track) (template_available ?track))\n    :effect (and (template_found ?template) (assigned ?npc ?template))\n)\n```\n\n#### Action: prepare_content\n```lisp\n(:action prepare_content\n    :parameters (?you - agent ?content - item)\n    :precondition (and (content_ready ?content) (knows_how ?you prepare_content))\n    :effect (and (content_prepared ?content) (assigned ?you ?content))\n)\n```\n\n#### Action: pick_composing_style\n```lisp\n(:action pick_composing_style\n    :parameters (?character - agent ?style - style)\n    :precondition (and (knows_how ?character pick_style) (available ?style))\n    :effect (and (style_selected ?style) (assigned ?character ?style))\n)\n```\n\n#### Action: create_members_know\n```lisp\n(:action create_members_know\n    :parameters (?npc - agent ?memory_book - item)\n    :precondition (and (template_found ?memory_book) (style_selected ?memory_book))\n    :effect (and (members_notified ?npc ?memory_book) (design_started ?memory_book))\n)\n```\n\n#### Action: gather_members\n```lisp\n(:action gather_members\n    :parameters (?npc - agent ?memory_book - item)\n    :precondition (and (members_notified ?npc ?memory_book) (design_started ?memory_book))\n    :effect (and (members_contributed ?npc ?memory_book) (design_completed ?memory_book))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **find_template**:\n   - **Parameters**: The NPC (agent), the template (item), and the track (location).\n   - **Preconditions**: The NPC must be at the track, and a template must be available at the location.\n   - **Effect**: The template is found and assigned to the NPC.\n\n2. **prepare_content**:\n   - **Parameters**: The user (agent) and the content (item).\n   - **Preconditions**: The content must be ready, and the user must know how to prepare it.\n   - **Effect**: The content becomes prepared and is assigned to the user.\n\n3. **pick_composing_style**:\n   - **Parameters**: The character (agent) and the composing style (style).\n   - **Preconditions**: The character must know how to pick a style, and the style must be available.\n   - **Effect**: The style is selected and assigned to the character.\n\n4. **create_members_know**:\n   - **Parameters**: The NPC (agent) and the memory book (item).\n   - **Preconditions**: A template must be found, and a style must be selected for the memory book.\n   - **Effect**: Members are notified, and the design process is started for the memory book.\n\n5. **gather_members**:\n   - **Parameters**: The NPC (agent) and the memory book (item).\n   - **Preconditions**: Members must be notified, and the design process must be started.\n   - **Effect**: Members contribute to the memory book, and the design is completed.\n\n---\n\nThis set of PDDL actions captures the intent and logic of the task \"How to Make a Memory Book,\" ensuring that the state transitions for relevant entities (e.g., template, content, style, memory book) are accurately reflected.",
    "Here are the PDDL actions for the task \"How to Write a Salable Life Story,\" based on the provided steps and descriptions. The actions focus on the relevant state changes of the entities involved, such as the availability of recording devices, the collection and processing of information, and the creation and publication of the website.\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action bring_tape_recorder\n    :parameters (?r - recorder ?t - tape ?n - notepad)\n    :precondition (and (not (available ?r)) (not (available ?t)) (not (available ?n)))\n    :effect (and (available ?r) (available ?t) (available ?n))\n)\n\n(:action assign_interviewer\n    :parameters (?agent - historian ?npc - older_person)\n    :precondition (and (available ?agent) (available ?npc) (not (assigned ?agent ?npc)))\n    :effect (and (assigned ?agent ?npc))\n)\n\n(:action record_interview\n    :parameters (?agent - historian ?npc - older_person ?r - recorder ?t - tape)\n    :precondition (and (assigned ?agent ?npc) (available ?r) (available ?t) (not (recorded ?npc)))\n    :effect (and (recorded ?npc) (not (available ?t)))\n)\n\n(:action transcribe_recording\n    :parameters (?agent - historian ?npc - older_person ?t - tape ?n - notepad)\n    :precondition (and (recorded ?npc) (available ?n) (not (transcribed ?npc)))\n    :effect (and (transcribed ?npc))\n)\n\n(:action collect_photos_and_media\n    :parameters (?npc - older_person ?media - photo ?art - artwork ?audio - audiotape ?video - videotape)\n    :precondition (and (available ?npc) (not (collected ?media)) (not (collected ?art)) (not (collected ?audio)) (not (collected ?video)))\n    :effect (and (collected ?media) (collected ?art) (collected ?audio) (collected ?video))\n)\n\n(:action scan_photos\n    :parameters (?agent - historian ?media - photo ?track - track)\n    :precondition (and (collected ?media) (not (scanned ?media)))\n    :effect (and (scanned ?media) (on_track ?media ?track))\n)\n\n(:action create_life_story_website\n    :parameters (?agent - historian ?npc - older_person ?track - track)\n    :precondition (and (scanned ?media) (transcribed ?npc) (not (website_created ?npc)))\n    :effect (and (website_created ?npc) (contains ?track ?npc))\n)\n\n(:action publish_time_capsule\n    :parameters (?agent - historian ?npc - older_person ?track - track)\n    :precondition (and (website_created ?npc) (contains ?track ?npc) (not (published ?track)))\n    :effect (and (published ?track))\n)\n\n(:action archive_time_capsule\n    :parameters (?archive - history_archive ?track - track)\n    :precondition (and (published ?track) (not (archived ?track ?archive)))\n    :effect (and (archived ?track ?archive))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`bring_tape_recorder`**: Ensures the availability of necessary recording tools (tape recorder, tape, and notepad).\n\n2. **`assign_interviewer`**: Assigns a personal historian (or agent) to interview an older person.\n\n3. **`record_interview`**: Records the older person's answers using the tape recorder and tape. Marks the older person as \"recorded.\"\n\n4. **`transcribe_recording`**: Transcribes the recorded answers into text for future use, ensuring the content is preserved even if recording technology becomes obsolete.\n\n5. **`collect_photos_and_media`**: Collects additional materials (photos, artwork, audio, and video) provided by the older person.\n\n6. **`scan_photos`**: Scans the collected photos and associates them with a digital track for further processing.\n\n7. **`create_life_story_website`**: Combines the transcribed text and scanned photos into a website that documents the older person's life story.\n\n8. **`publish_time_capsule`**: Publishes the website online as a \"time capsule\" for the older person.\n\n9. **`archive_time_capsule`**: Archives the published time capsule in a historical archive for future reference.\n\n---\n\n### Task-Specific States:\n- **`available`**: Indicates whether an item (recorder, tape, notepad) is ready for use.\n- **`assigned`**: Indicates that a historian is assigned to an older person.\n- **`recorded`**: Marks the older person as having their answers recorded.\n- **`transcribed`**: Marks the recording as transcribed into text.\n- **`collected`**: Indicates that media (photos, artwork, etc.) have been collected.\n- **`scanned`**: Marks photos as scanned and digitized.\n- **`website_created`**: Indicates that a life story website has been created.\n- **`published`**: Marks the website as published online.\n- **`archived`**: Indicates that the time capsule (website) has been archived.\n\nThis approach captures the intent and state transitions for each step of the task while maintaining flexibility for task-specific nuances.",
    "Here are the PDDL actions for the task \"How to Make a Family Time Capsule,\" based on the given steps and descriptions. Irrelevant or unclear steps have been modified or clarified to align with the task, ensuring each action reflects the intent and logic of the task.\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action buy_shelter\n    :parameters (?npc - npc ?shelter - container ?moisture_sachet - moisture_absorber ?mothballs - mothballs)\n    :precondition (and (npc ?npc))\n    :effect (and (inventory ?npc ?shelter) (inventory ?npc ?moisture_sachet) (inventory ?npc ?mothballs))\n)\n\n(:action put_object_in_receptacle\n    :parameters (?agent - agent ?object - item ?receptacle - container)\n    :precondition (and (inventory ?agent ?object) (inventory ?agent ?receptacle))\n    :effect (and (in ?object ?receptacle) (not (inventory ?agent ?object)))\n)\n\n(:action create_family\n    :parameters (?npc - npc ?family - family)\n    :precondition (npc ?npc)\n    :effect (and (exists (?f - family_member) (part_of ?f ?family)))\n)\n\n(:action cut_family_member\n    :parameters (?npc - npc ?family_member - family_member ?hair_cutting - hair_sample ?envelope - container)\n    :precondition (and (part_of ?family_member ?family) (inventory ?npc ?envelope))\n    :effect (and (contains ?envelope ?hair_cutting) (cut ?hair_cutting ?family_member))\n)\n\n(:action write_family_member_questionnaire\n    :parameters (?agent - agent ?questionnaire - questionnaire ?family_member - family_member)\n    :precondition (and (inventory ?agent ?questionnaire) (part_of ?family_member ?family))\n    :effect (answered ?questionnaire ?family_member)\n)\n\n(:action listen_to_secret\n    :parameters (?npc - npc ?family_member - family_member ?description - description)\n    :precondition (and (part_of ?family_member ?family))\n    :effect (and (shared_secret ?family_member ?description))\n)\n\n(:action put_object_with_sentimental_value_in_receptacle\n    :parameters (?npc - npc ?object - item ?receptacle - container)\n    :precondition (and (inventory ?npc ?object) (has_sentimental_value ?object))\n    :effect (and (in ?object ?receptacle) (not (inventory ?npc ?object)))\n)\n\n(:action put_in_cocoa\n    :parameters (?user - user ?bottle - bottle ?cocoa - cocoa)\n    :precondition (and (inventory ?user ?bottle) (inventory ?user ?cocoa))\n    :effect (and (contains ?bottle ?cocoa))\n)\n\n(:action mark_date\n    :parameters (?npc - npc ?time_capsule - container ?date - date)\n    :precondition (and (inventory ?npc ?time_capsule))\n    :effect (and (marked ?time_capsule ?date))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`buy_shelter`**: Represents purchasing a sturdy container along with moisture-absorbing sachets and mothballs to preserve the contents of the time capsule.\n\n2. **`put_object_in_receptacle`**: A generic action for placing any item (e.g., letters, photos, or other objects) into the time capsule.\n\n3. **`create_family`**: Represents identifying or creating a \"family\" entity, which consists of individual family members.\n\n4. **`cut_family_member`**: Represents taking a hair cutting from a family member and placing it into a labeled envelope.\n\n5. **`write_family_member_questionnaire`**: Represents writing a questionnaire for a specific family member to answer.\n\n6. **`listen_to_secret`**: Represents listening to a family member\u2019s description of their ideal partner or a personal secret.\n\n7. **`put_object_with_sentimental_value_in_receptacle`**: Represents placing objects with sentimental value (e.g., unused but meaningful items) into the time capsule.\n\n8. **`put_in_cocoa`**: Represents adding cocoa powder to a bottle. This step is unclear in its relevance to the task but has been included as a generic action.\n\n9. **`mark_date`**: Represents marking the date on the time capsule for when it should be opened.\n\n---\n\n### Notes on Modifications:\n- Some steps were ambiguous or irrelevant (e.g., \"put_in_cocoa\"). These were retained as generic placeholders or adapted to fit the task context.\n- Actions were designed to emphasize state changes, such as placing items in the container (`put_object_in_receptacle`), creating a family structure (`create_family`), or marking the time capsule (`mark_date`).\n- Preconditions and effects ensure logical transitions, such as requiring an item in inventory before placing it in the receptacle and marking it as no longer in inventory afterward.\n\n",
    "Here are the PDDL actions for the task \"How to Make a Cookbook Scrapbook.\" Each action reflects the intent, logic, and state changes associated with the steps in the task. Irrelevant or unclear steps have been slightly adjusted to align with the task description.\n\n---\n\n### PDDL Actions\n\n```lisp\n(:action choose_scraps\n    :parameters (?p - player ?scrap - scraps)\n    :precondition (and (at ?p workspace) (available ?scrap))\n    :effect (and (inventory ?p ?scrap) (not (available ?scrap)))\n)\n\n(:action gather_cook\n    :parameters (?p - player ?l - location ?recipe - recipes)\n    :precondition (and (at ?p ?l) (has_kitchen ?l) (available ?recipe))\n    :effect (and (inventory ?p ?recipe) (not (available ?recipe)))\n)\n\n(:action create_theme\n    :parameters (?p - player ?sb - scrapbook)\n    :precondition (and (at ?p workspace) (inventory ?p ?sb))\n    :effect (and (themed ?sb) (not (unthemed ?sb)))\n)\n\n(:action choose_cardstock\n    :parameters (?p - player ?card - cardstock)\n    :precondition (and (at ?p workspace) (available ?card))\n    :effect (and (inventory ?p ?card) (not (available ?card)))\n)\n\n(:action protect_heirloom_card\n    :parameters (?p - player ?card - recipe_card)\n    :precondition (and (at ?p workspace) (inventory ?p ?card))\n    :effect (and (protected ?card) (not (unprotected ?card)))\n)\n\n(:action add_ingredients_to_scraps\n    :parameters (?p - player ?scrap - scraps ?book - scrapbook)\n    :precondition (and (at ?p workspace) (inventory ?p ?scrap) (inventory ?p ?book))\n    :effect (and (added_to_scrapbook ?scrap ?book) (not (inventory ?p ?scrap)))\n)\n\n(:action create_room\n    :parameters (?p - player ?cover - covering ?track - track)\n    :precondition (and (at ?p workspace) (inventory ?p ?cover) (inventory ?p ?track))\n    :effect (and (covered ?track ?cover) (not (inventory ?p ?cover)))\n)\n\n(:action place_tape_on_panel\n    :parameters (?p - player ?tab - tabs ?panel - panel)\n    :precondition (and (at ?p workspace) (inventory ?p ?tab))\n    :effect (and (tabbed_panel ?panel ?tab) (not (inventory ?p ?tab)))\n)\n\n(:action gather_gems\n    :parameters (?p - player ?gem - gems)\n    :precondition (and (at ?p workspace) (available ?gem))\n    :effect (and (inventory ?p ?gem) (not (available ?gem)))\n)\n```\n\n---\n\n### Explanation of Actions\n\n1. **`choose_scraps`**: Allows the player to select scraps for the scrapbook. The state of the scraps changes from `available` to `inventory` for the player.\n\n2. **`gather_cook`**: Represents gathering recipes from the kitchen. Recipes transition from `available` to being in the player's `inventory`.\n\n3. **`create_theme`**: Sets a theme for the scrapbook. The scrapbook state changes from `unthemed` to `themed`.\n\n4. **`choose_cardstock`**: The player selects cardstock for the scrapbook. The cardstock moves from `available` to the player's `inventory`.\n\n5. **`protect_heirloom_card`**: Protects heirloom recipe cards. The recipe card state changes from `unprotected` to `protected`.\n\n6. **`add_ingredients_to_scraps`**: Adds ingredients or elements (e.g., photos, stories) to the scrapbook. The scraps are removed from the player's inventory and added to the scrapbook.\n\n7. **`create_room`**: Covers tracks or sections with a protective covering. The covering is removed from the player's inventory and applied to the track.\n\n8. **`place_tape_on_panel`**: Places tabs on panels to organize sections. Tabs are removed from the player's inventory and applied to the panel.\n\n9. **`gather_gems`**: Collects decorative gems for the scrapbook. Gems move from `available` to the player's `inventory`.\n\n---\n\n### Notes:\n\n- **State Transitions**: Each action focuses on the relevant state changes, such as moving items from `available` to `inventory`, or changing the state of objects (e.g., `themed`, `protected`, `added_to_scrapbook`).\n- **Task-Specific Adjustments**: Steps that seemed ambiguous or irrelevant were interpreted in a way that aligns with the task's goal of creating a cookbook scrapbook.\n- **Parameters**: Parameters were chosen to represent the entities involved in each action (e.g., player, scrapbook, scraps, tabs). \n\nThis PDDL representation captures the logic and flow of the task effectively.",
    "Here are the PDDL actions for the task \"How to Write a Flashback\" based on the provided steps and descriptions:\n\n```lisp\n(:action choose_focus ; choose a powerful moment as the focus of the flashback\n      :parameters (?moment - moment ?writer - writer) \n      :precondition (and (is_writer ?writer))\n      :effect (and (focus_on ?moment))\n   )\n\n(:action pinpoint_flashback_time ; determine when the flashback takes place\n      :parameters (?moment - moment ?time - time ?writer - writer) \n      :precondition (and (focus_on ?moment) (is_writer ?writer))\n      :effect (and (flashback_time ?moment ?time))\n   )\n\n(:action label_with_name ; label the flashback clearly in the script\n      :parameters (?flashback - flashback ?label - label ?writer - writer) \n      :precondition (and (is_writer ?writer) (flashback_time ?flashback ?time))\n      :effect (and (labeled_flashback ?flashback ?label))\n   )\n\n(:action set_visual_cue ; use visual cues to set the flashback apart\n      :parameters (?flashback - flashback ?cue - visual_cue ?writer - writer) \n      :precondition (and (is_writer ?writer) (labeled_flashback ?flashback ?label))\n      :effect (and (flashback_has_visual_cue ?flashback ?cue))\n   )\n\n(:action set_transition_into_flashback ; establish a clear transition into the flashback\n      :parameters (?character - character ?flashback - flashback ?writer - writer) \n      :precondition (and (is_writer ?writer) (flashback_has_visual_cue ?flashback ?cue))\n      :effect (and (transition_into_flashback ?character ?flashback))\n   )\n\n(:action make_smooth_transition_out_of_flashback ; make a smooth transition out of the flashback\n      :parameters (?character - character ?flashback - flashback ?writer - writer) \n      :precondition (and (transition_into_flashback ?character ?flashback) (is_writer ?writer))\n      :effect (and (smooth_transition_out_of_flashback ?character ?flashback))\n   )\n```\n\n### Explanation:\n1. **choose_focus**: Captures the step of selecting a powerful moment as the focus of the flashback. The relevant state change is that the writer now has a focused moment.\n2. **pinpoint_flashback_time**: Adds the step of determining when the flashback takes place. This step introduces a state where the flashback is associated with a specific time.\n3. **label_with_name**: Reflects the step of labeling the flashback clearly in the script. The state of the flashback changes to being labeled.\n4. **set_visual_cue**: Represents the use of visual cues or other devices to set the flashback apart. This ensures the flashback has distinguishing features.\n5. **set_transition_into_flashback**: Establishes a clear transition into the flashback. The state change involves the character being transitioned into the flashback.\n6. **make_smooth_transition_out_of_flashback**: Ensures a smooth transition out of the flashback, completing the process.\n\n### Adjustments:\n- Steps like \"pistol_shot npc\" and \"set_back_door npc hallway\" were irrelevant to the task of writing a flashback, so they were excluded.\n- Task-specific states such as `focus_on`, `flashback_time`, `labeled_flashback`, and `transition_into_flashback` were introduced to represent the logical flow of writing a flashback.",
    "Here are the PDDL actions based on the \"How to Make Lists\" task and its steps:\n\n```lisp\n;; Action 1: Save money by creating a grocery list\n(:action save_money\n    :parameters (?npc - person)\n    :precondition (and\n                    (wants_to_save_money ?npc)\n                    (not (has_grocery_list ?npc)))\n    :effect (and\n              (has_grocery_list ?npc)\n              (smarter_shopping ?npc))\n)\n\n;; Action 2: Create a packing list for travel preparation\n(:action create_packing_list\n    :parameters (?npc - person ?location - location)\n    :precondition (and\n                    (wants_to_travel ?npc)\n                    (not (has_packing_list ?npc))\n                    (packing_items_available ?location))\n    :effect (and\n              (has_packing_list ?npc)\n              (prepared_for_travel ?npc))\n)\n\n;; Action 3: Brainstorm a bucket list for motivation\n(:action create_bucket_list\n    :parameters (?npc - person ?goal - goal)\n    :precondition (and\n                    (wants_motivation ?npc)\n                    (not (has_bucket_list ?npc))\n                    (goal_defined ?goal))\n    :effect (and\n              (has_bucket_list ?npc)\n              (motivated ?npc))\n)\n```\n\n### Explanation:\n1. **Action: `save_money`**\n   - This action corresponds to creating a grocery list to shop smarter and save money. The precondition checks if the person (`?npc`) wants to save money and does not already have a grocery list. The effect is that the person now has a grocery list and can shop smarter.\n\n2. **Action: `create_packing_list`**\n   - This action ensures the person (`?npc`) creates a packing list to prepare for travel. The precondition verifies that the person wants to travel, does not yet have a packing list, and that packing items are available at a specified location (`?location`). The effect is that the person now has a packing list and is prepared for travel.\n\n3. **Action: `create_bucket_list`**\n   - This action helps the person (`?npc`) brainstorm a bucket list to stay motivated. The precondition checks that the person wants motivation, does not already have a bucket list, and there is a defined goal (`?goal`) to work toward. The effect is that the person now has a bucket list and feels motivated.\n\nThese actions focus on the changes in the entity states, such as whether the person has a list (grocery, packing, or bucket list), and their associated outcomes (smarter shopping, travel preparedness, and motivation).",
    "Below are the PDDL actions generated for the task \"How to Make a Storybook Wedding Album\" based on the provided steps and descriptions. The actions capture the intent, logic, and state changes of the entities involved in the task:\n\n---\n\n### PDDL Actions\n\n#### 1. Scan Wedding Invitation\n```lisp\n(:action scan_invitation\n    :parameters (?p - player ?invitation - item ?studio - location)\n    :precondition (and (at ?p ?studio) (at ?invitation ?studio))\n    :effect (and (scanned ?invitation) (not (at ?invitation ?studio)))\n)\n```\n\n#### 2. Dedicate a Page for Preparations\n```lisp\n(:action dedicate_page\n    :parameters (?p - player ?page - item ?section - section)\n    :precondition (and (inventory ?p ?page) (not (dedicated ?page ?section)))\n    :effect (and (dedicated ?page ?section))\n)\n```\n\n#### 3. Check Page Content\n```lisp\n(:action check_page\n    :parameters (?p - player ?page - item ?content - topic)\n    :precondition (and (dedicated ?page ?content) (inventory ?p ?page))\n    :effect (and (verified ?page ?content))\n)\n```\n\n#### 4. Take Page to Vendor\n```lisp\n(:action take_page_to_vendor\n    :parameters (?p - player ?page - item ?vendor - location)\n    :precondition (and (inventory ?p ?page) (at ?p ?vendor))\n    :effect (and (delivered ?page ?vendor) (not (inventory ?p ?page)))\n)\n```\n\n#### 5. Put Focus on Ceremony\n```lisp\n(:action put_focus_on_ceremony\n    :parameters (?p - player ?section - section ?ceremony - event)\n    :precondition (and (dedicated ?section ?ceremony) (not (focused ?section ?ceremony)))\n    :effect (and (focused ?section ?ceremony))\n)\n```\n\n#### 6. Create Group Shot\n```lisp\n(:action create_group_shot\n    :parameters (?p - player ?group - photo)\n    :precondition (and (not (created ?group)))\n    :effect (and (created ?group))\n)\n```\n\n#### 7. Celebrate the Celebration\n```lisp\n(:action celebrate_wreath\n    :parameters (?p - player ?wreath - item)\n    :precondition (and (inventory ?p ?wreath))\n    :effect (and (celebrated ?wreath))\n)\n```\n\n#### 8. Save Page with Toasts and Speeches\n```lisp\n(:action save_page\n    :parameters (?p - player ?page - item ?section - section)\n    :precondition (and (dedicated ?page ?section) (inventory ?p ?page))\n    :effect (and (saved ?page ?section))\n)\n```\n\n#### 9. Be Amazed\n```lisp\n(:action be_amazed\n    :parameters (?couple - people)\n    :precondition (and (present ?couple))\n    :effect (and (amazed ?couple))\n)\n```\n\n#### 10. Capture Cake Cutting\n```lisp\n(:action cut_cake\n    :parameters (?bowl - item ?table - location)\n    :precondition (and (at ?bowl ?table) (not (cut ?bowl)))\n    :effect (and (cut ?bowl))\n)\n```\n\n#### 11. Capture Fun Shots (Bouquet and Garters)\n```lisp\n(:action get_amazed\n    :parameters (?bride - person ?bouquet - item ?garters - item)\n    :precondition (and (inventory ?bride ?bouquet) (inventory ?bride ?garters))\n    :effect (and (fun_shot ?bouquet) (fun_shot ?garters))\n)\n```\n\n#### 12. Use Miscellaneous Photos as Gems\n```lisp\n(:action use_as_gems\n    :parameters (?p - player ?page - item ?content - topic)\n    :precondition (and (dedicated ?page ?content) (inventory ?p ?page))\n    :effect (and (gem ?page ?content))\n)\n```\n\n#### 13. Finish Album\n```lisp\n(:action finish_album\n    :parameters (?p - player ?album - item)\n    :precondition (and (not (completed ?album)))\n    :effect (and (completed ?album))\n)\n```\n\n---\n\n### Explanation of State Transitions\n1. **Scan Wedding Invitation:** The invitation\u2019s state changes to `scanned` and it is no longer at the studio.\n2. **Dedicate Page for Preparations:** The state of the page changes to `dedicated` for a specific section.\n3. **Check Page Content:** The page's state changes to `verified` for its content.\n4. **Take Page to Vendor:** The page is delivered to the vendor and is no longer in the player\u2019s inventory.\n5. **Put Focus on Ceremony:** The ceremony section\u2019s state changes to `focused`.\n6. **Create Group Shot:** A new group shot is created.\n7. **Celebrate the Celebration:** The wreath\u2019s state changes to `celebrated`.\n8. **Save Page with Toasts and Speeches:** The page\u2019s state changes to `saved` in the specified section.\n9. **Be Amazed:** The couple\u2019s state changes to `amazed`.\n10. **Capture Cake Cutting:** The bowl\u2019s state changes to `cut`.\n11. **Capture Fun Shots:** The bouquet and garters\u2019 states change to `fun_shot`.\n12. **Use Miscellaneous Photos as Gems:** The page\u2019s state changes to `gem` for its content.\n13. **Finish Album:** The album\u2019s state changes to `completed`.\n\nThis set of actions ensures that the task of creating a storybook wedding album is well-represented in PDDL, with clear state transitions and logical steps."
]