[
    "Here are the PDDL actions for the task \"How to Melt Ice Quickly,\" based on the given steps and descriptions. Each action captures the logic and state transitions relevant to the task:\n\n---\n\n```lisp\n;; Action 1: Move ice to the sink\n(:action move_ice_to_sink\n    :parameters (?ice_cube - item ?npc - agent ?sink - location ?current_location - location)\n    :precondition (and\n      (at ?ice_cube ?current_location)\n      (at ?npc ?current_location)\n      (not (= ?current_location ?sink))\n    )\n    :effect (and\n      (at ?ice_cube ?sink)\n      (at ?npc ?sink)\n      (not (at ?ice_cube ?current_location))\n      (not (at ?npc ?current_location))\n    )\n)\n\n;; Action 2: Melt ice under hot water\n(:action melt_ice_under_hot_water\n    :parameters (?ice_cube - item ?sink - location)\n    :precondition (and\n      (at ?ice_cube ?sink)\n      (not (melted ?ice_cube))\n    )\n    :effect (and\n      (melted ?ice_cube)\n    )\n)\n\n;; Action 3: Melt ice with a hair dryer\n(:action melt_ice_with_hair_dryer\n    :parameters (?ice_cube - item ?npc - agent ?freezer - location ?hair_dryer - tool)\n    :precondition (and\n      (at ?ice_cube ?freezer)\n      (at ?npc ?freezer)\n      (available ?hair_dryer)\n      (not (melted ?ice_cube))\n    )\n    :effect (and\n      (melted ?ice_cube)\n    )\n)\n\n;; Action 4: Add salt and water to ice\n(:action add_salt_and_water\n    :parameters (?ice_cube - item ?mixing_bowl - container ?npc - agent ?salt - item ?water - item)\n    :precondition (and\n      (at ?ice_cube ?mixing_bowl)\n      (at ?salt ?mixing_bowl)\n      (at ?water ?mixing_bowl)\n      (not (melted ?ice_cube))\n    )\n    :effect (and\n      (melted ?ice_cube)\n    )\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`move_ice_to_sink`**:\n   - This action moves the ice cube to the sink if it is not already there. The preconditions ensure that the ice cube and the NPC are at the same location, and the sink is the target location. The effects update the location of the ice cube and the NPC.\n\n2. **`melt_ice_under_hot_water`**:\n   - This action melts the ice cube under hot water at the sink. The precondition checks that the ice cube is at the sink and not yet melted. The effect updates the state of the ice cube to \"melted.\"\n\n3. **`melt_ice_with_hair_dryer`**:\n   - This action uses a hair dryer to melt the ice cube in the freezer or refrigerator. The preconditions ensure that the ice cube is in the freezer, the NPC is present, and the hair dryer is available. The effect updates the state of the ice cube to \"melted.\"\n\n4. **`add_salt_and_water`**:\n   - This action involves adding salt and water to the ice cube in a mixing bowl to melt it. The preconditions ensure that the ice cube, salt, and water are all in the mixing bowl, and the ice cube is not yet melted. The effect updates the state of the ice cube to \"melted.\"\n\n### Task-Specific Adjustments:\n- The steps were interpreted and refined to ensure relevance and logical consistency with the task of melting ice.\n- Actions like \"move_to_sink npc\" were adjusted to include the ice cube as an object being moved.\n- Each action focuses on the transition of the ice cube's state from \"not melted\" to \"melted,\" as this is the core objective of the task.\n\n",
    "Here are the PDDL actions for the task \"How to Cut in Butter,\" based on the described steps and requirements:\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action cut_ingredients ; cut butter into cubes\n   :parameters (?butter - ingredient ?p - player)\n   :precondition (and (inventory ?p ?butter) (is_butter ?butter) (frozen ?butter))\n   :effect (and (not (frozen ?butter)) (cut_into_cubes ?butter))\n)\n\n(:action pulse_ingredients ; pulse ingredients in a blender\n   :parameters (?blender - appliance ?mixture - ingredient ?p - player)\n   :precondition (and (at ?p ?blender) (contains ?blender ?mixture) (is_blender ?blender) (cut_into_cubes ?mixture))\n   :effect (and (pulsed ?mixture) (not (cut_into_cubes ?mixture)))\n)\n\n(:action mix_ingredients ; mix ingredients in the blender\n   :parameters (?oil - ingredient ?blender - appliance ?mixture - ingredient ?p - player)\n   :precondition (and (at ?p ?blender) (contains ?blender ?mixture) (is_blender ?blender) (pulsed ?mixture) (inventory ?p ?oil) (is_canola_oil ?oil))\n   :effect (and (mixed ?mixture) (not (pulsed ?mixture)))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`cut_ingredients`:**\n   - **Parameters:** The butter to be cut and the player performing the task.\n   - **Preconditions:**\n     - The player must have the butter in their inventory.\n     - The butter must be identified as butter and must be frozen.\n   - **Effects:**\n     - The butter is no longer frozen.\n     - The butter is now in a state of being \"cut into cubes.\"\n\n2. **`pulse_ingredients`:**\n   - **Parameters:** The blender used, the mixture being pulsed, and the player performing the task.\n   - **Preconditions:**\n     - The player must be at the location of the blender.\n     - The blender must already contain the mixture.\n     - The mixture must be in a \"cut into cubes\" state.\n   - **Effects:**\n     - The mixture is now in a \"pulsed\" state.\n     - The \"cut into cubes\" state is removed, as the pulsing process transforms the mixture.\n\n3. **`mix_ingredients`:**\n   - **Parameters:** The canola oil, the blender, the mixture being mixed, and the player performing the task.\n   - **Preconditions:**\n     - The player must be at the location of the blender.\n     - The blender must already contain the pulsed mixture.\n     - The mixture must be in a \"pulsed\" state.\n     - The player must have canola oil in their inventory.\n     - The oil must be identified as canola oil.\n   - **Effects:**\n     - The mixture is now in a \"mixed\" state.\n     - The \"pulsed\" state is removed, as the mixing process transforms the mixture.\n\n---\n\n### Notes:\n- The actions focus on **state changes** of the butter and mixture (e.g., frozen \u2192 cut_into_cubes \u2192 pulsed \u2192 mixed).\n- The **relevant entities** (butter, blender, mixture, canola oil) and their states are carefully modeled.\n- Irrelevant or ambiguous steps were clarified and aligned with the task description.\n",
    "Here are the PDDL actions for the task \"How to Melt Glue Sticks,\" capturing the intent, logic, and state changes of each step:\n\n```lisp\n(:action obtain_glue_gun\n    :parameters (?npc - agent ?gg - glue_gun)\n    :precondition (and (not (obtained ?gg)) (available ?gg))\n    :effect (and (obtained ?gg) (not (available ?gg)))\n)\n\n(:action plug_in_glue_gun\n    :parameters (?user - agent ?gg - glue_gun ?surface - surface)\n    :precondition (and (obtained ?gg) (not (plugged_in ?gg)) (stable_surface ?surface))\n    :effect (and (plugged_in ?gg) (heating ?gg))\n)\n\n(:action squeeze_trigger\n    :parameters (?user - agent ?gg - glue_gun ?glue - glue)\n    :precondition (and (plugged_in ?gg) (heating ?gg) (loaded ?gg ?glue) (not (melted ?glue)))\n    :effect (and (melted ?glue) (dispensed ?glue) (not (loaded ?gg ?glue)))\n)\n\n(:action insert_stick\n    :parameters (?npc - agent ?gg - glue_gun ?stick - glue_stick)\n    :precondition (and (plugged_in ?gg) (not (loaded ?gg ?stick)) (available ?stick))\n    :effect (and (loaded ?gg ?stick) (not (available ?stick)))\n)\n```\n\n### Breakdown of Actions:\n\n1. **`obtain_glue_gun`**:\n   - **Parameters**: The `npc` (an agent, e.g., a non-player character) and the glue gun (`gg`).\n   - **Preconditions**: The glue gun is available and not yet obtained.\n   - **Effects**: The glue gun is marked as obtained and no longer available.\n\n2. **`plug_in_glue_gun`**:\n   - **Parameters**: The `user` (agent performing the action), the glue gun (`gg`), and a stable surface (`surface`).\n   - **Preconditions**: The glue gun has been obtained, is not yet plugged in, and is placed on a stable surface (e.g., cardboard or newspaper).\n   - **Effects**: The glue gun is plugged in and begins heating.\n\n3. **`squeeze_trigger`**:\n   - **Parameters**: The `user` (agent), the glue gun (`gg`), and the glue stick (`glue`).\n   - **Preconditions**: The glue gun is plugged in, heating, loaded with a glue stick, and the glue stick is not yet melted.\n   - **Effects**: The glue stick melts, is dispensed, and is no longer loaded in the glue gun.\n\n4. **`insert_stick`**:\n   - **Parameters**: The `npc` (agent), the glue gun (`gg`), and the glue stick (`stick`).\n   - **Preconditions**: The glue gun is plugged in, and the glue stick is available but not yet loaded into the glue gun.\n   - **Effects**: The glue stick is loaded into the glue gun and is no longer available.\n\n### Notes:\n- The glue gun's states (e.g., `obtained`, `plugged_in`, `heating`, `loaded`) and the glue stick's states (e.g., `available`, `melted`) are central to tracking the task's progress.\n- Irrelevant or unclear steps were adjusted to fit the logical flow of the task. For example, the task description implied that the glue stick must be inserted into the gun when needed, which is reflected in the `insert_stick` action.",
    "Here are the PDDL actions for the task \"How to Melt Peanut Butter.\" Each action reflects the intent, logic, and state changes of the steps in the task:\n\n---\n\n### PDDL Actions\n\n#### Action: measure_peanut_butter\n```lisp\n(:action measure_peanut_butter\n    :parameters (?p - player ?pb - peanut_butter ?m - measuring_tool ?l - location)\n    :precondition (and (at ?p ?l) (at ?pb ?l) (at ?m ?l) (not (measured ?pb)))\n    :effect (and (measured ?pb))\n)\n```\n\n#### Action: scoop_peanut_butter\n```lisp\n(:action scoop_peanut_butter\n    :parameters (?p - player ?pb - peanut_butter ?m - measuring_tool ?b - blender ?l - location)\n    :precondition (and (at ?p ?l) (at ?pb ?l) (measured ?pb) (at ?b ?l) (at ?m ?l) (not (in ?pb ?b)))\n    :effect (and (in ?pb ?b))\n)\n```\n\n#### Action: blend_on_low_speed\n```lisp\n(:action blend_on_low_speed\n    :parameters (?p - player ?b - blender ?pb - peanut_butter)\n    :precondition (and (at ?p blender) (in ?pb ?b) (not (blended ?pb)) (not (on_high_speed ?b)))\n    :effect (and (blended ?pb) (on_low_speed ?b))\n)\n```\n\n---\n\n### Explanation of Actions\n\n1. **`measure_peanut_butter`**:\n   - The player uses a measuring tool to measure the peanut butter.\n   - Preconditions: The player, peanut butter, and measuring tool must all be at the same location. The peanut butter must not already be measured.\n   - Effects: The peanut butter is now marked as measured.\n\n2. **`scoop_peanut_butter`**:\n   - The player scoops the measured peanut butter into the blender.\n   - Preconditions: The player, peanut butter, blender, and measuring tool must all be at the same location. The peanut butter must already be measured. It must not already be in the blender.\n   - Effects: The peanut butter is now in the blender.\n\n3. **`blend_on_low_speed`**:\n   - The player blends the peanut butter on low speed.\n   - Preconditions: The player must be at the blender, and the peanut butter must be inside the blender. The peanut butter must not already be blended, and the blender must not be running on high speed.\n   - Effects: The peanut butter is now blended, and the blender is running on low speed.\n\nThese actions accurately represent the steps required to melt peanut butter using a blender. Each action captures the relevant state transitions (e.g., measuring, scooping, blending) and ensures logical consistency in the sequence of operations.",
    "Here are the PDDL actions for the task \"How to Clarify Butter,\" based on the provided steps and their descriptions:\n\n```lisp\n(:action put_ingredients_in_glass ; put unsalted butter into a glass\n    :parameters (?p - player ?loc - location ?butter - ingredient ?glass - glass)\n    :precondition (and (at ?p ?loc) (at ?butter ?loc) (at ?glass ?loc) (empty ?glass))\n    :effect (and (contains ?glass ?butter) (not (empty ?glass)))\n)\n\n(:action put_glass_into_microwave ; place the glass with butter into the microwave\n    :parameters (?p - player ?loc - location ?glass - glass ?microwave - microwave)\n    :precondition (and (at ?p ?loc) (at ?glass ?loc) (at ?microwave ?loc) (contains ?glass ?butter))\n    :effect (and (in ?glass ?microwave) (not (at ?glass ?loc)))\n)\n\n(:action set_glass_stand ; let the glass stand for a couple of minutes\n    :parameters (?p - player ?loc - location ?glass - glass)\n    :precondition (and (at ?p ?loc) (in ?glass ?microwave) (contains ?glass ?butter))\n    :effect (and (separated ?butter ?glass) (not (hot ?glass)))\n)\n\n(:action squeeze_turkey_baster ; use a turkey baster to separate clarified butter\n    :parameters (?p - player ?loc - location ?baster - tool ?glass - glass ?clarified_butter - ingredient)\n    :precondition (and (at ?p ?loc) (at ?baster ?loc) (separated ?butter ?glass) (contains ?glass ?butter))\n    :effect (and (contains ?baster ?clarified_butter) (not (contains ?glass ?clarified_butter)))\n)\n\n(:action transfer_to_container ; transfer clarified butter into a separate container\n    :parameters (?p - player ?loc - location ?baster - tool ?container - container ?clarified_butter - ingredient)\n    :precondition (and (at ?p ?loc) (at ?baster ?loc) (at ?container ?loc) (contains ?baster ?clarified_butter))\n    :effect (and (contains ?container ?clarified_butter) (not (contains ?baster ?clarified_butter)))\n)\n```\n\n### Explanation of Actions:\n1. **put_ingredients_in_glass**:\n   - This action represents putting unsalted butter into a glass. The glass must be empty before this action can occur.\n\n2. **put_glass_into_microwave**:\n   - This action places the glass containing the butter into the microwave. The glass must already contain butter before it can be placed in the microwave.\n\n3. **set_glass_stand**:\n   - After microwaving, the glass is left to stand for a couple of minutes, allowing the butter to separate into clarified butter and milk solids. The glass is no longer hot after this step.\n\n4. **squeeze_turkey_baster**:\n   - A turkey baster is used to extract the clarified butter from the separated contents in the glass.\n\n5. **transfer_to_container**:\n   - The clarified butter is transferred from the turkey baster into a separate container.\n\n### Notes:\n- The original step **\"gotolocation agent container\"** was not relevant to the task and was omitted. Instead, the relevant step of transferring clarified butter to a container was added as the final step.\n- Preconditions and effects were carefully designed to reflect the specific state changes involved in clarifying butter.",
    "Here are the PDDL actions generated for the task \"How to Measure Butter,\" based on the provided steps and descriptions. Irrelevant or unclear steps have been adjusted to align with the task's description and intent.\n\n---\n\n### PDDL Actions for \"How to Measure Butter\"\n\n```lisp\n(:action slice_butter_into_cubes\n    :parameters (?p - person ?butter - butter ?knife - knife ?cutting_board - cutting_board)\n    :precondition (and (at ?p ?cutting_board) (inventory ?p ?knife) (at ?butter ?cutting_board))\n    :effect (and (sliced ?butter) (not (whole ?butter)))\n)\n\n(:action fill_measuring_cup_with_water\n    :parameters (?p - person ?cup - measuring_cup ?water - water_source)\n    :precondition (and (at ?p ?water) (inventory ?p ?cup) (has_water ?water))\n    :effect (and (filled ?cup ?water) (not (empty ?cup)))\n)\n\n(:action calculate_butter_amount\n    :parameters (?p - person ?cup - measuring_cup ?butter - butter ?bowl - mixing_bowl)\n    :precondition (and (at ?p ?bowl) (sliced ?butter) (filled ?cup ?water))\n    :effect (and (calculated ?butter ?cup) (ready_to_measure ?butter)))\n)\n\n(:action put_butter_in_measuring_cup\n    :parameters (?p - person ?butter - butter ?cup - measuring_cup)\n    :precondition (and (at ?p ?cup) (sliced ?butter) (ready_to_measure ?butter) (filled ?cup ?water))\n    :effect (and (in ?butter ?cup) (measuring ?butter)))\n)\n\n(:action push_butter_down\n    :parameters (?p - person ?butter - butter ?cup - measuring_cup)\n    :precondition (and (at ?p ?cup) (in ?butter ?cup) (piling_up ?butter))\n    :effect (and (not (piling_up ?butter)) (evenly_distributed ?butter)))\n)\n\n(:action stop_adding_butter\n    :parameters (?p - person ?butter - butter ?cup - measuring_cup ?water - water)\n    :precondition (and (at ?p ?cup) (in ?butter ?cup) (reached_measurement ?water ?cup))\n    :effect (and (measured ?butter) (not (adding ?butter))))\n)\n\n(:action drain_water_from_cup\n    :parameters (?p - person ?cup - measuring_cup ?water - water)\n    :precondition (and (at ?p ?cup) (filled ?cup ?water) (measured ?butter))\n    :effect (and (drained ?water ?cup) (not (filled ?cup ?water))))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`slice_butter_into_cubes`**: This action represents slicing the butter into cubes, a necessary step before measuring. The state of the butter changes from `whole` to `sliced`.\n\n2. **`fill_measuring_cup_with_water`**: This action involves filling a measuring cup with water to prepare for the measurement process. The state of the measuring cup changes from `empty` to `filled`.\n\n3. **`calculate_butter_amount`**: This action represents calculating the amount of butter needed using the measuring cup and the water displacement method. The butter is marked as `ready_to_measure`.\n\n4. **`put_butter_in_measuring_cup`**: This action involves placing the butter cubes into the measuring cup filled with water. The butter's state changes to `in` the cup and is marked as `measuring`.\n\n5. **`push_butter_down`**: If the butter starts piling up in the measuring cup, this action ensures it is evenly distributed to measure accurately. The butter's state changes to `evenly_distributed`.\n\n6. **`stop_adding_butter`**: This action stops the process of adding butter when the water reaches the desired measurement point. The butter's state is marked as `measured`, and the action ensures no further butter is added.\n\n7. **`drain_water_from_cup`**: After measuring the butter, this action drains the water from the measuring cup, leaving only the measured butter. The water's state changes to `drained`.\n\n---\n\n### Adjustments Made:\n- Irrelevant steps (e.g., \"push_ingredients_into_machine canola_oil stove_knob velveeta\") were excluded or modified to align with the task.\n- The steps were rewritten to focus on the butter measurement process as described in the task's description.\n- The state transitions (e.g., `sliced`, `measured`, `drained`) were designed to reflect the logical progression of the task.\n\n",
    "Below are the PDDL actions generated for the task \"How to Make Butter With a Food Processor.\" The actions reflect the described steps, focusing on the relevant entity state transitions and ensuring logical consistency with the task.\n\n---\n\n### PDDL Actions\n\n```lisp\n(:action warm-cream\n    :parameters (?cream - ingredient ?stove - appliance)\n    :precondition (and (cold ?cream) (off ?stove))\n    :effect (and (warm ?cream) (not (cold ?cream)))\n)\n\n(:action prepare-food-processor\n    :parameters (?fp - appliance)\n    :precondition (and (off ?fp) (clean ?fp))\n    :effect (and (ready ?fp) (not (off ?fp)))\n)\n\n(:action place-ingredients\n    :parameters (?cream - ingredient ?bowl - container)\n    :precondition (and (warm ?cream) (empty ?bowl))\n    :effect (and (inContainer ?cream ?bowl) (not (empty ?bowl)))\n)\n\n(:action add-salt-to-ingredients\n    :parameters (?salt - ingredient ?bowl - container)\n    :precondition (and (inContainer ?cream ?bowl) (available ?salt))\n    :effect (and (salted ?bowl) (not (plain ?bowl)))\n)\n\n(:action churn-butter\n    :parameters (?bowl - container ?fp - appliance)\n    :precondition (and (inContainer ?cream ?bowl) (ready ?fp))\n    :effect (and (butter ?bowl) (buttermilk ?bowl) (not (inContainer ?cream ?bowl)))\n)\n\n(:action drain-buttermilk\n    :parameters (?bowl - container)\n    :precondition (and (buttermilk ?bowl))\n    :effect (and (drained ?bowl) (not (buttermilk ?bowl)))\n)\n\n(:action squeeze-lemon\n    :parameters (?butter - ingredient)\n    :precondition (and (butter ?butter) (not (dry ?butter)))\n    :effect (and (dry ?butter) (not (wet ?butter)))\n)\n\n(:action place-butter-in-container\n    :parameters (?butter - ingredient ?container - container)\n    :precondition (and (dry ?butter) (empty ?container))\n    :effect (and (inContainer ?butter ?container) (not (empty ?container)))\n)\n\n(:action cool-mixture\n    :parameters (?butter - ingredient ?fridge - appliance)\n    :precondition (and (inContainer ?butter ?container) (on ?fridge))\n    :effect (and (cool ?butter)))\n)\n```\n\n---\n\n### Explanation of Actions\n\n1. **`warm-cream`**: Represents warming the cream to room temperature. The cream's state changes from `cold` to `warm`.\n\n2. **`prepare-food-processor`**: Prepares the food processor for use. The processor's state changes from `off` to `ready`.\n\n3. **`place-ingredients`**: Places the warmed cream into the bowl. The cream is now `inContainer` and the bowl is no longer `empty`.\n\n4. **`add-salt-to-ingredients`**: Adds salt to the cream in the bowl. The bowl's state changes to `salted`, indicating that the mixture is no longer `plain`.\n\n5. **`churn-butter`**: Churns the butter using the food processor. The cream's state changes to `butter` and `buttermilk`, replacing the original cream.\n\n6. **`drain-buttermilk`**: Drains the buttermilk from the butter. The bowl's state changes to `drained`, indicating that the buttermilk has been removed.\n\n7. **`squeeze-lemon`**: Squeezes out any remaining buttermilk from the butter. The butter's state changes from `wet` to `dry`.\n\n8. **`place-butter-in-container`**: Places the butter into a storage container. The butter is now `inContainer`, and the container is no longer `empty`.\n\n9. **`cool-mixture`**: Places the butter in the refrigerator to cool. The butter's state changes to `cool`.\n\n---\n\n### Adjustments and Notes:\n- Irrelevant or unclear steps (e.g., \"stove_knob velveeta\") were omitted or clarified to align with the task's logical flow.\n- Each action reflects a meaningful state transition for the relevant entities (e.g., cream, butter, bowl, food processor).\n- The states were chosen to represent the task's progression (e.g., `warm`, `salted`, `butter`, `drained`, `cool`).\n\n",
    "Here are the PDDL actions generated for the task \"How to Make Butter in a Sealed Container.\" The actions capture entity state transitions and ensure that preconditions and effects reflect the task's logic and steps.\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action gather-ingredients\n    :parameters (?i - ingredient ?b - mixing_bowl)\n    :precondition (and (available ?i) (empty ?b))\n    :effect (and (inBowl ?i ?b) (not (empty ?b)) (not (available ?i)))\n)\n\n(:action put-ingredients-in-container\n    :parameters (?c - cream ?cont - container)\n    :precondition (and (inBowl ?c ?b) (empty ?cont) (sealed ?cont))\n    :effect (and (inContainer ?c ?cont) (not (empty ?cont)))\n)\n\n(:action start-shaking\n    :parameters (?npc - agent ?cont - container)\n    :precondition (and (inContainer cream ?cont) (sealed ?cont) (ready ?npc))\n    :effect (and (shaking ?cont) (not (ready ?npc)))\n)\n\n(:action add-ingredients\n    :parameters (?c - cream ?f - flavor ?tool - blender)\n    :precondition (and (shaking ?container )"
]