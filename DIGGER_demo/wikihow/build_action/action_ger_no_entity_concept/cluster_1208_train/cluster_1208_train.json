[
    "Here is the set of PDDL actions for the task **\"How to Freeze Mashed Potatoes\"** based on the given steps and descriptions:\n\n---\n\n### PDDL Actions:\n\n#### 1. Use Potatoes\n```lisp\n(:action use_potatoes\n    :parameters (?potato - ingredient ?mixing_bowl - utensil ?pot - utensil)\n    :precondition (and\n      (at ?potato kitchen_counter)\n      (at ?mixing_bowl kitchen_counter)\n      (at ?pot kitchen_stove)\n      (clean ?mixing_bowl)\n      (clean ?pot)\n    )\n    :effect (and\n      (in ?potato ?mixing_bowl)\n      (not (at ?potato kitchen_counter))\n    )\n)\n```\n\n---\n\n#### 2. Add Milk and Butter\n```lisp\n(:action use_full_of_milk\n    :parameters (?milk_and_butter - ingredient ?mixing_bowl - utensil)\n    :precondition (and\n      (at ?milk_and_butter refrigerator)\n      (at ?mixing_bowl kitchen_counter)\n      (clean ?mixing_bowl)\n    )\n    :effect (and\n      (in ?milk_and_butter ?mixing_bowl)\n      (not (at ?milk_and_butter refrigerator))\n    )\n)\n```\n\n---\n\n#### 3. Peel Potatoes\n```lisp\n(:action peel_potatoes\n    :parameters (?potato - ingredient ?peeler - utensil)\n    :precondition (and\n      (at ?potato kitchen_counter)\n      (at ?peeler kitchen_counter)\n      (clean ?peeler)\n    )\n    :effect (and\n      (peeled ?potato)\n      (dirty ?peeler)\n    )\n)\n```\n\n---\n\n#### 4. Boil Potatoes\n```lisp\n(:action boil_potatoes\n    :parameters (?potato - ingredient ?pot - utensil ?stove - appliance)\n    :precondition (and\n      (peeled ?potato)\n      (at ?pot kitchen_stove)\n      (at ?stove kitchen_stove)\n      (clean ?pot)\n      (heated ?stove)\n      (has_water ?pot)\n    )\n    :effect (and\n      (boiled ?potato)\n      (dirty ?pot)\n    )\n)\n```\n\n---\n\n#### 5. Mash Potatoes\n```lisp\n(:action mash_potatoes\n    :parameters (?potato - ingredient ?mixing_bowl - utensil ?table - surface ?canola_oil - ingredient)\n    :precondition (and\n      (boiled ?potato)\n      (at ?mixing_bowl kitchen_counter)\n      (at ?table kitchen_counter)\n      (clean ?mixing_bowl)\n      (in ?potato ?mixing_bowl)\n      (in ?milk_and_butter ?mixing_bowl)\n      (at ?canola_oil kitchen_counter)\n    )\n    :effect (and\n      (mashed ?potato)\n      (not (boiled ?potato))\n      (dirty ?mixing_bowl)\n    )\n)\n```\n\n---\n\n#### 6. Cool Potatoes\n```lisp\n(:action cool_potatoes\n    :parameters (?potato - ingredient ?oven - appliance)\n    :precondition (and\n      (mashed ?potato)\n      (at ?oven kitchen_counter)\n      (clean ?oven)\n    )\n    :effect (and\n      (cooled ?potato)\n      (not (mashed ?potato))\n    )\n)\n```\n\n---\n\n### Explanation of Adjustments:\n1. **Relevance Check**: The original step `boil_wicks wick1` was irrelevant and likely erroneous. It was adjusted to a relevant step, `boil_potatoes`, based on the description \"Boil to preference.\"\n2. **State Transitions**: The state of the potato changes through various steps: `peeled`, `boiled`, `mashed`, and finally `cooled`. Each action reflects these transitions in the preconditions and effects.\n3. **Entity States**: States like `clean`, `dirty`, `peeled`, `boiled`, `mashed`, and `cooled` were chosen based on the task's focus on preparation and freezing.\n4. **Consistency**: The actions follow the same structure as the example, ensuring clarity and logical progression of the task.\n\n",
    "Here are the PDDL actions for the task **\"How to Use Goat Cheese\"**, based on the provided steps and descriptions. The actions are designed to reflect the relevant entity state transitions and task-specific logic:\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action default_to_garnish\n    :parameters (?p - player ?cheese - item ?bowl - container)\n    :precondition (and (at ?p mixing_bowl) (at ?cheese mixing_bowl) (not (garnish ?cheese)))\n    :effect (garnish ?cheese)\n)\n\n(:action pick_gamel\n    :parameters (?p - player ?cheese - item ?style - style)\n    :precondition (and (inventory ?p goat_cheese) (not (picked ?cheese ?style)))\n    :effect (picked ?cheese ?style)\n)\n\n(:action use_as_appropriate_purpose\n    :parameters (?p - player ?cheese - item ?purpose - purpose)\n    :precondition (and (inventory ?p goat_cheese) (not (used_for ?cheese ?purpose)))\n    :effect (used_for ?cheese ?purpose)\n)\n\n(:action store_gamel\n    :parameters (?p - player ?cheese - item ?bowl - container)\n    :precondition (and (inventory ?p ?cheese) (at ?p mixing_bowl) (not (stored ?cheese ?bowl)))\n    :effect (and (stored ?cheese ?bowl) (not (inventory ?p ?cheese)))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`default_to_garnish`**:\n   - **Parameters**: The player (?p), the goat cheese (?cheese), and the mixing bowl (?bowl).\n   - **Preconditions**: The player must be at the mixing bowl, the goat cheese must be at the mixing bowl, and the cheese must not already be set as a garnish.\n   - **Effects**: Marks the goat cheese as being used for garnishing (`garnish ?cheese`).\n\n2. **`pick_gamel`**:\n   - **Parameters**: The player (?p), the goat cheese (?cheese), and the style of the cheese (?style).\n   - **Preconditions**: The player must have the goat cheese in their inventory, and the cheese must not already be picked for a specific style.\n   - **Effects**: Marks the goat cheese as being picked for a specific style (`picked ?cheese ?style`).\n\n3. **`use_as_appropriate_purpose`**:\n   - **Parameters**: The player (?p), the goat cheese (?cheese), and the purpose for which the cheese is used (?purpose).\n   - **Preconditions**: The player must have the goat cheese in their inventory, and the cheese must not already be used for a specific purpose.\n   - **Effects**: Marks the goat cheese as being used for a specific purpose (`used_for ?cheese ?purpose`).\n\n4. **`store_gamel`**:\n   - **Parameters**: The player (?p), the goat cheese (?cheese), and the mixing bowl (?bowl).\n   - **Preconditions**: The player must have the goat cheese in their inventory and be at the location of the mixing bowl. The cheese must not already be stored in the mixing bowl.\n   - **Effects**: Marks the goat cheese as being stored in the mixing bowl (`stored ?cheese ?bowl`) and removes it from the player's inventory.\n\n---\n\n### Notes:\n- The task-specific states include `garnish`, `picked`, `used_for`, and `stored`, which reflect the transitions described in the task and descriptions.\n- The step `use_as_appropriate_purpose` was generalized to allow for different purposes, as implied by the description.\n- The step `store-gamel` was adjusted to ensure proper state transitions for storing goat cheese in the mixing bowl.\n- Any irrelevant or unclear steps were interpreted and adjusted to fit the task's logic.",
    "Here is the PDDL representation of the task \"How to Make Dinosaur Eggs\" based on the provided steps and descriptions:\n\n---\n\n### PDDL Actions\n\n```lisp\n(:action use_coffee_ground\n    :parameters (?p - player ?coffee_ground - coffee_ground ?pot - pot)\n    :precondition (and (inventory ?p ?coffee_ground) (inventory ?p ?pot))\n    :effect (and (contains ?pot ?coffee_ground) (not (inventory ?p ?coffee_ground)))\n)\n\n(:action make_fizzing_dough\n    :parameters (?p - player ?mixing_bowl - mixing_bowl ?pot - pot)\n    :precondition (and (inventory ?p ?mixing_bowl) (contains ?pot ?coffee_ground))\n    :effect (and (contains ?mixing_bowl fizzing_dough) (not (contains ?pot ?coffee_ground)))\n)\n\n(:action shape_dinosaur_egg\n    :parameters (?p - player ?mixing_bowl - mixing_bowl ?plastic_eggs - plastic_eggs ?dinosaur_egg - dinosaur_egg)\n    :precondition (and (contains ?mixing_bowl fizzing_dough) (inventory ?p ?plastic_eggs))\n    :effect (and (shaped ?dinosaur_egg) (not (contains ?mixing_bowl fizzing_dough)))\n)\n\n(:action freeze_dinosaur_egg\n    :parameters (?p - player ?dinosaur_egg - dinosaur_egg ?freezer - freezer)\n    :precondition (and (shaped ?dinosaur_egg) (available ?freezer))\n    :effect (and (frozen ?dinosaur_egg))\n)\n```\n\n---\n\n### Explanation of the Actions\n\n1. **use_coffee_ground**:\n   - **Parameters**: The player, coffee ground, and a pot.\n   - **Preconditions**: The player must have coffee ground and a pot in their inventory.\n   - **Effect**: The coffee ground is transferred into the pot, and it is no longer in the player's inventory.\n\n2. **make_fizzing_dough**:\n   - **Parameters**: The player, a mixing bowl, and the pot containing coffee ground.\n   - **Preconditions**: The player must have a mixing bowl, and the pot must contain coffee ground.\n   - **Effect**: The fizzing dough is created and placed in the mixing bowl, and the coffee ground is no longer in the pot.\n\n3. **shape_dinosaur_egg**:\n   - **Parameters**: The player, the mixing bowl with fizzing dough, plastic eggs, and the dinosaur egg.\n   - **Preconditions**: The fizzing dough must be in the mixing bowl, and the player must have plastic eggs.\n   - **Effect**: The dinosaur egg is shaped using the plastic eggs, and the fizzing dough is no longer in the mixing bowl.\n\n4. **freeze_dinosaur_egg**:\n   - **Parameters**: The player, the shaped dinosaur egg, and a freezer.\n   - **Preconditions**: The dinosaur egg must already be shaped, and the freezer must be available.\n   - **Effect**: The dinosaur egg becomes frozen.\n\n---\n\n### Adjustments Made:\n- The step \"shape_to_shape npc\" was interpreted as shaping the dinosaur eggs using plastic eggs since this aligns with the description.\n- The step \"free_dinosaur_egg npc\" was modified to \"freeze_dinosaur_egg\" to match the task of making frozen dinosaur eggs.\n- Actions were designed to reflect logical state transitions such as transferring materials, shaping the egg, and freezing it.\n\nThis PDDL representation captures the intent and state transitions necessary for completing the task of making dinosaur eggs.",
    "Here is the PDDL representation of the task \"How to Use Egg Yolks,\" based on the provided steps and descriptions. I have adjusted the steps and ensured that the actions are relevant to the task while capturing the necessary entity state transitions.\n\n---\n\n### PDDL Actions for \"How to Use Egg Yolks\"\n\n```lisp\n(:action save-yolks\n    :parameters (?y - yolk ?c - container)\n    :precondition (and (fresh ?y) (airtight ?c) (empty ?c))\n    :effect (and (saved ?y) (inContainer ?y ?c) (not (fresh ?y)) (not (empty ?c)))\n)\n\n(:action freeze-yolks\n    :parameters (?y - yolk ?s - syrup ?f - freezer)\n    :precondition (and (saved ?y) (inContainer ?y ?c) (inContainer ?s ?c) (operational ?f))\n    :effect (and (frozen ?y) (not (saved ?y)))\n)\n\n(:action cure-yolks\n    :parameters (?y - yolk ?s - salt)\n    :precondition (and (fresh ?y) (available ?s))\n    :effect (and (cured ?y) (not (fresh ?y)) (used ?s)))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`save-yolks`:**\n   - **Parameters:** `?y` (egg yolk), `?c` (container).\n   - **Preconditions:** The yolk is fresh, the container is airtight, and the container is empty.\n   - **Effects:** The yolk is saved (stored in the container), the yolk is no longer fresh, and the container is no longer empty.\n\n2. **`freeze-yolks`:**\n   - **Parameters:** `?y` (egg yolk), `?s` (simple syrup), `?f` (freezer).\n   - **Preconditions:** The yolk is saved in a container, the simple syrup is also in the container, and the freezer is operational.\n   - **Effects:** The yolk becomes frozen, and it is no longer in the \"saved\" state.\n\n3. **`cure-yolks`:**\n   - **Parameters:** `?y` (egg yolk), `?s` (salt).\n   - **Preconditions:** The yolk is fresh, and salt is available.\n   - **Effects:** The yolk becomes cured, it is no longer fresh, and the salt is marked as \"used.\"\n\n---\n\n### Adjustments Made:\n- The step \"free_eraser npc\" seemed irrelevant to the task, so it was omitted. Instead, I focused on the steps described in the task and descriptions, ensuring the actions align with the main goal of using egg yolks.\n- Added an appropriate action, `freeze-yolks`, based on the description of freezing yolks with simple syrup.\n- Ensured that the preconditions and effects reflect the logical state transitions for each step (e.g., from fresh to saved, from saved to frozen, etc.).\n\nThis set of PDDL actions accurately models the task and captures the state transitions required for using egg yolks.",
    "Here are the PDDL actions for the task **\"How to Cook Frozen Fish\"** based on the provided steps and descriptions. Some steps have been modified to align with the task and ensure relevance.\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action learn_fish_cooking\n    :parameters (?p - player ?technique - technique)\n    :precondition (and (not (knows ?p ?technique)))\n    :effect (and (knows ?p ?technique))\n)\n\n(:action get_ideas\n    :parameters (?p - player ?npc - npc ?fish - fish)\n    :precondition (and (at ?p ?npc) (has_fish ?fish))\n    :effect (and (has_ideas ?p ?fish))\n)\n\n(:action treat_with_salt\n    :parameters (?p - player ?fish - fish ?salt - salt)\n    :precondition (and (inventory ?p ?fish) (inventory ?p ?salt) (not (salted ?fish)))\n    :effect (and (salted ?fish) (not (inventory ?salt)))\n)\n\n(:action try_new_marinade\n    :parameters (?p - player ?fish - fish ?marinade - marinade)\n    :precondition (and (inventory ?p ?fish) (inventory ?p ?marinade) (salted ?fish) (not (marinated ?fish)))\n    :effect (and (marinated ?fish) (not (inventory ?marinade)))\n)\n\n(:action learn_new_recipe\n    :parameters (?p - player ?npc - npc ?kitchen - kitchen ?recipe - recipe)\n    :precondition (and (at ?p ?npc) (at ?p ?kitchen) (not (knows ?p ?recipe)))\n    :effect (and (knows ?p ?recipe))\n)\n\n(:action cook_fish\n    :parameters (?p - player ?fish - fish ?kitchen - kitchen)\n    :precondition (and (inventory ?p ?fish) (at ?p ?kitchen) (marinated ?fish) (knows ?p cooking_techniques))\n    :effect (and (cooked ?fish) (not (inventory ?fish)))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`learn_fish_cooking`**:\n   - Represents the player learning basic fish-cooking techniques.\n   - Preconditions ensure the player does not already know the technique.\n   - Effects update the state to reflect that the player now knows the technique.\n\n2. **`get_ideas`**:\n   - Represents the player consulting an NPC to get ideas for cooking a specific type of fish.\n   - Preconditions require the player to be at the NPC's location and for the fish type to be relevant.\n   - Effects indicate that the player now has ideas for the fish.\n\n3. **`treat_with_salt`**:\n   - Represents the step of treating the fish with salt for seasoning or preservation.\n   - Preconditions ensure the player has both the fish and salt in their inventory and that the fish is not already salted.\n   - Effects update the fish's state to \"salted\" and remove the salt from the inventory.\n\n4. **`try_new_marinade`**:\n   - Represents the player experimenting with a new marinade for the fish.\n   - Preconditions ensure the fish is already salted, and the player has the marinade in their inventory.\n   - Effects update the fish's state to \"marinated\" and remove the marinade from the inventory.\n\n5. **`learn_new_recipe`**:\n   - Represents the player learning a unique recipe from an NPC in the kitchen.\n   - Preconditions require the player to be at the kitchen and in the presence of the NPC, and that the recipe is not already known.\n   - Effects update the state to reflect that the player now knows the recipe.\n\n6. **`cook_fish`**:\n   - Represents the final step of cooking the fish in the kitchen.\n   - Preconditions ensure the fish is marinated, the player knows the cooking techniques, and the player is at the kitchen.\n   - Effects update the fish's state to \"cooked\" and remove it from the player's inventory.\n\n---\n\n### Notes:\n- The steps were adapted to ensure logical consistency and relevance to the task of cooking frozen fish.\n- The state transitions focus on learning, preparing, and cooking the fish, with intermediate states like \"salted\" and \"marinated\" added for realism.\n- The action names and parameters are concise and descriptive, adhering to PDDL conventions.",
    "Here is the PDDL representation of the task **\"How to Freeze Meatballs\"**, based on the provided steps and descriptions. Irrelevant or unclear steps have been adjusted for relevance to the task.\n\n### PDDL Actions:\n\n```lisp\n;; Action 1: Cook the meatballs\n(:action cook_meatballs\n    :parameters (?p - person ?meatballs - food ?stove - appliance ?pan - container)\n    :precondition (and\n      (owned ?p ?meatballs) (raw ?meatballs) (at ?meatballs kitchen_counter1)\n      (owned ?p ?stove) (at ?stove kitchen_location)\n      (owned ?p ?pan) (clean ?pan) (at ?pan kitchen_counter1)\n    )\n    :effect (and\n      (cooked ?meatballs)\n      (dirty ?pan)\n      (at ?meatballs kitchen_counter1)\n    )\n)\n\n;; Action 2: Cool the meatballs\n(:action cool_meatballs\n    :parameters (?p - person ?meatballs - food ?plate - container)\n    :precondition (and\n      (owned ?p ?meatballs) (cooked ?meatballs) (at ?meatballs kitchen_counter1)\n      (owned ?p ?plate) (clean ?plate) (at ?plate kitchen_counter1)\n    )\n    :effect (and\n      (cooled ?meatballs)\n      (at ?meatballs kitchen_counter1)\n    )\n)\n\n;; Action 3: Freeze the meatballs\n(:action freeze_meatballs\n    :parameters (?p - person ?meatballs - food ?freezer - appliance ?container - container)\n    :precondition (and\n      (owned ?p ?meatballs) (cooled ?meatballs) (at ?meatballs kitchen_counter1)\n      (owned ?p ?freezer) (at ?freezer kitchen_location)\n      (owned ?p ?container) (clean ?container) (at ?container kitchen_counter1)\n    )\n    :effect (and\n      (frozen ?meatballs)\n      (in ?meatballs ?container)\n      (at ?meatballs freezer_location)\n    )\n)\n\n;; Action 4: Reheat the cooked meatballs\n(:action reheat_meatballs\n    :parameters (?p - person ?meatballs - food ?microwave - appliance ?plate - container)\n    :precondition (and\n      (owned ?p ?meatballs) (frozen ?meatballs) (at ?meatballs freezer_location)\n      (owned ?p ?microwave) (at ?microwave kitchen_location)\n      (owned ?p ?plate) (clean ?plate) (at ?plate kitchen_counter1)\n    )\n    :effect (and\n      (reheated ?meatballs)\n      (at ?meatballs kitchen_counter1)\n    )\n)\n```\n\n### Explanation of Actions:\n\n1. **Cook Meatballs**:\n   - Preconditions: The meatballs must be raw and available on the kitchen counter, the stove and pan must be owned and ready to use.\n   - Effects: The meatballs become cooked, and the pan becomes dirty.\n\n2. **Cool Meatballs**:\n   - Preconditions: The meatballs must be cooked and on the kitchen counter, and a clean plate must be available.\n   - Effects: The meatballs are cooled and remain on the kitchen counter.\n\n3. **Freeze Meatballs**:\n   - Preconditions: The meatballs must be cooled and on the kitchen counter. A clean container and a freezer must be available.\n   - Effects: The meatballs are frozen, placed in the container, and moved to the freezer.\n\n4. **Reheat Meatballs**:\n   - Preconditions: The meatballs must be frozen and in the freezer. A microwave and a clean plate must be available.\n   - Effects: The meatballs are reheated and placed back on the kitchen counter.\n\nThis PDDL representation captures the logical flow of the task, focusing on state changes such as \"cooked,\" \"cooled,\" \"frozen,\" and \"reheated.\" The preconditions and effects ensure that the task steps are executed in the correct order.",
    "Here are the generated PDDL actions for the task \"How to Clean Chicken Livers,\" based on the steps and descriptions provided:\n\n```lisp\n(:action collect_livers\n    :parameters (?n - chicken ?l - liver)\n    :precondition (and (part_of ?l ?n) (status ?l uncollected) (status ?n whole))\n    :effect (and (status ?l collected) (not (part_of ?l ?n)))\n)\n\n(:action buy_livers\n    :parameters (?l - liver ?b - butcher)\n    :precondition (and (status ?l not_owned) (location ?b butcher_shop))\n    :effect (and (status ?l owned) (location ?l with_owner))\n)\n\n(:action freeze_chicken_livers\n    :parameters (?l - liver ?f - freezer)\n    :precondition (and (status ?l cleaned) (location ?f kitchen))\n    :effect (and (status ?l frozen) (location ?l in_freezer))\n)\n\n(:action chop_livers\n    :parameters (?l - liver ?k - knife ?b - board)\n    :precondition (and (status ?l cleaned) (location ?b kitchen_counter) (status ?k sharp))\n    :effect (and (status ?l chopped) (location ?l on_board))\n)\n```\n\n### Explanation of Actions and State Changes:\n1. **`collect_livers`**:\n   - **Parameters**: A chicken (`?n`) and liver (`?l`).\n   - **Precondition**: The liver is part of a whole chicken, and it has not yet been collected.\n   - **Effect**: The liver is collected, and it is no longer part of the chicken.\n\n2. **`buy_livers`**:\n   - **Parameters**: A liver (`?l`) and a butcher (`?b`).\n   - **Precondition**: The liver is not owned, and the butcher is located in the butcher shop.\n   - **Effect**: The liver is now owned and located with the new owner.\n\n3. **`freeze_chicken_livers`**:\n   - **Parameters**: A liver (`?l`) and a freezer (`?f`).\n   - **Precondition**: The liver has been cleaned, and the freezer is in the kitchen.\n   - **Effect**: The liver is now frozen and placed inside the freezer.\n\n4. **`chop_livers`**:\n   - **Parameters**: A liver (`?l`), a knife (`?k`), and a cutting board (`?b`).\n   - **Precondition**: The liver is cleaned, the cutting board is on the kitchen counter, and the knife is sharp.\n   - **Effect**: The liver is chopped and placed on the cutting board.\n\n### Adjustments Made:\n- The step \"free_chicken livers freezer\" was interpreted as \"freeze the chicken livers\" to align with the task description.\n- The step \"chopped_lemon npc\" was adjusted to \"chop livers\" since chopping lemons is not relevant to the task of cleaning chicken livers.\n- States such as `collected`, `owned`, `cleaned`, `frozen`, and `chopped` were introduced to track the progress of the task.\n- The entities (chicken, liver, butcher, freezer, knife, and board) were defined based on the task steps and descriptions.",
    "Here are the PDDL actions for the task \"How to Store Egg Yolks\" based on the provided steps and descriptions:\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action put_ingredients_in_container ; put egg yolks into a container\n    :parameters (?p - player ?yolks - egg_yolks ?container - container)\n    :precondition (and (inventory ?p ?yolks) (not (in ?yolks ?container)))\n    :effect (and (in ?yolks ?container) (not (inventory ?p ?yolks)))\n)\n\n(:action cover_yolks ; cover egg yolks with a substance (e.g., water or melted butter)\n    :parameters (?p - player ?yolks - egg_yolks ?container - container ?cover - substance)\n    :precondition (and (in ?yolks ?container) (not (covered ?yolks ?cover)))\n    :effect (and (covered ?yolks ?cover))\n)\n\n(:action put_lid_on_container ; put a lid on the container\n    :parameters (?p - player ?container - container ?lid - lid)\n    :precondition (and (in ?container ?lid) (not (has_lid ?container)))\n    :effect (and (has_lid ?container))\n)\n\n(:action store_container_in_refrigerator ; place the container in the refrigerator\n    :parameters (?p - player ?container - container ?refrigerator - refrigerator)\n    :precondition (and (has_lid ?container) (not (in ?container ?refrigerator)))\n    :effect (and (in ?container ?refrigerator))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`put_ingredients_in_container`**: This action models the process of putting the egg yolks into a container. The precondition ensures the player has the yolks in their inventory and that the yolks are not already in the container. The effect updates the state to reflect that the yolks are now in the container and no longer in the player's inventory.\n\n2. **`cover_yolks`**: This action represents covering the yolks with a substance (e.g., water or melted butter). The precondition ensures the yolks are already in the container and that they are not yet covered. The effect updates the state to indicate that the yolks are now covered with the chosen substance.\n\n3. **`put_lid_on_container`**: This action models putting a lid on the container. The precondition ensures that the container and lid are available together and that the container does not already have a lid. The effect updates the state to indicate that the container now has a lid.\n\n4. **`store_container_in_refrigerator`**: This action represents placing the container in the refrigerator. The precondition ensures the container has a lid (to prevent spillage) and is not already in the refrigerator. The effect updates the state to reflect that the container is now stored in the refrigerator.\n\n---\n\nThese actions accurately capture the steps and state transitions required for the task of storing egg yolks. Each action reflects the logical changes in the state of the entities involved (e.g., egg yolks, container, lid, refrigerator).",
    "Here are the PDDL actions for the task \"How to Use up Sour Milk for Hen Food,\" based on the provided steps and descriptions. Each action captures the intent, logic, and state changes of the task.\n\n---\n\n### PDDL Actions\n\n```lisp\n(:action gather_chicks\n    :parameters (?c - chick ?h - hen ?f - farmer)\n    :precondition (and (location ?c free_range) (location ?h free_range) (state ?f ready_to_feed))\n    :effect (and (location ?c near_hen) (location ?h coop) (state ?f ready_to_mix_feed))\n)\n\n(:action mix_sour_milk\n    :parameters (?m - sour_milk ?hf - hen_feed ?f - farmer)\n    :precondition (and (state ?m sour) (state ?hf dry) (state ?f ready_to_mix_feed))\n    :effect (and (state ?hf mixed_with_sour_milk) (state ?m used_up) (state ?f ready_to_feed_hens))\n)\n\n(:action make_sour_milk_cheese\n    :parameters (?m - sour_milk ?c - cheese ?f - farmer)\n    :precondition (and (state ?m sour) (state ?c unformed) (state ?f ready_to_prepare_cheese))\n    :effect (and (state ?c formed) (state ?m used_up) (state ?f ready_to_treat_hens))\n)\n```\n\n---\n\n### Explanation of State Transitions:\n\n1. **gather_chicks**:\n   - **Precondition**: Chicks and hens are in a \"free_range\" location, and the farmer is in a state \"ready_to_feed.\"\n   - **Effect**: Chicks are gathered near the hens, hens are moved to the coop, and the farmer transitions to a state \"ready_to_mix_feed.\"\n\n2. **mix_sour_milk**:\n   - **Precondition**: The sour milk is in a \"sour\" state, the hen feed is \"dry,\" and the farmer is \"ready_to_mix_feed.\"\n   - **Effect**: The hen feed is mixed with sour milk, the sour milk is marked as \"used_up,\" and the farmer transitions to a state \"ready_to_feed_hens.\"\n\n3. **make_sour_milk_cheese**:\n   - **Precondition**: The sour milk is in a \"sour\" state, the cheese is \"unformed,\" and the farmer is \"ready_to_prepare_cheese.\"\n   - **Effect**: The cheese is \"formed,\" the sour milk is marked as \"used_up,\" and the farmer transitions to a state \"ready_to_treat_hens.\"\n\n---\n\n### Adjustments Made:\n- The step `make_sliplargerbead` was modified to a more relevant action, `make_sour_milk_cheese`, based on the description provided (\"Make sour milk cheese to treat your hens\").\n- The entity states were chosen to reflect the task-specific changes, such as the state of the sour milk, the hen feed, and the cheese.\n- The farmer's state was introduced as a way to track readiness for each step, ensuring logical progression through the task.\n\nLet me know if you'd like further refinements!",
    "To generate PDDL actions for the task \"How to Use an Egg Boiler,\" I'll focus on the relevant steps based on the description. The steps provided in the task include cleaning the egg boiler and using distilled water to extend its life. Irrelevant or incorrect steps (like \"clean_eraser\" or \"drink_water\") will be adjusted to align with the task's goals. Here's the PDDL:\n\n---\n\n### PDDL Actions for \"How to Use an Egg Boiler\"\n\n```lisp\n;; Action 1: Clean the heating unit of the egg boiler\n(:action clean_heating_unit\n    :parameters (?user - person ?cloth - cleaning_tool ?vinegar - cleaning_agent ?boiler - appliance ?kitchen - location)\n    :precondition (and\n      (at ?boiler ?kitchen)\n      (at ?cloth ?kitchen)\n      (at ?vinegar ?kitchen)\n      (not (clean ?boiler))\n    )\n    :effect (and\n      (clean ?boiler)\n    )\n)\n\n;; Action 2: Refill the egg boiler with distilled water\n(:action refill_with_distilled_water\n    :parameters (?user - person ?water - resource ?boiler - appliance ?kitchen - location)\n    :precondition (and\n      (at ?boiler ?kitchen)\n      (at ?water ?kitchen)\n      (not (filled_with_distilled_water ?boiler))\n    )\n    :effect (and\n      (filled_with_distilled_water ?boiler)\n    )\n)\n\n;; Action 3: Use the egg boiler to cook eggs\n(:action cook_eggs\n    :parameters (?user - person ?eggs - ingredient ?boiler - appliance ?kitchen - location)\n    :precondition (and\n      (at ?boiler ?kitchen)\n      (at ?eggs ?kitchen)\n      (clean ?boiler)\n      (filled_with_distilled_water ?boiler)\n      (not (cooked ?eggs))\n    )\n    :effect (and\n      (cooked ?eggs)\n    )\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`clean_heating_unit`**:  \n   - This action represents cleaning the heating unit of the egg boiler with a damp cloth and diluted vinegar mixture.  \n   - Preconditions: The boiler, cloth, and vinegar must be in the kitchen, and the boiler must not already be clean.  \n   - Effect: The boiler becomes clean.\n\n2. **`refill_with_distilled_water`**:  \n   - This action represents refilling the egg boiler with distilled water to extend its life.  \n   - Preconditions: The boiler and distilled water must be in the kitchen, and the boiler must not already be filled with distilled water.  \n   - Effect: The boiler is filled with distilled water.\n\n3. **`cook_eggs`**:  \n   - This action represents the primary purpose of the egg boiler: cooking eggs.  \n   - Preconditions: The boiler must be clean, filled with distilled water, and in the kitchen. The eggs must also be in the kitchen and uncooked.  \n   - Effect: The eggs become cooked.\n\n---\n\n### Irrelevant or Incorrect Steps Adjusted:\n- **`clean_eraser`**: Changed to cleaning the heating unit of the egg boiler (`clean_heating_unit`), as cleaning an eraser is unrelated to the task.  \n- **`clean_oven`**: Changed to cleaning the egg boiler's heating unit, as cleaning an oven is unrelated to the task.  \n- **`drink_water`**: Adjusted to refilling the egg boiler with distilled water (`refill_with_distilled_water`), as this aligns with the task description.\n\nBy focusing on the task-specific actions and relevant state transitions, these PDDL actions accurately capture the intent and logic of the task."
]