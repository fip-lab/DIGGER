[
    "Here are the PDDL actions for the task **\"How to Grill That Perfect Burger\"** based on the provided steps and descriptions. Each action captures the intent, logic, and state transitions of the entities involved.\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action start_with_fresh_ground_chuck\n    :parameters (?p - player ?gc - ground_chuck)\n    :precondition (and (fresh ?gc) (not (prepared ?gc)))\n    :effect (prepared ?gc)\n)\n\n(:action make_chuck\n    :parameters (?p - player ?gc - ground_chuck)\n    :precondition (and (prepared ?gc) (not (made ?gc)))\n    :effect (made ?gc)\n)\n\n(:action chill_beef_patties\n    :parameters (?p - player ?bp - beef_patties ?fridge - location)\n    :precondition (and (made ?bp) (not (chilled ?bp)) (at ?p ?fridge))\n    :effect (chilled ?bp)\n)\n\n(:action season_meat\n    :parameters (?p - player ?bp - beef_patties ?sp - seasoning)\n    :precondition (and (chilled ?bp) (not (seasoned ?bp)) (inventory ?p ?sp))\n    :effect (seasoned ?bp)\n)\n\n(:action form_into_ball\n    :parameters (?p - player ?gc - ground_chuck)\n    :precondition (and (prepared ?gc) (not (formed_ball ?gc)))\n    :effect (formed_ball ?gc)\n)\n\n(:action pull_in_sides\n    :parameters (?p - player ?patty - patty)\n    :precondition (and (formed_ball ?patty) (not (tight ?patty)))\n    :effect (tight ?patty)\n)\n\n(:action form_patties\n    :parameters (?p - player ?gc - ground_chuck ?patty - patty)\n    :precondition (and (tight ?gc) (not (formed_patty ?patty)))\n    :effect (and (formed_patty ?patty) (not (tight ?gc)))\n)\n\n(:action build_fire\n    :parameters (?p - player ?grill - grill)\n    :precondition (and (not (fire_built ?grill)) (at ?p ?grill))\n    :effect (fire_built ?grill)\n)\n\n(:action place_burger_on_grill\n    :parameters (?p - player ?patty - patty ?grill - grill)\n    :precondition (and (formed_patty ?patty) (fire_built ?grill) (not (cooked ?patty)) (at ?p ?grill))\n    :effect (on_grill ?patty)\n)\n\n(:action peek_into_patty\n    :parameters (?p - player ?patty - patty ?grill - grill)\n    :precondition (and (on_grill ?patty) (not (checked_doneness ?patty)) (at ?p ?grill))\n    :effect (checked_doneness ?patty)\n)\n\n(:action cook_patty\n    :parameters (?p - player ?patty - patty ?grill - grill)\n    :precondition (and (on_grill ?patty) (fire_built ?grill) (not (cooked ?patty)) (checked_doneness ?patty))\n    :effect (cooked ?patty)\n)\n\n(:action finish_burger\n    :parameters (?p - player ?patty - patty ?plate - location)\n    :precondition (and (cooked ?patty) (not (finished ?patty)) (at ?p ?plate))\n    :effect (finished ?patty)\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`start_with_fresh_ground_chuck`**:\n   - Ensures the ground chuck is fresh and marks it as \"prepared\" for further steps.\n\n2. **`make_chuck`**:\n   - Represents the process of preparing the chuck for use, ensuring it is ready for forming into patties.\n\n3. **`chill_beef_patties`**:\n   - Captures the step of chilling the beef patties in a fridge to ensure they are firm before cooking.\n\n4. **`season_meat`**:\n   - Adds seasoning to the chilled beef patties, marking them as \"seasoned.\"\n\n5. **`form_into_ball`**:\n   - Represents forming the ground chuck into a tight ball, a precursor to forming patties.\n\n6. **`pull_in_sides`**:\n   - Ensures the sides of the ball are pulled in to create a tight and cohesive structure.\n\n7. **`form_patties`**:\n   - Represents forming the ground chuck (or ball) into patties of the desired thickness.\n\n8. **`build_fire`**:\n   - Captures the process of preparing the grill by building a fire, ensuring it is ready for cooking.\n\n9. **`place_burger_on_grill`**:\n   - Represents placing the formed patties on the grill for cooking.\n\n10. **`peek_into_patty`**:\n    - Captures the step of checking the doneness of the patty using a spatula or thermometer.\n\n11. **`cook_patty`**:\n    - Represents the actual cooking process of the patty on the grill.\n\n12. **`finish_burger`**:\n    - Marks the patty as \"finished\" and ready to be served, typically by transferring it to a plate.\n\n---\n\n### Entity State Transitions:\n- **Ground Chuck**: Moves from `fresh` \u2192 `prepared` \u2192 `made` \u2192 `formed_ball` \u2192 `tight`.\n- **Beef Patties**: Moves from `chilled` \u2192 `seasoned` \u2192 `formed_patty` \u2192 `on_grill` \u2192 `cooked` \u2192 `finished`.\n- **Grill**: Moves from `fire_built` \u2192 `ready` for cooking.\n\nThis ensures that all actions and state changes align with the task of grilling the perfect burger.",
    "Below is a set of PDDL actions for the task \"How to Cook a Cheeseburger,\" capturing the intent, logic, and state changes for each step. Where necessary, irrelevant or unclear steps from the task description have been adjusted to align with the logical flow of cooking a cheeseburger.\n\n---\n\n### PDDL Actions for \"How to Cook a Cheeseburger\"\n\n```lisp\n;; Action 1: Start with good meat\n(:action start_with_meat\n    :parameters (?meat - ingredient)\n    :precondition (and\n      (available ?meat)\n    )\n    :effect (and\n      (prepared ?meat)\n      (not (available ?meat))\n    )\n)\n\n;; Action 2: Place ground beef in a bowl\n(:action place_ingredients\n    :parameters (?ingredient - ingredient ?bowl - tool)\n    :precondition (and\n      (prepared ?ingredient)\n      (clean ?bowl)\n    )\n    :effect (and\n      (in-bowl ?ingredient ?bowl)\n      (not (prepared ?ingredient))\n    )\n)\n\n;; Action 3: Roughly chop the onion and garlic\n(:action choose_ingredient\n    :parameters (?ingredient - ingredient ?type - ingredient_type)\n    :precondition (and\n      (available ?ingredient)\n      (is-type ?ingredient ?type)\n      (choppable ?ingredient)\n    )\n    :effect (and\n      (chopped ?ingredient)\n      (not (available ?ingredient))\n    )\n)\n\n;; Action 4: Add the egg yolk to the mixing bowl\n(:action add_ingredients\n    :parameters (?ingredient - ingredient ?bowl - tool)\n    :precondition (and\n      (available ?ingredient)\n      (clean ?bowl)\n    )\n    :effect (and\n      (in-bowl ?ingredient ?bowl)\n      (not (available ?ingredient))\n    )\n)\n\n;; Action 5: Mix all ingredients together\n(:action mix_ingredients\n    :parameters (?bowl - tool ?mixture - ingredient)\n    :precondition (and\n      (in-bowl ?mixture ?bowl)\n      (clean ?bowl)\n    )\n    :effect (and\n      (mixed ?mixture)\n      (not (in-bowl ?mixture ?bowl))\n    )\n)\n\n;; Action 6: Create the burger patties\n(:action create_burger\n    :parameters (?mixture - ingredient ?patty - ingredient)\n    :precondition (and\n      (mixed ?mixture)\n    )\n    :effect (and\n      (formed ?patty)\n      (not (mixed ?mixture))\n    )\n)\n\n;; Action 7: Arrange the burger patties on a plate\n(:action build_burger\n    :parameters (?patty - ingredient ?plate - tool)\n    :precondition (and\n      (formed ?patty)\n      (clean ?plate)\n    )\n    :effect (and\n      (on-plate ?patty ?plate)\n      (not (formed ?patty))\n    )\n)\n\n;; Action 8: Choose your cooking method (e.g., stove)\n(:action choose_cooking_method\n    :parameters (?method - appliance)\n    :precondition (and\n      (available ?method)\n      (has-power ?method)\n    )\n    :effect (and\n      (selected ?method)\n    )\n)\n\n;; Action 9: Prepare toppings while burgers cook\n(:action prepare_add_ingredients\n    :parameters (?topping - ingredient ?burger - ingredient)\n    :precondition (and\n      (available ?topping)\n      (cooking ?burger)\n    )\n    :effect (and\n      (prepared ?topping)\n      (not (available ?topping))\n    )\n)\n\n;; Action 10: Wrap the burger in a bun\n(:action wrap_bun\n    :parameters (?patty - ingredient ?bun - ingredient)\n    :precondition (and\n      (cooked ?patty)\n      (prepared ?bun)\n    )\n    :effect (and\n      (wrapped ?patty ?bun)\n      (not (prepared ?bun))\n    )\n)\n```\n\n---\n\n### Explanation of Changes and Adjustments:\n1. **Action Names**: The action names were adjusted to be more concise and descriptive, reflecting the actual steps of making a cheeseburger.\n2. **Parameters**: Parameters were chosen to include the relevant objects (e.g., `?meat`, `?bowl`, `?patty`) and tools (e.g., `?stove`, `?plate`).\n3. **Preconditions**: Preconditions were added to ensure logical consistency, such as requiring ingredients to be available or tools to be clean before use.\n4. **Effects**: Effects were defined to capture the state changes of the entities, such as moving ingredients into a bowl, forming patties, or cooking the burger.\n5. **Irrelevant Steps**: Some steps (e.g., \"npc\" references) were adjusted to match the logical flow of cooking a cheeseburger.\n6. **Focus on State Changes**: Actions emphasize relevant state changes, such as transitioning ingredients from \"available\" to \"prepared,\" or burgers from \"formed\" to \"cooked.\"\n\nThis set of actions ensures a logical and complete representation of the task in PDDL.",
    "Here is a set of PDDL actions based on the task \"How to Write a Hamburger Paragraph,\" following the format and structure provided in the example. Each action captures the intent, logic, and state changes of the task.\n\n---\n\n### PDDL Actions for \"How to Write a Hamburger Paragraph\"\n\n```lisp\n(:action write_topic_sentence\n    :parameters (?p - player ?topic - paragraph_component)\n    :precondition (and (is_topic_sentence ?topic) (not (written ?topic)))\n    :effect (and (written ?topic) (has_paragraph ?p ?topic))\n)\n\n(:action add_detail\n    :parameters (?p - player ?detail - paragraph_component)\n    :precondition (and (not (added ?detail)) (is_detail ?detail) (has_paragraph ?p ?topic))\n    :effect (and (added ?detail) (has_paragraph ?p ?detail))\n)\n\n(:action layer_cheese\n    :parameters (?p - player ?cheese - paragraph_component ?bowl - container)\n    :precondition (and (is_cheese ?cheese) (in ?cheese ?bowl) (not (layered ?cheese)) (has_paragraph ?p ?detail))\n    :effect (and (layered ?cheese) (has_paragraph ?p ?cheese))\n)\n\n(:action add_burger\n    :parameters (?p - player ?burger - paragraph_component)\n    :precondition (and (is_burger ?burger) (not (added ?burger)) (has_paragraph ?p ?cheese))\n    :effect (and (added ?burger) (has_paragraph ?p ?burger))\n)\n\n(:action add_lettuce\n    :parameters (?p - player ?lettuce - paragraph_component)\n    :precondition (and (is_lettuce ?lettuce) (not (added ?lettuce)) (has_paragraph ?p ?burger))\n    :effect (and (added ?lettuce) (has_paragraph ?p ?lettuce))\n)\n\n(:action choose_ingredient\n    :parameters (?p - player ?ingredient - paragraph_component ?bowl - container)\n    :precondition (and (is_ingredient ?ingredient) (in ?ingredient ?bowl) (not (chosen ?ingredient)) (has_paragraph ?p ?lettuce))\n    :effect (and (chosen ?ingredient) (has_paragraph ?p ?ingredient))\n)\n\n(:action finish_with_bun\n    :parameters (?p - player ?bun - paragraph_component)\n    :precondition (and (is_bottom_bun ?bun) (not (finished ?bun)) (has_paragraph ?p ?ingredient))\n    :effect (and (finished ?bun) (has_paragraph ?p ?bun) (completed_paragraph ?p))\n)\n\n(:action analyze_finished_paragraph\n    :parameters (?p - player ?paragraph - paragraph ?track - revision_track)\n    :precondition (and (completed_paragraph ?p) (not (analyzed ?paragraph)))\n    :effect (and (analyzed ?paragraph) (recorded_changes ?track))\n)\n\n(:action listen_to_family_feedback\n    :parameters (?p - player ?family - group)\n    :precondition (and (analyzed ?paragraph) (is_family ?family))\n    :effect (and (received_feedback ?p ?family) (considered_improvements ?p))\n)\n```\n\n---\n\n### Explanation of Actions:\n1. **`write_topic_sentence`**: Represents the \"top bun\" of the hamburger paragraph as the topic sentence. The action ensures that a topic sentence is written as the starting point.\n2. **`add_detail`**: Adds a detail to the paragraph, such as the \"tomato\" layer. It reflects the addition of supporting details.\n3. **`layer_cheese`**: Represents adding another layer of detail (cheese) to the paragraph. The cheese must be in the mixing bowl before layering.\n4. **`add_burger`**: Adds a \"burger\" detail to the paragraph, representing the main substance of the paragraph.\n5. **`add_lettuce`**: Adds lettuce as another detail that connects back to the topic sentence.\n6. **`choose_ingredient`**: Represents choosing an ingredient (e.g., onions) from a container to add to the paragraph.\n7. **`finish_with_bun`**: Finalizes the paragraph with the \"bottom bun,\" completing the structure of the hamburger paragraph.\n8. **`analyze_finished_paragraph`**: Analyzes the completed paragraph for improvements and records revision steps.\n9. **`listen_to_family_feedback`**: Represents the step of reviewing the paragraph with feedback from family members, ensuring the paragraph is improved based on suggestions.\n\n---\n\n### Task-Specific Adjustments:\n- The steps were mapped to meaningful paragraph-writing actions, ensuring relevance to the task.\n- Irrelevant or unclear steps were interpreted and modified to fit the logical flow of writing a hamburger paragraph.\n- State changes (e.g., `written`, `added`, `analyzed`, `completed_paragraph`) were defined to track the progress and transitions in the paragraph-writing process.\n\nThis PDDL model captures the essence of the task and ensures logical state transitions for each step.",
    "Here are the PDDL actions for the task \"How to Make Corned Beef Hash,\" based on the description and steps provided:\n\n```lisp\n(:action gather-ingredients\n    :parameters (?i - ingredients)\n    :precondition (and (available ?i) (not (gathered ?i)))\n    :effect (and (gathered ?i) (not (available ?i)))\n)\n\n(:action combine-ingredients\n    :parameters (?b - beef_hash ?bowl - container)\n    :precondition (and (gathered ?b) (empty ?bowl))\n    :effect (and (combined ?b ?bowl) (not (gathered ?b)) (not (empty ?bowl)))\n)\n\n(:action light-flavorful-toast\n    :parameters (?t - toast)\n    :precondition (and (untoasted ?t))\n    :effect (and (toasted ?t) (lightly toasted",
    "Here are the PDDL actions for the task \"How to Make Burger Bites,\" based on the given steps and descriptions:\n\n---\n\n### PDDL Actions:\n\n#### 1. Defrost Mixture\n```lisp\n(:action defrost-mixture\n    :parameters (?p - player ?m - mixture)\n    :precondition (and (inventory ?p ?m) (frozen ?m))\n    :effect (and (defrosted ?m) (not (frozen ?m)))\n)\n```\n\n#### 2. Prepare Bread\n```lisp\n(:action prepare_bread\n    :parameters (?p - player ?b - bread ?bowl - mixing_bowl)\n    :precondition (and (at ?p ?bowl) (inventory ?p ?b))\n    :effect (and (prepared ?b))\n)\n```\n\n#### 3. Prepare Sauce\n```lisp\n(:action prepare_sauce\n    :parameters (?p - player ?stove - stove_knob ?v - velveeta)\n    :precondition (and (at ?p ?stove) (inventory ?p ?v) (on ?stove))\n    :effect (and (prepared ?v) (sauce_ready ?v))\n)\n```\n\n#### 4. Cook Meat\n```lisp\n(:action cook_meat\n    :parameters (?p - player ?meat - beef)\n    :precondition (and (inventory ?p ?meat) (defrosted ?meat))\n    :effect (and (cooked ?meat))\n)\n```\n\n#### 5. Finish Meat\n```lisp\n(:action finish_meat\n    :parameters (?p - player ?meat - beef)\n    :precondition (and (cooked ?meat))\n    :effect (and (finished ?meat))\n)\n```\n\n#### 6. Finish Bread\n```lisp\n(:action finish_bread\n    :parameters (?p - player ?b - bread)\n    :precondition (and (prepared ?b))\n    :effect (and (finished ?b))\n)\n```\n\n#### 7. Finish Mixture\n```lisp\n(:action finish_mixture\n    :parameters (?p - player ?s - soup)\n    :precondition (and (inventory ?p ?s) (defrosted ?s))\n    :effect (and (finished ?s))\n)\n```\n\n#### 8. Cook Final Meal\n```lisp\n(:action cook_final_meal\n    :parameters (?p - player ?k - kitchen ?meat - beef ?bread - bread ?sauce - velveeta ?soup - soup)\n    :precondition (and (at ?p ?k) (finished ?meat) (finished ?bread) (finished ?soup) (prepared ?sauce))\n    :effect (and (meal_ready) (enjoyable_meal))\n)\n```\n\n---\n\n### Explanation of the Actions:\n1. **Defrost Mixture**: The mixture (e.g., soup or meat) starts in a frozen state and becomes defrosted after this action.\n2. **Prepare Bread**: Bread is prepared in a mixing bowl and transitions to a \"prepared\" state.\n3. **Prepare Sauce**: Sauce is prepared using Velveeta and a stove, transitioning to a \"sauce_ready\" state.\n4. **Cook Meat**: Beef is cooked after being defrosted, transitioning to a \"cooked\" state.\n5. **Finish Meat**: The cooked meat is finalized, transitioning to a \"finished\" state.\n6. **Finish Bread**: The prepared bread is finalized, transitioning to a \"finished\" state.\n7. **Finish Mixture**: The defrosted soup is finalized, transitioning to a \"finished\" state.\n8. **Cook Final Meal**: All finished ingredients (meat, bread, soup) and prepared sauce are combined in the kitchen to create the final meal, transitioning to a \"meal_ready\" state.\n\nThis sequence ensures the logical progression of the task while capturing all relevant state transitions for the entities involved.",
    "Below are the PDDL actions generated for the task **\"How to Grill a Burger on a Foreman Grill\"** based on the provided steps and descriptions.\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action choose_burger\n    :parameters (?p - player ?patty - patty ?freezer - location)\n    :precondition (and (at ?p ?freezer) (at ?patty ?freezer) (frozen ?patty))\n    :effect (and (inventory ?p ?patty) (not (at ?patty ?freezer)))\n)\n\n(:action prepare_grill\n    :parameters (?p - player ?grill - grill ?knob - stove_knob)\n    :precondition (and (at ?p ?grill) (off ?grill) (at ?knob stove) (not (preheated ?grill)))\n    :effect (and (preheated ?grill) (on ?grill))\n)\n\n(:action free_patties\n    :parameters (?p - player ?patty - patty ?grill - grill ?plate - grill_plate)\n    :precondition (and (inventory ?p ?patty) (preheated ?grill) (at ?grill ?plate))\n    :effect (and (at ?patty ?plate) (not (inventory ?p ?patty)))\n)\n\n(:action cook\n    :parameters (?p - player ?patty - patty ?grill - grill)\n    :precondition (and (at ?patty grill_plate) (preheated ?grill) (not (cooked ?patty)))\n    :effect (cooked ?patty)\n)\n\n(:action remove_burger\n    :parameters (?p - player ?patty - patty ?grill - grill)\n    :precondition (and (at ?patty grill_plate) (cooked ?patty) (at ?p ?grill))\n    :effect (and (inventory ?p ?patty) (not (at ?patty grill_plate)))\n)\n\n(:action eat_burger\n    :parameters (?p - player ?patty - patty)\n    :precondition (and (inventory ?p ?patty) (cooked ?patty) (not (eaten ?patty)) (safe_temperature ?patty))\n    :effect (and (eaten ?patty) (not (inventory ?p ?patty)))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`choose_burger`**:  \n   - **Parameters**: The player (`?p`), the burger patty (`?patty`), and the freezer location (`?freezer`).\n   - **Preconditions**: The player must be at the freezer, and the patty must be frozen and at the freezer.\n   - **Effects**: The patty is added to the player's inventory, and it is no longer at the freezer.\n\n2. **`prepare_grill`**:  \n   - **Parameters**: The player (`?p`), the grill (`?grill`), and the stove knob (`?knob`).\n   - **Preconditions**: The grill must be off, and the player must be at the grill and the stove knob.\n   - **Effects**: The grill is preheated and turned on.\n\n3. **`free_patties`**:  \n   - **Parameters**: The player (`?p`), the burger patty (`?patty`), the grill (`?grill`), and the grill plate (`?plate`).\n   - **Preconditions**: The player must have the patty in their inventory, and the grill must be preheated.\n   - **Effects**: The patty is placed on the grill plate, and it is removed from the player's inventory.\n\n4. **`cook`**:  \n   - **Parameters**: The player (`?p`), the burger patty (`?patty`), and the grill (`?grill`).\n   - **Preconditions**: The patty must be on the grill plate, the grill must be preheated, and the patty must not already be cooked.\n   - **Effects**: The patty becomes cooked.\n\n5. **`remove_burger`**:  \n   - **Parameters**: The player (`?p`), the burger patty (`?patty`), and the grill (`?grill`).\n   - **Preconditions**: The patty must be cooked and on the grill plate, and the player must be at the grill.\n   - **Effects**: The patty is added to the player's inventory and removed from the grill plate.\n\n6. **`eat_burger`**:  \n   - **Parameters**: The player (`?p`) and the burger patty (`?patty`).\n   - **Preconditions**: The player must have the patty in their inventory, the patty must be cooked, not already eaten, and at a safe temperature.\n   - **Effects**: The patty is eaten and removed from the player's inventory.\n\n---\n\n### Notes:\n- The state transitions focus on the burger patty's state changes, such as `frozen`, `cooked`, and `eaten`, as well as the grill's state, such as `preheated` and `on`.\n- Irrelevant steps have been adjusted or omitted to maintain logical consistency and task relevance.\n- The precondition `safe_temperature` in `eat_burger` ensures the burger is consumed while it's still warm, as described in the task.",
    "Here are the PDDL actions for the task \"How to Keep Burgers Flat,\" following the steps and descriptions provided:\n\n---\n\n### PDDL Actions:\n\n#### Action 1: Warm Vegetable Oil\n```lisp\n(:action warm_vegetable_oil\n    :parameters (?oil - ingredient ?pan - tool ?stove - appliance ?loc - location)\n    :precondition (and\n      (at ?oil ?loc)\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n      (clean ?pan)\n    )\n    :effect (and\n      (heated ?pan)\n      (heated ?oil)\n      (not (clean ?pan))\n    )\n)\n```\n\n---\n\n#### Action 2: Smash Meat Flat\n```lisp\n(:action smash_meat\n    :parameters (?meat - ingredient ?pan - tool ?loc - location)\n    :precondition (and\n      (at ?meat ?loc)\n      (at-tool ?pan ?loc)\n      (heated ?pan)\n    )\n    :effect (and\n      (flattened ?meat)\n      (in-pan ?meat ?pan)\n      (not (at ?meat ?loc))\n    )\n)\n```\n\n---\n\n#### Action 3: Season Burgers\n```lisp\n(:action season_burgers\n    :parameters (?burger - ingredient ?seasoning - ingredient ?loc - location)\n    :precondition (and\n      (at ?burger ?loc)\n      (at ?seasoning ?loc)\n    )\n    :effect (and\n      (seasoned ?burger)\n      (not (at ?seasoning ?loc))\n    )\n)\n```\n\n---\n\n#### Action 4: Cook Burger\n```lisp\n(:action cook_burger\n    :parameters (?burger - ingredient ?pan - tool ?stove - appliance ?loc - location)\n    :precondition (and\n      (seasoned ?burger)\n      (in-pan ?burger ?pan)\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (heated ?pan)\n    )\n    :effect (and\n      (cooked ?burger)\n      (brown_bottom ?burger)\n    )\n)\n```\n\n---\n\n#### Action 5: Flatten Patties\n```lisp\n(:action flatten_patties\n    :parameters (?patty - ingredient ?container - tool ?loc - location)\n    :precondition (and\n      (at ?patty ?loc)\n      (at-tool ?container ?loc)\n    )\n    :effect (and\n      (flattened ?patty)\n      (in-container ?patty ?container)\n      (not (at ?patty ?loc))\n    )\n)\n```\n\n---\n\n#### Action 6: Cook Patties\n```lisp\n(:action cook_patties\n    :parameters (?patty - ingredient ?stove - appliance ?loc - location)\n    :precondition (and\n      (flattened ?patty)\n      (at ?patty ?loc)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n    )\n    :effect (and\n      (cooked ?patty)\n      (brown_all_over ?patty)\n      (not (at ?patty ?loc))\n    )\n)\n```\n\n---\n\n### Notes:\n1. The step \"cook npc\" seems irrelevant or unclear in the context of this task, so it has been omitted.\n2. The actions focus on the state changes of the meat (e.g., flattened, cooked, seasoned) and the tools/appliances involved.\n3. Each action reflects the logical flow of the task, ensuring preconditions and effects align with the descriptions provided.\n\nThis set of actions captures the intent and state transitions required to complete the task \"How to Keep Burgers Flat.\"",
    "Here are the PDDL actions for the task \"How to Cook Polenta,\" based on the given steps and descriptions:\n\n```lisp\n; Action for Step 1\n(:action gather_ingredients\n    :parameters (?mixture - entity)\n    :precondition (and\n      (at_location ?mixture in_pantry)\n    )\n    :effect (and\n      (not (at_location ?mixture in_pantry))\n      (at_location ?mixture on_counter)\n    )\n)\n\n; Action for Step 2\n(:action make_polenta_recipe\n    :parameters (?alice - entity ?mixture - entity ?pot - entity)\n    :precondition (and\n      (at_location ?mixture on_counter)\n      (has_cleanliness ?pot clean)\n      (at_location ?pot on_stove)\n      (has_power ?alice off)\n    )\n    :effect (and\n      (not (at_location ?mixture on_counter))\n      (at_location ?mixture in_pot)\n      (not (has_cleanliness ?pot clean))\n      (has_cleanliness ?pot dirty)\n      (not (has_power ?alice off))\n      (has_power ?alice on)\n    )\n)\n\n; Action for Step 3\n(:action stir_ingredients\n    :parameters (?cream_cheese - entity ?mixing_bowl - entity ?spoon - entity)\n    :precondition (and\n      (at_location ?cream_cheese in_fridge)\n      (at_location ?mixing_bowl on_counter)\n      (has_cleanliness ?spoon clean)\n    )\n    :effect (and\n      (not (at_location ?cream_cheese in_fridge))\n      (at_location ?cream_cheese in_mixing_bowl)\n      (not (has_cleanliness ?spoon clean))\n      (has_cleanliness ?spoon dirty)\n    )\n)\n\n; Action for Step 4\n(:action mix_ingredients\n    :parameters (?canola_oil - entity ?blender - entity ?mixing_bowl - entity)\n    :precondition (and\n      (at_location ?canola_oil in_pantry)\n      (at_location ?blender on_counter)\n      (at_location ?mixing_bowl on_counter)\n      (has_cleanliness ?blender clean)\n    )\n    :effect (and\n      (not (at_location ?canola_oil in_pantry))\n      (at_location ?canola_oil in_blender)\n      (not (has_cleanliness ?blender clean))\n      (has_cleanliness ?blender dirty)\n    )\n)\n\n; Action for Step 5\n(:action serve_polenta\n    :parameters (?polenta - entity ?mixing_bowl - entity ?bowl - entity)\n    :precondition (and\n      (at_location ?polenta in_mixing_bowl)\n      (has_temperature ?polenta hot)\n      (at_location ?mixing_bowl on_counter)\n      (has_cleanliness ?bowl clean)\n    )\n    :effect (and\n      (not (at_location ?polenta in_mixing_bowl))\n      (at_location ?polenta in_bowl)\n      (not (at_location ?mixing_bowl on_counter))\n      (at_location ?mixing_bowl in_sink)\n      (not (has_cleanliness ?bowl clean))\n      (has_cleanliness ?bowl dirty)\n    )\n)\n```\n\n### Explanation of Actions:\n1. **`gather_ingredients`**: Captures the action of moving the mixture (or ingredients) from the pantry to the counter.\n2. **`make_polenta_recipe`**: Represents the process of starting the polenta recipe by adding the mixture to a pot and turning on the stove (or Alice, if it's a cooking device).\n3. **`stir_ingredients`**: Reflects stirring cream cheese into a mixing bowl using a spoon, changing the state of the cream cheese and the cleanliness of the spoon.\n4. **`mix_ingredients`**: Captures adding canola oil to the blender and mixing it with other ingredients, updating the states of the blender and the oil.\n5. **`serve_polenta`**: Represents transferring the hot polenta from the mixing bowl to a serving bowl, while also moving the mixing bowl to the sink.\n\n### Adjustments:\n- Some actions were modified to better align with the task description (e.g., adding butter and cheese was generalized into stirring/mixing actions).\n- The states of entities such as cleanliness, location, and temperature were emphasized based on the task's context."
]