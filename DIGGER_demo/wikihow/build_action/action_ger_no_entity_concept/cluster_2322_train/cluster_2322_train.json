[
    "Here are the PDDL actions for the task \"How to Do a Chain Braid,\" based on the described steps and their associated state changes:\n\n```lisp\n(:action PartHair\n    :parameters (?npc - person)\n    :precondition (not (hair_parted ?npc))\n    :effect (hair_parted ?npc)\n)\n\n(:action GrabSmallSection\n    :parameters (?npc - person ?scissors - tool)\n    :precondition (and (hair_parted ?npc) (not (section_grabbed ?npc)))\n    :effect (section_grabbed ?npc)\n)\n\n(:action DivideSection\n    :parameters (?section - hair_section)\n    :precondition (and (section_grabbed ?npc) (not (section_divided ?section)))\n    :effect (section_divided ?section)\n)\n\n(:action TieStrands\n    :parameters (?npc - person ?tie - tie)\n    :precondition (and (section_divided ?section) (not (strand_knotted ?npc)))\n    :effect (strand_knotted ?npc)\n)\n\n(:action AddHairToStrands\n    :parameters (?npc - person)\n    :precondition (and (strand_knotted ?npc) (not (hair_added ?npc)))\n    :effect (hair_added ?npc)\n)\n\n(:action TieStrandsWithSpider\n    :parameters (?npc - person ?tie - spider_tie)\n    :precondition (and (hair_added ?npc) (not (strand_knotted_with_spider ?npc)))\n    :effect (strand_knotted_with_spider ?npc)\n)\n\n(:action ContinueBraiding\n    :parameters (?npc - person)\n    :precondition (and (strand_knotted_with_spider ?npc) (not (braid_complete ?npc)))\n    :effect (braid_complete ?npc)\n)\n\n(:action TieBraidOff\n    :parameters (?npc - person ?elastic - elastic)\n    :precondition (and (braid_complete ?npc) (not (braid_tied_off ?npc)))\n    :effect (braid_tied_off ?npc)\n)\n\n(:action BendHairToShape\n    :parameters (?npc - person)\n    :precondition (and (braid_tied_off ?npc) (not (hair_bent_to_shape ?npc)))\n    :effect (hair_bent_to_shape ?npc)\n)\n\n(:action GatherHair\n    :parameters (?npc - person ?pony - ponytail)\n    :precondition (and (hair_bent_to_shape ?npc) (not (hair_gathered ?pony)))\n    :effect (hair_gathered ?pony)\n)\n\n(:action TwistPonytailIntoBun\n    :parameters (?pony - ponytail)\n    :precondition (and (hair_gathered ?pony) (not (bun_created ?pony)))\n    :effect (bun_created ?pony)\n)\n```\n\n### Explanation of Actions:\n1. **PartHair**: Represents parting the hair down the center. The state `hair_parted` is introduced to track this.\n2. **GrabSmallSection**: Represents grabbing a small section of hair near the part. The state `section_grabbed` is introduced.\n3. **DivideSection**: Represents dividing the grabbed section into two thinner strands. The state `section_divided` tracks this.\n4. **TieStrands**: Represents tying the strands into a knot. The state `strand_knotted` is introduced.\n5. **AddHairToStrands**: Represents adding hair to the strands during the braiding process. The state `hair_added` tracks this.\n6. **TieStrandsWithSpider**: Represents tying the strands into another knot, with a specific tie called \"spider tie.\" The state `strand_knotted_with_spider` tracks this.\n7. **ContinueBraiding**: Represents the continuation of the braiding process by adding hair and tying knots. The state `braid_complete` tracks when the braid is done.\n8. **TieBraidOff**: Represents tying off the braid with an elastic. The state `braid_tied_off` is introduced.\n9. **BendHairToShape**: Represents bending the braided hair into the desired shape. The state `hair_bent_to_shape` tracks this.\n10. **GatherHair**: Represents gathering the hair into a ponytail or pigtails. The state `hair_gathered` tracks this.\n11. **TwistPonytailIntoBun**: Represents twisting the ponytail or pigtails into a bun. The state `bun_created` is introduced.\n\nEach action focuses on the relevant state transitions for the task, ensuring a logical progression from start to finish. Irrelevant or unclear steps were adjusted to align with the task description.",
    "Here are the PDDL actions for the task \"How to Braid Curly Hair,\" based on the given steps and descriptions:\n\n```lisp\n(:action GatherHair\n    :parameters (?n - npc)\n    :precondition (not (hair_gathered ?n))\n    :effect (hair_gathered ?n)\n)\n\n(:action PullHair\n    :parameters (?n - npc ?s - scissors)\n    :precondition (and (hair_gathered ?n) (not (hair_pulled ?n)))\n    :effect (hair_pulled ?n)\n)\n\n(:action BraidToEnd\n    :parameters (?n - npc)\n    :precondition (and (hair_gathered ?n) (hair_pulled ?n) (not (braided ?n)))\n    :effect (braided ?n)\n)\n```\n\n### Explanation of Actions:\n1. **GatherHair**:\n   - **Parameters**: The action involves the NPC (`?n`).\n   - **Precondition**: The hair must not already be gathered (`not (hair_gathered ?n)`).\n   - **Effect**: The hair becomes gathered (`hair_gathered ?n`).\n\n2. **PullHair**:\n   - **Parameters**: The action involves the NPC (`?n`) and scissors (`?s`), though the scissors might be symbolic here, as pulling hair doesn't necessarily involve cutting.\n   - **Precondition**: Hair must already be gathered (`hair_gathered ?n`), and it must not have been pulled yet (`not (hair_pulled ?n)`).\n   - **Effect**: The hair is pulled from the sides, preparing it for braiding (`hair_pulled ?n`).\n\n3. **BraidToEnd**:\n   - **Parameters**: The action involves the NPC (`?n`).\n   - **Precondition**: Hair must already be gathered (`hair_gathered ?n`) and pulled (`hair_pulled ?n`), and the hair must not yet be braided (`not (braided ?n)`).\n   - **Effect**: The hair is braided to the end (`braided ?n`).\n\n### Adjustments to Steps:\nThe original step \"pull_hair npc scissors\" was slightly modified to fit the task description. While scissors are mentioned, they don't seem directly relevant to the braiding process. Instead, the focus was placed on pulling hair from the sides to continue braiding. The action names and logic were tailored to accurately reflect the task's intent and entity state changes.",
    "Below are the PDDL actions generated for the task \"How to Style Your Braids\" based on the provided steps and descriptions. Each action captures the intent, logic, and state changes of the task.\n\n---\n\n### PDDL Actions for \"How to Style Your Braids\"\n\n```lisp\n(:action dip_braids_in_faucet\n    :parameters (?n - npc)\n    :precondition (and (braids_ready ?n) (frizz_present ?n) (has_hot_water ?faucet))\n    :effect (and (braids_set ?n) (not (frizz_present ?n)))\n)\n\n(:action re_do_braids\n    :parameters (?n - npc)\n    :precondition (and (braids_ready ?n) (frizz_removed ?n))\n    :effect (and (braids_redone ?n) (not (braids_ready ?n)))\n)\n\n(:action treat_baby_hair\n    :parameters (?n - npc)\n    :precondition (and (baby_hair_visible ?n) (has_edge_control ?n))\n    :effect (and (baby_hair_tamed ?n) (not (baby_hair_visible ?n)))\n)\n\n(:action switch_length_and_style_of_braids\n    :parameters (?y - you)\n    :precondition (and (braids_customizable ?y) (style_change_desired ?y))\n    :effect (and (braids_styled ?y) (length_changed ?y))\n)\n\n(:action cover_hair_and_roots\n    :parameters (?n - npc)\n    :precondition (and (unruly_hairline ?n) (has_scarf ?n))\n    :effect (and (hairline_covered ?n) (roots_covered ?n) (not (unruly_hairline ?n)))\n)\n```\n\n---\n\n### Explanation of PDDL Actions\n\n1. **`dip_braids_in_faucet`**:\n   - **Parameters**: The NPC (`?n`) performing the action.\n   - **Preconditions**: The braids must be ready, frizz must be present, and a faucet with hot water must be available.\n   - **Effects**: The braids are set, and frizz is removed.\n\n2. **`re_do_braids`**:\n   - **Parameters**: The NPC (`?n`) performing the action.\n   - **Preconditions**: The braids must be ready, and frizz must have already been removed.\n   - **Effects**: The braids are redone, and the \"ready\" state is removed (indicating the braids are now in a new state).\n\n3. **`treat_baby_hair`**:\n   - **Parameters**: The NPC (`?n`) working on their baby hair.\n   - **Preconditions**: Baby hairs must be visible, and edge control cream must be available.\n   - **Effects**: Baby hairs are tamed, and their visibility is removed.\n\n4. **`switch_length_and_style_of_braids`**:\n   - **Parameters**: The agent (`?y`) who wants to change their braid style.\n   - **Preconditions**: The braids must be customizable, and the user must desire a style change.\n   - **Effects**: The braids are styled, and their length is changed.\n\n5. **`cover_hair_and_roots`**:\n   - **Parameters**: The NPC (`?n`) styling their hairline and roots.\n   - **Preconditions**: The hairline must be unruly, and a scarf must be available.\n   - **Effects**: The hairline and roots are covered, and the \"unruly hairline\" state is removed.\n\n---\n\n### Notes:\n- Each action is designed to reflect the intent of the described task while focusing on the relevant state changes for entities (e.g., braids, baby hair, hairline).\n- Irrelevant or ambiguous steps have been clarified to align with the task description.\n- The preconditions and effects ensure logical progression from one step to the next, maintaining the task's flow and intent.",
    "Here are the PDDL actions for the task \"How to Braid Hair.\" The actions are created based on the provided steps and descriptions, with slight modifications to ensure task relevance and proper state transitions.\n\n---\n\n### PDDL Actions:\n\n```lisp\n;; Action 1: Learn how to Dutch braid\n(:action learn-dutch-braid\n    :parameters (?npc - person)\n    :precondition (not (knows-dutch-braid ?npc))\n    :effect (knows-dutch-braid ?npc)\n)\n\n;; Action 2: Try a waterfall braid\n(:action try-waterfall-braid\n    :parameters (?npc - person ?hair - hair)\n    :precondition (and\n                    (knows-dutch-braid ?npc)\n                    (not (waterfall-braided ?hair))\n                  )\n    :effect (waterfall-braided ?hair)\n)\n\n;; Action 3: Create a braided headband\n(:action create-braided-headband\n    :parameters (?npc - person ?hair - hair)\n    :precondition (and\n                    (knows-dutch-braid ?npc)\n                    (not (braided-headband ?hair))\n                  )\n    :effect (braided-headband ?hair)\n)\n\n;; Action 4: Make a braided braid\n(:action make-braided-braid\n    :parameters (?npc - person ?hair - hair)\n    :precondition (and\n                    (knows-dutch-braid ?npc)\n                    (not (braided-braid ?hair))\n                  )\n    :effect (braided-braid ?hair)\n)\n\n;; Action 5: Try a rope braid\n(:action try-rope-braid\n    :parameters (?npc - person ?hair - hair)\n    :precondition (and\n                    (knows-dutch-braid ?npc)\n                    (not (rope-braided ?hair))\n                  )\n    :effect (rope-braided ?hair)\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **learn-dutch-braid**: The first step is for the person (`npc`) to learn how to Dutch braid. This action sets the state `(knows-dutch-braid ?npc)` to true, enabling subsequent braiding actions.\n\n2. **try-waterfall-braid**: Once the person knows how to Dutch braid, they can attempt a waterfall braid on the hair. The state of the hair changes to `(waterfall-braided ?hair)`.\n\n3. **create-braided-headband**: This action allows the person to create a braided headband. The hair's state changes to `(braided-headband ?hair)`.\n\n4. **make-braided-braid**: The person creates a more complex braid, referred to as a \"braided braid.\" The hair's state changes to `(braided-braid ?hair)`.\n\n5. **try-rope-braid**: Finally, the person attempts a rope braid. The hair's state changes to `(rope-braided ?hair)`.\n\n---\n\n### Key Notes:\n- The states chosen for the task focus on the knowledge of the person (`knows-dutch-braid ?npc`) and the specific braided styles applied to the hair (`waterfall-braided`, `braided-headband`, `braided-braid`, and `rope-braided`).\n- Preconditions ensure that each action logically follows from the previous one, maintaining proper task flow.\n- Effects capture the changes in the state of the hair or the person's knowledge after each action.",
    "Here are the PDDL actions for the task \"How to Braid Cornrows,\" based on the provided steps and descriptions. I\u2019ve adjusted the steps to ensure they are relevant to the task and capture the state transitions appropriately.\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action choose_cornrows\n    :parameters (?n - npc ?s - style)\n    :precondition (and (style ?s available) (preference ?n undecided))\n    :effect (and (preference ?n ?s) (style ?s selected))\n)\n\n(:action braid_cornrows\n    :parameters (?n - npc ?c - cornrows)\n    :precondition (and (preference ?n selected) (state ?c unbraided))\n    :effect (and (state ?c braided) (appearance ?n styled))\n)\n\n(:action create_unique_completed\n    :parameters (?c - cornrows ?p - pattern)\n    :precondition (and (state ?c braided) (pattern ?p unique) (state ?p uncompleted))\n    :effect (and (state ?p completed) (appearance ?c unique))\n)\n\n(:action sliplargerbeads\n    :parameters (?c - cornrows ?b - bead)\n    :precondition (and (state ?c braided) (size ?b large) (state ?b unadded))\n    :effect (and (state ?b added) (appearance ?c accessorized))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`choose_cornrows`**:\n   - **Parameters**: The NPC (`?n`) who is choosing the style and the style (`?s`) they want to select.\n   - **Preconditions**: The style must be available, and the NPC's preference must currently be undecided.\n   - **Effect**: The NPC selects the style, and the style becomes \"selected.\"\n\n2. **`braid_cornrows`**:\n   - **Parameters**: The NPC (`?n`) and the cornrows (`?c`) to be braided.\n   - **Preconditions**: The NPC must have selected a style, and the cornrows must be in an unbraided state.\n   - **Effect**: The cornrows become braided, and the NPC's appearance is updated to reflect the styled look.\n\n3. **`create_unique_completed`**:\n   - **Parameters**: The cornrows (`?c`) and the pattern (`?p`) to be added.\n   - **Preconditions**: The cornrows must already be braided, the pattern must be unique, and the pattern must be in an uncompleted state.\n   - **Effect**: The pattern becomes completed, and the cornrows take on a unique appearance.\n\n4. **`sliplargerbeads`**:\n   - **Parameters**: The cornrows (`?c`) and the bead (`?b`) to be added.\n   - **Preconditions**: The cornrows must already be braided, the bead must be large, and the bead must not yet be added.\n   - **Effect**: The bead is added to the cornrows, and the cornrows' appearance is updated to reflect the accessorized look.\n\n---\n\n### Notes:\n- The actions focus on the state transitions of the cornrows (`?c`), the NPC (`?n`), and any accessories or patterns (`?b` or `?p`).\n- The descriptions were interpreted to capture the intent of styling, braiding, accessorizing, and creating unique patterns for cornrows.\n- Irrelevant or unclear steps were clarified or adjusted to align with the task of braiding and styling cornrows.",
    "Below are the PDDL actions generated for the task \"How to Braid Wire Rope\" based on the provided steps and descriptions. The actions focus on the entity state transitions relevant to the task, such as the state of the wire strands (separated, pulled, secured) and the completion of the braid.\n\n---\n\n### PDDL Actions:\n\n```lisp\n;; Action 1: Separate the strands of wire\n(:action separate-wire-strands\n    :parameters (?w - wire_rope)\n    :precondition (and\n                    (strands-intact ?w)\n                    (not (strands-separated ?w))\n                  )\n    :effect (and\n              (strands-separated ?w)\n              (not (strands-intact ?w))\n            )\n)\n\n;; Action 2: Braid the wire strands\n(:action braid-wire-strands\n    :parameters (?w - wire_rope ?npc - tool)\n    :precondition (and\n                    (strands-separated ?w)\n                    (not (braided ?w))\n                  )\n    :effect (and\n              (braided ?w)\n              (not (strands-separated ?w))\n            )\n)\n\n;; Action 3: Pull the wire strands into place\n(:action pull-wire-strands\n    :parameters (?w - wire_rope)\n    :precondition (and\n                    (braided ?w)\n                    (not (strands-pulled ?w))\n                  )\n    :effect (and\n              (strands-pulled ?w)\n            )\n)\n\n;; Action 4: Secure the ends of the braided wire\n(:action secure-wire-ends\n    :parameters (?w - wire_rope ?e - ends)\n    :precondition (and\n                    (strands-pulled ?w)\n                    (not (ends-secured ?e))\n                  )\n    :effect (and\n              (ends-secured ?e)\n              (braid-completed ?w)\n            )\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`separate-wire-strands`**:\n   - **Parameters**: The wire rope (`?w`).\n   - **Preconditions**: The wire strands must be intact and not yet separated.\n   - **Effects**: Marks the strands as separated and removes the \"intact\" state.\n\n2. **`braid-wire-strands`**:\n   - **Parameters**: The wire rope (`?w`) and a tool (`?npc`) if needed for braiding.\n   - **Preconditions**: The strands must be separated but not yet braided.\n   - **Effects**: Marks the strands as braided and removes the \"separated\" state.\n\n3. **`pull-wire-strands`**:\n   - **Parameters**: The wire rope (`?w`).\n   - **Preconditions**: The strands must already be braided but not yet pulled into place.\n   - **Effects**: Marks the strands as pulled into place.\n\n4. **`secure-wire-ends`**:\n   - **Parameters**: The wire rope (`?w`) and the ends (`?e`) to be secured.\n   - **Preconditions**: The strands must be pulled into place, and the ends must not yet be secured.\n   - **Effects**: Marks the ends as secured and the braid as completed.\n\n### Key Entity States:\n- **`strands-intact`**: The wire strands are in their original, unseparated state.\n- **`strands-separated`**: The wire strands have been separated for braiding.\n- **`braided`**: The wire strands have been braided together.\n- **`strands-pulled`**: The wire strands have been pulled into place.\n- **`ends-secured`**: The ends of the wire rope have been secured.\n- **`braid-completed`**: The wire rope braiding process is complete.\n\nThis structure ensures that each step in the task is logically represented, with clear preconditions and effects for each action.",
    "Here is the PDDL representation of the task \"How to Side Braid Hair,\" broken down into actions with their parameters, preconditions, and effects:\n\n```lisp\n(:action sweep_all_of_hair\n    :parameters (?n - npc)\n    :precondition (and (hair_position ?n loose) (side ?n not_swept))\n    :effect (and (hair_position ?n swept_to_one_side) (side ?n swept))\n)\n\n(:action part_of_hair\n    :parameters (?n - npc)\n    :precondition (and (hair_position ?n swept_to_one_side) (hair_sections ?n unpartitioned))\n    :effect (and (hair_sections ?n partitioned_into_two))\n)\n\n(:action start_braid\n    :parameters (?n - npc)\n    :precondition (and (hair_sections ?n partitioned_into_two) (braid_status ?n not_started))\n    :effect (and (braid_status ?n in_progress))\n)\n\n(:action secure_with_hair_elastic\n    :parameters (?n - npc ?e - hair_elastic)\n    :precondition (and (braid_status ?n in_progress) (elastic_state ?e available))\n    :effect (and (braid_status ?n completed) (elastic_state ?e used))\n)\n```\n\n### Explanation of Each Action:\n\n1. **sweep_all_of_hair**:\n   - **Parameters**: The hair belongs to the non-player character (`?n - npc`).\n   - **Preconditions**: The hair is currently loose and not swept to one side.\n   - **Effects**: The hair is now swept to one side, changing its state to \"swept_to_one_side.\"\n\n2. **part_of_hair**:\n   - **Parameters**: The hair belongs to the non-player character (`?n - npc`).\n   - **Preconditions**: The hair must already be swept to one side, and it must not yet be partitioned into sections.\n   - **Effects**: The hair is now partitioned into two sections, ready for braiding.\n\n3. **start_braid**:\n   - **Parameters**: The hair belongs to the non-player character (`?n - npc`).\n   - **Preconditions**: The hair must be partitioned into two sections, and the braid must not yet have been started.\n   - **Effects**: The braid is now in progress, transitioning the braid status to \"in_progress.\"\n\n4. **secure_with_hair_elastic**:\n   - **Parameters**: The hair belongs to the non-player character (`?n - npc`), and a hair elastic (`?e - hair_elastic`) is used to secure the braid.\n   - **Preconditions**: The braid must be in progress, and the hair elastic must be available for use.\n   - **Effects**: The braid is now completed, and the hair elastic's state changes to \"used.\"\n\nThis representation ensures that each step of the task is logically consistent, with clear preconditions and effects that represent the state transitions of the hair and the hair elastic.",
    "Here are the PDDL actions for the \"How to Plait\" task, based on the steps and descriptions provided:\n\n```lisp\n(:action SmoothHair\n    :parameters (?h - hair)\n    :precondition (not (smooth ?h))\n    :effect (smooth ?h)\n)\n\n(:action SeparateHair\n    :parameters (?npc - person ?h - hair)\n    :precondition (and (smooth ?h) (not (separated ?h)))\n    :effect (separated ?h)\n)\n\n(:action PlaitHair\n    :parameters (?npc - person ?h - hair)\n    :precondition (and (separated ?h) (not (plaited ?h)))\n    :effect (plaited ?h)\n)\n\n(:action SecureBraid\n    :parameters (?npc - person ?h - hair)\n    :precondition (and (plaited ?h) (not (secured ?h)))\n    :effect (secured ?h)\n)\n```\n\n### Explanation of Actions:\n\n1. **SmoothHair**\n   - **Action Name**: SmoothHair\n   - **Parameters**: `?h` represents the hair.\n   - **Precondition**: The hair must not already be smooth (`not (smooth ?h)`).\n   - **Effect**: The hair becomes smooth (`smooth ?h`).\n\n2. **SeparateHair**\n   - **Action Name**: SeparateHair\n   - **Parameters**: `?npc` represents the person, and `?h` represents the hair.\n   - **Precondition**: The hair must be smooth (`smooth ?h`) and not already separated (`not (separated ?h)`).\n   - **Effect**: The hair becomes separated (`separated ?h`).\n\n3. **PlaitHair**\n   - **Action Name**: PlaitHair\n   - **Parameters**: `?npc` represents the person, and `?h` represents the hair.\n   - **Precondition**: The hair must be separated (`separated ?h`) and not already plaited (`not (plaited ?h)`).\n   - **Effect**: The hair becomes plaited (`plaited ?h`).\n\n4. **SecureBraid**\n   - **Action Name**: SecureBraid\n   - **Parameters**: `?npc` represents the person, and `?h` represents the hair.\n   - **Precondition**: The hair must be plaited (`plaited ?h`) and not already secured (`not (secured ?h)`).\n   - **Effect**: The hair becomes secured (`secured ?h`).\n\n### Notes:\n- The state transitions focus on the conditions of the hair (`smooth`, `separated`, `plaited`, `secured`), as these are the key states relevant to the task.\n- The steps have been interpreted to ensure logical progression and accurate representation of the changes in the hair's state.\n- The `?npc` parameter is included in actions where a person is involved in manipulating the hair (e.g., separating, plaiting, or securing).",
    "Here are the PDDL actions for the task \"How to Do a Basic Hair Braid,\" based on the provided steps and descriptions. The actions focus on the relevant entity states such as hair sections, their positions, and the progression of the braid.\n\n---\n\n### PDDL Actions for \"How to Do a Basic Hair Braid\"\n\n```lisp\n(:action part_hair\n    :parameters (?npc - person)\n    :precondition (and (hair_unparted ?npc))\n    :effect (and (hair_parted ?npc) (not (hair_unparted ?npc)))\n)\n\n(:action gather_hair\n    :parameters (?npc - person)\n    :precondition (and (hair_parted ?npc) (hair_loose ?npc))\n    :effect (and (hair_gathered ?npc) (not (hair_loose ?npc)))\n)\n\n(:action divide_chunk\n    :parameters (?npc - person ?b - braid_base)\n    :precondition (and (hair_gathered ?npc) (not (sections_divided ?b)))\n    :effect (and (sections_divided ?b) (section1 ?b) (section2 ?b) (section3 ?b))\n)\n\n(:action start_braid\n    :parameters (?npc - person ?b - braid_base)\n    :precondition (and (sections_divided ?b) (not (braiding_started ?b)))\n    :effect (and (braiding_started ?b))\n)\n\n(:action add_hair_to_section\n    :parameters (?npc - person ?s - section)\n    :precondition (and (braiding_started ?npc) (section_active ?s))\n    :effect (and (section_thicker ?s) (not (section_active ?s)))\n)\n\n(:action cross_hairline\n    :parameters (?s1 - section ?s2 - section)\n    :precondition (and (section_thicker ?s1) (section_thicker ?s2) (not (crossed ?s1 ?s2)))\n    :effect (and (crossed ?s1 ?s2))\n)\n\n(:action add_hair_to_sidepart_section\n    :parameters (?npc - person ?s - section)\n    :precondition (and (braiding_started ?npc) (section_active ?s))\n    :effect (and (section_thicker ?s) (not (section_active ?s)))\n)\n\n(:action cross_panel\n    :parameters (?p1 - panel ?p2 - panel)\n    :precondition (and (panel_ready ?p1) (panel_ready ?p2) (not (crossed ?p1 ?p2)))\n    :effect (and (crossed ?p1 ?p2))\n)\n\n(:action cross_over_sections\n    :parameters (?npc - person ?s1 - section ?s2 - section)\n    :precondition (and (braiding_started ?npc) (crossed ?s1 ?s2))\n    :effect (and (sections_interwoven ?npc))\n)\n\n(:action end_braid\n    :parameters (?b - braid ?npc - person)\n    :precondition (and (sections_interwoven ?npc) (not (braiding_completed ?b)))\n    :effect (and (braiding_completed ?b))\n)\n\n(:action stop_braiding\n    :parameters (?npc - person)\n    :precondition (and (braiding_completed ?npc) (not (braiding_stopped ?npc)))\n    :effect (and (braiding_stopped ?npc))\n)\n\n(:action attach_completed_braid\n    :parameters (?npc - person ?b - braid)\n    :precondition (and (braiding_completed ?b) (not (braid_attached ?b)))\n    :effect (and (braid_attached ?b))\n)\n```\n\n---\n\n### Explanation of Actions and State Changes:\n1. **`part_hair`**: The hair transitions from `hair_unparted` to `hair_parted`, enabling further actions.\n2. **`gather_hair`**: Hair transitions from `hair_loose` to `hair_gathered`, preparing it for braiding.\n3. **`divide_chunk`**: The gathered hair is divided into three sections, represented by `section1`, `section2`, and `section3`.\n4. **`start_braid`**: Marks the beginning of the braiding process.\n5. **`add_hair_to_section`**: A thin strand of hair is added to a section, making it `section_thicker`.\n6. **`cross_hairline`**: Represents the crossing of the hairline section over the middle section.\n7. **`add_hair_to_sidepart_section`**: Adds a strand of hair to the section near the side part.\n8. **`cross_panel`**: Represents crossing over larger sections or panels of hair.\n9. **`cross_over_sections`**: Indicates the interweaving of sections during the braiding process.\n10. **`end_braid`**: Marks the braid as complete when the desired length is achieved.\n11. **`stop_braiding`**: Ends the braiding process.\n12. **`attach_completed_braid`**: Ties off and secures the braid, marking it as `braid_attached`.\n\nEach action ensures that the state transitions reflect the logical progression of the hair braiding process. Irrelevant or unclear steps were adjusted to align with the task's intent and focus.",
    "Here are the PDDL actions for the task \"How to Make a Fishtail Braid,\" following the structure and format provided:\n\n---\n\n### PDDL Actions:\n\n#### 1. **make_side_braid**\n```lisp\n(:action make_side_braid\n    :parameters (?f - fishtail ?b - braid)\n    :precondition (and (state ?f unbraided) (location ?f side_of_head))\n    :effect (and (state ?f braided) (style ?b fishtail))\n)\n```\n\n#### 2. **make_topsy_turvy**\n```lisp\n(:action make_topsy_turvy\n    :parameters (?p - ponytail ?b - braid)\n    :precondition (and (state ?p tied) (location ?p back_of_head) (style ?b unbraided))\n    :effect (and (state ?p topsy_turvy) (style ?b ready_for_braiding))\n)\n```\n\n#### 3. **cover_with_clip**\n```lisp\n(:action cover_with_clip\n    :parameters (?c - clip ?h - hair_tie)\n    :precondition (and (state ?h visible) (location ?h on_braid))\n    :effect (and (state ?h covered) (location ?c on_braid))\n)\n```\n\n#### 4. **roll_bun**\n```lisp\n(:action roll_bun\n    :parameters (?b - braid ?n - nape_of_neck)\n    :precondition (and (state ?b braided) (location ?b loose))\n    :effect (and (state ?b rolled) (location ?b ?n))\n)\n```\n\n#### 5. **add_color_completed_braiding**\n```lisp\n(:action add_color_completed_braiding\n    :parameters (?h - hair ?e - extensions)\n    :precondition (and (state ?h unbraided) (state ?e available) (style ?h no_extensions))\n    :effect (and (state ?h ready_for_braiding) (style ?h with_extensions))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **make_side_braid**: This action captures the process of creating a side fishtail braid. The preconditions ensure the fishtail is unbraided and positioned at the side of the head. The effect changes its state to braided and assigns the fishtail style.\n\n2. **make_topsy_turvy**: This action represents the creation of a topsy-turvy ponytail as a preparatory step for the fishtail braid. The preconditions ensure the ponytail is tied and located at the back of the head, and the braid is unbraided. The effect changes the ponytail's state to topsy-turvy and makes the braid ready for further braiding.\n\n3. **cover_with_clip**: This action describes using a clip or barrette to cover the hair tie. The preconditions ensure the hair tie is visible and attached to the braid. The effect changes the hair tie's state to covered and places the clip on the braid.\n\n4. **roll_bun**: This action captures rolling the braid into a bun at the nape of the neck. The preconditions ensure the braid is already braided and loose. The effect changes the braid's state to rolled and positions it at the nape of the neck.\n\n5. **add_color_completed_braiding**: This action involves adding colored hair extensions before starting the braiding process. The preconditions ensure the hair is unbraided, the extensions are available, and the hair currently has no extensions. The effect prepares the hair for braiding and adds extensions to the hairstyle.\n\n### Adjustments:\n- The steps were carefully analyzed to ensure relevance to the task. For instance, \"add some colored hair extensions before you start braiding\" was rephrased to ensure it fits logically as a preparatory step.\n- The entity states (e.g., \"braided,\" \"unbraided,\" \"covered,\" \"rolled\") were chosen to align with the task requirements and describe the transitions accurately.\n\n",
    "Here are the PDDL actions for the task \"How to Braid Leather\" based on the provided steps and descriptions. The actions focus on the entity states and their transitions as described in the task.\n\n### PDDL Actions:\n\n```lisp\n(:action FashionBraidedLeather\n    :parameters (?l - leather)\n    :precondition (and (not (braided ?l)) (usable ?l))\n    :effect (and (braided ?l) (not (usable ?l)))\n)\n\n(:action MakeCompletedNecklace\n    :parameters (?n - necklace ?l - leather)\n    :precondition (and (braided ?l) (not (completed ?n)))\n    :effect (and (completed ?n) (used ?l))\n)\n\n(:action UseAsLeatherRing\n    :parameters (?l - leather ?r - ring)\n    :precondition (and (braided ?l) (not (used_as_ring ?r)))\n    :effect (and (used_as_ring ?r) (not (braided ?l)))\n)\n```\n\n### Explanation of Actions:\n\n1. **FashionBraidedLeather**:\n   - **Action Name**: Represents the step of braiding leather.\n   - **Parameters**: Takes a piece of leather (`?l`) as input.\n   - **Preconditions**: The leather must not already be braided (`not (braided ?l)`) and must be in a usable state (`usable ?l`).\n   - **Effect**: After the action, the leather becomes braided (`braided ?l`) and is no longer in a usable state (`not (usable ?l)`).\n\n2. **MakeCompletedNecklace**:\n   - **Action Name**: Represents the step of making a necklace using the braided leather.\n   - **Parameters**: Takes a necklace (`?n`) and braided leather (`?l`) as inputs.\n   - **Preconditions**: The leather must already be braided (`braided ?l`), and the necklace must not yet be completed (`not (completed ?n)`).\n   - **Effect**: After the action, the necklace becomes completed (`completed ?n`) and the leather is marked as used (`used ?l`).\n\n3. **UseAsLeatherRing**:\n   - **Action Name**: Represents the step of using a tiny braid as a leather ring.\n   - **Parameters**: Takes a piece of braided leather (`?l`) and a ring (`?r`) as inputs.\n   - **Preconditions**: The leather must already be braided (`braided ?l`), and the ring must not yet be marked as used (`not (used_as_ring ?r)`).\n   - **Effect**: After the action, the ring is marked as used (`used_as_ring ?r`), and the leather is no longer braided (`not (braided ?l)`).\n\n### Adjustments:\n- The original steps provided were slightly ambiguous or irrelevant (e.g., \"make_completed npc\"), so they were adjusted to align with the task's intent and description.\n- The actions focus on the state transitions of the leather (e.g., from `usable` to `braided` to `used`), the necklace (e.g., `completed`), and the ring (e.g., `used_as_ring`).\n\nThese actions capture the essence of the task and ensure that the entity states and transitions are logically consistent with the task description.",
    "Here are the PDDL actions for the task \"How to Make a Clothesline to Use Without Hangers\":\n\n```lisp\n;; Action 1: Find the smallest, thinnest surgical tubing\n(:action find_smallest_tunestick\n    :parameters (?npc - person)\n    :precondition (not (has_tubing ?npc))\n    :effect (has_tubing ?npc)\n)\n\n;; Action 2: Loop rubber bands together\n(:action loop_bands\n    :parameters (?npc - person)\n    :precondition (and\n                    (has_tubing ?npc)\n                    (not (bands_looped ?npc))\n                  )\n    :effect (bands_looped ?npc)\n)\n\n;; Action 3: Divide tubing into thirds\n(:action divide_length\n    :parameters (?npc - person)\n    :precondition (and\n                    (bands_looped ?npc)\n                    (not (tubing_divided ?npc))\n                  )\n    :effect (tubing_divided ?npc)\n)\n\n;; Action 4: String a hook along one of the strands\n(:action slip_larger_beads\n    :parameters (?npc - person)\n    :precondition (and\n                    (tubing_divided ?npc)\n                    (not (hook_slipped ?npc))\n                  )\n    :effect (hook_slipped ?npc)\n)\n\n;; Action 5: Braid the strands into a common overlap pattern\n(:action bend_to_shape_twice\n    :parameters (?npc - person)\n    :precondition (and\n                    (hook_slipped ?npc)\n                    (not (strands_braided ?npc))\n                  )\n    :effect (strands_braided ?npc)\n)\n\n;; Action 6: Attach the second hook to one of the strands\n(:action put_hook\n    :parameters (?npc - person)\n    :precondition (and\n                    (strands_braided ?npc)\n                    (not (second_hook_attached ?npc))\n                  )\n    :effect (second_hook_attached ?npc)\n)\n\n;; Action 7: Loop each end of the line around fixtures\n(:action loop_ends\n    :parameters (?npc - person ?ends - fixtures)\n    :precondition (and\n                    (second_hook_attached ?npc)\n                    (not (ends_looped ?ends))\n                  )\n    :effect (ends_looped ?ends)\n)\n\n;; Action 8: Hang the clothesline on a rack or fixture\n(:action hang_on_rack\n    :parameters (?npc - person ?ends - fixtures)\n    :precondition (and\n                    (ends_looped ?ends)\n                    (not (line_hung ?ends))\n                  )\n    :effect (line_hung ?ends)\n)\n```\n\n### Explanation of Actions and State Changes:\n1. **find_smallest_tunestick**: The person finds the smallest and thinnest surgical tubing. The state `has_tubing` is added to represent possession of the tubing.\n2. **loop_bands**: If rubber bands are used, they are looped together. The state `bands_looped` represents the completion of this step.\n3. **divide_length**: The tubing is divided into three equal lengths. The state `tubing_divided` is added to reflect this.\n4. **slip_larger_beads**: A hook is slipped along one of the strands. The state `hook_slipped` represents this action.\n5. **bend_to_shape_twice**: The strands are braided into a common overlap pattern. The state `strands_braided` is added.\n6. **put_hook**: A second hook is attached to one of the strands. The state `second_hook_attached` is added.\n7. **loop_ends**: Each end of the clothesline is looped around fixtures to secure it. The state `ends_looped` is added.\n8. **hang_on_rack**: The clothesline is hung on a rack or fixture, making it ready for use. The state `line_hung` is added to indicate completion.\n\nThese actions represent the logical steps and state transitions required to complete the task of creating a clothesline without hangers.",
    "Here is the PDDL representation for the task \"How to Do Different Braids,\" based on the provided steps and descriptions. I have adjusted the steps to ensure relevance and logical flow for the task.\n\n---\n\n### PDDL Actions\n\n```lisp\n(:action create_braids\n    :parameters (?npc - npc ?hair - hair)\n    :precondition (and (has_hair ?npc ?hair) (natural ?hair))\n    :effect (and (braided ?hair) (mini_braids ?hair))\n)\n\n(:action divide_hair_for_cornrows\n    :parameters (?npc - npc ?hair - hair)\n    :precondition (and (has_hair ?npc ?hair) (braided ?hair) (mini_braids ?hair))\n    :effect (cornrows ?hair)\n)\n\n(:action wrap_braids_for_milkmaid\n    :parameters (?npc - npc ?hair - hair)\n    :precondition (and (has_hair ?npc ?hair) (braided ?hair) (regular_braids ?hair))\n    :effect (milkmaid_braids ?hair)\n)\n\n(:action wrap_braids_for_crown\n    :parameters (?npc - npc ?hair - hair)\n    :precondition (and (has_hair ?npc ?hair) (braided ?hair) (dutch_braids ?hair))\n    :effect (crown_braid ?hair)\n)\n\n(:action create_upside_down_braid\n    :parameters (?npc - npc ?hair - hair)\n    :precondition (and (has_hair ?npc ?hair) (natural ?hair))\n    :effect (upside_down_braid ?hair)\n)\n\n(:action turn_on_oven\n    :parameters (?npc - npc ?oven - oven)\n    :precondition (and (has ?npc ?oven) (off ?oven))\n    :effect (on ?oven)\n)\n```\n\n---\n\n### Explanation of Actions\n\n1. **create_braids**:\n   - **Description**: This action represents creating mini braids, such as box braids, on natural hair.\n   - **Parameters**: The NPC performing the action and their hair.\n   - **Preconditions**: The NPC must have natural hair.\n   - **Effects**: The hair becomes braided into mini braids.\n\n2. **divide_hair_for_cornrows**:\n   - **Description**: This action represents dividing the hair into mini Dutch braids to create cornrows.\n   - **Parameters**: The NPC and their hair.\n   - **Preconditions**: The hair must already be braided into mini braids.\n   - **Effects**: The hair is styled into cornrows.\n\n3. **wrap_braids_for_milkmaid**:\n   - **Description**: This action represents wrapping two regular braids around the head to create milkmaid braids.\n   - **Parameters**: The NPC and their hair.\n   - **Preconditions**: The hair must be braided into regular braids.\n   - **Effects**: The hair is styled into milkmaid braids.\n\n4. **wrap_braids_for_crown**:\n   - **Description**: This action represents wrapping a pair of Dutch braids around the head to form a braided crown.\n   - **Parameters**: The NPC and their hair.\n   - **Preconditions**: The hair must be braided into Dutch braids.\n   - **Effects**: The hair is styled into a crown braid.\n\n5. **create_upside_down_braid**:\n   - **Description**: This action represents creating an upside-down braid for a twist.\n   - **Parameters**: The NPC and their hair.\n   - **Preconditions**: The NPC must have natural hair.\n   - **Effects**: The hair is styled into an upside-down braid.\n\n6. **turn_on_oven**:\n   - **Description**: This step seems unrelated to braiding hair, but it is included as a generic action. It could represent preparing for a hair treatment requiring heat.\n   - **Parameters**: The NPC and an oven.\n   - **Preconditions**: The oven must be off.\n   - **Effects**: The oven is turned on.\n\n---\n\n### Notes:\n- I adjusted the unclear or redundant steps, such as \"wrap_braids npc\" (repeated twice), to be more specific and relevant to the descriptions provided.\n- The action \"turn_on_oven\" is included as is, but it does not directly relate to braiding. If it is irrelevant, it can be omitted.\n- Entity states like `braided`, `mini_braids`, `cornrows`, etc., are used to track the progress and styles of hair through the task.\n\nLet me know if you'd like further adjustments!",
    "Here are the PDDL actions for the task \"How to Braid Your Own Hair,\" generated based on the steps provided:\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action brush_with_hair\n    :parameters (?person - agent ?hair - hair)\n    :precondition (and (state ?hair tangled) (holding ?person brush))\n    :effect (and (state ?hair untangled))\n)\n\n(:action part_of_hair\n    :parameters (?person - agent ?hair - hair)\n    :precondition (and (state ?hair untangled) (holding ?person comb))\n    :effect (and (state ?hair parted))\n)\n\n(:action start_braid\n    :parameters (?person - agent ?hair - hair)\n    :precondition (and (state ?hair parted) (state ?hair untangled))\n    :effect (and (state ?hair in_braid_start))\n)\n\n(:action make_sliplargerbeads\n    :parameters (?person - agent ?hair - hair ?beads - accessory)\n    :precondition (and (state ?hair in_braid_start) (state ?beads ready_to_attach))\n    :effect (and (state ?beads attached_to_braid)))\n)\n\n(:action braiding_with_hair\n    :parameters (?person - agent ?hair - hair)\n    :precondition (and (state ?hair in_braid_start))\n    :effect (and (state ?hair braided))\n)\n\n(:action secure_braid\n    :parameters (?person - agent ?braid - braid ?elastic - hair_elastic)\n    :precondition (and (state ?braid braided) (state ?elastic available))\n    :effect (and (state ?braid secured) (state ?elastic used))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **brush_with_hair**:\n   - **Parameters**: The person (`?person`) and their hair (`?hair`).\n   - **Preconditions**: The hair must be tangled, and the person must be holding a brush.\n   - **Effect**: The hair becomes untangled after brushing.\n\n2. **part_of_hair**:\n   - **Parameters**: The person (`?person`) and their hair (`?hair`).\n   - **Preconditions**: The hair must be untangled, and the person must be holding a comb.\n   - **Effect**: The hair becomes parted into sections.\n\n3. **start_braid**:\n   - **Parameters**: The person (`?person`) and their hair (`?hair`).\n   - **Preconditions**: The hair must be parted and untangled.\n   - **Effect**: The hair is prepared to start the braid.\n\n4. **make_sliplargerbeads**:\n   - **Parameters**: The person (`?person`), their hair (`?hair`), and beads (`?beads`).\n   - **Preconditions**: The braid is started, and the beads are ready to attach.\n   - **Effect**: The beads are attached to the braid.\n\n5. **braiding_with_hair**:\n   - **Parameters**: The person (`?person`) and their hair (`?hair`).\n   - **Preconditions**: The braid must have been started.\n   - **Effect**: The hair is braided further.\n\n6. **secure_braid**:\n   - **Parameters**: The person (`?person`), the braid (`?braid`), and a hair elastic (`?elastic`).\n   - **Preconditions**: The braid must be completed, and the hair elastic must be available.\n   - **Effect**: The braid is secured, and the hair elastic is marked as used.\n\n---\n\n### Notes:\n- The steps were refined to ensure relevance to the task and logical flow.\n- The states of the hair (`tangled`, `untangled`, `parted`, `in_braid_start`, `braided`, `secured`) and accessories (`ready_to_attach`, `attached_to_braid`, `available`, `used`) were chosen to reflect the changes in entity states during the task.\n- Each action captures a specific step in the process of braiding hair, ensuring a clear and accurate representation of the task in PDDL."
]