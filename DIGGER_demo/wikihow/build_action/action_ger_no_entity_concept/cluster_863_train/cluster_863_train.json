[
    "Here is the PDDL representation of the task \"How to Remove Hair from Your Bikini Area with Nair\" based on the given steps and descriptions. I have adjusted the steps to align with the task's intent and ensured that the state changes reflect the logic of the process.\n\n---\n\n### PDDL Actions for the Task\n\n```lisp\n(:action clean_shelter ; clean the area to prepare for the process\n    :parameters (?p - player ?l - location)\n    :precondition (at ?p ?l)\n    :effect (and (clean ?l))\n)\n\n(:action trim_hair ; trim hair before applying Nair\n    :parameters (?p - player ?trimmer - item)\n    :precondition (and (inventory ?p ?trimmer) (not (trimmed_hair)))\n    :effect (and (trimmed_hair))\n)\n\n(:action wet_skin ; wet the skin to prepare for Nair application\n    :parameters (?p - player ?water - item)\n    :precondition (and (inventory ?p ?water) (trimmed_hair) (not (wet_skin)))\n    :effect (and (wet_skin))\n)\n\n(:action apply_nair ; apply Nair to the skin\n    :parameters (?p - player ?nair - item)\n    :precondition (and (inventory ?p ?nair) (wet_skin) (not (nair_applied)))\n    :effect (and (nair_applied))\n)\n\n(:action gather_time ; wait for Nair to take effect\n    :parameters (?p - player)\n    :precondition (and (nair_applied) (not (nair_effective)))\n    :effect (and (nair_effective))\n)\n\n(:action in_test_patch ; test a small patch of skin to ensure Nair is working\n    :parameters (?p - player)\n    :precondition (and (nair_effective) (not (test_patch_checked)))\n    :effect (and (test_patch_checked))\n)\n\n(:action wash_all ; wash off all the Nair from the skin\n    :parameters (?p - player ?water - item)\n    :precondition (and (inventory ?p ?water) (nair_effective) (test_patch_checked) (not (nair_removed)))\n    :effect (and (nair_removed))\n)\n\n(:action wait_for_loot ; wait for 24 hours to moisturize the skin\n    :parameters (?p - player)\n    :precondition (and (nair_removed) (not (skin_moisturized)))\n    :effect (and (skin_moisturized))\n)\n\n(:action maintain_bikini ; maintain bikini area for long-term results\n    :parameters (?p - player ?moisturizer - item)\n    :precondition (and (inventory ?p ?moisturizer) (skin_moisturized) (not (bikini_maintained)))\n    :effect (and (bikini_maintained))\n)\n```\n\n---\n\n### Explanation of Actions\n\n1. **`clean_shelter`**: Represents cleaning the area (e.g., bathroom) to prepare for the process. The effect is marking the location as clean.\n2. **`trim_hair`**: Trims the hair to make the Nair more effective. The state `trimmed_hair` is updated.\n3. **`wet_skin`**: Wetting the skin is a necessary step before applying Nair. The state `wet_skin` is updated.\n4. **`apply_nair`**: Applies the Nair to the skin. The state `nair_applied` is updated.\n5. **`gather_time`**: Represents waiting for the Nair to take effect. The state `nair_effective` is updated after this action.\n6. **`in_test_patch`**: Tests a small patch of skin to ensure Nair is working and there are no adverse reactions. The state `test_patch_checked` is updated.\n7. **`wash_all`**: Washes off all the Nair from the skin. The state `nair_removed` is updated.\n8. **`wait_for_loot`**: Represents waiting 24 hours to allow the skin to recover and moisturize. The state `skin_moisturized` is updated.\n9. **`maintain_bikini`**: Represents applying moisturizer or other maintenance to ensure long-term results. The state `bikini_maintained` is updated.\n\n---\n\n### Adjustments and Modifications\n\n- Some irrelevant or vague steps (e.g., `remove_wailmer`) were omitted or replaced with task-specific actions.\n- The state transitions focus on the skin's preparation, application of Nair, and post-process maintenance.\n- Preconditions and effects were carefully designed to ensure logical progression through the task.\n\nThis PDDL model captures the intent of the task and provides a structured way to represent the actions needed to remove hair from the bikini area using Nair.",
    "Below are the PDDL actions generated for the task \"How to Remove Butt Hair,\" based on the provided steps and descriptions. Each action reflects the intent, logic, and state changes of the task.\n\n```lisp\n;; Action 1: Pull hairs using an epilator\n(:action pull_hairs\n    :parameters (?npc - person)\n    :precondition (and\n                    (has_butt_hair ?npc)\n                    (available_epilator))\n    :effect (and\n              (reduced_butt_hair ?npc)\n              (not (has_butt_hair ?npc)))\n)\n\n;; Action 2: Apply depilatory cream to remove surface hairs\n(:action apply_depilatory_cream\n    :parameters (?npc - person)\n    :precondition (and\n                    (reduced_butt_hair ?npc)\n                    (available_depilatory_cream))\n    :effect (and\n              (smooth_surface ?npc)\n              (not (reduced_butt_hair ?npc)))\n)\n\n;; Action 3: Trim butt hair using an electric clipper\n(:action trim_butt_hair\n    :parameters (?npc - person)\n    :precondition (and\n                    (has_butt_hair ?npc)\n                    (available_clipper))\n    :effect (and\n              (shortened_butt_hair ?npc)\n              (not (has_butt_hair ?npc)))\n)\n\n;; Action 4: Remove hair permanently using laser hair removal\n(:action remove_hair_permanently\n    :parameters (?npc - person)\n    :precondition (and\n                    (has_butt_hair ?npc)\n                    (available_laser))\n    :effect (and\n              (laser_removed ?npc)\n              (not (has_butt_hair ?npc)))\n)\n```\n\n### Explanation of Actions:\n1. **`pull_hairs`**: This action represents the use of an epilator to pull out hairs. The precondition ensures the person has butt hair and an epilator is available. The effect reduces the amount of hair and changes the state to \"not having butt hair.\"\n\n2. **`apply_depilatory_cream`**: This action involves applying depilatory cream to remove surface hairs. The precondition requires that the person has reduced butt hair (e.g., after pulling hairs) and that depilatory cream is available. The effect results in a smooth surface and removes the \"reduced_butt_hair\" state.\n\n3. **`trim_butt_hair`**: This action uses an electric clipper to trim butt hair. The precondition ensures the person has butt hair and a clipper is available. The effect changes the state to \"shortened_butt_hair.\"\n\n4. **`remove_hair_permanently`**: This action uses laser hair removal for a permanent solution. The precondition requires the person to have butt hair and a laser device available. The effect permanently removes the hair and adds the \"laser_removed\" state.\n\n### Adjustments:\n- The action `remove_lock` mentioned in the steps was modified to `remove_hair_permanently` to align with the description of laser hair removal.\n- The steps were refined to ensure relevance to the task of hair removal.\n- States such as `has_butt_hair`, `reduced_butt_hair`, `smooth_surface`, and `shortened_butt_hair` were introduced to reflect the progressive changes in the state of the person's hair.\n\nThis structure ensures that each action captures the intent and state transitions of the task effectively.",
    "Below are the PDDL actions for the task \"How to Wash Coconut Oil Out of Hair,\" based on the provided steps and descriptions. The actions reflect the intent, logic, and state changes for each step in the task:\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action choose_oil ; choose a dry shampoo or powder\n      :parameters (?a - agent ?oil - dry_shampoo_or_powder) \n      :precondition (and (not (chosen ?oil)) (available ?oil))\n      :effect (and (chosen ?oil))\n   )\n\n(:action apply_powder_to_roots ; apply the chosen powder to the roots of hair\n      :parameters (?a - agent ?oil - dry_shampoo_or_powder ?h - hair) \n      :precondition (and (chosen ?oil) (not (powder_applied ?h)))\n      :effect (and (powder_applied ?h))\n   )\n\n(:action comb_through_hair ; comb through hair to distribute powder\n      :parameters (?a - agent ?comb - equipment ?h - hair) \n      :precondition (and (powder_applied ?h) (available ?comb))\n      :effect (and (oil_removed ?h))\n   )\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`choose_oil`**:\n   - **Action Name**: Represents the step of choosing a dry shampoo or powder to soak up the oil.\n   - **Parameters**: \n     - `?a`: The agent performing the action (e.g., Alice).\n     - `?oil`: The dry shampoo or powder being chosen.\n   - **Preconditions**: The powder must not already be chosen, and it must be available.\n   - **Effect**: The powder is marked as chosen.\n\n2. **`apply_powder_to_roots`**:\n   - **Action Name**: Represents applying the chosen powder to the roots of the hair.\n   - **Parameters**: \n     - `?a`: The agent performing the action.\n     - `?oil`: The chosen dry shampoo or powder.\n     - `?h`: The hair being treated.\n   - **Preconditions**: The powder must be chosen, and the powder must not yet be applied to the hair.\n   - **Effect**: The powder is applied to the hair.\n\n3. **`comb_through_hair`**:\n   - **Action Name**: Represents combing through the hair to distribute the powder and remove oil.\n   - **Parameters**: \n     - `?a`: The agent performing the action.\n     - `?comb`: The equipment (e.g., a comb or brush) being used.\n     - `?h`: The hair being treated.\n   - **Preconditions**: The powder must already be applied to the hair, and the comb must be available.\n   - **Effect**: The oil is removed from the hair.\n\n---\n\n### Key Entity State Transitions:\n- **Dry Shampoo or Powder**: \n  - State changes include `available` \u2192 `chosen`.\n- **Hair**: \n  - State changes include `not (powder_applied)` \u2192 `powder_applied` \u2192 `oil_removed`.\n- **Comb**: \n  - The comb is assumed to be `available` for the task.\n\nThese actions accurately reflect the task steps and associated state changes, ensuring the logic and goals of the task are captured in PDDL format.",
    "Here is the set of PDDL actions for the task \"How to Wax With Honey,\" based on the provided steps and descriptions. I've adjusted the steps to make them relevant to the task and ensured the PDDL actions accurately reflect the state changes.\n\n---\n\n### PDDL Actions:\n\n```lisp\n;; Action 1: Wash and dry your skin\n(:action wash_and_dry_skin\n    :parameters (?p - person ?s - skin)\n    :precondition (and\n      (dirty ?s)\n      (attached ?s ?p)\n    )\n    :effect (and\n      (not (dirty ?s))\n      (clean ?s)\n      (dry ?s)\n    )\n)\n\n;; Action 2: Grow hair to prepare for waxing\n(:action grow_hair\n    :parameters (?p - person ?h - hair)\n    :precondition (and\n      (attached ?h ?p)\n      (short ?h)\n    )\n    :effect (and\n      (not (short ?h))\n      (long ?h)\n    )\n)\n\n;; Action 3: Plan to wax (prepare the wax and wick)\n(:action plan_wax\n    :parameters (?w - wick ?h - honey)\n    :precondition (and\n      (available ?w)\n      (available ?h)\n    )\n    :effect (and\n      (prepared ?w ?h)\n      (ready_to_wax ?w)\n    )\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`wash_and_dry_skin`**:\n   - **Parameters**: The person (`?p`) and their skin (`?s`).\n   - **Preconditions**: The skin must be dirty (`dirty ?s`) and attached to the person (`attached ?s ?p`).\n   - **Effects**: The skin becomes clean (`clean ?s`) and dry (`dry ?s`), and the dirty state is removed (`not (dirty ?s)`).\n\n2. **`grow_hair`**:\n   - **Parameters**: The person (`?p`) and their hair (`?h`).\n   - **Preconditions**: The hair must be short (`short ?h`) and attached to the person (`attached ?h ?p`).\n   - **Effects**: The hair grows long (`long ?h`), and the short state is removed (`not (short ?h)`).\n\n3. **`plan_wax`**:\n   - **Parameters**: The wick (`?w`) and honey (`?h`).\n   - **Preconditions**: Both the wick and honey must be available (`available ?w` and `available ?h`).\n   - **Effects**: The wax is prepared with the wick and honey (`prepared ?w ?h`), and the system becomes ready for waxing (`ready_to_wax ?w`).\n\n---\n\n### Notes:\n- The step \"plan_wax wick1\" was interpreted as preparing the wax (using the wick and honey) to make it ready for waxing.\n- The steps \"wash_and_dry you skin\" and \"grow_hair npc\" were refined to focus on cleaning and preparing the skin, as well as growing hair for waxing.\n- State transitions were carefully defined to reflect changes in cleanliness, hair length, and the readiness of the waxing materials.",
    "Here are the PDDL actions for the task \"How to Get Wax Off a Tablecloth,\" based on the provided steps and descriptions. The irrelevant or unclear steps have been adjusted to better align with the task:\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action freeze_wax ; freeze the dripped wax to make it easier to remove\n    :parameters (?p - player ?wax - wax ?freezer - freezer)\n    :precondition (and (inventory ?p ?wax) (available ?freezer))\n    :effect (frozen ?wax)\n)\n\n(:action scrape_wax ; scrape the frozen wax off the tablecloth\n    :parameters (?p - player ?knife - knife ?wax - wax ?tablecloth - tablecloth)\n    :precondition (and (frozen ?wax) (on ?wax ?tablecloth) (inventory ?p ?knife))\n    :effect (and (removed ?wax ?tablecloth) (not (on ?wax ?tablecloth)))\n)\n\n(:action remove_wax_with_heat ; remove remaining wax residue using heat\n    :parameters (?p - player ?heat_source - heat_source ?tablecloth - tablecloth)\n    :precondition (and (available ?heat_source) (has_residue ?tablecloth))\n    :effect (and (clean ?tablecloth) (not (has_residue ?tablecloth)))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`freeze_wax`**: This action represents freezing the wax to make it solid and easier to scrape off. The preconditions ensure that the wax is available and that a freezer (or similar method) is accessible. The effect marks the wax as frozen.\n\n2. **`scrape_wax`**: This action involves scraping the frozen wax off the tablecloth using a dull knife or fingernail. The preconditions ensure that the wax is frozen, the wax is on the tablecloth, and the player has a suitable scraping tool (e.g., a knife). The effect removes the wax from the tablecloth.\n\n3. **`remove_wax_with_heat`**: This action handles removing any remaining wax residue using heat (e.g., an iron or hairdryer). The preconditions check that a heat source is available and that the tablecloth still has wax residue. The effect leaves the tablecloth clean and removes the residue.\n\n---\n\n### Adjustments Made:\n- The step \"free_wicks wick1\" was interpreted as freezing the wax because freezing is a logical step in the task description.\n- The step \"scrash-wicks npc\" was unclear and likely a typo. It was adjusted to \"scrape_wax\" to align with the task of removing frozen wax using a dull knife or fingernail.\n- The step \"remove_wicks wick1 heat1\" was modified to \"remove_wax_with_heat,\" as the task involves removing wax residue with heat, not wicks.\n\nThis revised set of actions reflects the task's intent and ensures that the state transitions (e.g., wax being frozen, removed, and the tablecloth being cleaned) are accurately represented.",
    "Here is the generated PDDL actions for the task \"How to Use Veet on Your Bikini Area,\" based on the steps provided. Each action reflects the state changes of the relevant entities and ensures the task is logically represented.\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action LayOutTowel\n    :parameters (?t - towel)\n    :precondition (not (laid_out ?t))\n    :effect (laid_out ?t)\n)\n\n(:action SitInPosition\n    :parameters (?p - person)\n    :precondition (not (comfortable_position ?p))\n    :effect (comfortable_position ?p)\n)\n\n(:action WarmWaxStrip\n    :parameters (?s - wax_strip)\n    :precondition (not (warm ?s))\n    :effect (warm ?s)\n)\n\n(:action PeelWaxStrips\n    :parameters (?s - wax_strip)\n    :precondition (and (warm ?s) (not (peeled ?s)))\n    :effect (peeled ?s)\n)\n\n(:action PlaceWaxStrip\n    :parameters (?s - wax_strip ?p - person)\n    :precondition (and (peeled ?s) (not (applied ?s)))\n    :effect (applied ?s)\n)\n\n(:action RubWaxStrip\n    :parameters (?s - wax_strip)\n    :precondition (and (applied ?s) (not (secured ?s)))\n    :effect (secured ?s)\n)\n\n(:action HoldSkinTaut\n    :parameters (?p - person)\n    :precondition (not (skin_taut ?p))\n    :effect (skin_taut ?p)\n)\n\n(:action RemoveWaxStrip\n    :parameters (?s - wax_strip ?p - person)\n    :precondition (and (secured ?s) (skin_taut ?p))\n    :effect (and (removed ?s) (not (hair_present ?p)))\n)\n\n(:action ContinueWaxing\n    :parameters (?p - person)\n    :precondition (exists (?s - wax_strip) (removed ?s))\n    :effect (not (hair_present ?p))\n)\n\n(:action WipeExcessWax\n    :parameters (?p - person ?c - cloth)\n    :precondition (and (hair_present ?p) (not (clean ?p)))\n    :effect (clean ?p)\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **LayOutTowel**: Represents laying out the towel for the waxing process. The state of the towel changes to `laid_out`.\n\n2. **SitInPosition**: Captures sitting in a comfortable position to prepare for waxing. The person's state changes to `comfortable_position`.\n\n3. **WarmWaxStrip**: Represents rubbing the wax strip to warm it. The wax strip's state changes to `warm`.\n\n4. **PeelWaxStrips**: Represents peeling the wax strips apart. The wax strip's state changes to `peeled`.\n\n5. **PlaceWaxStrip**: Represents applying the wax strip to the skin. The wax strip's state changes to `applied`.\n\n6. **RubWaxStrip**: Represents rubbing the wax strip to secure it properly. The wax strip's state changes to `secured`.\n\n7. **HoldSkinTaut**: Captures holding the skin taut for easy removal. The person's state changes to `skin_taut`.\n\n8. **RemoveWaxStrip**: Represents pulling off the wax strip. The wax strip's state changes to `removed`, and the person's state changes to `not (hair_present)` for that area.\n\n9. **ContinueWaxing**: Represents continuing the waxing process until the entire bikini area is hair-free. This action ensures the task is repeated until the goal state is achieved.\n\n10. **WipeExcessWax**: Represents wiping off any excess wax using the cloth provided. The person's state changes to `clean`.\n\n---\n\n### Notes:\n\n- The irrelevant or unclear steps (e.g., \"sliplargerbend npc\") were omitted or reinterpreted to align with the task description.\n- The state changes focus on the waxing process, such as warming, applying, securing, removing wax strips, and cleaning the area.\n- Preconditions and effects ensure logical progression through the task, reflecting the changes in entity states.\n\nThis representation provides a structured and logical breakdown of the task into PDDL actions, ensuring clarity and task-specific relevance.",
    "Here are the PDDL actions generated for the task \"How to Remove Hair Using Organic Ganda Beroza\":\n\n```lisp\n(:action wash_hands; wash hands with soap and water\n    :parameters (?p - player ?soap - soap ?water - water)\n    :precondition (and (inventory ?p ?soap) (inventory ?p ?water))\n    :effect (and (clean_hands ?p))\n)\n\n(:action take_ganda_beroza; take a small amount of solid ganda beroza\n    :parameters (?p - player ?ganda_beroza - ganda_beroza)\n    :precondition (and (inventory ?p ?ganda_beroza))\n    :effect (and (holding ?p ?ganda_beroza))\n)\n\n(:action take_pinch; take a pinch of ganda beroza for hair removal\n    :parameters (?p - player ?ganda_beroza - ganda_beroza ?pinch - pinch)\n    :precondition (and (holding ?p ?ganda_beroza))\n    :effect (and (holding ?p ?pinch) (not (holding ?p ?ganda_beroza)))\n)\n\n(:action apply_ganda_beroza; apply the pinch of ganda beroza to the body hair\n    :parameters (?p - player ?pinch - pinch ?hair - hair)\n    :precondition (and (holding ?p ?pinch) (unwanted_hair ?hair))\n    :effect (and (applied ?pinch ?hair) (not (holding ?p ?pinch)))\n)\n\n(:action remove_hair; remove unwanted hair using applied ganda beroza\n    :parameters (?p - player ?hair - hair ?pinch - pinch)\n    :precondition (and (applied ?pinch ?hair) (unwanted_hair ?hair))\n    :effect (and (removed ?hair) (not (unwanted_hair ?hair)))\n)\n\n(:action clean_skin; clean the skin after hair removal\n    :parameters (?p - player ?skin - skin)\n    :precondition (and (removed_hair ?skin))\n    :effect (and (clean_skin ?skin))\n)\n\n(:action remove_ganda_beroza; remove residual ganda beroza from fingers\n    :parameters (?p - player ?residual - ganda_beroza_residual)\n    :precondition (and (on_fingers ?p ?residual))\n    :effect (and (not (on_fingers ?p ?residual)))\n)\n\n(:action wash_hands_again; wash hands again with soap and water\n    :parameters (?p - player ?soap - soap ?water - water)\n    :precondition (and (inventory ?p ?soap) (inventory ?p ?water))\n    :effect (and (clean_hands ?p))\n)\n```\n\n### Explanation of Actions:\n\n1. **wash_hands**: This action ensures the player washes their hands with soap and water before proceeding, which is a hygiene step.\n   \n2. **take_ganda_beroza**: The player takes a small amount of solid ganda beroza, which is the hair removal agent.\n\n3. **take_pinch**: A pinch of ganda beroza is taken from the larger amount, which will be applied to the body hair.\n\n4. **apply_ganda_beroza**: The pinch of ganda beroza is applied to the unwanted hair. This is the essential step where the hair removal agent is applied.\n\n5. **remove_hair**: After applying the ganda beroza, the unwanted hair is removed by holding it between the thumb and index finger.\n\n6. **clean_skin**: Once the hair is removed, the skin is gently cleaned to ensure no residue remains.\n\n7. **remove_ganda_beroza**: Residual ganda beroza on the fingers is removed after the procedure is complete.\n\n8. **wash_hands_again**: The player washes their hands again with soap and water to ensure cleanliness after the entire process.\n\n### Notes:\n- The actions are structured to reflect the logical flow of the task while focusing on the relevant state transitions (e.g., clean_hands, holding, applied, removed, clean_skin).\n- Irrelevant or redundant steps were omitted or adjusted to align with the task description. For example, \"remove_wicks\" and \"remove_wailmer\" were unrelated to the task and excluded.\n- Preconditions and effects ensure that the state of the entities changes appropriately at each step of the process.",
    "Here is the PDDL representation for the task \"How to Wax\" based on the provided steps and descriptions. The actions are designed to reflect the relevant state changes and task-specific logic.\n\n---\n\n### PDDL Actions for \"How to Wax\"\n\n```lisp\n(:action BreakIngrownHairs\n    :parameters (?n - npc)\n    :precondition (not (ingrown_hairs_fixed ?n))\n    :effect (ingrown_hairs_fixed ?n)\n)\n\n(:action UseBabyPowder\n    :parameters (?n - npc)\n    :precondition (and (not (prepared ?n)) (ingrown_hairs_fixed ?n))\n    :effect (prepared ?n)\n)\n\n(:action BurnWicks\n    :parameters (?a - agent ?w - wick)\n    :precondition (and (not (burned ?w)) (safe_to_burn ?w))\n    :effect (burned ?w)\n)\n\n(:action WaxHair\n    :parameters (?n - npc)\n    :precondition (and (prepared ?n) (hair_long_enough ?n) (not (waxed ?n)))\n    :effect (waxed ?n)\n)\n\n(:action WaxArea\n    :parameters (?a - area)\n    :precondition (and (not (waxed ?a)) (safe_to_wax ?a))\n    :effect (waxed ?a)\n)\n```\n\n---\n\n### Explanation of Actions\n\n1. **BreakIngrownHairs**:\n   - **Parameters**: `?n` (the person or NPC whose ingrown hairs are being addressed).\n   - **Precondition**: The ingrown hairs have not yet been fixed.\n   - **Effect**: The ingrown hairs are fixed (`ingrown_hairs_fixed`).\n\n2. **UseBabyPowder**:\n   - **Parameters**: `?n` (the person or NPC being prepared for waxing).\n   - **Precondition**: The person is not yet prepared (`not (prepared ?n)`) but their ingrown hairs have been fixed (`ingrown_hairs_fixed ?n`).\n   - **Effect**: The person is now prepared for waxing (`prepared ?n`).\n\n3. **BurnWicks**:\n   - **Parameters**: `?a` (the agent performing the action), `?w` (the wick being burned).\n   - **Precondition**: The wick has not yet been burned (`not (burned ?w)`) and it is safe to burn the wick (`safe_to_burn ?w`).\n   - **Effect**: The wick is burned (`burned ?w`).\n\n4. **WaxHair**:\n   - **Parameters**: `?n` (the person or NPC whose hair is being waxed).\n   - **Precondition**: The person is prepared for waxing (`prepared ?n`), their hair is long enough for waxing (`hair_long_enough ?n`), and they have not yet been waxed (`not (waxed ?n)`).\n   - **Effect**: The person's hair is waxed (`waxed ?n`).\n\n5. **WaxArea**:\n   - **Parameters**: `?a` (the area being waxed).\n   - **Precondition**: The area has not yet been waxed (`not (waxed ?a)`) and it is safe to wax the area (`safe_to_wax ?a`).\n   - **Effect**: The area is waxed (`waxed ?a`).\n\n---\n\n### Notes:\n- The task descriptions emphasize safety and preparation, so preconditions like `safe_to_burn` and `safe_to_wax` were added to reflect these considerations.\n- The step \"Don't wax the same area twice\" is addressed by ensuring the precondition `not (waxed ?a)` for the `WaxArea` action.\n- The action `BurnWicks` was adapted to include safety considerations (`safe_to_burn`) and to reflect the importance of avoiding burns.\n- The step \"Make sure hair is long enough before you attempt to wax it\" is represented by the `hair_long_enough` precondition in the `WaxHair` action.\n\nThis PDDL model ensures that the task is represented accurately and safely, with all relevant state changes captured.",
    "Here is the PDDL representation of the task \"How to Use Wax on Your Hair\" based on the provided steps and descriptions:\n\n```pddl\n(:action CombHairWithDryWicks\n    :parameters (?n - npc)\n    :precondition (and (not (hair_combed ?n)) (hair_dry ?n))\n    :effect (hair_combed ?n)\n)\n\n(:action WarmPeaSizedWax\n    :parameters (?a - alice)\n    :precondition (and (not (wax_warmed ?a)) (wax_pea_sized ?a))\n    :effect (wax_warmed ?a)\n)\n\n(:action TousleHair\n    :parameters (?t - tousle)\n    :precondition (and (not (hair_tousled ?t)) (wax_warmed ?t))\n    :effect (hair_tousled ?t)\n)\n\n(:action AddPeaSizedWaxToVolume\n    :parameters (?p - pc2)\n    :precondition (and (not (volume_added ?p)) (wax_pea_sized ?p))\n    :effect (volume_added ?p)\n)\n\n(:action AddTextureToPieces\n    :parameters (?w - work_station)\n    :precondition (and (not (texture_added ?w)) (wax_pea_sized ?w))\n    :effect (texture_added ?w)\n)\n```\n\n### Explanation of Actions:\n\n1. **CombHairWithDryWicks**:\n   - **Action Name**: CombHairWithDryWicks\n   - **Parameters**: `?n` represents the person whose hair is being combed.\n   - **Preconditions**: The hair must be dry (`hair_dry ?n`) and not yet combed (`not (hair_combed ?n)`).\n   - **Effect**: The hair becomes combed (`hair_combed ?n`).\n\n2. **WarmPeaSizedWax**:\n   - **Action Name**: WarmPeaSizedWax\n   - **Parameters**: `?a` represents the entity (e.g., Alice or the user) warming the wax.\n   - **Preconditions**: The wax must be pea-sized (`wax_pea_sized ?a`) and not yet warmed (`not (wax_warmed ?a)`).\n   - **Effect**: The wax becomes warmed (`wax_warmed ?a`).\n\n3. **TousleHair**:\n   - **Action Name**: TousleHair\n   - **Parameters**: `?t` represents the action of tousling the hair.\n   - **Preconditions**: The hair must not yet be tousled (`not (hair_tousled ?t)`), and the wax must already be warmed (`wax_warmed ?t`).\n   - **Effect**: The hair becomes tousled (`hair_tousled ?t`).\n\n4. **AddPeaSizedWaxToVolume**:\n   - **Action Name**: AddPeaSizedWaxToVolume\n   - **Parameters**: `?p` represents the process or entity adding volume to the hair.\n   - **Preconditions**: The wax must be pea-sized (`wax_pea_sized ?p`), and additional volume must not yet be added (`not (volume_added ?p)`).\n   - **Effect**: Additional volume is added to the hair (`volume_added ?p`).\n\n5. **AddTextureToPieces**:\n   - **Action Name**: AddTextureToPieces\n   - **Parameters**: `?w` represents the workstation or point of action for adding texture.\n   - **Preconditions**: The wax must be pea-sized (`wax_pea_sized ?w`), and texture must not yet be added to the pieces (`not (texture_added ?w)`).\n   - **Effect**: Texture is added to specific pieces of hair (`texture_added ?w`).\n\n### Adjustments and Clarifications:\n- Some step names were slightly modified to align with the task description (e.g., \"wick_pea_sized\" was interpreted as warming the wax and renamed to \"WarmPeaSizedWax\").\n- The state changes focus on relevant aspects of the task, such as the status of the hair (e.g., combed, tousled), the wax (e.g., pea-sized, warmed), and the hair's texture and volume.\n- The parameters were generalized to represent entities involved in the task (e.g., `?n`, `?a`, `?t`, etc.).\n",
    "Here is the PDDL representation of the task \"How to Shave Your Legs Out of Water\" based on the provided steps and descriptions:\n\n```lisp\n(:action drink_water\n    :parameters (?p - person)\n    :precondition (not (hydrated ?p))\n    :effect (hydrated ?p)\n)\n\n(:action wet_legs\n    :parameters (?p - person ?t - towel)\n    :precondition (and (not (wet ?p)) (has ?p ?t) (wet ?t))\n    :effect (wet ?p)\n)\n\n(:action apply_deodorant\n    :parameters (?p - person ?d - deodorant)\n    :precondition (and (wet ?p) (has ?p ?d) (not (applied_deodorant ?p)))\n    :effect (applied_deodorant ?p)\n)\n\n(:action squirt_water\n    :parameters (?p - person ?w - water)\n    :precondition (and (applied_deodorant ?p) (has ?p ?w))\n    :effect (and (wet ?p) (extra_wet ?p))\n)\n\n(:action shave_legs\n    :parameters (?p - person ?t - towel)\n    :precondition (and (extra_wet ?p) (has ?p ?t) (not (legs_shaved ?p)))\n    :effect (legs_shaved ?p)\n)\n\n(:action dry_legs\n    :parameters (?p - person ?t - towel)\n    :precondition (and (legs_shaved ?p) (has ?p ?t) (dry ?t))\n    :effect (and (dry ?p) (not (wet ?p)))\n)\n\n(:action apply_lotion\n    :parameters (?p - person ?l - lotion)\n    :precondition (and (dry ?p) (has ?p ?l) (not (smooth_legs ?p)))\n    :effect (smooth_legs ?p)\n)\n```\n\n### Explanation of Actions:\n1. **`drink_water`**:\n   - **Parameters**: The person (`?p`) performing the task.\n   - **Precondition**: The person is not hydrated.\n   - **Effect**: The person becomes hydrated. (This step is included as hydration could be important for skin care.)\n\n2. **`wet_legs`**:\n   - **Parameters**: The person (`?p`) and a wet towel (`?t`).\n   - **Precondition**: The person is not wet, has a towel, and the towel is wet.\n   - **Effect**: The person\u2019s legs become wet.\n\n3. **`apply_deodorant`**:\n   - **Parameters**: The person (`?p`) and a deodorant stick (`?d`).\n   - **Precondition**: The person\u2019s legs are wet, they have a deodorant stick, and deodorant has not been applied yet.\n   - **Effect**: The deodorant is applied to the legs.\n\n4. **`squirt_water`**:\n   - **Parameters**: The person (`?p`) and a source of water (`?w`).\n   - **Precondition**: The deodorant has been applied, and water is available.\n   - **Effect**: The person\u2019s legs become extra wet, ensuring proper lubrication for shaving.\n\n5. **`shave_legs`**:\n   - **Parameters**: The person (`?p`) and a towel (`?t`).\n   - **Precondition**: The person\u2019s legs are extra wet, they have a towel, and their legs are not yet shaved.\n   - **Effect**: The person\u2019s legs are shaved.\n\n6. **`dry_legs`**:\n   - **Parameters**: The person (`?p`) and a dry towel (`?t`).\n   - **Precondition**: The person\u2019s legs are shaved, they have a towel, and the towel is dry.\n   - **Effect**: The person\u2019s legs are dry, and the wet condition is removed.\n\n7. **`apply_lotion`**:\n   - **Parameters**: The person (`?p`) and a lotion (`?l`).\n   - **Precondition**: The person\u2019s legs are dry, they have lotion, and their legs are not yet smooth.\n   - **Effect**: The person\u2019s legs become smooth and moisturized.\n\n### Adjustments:\n- The step \"drink_water\" was included as hydration is generally beneficial for skin care, even if it is not explicitly stated in the shaving process.\n- The action `wet_legs` was used instead of \"spray water\" for flexibility, as a wet towel is a more practical alternative in this context.\n- The step to \"squirt water\" was included to ensure the legs are sufficiently wet for shaving.\n- The final step ensures lotion is applied to smooth and moisturize the legs, completing the process.",
    "Here are the PDDL actions generated for the task \"How to Get Gum Out of Your Hair,\" based on the described steps and logical state transitions:\n\n```lisp\n;; Action to freeze the mixture (use ice to harden the gum)\n(:action freeze_mixture\n    :parameters (?m - mixture ?ice - tool)\n    :precondition (and\n      (contains_gum ?m)\n      (available ?ice)\n    )\n    :effect (and\n      (hardened ?m)\n      (not (soft ?m))\n    )\n)\n\n;; Action to make the gum harden (apply the ice wrap to the gum)\n(:action make_gum_harden\n    :parameters (?person - agent ?m - mixture ?ice_wrap - tool)\n    :precondition (and\n      (hardened ?m)\n      (has ?person ?ice_wrap)\n    )\n    :effect (and\n      (gum_hardened ?person ?m)\n      (not (sticky ?m))\n    )\n)\n\n;; Action to chip the hardened gum out of hair\n(:action chip_gum_out\n    :parameters (?person - agent ?m - mixture ?tool - tool)\n    :precondition (and\n      (gum_hardened ?person ?m)\n      (has ?person ?tool)\n    )\n    :effect (and\n      (gum_removed ?person ?m)\n      (not (gum_hardened ?person ?m))\n    )\n)\n```\n\n### Explanation of Each Action:\n1. **`freeze_mixture`**:\n   - **Parameters**: The mixture (`?m`) and the ice (`?ice`).\n   - **Preconditions**: The mixture must contain gum, and the ice must be available.\n   - **Effects**: The gum in the mixture becomes hardened, and it is no longer soft.\n\n2. **`make_gum_harden`**:\n   - **Parameters**: The person (`?person`), the mixture (`?m`), and the ice wrap (`?ice_wrap`).\n   - **Preconditions**: The gum must already be hardened, and the person must have the ice wrap.\n   - **Effects**: The gum is now hardened and no longer sticky.\n\n3. **`chip_gum_out`**:\n   - **Parameters**: The person (`?person`), the mixture (`?m`), and a tool (`?tool`) for chipping.\n   - **Preconditions**: The gum must be hardened, and the person must have a tool to chip it out.\n   - **Effects**: The gum is removed from the hair, and it is no longer in the hardened state.\n\nThese actions reflect the logical progression of the task, focusing on the relevant state changes (e.g., gum transitioning from soft to hardened, then being removed).",
    "Here are the PDDL actions for the task \"How to Use Hair Removing Wax,\" based on the provided steps and descriptions. Each action reflects the logical state changes of the entities involved in the task:\n\n### PDDL Actions:\n\n```lisp\n(:action WarmWick\n    :parameters (?w - wick)\n    :precondition (not (warm ?w))\n    :effect (warm ?w)\n)\n\n(:action DipApplicatorInWax\n    :parameters (?u - user ?w - wick)\n    :precondition (and (warm ?w) (not (coated ?u)))\n    :effect (coated ?u)\n)\n\n(:action ApplyFabricStrip\n    :parameters (?u - user ?s - strip)\n    :precondition (and (coated ?u) (not (applied ?s)))\n    :effect (applied ?s)\n)\n```\n\n### Explanation of Actions:\n\n1. **WarmWick**:\n   - **Parameters**: `?w` represents the wax wick.\n   - **Precondition**: The wick must not already be warm.\n   - **Effect**: The wick becomes warm.\n\n2. **DipApplicatorInWax**:\n   - **Parameters**: `?u` represents the user (or applicator), and `?w` represents the wax wick.\n   - **Precondition**: The wax wick must be warm, and the applicator (or user) must not already be coated with wax.\n   - **Effect**: The applicator (or user) becomes coated with wax.\n\n3. **ApplyFabricStrip**:\n   - **Parameters**: `?u` represents the user (or applicator), and `?s` represents the fabric strip.\n   - **Precondition**: The applicator (or user) must be coated with wax, and the fabric strip must not already be applied.\n   - **Effect**: The fabric strip is applied.\n\n### Adjustments:\n- The step \"dip_in_wicks user1 wick1\" was interpreted as the act of dipping an applicator (or user) into the wax wick, which results in the applicator being coated with wax. This aligns with the task's description.\n- The step \"apply_fabric npc strip\" was clarified to represent the application of a fabric strip over the wax, ensuring the state change (`applied ?s`) is meaningful and relevant to the task.\n\nThese actions collectively represent the logical flow and state transitions required to complete the task of using hair-removing wax.",
    "Here is the set of PDDL actions for the task \"How to Apply Hair Wax,\" based on the steps and descriptions provided. I have adjusted the steps and descriptions to ensure relevance and alignment with the task. Each action reflects the intent, logic, and state changes for the task.\n\n---\n\n### PDDL Actions for \"How to Apply Hair Wax\"\n\n```lisp\n(:action PurchaseHairWax\n    :parameters (?p - person ?w - wax)\n    :precondition (not (purchased ?p ?w))\n    :effect (purchased ?p ?w)\n)\n\n(:action ApplyHairWax\n    :parameters (?p - person ?h - hair ?w - wax)\n    :precondition (and (purchased ?p ?w) (not (wax_applied ?h)) (dry_or_damp ?h))\n    :effect (wax_applied ?h)\n)\n\n(:action ScoopWax\n    :parameters (?p - person ?w - wax)\n    :precondition (and (purchased ?p ?w) (not (wax_scooped ?p)))\n    :effect (wax_scooped ?p)\n)\n\n(:action RubWax\n    :parameters (?p - person)\n    :precondition (wax_scooped ?p)\n    :effect (wax_rubbed ?p)\n)\n\n(:action RestyleHair\n    :parameters (?p - person ?h - hair)\n    :precondition (and (wax_applied ?h) (not (hair_styled ?h)))\n    :effect (hair_styled ?h)\n)\n\n(:action WashWaxOut\n    :parameters (?p - person ?h - hair)\n    :precondition (wax_applied ?h)\n    :effect (not (wax_applied ?h))\n)\n```\n\n---\n\n### Explanation of Actions\n\n1. **PurchaseHairWax**:  \n   - **Parameters**: The person (`?p`) and the wax (`?w`).  \n   - **Precondition**: The wax has not yet been purchased by the person.  \n   - **Effect**: The wax is marked as purchased by the person.\n\n2. **ApplyHairWax**:  \n   - **Parameters**: The person (`?p`), their hair (`?h`), and the wax (`?w`).  \n   - **Precondition**: The person has purchased the wax, the wax has not been applied to the hair, and the hair is either dry or slightly damp.  \n   - **Effect**: The wax is applied to the hair.\n\n3. **ScoopWax**:  \n   - **Parameters**: The person (`?p`) and the wax (`?w`).  \n   - **Precondition**: The person has purchased the wax but has not yet scooped it.  \n   - **Effect**: The wax is scooped by the person.\n\n4. **RubWax**:  \n   - **Parameters**: The person (`?p`).  \n   - **Precondition**: The person has scooped the wax.  \n   - **Effect**: The wax is rubbed between the person's fingers.\n\n5. **RestyleHair**:  \n   - **Parameters**: The person (`?p`) and their hair (`?h`).  \n   - **Precondition**: The wax has already been applied to the hair, but the hair is not yet styled.  \n   - **Effect**: The hair is styled using the wax.\n\n6. **WashWaxOut**:  \n   - **Parameters**: The person (`?p`) and their hair (`?h`).  \n   - **Precondition**: The wax has been applied to the hair.  \n   - **Effect**: The wax is removed from the hair.\n\n---\n\n### Notes on Adjustments\n- The original steps included some irrelevant or unclear actions (e.g., \"add_wicks_to_hair_machine\" and \"covering_tracks\"), which were omitted or modified to better align with the task.\n- The state transitions focus on the key aspects of the task: purchasing the wax, applying it to the hair, preparing the wax (scooping and rubbing), styling the hair, and washing the wax out.\n- Preconditions and effects were carefully designed to reflect logical dependencies and state changes.\n\nThis PDDL representation captures the process of applying hair wax and ensures that each step is logically consistent and task-relevant.",
    "Here are the PDDL actions for the task \"How to Remove Wax from Wool,\" based on the provided steps and descriptions. The actions focus on the relevant state changes of the entities involved (e.g., wax, wool, paper bag) and ensure that the preconditions and effects reflect the logic of each step.\n\n---\n\n### PDDL Actions\n\n#### Action 1: Place Paper Bag\n```lisp\n(:action place_paper_bag\n    :parameters (?w - wool ?b - paper_bag)\n    :precondition (and\n                    (has_wax ?w)\n                    (not (bag_placed ?w))\n                    (clean ?b)\n                  )\n    :effect (and\n              (bag_placed ?w)\n              (not (clean ?b))\n            )\n)\n```\n\n#### Action 2: Run Iron Over Bag\n```lisp\n(:action run_iron_over_bag\n    :parameters (?w - wool ?b - paper_bag ?i - iron)\n    :precondition (and\n                    (bag_placed ?w)\n                    (medium_heat ?i)\n                    (not (wax_absorbed ?b))\n                  )\n    :effect (and\n              (wax_absorbed ?b)\n              (not (has_wax ?w))\n            )\n)\n```\n\n#### Action 3: Remove Paper Bag\n```lisp\n(:action remove_paper_bag\n    :parameters (?w - wool ?b - paper_bag)\n    :precondition (and\n                    (bag_placed ?w)\n                    (wax_absorbed ?b)\n                  )\n    :effect (and\n              (not (bag_placed ?w))\n              (used ?b)\n            )\n)\n```\n\n#### Action 4: Repeat with Clean Bag (Optional Step for Residual Wax)\n```lisp\n(:action repeat_with_clean_bag\n    :parameters (?w - wool ?b1 - paper_bag ?b2 - paper_bag ?i - iron)\n    :precondition (and\n                    (has_residual_wax ?w)\n                    (clean ?b2)\n                    (not (bag_placed ?w))\n                  )\n    :effect (and\n              (bag_placed ?w)\n              (not (clean ?b2))\n              (wax_absorbed ?b2)\n              (not (has_residual_wax ?w))\n              (used ?b1)\n            )\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **Place Paper Bag**:  \n   - **Precondition**: The wool has wax, no bag is currently placed, and the paper bag is clean.  \n   - **Effect**: The paper bag is placed over the wool, and the bag is no longer considered clean.\n\n2. **Run Iron Over Bag**:  \n   - **Precondition**: The bag is placed on the wool, the iron is set to medium heat, and the bag has not yet absorbed wax.  \n   - **Effect**: The wax is absorbed into the paper bag, and the wool no longer has wax.\n\n3. **Remove Paper Bag**:  \n   - **Precondition**: The paper bag is placed on the wool, and it has absorbed wax.  \n   - **Effect**: The paper bag is removed, and it is marked as used.\n\n4. **Repeat with Clean Bag**:  \n   - **Precondition**: If there is residual wax on the wool, a clean paper bag is available, and no bag is currently placed.  \n   - **Effect**: A new clean bag is placed, wax is absorbed into the new bag, and the wool no longer has residual wax. The previous bag is marked as used.\n\n---\n\nThis set of actions ensures that the task of removing wax from wool is captured in a structured and logical manner, with clear state transitions for the wool, paper bag, and wax at each step.",
    "Here is the set of PDDL actions generated for the task **\"How to Wax Your Legs\"** based on the provided steps and descriptions. The actions focus on the relevant entity state transitions, such as searching for services, making an appointment, and attending the appointment.\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action SearchForLegWax\n    :parameters (?npc - person ?location - place)\n    :precondition (and (not (found_service ?npc)))\n    :effect (found_service ?npc)\n)\n\n(:action MakeAppointment\n    :parameters (?npc - person)\n    :precondition (and (found_service ?npc) (not (appointment_made ?npc)))\n    :effect (appointment_made ?npc)\n)\n\n(:action CheckAppointment\n    :parameters (?npc - person)\n    :precondition (and (appointment_made ?npc) (not (attended_appointment ?npc)))\n    :effect (attended_appointment ?npc)\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **SearchForLegWax**:\n   - **Action Name**: Represents the step of searching for leg wax services.\n   - **Parameters**: Takes a person (`?npc`) and a location (`?location`) as parameters.\n   - **Preconditions**: The service has not yet been found (`not (found_service ?npc)`).\n   - **Effect**: Marks that the person has found the service (`found_service ?npc`).\n\n2. **MakeAppointment**:\n   - **Action Name**: Represents the step of making an appointment after finding a service.\n   - **Parameters**: Takes a person (`?npc`) as a parameter.\n   - **Preconditions**: The service must have been found (`found_service ?npc`), and no appointment has been made yet (`not (appointment_made ?npc)`).\n   - **Effect**: Marks that the appointment has been made (`appointment_made ?npc`).\n\n3. **CheckAppointment**:\n   - **Action Name**: Represents the step of attending or showing up for the appointment.\n   - **Parameters**: Takes a person (`?npc`) as a parameter.\n   - **Preconditions**: The appointment must have been made (`appointment_made ?npc`), and the person has not yet attended the appointment (`not (attended_appointment ?npc)`).\n   - **Effect**: Marks that the appointment has been attended (`attended_appointment ?npc`).\n\n---\n\n### Adjustments Made:\n- The step `search_for_leg_wax npc basement` was interpreted as searching for leg wax services, and the location parameter (`?location`) was included for flexibility.\n- The steps were modified slightly to align with the logical flow of the task and to ensure relevance to the task of waxing legs.\n- The state transitions (e.g., `found_service`, `appointment_made`, `attended_appointment`) were chosen to reflect the key milestones in the task.\n\nLet me know if you need further refinements!"
]