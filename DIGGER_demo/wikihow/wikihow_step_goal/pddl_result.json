[
    "```\n(define (domain windshield_cleaner)\n  (:requirements :strips :typing)\n  (:types entity)\n\n  (:predicates\n    (at-store ?e - entity)\n    (owned ?e - entity)\n    (stored-in-car ?e - entity)\n    (used ?e - entity)\n    (resting ?e - entity)\n    (rubbed ?e - entity)\n    (clean ?e - entity)\n    (dirty ?e - entity)\n    (new ?e - entity)\n    (full ?e - entity)\n    (empty ?e - entity)\n    (inside-car ?g - entity)\n    (active ?h - entity)\n    (relaxed ?h - entity)\n    (more-full ?b - entity)\n    (more-empty ?b - entity)\n    (at-home ?e - entity)\n    (place-in-car ?e - entity)\n    (exchange-money ?b - entity)\n    (working ?h - entity)\n  )\n\n  (:action purchase-eraser\n    :parameters (?e - entity ?b - entity)\n    :precondition (and (at-store ?e) (more-full ?b))\n    :effect (and (owned ?e) (more-empty ?b) (at-home ?e))\n  )\n\n  (:action store-eraser-in-car\n    :parameters (?e - entity)\n    :precondition (and (at-home ?e) (not (stored-in-car ?e)))\n    :effect (and (stored-in-car ?e) (inside-car ?g))\n  )\n\n  (:action use-eraser\n    :parameters (?e - entity ?h - entity ?i - entity)\n    :precondition (and (stored-in-car ?e) (not (used ?e)) (dirty ?i) (relaxed ?h))\n    :effect (and (rubbed ?e) (clean ?i) (used ?e) (active ?h))\n  )\n\n  (:action replace-eraser\n    :parameters (?e - entity ?h - entity)\n    :precondition (and (rubbed ?e) (active ?h))\n    :effect (and (resting ?e) (relaxed ?h))\n  )\n)\n\n```\n\n```\n(define (problem windshield_cleaning)\n  (:domain windshield_cleaner)\n  (:objects\n    eraser - entity\n    glovebox - entity\n    bank_account - entity\n    inside_windshield - entity\n    hands - entity\n  )\n\n  (:init\n    (at-store eraser)\n    (more-full bank_account)\n    (dirty inside_windshield)\n    (relaxed hands)\n    (new eraser)\n    (empty glovebox)\n  )\n\n  (:goal\n    (and\n      (resting eraser)\n      (clean inside_windshield)\n      (relaxed hands)\n    )\n  )\n)\n```",
    "```pddl\n(define (domain carob_fruit_balls_making)\n  (:requirements :strips :typing)\n  (:types entity attribute)\n  \n  (:predicates\n    (composition ?entity ?state)\n    (shape ?entity ?state)\n    (location ?entity ?state)\n    (temperature ?entity ?state)\n    (hardness ?entity ?state)\n    (readiness ?entity ?state)\n    (weight ?entity ?state)\n    (volume ?entity ?state)\n    (stickiness ?entity ?state)\n    (fullness ?entity ?state)\n  )\n  \n  (:action mix\n    :parameters (?carob entity)\n    :precondition (and\n      (composition ?carob separated)\n      (location ?carob in_packaging)\n    )\n    :effect (and\n      (composition ?carob mixed)\n      (location ?carob in_mixing_bowl)\n    )\n  )\n  \n  (:action roll\n    :parameters (?entity entity)\n    :precondition (and\n      (composition ?entity mixture)\n      (shape ?entity dispersed)\n    )\n    :effect (and\n      (composition ?entity dough)\n      (shape ?entity rolled)\n    )\n  )\n  \n  (:action freeze\n    :parameters (?entity entity)\n    :precondition (and\n      (location ?entity on_counter)\n      (temperature ?entity room_temperature)\n    )\n    :effect (and\n      (location ?entity in_freezer)\n      (temperature ?entity freezing)\n    )\n  )\n  \n  (:action serve\n    :parameters (?entity entity)\n    :precondition (and\n      (readiness ?entity unprepared)\n      (location ?entity in_freezer)\n    )\n    :effect (and\n      (readiness ?entity prepared)\n      (location ?entity on_table)\n    )\n  )\n)\n\n```\n\n```pddl\n(define (problem carob_fruit_balls_problem)\n  (:domain carob_fruit_balls_making)\n  \n  (:objects\n    carob entity\n    mixture entity\n    carob_fruit_balls entity\n    mixing_bowl entity\n    spoon entity\n    plate entity\n  )\n  \n  (:init\n    (composition carob separated)\n    (location carob in_packaging)\n    (composition mixture formless)\n    (shape mixture dispersed)\n    (location mixing_bowl empty)\n    (weight mixing_bowl light)\n    (location spoon in_drawer)\n    (location plate on_counter_top)\n    (readiness carob_fruit_balls unprepared)\n    (location carob_fruit_balls in_freezer)\n  )\n  \n  (:goal\n    (and\n      (readiness carob_fruit_balls prepared)\n      (location carob_fruit_balls on_table)\n    )\n  )\n)\n\n```",
    "```lisp\n; PDDL Domain File\n(define (domain freezing-biscuits-cookies)\n  (:requirements :strips :typing)\n  \n  (:types \n    item\n  )\n\n  (:predicates \n    (in-container ?i - item)\n    (airtight-container ?i - item)\n    (in-lined-tin ?i - item)\n    (separated ?i - item)\n    (in-freezer ?i - item)\n    (thawed ?i - item)\n  )\n  \n  (:action place-in-container\n    :parameters (?i - item)\n    :precondition (and (not (in-container ?i)))\n    :effect (and (in-container ?i)))\n\n  (:action separate-using-paper\n    :parameters (?i - item)\n    :precondition (and (in-container ?i) (not (in-lined-tin ?i)))\n    :effect (and (in-lined-tin ?i)))\n\n  (:action place-in-freezer\n    :parameters (?i - item)\n    :precondition (and (in-lined-tin ?i) (not (in-freezer ?i)))\n    :effect (and (in-freezer ?i)))\n\n  (:action thaw\n    :parameters (?i - item)\n    :precondition (in-freezer ?i)\n    :effect (and (thawed ?i) (not (in-freezer ?i)))\n  )\n)\n```\n\n```lisp\n; PDDL Problem File\n(define (problem freeze-biscuits-cookies)\n  (:domain freezing-biscuits-cookies)\n  \n  (:objects\n    cookies - item\n    baking-paper - item\n    bowl - item\n    freezer - item\n    tray - item\n  )\n  \n  (:init\n    (not (in-container cookies))\n    (airtight-container bowl)\n    (not (in-lined-tin cookies))\n    (not (in-freezer cookies))\n    (not (thawed cookies))\n  )\n  \n  (:goal\n    (and\n      (thawed cookies)\n    )\n  )\n)\n```",
    "```lisp\n(define (domain pipe_cleaner_bird)\n  (:requirements :strips :typing)\n  (:types\n    pipe_cleaner tip_of_pipe_cleaner torso\n  )\n  (:predicates\n    (position ?entity ?pos)\n    (shape ?entity ?shape)\n    (location ?entity ?loc)\n    (width ?entity ?width)\n    (weight ?entity ?weight)\n  )\n\n  (:action bend_to_form_legs\n    :parameters (?p - pipe_cleaner)\n    :precondition (and (position ?p straight) (location ?p completely_on_ground))\n    :effect (and (position ?p bent) (location ?p partially_in_air))\n  )\n\n  (:action shape_to_form_body\n    :parameters (?p - pipe_cleaner)\n    :precondition (and (position ?p straight) (location ?p on_ground))\n    :effect (and (position ?p bent) (location ?p on_pipe_cleaner))\n  )\n\n  (:action move_for_beak\n    :parameters (?t - tip_of_pipe_cleaner)\n    :precondition (and (shape ?t straight) (location ?t closer_to_tip))\n    :effect (and (shape ?t shaped_to_form_beak) (location ?t now_away_from_tip))\n  )\n\n  (:action enlarge_torso\n    :parameters (?t - torso)\n    :precondition (and (width ?t thinner) (weight ?t lighter))\n    :effect (and (width ?t now_wider) (weight ?t heavier))\n  )\n)\n```\n\n```lisp\n(define (problem make_pipe_cleaner_bird)\n  (:domain pipe_cleaner_bird)\n  (:objects\n    pc1 pc2 - pipe_cleaner\n    tip - tip_of_pipe_cleaner\n    torso - torso\n  )\n  (:init\n    (position pc1 straight)\n    (location pc1 completely_on_ground)\n\n    (position pc2 straight)\n    (location pc2 on_ground)\n\n    (shape tip straight)\n    (location tip closer_to_tip)\n\n    (width torso thinner)\n    (weight torso lighter)\n  )\n  (:goal\n    (and\n      (position pc1 bent)\n      (location pc1 partially_in_air)\n\n      (position pc2 bent)\n      (location pc2 on_pipe_cleaner)\n\n      (shape tip shaped_to_form_beak)\n      (location tip now_away_from_tip)\n\n      (width torso now_wider)\n      (weight torso heavier)\n    )\n  )\n)\n```",
    "```lisp\n; PDDL Domain File\n(define (domain spool_knit_winter_hat)\n  (:requirements :strips :typing)\n  (:types\n    webbing\n    hat\n    yarn\n    ends\n  )\n  (:predicates\n    (composition ?w - webbing ?state - (composition))\n    (shape ?w - webbing ?state - (shape))\n    (width ?w - webbing ?state - (width))\n    (weight ?h - hat ?state - (weight))\n    (shape_yarn ?y - yarn ?state - (shape))\n    (connection ?e - ends ?state - (connection))\n  )\n  \n  (:action knit_web\n    :parameters (?w - webbing)\n    :precondition (composition ?w in_line)\n    :effect (and\n      (composition ?w knitted_together)\n      (not (composition ?w in_line))\n    )\n  )\n\n  (:action sew_web_into_rectangle\n    :parameters (?w - webbing)\n    :precondition (and\n      (shape ?w straight)\n      (width ?w wider)\n    )\n    :effect (and\n      (shape ?w rectangular)\n      (not (shape ?w straight))\n      (width ?w narrower)\n      (not (width ?w wider))\n    )\n  )\n  \n  (:action join_ends\n    :parameters (?e - ends)\n    :precondition (connection ?e unattached)\n    :effect (and\n      (connection ?e joined)\n      (not (connection ?e unattached))\n    )\n  )\n  \n  (:action secure_top_and_make_tassel\n    :parameters (?h - hat ?y - yarn)\n    :precondition (and\n      (weight ?h lighter)\n      (shape_yarn ?y straight)\n    )\n    :effect (and\n      (weight ?h heavier)\n      (not (weight ?h lighter))\n      (shape_yarn ?y twisted_and_folded)\n      (not (shape_yarn ?y straight))\n    )\n  )\n)\n\n; PDDL Problem File\n(define (problem make_winter_hat)\n  (:domain spool_knit_winter_hat)\n  (:objects\n    web - webbing\n    finished_hat - hat\n    yarn_piece - yarn\n    end_points - ends\n  )\n  (:init\n    (composition web in_line)\n    (shape web straight)\n    (width web wider)\n    (weight finished_hat lighter)\n    (shape_yarn yarn_piece straight)\n    (connection end_points unattached)\n  )\n  (:goal (and\n    (composition web knitted_together)\n    (shape web rectangular)\n    (width web narrower)\n    (weight finished_hat heavier)\n    (shape_yarn yarn_piece twisted_and_folded)\n    (connection end_points joined)\n  ))\n)\n```\n",
    "```pddl\n(define (domain gears-of-war-headshot)\n  (:requirements :strips :typing)\n  (:types \n    weapon \n    agent\n  )\n  (:predicates \n    (weapon_location ?w - weapon ?loc)\n    (agent_knowledge ?a - agent ?knowledge)\n    (agent_shape ?a - agent ?shape)\n  )\n\n  (:action sniper_shot\n    :parameters (?w - weapon ?a - agent)\n    :precondition (and (weapon_location ?w still) (agent_knowledge ?a unsure))\n    :effect (and (weapon_location ?w focused) (agent_knowledge ?a aware))\n  )\n\n  (:action shotgun_shot\n    :parameters (?a - agent)\n    :precondition (agent_shape ?a unaware_shape)\n    :effect (agent_shape ?a aware_shape)\n  )\n\n  (:action pistol_shot\n    :parameters (?a - agent)\n    :precondition (agent_knowledge ?a unaware_pistol_shots)\n    :effect (agent_knowledge ?a needed_pistol_shots)\n  )\n\n  (:action boomshot_shot\n    :parameters (?w - weapon ?a - agent)\n    :precondition (and (weapon_location ?w unfired) (agent_knowledge ?a unaware_boomshot))\n    :effect (and (weapon_location ?w fired) (agent_knowledge ?a aware_boomshot))\n  )\n)\n```\n\n```pddl\n(define (problem gears-of-war-headshot-problem)\n  (:domain gears-of-war-headshot)\n  (:objects \n    weapon1 - weapon\n    player - agent\n  )\n  (:init \n    (weapon_location weapon1 still)\n    (agent_knowledge player unsure)\n    (agent_shape player unaware_shape)\n    (agent_knowledge player unaware_pistol_shots)\n    (weapon_location weapon1 unfired)\n    (agent_knowledge player unaware_boomshot)\n  )\n  (:goal \n    (and \n      (weapon_location weapon1 fired)\n      (agent_knowledge player aware_boomshot)\n    )\n  )\n)\n```",
    "```lisp\n; PDDL Domain File\n(define (domain connect-wii-hdtv)\n  (:requirements :strips :typing)\n  (:types\n    hdmi_cord wii_av_output cord tv converter)\n\n  (:predicates\n    (plugged_in_hdmi_cord ?h - hdmi_cord)\n    (connected_to_cable ?h - hdmi_cord)\n    (connected_to_tv ?h - hdmi_cord)\n    (connected_to_wii ?h - hdmi_cord)\n    (connected_to_converter_tv ?h - hdmi_cord)\n    (full_av_output ?w - wii_av_output)\n    (full_tv ?t - tv)\n    (connected_converter ?c - converter)\n  )\n\n  (:action plug_hdmi_to_cable\n    :parameters (?h - hdmi_cord)\n    :precondition (and (not (connected_to_cable ?h)))\n    :effect (and (connected_to_cable ?h)))\n\n  (:action plug_hdmi_to_tv\n    :parameters (?h - hdmi_cord ?t - tv)\n    :precondition (and (connected_to_cable ?h) (not (connected_to_tv ?h)))\n    :effect (and (connected_to_tv ?h) (full_tv ?t)))\n\n  (:action connect_hdmi_to_wii_av\n    :parameters (?h - hdmi_cord ?w - wii_av_output)\n    :precondition (and (connected_to_tv ?h) (not (connected_to_wii ?h)))\n    :effect (and (connected_to_wii ?h) (full_av_output ?w)))\n\n  (:action plug_hdmi_to_converter\n    :parameters (?h - hdmi_cord ?c - converter ?t - tv)\n    :precondition (and (connected_to_wii ?h) (not (connected_to_converter_tv ?h)))\n    :effect (and (connected_to_converter_tv ?h) (connected_converter ?c)))\n)\n\n; PDDL Problem File\n(define (problem connect-wii-hdtv-instance)\n  (:domain connect-wii-hdtv)\n  (:objects\n    hdmi_cord1 - hdmi_cord\n    wii_av_output1 - wii_av_output\n    tv1 - tv\n    converter1 - converter\n  )\n\n  (:init\n    (not (plugged_in_hdmi_cord hdmi_cord1))\n    (not (full_av_output wii_av_output1))\n    (not (full_tv tv1))\n    (not (connected_converter converter1))\n  )\n\n  (:goal \n    (and \n      (connected_to_converter_tv hdmi_cord1)\n      (full_tv tv1)\n      (connected_converter converter1)\n    )\n  )\n)\n```",
    "```\n(define (domain towels)\n  (:requirements :strips :typing)\n  (:types towel location)\n\n  (:predicates \n    (at ?towel - towel ?loc - location)\n    (folded ?towel - towel)\n    (in-closet ?towel - towel)\n    (on-rack ?towel - towel)\n    (smaller ?towel - towel)\n    (thicker ?towel - towel)\n    (emptiness ?towel - towel)\n    (openness ?towel - towel))\n\n  (:action fold-lengthwise\n    :parameters (?towel - towel)\n    :precondition (and (not (folded ?towel)) (not (smaller ?towel)))\n    :effect (and (folded ?towel) (smaller ?towel)))\n\n  (:action fold-half-twice\n    :parameters (?towel - towel)\n    :precondition (and (folded ?towel) (smaller ?towel) (not (thicker ?towel)))\n    :effect (and (thicker ?towel)))\n\n  (:action store-in-closet\n    :parameters (?towel - towel)\n    :precondition (and (thicker ?towel) (not (in-closet ?towel)) (not (emptiness ?towel)))\n    :effect (and (in-closet ?towel) (emptiness ?towel)))\n\n  (:action hang-on-rack\n    :parameters (?towel - towel)\n    :precondition (and (in-closet ?towel) (folded ?towel) (not (on-rack ?towel)) (emptiness ?towel))\n    :effect (and (on-rack ?towel) (not (folded ?towel)) (openness ?towel))))\n\n(define (problem towel-folding)\n  (:domain towels)\n  (:objects \n    towel1 - towel\n    linen_closet towel_rack outside - location)\n\n  (:init \n    (at towel1 outside)\n    (not (folded towel1))\n    (not (smaller towel1))\n    (not (thicker towel1))\n    (not (in-closet towel1))\n    (not (on-rack towel1))\n    (not (emptiness towel1))\n    (not (openness towel1)))\n\n  (:goal \n    (and\n      (on-rack towel1)\n      (openness towel1))))\n```\n",
    "```\n(define (domain spy_mission)\n  (:requirements :strips :typing)\n  (:types\n    entity attribute)\n\n  (:predicates\n    (has-knowledge ?entity ?attribute)\n    (is-formed ?entity ?attribute)\n    (has-location ?entity ?attribute)\n    (has-possession ?entity ?attribute)\n    (is-available ?entity ?attribute))\n\n  (:action form_spy_group\n    :parameters (?entity ?knowledge ?forming)\n    :precondition (and \n      (not (has-knowledge ?entity ?knowledge))\n      (not (is-formed ?entity ?forming)))\n    :effect (and \n      (has-knowledge ?entity ?knowledge)\n      (is-formed ?entity ?forming)))\n\n  (:action find_location\n    :parameters (?entity ?location)\n    :precondition (not (has-location ?entity ?location))\n    :effect (has-location ?entity ?location))\n\n  (:action gather_gear\n    :parameters (?entity ?availability)\n    :precondition (not (is-available ?entity ?availability))\n    :effect (is-available ?entity ?availability))\n\n  (:action identify_victim\n    :parameters (?entity ?knowledge)\n    :precondition (not (has-knowledge ?entity ?knowledge))\n    :effect (has-knowledge ?entity ?knowledge))\n)\n\n(define (problem spy_mission_problem)\n  (:domain spy_mission)\n\n  (:objects\n    co_conspirators entity\n    gear entity\n    you entity\n    knowledge attribute\n    forming attribute\n    location attribute\n    possession attribute\n    availability attribute)\n\n  (:init\n    (not (has-knowledge co_conspirators knowledge))\n    (not (is-formed co_conspirators forming))\n    (not (has-location you location))\n    (not (is-available gear availability))\n    (not (has-possession you possession))\n    (not (has-knowledge you knowledge)))\n\n  (:goal\n    (and\n      (has-knowledge co_conspirators knowledge)\n      (is-formed co_conspirators forming)\n      (has-location you location)\n      (is-available gear availability)\n      (has-possession you possession)\n      (has-knowledge you knowledge)))\n)\n```",
    "```\n(define (domain defeat_thug)\n\n  (:requirements :strips :typing)\n  \n  (:types \n    entity \n    knowledge count location step\n  )\n\n  (:predicates \n    (knowledge_state ?person - entity ?state - knowledge)\n    (ammo_state ?ammo - entity ?state - count)\n    (weapon_state ?weapon - entity ?state - location)\n    (zombie_state ?zombies - entity ?state - step)\n  )\n\n  (:action learn_step1\n    :parameters (?person - entity)\n    :precondition (knowledge_state ?person unaware)\n    :effect (and \n      (not (knowledge_state ?person unaware))\n      (knowledge_state ?person aware)\n    )\n  )\n\n  (:action learn_step2\n    :parameters (?person - entity ?weapon - entity)\n    :precondition (and \n      (knowledge_state ?person unaware)\n      (weapon_state ?weapon in_characters_hand)\n    )\n    :effect (and \n      (not (knowledge_state ?person unaware))\n      (knowledge_state ?person aware)\n      (not (weapon_state ?weapon in_characters_hand))\n      (weapon_state ?weapon thrown_at_target)\n    )\n  )\n\n  (:action learn_step3\n    :parameters (?person - entity ?ammo - entity)\n    :precondition (and \n      (knowledge_state ?person unaware)\n      (ammo_state ?ammo unassured)\n    )\n    :effect (and \n      (not (knowledge_state ?person unaware))\n      (knowledge_state ?person aware)\n      (not (ammo_state ?ammo unassured))\n      (ammo_state ?ammo assured)\n    )\n  )\n\n  (:action attack\n    :parameters (?person - entity ?zombies - entity ?weapon - entity)\n    :precondition (and \n      (knowledge_state ?person aware)\n      (zombie_state ?zombies unattacked)\n      (weapon_state ?weapon on_character)\n    )\n    :effect (and \n      (not (zombie_state ?zombies unattacked))\n      (zombie_state ?zombies attacked)\n      (not (weapon_state ?weapon on_character))\n      (weapon_state ?weapon thrown_at_enemy)\n    )\n  )\n)\n\n(define (problem defeat_thug_problem)\n  (:domain defeat_thug)\n  \n  (:objects \n    you - entity\n    enough_ammo - entity\n    weapons - entity\n    zombies - entity\n    unaware aware - knowledge\n    unassured assured - count\n    in_characters_hand thrown_at_target on_character thrown_at_enemy - location\n    unattacked attacked - step\n  )\n  \n  (:init \n    (knowledge_state you unaware)\n    (ammo_state enough_ammo unassured)\n    (weapon_state weapons in_characters_hand)\n    (zombie_state zombies unattacked)\n  )\n  \n  (:goal \n    (and \n      (zombie_state zombies attacked)\n      (weapon_state weapons thrown_at_enemy)\n    )\n  )\n)\n```",
    "```lisp\n(define (domain make_rhubarb_cordial)\n  (:requirements :strips :typing)\n  (:types entity attribute)\n\n  (:predicates\n    (combined_with ?e - entity ?attr - attribute)\n    (simmered ?e - entity ?attr - attribute)\n    (soft ?e - entity ?attr - attribute)\n    (off_heat ?e - entity ?attr - attribute)\n    (garnished ?e - entity ?attr - attribute)\n    (filled ?e - entity ?attr - attribute)\n    (warm ?e - entity ?attr - attribute)\n    (adorned ?e - entity ?attr - attribute)\n  )\n\n  (:action simmer_rhubarb\n    :parameters (?r - entity ?s - entity ?c - entity ?w - entity)\n    :precondition (and \n      (combined_with ?r composition)\n      (combined_with ?s composition)\n      (combined_with ?c composition)\n      (filled ?r volume)\n    )\n    :effect (and\n      (simmered ?r temperature)\n      (warm ?r temperature)\n      (warm ?s temperature)\n      (warm ?c temperature)\n      (warm ?w temperature)\n    )\n  )\n  \n  (:action soften_rhubarb\n    :parameters (?r - entity)\n    :precondition (simmered ?r temperature)\n    :effect (soft ?r consistency)\n  )\n  \n  (:action remove_from_heat\n    :parameters (?r - entity ?s - entity)\n    :precondition (and\n      (simmered ?r temperature)\n      (soft ?r consistency)\n    )\n    :effect (and\n      (off_heat ?r temperature)\n      (off_heat ?s location)\n    )\n  )\n  \n  (:action add_mint_leaves\n    :parameters (?r - entity ?m - entity)\n    :precondition (off_heat ?r temperature)\n    :effect (adorned ?r appearance)\n  )\n)\n\n(define (problem make_rhubarb_cordial_problem)\n  (:domain make_rhubarb_cordial)\n\n  (:objects\n    rhubarb cordial water stove cloves mint_leaves - entity\n    composition temperature volume consistency location appearance - attribute\n  )\n\n  (:init\n    (combined_with rhubarb composition)\n    (combined_with stove composition)\n    (combined_with cloves composition)\n    (combined_with water composition)\n    (filled rhubarb volume)\n    (warm rhubarb temperature)\n    (warm cloves temperature)\n    (warm stove temperature)\n    (warm water temperature)\n    (simmered rhubarb temperature)\n    (soft rhubarb consistency)\n    (off_heat rhubarb temperature)\n    (off_heat stove location)\n  )\n\n  (:goal\n    (adorned rhubarb appearance)\n  )\n)\n```",
    "```lisp\n; PDDL Domain File\n\n(define (domain dragonball_z_budokai_tenkaichi)\n\n  (:requirements :strips :typing)\n\n  (:types\n    player stage vs_duel character\n  )\n\n  (:predicates\n    (selected ?entity)\n    (located ?entity ?location)\n    (present ?entity)\n    (against_wall ?players)\n    (separated ?players)\n    ; Additional predicates for each entity's initial and final state\n  )\n\n  (:action select_vs_duel\n    :parameters (?duel - vs_duel)\n    :precondition (not (selected ?duel))\n    :effect (selected ?duel)\n  )\n\n  (:action select_players\n    :parameters (?players - player)\n    :precondition (not (selected ?players))\n    :effect (selected ?players)\n  )\n\n  (:action select_goku\n    :parameters (?character - character)\n    :precondition (and (present ?character) (not (selected ?character)))\n    :effect (selected ?character)\n  )\n\n  (:action specify_stage\n    :parameters (?stage - stage)\n    :precondition (not (located ?stage specified))\n    :effect (located ?stage specified)\n  )\n\n  (:action move_to_wall\n    :parameters (?players - player)\n    :precondition \n      (and \n        (located ?players away_from_wall) \n        (not (against_wall ?players))\n      )\n    :effect \n      (and \n        (located ?players against_wall) \n        (against_wall ?players)\n      )\n  )\n\n)\n\n; PDDL Problem File\n\n(define (problem dragonball_z_budokai_tenkaichi_problem)\n  (:domain dragonball_z_budokai_tenkaichi)\n\n  (:objects\n    player1 player2 - player\n    goku - character\n    stage1 - stage\n    duel1 - vs_duel\n  )\n\n  (:init\n    (not (selected duel1))\n    (not (selected player1))\n    (not (selected player2))\n    (present goku)\n    (not (selected goku))\n    (located stage1 unspecified)\n    (located player1 away_from_wall)\n    (located player2 away_from_wall)\n    (not (against_wall player1))\n    (not (against_wall player2))\n  )\n\n  (:goal\n    (and\n      (selected duel1)\n      (selected player1)\n      (selected player2)\n      (selected goku)\n      (located stage1 specified)\n      (against_wall player1)\n      (against_wall player2)\n      (separated player1 player2)\n    )\n  )\n)\n```",
    "```pddl\n; PDDL Domain File\n(define (domain slow_cooker_hot_cocoa)\n  (:requirements :strips :typing)\n\n  (:types\n    entity\n  )\n\n  (:predicates\n    (initial_mixture ?e - entity)\n    (mixed_mixture ?e - entity)\n    (in_bowl ?e - entity)\n    (in_slow_cooker ?e - entity)\n    (mixture_heated ?e - entity)\n    (cocoa_served ?e - entity)\n  )\n\n  (:action make_initial_mixture\n    :parameters (?e - entity)\n    :precondition (initial_mixture ?e)\n    :effect (and (mixed_mixture ?e) (not (initial_mixture ?e)))\n  )\n\n  (:action add_ingredients_to_slow_cooker\n    :parameters (?e - entity)\n    :precondition (and (mixed_mixture ?e) (in_bowl ?e))\n    :effect (and (in_slow_cooker ?e) (not (in_bowl ?e)))\n  )\n\n  (:action heat_mixture\n    :parameters (?e - entity)\n    :precondition (in_slow_cooker ?e)\n    :effect (mixture_heated ?e)\n  )\n\n  (:action serve_cocoa\n    :parameters (?e - entity)\n    :precondition (mixture_heated ?e)\n    :effect (cocoa_served ?e)\n  )\n)\n```\n\n```pddl\n; PDDL Problem File\n(define (problem make_hot_cocoa)\n  (:domain slow_cooker_hot_cocoa)\n\n  (:objects\n    mixture - entity\n  )\n\n  (:init\n    (initial_mixture mixture)\n    (in_bowl mixture)\n  )\n\n  (:goal\n    (cocoa_served mixture)\n  )\n)\n```",
    "```lisp\n;; PDDL Domain File\n(define (domain rose_bush_growing)\n  (:requirements :strips :typing)\n  \n  (:types entity)\n\n  (:predicates \n    (prepared ?e - entity)\n    (cut ?e - entity)\n    (moistened ?e - entity)\n    (planted ?e - entity)\n  )\n\n  (:action prepare_area\n    :parameters (?e - entity)\n    :precondition (not (prepared ?e))\n    :effect (prepared ?e)\n  )\n\n  (:action take_cutting\n    :parameters (?e - entity)\n    :precondition (and (prepared ?e) (not (cut ?e)))\n    :effect (cut ?e)\n  )\n\n  (:action moisten_clipping\n    :parameters (?e - entity)\n    :precondition (and (cut ?e) (not (moistened ?e)))\n    :effect (moistened ?e)\n  )\n\n  (:action plant_cutting\n    :parameters (?e - entity)\n    :precondition (and (moistened ?e) (not (planted ?e)))\n    :effect (planted ?e)\n  )\n)\n```\n\n```lisp\n;; PDDL Problem File\n(define (problem grow_rose_bush)\n  (:domain rose_bush_growing)\n  \n  (:objects \n    ground clipping - entity\n  )\n  \n  (:init \n    (not (prepared ground))\n    (not (cut clipping))\n    (not (moistened clipping))\n    (not (planted clipping))\n  )\n  \n  (:goal \n    (and\n      (planted clipping)\n    )\n  )\n)\n```",
    "```pddl\n;; PDDL Domain File\n(define (domain evolve_vulpix)\n  (:requirements :strips :typing)\n  (:types stone vulpix bag)\n  \n  (:predicates\n    (has_vulpix ?vulpix)\n    (found_fire_stone ?stone)\n    (selected_stone ?stone)\n    (selected_bag ?bag)\n    (vulpix_evolved ?vulpix)\n  )\n\n  (:action catch_or_trade_vulpix\n    :parameters (?vulpix)\n    :precondition (not (has_vulpix ?vulpix))\n    :effect (has_vulpix ?vulpix)\n  )\n  \n  (:action find_fire_stone\n    :parameters (?stone)\n    :precondition (not (found_fire_stone ?stone))\n    :effect (found_fire_stone ?stone)\n  )\n\n  (:action select_stone\n    :parameters (?stone)\n    :precondition (and (found_fire_stone ?stone) (not (selected_stone ?stone)))\n    :effect (selected_stone ?stone)\n  )\n\n  (:action select_bag\n    :parameters (?bag)\n    :precondition (not (selected_bag ?bag))\n    :effect (selected_bag ?bag)\n  )\n\n  (:action wait_for_evolution\n    :parameters (?vulpix)\n    :precondition (and (has_vulpix ?vulpix) (selected_stone stone) (selected_bag bag))\n    :effect (vulpix_evolved ?vulpix)\n  )\n)\n```\n\n```pddl\n;; PDDL Problem File\n(define (problem evolve_vulpix_problem)\n  (:domain evolve_vulpix)\n\n  (:objects\n    stone - stone\n    vulpix - vulpix\n    bag - bag\n  )\n\n  (:init\n    (not (has_vulpix vulpix))\n    (not (found_fire_stone stone))\n    (not (selected_stone stone))\n    (not (selected_bag bag))\n  )\n\n  (:goal\n    (and (vulpix_evolved vulpix))\n  )\n)\n```",
    "```lisp\n(define (domain polish-faucet)\n  (:requirements :strips :typing)\n  (:types entity)\n  (:predicates\n    (halved ?lemon - entity)\n    (juicy ?lemon - entity)\n    (faucet-clean ?faucet - entity)\n    (faucet-shiny ?faucet - entity)\n    (faucet-wet ?faucet - entity)\n    (lemon-squeezed ?lemon - entity)\n    (water-in-sink ?water - entity)\n    (juice-on-faucet ?juice - entity)\n    (juice-squeezed ?juice - entity)\n  )\n\n  (:action cut-lemon\n    :parameters (?lemon - entity)\n    :precondition (and )\n    :effect (halved ?lemon)\n  )\n\n  (:action squeeze-lemon\n    :parameters (?lemon - entity ?juice - entity)\n    :precondition (and (halved ?lemon))\n    :effect (and (lemon-squeezed ?lemon) (juice-squeezed ?juice))\n  )\n\n  (:action rub-faucet\n    :parameters (?faucet - entity ?lemon - entity)\n    :precondition (and (juice-squeezed ?juice) (halved ?lemon))\n    :effect (and (faucet-wet ?faucet) (faucet-clean ?faucet) (faucet-shiny ?faucet) (juice-on-faucet ?juice))\n  )\n\n  (:action wash-faucet\n    :parameters (?faucet - entity ?water - entity ?juice - entity)\n    :precondition (and (juice-on-faucet ?juice))\n    :effect (and (water-in-sink ?water) (faucet-clean ?faucet) (not (juice-on-faucet ?juice)))\n  )\n)\n```\n\n```lisp\n(define (problem polish-faucet-problem)\n  (:domain polish-faucet)\n  (:objects\n    lemon - entity\n    faucet - entity\n    juice - entity\n    water - entity\n  )\n  (:init\n    (not (halved lemon))\n    (not (juicy lemon))\n    (not (faucet-clean faucet))\n    (not (faucet-shiny faucet))\n    (not (faucet-wet faucet))\n    (not (lemon-squeezed lemon))\n    (not (water-in-sink water))\n    (not (juice-on-faucet juice))\n    (not (juice-squeezed juice))\n  )\n  (:goal\n    (and (faucet-clean faucet) (faucet-shiny faucet))\n  )\n)\n```",
    "```lisp\n(define (domain taco-filling)\n  (:requirements :strips :typing)\n  (:types entity attribute)\n  \n  (:predicates\n    (whole ?entity)\n    (chopped ?entity)\n    (cold ?entity)\n    (hot ?entity)\n    (cooked ?entity)\n    (uncooked ?entity)\n    (still ?entity)\n    (simmering ?entity)\n    (location ?entity ?location)\n    (fullness ?entity ?state)\n    (weight ?entity ?state)\n    (cleanness ?entity ?state)\n    (power ?stove ?state)\n    (learned ?recipe)\n  )\n  \n  (:action brown-meat-and-onion\n    :parameters (?tomato - entity ?onion - entity ?pan - entity ?stove - entity)\n    :precondition (and (whole ?tomato) (uncooked ?tomato) (cold ?tomato)\n                       (location ?tomato fridge) (cool ?pan) (power ?stove off))\n    :effect (and (chopped ?tomato) (cooked ?tomato) (hot ?tomato)\n                 (location ?tomato pan) (cooked ?onion) \n                 (power ?stove on) (hot ?pan))\n  )\n\n  (:action drain-fat\n    :parameters (?sink - entity ?grease-container - entity)\n    :precondition (and (location ?sink pan) (more-greasy ?sink))\n    :effect (and (location ?sink sink) (less-greasy ?sink))\n  )\n\n  (:action add-ingredients\n    :parameters (?tomato - entity ?pan - entity)\n    :precondition (and (chopped ?tomato) (location ?tomato pan) (cooked ?tomato))\n    :effect (and (simmering ?pan) (fullness ?pan more))\n  )\n\n  (:action finish-preparation\n    :parameters (?tomato - entity ?serving-bowl - entity ?hot-sauce - entity ?cheese - entity)\n    :precondition (and (simmering ?tomato) (hot ?tomato) (location ?tomato pan)\n                       (cool ?serving-bowl))\n    :effect (and (location ?tomato bowl) (cooked ?cheese) (location ?hot-sauce bowl)\n                 (learned ?recipe) (power ?stove off) (location ?cheese bowl))\n  )\n)\n```\n\n```lisp\n(define (problem make-taco-filling)\n  (:domain taco-filling)\n\n  (:objects\n    tomato onion pan stove sink grease-container serving-bowl hot-sauce cheese recipe - entity\n    whole chopped cold hot cooked uncooked simmering fridge pan sink bowl counter full empty light heavy cool hot mild location - attribute\n  )\n  \n  (:init\n    (whole tomato) (uncooked tomato) (cold tomato)\n    (location tomato fridge) (cool pan) (power stove off)\n    (more-greasy sink) (empty grease-container)\n    (location hot-sauce fridge) (location cheese fridge)\n    (cool serving-bowl) (not (learned recipe))\n  )\n\n  (:goal\n    (and (location tomato bowl) (cooked cheese)\n         (location hot-sauce bowl) (power stove off)\n         (learned recipe) (location cheese bowl))\n  )\n)\n```",
    "```pddl\n(define (domain skid_mark_removal)\n  (:requirements :strips :typing)\n  (:types entity attribute)\n\n  (:predicates\n    (eraser_location ?e - entity ?l - attribute)\n    (eraser_cost ?e - entity ?c - attribute)\n    (eraser_size ?e - entity ?s - attribute)\n    (floor_cleanness ?f - entity ?cl - attribute)\n    (floor_color ?f - entity ?co - attribute)\n    (floor_wetness ?f - entity ?w - attribute)\n    (linoleum_cleanness ?l - entity ?cl - attribute)\n    (skid_mark_dampness ?s - entity ?da - attribute)\n    (skid_mark_location ?s - entity ?lo - attribute)\n    (person_motion ?p - entity ?m - attribute)\n    (person_form ?p - entity ?f - attribute)\n    (hand_muscles_power ?h - entity ?pw - attribute)\n    (water_location ?w - entity ?lo - attribute)\n  )\n\n  (:action obtain_eraser\n    :parameters (?e - entity)\n    :precondition (and (eraser_location ?e absent) (eraser_cost ?e for-sale))\n    :effect (and (eraser_location ?e present) (eraser_cost ?e purchased))\n  )\n\n  (:action kneel_and_rub\n    :parameters (?p - entity ?f - entity ?s - entity ?e - entity)\n    :precondition (and (eraser_location ?e present) (person_form ?p standing) (skid_mark_location ?s present))\n    :effect (and (person_form ?p kneeling) (floor_cleanness ?f clean) (skid_mark_location ?s removed) (skid_mark_dampness ?s moister))\n  )\n\n  (:action continue_rubbing\n    :parameters (?f - entity ?s - entity)\n    :precondition (and (floor_cleanness ?f clean) (skid_mark_location ?s removed))\n    :effect (and (linoleum_cleanness ?f clean))\n  )\n\n  (:action wash_and_dry\n    :parameters (?f - entity ?w - entity)\n    :precondition (and (floor_cleanness ?f clean) (water_location ?w in-faucet))\n    :effect (and (floor_wetness ?f dry) (water_location ?w on-linoleum))\n  )\n)\n```\n\n```pddl\n(define (problem remove_skid_marks)\n  (:domain skid_mark_removal)\n\n  (:objects\n    eraser - entity\n    floor - entity\n    linoleum - entity\n    skid_mark - entity\n    person - entity\n    hand_muscles - entity\n    water - entity\n  )\n\n  (:init\n    (eraser_location eraser absent)\n    (eraser_cost eraser for-sale)\n    (floor_cleanness floor marked)\n    (floor_color floor black)\n    (linoleum_cleanness linoleum stained)\n    (skid_mark_location skid_mark present)\n    (person_form person upright)\n    (hand_muscles_power hand_muscles relaxed)\n    (water_location water in-faucet)\n  )\n\n  (:goal\n    (and\n      (floor_cleanness floor clean)\n      (floor_wetness floor dry)\n      (linoleum_cleanness linoleum clean)\n      (skid_mark_location skid_mark removed)\n    )\n  )\n)\n```",
    "```\n(define (domain lego_star_wars)\n  (:requirements :strips :typing)\n  (:types \n    entity\n  )\n  (:predicates \n    (game_played ?e - entity)\n    (selection_made ?e - entity)\n    (name_saved ?e - entity)\n    (level_completed ?e - entity)\n  )\n\n  (:action start_game\n    :parameters (?g - entity)\n    :precondition (not (game_played ?g))\n    :effect (game_played ?g)\n  )\n  \n  (:action select_character_parts\n    :parameters (?s - entity)\n    :precondition (not (selection_made ?s))\n    :effect (selection_made ?s)\n  )\n  \n  (:action save_name_and_exit\n    :parameters (?n - entity)\n    :precondition (and (selection_made ?n) (not (name_saved ?n)))\n    :effect (name_saved ?n)\n  )\n  \n  (:action complete_level\n    :parameters (?l - entity)\n    :precondition (and (name_saved ?l) (not (level_completed ?l)))\n    :effect (level_completed ?l)\n  )\n)\n\n(define (problem create_character)\n  (:domain lego_star_wars)\n  (:objects \n    game - entity\n    character - entity\n    level - entity\n  )\n  (:init \n    (not (game_played game))\n    (not (selection_made character))\n    (not (name_saved character))\n    (not (level_completed level))\n  )\n  (:goal \n    (and \n      (game_played game)\n      (selection_made character)\n      (name_saved character)\n      (level_completed level)\n    )\n  )\n)\n```",
    "\n```pddl\n(define (domain marshmallow_dip)\n  (:requirements :strips :typing)\n  (:types ingredient appliance container)\n\n  (:predicates\n    (combined ?i1 - ingredient ?i2 - ingredient)\n    (in_bowl ?i - ingredient)\n    (clean ?c - container)\n    (dirty ?c - container)\n    (empty ?c - container)\n    (full ?c - container)\n    (turned_on ?a - appliance)\n    (turned_off ?a - appliance)\n    (whole ?i - ingredient)\n    (sliced ?i - ingredient)\n    (separate ?i1 - ingredient ?i2 - ingredient)\n  )\n  \n  (:action blend_cream_cheese_and_marshmallow\n    :parameters (?cream_cheese - ingredient ?marshmallow_cream - ingredient ?blender - appliance ?bowl - container)\n    :precondition (and (separate ?cream_cheese ?marshmallow_cream) (turned_off ?blender) (clean ?bowl))\n    :effect (and (combined ?cream_cheese ?marshmallow_cream) (turned_on ?blender) (dirty ?blender) (full ?bowl) (in_bowl ?cream_cheese) (in_bowl ?marshmallow_cream))\n  )\n\n  (:action pour_mixture_in_clean_bowl\n    :parameters (?mixture - ingredient ?mixing_bowl - container)\n    :precondition (and (full ?mixing_bowl) (combined ?mixture ?mixture))\n    :effect (and (empty ?mixing_bowl) (in_bowl ?mixture) (dirty ?mixing_bowl))\n  )\n\n  (:action serve_with_fruit\n    :parameters (?fruit - ingredient)\n    :precondition (whole ?fruit)\n    :effect (sliced ?fruit)\n  )\n)\n```\n\n```pddl\n(define (problem make_marshmallow_dip)\n  (:domain marshmallow_dip)\n  \n  (:objects\n    cream_cheese marshmallow_cream - ingredient\n    blender - appliance\n    mixing_bowl serving_bowl - container\n    fruit - ingredient\n  )\n\n  (:init\n    (separate cream_cheese marshmallow_cream)\n    (clean mixing_bowl)\n    (empty mixing_bowl)\n    (turned_off blender)\n    (whole fruit)\n  )\n\n  (:goal\n    (and\n      (combined cream_cheese marshmallow_cream)\n      (full serving_bowl)\n      (sliced fruit)\n    )\n  )\n)\n```",
    "```lisp\n(define (domain hiking-gear-cleaning)\n  (:requirements :strips :typing)\n  (:types\n    entity\n    polar_fleece - entity\n    clothing - entity\n    washing_machine - entity\n    instructions - entity\n  )\n  \n  (:predicates\n    (knowledge ?instructions - instructions)\n    (cleanness ?entity - entity)\n    (fullness ?washing_machine - washing_machine)\n    (electric_conductivity ?washing_machine - washing_machine)\n    (location ?entity - entity)\n  )\n\n  (:action read_instructions\n    :parameters (?instructions - instructions)\n    :precondition (not (knowledge ?instructions))\n    :effect (knowledge ?instructions)\n  )\n\n  (:action wash_clothing\n    :parameters (?clothing - clothing ?washing_machine - washing_machine)\n    :precondition (cleanness ?clothing)\n    :effect (not (cleanness ?clothing))\n  )\n\n  (:action clean_polar_fleece\n    :parameters (?polar_fleece - polar_fleece ?washing_machine - washing_machine)\n    :precondition (not (cleanness ?polar_fleece))\n    :effect (cleanness ?polar_fleece)\n  )\n)\n```\n\n```lisp\n(define (problem clean-synthetic-hiking-gear)\n  (:domain hiking-gear-cleaning)\n  (:objects\n    instructions - instructions\n    clothing - clothing\n    polar_fleece - polar_fleece\n    washing_machine - washing_machine\n  )\n  (:init\n    (not (knowledge instructions))\n    (cleanness clothing)\n    (not (cleanness polar_fleece))\n  )\n  (:goal\n    (and\n      (knowledge instructions)\n      (not (cleanness clothing))\n      (cleanness polar_fleece)\n    )\n  )\n)\n```",
    "```pddl\n(define (domain bike_riding)\n  (:requirements :strips :typing)\n  \n  (:types\n    entity attribute\n  )\n\n  (:predicates\n    (knowledge ?e - entity ?a - attribute)\n    (location ?e - entity ?a - attribute)\n    (placement ?e - entity ?a - attribute)\n    (motion ?e - entity ?a - attribute)\n    (position ?e - entity ?a - attribute)\n    (weight ?e - entity ?a - attribute)\n    (stability ?e - entity ?a - attribute)\n    (movement ?e - entity ?a - attribute)\n    (mechanical_movement ?e - entity ?a - attribute)\n    (skill ?e - entity ?a - attribute)\n    (balance ?e - entity ?a - attribute)\n    (speed ?e - entity ?a - attribute)\n    (strength ?e - entity ?a - attribute)\n    (orientation ?e - entity ?a - attribute)\n  )\n\n  (:action swing_leg_over_bike\n    :parameters (?e - entity)\n    :precondition (and\n      (knowledge ?e absent)\n      (location pedals on ground)\n      (position you off bike)\n    )\n    :effect (and\n      (knowledge ?e present)\n      (location bike now between person's legs)\n      (position you now on bike)\n    )\n  )\n\n  (:action put_foot_on_pedal\n    :parameters (?e - entity)\n    :precondition (and\n      (location pedals in air)\n      (weight center_of_gravity mainly on both feet)\n    )\n    :effect (and\n      (location pedals on pedal)\n      (placement pedals now off ground)\n      (weight center_of_gravity mainly on least dominant foot)\n      (stability bike stable)\n      (weight bike heavier)\n      (strength grip on bike tight)\n    )\n  )\n\n  (:action hold_handlebars_for_support\n    :parameters (?e - entity)\n    :precondition (and\n      (knowledge handlebars absent)\n      (stability bike unbalanced)\n    )\n    :effect (and\n      (knowledge handlebars present)\n      (motion you now using handle bars for support)\n      (position you on handlebars)\n      (orientation bike straight)\n      (stability bike balanced)\n    )\n  )\n\n  (:action pedal_with_your_feet\n    :parameters (?e - entity)\n    :precondition (and \n      (position you on handlebars)\n      (location center_of_gravity forward)\n    )\n    :effect (and\n      (location center_of_gravity centered)\n      (placement feet centered)\n      (motion pedals moving)\n      (movement chain now moving)\n      (mechanical_movement chain now moving tire)\n      (motion you now moving)\n      (balance you now using body weight to maintain balance)\n      (movement bike moving)\n      (stability bike in motion)\n    )\n  )\n\n  (:action stop\n    :parameters (?e - entity)\n    :precondition (and\n      (motion you moving)\n    )\n    :effect (and\n      (location pedals on ground)\n      (placement pedals now on ground)\n      (movement chain now stopped)\n      (mechanical_movement chain now at rest on sprocket)\n      (speed ability_to_ride_a_bike slowing)\n      (motion you now still)\n      (stability bike stopped)\n      (knowledge handbrakes located)\n    )\n  )\n)\n```\n\n```pddl\n(define (problem bike_task)\n  (:domain bike_riding)\n\n  (:objects\n    center_of_gravity ability_to_identify_bike_shaft feet pedals \n    the_chain ability_to_identify_handlebars ability_to_ride_a_bike \n    you bike grip_on_bike handbrakes - entity\n    weight location placement motion position stability \n    movement mechanical_movement skill balance speed strength \n    orientation knowledge - attribute\n  )\n\n  (:init\n    (knowledge ability_to_identify_bike_shaft absent)\n    (location pedals on ground)\n    (position you off bike)\n    (weight center_of_gravity mainly on both feet)\n    (location center_of_gravity forward)\n    (stability bike unbalanced)\n    (placement pedals on ground)\n    (placement feet uncentered)\n    (motion pedals still)\n    (mechanical_movement the_chain at rest on sprocket)\n    (movement the_chain at rest)\n    (motion you sitting still on bike)\n    (stability bike stationary)\n    (knowledge handlebars absent)\n    (strength grip_on_bike loose)\n    (motion you resting on bike)\n  )\n\n  (:goal\n    (and\n      (motion you now still)\n      (stability bike stopped)\n      (knowledge handbrakes located)\n    )\n  )\n)\n```",
    "```lisp\n; PDDL Domain File\n(define (domain board-a-small-boat)\n  (:requirements :strips :typing)\n  (:types\n    entity\n    passenger - entity\n    boat - entity\n    legs - entity\n    arms - entity\n    handrail - entity\n    gravity - entity\n    water - entity\n    boarding_plank - entity\n    dock - entity\n    passenger_position - entity\n    jumping - entity\n    paddle - entity\n  )\n\n  (:predicates\n    (availability ?entity)\n    (location ?entity ?state)\n    (motion ?entity ?state)\n    (speed ?entity ?state)\n    (stability ?entity ?state)\n    (weight ?entity ?state)\n    (orientation ?entity ?state)\n    (action ?entity ?state)\n    (moisture ?entity ?state)\n    (placement ?entity ?state)\n    (center-of-gravity ?entity ?state)\n    (texture ?entity ?state)\n  )\n\n  (:action step1\n    :parameters (?boarding_plank - boarding_plank ?water - water ?dock - dock ?passenger_position - passenger_position ?boat - boat)\n    :precondition (and\n                    (location ?boarding_plank absent)\n                    (texture ?water choppy)\n                    (availability ?dock absent)\n                    (availability ?passenger_position unavailaable)\n                    (location ?boat in open water))\n    :effect (and\n                    (location ?boarding_plank connecting boat and dock)\n                    (moisture ?boarding_plank dry)\n                    (texture ?water smooth)\n                    (availability ?dock present)\n                    (availability ?passenger_position available)\n                    (location ?boat at dock)))\n\n  (:action step2\n    :parameters (?handrail - handrail ?jumping - jumping ?gravity - gravity ?boat - boat ?arms - arms ?legs - legs)\n    :precondition (and \n                    (motion ?boat standing)\n                    (stability ?jumping jerky)\n                    (center-of-gravity ?gravity high)\n                    (placement ?handrail unheld)\n                    (location ?arms at sides | lowered))\n    :effect (and \n                    (motion ?boat walking)\n                    (stability ?jumping smooth)\n                    (center-of-gravity ?gravity low)\n                    (placement ?handrail held)\n                    (location ?arms holding rail | raised)))\n\n  (:action step3\n    :parameters (?passenger - passenger ?jumping - jumping ?paddle - paddle ?legs - legs)\n    :precondition (and \n                    (speed ?passenger moving quickly)\n                    (location ?jumping present)\n                    (location ?paddle across boat)\n                    (location ?legs apart))\n    :effect (and \n                    (speed ?passenger moving slowly)\n                    (location ?jumping absent)\n                    (location ?paddle in gunwale)\n                    (location ?legs together)))\n\n  (:action step4\n    :parameters (?passenger_position - passenger_position ?boat - boat ?arms - arms)\n    :precondition (and \n                    (location ?passenger_position at edge of boat)\n                    (location ?boat on dock)\n                    (stability ?boat in motion)\n                    (weight ?boat lighter)\n                    (action ?boat still)\n                    (location ?arms free))\n    :effect (and \n                    (location ?passenger_position centered in boat)\n                    (location ?boat in boat)\n                    (stability ?boat still)\n                    (weight ?boat heavier)\n                    (action ?boat moving)\n                    (location ?arms holding boat)))\n\n  (:action step5\n    :parameters (?boarding_plank - boarding_plank ?boat - boat)\n    :precondition (and \n                    (location ?boarding_plank connecting boat and dock)\n                    (location ?boat docked)\n                    (stability ?boat rocking))\n    :effect (and \n                    (location ?boarding_plank on dock)\n                    (location ?boat in motion)\n                    (stability ?boat steadied)))\n)\n\n; PDDL Problem File\n(define (problem board-a-small-boat-problem)\n  (:domain board-a-small-boat)\n  (:objects \n    boat1 - boat\n    passenger1 - passenger\n    plank1 - boarding_plank\n    dock1 - dock\n    position1 - passenger_position\n    jumping1 - jumping\n    paddle1 - paddle\n    legs1 - legs\n    arms1 - arms\n    handrail1 - handrail\n    gravity1 - gravity\n    water1 - water\n  )\n  (:init \n    (location plank1 absent)\n    (texture water1 choppy)\n    (availability dock1 absent)\n    (availability position1 unavailaable)\n    (location boat1 in open water)\n    (motion boat1 standing)\n    (stability jumping1 jerky)\n    (center-of-gravity gravity1 high)\n    (placement handrail1 unheld)\n    (location arms1 at sides | lowered)\n    (speed passenger1 moving quickly)\n    (location jumping1 present)\n    (location paddle1 across boat)\n    (location legs1 apart)\n    (location position1 at edge of boat)\n    (location boat1 on dock)\n    (stability boat1 in motion)\n    (weight boat1 lighter)\n    (action boat1 still)\n    (location arms1 free)\n    (location plank1 connecting boat and dock)\n    (location boat1 docked)\n    (stability boat1 rocking)\n  )\n  (:goal \n    (and \n    (location plank1 on dock)\n    (location boat1 in motion)\n    (stability boat1 steadied)\n    )\n  )\n)\n```",
    "```lisp\n(define (domain smoothie)\n  (:requirements :strips :typing)\n  (:types entity)\n\n  (:predicates\n    (in-blender ?e - entity)\n    (smooth-texture ?e - entity)\n    (poured-in-glasses ?e - entity)\n    (garnished ?e - entity)\n    (yogurt-location ?e - entity)\n    (banana-location ?e - entity)\n    (sorbet-location ?e - entity)\n    (rum-in-blender ?e - entity)\n    (composition-mixed ?e - entity)\n  )\n\n  (:action place-ingredients-in-blender\n    :parameters (?e - entity)\n    :precondition (and (or (yogurt-location ?e) (banana-location ?e) (sorbet-location ?e)))\n    :effect (and (in-blender ?e) (composition-mixed ?e))\n  )\n\n  (:action blend-until-smooth\n    :parameters (?e - entity)\n    :precondition (in-blender ?e)\n    :effect (smooth-texture ?e)\n  )\n  \n  (:action pour-rum-and-blend\n    :parameters (?e - entity)\n    :precondition (and (in-blender ?e) (smooth-texture ?e))\n    :effect (rum-in-blender ?e)\n  )\n\n  (:action pour-smoothie-in-glasses\n    :parameters (?e - entity)\n    :precondition (and (rum-in-blender ?e) (smooth-texture ?e))\n    :effect (poured-in-glasses ?e)\n  )\n\n  (:action garnish-with-strawberry\n    :parameters (?e - entity)\n    :precondition (poured-in-glasses ?e)\n    :effect (garnished ?e)\n  )\n)\n```\n\n```lisp\n(define (problem make-smoothie)\n  (:domain smoothie)\n  (:objects\n    yogurt - entity\n    banana - entity\n    sorbet - entity\n    smoothie - entity\n    rum - entity\n    strawberry - entity\n    glass - entity\n  )\n\n  (:init\n    (yogurt-location yogurt)\n    (banana-location banana)\n    (sorbet-location sorbet)\n  )\n\n  (:goal\n    (and\n      (garnished smoothie)\n    )\n  )\n)\n```\n",
    "```\n; PDDL Domain File for making a Pinwheel Wreath\n(define (domain pinwheel_wreath)\n  (:requirements :typing)\n  (:types\n    paper wreath pinwheel twine entity\n  )\n  (:predicates\n    (choice ?p - paper)\n    (knowledge ?p - paper)\n    (shape ?p - paper)\n    (step ?w - wreath)\n    (availability ?p - pinwheel)\n    (orientation ?p - pinwheel)\n    (location ?t - twine)\n    (organization ?t - twine)\n  )\n  (:action select-paper\n    :parameters (?p - paper)\n    :precondition (and (not (choice ?p)) (not (knowledge ?p)))\n    :effect (and (choice ?p) (knowledge ?p))\n  )\n  (:action make-pinwheels\n    :parameters (?p - pinwheel)\n    :precondition (and (not (availability ?p)) (not (orientation ?p)))\n    :effect (and (availability ?p) (orientation ?p))\n  )\n  (:action choose-wreath-base\n    :parameters (?w - wreath)\n    :precondition (not (step ?w))\n    :effect (step ?w)\n  )\n  (:action attach-twine\n    :parameters (?t - twine)\n    :precondition (and (not (location ?t)) (not (organization ?t)))\n    :effect (and (location ?t) (organization ?t))\n  )\n)\n```\n\n```\n; PDDL Problem File for reaching the goal of making a pinwheel wreath\n(define (problem make_pinwheel_wreath)\n  (:domain pinwheel_wreath)\n  (:objects\n    p1 - paper\n    w1 - wreath\n    pin1 - pinwheel\n    t1 - twine\n  )\n  (:init\n    (not (choice p1))\n    (not (knowledge p1))\n    (not (shape p1))\n    (not (step w1))\n    (not (availability pin1))\n    (not (orientation pin1))\n    (not (location t1))\n    (not (organization t1))\n  )\n  (:goal\n    (and\n      (choice p1)\n      (knowledge p1)\n      (shape p1)\n      (step w1)\n      (availability pin1)\n      (orientation pin1)\n      (location t1)\n      (organization t1)\n    )\n  )\n)\n```",
    "```lisp\n; PDDL Domain File\n(define (domain wreath-making)\n  (:requirements :typing)\n  (:types entity attribute)\n\n  (:predicates\n    (shape ?entity ?attribute)\n    (proximity ?entity ?attribute)\n    (texture ?entity ?attribute)\n    (location ?entity ?attribute)\n    (volume ?entity ?attribute)\n    (weight ?entity ?attribute)\n    (composition ?entity ?attribute)\n    (orientation ?entity ?attribute)\n    (position ?entity ?attribute)\n    (openness ?entity ?attribute)\n    (pressure ?entity ?attribute)\n    (motion ?entity ?attribute)\n    (status ?entity ?attribute)\n    (cleanness ?entity ?attribute)\n  )\n\n  (:action untwist-hanger\n    :parameters (?hanger entity)\n    :precondition (and (shape ?hanger \"in hanger shape\"))\n    :effect (and (shape ?hanger \"in circle shape\"))\n  )\n\n  (:action crumple-and-thread-paper\n    :parameters (?paper entity ?hanger entity)\n    :precondition (and (texture ?paper \"flat\"))\n    :effect (and (texture ?paper \"crumpled\") (location ?hanger \"through paper\"))\n  )\n\n  (:action twist-ends\n    :parameters (?ends entity)\n    :precondition (and (shape ?ends \"straight\"))\n    :effect (and (shape ?ends \"twisted\") (proximity ?ends \"together\"))\n  )\n\n  (:action slide-and-scrunch\n    :parameters (?paper entity)\n    :precondition (and (orientation ?paper \"bunched on hanger\"))\n    :effect (and (orientation ?paper \"spread out on hanger\") (shape ?paper \"scrunched\"))\n  )\n\n  (:action finish-wreath\n    :parameters (?wreath entity)\n    :precondition (and (status ?wreath \"in progress\"))\n    :effect (and (status ?wreath \"completed\"))\n  )\n)\n```\n\n```lisp\n; PDDL Problem File\n(define (problem wreath-making-problem)\n  (:domain wreath-making)\n\n  (:objects\n    hanger entity\n    paper entity\n    ends entity\n    wreath entity\n  )\n\n  (:init\n    (shape hanger \"in hanger shape\")\n    (texture paper \"flat\")\n    (location hanger \"on table\")\n    (shape ends \"straight\")\n    (status wreath \"in progress\")\n  )\n\n  (:goal\n    (and\n      (shape hanger \"in circle shape\")\n      (texture paper \"crumpled\")\n      (location hanger \"through paper\")\n      (shape ends \"twisted\")\n      (proximity ends \"together\")\n      (orientation paper \"spread out on hanger\")\n      (shape paper \"scrunched\")\n      (status wreath \"completed\")\n    )\n  )\n)\n```",
    "```pddl\n(define (domain MakePotatoRibbons)\n  (:types potato peeler cloth sink serving_dish stove_burner oil ribbons kitchen_counter bowl)\n\n  (:predicates \n    (dirty ?x)\n    (clean ?x)\n    (wet ?x)\n    (dry ?x)\n    (in_bag ?x)\n    (on_counter ?x)\n    (in_hand ?x)\n    (in_drawer ?x)\n    (thicker ?x)\n    (thinner ?x)\n    (whole ?x)\n    (peeled ?x)\n    (on_stove ?x)\n    (in_pan ?x)\n    (cooked ?x)\n    (raw ?x)\n    (full_of_potato_peels ?x)\n    (empty ?x)\n    (power_off ?x)\n    (power_on ?x)\n    (on_table ?x)\n    (in_dish ?x)\n    (cool ?x)\n    (hot ?x)\n    (soft ?x)\n    (crunchy ?x)\n    (messy ?x))\n\n  (:action wash_potato\n    :parameters (?p - potato ?s - sink)\n    :precondition (and (dirty ?p) (dry ?p) (in_bag ?p) (power_off ?s))\n    :effect (and (clean ?p) (wet ?p) (on_counter ?p) (power_on ?s)))\n\n  (:action cut_potato\n    :parameters (?p - potato ?e - peeler)\n    :precondition (and (in_hand ?e) (in_drawer ?e) (clean ?p))\n    :effect (and (thinner ?p) (peeled ?p)))\n\n  (:action drain_potato\n    :parameters (?p - potato ?c - cloth)\n    :precondition (and (wet ?p) (in_hand ?p) (dry ?c))\n    :effect (and (dry ?p) (on_cloth ?c) (messy ?c)))\n\n  (:action fry_ribbons\n    :parameters (?p - potato ?o - oil ?s - stove_burner)\n    :precondition (and (raw ?p) (cool ?o) (power_on ?s))\n    :effect (and (cooked ?p) (hot ?o)))\n\n  (:action serve_ribbons\n    :parameters (?d - serving_dish ?p - potato)\n    :precondition (and (cooked ?p) (empty ?d))\n    :effect (and (in_dish ?p) (on_table ?d) (full_of_potato_peels ?d)))\n)\n\n```\n\n```pddl\n(define (problem make-potato-ribbons-goal)\n  (:domain MakePotatoRibbons)\n  (:objects potato1 - potato\n            peeler1 - peeler\n            cloth1 - cloth\n            sink1 - sink\n            stove1 - stove_burner\n            oil1 - oil\n            dish1 - serving_dish\n            counter1 - kitchen_counter\n            bowl1 - bowl)\n            \n  (:init\n    (dirty potato1)\n    (dry potato1)\n    (in_bag potato1)\n    (power_off sink1)\n    (in_drawer peeler1)\n    (dry cloth1)\n    (raw potato1)\n    (cool oil1)\n    (empty dish1)\n  )\n\n  (:goal\n    (and (in_dish potato1) (on_table dish1))\n  )\n)\n```",
    "```pddl\n(define (domain rusty_bolt_problem)\n    (:requirements :strips :typing)\n    (:types entity drink towel bolt)\n    \n    (:predicates \n        (obtained ?x - drink)\n        (on_bolt ?x - drink)\n        (on_towel ?x - drink)\n        (clean ?x - towel)\n        (dirty ?x - towel)\n        (stuck ?x - bolt)\n        (unstuck ?x - bolt)\n        (in_package ?x - bolt)\n        (in_machine ?x - bolt)\n    )\n\n    (:action obtain_fizzy_drink\n        :parameters (?d - drink)\n        :precondition (not (obtained ?d))\n        :effect (obtained ?d)\n    )\n\n    (:action pour_fizzy_drink\n        :parameters (?d - drink ?b - bolt)\n        :precondition (and (obtained ?d) (stuck ?b))\n        :effect (and (on_bolt ?d) (not (obtained ?d)))\n    )\n\n    (:action wipe_clean\n        :parameters (?t - towel ?d - drink)\n        :precondition (and (on_bolt ?d) (clean ?t))\n        :effect (and (on_towel ?d) (dirty ?t))\n    )\n\n    (:action dissolve_rust\n        :parameters (?b - bolt ?d - drink)\n        :precondition (and (on_towel ?d) (stuck ?b))\n        :effect (and (unstuck ?b) (not (stuck ?b)))\n    )\n    \n    (:action replace_bolt\n        :parameters (?b_old - bolt ?b_new - bolt)\n        :precondition (and (unstuck ?b_old) (in_package ?b_new))\n        :effect (and (in_machine ?b_new) (not (in_package ?b_new)))\n    )\n)\n\n```\n\n```pddl\n(define (problem open_rusty_bolt_problem)\n    (:domain rusty_bolt_problem)\n    \n    (:objects\n        fizzy_drink1 - drink\n        towel1 - towel\n        old_bolt1 - bolt\n        new_bolt1 - bolt\n    )\n    \n    (:init\n        (not (obtained fizzy_drink1))\n        (clean towel1)\n        (stuck old_bolt1)\n        (in_package new_bolt1)\n    )\n\n    (:goal \n        (and\n            (unstuck old_bolt1)\n            (in_machine new_bolt1)\n        )\n    )\n)\n```",
    "```pddl\n(define (domain asparagus-serrano)\n  (:requirements :strips :typing)\n  (:types entity attribute)\n  (:predicates\n    (location ?entity ?location)\n    (composition ?entity ?composition)\n    (coverage ?entity ?coverage)\n    (size ?entity ?size)\n    (shape ?entity ?shape)\n    (texture ?entity ?texture)\n    (color ?entity ?color)\n    (temperature ?entity ?temperature)\n    (power ?entity ?power)\n    (electric_conductivity ?entity ?conductivity)\n    (volume ?entity ?volume)\n    (fullness ?entity ?fullness)\n    (sound ?entity ?sound)\n    (pressure ?entity ?pressure)\n    (weight ?entity ?weight)\n    (cleanness ?entity ?cleanness)\n    (appearance ?entity ?appearance)\n    (moisture ?entity ?moisture)\n    (accompaniment ?entity ?accompaniment)\n    (openness ?entity ?openness)\n  )\n  \n  (:action preheat-oven\n    :parameters (?heating_element ?stove_buttons ?display)\n    :precondition (and \n      (temperature ?heating_element cold)\n      (power ?heating_element off)\n    )\n    :effect (and \n      (temperature ?heating_element hot)\n      (power ?heating_element on)\n      (pressure ?stove_buttons pressed)\n      (power ?display on)\n    )\n  )\n\n  (:action add-oil\n    :parameters (?oil ?tin)\n    :precondition (and \n      (location ?oil in_container)\n      (volume ?tin empty)\n    )\n    :effect (and \n      (location ?oil in_tin)\n      (volume ?tin full)\n      (texture ?tin oiled)\n      (weight ?oil lighter)\n    )\n  )\n  \n  (:action prepare-asparagus\n    :parameters (?asparagus ?pieces ?ham ?cutting_board)\n    :precondition (and\n      (composition ?asparagus whole)\n      (location ?asparagus out_on_table)\n      (location ?pieces around_asparagus)\n      (location ?ham in_package)\n      (cleanness ?cutting_board clean)\n    )\n    :effect (and\n      (composition ?asparagus cut)\n      (coverage ?asparagus mostly_covered)\n      (size ?asparagus shorter)\n      (shape ?asparagus duller)\n      (texture ?asparagus covered)\n      (location ?pieces discarded)\n      (location ?ham around_asparagus)\n      (cleanness ?cutting_board dirty)\n    )\n  )\n\n  (:action roast-asparagus\n    :parameters (?asparagus ?heating_element)\n    :precondition (and\n      (composition ?asparagus cut)\n      (coverage ?asparagus mostly_covered)\n    )\n    :effect (and\n      (composition ?asparagus cooked)\n      (moisture ?asparagus wet)\n      (texture ?asparagus softened)\n      (temperature ?asparagus warm)\n      (volume ?heating_element full)\n    )\n  )\n\n  (:action serve-asparagus\n    :parameters (?asparagus ?main_dish ?tin ?room)\n    :precondition (and\n      (composition ?asparagus cooked)\n      (temperature ?asparagus warm)\n      (volume ?tin full)\n    )\n    :effect (and\n      (composition ?asparagus cooling)\n      (location ?asparagus in_serving_dish)\n      (location ?main_dish on_table)\n      (accompaniment ?main_dish accompanied)\n      (volume ?tin empty)\n    )\n  )\n)\n\n```\n\n```pddl\n(define (problem make-asparagus-serrano)\n  (:domain asparagus-serrano)\n  (:objects\n    asparagus heating_element stove_buttons display oil tin pieces main_dish cutting_board ham room - entity\n  )\n  (:init\n    (location asparagus in_fridge)\n    (composition asparagus whole)\n    (coverage asparagus exposed)\n    (size asparagus longer)\n    (shape asparagus pointier)\n    (texture asparagus uncovered)\n    (location heating_element open)\n    (temperature heating_element cold)\n    (power heating_element off)\n    (electric_conductivity heating_element unused)\n    (volume heating_element empty)\n    (sound heating_element quiet)\n    (pressure stove_buttons unpressed)\n    (power display off)\n    (weight oil heavier)\n    (location oil in_container)\n    (volume tin empty)\n    (weight tin light)\n    (cleanness tin clean)\n    (texture tin dry)\n    (location pieces around_asparagus)\n    (texture pieces unwrapped)\n    (location main_dish in_cabinet)\n    (location cutting_board in_drawer)\n    (cleanness cutting_board clean)\n    (texture ham smooth)\n    (appearance ham dull)\n    (temperature room quiet)\n  )\n  (:goal (and\n    (composition asparagus cooling)\n    (location asparagus in_serving_dish)\n    (location main_dish on_table)\n    (accompaniment main_dish accompanied)\n    (volume tin empty)\n  ))\n)\n```",
    "```lisp\n(define (domain wick-maintenance)\n  (:requirements :strips :typing)\n  (:types\n    wick vinegar lamp container\n  )\n  (:predicates\n    (in_lamp ?w - wick)\n    (purchased ?w - wick)\n    (removed ?w - wick)\n    (wet ?w - wick)\n    (dry ?w - wick)\n    (heated ?w - wick)\n    (in_vinegar ?w - wick)\n    (vinegar_in_container ?v - vinegar)\n  )\n  (:action purchase_wicks\n    :parameters (?w - wick)\n    :precondition (not (purchased ?w))\n    :effect (purchased ?w)\n  )\n  (:action remove_wicks\n    :parameters (?w - wick ?l - lamp)\n    :precondition (and (purchased ?w) (in_lamp ?w))\n    :effect (and (removed ?w) (not (in_lamp ?w)))\n  )\n  (:action put_vinegar_in_container\n    :parameters (?v - vinegar ?c - container)\n    :precondition (not (vinegar_in_container ?v))\n    :effect (vinegar_in_container ?v)\n  )\n  (:action dip_wicks_in_vinegar\n    :parameters (?w - wick ?v - vinegar)\n    :precondition (and (removed ?w) (vinegar_in_container ?v) (dry ?w))\n    :effect (and (wet ?w) (in_vinegar ?w))\n  )\n  (:action dry_wicks\n    :parameters (?w - wick)\n    :precondition (wet ?w)\n    :effect (and (dry ?w) (not (wet ?w)))\n  )\n  (:action place_wicks_in_lamp\n    :parameters (?w - wick ?l - lamp)\n    :precondition (and (dry ?w) (not (in_lamp ?w)))\n    :effect (and (in_lamp ?w) (not (removed ?w)))\n  )\n)\n\n(define (problem wick-smoking-prevention)\n  (:domain wick-maintenance)\n  (:objects\n    wick1 - wick\n    vinegar1 - vinegar\n    lamp1 - lamp\n    container1 - container\n  )\n  (:init\n    (not (purchased wick1))\n    (in_lamp wick1)\n    (dry wick1)\n    (not (vinegar_in_container vinegar1))\n  )\n  (:goal\n    (and \n      (in_lamp wick1)\n      (dry wick1)\n      (not (wet wick1))\n    )\n  )\n)\n```",
    "```lisp\n; PDDL Domain File\n(define (domain photography_learning)\n  (:requirements :strips :typing)\n  (:types\n    entity\n  )\n  \n  (:predicates\n    (studio_setup ?s - entity)\n    (reflector_appropriate ?r - entity)\n    (lens_closeup ?l - entity)\n    (light_diffused ?li - entity)\n    (experiment_started ?e - entity)\n  )\n\n  (:action create_small_studio\n    :parameters (?s - entity)\n    :precondition (and)\n    :effect (and (studio_setup ?s))\n  )\n\n  (:action have_appropriate_reflectors\n    :parameters (?r - entity)\n    :precondition (and)\n    :effect (and (reflector_appropriate ?r))\n  )\n\n  (:action have_closeup_lens\n    :parameters (?l - entity)\n    :precondition (and)\n    :effect (and (lens_closeup ?l))\n  )\n\n  (:action diffuse_light\n    :parameters (?li - entity)\n    :precondition (and)\n    :effect (and (light_diffused ?li))\n  )\n\n  (:action start_experimenting\n    :parameters (?e - entity)\n    :precondition (and)\n    :effect (and (experiment_started ?e))\n  )\n)\n```\n\n```lisp\n; PDDL Problem File\n(define (problem photography_learning_problem)\n  (:domain photography_learning)\n  \n  (:objects\n    studio - entity\n    reflector - entity\n    lens - entity\n    light - entity\n    experiment - entity\n  )\n  \n  (:init\n    ; Initial states corresponding to first step or uninitialized states\n  )\n  \n  (:goal\n    (and\n      (studio_setup studio)\n      (reflector_appropriate reflector)\n      (lens_closeup lens)\n      (light_diffused light)\n      (experiment_started experiment)\n    )\n  )\n)\n```",
    "```lisp\n; PDDL Domain File\n(define (domain make_cheese_sauce)\n  (:requirements :strips :typing)\n  (:types entity attribute)\n  (:predicates\n    (granularity ?entity - entity ?attribute - attribute)\n    (location ?entity - entity ?attribute - attribute)\n    (temperature ?entity - entity ?attribute - attribute)\n    (openness ?entity - entity ?attribute - attribute)\n    (texture ?entity - entity ?attribute - attribute)\n    (power ?entity - entity ?attribute - attribute)\n    (orientation ?entity - entity ?attribute - attribute)\n    (cleanness ?entity - entity ?attribute - attribute)\n    (moisture ?entity - entity ?attribute - attribute)\n    (taste ?entity - entity ?attribute - attribute)\n  )\n\n  ; Action Step 1\n  (:action cut_velveeta\n    :parameters (?entity - entity)\n    :precondition (and\n      (granularity ?entity whole)\n      (location ?entity in_package)\n      (openness ?entity closed))\n    :effect (and\n      (granularity ?entity cubed)\n      (location ?entity on_the_counter)\n      (openness ?entity open))\n  )\n\n  ; Action Step 2\n  (:action set_burner_add_cheese\n    :parameters (?stove - entity ?velveeta - entity)\n    :precondition (and\n      (power ?stove off)\n      (granularity ?velveeta cubed)\n      (location ?velveeta on_the_counter))\n    :effect (and\n      (power ?stove on)\n      (granularity ?velveeta liquid)\n      (location ?velveeta in_sauce_pan))\n  )\n\n  ; Action Step 3\n  (:action melt_cheese_add_tomatoes\n    :parameters (?velveeta - entity ?tomatoes - entity)\n    :precondition (and\n      (granularity ?velveeta liquid)\n      (granularity ?tomatoes solid))\n    :effect (and\n      (texture ?velveeta runny)\n      (location ?tomatoes in_pot))\n  )\n\n  ; Action Step 4\n  (:action add_peppers_olives\n    :parameters (?peppers - entity ?olives - entity)\n    :precondition (and\n      (location ?peppers whole)\n      (location ?olives to_the_side))\n    :effect (and\n      (location ?peppers in_pan)\n      (location ?olives in_pan))\n  )\n\n  ; Action Step 5\n  (:action serve_cheese_sauce\n    :parameters (?sauce - entity)\n    :precondition (and\n      (location ?sauce in_pot))\n    :effect (and\n      (location ?sauce in_bowl))\n  )\n)\n\n; PDDL Problem File\n(define (problem make_cheese_sauce_problem)\n  (:domain make_cheese_sauce)\n  (:objects\n    velveeta - entity\n    stove_knob - entity\n    olives - entity\n    cheese - entity\n    cutting_board - entity\n    rotel_can - entity\n    peppers - entity\n    cheese_sauce - entity\n    pot - entity\n  )\n  (:init\n    (granularity velveeta whole)\n    (location velveeta in_package)\n    (openness velveeta closed)\n    (power stove_knob off)\n    (granularity velveeta cubed)\n    (location velveeta on_the_counter)\n    (granularity velveeta liquid)\n    (granularity rotel_can solid)\n    (location peppers whole)\n    (location olives to_the_side)\n    (location cheese_sauce in_pot)\n  )\n  (:goal\n    (and\n      (location cheese_sauce in_bowl)\n    )\n  )\n)\n```",
    "```lisp\n(define (domain pokemon-evolution)\n  (:requirements :strips :typing)\n  (:types pokemon)\n  (:predicates\n    (unused ?p - pokemon)\n    (used ?p - pokemon)\n    (untrained ?p - pokemon)\n    (trained ?p - pokemon)\n    (unevolved ?p - pokemon)\n    (evolved ?p - pokemon)\n    (unattained ?p - pokemon)\n    (now-attained ?p - pokemon)\n    (uncopied ?p - pokemon)\n    (copied ?p - pokemon)\n    (without-rare-candies ?p - pokemon)\n    (now-holder-of-rare-candy ?p - pokemon)\n  )\n\n  (:action use-wailmer\n    :parameters (?p - pokemon)\n    :precondition (unused ?p)\n    :effect (and (used ?p) (not (unused ?p)))\n  )\n\n  (:action train-wailmer\n    :parameters (?p - pokemon)\n    :precondition (untrained ?p)\n    :effect (and (trained ?p) (not (untrained ?p)))\n  )\n\n  (:action evolve-wailmer\n    :parameters (?p - pokemon)\n    :precondition (unevolved ?p)\n    :effect (and (evolved ?p) (not (unevolved ?p)))\n  )\n\n  (:action attain-battle-frontier\n    :parameters (?p - pokemon)\n    :precondition (unattained ?p)\n    :effect (and (now-attained ?p) (not (unattained ?p)))\n  )\n\n  (:action copy-rare-candies\n    :parameters (?p - pokemon)\n    :precondition (uncopied ?p)\n    :effect (and (copied ?p) (not (uncopied ?p)))\n  )\n\n  (:action give-rare-candies\n    :parameters (?p - pokemon)\n    :precondition (without-rare-candies ?p)\n    :effect (and (now-holder-of-rare-candy ?p) (not (without-rare-candies ?p)))\n  )\n)\n```\n\n```lisp\n(define (problem get-wailord)\n  (:domain pokemon-evolution)\n  (:objects\n    wailmer - pokemon\n  )\n  (:init\n    (unused wailmer)\n    (untrained wailmer)\n    (unevolved wailmer)\n    (unattained wailmer)\n    (uncopied wailmer)\n    (without-rare-candies wailmer)\n  )\n  (:goal\n    (and\n      (used wailmer)\n      (trained wailmer)\n      (evolved wailmer)\n      (now-attained wailmer)\n      (copied wailmer)\n      (now-holder-of-rare-candy wailmer)\n    )\n  )\n)\n```",
    "```lisp\n; PDDL Domain File\n(define (domain call_of_duty)\n  (:requirements :strips :typing)\n  (:types\n    game_character\n    routes\n    bomb\n    pistol\n  )\n\n  (:predicates\n    (location ?entity - game_character ?place - location)\n    (focus ?entity - game_character ?task - task)\n    (coverage ?entity - routes ?state - state)\n    (appearance ?entity - routes ?state - state)\n    (knowledge ?entity - routes ?state - state)\n    (skill ?entity - bomb ?state - state)\n    (pistol_location ?entity - pistol ?state - state)\n    (availability ?entity - pistol ?state - state)\n  )\n\n  (:action move_in\n    :parameters (?c - game_character)\n    :precondition (location ?c further_out)\n    :effect (and (location ?c in))\n  )\n\n  (:action find_hiding_spot\n    :parameters (?c - game_character ?p - pistol)\n    :precondition (and (location ?c in)\n                       (pistol_location ?p hidden | concealed)\n                       (availability ?p in_inventory))\n    :effect (and (location ?c hidden)\n                 (pistol_location ?p out | exposed)\n                 (availability ?p equipped))\n  )\n\n  (:action investigate_routes\n    :parameters (?c - game_character ?r - routes)\n    :precondition (and (location ?c hidden)\n                       (focus ?c pulling_out_pistol)\n                       (knowledge ?r uninve\n\nstigated))\n    :effect (and (focus ?c investigating)\n                 (knowledge ?r investigated))\n  )\n\n  (:action wait_until_planting\n    :parameters (?c - game_character ?b - bomb)\n    :precondition (and (focus ?c investigating_routes)\n                       (skill ?b absent | unplanted))\n    :effect (and (focus ?c waiting)\n                 (skill ?b planted))\n  )\n\n  (:action start_defusing\n    :parameters (?c - game_character ?b - bomb)\n    :precondition (and (location ?c in_hiding_spot)\n                       (focus ?c hiding)\n                       (skill ?b active | ticking))\n    :effect (and (location ?c now_at_bomb)\n                 (focus ?c defusing)\n                 (skill ?b deactivated | defused | being_defused))\n  )\n)\n```\n\n```lisp\n; PDDL Problem File\n(define (problem ninja_defuse)\n  (:domain call_of_duty)\n  (:objects\n    character - game_character\n    current_routes - routes\n    game_bomb - bomb\n    player_pistol - pistol\n  )\n  (:init\n    (location character further_out)\n    (focus character pulling_out_pistol)\n    (coverage current_routes uncovered)\n    (appearance current_routes uncovered)\n    (knowledge current_routes uninve\n\nstigated)\n    (skill game_bomb absent | unplanted)\n    (pistol_location player_pistol hidden | concealed)\n    (availability player_pistol in_inventory)\n  )\n  (:goal\n    (and\n      (location character now_at_bomb)\n      (focus character defusing)\n      (skill game_bomb deactivated | defused | being_defused)\n    )\n  )\n)\n```",
    "```lisp\n(define (domain paint-bare-wood)\n  (:requirements :strips :typing)\n  (:types\n    entity attribute\n  )\n  (:predicates\n    (clean ?e - entity)\n    (dirty ?e - entity)\n    (present ?e - entity)\n    (absent ?e - entity)\n    (dry ?e - entity)\n    (wet ?e - entity)\n    (lighter ?e - entity)\n    (heavier ?e - entity)\n    (black ?e - entity)\n    (colored ?e - entity)\n    (moving-vertically ?e - entity)\n    (smooth ?e - entity)\n    (sticky ?e - entity)\n    (thin ?e - entity)\n    (thick ?e - entity)\n    (moisture ?e - entity ?a - attribute)\n    (texture ?e - entity ?a - attribute)\n    (thickness ?e - entity ?a - attribute)\n    (direction-downward ?e - entity)\n    (confirmed-to-be-oil ?e - entity)\n    (unknown ?e - entity)\n    (owned-by-you ?e - entity)\n    (owned-by-art-store ?e - entity)\n    (bubbling ?e - entity)\n    (no-bubbles ?e - entity)\n    (sloppy ?e - entity)\n    (precise-and-careful ?e - entity)\n    (location ?e - entity ?a - attribute)\n  )\n  (:action acquire-oil-paints\n    :parameters (?pb - entity)\n    :precondition (unknown ?pb)\n    :effect (and (confirmed-to-be-oil ?pb) (owned-by-you ?pb))\n  )\n  (:action apply-under-coat\n    :parameters (?pb - entity ?paint_dir - attribute ?paint_brush_attribute - attribute)\n    :precondition (and (clean ?pb) (not(thick ?paint_dir)) (not(smooth ?pb)))\n    :effect (and (no-bubbles ?pb) (thick ?paint_dir) (colored ?pb) (dirty ?pb) (moving-vertically ?pb))\n  )\n  (:action apply-second-coat\n    :parameters (?pb - entity ?paint_brush_attribute - attribute)\n    :precondition (and (not(bubbling ?pb)) (thick ?paint_brush_attribute))\n    :effect (and (smooth ?pb) (heavy ?pb))\n  )\n  (:action be-precise\n    :parameters (?pb - entity ?paint_brush_attribute - attribute)\n    :precondition (not(precise-and-careful ?pb))\n    :effect (precise-and-careful ?pb)\n  )\n  (:action finish-painting\n    :parameters (?pb - entity)\n    :precondition (precise-and-careful ?pb)\n    :effect (and (dry ?pb) (not dirty))\n  )\n)\n```\n```lisp\n(define (problem paint-bare-wood-problem)\n  (:domain paint-bare-wood)\n  (:objects\n    paintbrush paintbase barewood paint bubbles coat caulkingcompound paintdirection precision dropcloth linseedoil pools tin - entity\n  )\n  (:init\n    (clean paintbrush)\n    (absent paintbrush)\n    (unknown paintbase)\n    (dry barewood)\n    (smooth barewood)\n    (dry paint)\n    (in-can paint)\n    (owned-by-art-store paint)\n    (present bubbles)\n    (in-tin coat)\n    (absent caulkingcompound)\n    (unknown paintdirection)\n  )\n  (:goal\n    (and\n      (precise-and-careful barewood)\n      (smooth barewood)\n      (dry barewood)\n      (no-bubbles paint)\n      (dry paint)\n      (dry coat)\n      (absent cover)\n      (present linseedoil)\n    )\n  )\n)\n```",
    "```lisp\n(define (domain seasoned-salt)\n  (:requirements :strips :typing)\n  (:types entity container food tool)\n  (:predicates\n    (stratified ?e - entity)\n    (separate ?e - entity)\n    (mixed ?e - entity)\n    (inContainer ?e - entity ?c - container)\n    (empty ?c - container)\n    (full ?c - container)\n    (onCounter ?c - container)\n    (flavorful ?f - food)\n    (plain ?f - food)\n    (present ?t - tool)\n    (absent ?t - tool)\n  )\n  (:action mix-ingredients\n    :parameters (?e - entity)\n    :precondition (and (stratified ?e) (separate ?e))\n    :effect (and (mixed ?e) (not (stratified ?e)) (not (separate ?e)))\n  )\n  (:action pour-into-container\n    :parameters (?e - entity ?c - container)\n    :precondition (and (mixed ?e) (empty ?c))\n    :effect (and (inContainer ?e ?c) (full ?c) (onCounter ?c) (not (empty ?c)))\n  )\n  (:action season-food\n    :parameters (?e - entity ?f - food)\n    :precondition (mixed ?e)\n    :effect (and (flavorful ?f) (not (plain ?f)))\n  )\n  (:action grind-ingredients\n    :parameters (?e - entity ?t - tool)\n    :precondition (and (mixed ?e) (absent ?t))\n    :effect (and (present ?t))\n  )\n  (:action transfer-to-storage\n    :parameters (?e - entity ?c - container)\n    :precondition (inContainer ?e ?c)\n    :effect (and (empty ?c))\n  )\n)\n\n```\n\n```lisp\n(define (problem make-seasoned-salt)\n  (:domain seasoned-salt)\n  (:objects \n    celery_salt - entity\n    air_tight_container - container\n    salads - food\n    mortar_and_pestle - tool\n    mixing_bowl - container\n  )\n  (:init \n    (stratified celery_salt)\n    (separate celery_salt)\n    (empty air_tight_container)\n    (plain salads)\n    (absent mortar_and_pestle)\n    (empty mixing_bowl)\n  )\n  (:goal \n    (and \n      (flavorful salads)\n      (present mortar_and_pestle)\n      (not (stratified celery_salt))\n      (not (separate celery_salt))\n      (empty air_tight_container)\n    )\n  )\n)\n```\n\n",
    "```\n; PDDL Domain File\n(define (domain camouflage_equipment)\n  (:requirements :strips :typing)\n  (:types\n    equipment leaves helmet weapon rucksack vehicle webbing surface camouflage_net\n  )\n\n  (:predicates\n    (organized ?e - equipment)\n    (laid_in_pattern ?e - equipment)\n    (location ?l - (either elsewhere on_ground in_vehicle on_heavy_weaponry on_ground_vehicles))\n    (hidden ?x - (either visible invisible))\n    (carefully_disguised ?w - weapon)\n    (on_surface ?e - (either absent on_surface))\n    (decoration ?e - (either bare camouflaged))\n    (netted ?v - vehicle)\n  )\n\n  (:action lay_out_equipment\n    :parameters (?e - equipment ?s - surface)\n    :precondition (and)\n    :effect (and (organized ?e) (laid_in_pattern ?e) (on_surface ?e))\n  )\n\n  (:action camouflage_rucksack\n    :parameters (?r - rucksack)\n    :precondition (and (hidden ?r))\n    :effect (and (not (hidden ?r)) (decoration ?r))\n  )\n\n  (:action camouflage_helmet\n    :parameters (?h - helmet)\n    :precondition (and (hidden ?h))\n    :effect (and (not (hidden ?h)) (decoration ?h))\n  )\n\n  (:action camouflage_webbing\n    :parameters (?w - webbing)\n    :precondition (and (hidden ?w))\n    :effect (and (not (hidden ?w)))\n  )\n\n  (:action camouflage_weapon\n    :parameters (?w - weapon)\n    :precondition (and)\n    :effect (and (carefully_disguised ?w) (decoration ?w))\n  )\n\n  (:action camouflage_vehicle\n    :parameters (?v - vehicle ?cn - camouflage_net)\n    :precondition (and (not (netted ?v)))\n    :effect (and (netted ?v))\n  )\n)\n\n; PDDL Problem File\n(define (problem camouflage_task)\n  (:domain camouflage_equipment)\n  (:objects\n    my_equipment - equipment\n    my_helmet - helmet\n    my_weapon - weapon\n    my_rucksack - rucksack\n    my_vehicle - vehicle\n    my_webbing - webbing\n    my_surface - surface\n    my_camouflage_net - camouflage_net\n    heavy_weaponry - on_heavy_weaponry\n    ground_vehicles - on_ground_vehicles\n    elsewhere - elsewhere\n    on_ground - on_ground\n  )\n\n  (:init\n    (location elsewhere)\n    (hidden visible)\n    (not (carefully_disguised my_weapon))\n    (not (decoration my_weapon))\n    (not (organized my_equipment))\n    (not (laid_in_pattern my_equipment))\n    (not (on_surface my_equipment))\n  )\n\n  (:goal\n    (and\n      (organized my_equipment)\n      (laid_in_pattern my_equipment)\n      (carefully_disguised my_weapon)\n      (decoration my_weapon)\n      (netted my_vehicle)\n    )\n  )\n)\n```",
    "```lisp\n(define (domain yamaha-virago-oil-change)\n  (:requirements :strips :typing)\n  (:types \n    oil bung oil_filter old_oil oil_cap funnel)\n\n  (:predicates \n    (in ?entity ?location)\n    (attached ?entity)\n    (empty ?entity)\n    (dirty ?entity)\n    (clean ?entity)\n    (open ?entity)\n    (full ?entity))\n\n  (:action remove-bung\n    :parameters (?oil - oil ?bung - bung)\n    :precondition (and (in ?oil bike) (attached ?bung) (full ?bung))\n    :effect (and (not (in ?oil bike)) (in ?oil can) (not (attached ?bung)) (empty ?bung)))\n\n  (:action remove-oil-cap\n    :parameters (?oil_cap - oil_cap)\n    :precondition (and (on ?oil_cap oil_tank) (closed ?oil_cap))\n    :effect (and (not (on ?oil_cap oil_tank)) (open ?oil_cap)))\n\n  (:action remove-oil-filter\n    :parameters (?oil_filter - oil_filter)\n    :precondition (and (in ?oil_filter oil_tank))\n    :effect (and (not (in ?oil_filter oil_tank)) (out ?oil_filter)))\n\n  (:action screw-bung\n    :parameters (?bung - bung)\n    :precondition (and (away-from-bike ?bung) (loose ?bung))\n    :effect (and (on ?bung bike) (attached ?bung)))\n\n  (:action fill-oil\n    :parameters (?oil - oil)\n    :precondition (and (empty ?oil) (in ?oil bottle))\n    :effect (and (full ?oil) (in ?oil tank)))\n\n  (:action recycle-old-oil\n    :parameters (?old_oil - old_oil ?funnel - funnel)\n    :precondition (and (in ?old_oil can) (clean ?funnel))\n    :effect (and (in ?old_oil jug) (dirty ?funnel)))\n)\n```\n\n```lisp\n(define (problem yamaha-virago-oil-change-problem)\n  (:domain yamaha-virago-oil-change)\n  (:objects \n    oil1 - oil\n    bung1 - bung\n    oil_filter1 - oil_filter\n    old_oil1 - old_oil\n    oil_cap1 - oil_cap\n    funnel1 - funnel)\n\n  (:init \n    (in oil1 bike)\n    (attached bung1)\n    (full bung1)\n    (on oil_cap1 oil_tank)\n    (closed oil_cap1)\n    (in oil_filter1 oil_tank)\n    (empty oil1)\n    (clean funnel1)\n    (in old_oil1 can))\n\n  (:goal \n    (and \n      (in old_oil1 jug)\n      (dirty funnel1)\n      (in oil1 tank)\n      (attached bung1)\n      (open oil_cap1)\n      (out oil_filter1)\n    ))\n)\n```",
    "```pddl\n(define (domain duct_tape_necklace)\n  (:requirements :strips :typing)\n  (:types \n    tape \n    table \n    ends\n  )\n  (:predicates \n    (rolled ?t - tape)\n    (in_pieces ?t - tape)\n    (on_roll ?t - tape)\n    (measured ?t - table)\n    (elongated ?t - tape)\n    (folded ?t - tape)\n    (sticky ?t - tape)\n    (smooth ?t - tape)\n    (separate_pieces ?t - tape)\n    (one_piece ?t - tape)\n    (separate_ends ?e - ends)\n    (touching_ends ?e - ends)\n    (bare_ends ?e - ends)\n    (joined_ends ?e - ends)\n  )\n  (:action unroll_tape\n    :parameters (?t - tape)\n    :precondition (and (rolled ?t) (on_roll ?t))\n    :effect (and (in_pieces ?t) (not (rolled ?t)))\n  )\n  (:action measure_and_cut_tape\n    :parameters (?t - tape ?tb - table)\n    :precondition (and (in_pieces ?t) (elongated ?t) (not (measured ?tb)))\n    :effect (and (measured ?tb) (in_pieces ?t))\n  )\n  (:action fold_tape\n    :parameters (?t - tape)\n    :precondition (and (in_pieces ?t) (elongated ?t))\n    :effect (and (folded ?t) (not (elongated ?t)))\n  )\n  (:action smooth_tape\n    :parameters (?t - tape)\n    :precondition (and (folded ?t) (sticky ?t))\n    :effect (and (smooth ?t) (not (sticky ?t)))\n  )\n  (:action tape_ends_together\n    :parameters (?t - tape ?e - ends)\n    :precondition (and (smooth ?t) (separate_pieces ?t) (separate_ends ?e))\n    :effect (and (one_piece ?t) (joined_ends ?e) (not (separate_ends ?e)) (not (separate_pieces ?t)))\n  )\n)\n```\n\n```pddl\n(define (problem make_duct_tape_necklace)\n  (:domain duct_tape_necklace)\n  (:objects\n    tape1 - tape\n    table1 - table\n    ends1 - ends\n  )\n  (:init\n    (rolled tape1)\n    (on_roll tape1)\n    (elongated tape1)\n    (sticky tape1)\n    (separate_pieces tape1)\n    (separate_ends ends1)\n    (not (measured table1))\n    (not (folded tape1))\n    (not (in_pieces tape1))\n    (not (smooth tape1))\n    (not (one_piece tape1))\n    (not (touching_ends ends1))\n    (not (joined_ends ends1))\n  )\n  (:goal\n    (and \n      (one_piece tape1)\n      (joined_ends ends1)\n    )\n  )\n)\n```",
    "```pddl\n; PDDL Domain File\n(define (domain grow_dwarf_balsam_fir)\n  (:requirements :strips :typing)\n  (:types entity attribute)\n  \n  (:predicates\n    (location ?entity ?attribute)\n    (cost ?entity ?attribute)\n    (weight ?entity ?attribute)\n    (cleanness ?entity ?attribute)\n    (container ?entity ?attribute)\n    (contentment ?entity ?attribute)\n    (volume ?entity ?attribute)\n    (watered ?entity ?attribute)\n    (contents ?entity ?attribute)\n    (value ?entity ?attribute)\n    (amount ?entity ?attribute)\n    (knob ?entity ?attribute)\n  )\n\n  (:action choose_plant\n    :parameters (?fir ?location ?cost)\n    :precondition (and (location ?fir in_garden) (cost ?fir owned_by_garden_center))\n    :effect (and (not (location ?fir in_garden)) (location ?fir in_hand) \n                 (not (cost ?fir owned_by_garden_center)) (cost ?fir purchased_from_garden_center))\n  )\n\n  (:action choose_container\n    :parameters (?container)\n    :precondition ()\n    :effect ()\n  )\n\n  (:action choose_soil\n    :parameters (?soil ?location)\n    :precondition (location ?soil in_bag)\n    :effect (and (not (location ?soil in_bag)) (location ?soil in_container))\n  )\n\n  (:action plant_fir\n    :parameters (?fir ?container ?location ?weight)\n    :precondition (and (location ?fir in_hand) (container ?fir empty) (weight ?fir lighter))\n    :effect (and (not (location ?fir in_hand)) (location ?fir in_container) \n                 (not (container ?fir empty)) (container ?fir full) \n                 (not (weight ?fir lighter)) (weight ?fir heavier))\n  )\n\n  (:action water_fir\n    :parameters (?fir ?water ?location ?watered ?contentment ?wetness)\n    :precondition (and (watered ?fir dry) (contentment ?fir thirsty) (wetness ?fir dry))\n    :effect (and (not (watered ?fir dry)) (watered ?fir wet) \n                 (not (contentment ?fir thirsty)) (contentment ?fir fed) \n                 (not (wetness ?fir dry)) (wetness ?fir watered))\n  )\n\n  (:action re_pot\n    :parameters (?fir ?volume ?location)\n    :precondition (volume ?fir fuller)\n    :effect (and (not (volume ?fir fuller)) (volume ?fir emptier) \n                 (not (location ?fir on_plant)) (location ?fir in_new_containers))\n  )\n)\n```\n\n```pddl\n; PDDL Problem File\n(define (problem grow_dwarf_balsam_fir_problem)\n  (:domain grow_dwarf_balsam_fir)\n\n  (:objects \n    fir entity\n    container entity\n    soil entity\n    water entity\n  )\n\n  (:init\n    (location fir in_garden)\n    (cost fir owned_by_garden_center)\n    (weight fir lighter)\n    (watered fir dry)\n    (contentment fir thirsty)\n    (wetness fir dry)\n    (location container with_dirt)\n    (location soil in_bag)\n  )\n\n  (:goal\n    (and \n      (location fir in_new_containers)\n      (volume fir emptier)\n    )\n  )\n)\n```",
    "```lisp\n; PDDL Domain File\n(define (domain fairy_house_construction)\n  (:requirements :strips :typing)\n  \n  (:types \n    entity \n  )\n  \n  (:predicates \n    (area ?a - entity ?state - entity)\n    (sticks ?s - entity ?organization - entity ?availability - entity ?location - entity ?composition - entity ?tightness - entity)\n    (fairy-house ?f - entity ?composition - entity)\n    (walls ?w - entity ?location - entity)\n  )\n  \n  (:action find-area\n    :parameters (?a - entity)\n    :precondition (area ?a unselected)\n    :effect (and (area ?a selected))\n  )\n  \n  (:action collect-sticks\n    :parameters (?s - entity)\n    :precondition (and (sticks ?s scattered all-over place))\n    :effect (and (sticks ?s bundled collected))\n  )\n  \n  (:action form-sticks\n    :parameters (?s - entity)\n    :precondition (and (sticks ?s bunched-up bundled))\n    :effect (and (sticks ?s in-formation stacked))\n  )\n  \n  (:action build-walls\n    :parameters (?w - entity)\n    :precondition (walls ?w down)\n    :effect (walls ?w up)\n  )\n  \n  (:action use-bark\n    :parameters (?s - entity)\n    :precondition (sticks ?s untied)\n    :effect (sticks ?s tired-with-bark)\n  )\n  \n  (:action decorate-fairy-house\n    :parameters (?f - entity)\n    :precondition (fairy-house ?f bare)\n    :effect (fairy-house ?f decorated)\n  )\n)\n\n; PDDL Problem File\n(define (problem make_fairy_house)\n  (:domain fairy_house_construction)\n  \n  (:objects \n    area1 - entity\n    sticks1 - entity\n    fairy_house1 - entity\n    walls1 - entity\n  )\n  \n  (:init \n    (area area1 unselected)\n    (sticks sticks1 scattered all-over place bunched-up bundled untied)\n    (fairy-house fairy_house1 bare)\n    (walls walls1 down)\n  )\n  \n  (:goal \n    (and\n      (area area1 selected)\n      (sticks sticks1 in-formation stacked tired-with-bark)\n      (walls walls1 up)\n      (fairy-house fairy_house1 decorated)\n    )\n  )\n)\n```",
    "```pddl\n(define (domain whole_wheat_pastry)\n  (:requirements :strips :typing)\n  (:types \n    bowl oil dough pastry edge\n    wax_paper fridge_door pie_dish\n  )\n  (:predicates \n    (in_bowl ?bowl ?dough)\n    (in_fridge ?dough)\n    (on_wax_paper ?dough)\n    (in_pie_dish ?dough)\n    (fridge_closed ?fridge_door)\n    (dough_smooth ?dough)\n    (dough_rigid ?dough)\n    (edge_shaped ?edge)\n    (flour_salt_mixed ?bowl)\n    (oil_in_bowl ?bowl)\n    (wax_paper_covered ?wax_paper)\n    (bowl_clean ?bowl)\n    (bowl_dirty ?bowl)\n  )\n  (:action mix_flour_salt\n    :parameters (?bowl - bowl)\n    :precondition (and (bowl_clean ?bowl))\n    :effect (and (flour_salt_mixed ?bowl) (bowl_dirty ?bowl))\n  )\n  (:action add_oil\n    :parameters (?bowl - bowl ?oil - oil)\n    :precondition (and (flour_salt_mixed ?bowl))\n    :effect (and (oil_in_bowl ?bowl))\n  )\n  (:action place_on_wax_paper\n    :parameters (?dough - dough ?wax_paper - wax_paper)\n    :precondition (and (in_bowl ?dough))\n    :effect (and (on_wax_paper ?dough) (wax_paper_covered ?wax_paper))\n  )\n  (:action remove_from_fridge\n    :parameters (?dough - dough ?fridge_door - fridge_door)\n    :precondition (and (fridge_closed ?fridge_door))\n    :effect (and (not (fridge_closed ?fridge_door)) (in_fridge ?dough))\n  )\n  (:action press_pie_dish\n    :parameters (?dough - dough ?pie_dish - pie_dish)\n    :precondition (and (on_wax_paper ?dough))\n    :effect (and (in_pie_dish ?dough) (not (on_wax_paper ?dough)))\n  )\n  (:action shape_edge\n    :parameters (?edge - edge ?dough - dough)\n    :precondition (and (dough_rigid ?dough))\n    :effect (and (edge_shaped ?edge))\n  )\n)\n```\n\n```pddl\n(define (problem make_whole_wheat_pastry)\n  (:domain whole_wheat_pastry)\n  (:objects \n    mixing_bowl - bowl\n    canola_oil - oil\n    pastry_dough - dough\n    wax_paper_sheet - wax_paper\n    kitchen_fridge_door - fridge_door\n    pie_baking_dish - pie_dish\n    pastry_edge - edge\n  )\n  (:init \n    (bowl_clean mixing_bowl)\n    (in_bowl pastry_dough)\n    (fridge_closed kitchen_fridge_door)\n    (dough_smooth pastry_dough)\n  )\n  (:goal \n    (and \n      (edge_shaped pastry_edge)\n    )\n  )\n)\n```",
    "```lisp\n; PDDL Domain File\n(define (domain grow-fairy-moss)\n  (:requirements :typing)\n  (:types plant container water)\n  \n  (:predicates\n    (for-sale ?p - plant)\n    (purchased ?p - plant)\n    (position ?p - plant ?pos)\n    (size ?p - plant ?sz)\n    (shape ?p - plant ?sh)\n    \n    (loc ?c - container ?loc)\n    (volume ?c - container ?vol)\n    \n    (comp ?w - water ?comp)\n    (wetness ?w - water ?wts)\n    (container-vol ?w - water ?vol)\n    (position ?w - water ?pos)\n  )\n  \n  (:action ask-for-moss\n    :parameters (?p - plant)\n    :precondition (and (for-sale ?p))\n    :effect (and (purchased ?p))\n  )\n\n  (:action find-container\n    :parameters (?c - container)\n    :precondition (and )\n    :effect (and (loc ?c on-countertop))\n  )\n\n  (:action fill-bowl\n    :parameters (?w - water ?c - container)\n    :precondition (and \n                    (loc ?c on-countertop)\n                    (wetness ?w dry))\n    :effect (and \n              (comp ?w filled) \n              (wetness ?w wet)\n              (position ?w inside-bowl))\n  )\n\n  (:action add-fairy-moss\n    :parameters (?p - plant ?w - water)\n    :precondition (and \n                    (purchased ?p)\n                    (wetness ?p dry)\n                    (comp ?w filled))\n    :effect (and \n              (position ?p inside-bowl)\n              (comp ?w now-mixed))\n  )\n\n  (:action place-suitable-position\n    :parameters (?c - container ?w - water)\n    :precondition (and \n                    (loc ?c on-countertop)\n                    (position ?w in-unsuitable-position))\n    :effect (and \n              (loc ?c on-table)\n              (position ?w in-suitable-position))\n  )\n\n  (:action prune\n    :parameters (?p - plant)\n    :precondition (and \n                    (size ?p larger)\n                    (shape ?p mess)\n                   )\n    :effect (and \n              (size ?p smaller)\n              (shape ?p pruned))\n  )\n)\n```\n\n```lisp\n; PDDL Problem File\n(define (problem grow-fairy-moss-problem)\n  (:domain grow-fairy-moss)\n  \n  (:objects\n    fairy-moss - plant\n    bowl-container - container\n    water - water\n  )\n\n  (:init\n    (for-sale fairy-moss)\n    (position fairy-moss outside-of-bowl)\n    (size fairy-moss larger)\n    (shape fairy-moss mess)\n    (wetness fairy-moss dry)\n    \n    (loc bowl-container in-cabinet)\n    (volume bowl-container empty)\n    \n    (comp water just-water)\n    (wetness water dry)\n    (container-vol water empty)\n    (position water outside-bowl)\n  )\n\n  (:goal\n    (and\n      (purchased fairy-moss)\n      (position fairy-moss inside-bowl)\n      (size fairy-moss smaller)\n      (shape fairy-moss pruned)\n      \n      (loc bowl-container on-table)\n      \n      (comp water now-mixed)\n      (position water in-suitable-position)\n    )\n  )\n)\n```",
    "```pddl\n(define (domain make_chocolate_hearts)\n  (:requirements :strips :typing)\n  (:types\n    entity\n  )\n  (:predicates\n    (at-cost ?e - entity ?state)\n    (at-texture ?e - entity ?state)\n    (at-temperature ?e - entity ?state)\n    (at-location ?e - entity ?state)\n    (at-hardness ?e - entity ?state)\n    (at-ease-of-release ?e - entity ?state)\n    (at-container ?e - entity ?state)\n    (at-fullness ?e - entity ?state)\n    (at-cleanness ?e - entity ?state)\n    (at-power ?e - entity ?state)\n    (at-weight ?e - entity ?state)\n  )\n  (:action assemble-ingredients\n    :parameters (?chocolate - entity ?ingredients - entity)\n    :precondition (and\n      (at-cost ?chocolate in-store)\n      (at-location ?ingredients in-cabinet)\n    )\n    :effect (and\n      (at-cost ?chocolate purchased-for-use)\n      (at-location ?ingredients on-countertop)\n    )\n  )\n  (:action melt-chocolate\n    :parameters (?chocolate - entity ?microwave - entity ?spoon - entity)\n    :precondition (and\n      (at-texture ?chocolate solid)\n      (at-temperature ?chocolate colder)\n      (at-location ?chocolate packaged)\n      (at-power ?microwave off)\n      (at-cleanness ?spoon clean)\n    )\n    :effect (and\n      (at-texture ?chocolate liquid)\n      (at-temperature ?chocolate warmer)\n      (at-location ?chocolate out-of-package)\n      (at-power ?microwave on)\n      (at-cleanness ?spoon dirty)\n    )\n  )\n  (:action pour-into-molds\n    :parameters (?chocolate - entity ?mold - entity)\n    :precondition (and\n      (at-texture ?chocolate liquid)\n      (at-fullness ?mold empty)\n    )\n    :effect (and\n      (at-texture ?chocolate in-molds)\n      (at-fullness ?mold full)\n    )\n  )\n  (:action freeze-chocolate\n    :parameters (?chocolate - entity ?mold - entity)\n    :precondition (and\n      (at-texture ?chocolate liquid)\n    )\n    :effect (and\n      (at-texture ?chocolate frozen)\n      (at-hardness ?chocolate solid)\n      (at-temperature ?chocolate colder)\n      (at-ease-of-release ?chocolate easy-to-release-from-molds)\n      (at-fullness ?mold full)\n      (at-weight ?mold heavier)\n    )\n  )\n  (:action release-from-molds\n    :parameters (?chocolate - entity ?mold - entity)\n    :precondition (and\n      (at-texture ?chocolate frozen)\n      (at-ease-of-release ?chocolate easy-to-release-from-molds)\n    )\n    :effect (and\n      (at-texture ?chocolate on-plate)\n      (at-fullness ?mold empty)\n      (at-weight ?mold lighter)\n    )\n  )\n  (:action box-chocolates\n    :parameters (?chocolate - entity)\n    :precondition (and\n      (at-texture ?chocolate on-plate)\n    )\n    :effect (and\n      (at-texture ?chocolate in-box)\n    )\n  )\n)\n```\n\n```pddl\n(define (problem make_chocolate_hearts_problem)\n  (:domain make_chocolate_hearts)\n  (:objects\n    chocolate ingredients mold microwave spoon - entity\n  )\n  (:init\n    (at-cost chocolate in-store)\n    (at-texture chocolate solid)\n    (at-temperature chocolate colder)\n    (at-location chocolate packaged)\n    (at-hardness chocolate liquid)\n    (at-ease-of-release chocolate hard-to-release-from-molds)\n    (at-location ingredients in-cabinet)\n    (at-fullness mold empty)\n    (at-weight mold light)\n    (at-power microwave off)\n    (at-cleanness spoon clean)\n  )\n  (:goal\n    (and\n      (at-texture chocolate in-box)\n    )\n  )\n)\n```",
    "Domain File:\n```lisp\n(define (domain bubble-making)\n  (:requirements :strips :typing)\n  (:types entity)\n  \n  (:predicates\n    (inside ?entity - entity)\n    (outside ?entity - entity)\n    (straight ?bubble_wand - entity)\n    (twisted ?bubble_wand - entity)\n    (original_shape ?bubble_wand - entity)\n    (wand_shape ?bubble_wand - entity)\n    (dry ?bubble_wand - entity)\n    (wet ?bubble_wand - entity)\n    (empty ?mixture - entity)\n    (full ?mixture - entity)\n    (holding_contents ?mixture - entity)\n    (in_bowl ?bubbles - entity)\n    (in_air ?bubbles - entity)\n    (for_hanging ?bubble_wand - entity)\n    (for_blowing_bubbles ?bubble_wand - entity)\n    (smooth ?water_surface - entity)\n    (bubbly ?water_surface - entity)\n    (lighter ?mixture - entity)\n    (heavier ?mixture - entity)\n    (pure ?mixture - entity)\n    (soapy ?mixture - entity)\n    (in_bottle ?mixture - entity)\n    (in_mixing_jar ?mixture - entity)\n  )\n\n  (:action mix_soap_and_water\n    :parameters (?mixture - entity ?water_surface - entity)\n    :precondition (and (empty ?mixture) (in_bottle ?mixture) (pure ?mixture) (lighter ?mixture) (inside ?mixture) (smooth ?water_surface))\n    :effect (and (full ?mixture) (holding_contents ?mixture) (soapy ?mixture) (heavier ?mixture) (in_mixing_jar ?mixture) (bubbly ?water_surface))\n  )\n  \n  (:action enhance_your_bubble_solution\n    :parameters (?bubble_wand - entity)\n    :precondition (and )\n    :effect (and )\n  )\n\n  (:action make_a_little_bubble_wand\n    :parameters (?bubble_wand - entity)\n    :precondition (and (straight ?bubble_wand) (original_shape ?bubble_wand))\n    :effect (and (twisted ?bubble_wand) (wand_shape ?bubble_wand))\n  )\n  \n  (:action make_a_giant_bubble_wand\n    :parameters (?bubble_wand - entity)\n    :precondition (and (twisted ?bubble_wand) (wand_shape ?bubble_wand))\n    :effect (and (for_blowing_bubbles ?bubble_wand))\n  )\n  \n  (:action go_outside\n    :parameters (?person - entity ?bubbles - entity)\n    :precondition (and (inside ?person) (inside ?bubbles))\n    :effect (and (outside ?person) (outside ?bubbles))\n  )\n  \n  (:action make_giant_bubbles\n    :parameters (?bubbles - entity ?bubble_wand - entity)\n    :precondition (and (outside ?bubbles) (outside ?bubble_wand) (dry ?bubble_wand) (in_bowl ?bubbles))\n    :effect (and (wet ?bubble_wand) (in_air ?bubbles))\n  )\n)\n```\n\nProblem File:\n```lisp\n(define (problem bubble-making-problem)\n  (:domain bubble-making)\n  \n  (:objects\n    bubbles - entity\n    bubble_wand - entity\n    mixture - entity\n    person - entity\n    water_surface - entity\n  )\n  \n  (:init\n    (inside person)\n    (inside bubbles)\n    (straight bubble_wand)\n    (original_shape bubble_wand)\n    (dry bubble_wand)\n    (in_bowl bubbles)\n    (empty mixture)\n    (lighter mixture)\n    (in_bottle mixture)\n    (pure mixture)\n    (smooth water_surface)\n  )\n  \n  (:goal (and\n    (in_air bubbles)\n    (wet bubble_wand)\n    (for_blowing_bubbles bubble_wand)\n    (outside person)\n    (outside bubbles)\n  ))\n)\n```",
    "```\n; PDDL Domain File\n\n(define (domain clean_home)\n    (:requirements :typing)\n    \n    (:types \n        item room rug basket surface cleaner)\n    \n    (:predicates\n        (messy ?room)\n        (dusty ?room)\n        (dirty ?rug)\n        (dirty-surface ?surface)\n        (stray-item ?item)\n        (empty ?basket)\n        (full ?basket)\n        (trash-disposed ?basket)\n        (clean ?rug)\n        (clean-surface ?surface)\n        (organized ?item)\n        (clean-room ?room)\n        (dust-free ?room)\n        (basket-filled ?basket)\n        (cleaner-applied ?surface))\n    \n    (:action pickup-items\n        :parameters (?item item ?basket basket)\n        :precondition (and (stray-item ?item) (empty ?basket))\n        :effect (and (organized ?item) (basket-filled ?basket) (trash-disposed ?basket)))\n    \n    (:action dust-room\n        :parameters (?room room)\n        :precondition (dusty ?room)\n        :effect (and (dust-free ?room) (not (dusty ?room))))\n    \n    (:action empty-trash\n        :parameters (?basket basket)\n        :precondition (full ?basket)\n        :effect (and (empty ?basket) (trash-disposed ?basket)))\n    \n    (:action clean-surfaces\n        :parameters (?surface surface)\n        :precondition (dirty-surface ?surface)\n        :effect (and (clean-surface ?surface) (cleaner-applied ?surface)))\n    \n    (:action shake-rugs\n        :parameters (?rug rug)\n        :precondition (dirty ?rug)\n        :effect (clean ?rug))\n    \n    (:action enjoy-clean-home\n        :parameters ()\n        :precondition (and )\n        :effect ())\n\n)\n\n; PDDL Problem File\n\n(define (problem clean_home_problem)\n    (:domain clean_home)\n\n    (:objects\n        living_room room\n        kitchen room\n        rug1 rug\n        rug2 rug\n        basket1 basket\n        basket2 basket\n        item1 item\n        item2 item\n        TV surface\n        window surface\n        cleaner1 cleaner)\n\n    (:init\n        (dusty living_room)\n        (dusty kitchen)\n        (dirty rug1)\n        (dirty rug2)\n        (stray-item item1)\n        (stray-item item2)\n        (empty basket1)\n        (empty basket2)\n        (dirty-surface TV)\n        (dirty-surface window))\n\n    (:goal (and\n        (dust-free living_room)\n        (dust-free kitchen)\n        (clean rug1)\n        (clean rug2)\n        (organized item1)\n        (organized item2)\n        (trash-disposed basket1)\n        (trash-disposed basket2)\n        (clean-surface TV)\n        (clean-surface window)\n    ))\n)\n```",
    "```lisp\n; PDDL Domain File\n(define (domain AnimalJamDen)\n  (:requirements :strips :typing)\n  (:types entity attribute)\n  \n  (:predicates \n    (unacquired ?entity)\n    (acquired ?entity)\n    (in-store ?entity)\n    (in-home ?entity)\n    (unmade ?entity)\n    (created ?entity)\n    (safe ?entity)\n  )\n  \n  (:action acquire-gems\n    :parameters (?entity - entity)\n    :precondition (unacquired ?entity)\n    :effect (and (acquired ?entity) (not (unacquired ?entity)))\n  )\n\n  (:action bring-stuff-home\n    :parameters (?entity - entity)\n    :precondition (in-store ?entity)\n    :effect (and (in-home ?entity) (not (in-store ?entity)))\n  )\n\n  (:action get-screens\n    :parameters (?entity - entity)\n    :precondition (in-store ?entity)\n    :effect (and (in-home ?entity) (not (in-store ?entity)))\n  )\n\n  (:action create-rooms\n    :parameters (?entity - entity)\n    :precondition (unmade ?entity)\n    :effect (and (created ?entity) (not (unmade ?entity)))\n  )\n\n  (:action make-outside-area\n    :parameters (?entity - entity)\n    :precondition (unmade ?entity)\n    :effect (and (created ?entity) (not (unmade ?entity)))\n  )\n\n  (:action keep-family-safe\n    :parameters (?entity - entity)\n    :precondition ()\n    :effect (safe ?entity)\n  )\n)\n\n; PDDL Problem File\n(define (problem MakeDenHome)\n  (:domain AnimalJamDen)\n  (:objects\n    gems screens stuff kids-room outside-area - entity\n  )\n  (:init\n    (unacquired gems)\n    (in-store screens)\n    (in-store stuff)\n    (unmade kids-room)\n    (unmade outside-area)\n  )\n  (:goal \n    (and \n      (acquired gems)\n      (in-home screens)\n      (in-home stuff)\n      (created kids-room)\n      (created outside-area)\n      (safe kids-room) ; Assuming family is in the kids-room\n    )\n  )\n)\n```",
    "```lisp\n(define (domain melon-pina-coladas)\n  (:requirements :strips :typing)\n  (:types entity pitcher refrigerator glass honeydew spoon rum mixture task)\n  \n  (:predicates\n    (empty ?e - entity)\n    (full ?e - entity)\n    (dry ?e - entity)\n    (wet ?e - entity)\n    (clean ?e - entity)\n    (dirty ?e - entity)\n    (lighter ?e - entity)\n    (heavier ?e - entity)\n    (incomplete ?t - task)\n    (finished ?t - task)\n    (mixed ?m - mixture)\n    (chilled ?m - mixture)\n    (garnished ?g - glass)\n    (decorated ?g - glass)\n    (in-pitcher ?m - mixture)\n    (in-refrigerator ?m - mixture)\n    (in-glass ?m - mixture)\n    (cut ?h - honeydew)\n    (chunks ?h - honeydew))\n\n  (:action pour-ingredients\n    :parameters (?p - pitcher ?m - mixture)\n    :precondition (and (empty ?p) (in-pitcher ?m))\n    :effect (and (full ?p) (wet ?p) (dirty ?p) (heavier ?p) (mixed ?m)))\n    \n  (:action mix-thoroughly\n    :parameters (?s - spoon ?m - mixture)\n    :precondition (and (clean ?s) (dry ?s) (in-pitcher ?m) (mixed ?m))\n    :effect (and (dirty ?s) (wet ?s) (mixed ?m)))\n\n  (:action chill\n    :parameters (?m - mixture ?r - refrigerator)\n    :precondition (and (in-pitcher ?m) (mixed ?m))\n    :effect (and (in-refrigerator ?m) (chilled ?m)))\n  \n  (:action pour-to-glass\n    :parameters (?p - pitcher ?g - glass ?m - mixture)\n    :precondition (and (full ?p) (in-pitcher ?m) (chilled ?m))\n    :effect (and (empty ?p) (in-glass ?m) (wet ?g) (dirty ?g) (heavier ?g)))\n  \n  (:action add-garnish\n    :parameters (?h - honeydew ?g - glass)\n    :precondition (cut ?h)\n    :effect (and (garnished ?g) (decorated ?g)))\n  \n  (:action complete-task \n    :parameters (?t - task)\n    :precondition (incomplete ?t)\n    :effect (finished ?t))\n)\n\n(define (problem make-melon-pina-coladas)\n  (:domain melon-pina-coladas)\n  \n  (:objects \n    pitcher1 - pitcher\n    refrigerator1 - refrigerator\n    glass1 glass2 - glass\n    honeydew1 - honeydew\n    spoon1 - spoon\n    rum1 - rum\n    mixture1 - mixture\n    task1 - task\n  )\n  \n  (:init\n    (empty pitcher1) (dry pitcher1) (clean pitcher1) (lighter pitcher1)\n    (clean glass1) (dry glass1) (lighter glass1)\n    (clean glass2) (dry glass2) (lighter glass2)\n    (clean spoon1) (dry spoon1)\n    (incomplete task1)\n    (cut honeydew1) (chunks honeydew1)\n    (in-pitcher mixture1)\n  )\n  \n  (:goal\n    (finished task1)\n  )\n)\n```",
    "```\n;; PDDL Domain File\n(define (domain pineapple-sherbet)\n  (:requirements :strips :typing)\n  (:types\n      ingredient container appliance location\n  )\n  \n  (:predicates\n      (in-container ?ingredient ?container)\n      (location ?container ?location)\n      (state ?appliance ?state)\n      (size ?ingredient ?size)\n      (shape ?ingredient ?shape)\n      (temperature ?ingredient ?temperature)\n  )\n  \n  (:action blend-pineapple\n    :parameters (?ingredient - ingredient ?appliance - appliance)\n    :precondition (and (shape ?ingredient intact) (state ?appliance off))\n    :effect (and (shape ?ingredient blended) (state ?appliance on))\n  )\n\n  (:action pour-ingredients\n    :parameters (?milk - ingredient ?oil - ingredient ?sugar - ingredient ?extract - ingredient ?blender - container)\n    :precondition (and (in-container ?milk container) (in-container ?oil container) (in-container ?sugar container) (in-container ?extract container))\n    :effect (and (in-container ?milk ?blender) (in-container ?oil ?blender) (in-container ?sugar ?blender) (in-container ?extract ?blender))\n  )\n  \n  (:action blend-all\n    :parameters (?blender - appliance)\n    :precondition (state ?blender off)\n    :effect (state ?blender on)\n  )\n  \n  (:action pour-between-containers\n    :parameters (?blender - container ?dish - container)\n    :precondition (location ?blender in-place)\n    :effect (and (not (location ?blender in-place)) (location ?dish in-place))\n  )\n\n  (:action freeze\n    :parameters (?dish - container ?freezer - location)\n    :precondition (location ?dish in-place)\n    :effect (and (not (location ?dish in-place)) (location ?dish ?freezer))\n  )\n  \n  (:action serve\n   :parameters (?dish - container ?plate - container)\n   :precondition (location ?dish inside-freezer)\n   :effect (and (not (location ?dish inside-freezer)) (location ?dish in-plate))\n  )\n)\n```\n```\n;; PDDL Problem File\n(define (problem make-pineapple-sherbet)\n  (:domain pineapple-sherbet)\n  \n  (:objects\n      pineapple sugar milk extract - ingredient\n      blender freezer dish plate - container\n      kitchen - location\n  )\n  \n  (:init\n      (in-container pineapple kitchen)\n      (in-container sugar kitchen)\n      (in-container milk kitchen)\n      (in-container extract kitchen)\n      \n      (location blender kitchen)\n      (location dish kitchen)\n      (location plate kitchen)\n      (location freezer kitchen)\n      \n      (shape pineapple whole)\n      (temperature pineapple room-temperature)\n      \n      (state blender off)\n  )\n  \n  (:goal\n      (and\n          (location dish plate)\n      )\n  )\n)\n```",
    "```pddl\n; PDDL Domain File\n(define (domain pancake_maker)\n  (:types entity attribute)\n  \n  (:predicates \n    (clean ?entity)\n    (dirty ?entity)\n    (wet ?entity)\n    (dry ?entity)\n    (empty ?entity)\n    (full ?entity)\n    (heavy ?entity)\n    (light ?entity)\n    (closed ?entity)\n    (open ?entity)\n    (cold ?entity)\n    (warm ?entity)\n    (in_refrigerator ?entity)\n    (on_counter ?entity)\n    (holding_batter ?entity ?container)\n    (location ?entity ?location)\n    (power_on ?entity)\n    (power_off ?entity)\n    (written_on ?entity))\n\n  (:action scrub_bottle\n    :parameters (?bottle ?scrubber)\n    :precondition (and (dirty ?bottle) (dry ?scrubber))\n    :effect (and (clean ?bottle) (dirty ?scrubber) (wet ?scrubber))\n  )\n\n  (:action place_funnel\n    :parameters (?funnel ?bottle)\n    :precondition (clean ?funnel)\n    :effect (and (location ?funnel ?bottle))\n  )\n\n  (:action pour_batter\n    :parameters (?batter ?bottle ?funnel)\n    :precondition (and (full ?batter) (location ?funnel ?bottle))\n    :effect (and (empty ?batter) (full ?bottle) (heavy ?bottle) (wet ?funnel))\n  )\n\n  (:action replace_lid_and_label\n    :parameters (?bottle ?lid ?pen)\n    :precondition (and (open ?lid) (full ?bottle) (location ?pen ?pen))\n    :effect (and (closed ?lid) (written_on ?bottle))\n  )\n\n  (:action place_in_fridge\n    :parameters (?bottle ?fridge)\n    :precondition (and (closed ?bottle) (on_counter ?bottle))\n    :effect (and (in_refrigerator ?bottle) (cold ?bottle))\n  )\n)\n\n; PDDL Problem File\n(define (problem pancake_maker_problem)\n  (:domain pancake_maker)\n  (:objects\n    batter bottle funnel scrubber pen fridge faucet - entity\n  )\n\n  (:init\n    (dirty bottle)\n    (dry scrubber)\n    (full batter)\n    (empty fridge)\n    (warm batter)\n    (on_counter bottle)\n    (power_off faucet)\n  )\n\n  (:goal\n    (in_refrigerator bottle)\n  )\n)\n```",
    "```lisp\n(define (domain PaintRemoval)\n  (:requirements :strips :typing)\n  (:types \n    window glass_cleaner_bottle razor_blade_package solvent_container soap_bottle paint razor_blade solvent splatters sponge bucket items_needed)\n\n  (:predicates\n    (wet ?item)\n    (dry ?item)\n    (hot ?item)\n    (cool ?item)\n    (clean ?item)\n    (dirty ?item)\n    (transparent ?item)\n    (opaque ?item)\n    (lighter ?item)\n    (heavier ?item)\n    (more_full ?item)\n    (less_full ?item)\n    (closed ?item)\n    (open ?item)\n    (stuck ?item)\n    (peeling ?item)\n    (erase_paint ?item)\n    (on_window ?item)\n    (in_hand ?item)\n    (scraped ?item)\n    (ready ?item))\n\n  (:action wet_window\n    :parameters (?window - window ?sponge - sponge)\n    :precondition (and (dry ?window) (wet ?sponge) (cool ?window))\n    :effect (and (wet ?window) (hot ?window)))\n\n  (:action position_razor_blade\n    :parameters (?blade_package - razor_blade_package ?razor - razor_blade)\n    :precondition (and (in_hand ?razor) (closed ?blade_package))\n    :effect (and (open ?blade_package) (scraped ?razor)))\n\n  (:action scrape_paint\n    :parameters (?paint - paint ?razor - razor_blade)\n    :precondition (and (wet ?paint) (in_hand ?razor) (on_window ?paint) (stuck ?paint))\n    :effect (and (peeling ?paint) (erase_paint ?paint) (dirty ?razor)))\n\n  (:action clean_window\n    :parameters (?window - window ?glass_cleaner - solvent ?sponge - sponge)\n    :precondition (and (wet ?window) (dirty ?sponge) (opaque ?window))\n    :effect (and (transparent ?window) (clean ?sponge) (lighter ?glass_cleaner)))\n\n  (:action remove_splatter\n    :parameters (?splatters - splatters ?solvent - solvent)\n    :precondition (and (on_window ?splatters))\n    :effect (and (scraped ?splatters) (lighter ?solvent)))\n)\n\n(define (problem PaintRemovalTask)\n  (:domain PaintRemoval)\n\n  (:objects\n    window01 - window\n    glass_cleaner01 - glass_cleaner_bottle\n    razor_blade_package01 - razor_blade_package\n    solvent_container01 - solvent_container\n    soap_bottle01 - soap_bottle\n    paint01 - paint\n    razor01 - razor_blade\n    solvent01 - solvent\n    splatters01 - splatters\n    sponge01 - sponge\n    bucket01 - bucket\n    items_needed01 - items_needed)\n\n  (:init\n    (dry window01)\n    (cool window01)\n    (closed razor_blade_package01)\n    (in_hand razor01)\n    (stuck paint01)\n    (on_window paint01)\n    (opaque window01)\n    (on_window splatters01)\n    (more_full glass_cleaner01)\n    (more_full solvent_container01))\n\n  (:goal \n    (and \n      (transparent window01)\n      (clean sponge01)\n      (scraped splatters01)\n      (less_full glass_cleaner01)\n      (less_full solvent_container01))))\n```\n",
    "```lisp\n; PDDL Domain File\n\n(define (domain team_fortress_mic_usage)\n  (:requirements :strips :typing)\n  (:types entity attribute)\n\n  (:predicates\n    (connected ?entity - entity)\n    (plugged-in ?entity - entity)\n    (functional ?entity - entity)\n    (tested ?entity - entity)\n    (visible ?entity - entity)\n    (open ?entity - entity)\n    (selected ?entity - entity)\n    (heard ?entity - entity)\n    (talking ?entity - entity)\n    (efficient ?entity - entity)\n    (possible ?entity - entity)\n    (supported ?entity - entity)\n  )\n\n  (:action step1_make_microphone_working\n    :parameters (?microphone - entity)\n    :precondition (and (not (connected ?microphone)) (not (plugged-in ?microphone)) (not (functional ?microphone)) (not (tested ?microphone)))\n    :effect (and (connected ?microphone) (plugged-in ?microphone) (functional ?microphone) (tested ?microphone))\n  )\n\n  (:action step2_adjust_panel_visibility\n    :parameters (?panel - entity)\n    :precondition (and (not (visible ?panel)) (not (open ?panel)))\n    :effect (and (visible ?panel) (open ?panel))\n  )\n\n  (:action step3_select_voice_panel\n    :parameters (?panel - entity)\n    :precondition (and (visible ?panel) (not (selected ?panel)))\n    :effect (selected ?panel)\n  )\n\n  (:action step4_talk_using_microphone\n    :parameters (?microphone - entity ?voice - entity)\n    :precondition (and (connected ?microphone) (functional ?microphone) (not (heard ?voice)))\n    :effect (heard ?voice)\n  )\n\n  (:action step5_use_microphone_efficiently\n    :parameters (?voice - entity)\n    :precondition (and (heard ?voice) (not (efficient ?voice)))\n    :effect (efficient ?voice)\n  )\n\n  (:action step6_advise_teammates\n    :parameters (?advice - entity)\n    :precondition (not (possible ?advice))\n    :effect (possible ?advice)\n  )\n)\n\n; PDDL Problem File\n\n(define (problem use_mic_in_team_fortress)\n  (:domain team_fortress_mic_usage)\n\n  (:objects\n    mic - entity\n    panel - entity\n    voice - entity\n    advice - entity\n  )\n\n  (:init\n    (not (connected mic))\n    (not (plugged-in mic))\n    (not (functional mic))\n    (not (tested mic))\n    (not (visible panel))\n    (not (open panel))\n    (not (selected panel))\n    (not (heard voice))\n    (not (efficient voice))\n    (not (possible advice))\n  )\n\n  (:goal\n    (and\n      (connected mic)\n      (plugged-in mic)\n      (functional mic)\n      (tested mic)\n      (visible panel)\n      (open panel)\n      (selected panel)\n      (heard voice)\n      (efficient voice)\n      (possible advice)\n    )\n  )\n)\n```",
    "```pddl\n(define (domain ChineseMacaroni)\n\n  (:requirements :strips :typing)\n\n  (:types\n    entity\n  )\n\n  (:predicates\n    (location ?e - entity ?loc - entity)\n    (cooking ?e - entity ?c - entity)\n    (taste ?e - entity ?t - entity)\n    (temperature ?e - entity ?temp - entity)\n    (mixture ?e - entity ?mix - entity)\n    (cleanness ?e - entity ?clean - entity)\n    (fullness ?e - entity ?full - entity)\n    (power ?e - entity ?pow - entity)\n    (completion ?e - entity ?comp - entity)\n    (time ?e - entity ?t - entity)\n  )\n\n  (:action boil-macaroni\n    :parameters (?m - entity ?p - entity ?o - entity)\n    :precondition (and\n      (location ?m in_bag)\n      (location ?o in_pantry)\n      (power ?p off)\n    )\n    :effect (and\n      (location ?m in_boiling_water)\n      (cooking ?m cooked)\n      (taste ?m salted)\n      (location ?o in_boiling_water)\n      (power ?p on)\n    )\n  )\n\n  (:action cool-macaroni\n    :parameters (?m - entity ?s - entity)\n    :precondition (and\n      (cooking ?m hot)\n      (location ?s on_counter_top)\n    )\n    :effect (and\n      (cooking ?m cool)\n      (location ?s under_faucet)\n      (taste ?m firmer)\n    )\n  )\n\n  (:action toss-macaroni\n    :parameters (?m - entity ?p - entity ?o - entity)\n    :precondition (and\n      (location ?m in_strainer)\n      (temperature ?o cold)\n      (location ?o in_bottle)\n    )\n    :effect (and\n      (location ?m in_pan)\n      (temperature ?o hot)\n      (taste ?m more_oily)\n      (location ?o in_pan)\n    )\n  )\n\n  (:action mix-ingredients\n    :parameters (?m - entity ?r - entity)\n    :precondition (and\n      (taste ?m normal_smelling)\n      (location ?r in_bottle)\n    )\n    :effect (and\n      (taste ?m spicy_smelling)\n      (location ?r on_macaroni)\n      (mixture ?m mixed_in_pan)\n    )\n  )\n\n  (:action cook-macaroni\n    :parameters (?m - entity)\n    :precondition (and\n      (cooking ?m less_cooked)\n    )\n    :effect (and\n      (cooking ?m more_cooked)\n      (temperature ?m hotter)\n    )\n  )\n\n  (:action serve\n    :parameters (?m - entity ?d - entity)\n    :precondition (and\n      (location ?m in_pan)\n      (location ?d in_cabinet)\n    )\n    :effect (and\n      (location ?m on_plate)\n      (location ?d on_table)\n      (completion ?m ready)\n    )\n  )\n)\n\n```\n\n```pddl\n(define (problem make-chinese-macaroni)\n  (:domain ChineseMacaroni)\n\n  (:objects\n    macaroni boiling_pot oil stove_burner sink plate red_chilli_powder drinking_glass ingredients - entity\n    in_bag in_boiling_water under_faucet on_counter_top in_strainer in_pan on_plate in_cabinet on_table - entity\n    off on - entity\n    raw cooked hot cool less_cooked more_cooked - entity\n    bland salted normal_smelling firmer more_oily spicy_smelling - entity\n    cold hot - entity\n    separate mixed_in_pan - entity\n    clean dirty - entity\n    emptier fuller - entity\n    unfinished finished - entity\n    earlier later - entity\n  )\n\n  (:init\n    (location macaroni in_bag)\n    (location oil in_pantry)\n    (power stove_burner off)\n    (location sink on_counter_top)\n    (location plate in_cabinet)\n    (temperature oil cold)\n    (cooking macaroni raw)\n    (taste macaroni bland)\n  )\n\n  (:goal\n    (and\n      (location macaroni on_plate)\n      (location plate on_table)\n      (completion macaroni ready)\n    )\n  )\n)\n```",
    "```pddl\n; PDDL Domain File\n\n(define (domain BeadRingMaking)\n  (:requirements :strips :typing)\n  \n  (:types\n    bead\n    elastic\n    tail\n    person\n  )\n\n  (:predicates\n    (cut ?e - elastic)\n    (on_strip ?b - bead)\n    (in_order ?b - bead)\n    (curved ?e - elastic)\n    (adorned ?t - tail)\n    (admiring ?p - person)\n  )\n\n  (:action CutElastic\n    :parameters (?e - elastic)\n    :precondition (not (cut ?e))\n    :effect (cut ?e)\n  )\n\n  (:action SlipLargerBeads\n    :parameters (?b - bead)\n    :precondition (and (not (on_strip ?b)) (not (in_order ?b)))\n    :effect (and (on_strip ?b) (in_order ?b))\n  )\n\n  (:action SlipSmallBead\n    :parameters (?b - bead)\n    :precondition (not (on_strip ?b))\n    :effect (on_strip ?b)\n  )\n\n  (:action PatternBeads\n    :parameters (?b - bead)\n    :precondition (not (in_order ?b))\n    :effect (in_order ?b)\n  )\n\n  (:action FinishRing\n    :parameters (?e - elastic ?t - tail)\n    :precondition (and (not (curved ?e)) (not (adorned ?t)))\n    :effect (and (curved ?e) (adorned ?t))\n  )\n\n  (:action AdmireRing\n    :parameters (?p - person)\n    :precondition (not (admiring ?p))\n    :effect (admiring ?p)\n  )\n)\n```\n\n```pddl\n; PDDL Problem File\n\n(define (problem MakeBeadRing)\n  (:domain BeadRingMaking)\n  \n  (:objects\n    bead1 bead2 bead3 - bead\n    elastic1 - elastic\n    tail1 - tail\n    you - person\n  )\n  \n  (:init\n    (not (cut elastic1))\n    (not (on_strip bead1)) (not (on_strip bead2)) (not (on_strip bead3))\n    (not (in_order bead1)) (not (in_order bead2)) (not (in_order bead3))\n    (not (curved elastic1))\n    (not (adorned tail1))\n    (not (admiring you))\n  )\n\n  (:goal\n    (and\n      (cut elastic1)\n      (on_strip bead1) (in_order bead1)\n      (on_strip bead2) (in_order bead2)\n      (on_strip bead3) (in_order bead3)\n      (curved elastic1)\n      (adorned tail1)\n      (admiring you)\n    )\n  )\n)\n```",
    "```lisp\n(define (domain recycle_underpants)\n  (:requirements :strips :typing)\n  (:types entity attribute)\n  \n  (:predicates\n    (newness ?entity ?attribute)\n    (cleanness ?entity ?attribute)\n    (location ?entity ?attribute)\n    (use ?entity ?attribute)\n    (size ?entity ?attribute)\n    (shape ?entity ?attribute)\n    (form ?entity ?attribute)\n    (decoration ?entity ?attribute)\n    (ownership ?entity ?attribute)\n    (content ?entity ?attribute)\n    (look ?entity ?attribute)\n    (covering ?entity ?attribute)\n  )\n  \n  (:action turn_into_cleaning_rags\n    :parameters (?underpants - entity)\n    :precondition (and\n      (newness ?underpants new)\n      (cleanness ?underpants clean)\n      (location ?underpants on_drawer)\n      (use ?underpants used_as_underpants)\n    )\n    :effect (and\n      (newness ?underpants old)\n      (cleanness ?underpants dirty)\n      (location ?underpants on_floor)\n      (use ?underpants used_as_cleaning_rags)\n    )\n  )\n\n  (:action use_as_garden_ties\n    :parameters (?underpants - entity ?plants - entity ?scissors - entity)\n    :precondition (and\n      (newness ?underpants new)\n      (location ?underpants on_drawer)\n      (size ?underpants whole)\n      (use ?underpants used_as_underpants)\n      (location ?scissors on_desk)\n    )\n    :effect (and\n      (newness ?underpants old)\n      (location ?underpants on_table)\n      (size ?underpants cut_onto_mid_thin_strips)\n      (use ?underpants used_as_garden_ties)\n      (location ?scissors on_hand)\n      (form ?plants tied)\n      (decoration ?plants decorated)\n    )\n  )\n\n  (:action turn_into_craft_items\n    :parameters (?underpants - entity ?scissors - entity)\n    :precondition (and\n      (newness ?underpants new)\n      (location ?underpants on_drawer)\n      (size ?underpants whole)\n      (shape ?underpants long_and_straight)\n      (use ?underpants used_as_underpants)\n      (location ?scissors on_desk)\n    )\n    :effect (and\n      (newness ?underpants old)\n      (location ?underpants on_table)\n      (size ?underpants cut_into_thin_strips)\n      (shape ?underpants tied_into_ribbon_around_hair)\n      (use ?underpants turned_into_craft_items)\n      (location ?scissors on_hand)\n    )\n  )\n  \n  (:action use_as_stuffing\n    :parameters (?underpants - entity ?pillow_case - entity)\n    :precondition (and\n      (newness ?underpants new)\n      (location ?underpants on_drawer)\n      (use ?underpants whole)\n      (location ?pillow_case on_drawer)\n    )\n    :effect (and\n      (newness ?underpants old)\n      (location ?underpants stuffed_inside_pillow_case)\n      (use ?underpants cut_up)\n      (location ?pillow_case on_table)\n      (content ?pillow_case filled_with_underwears)\n    )\n  )\n\n  (:action child_wears_to_play_superhero\n    :parameters (?underpants - entity ?pants - entity)\n    :precondition (and\n      (newness ?underpants new)\n      (location ?underpants on_drawer)\n      (use ?underpants used_as_underwear)\n      (look ?pants looking_like_regular_kid)\n      (covering ?pants bare)\n    )\n    :effect (and\n      (newness ?underpants old)\n      (location ?underpants worn_by_child)\n      (use ?underpants worn_on_outside_of_pants)\n      (look ?pants looking_like_superhero)\n      (covering ?pants covered_in_underwear)\n    )\n  )\n\n  (:action donate_underpants\n    :parameters (?underpants - entity ?donation_box - entity)\n    :precondition (and\n      (newness ?underpants new)\n      (location ?underpants in_drawer)\n      (ownership ?underpants owned)\n      (location ?donation_box at_home)\n    )\n    :effect (and\n      (newness ?underpants old)\n      (location ?underpants in_donation_box)\n      (ownership ?underpants donated)\n      (location ?donation_box with_charity)\n    )\n  )\n)\n```\n\n```lisp\n(define (problem recycle-underpants-goal)\n  (:domain recycle_underpants)\n  (:objects\n    underpants - entity\n    plants - entity\n    donation_box - entity\n    pillow_case - entity\n    scissors - entity\n    pants - entity\n    new - attribute\n    old - attribute\n    clean - attribute\n    dirty - attribute\n    on_drawer - attribute\n    on_floor - attribute\n    on_table - attribute\n    used_as_underpants - attribute\n    used_as_cleaning_rags - attribute\n    cut_onto_mid_thin_strips - attribute\n    whole - attribute\n    cut_into_thin_strips - attribute\n    long_and_straight - attribute\n    tied_into_ribbon_around_hair - attribute\n    turned_into_craft_items - attribute\n    stuffed_inside_pillow_case - attribute\n    used_as_garden_ties - attribute\n    used_as_underwear - attribute\n    worn_on_outside_of_pants - attribute\n    looking_like_regular_kid - attribute\n    looking_like_superhero - attribute\n    covered_in_underwear - attribute\n    decorated - attribute\n    tied - attribute\n    cut_up - attribute\n    filled_with_underwears - attribute\n    worn_by_child - attribute\n    at_home - attribute\n    with_charity - attribute\n    in_drawer - attribute\n    in_donation_box - attribute\n    owned - attribute\n    donated - attribute\n    bare - attribute\n    location - attribute\n    size - attribute\n    form - attribute\n    decoration - attribute\n    ownership - attribute\n    covering - attribute\n    look - attribute\n    content - attribute\n  )\n  (:init\n    (newness underpants new)\n    (cleanness underpants clean)\n    (location underpants on_drawer)\n    (use underpants used_as_underpants)\n    (location scissors on_desk)\n    (location plants plain)\n    (form plants untied)\n    (decoration plants plain)\n    (newness underpants new)\n    (location pillow_case on_drawer)\n    (content pillow_case empty)\n    (location donation_box at_home)\n    (ownership underpants owned)\n    (look pants looking_like_regular_kid)\n    (covering pants bare)\n  )\n  (:goal\n    (and\n      (newness underpants old)\n      (location underpants in_donation_box)\n      (ownership underpants donated)\n    )\n  )\n)\n```"
]