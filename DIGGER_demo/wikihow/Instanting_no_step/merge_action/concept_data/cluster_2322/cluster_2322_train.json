{
    "trim": [
        "(:action trim_frizz_and_set_braids\n    :parameters (?b - braid ?h - hot_water ?g - gel)\n    :precondition (and (frizzy ?b) (available ?h) (available ?g))\n    :effect (and (not (frizzy ?b)) (set ?b) (not (available ?h)) (not (available ?g)))\n)\n\n",
        "(:action cover_unruly_hairlines\n    :parameters (?h - hairline ?sc - scarf)\n    :precondition (and (unruly ?h) (available ?sc))\n    :effect (and (covered ?h ?sc) (not (unruly ?h)) (not (available ?sc)))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`trim_frizz_and_set_braids`**:\n   - **Parameters**: The braid (`?b`), hot water (`?h`), and gel (`?g`).\n   - **Preconditions**: The braid is frizzy, and hot water and gel are available.\n   - **Effects**: The braid is no longer frizzy, it is set, and the hot water and gel are consumed.\n\n2. **`redo_braids_around_hairline`**:\n   - **Parameters**: The braid (`?b`) and hairline (`?h`).\n   - **Preconditions**: The braid is messy and located around the hairline.\n   - **Effects**: The braid becomes tidy, and the messy state is removed.\n\n3. **`tame_baby_hairs`**:\n   - **Parameters**: The hairline (`?h`) and edge control cream (`?e`).\n   - **Preconditions**: Baby hairs are visible around the hairline, and edge control cream is available.\n   - **Effects**: Baby hairs are tamed, visibility is removed, and the cream is consumed.\n\n4. **`switch_braid_length_and_style`**:\n   - **Parameters**: The braid (`?b`), style (`?s`), and length (`?l`).\n   - **Preconditions**: The braid has a current style and length.\n   - **Effects**: The braid\u2019s style and length are updated, and the old style and length are no longer applicable.\n\n5. **`cover_unruly_hairlines`**:\n   - **Parameters**: The hairline (`?h`) and scarf (`?sc`).\n   - **Preconditions**: The hairline is unruly, and a scarf is available.\n   - **Effects**: The hairline is covered with the scarf, and the unruly state is removed.\n\n---\n\n### Adjustments:\n- Irrelevant or unclear steps were omitted or reinterpreted to match the task context.\n- The entity states provided were not directly relevant to the task. However, they were used as a conceptual guide for structuring the actions logically.\n- The descriptions were translated into precise preconditions and effects to ensure that each PDDL action adheres to the task's intent.\n\n",
        "(:action hang-garment\n    :parameters (?g - garment ?s1 - strand ?s2 - strand ?s3 - strand)\n    :precondition (and\n                    (stretched ?l)\n                    (braided ?s1 ?s2 ?s3)\n                    (garment ?g)\n                    (not (hanging ?g))\n                  )\n    :effect (hanging ?g)\n)\n```\n\n---\n\n### Explanation of Actions:\n1. **Find-surgical-tubing**: Represents the action of finding the surgical tubing needed to create the clothesline.\n2. **Loop-rubber-bands**: If rubber bands are used, this action handles looping them together to form a continuous strand.\n3. **Measure-and-cut-strands**: Divides the surgical tubing into three equal strands for braiding.\n4. **String-hook**: Strings a hook along one of the strands to prepare for braiding.\n5. **Braid-strands**: Braids the three strands into a single cohesive line using a common overlap pattern.\n6. **Add-second-hook**: Adds a second hook to one of the strands at the other end of the braided line.\n7. **Stretch-clothesline**: Loops the ends of the braided clothesline around fixtures and stretches it for use.\n8. **Hang-garment**: Allows the user to hang a garment by pulling one strand away and placing a corner of the garment through the gap.\n\nThis sequence of actions captures the steps and logic described for making and using a clothesline without hangers or clothespins.",
        "(:action wrap_braids_around_head\n    :parameters (?p - player ?braid1 - braid ?braid2 - braid)\n    :precondition (and (inventory ?p ?braid1) (inventory ?p ?braid2) (braided ?braid1) (braided ?braid2))\n    :effect (and (wrapped_around_head ?braid1) (wrapped_around_head ?braid2) (milkmaid_braids ?p))\n)\n```\n**Description:** This action wraps two regular braids around the head to create milkmaid braids.\n\n---\n\n#### Action 2: Create_Box_Braids\n```lisp\n"
    ],
    "tame": [
        "(:action tame_baby_hairs\n    :parameters (?h - hairline ?e - edge_control_cream)\n    :precondition (and (baby_hairs_visible ?h) (available ?e))\n    :effect (and (baby_hairs_tamed ?h) (not (baby_hairs_visible ?h)) (not (available ?e)))\n)\n\n"
    ],
    "create": [
        "(:action switch_braid_length_and_style\n    :parameters (?b - braid ?s - style ?l - length)\n    :precondition (and (braid ?b) (current_style ?b ?s) (current_length ?b ?l))\n    :effect (and (updated_style ?b ?s) (updated_length ?b ?l) (not (current_style ?b ?s)) (not (current_length ?b ?l)))\n)\n\n",
        "(:action create-braided-headband\n    :parameters (?h - hair ?p - person)\n    :precondition (and\n                    (knows-waterfall-braid ?p)\n                    (hair-waterfall-braided ?h)\n                  )\n    :effect (and\n              (hair-headband-braided ?h)\n              (knows-braided-headband ?p)\n            )\n)\n```\n\n**Explanation:**\n- This action involves creating a braided headband style.\n- Preconditions: The person knows how to do a waterfall braid, and the hair is already in a waterfall braid style.\n- Effects: The hair is styled into a braided headband, and the person gains knowledge of this technique.\n\n---\n\n#### Action 4: Make a Braided Braid\n```lisp\n",
        "(:action create_box_braids\n    :parameters (?p - player ?hair - hair)\n    :precondition (and (natural_hair ?hair) (inventory ?p ?hair))\n    :effect (and (box_braids ?hair) (braided ?hair))\n)\n```\n**Description:** This action creates box braids by dividing natural hair into multiple mini braids.\n\n---\n\n#### Action 3: Create_Cornrows\n```lisp\n",
        "(:action create_cornrows\n    :parameters (?p - player ?hair - hair)\n    :precondition (and (natural_hair ?hair) (inventory ?p ?hair))\n    :effect (and (cornrows ?hair) (braided ?hair))\n)\n```\n**Description:** This action divides the hair into multiple mini Dutch braids to create cornrows.\n\n---\n\n#### Action 4: Create_Braided_Crown\n```lisp\n",
        "(:action create_braided_crown\n    :parameters (?p - player ?braid1 - braid ?braid2 - braid)\n    :precondition (and (inventory ?p ?braid1) (inventory ?p ?braid2) (dutch_braid ?braid1) (dutch_braid ?braid2))\n    :effect (and (wrapped_around_head ?braid1) (wrapped_around_head ?braid2) (braided_crown ?p))\n)\n```\n**Description:** This action wraps a pair of Dutch braids around the head to create a braided crown.\n\n---\n\n#### Action 5: Create_Upside_Down_Braid\n```lisp\n",
        "(:action create_upside_down_braid\n    :parameters (?p - player ?hair - hair)\n    :precondition (and (natural_hair ?hair) (inventory ?p ?hair))\n    :effect (and (upside_down_braid ?hair) (braided ?hair))\n)\n```\n**Description:** This action creates an upside-down braid for a unique twist.\n\n---\n\n### Notes on Entity State:\n- The helmet states provided in the entity state description (e.g., decoration and visibility) are not directly relevant to the task of braiding hair. Therefore, they are not included in the PDDL actions.\n- If additional attributes like `braided`, `wrapped_around_head`, or `natural_hair` are not defined in the domain, they should be added to represent the states and transitions described in the task.\n\nLet me know if further clarification or adjustments are needed!",
        "(:action make-braided-braid\n    :parameters (?h - hair ?p - person)\n    :precondition (and\n                    (knows-braided-headband ?p)\n                    (hair-headband-braided ?h)\n                  )\n    :effect (and\n              (hair-braided-braid ?h)\n              (knows-braided-braid ?p)\n            )\n)\n```\n\n**Explanation:**\n- This action involves making a \"braided braid,\" where smaller braids are combined into a larger braid.\n- Preconditions: The person knows how to create a braided headband, and the hair is already styled as a braided headband.\n- Effects: The hair is styled into a braided braid, and the person learns this technique.\n\n---\n\n#### Action 5: Try Rope Braid\n```lisp\n",
        "(:action make_topsy_turvy_ponytail\n    :parameters (?hair - hair ?ponytail - ponytail)\n    :precondition (and (orientation ?ponytail open) (state ?hair untied))\n    :effect (and (orientation ?ponytail closed) (state ?hair tied))\n)\n\n",
        "(:action make_fishtail_braid\n    :parameters (?hair - hair ?braid - fishtail_braid)\n    :precondition (and (state ?hair tied) (shape ?braid straight))\n    :effect (and (shape ?braid twisted_and_folded) (state ?hair braided))\n)\n\n"
    ],
    "learn": [
        "(:action learn-dutch-braid\n    :parameters (?h - hair ?p - person)\n    :precondition (and\n                    (not (knows-dutch-braid ?p))\n                    (hair-straight ?h)\n                  )\n    :effect (and\n              (knows-dutch-braid ?p)\n              (not (hair-straight ?h))\n              (hair-sectioned ?h)\n            )\n)\n```\n\n**Explanation:**\n- This action represents the process of learning how to Dutch braid hair.\n- Preconditions: The person (`?p`) does not know how to Dutch braid, and the hair (`?h`) is straight.\n- Effects: The person learns the Dutch braid technique, and the hair is sectioned as part of the preparation.\n\n---\n\n#### Action 2: Try Waterfall Braid\n```lisp\n"
    ],
    "try": [
        "(:action try-rope-braid\n    :parameters (?h - hair ?p - person)\n    :precondition (and\n                    (knows-braided-braid ?p)\n                    (hair-braided-braid ?h)\n                  )\n    :effect (and\n              (hair-rope-braided ?h)\n              (knows-rope-braid ?p)\n            )\n)\n```\n\n**Explanation:**\n- This action involves trying a rope braid style.\n- Preconditions: The person knows how to make a braided braid, and the hair is already styled as a braided braid.\n- Effects: The hair is styled into a rope braid, and the person gains knowledge of this technique.\n\n---\n\n### Adjustments and Relevance:\n1. Steps like \"Learn how to Dutch braid\" and \"Try a waterfall braid\" were directly relevant and translated into corresponding PDDL actions.\n2. Irrelevant or unclear steps were reinterpreted to focus on hair braiding techniques, such as creating a braided headband, braided braid, and rope braid.\n3. Entity states were used to define the logical progression of hair styles and the knowledge gained by the person performing the braiding.\n\nThis set of PDDL actions captures the process of learning and performing different hair braiding techniques in a structured and logical manner."
    ],
    "cross": [
        "(:action swirl_cornrows\n    :parameters (?c - cornrow ?b - bead ?e - elastic)\n    :precondition (and \n        (location ?b in_container)\n        (shape ?c loose)\n        (composition ?b random)\n    )\n    :effect (and \n        (location ?b on_strip_of_elastic)\n        (shape ?c curved)\n        (composition ?b in_order)\n    )\n)\n```\n\n#### Action 3: braid_long_cornrows_into_high_ponytail\n```lisp\n",
        "(:action cross_hairline_section_over_middle\n    :parameters (?s1 - section ?s2 - section)\n    :precondition (and (near_hairline ?s1) (middle ?s2) (not (crossed ?s1 ?s2)))\n    :effect (and (crossed ?s1 ?s2))\n)\n```\n\n#### 7. Add Strand to Side Part Section\n```lisp\n",
        "(:action cross_side_part_section_over_middle\n    :parameters (?s1 - section ?s2 - section)\n    :precondition (and (near_side_part ?s1) (middle ?s2) (not (crossed ?s1 ?s2)))\n    :effect (and (crossed ?s1 ?s2))\n)\n```\n\n#### 9. Continue Braiding\n```lisp\n"
    ],
    "braid": [
        "(:action braid_long_cornrows_into_high_ponytail\n    :parameters (?c - cornrow ?b - bead ?e - elastic)\n    :precondition (and \n        (location ?b on_counter)\n        (shape ?c loose)\n        (organization ?b random)\n    )\n    :effect (and \n        (location ?b on_band)\n        (shape ?c banded)\n        (organization ?b in_order_on_band)\n    )\n)\n```\n\n#### Action 4: zigzag_parts_cornrows\n```lisp\n",
        "(:action braid-strands\n    :parameters (?s1 - strand ?s2 - strand ?s3 - strand)\n    :precondition (and\n                    (divided ?t ?s1 ?s2 ?s3)\n                    (not (braided ?s1 ?s2 ?s3))\n                  )\n    :effect (braided ?s1 ?s2 ?s3)\n)\n```\n\n#### Action 6: Add-second-hook\n```lisp\n",
        "(:action braid_left_side\n    :parameters (?h1 - section ?h2 - section ?h3 - section)\n    :precondition (and (braid_started true) (shape ?h1 twisted) (shape ?h2 twisted))\n    :effect (and (shape ?h3 folded) (progress ?h ongoing))\n)\n```\n\n---\n\n#### Step 5: Continue braiding your hair following the last step.\n\n**PDDL Action:**\n```lisp\n"
    ],
    "zigzag": [
        "(:action zigzag_parts_cornrows\n    :parameters (?c - cornrow ?b - bead ?e - elastic)\n    :precondition (and \n        (location ?b off_strip_of_elastic)\n        (shape ?c in_straighter_line)\n        (composition ?b random)\n    )\n    :effect (and \n        (location ?b on_strip_of_elastic)\n        (shape ?c curved)\n        (composition ?b in_order)\n    )\n)\n```\n\n---\n\n### Explanation:\n\n1. **Action Name**: Each action is named based on the corresponding step and its description.\n2. **Parameters**: The parameters include the relevant objects (`cornrow`, `bead`, and `elastic`) involved in the action.\n3. **Preconditions**: Preconditions are derived from the \"before\" states of the entity attributes. They specify the conditions that must be true before the action can be executed.\n4. **Effects**: Effects capture the changes in the entity attributes after the action is performed, based on the \"after\" states.\n\nEach action aligns with the task of braiding cornrows and incorporates the relevant descriptions and entity state transitions. If a step seemed irrelevant or unclear, it was adapted to fit the task context while maintaining logical consistency.",
        "(:action sweep_hair_to_one_side\n    :parameters (?h - hair)\n    :precondition (and (location ?h centered_on_head) (state ?h untangled))\n    :effect (and (location ?h on_one_side) (state ?h ready_for_braiding))\n)\n```\n\n**Explanation**: This action moves all the hair to one side of the head. The precondition ensures that the hair is untangled and centered on the head, and the effect is that the hair is now on one side and ready for braiding.\n\n---\n\n#### Action 2: Part Hair into Two Sections\n```lisp\n",
        "(:action roll_braid_into_bun\n    :parameters (?braid - fishtail_braid ?bun - bun)\n    :precondition (and (shape ?braid twisted_and_folded) (location ?braid at_nape))\n    :effect (and (shape ?bun rolled) (location ?braid in_bun))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`add_colored_hair_extensions`**:\n   - **Parameters**: Hair and hair extensions.\n   - **Preconditions**: Extensions must be scattered and available all over the place.\n   - **Effects**: Extensions are bundled and collected, ready for use.\n\n2. **`make_topsy_turvy_ponytail`**:\n   - **Parameters**: Hair and ponytail.\n   - **Preconditions**: The ponytail must be open, and the hair must be untied.\n   - **Effects**: The ponytail is closed, and the hair is tied into a ponytail.\n\n3. **`make_fishtail_braid`**:\n   - **Parameters**: Hair and fishtail braid.\n   - **Preconditions**: The hair must already be tied, and the braid must initially be straight.\n   - **Effects**: The braid is twisted and folded to form a fishtail braid, and the hair is now braided.\n\n4. **`use_clip_to_cover_hair_tie`**:\n   - **Parameters**: A hair clip and a ponytail.\n   - **Preconditions**: The ponytail must be tied, and the clip must be visible.\n   - **Effects**: The clip is used to adorn the ponytail, and the clip becomes invisible (hidden under the ponytail).\n\n5. **`roll_braid_into_bun`**:\n   - **Parameters**: The fishtail braid and the bun.\n   - **Preconditions**: The braid must already be twisted and folded, and it should be located at the nape of the neck.\n   - **Effects**: The braid is rolled into a bun, changing its shape and location.\n\n---\n\n### Adjustments and Relevance:\n- The step to \"add some colored hair extensions\" was included as a preparatory step for braiding.\n- The \"topsy-turvy ponytail\" step was modified to ensure it aligns with the task of making a fishtail braid.\n- The use of a clip or barrette to cover the hair tie was kept relevant to the task as it decorates the hairstyle.\n- The final step, rolling the braid into a bun, was included as a logical conclusion to styling the fishtail braid. \n\nThese actions ensure the task is fully captured and can be executed in a logical sequence within a PDDL framework."
    ],
    "part": [
        "(:action separate-strands\n    :parameters (?r - wire_rope)\n    :precondition (and\n                    (strands-determined ?r)\n                    (not (strands-separated ?r))\n                  )\n    :effect (and\n              (strands-separated ?r)\n              (not (strands-touching ?r))\n            )\n)\n```\n**Explanation**: This action separates the strands of the wire rope. The precondition requires that the number of strands is already determined and that the strands are not yet separated. The effect ensures the strands are now separated and no longer touching.\n\n---\n\n#### 3. Pull the Strands Correctly\n```lisp\n",
        "(:action part_hair_into_sections\n    :parameters (?h - hair)\n    :precondition (and (location ?h on_one_side) (state ?h ready_for_braiding))\n    :effect (and (state ?h divided_into_sections))\n)\n```\n\n**Explanation**: This action parts the hair into two sections. The precondition checks that the hair is on one side and ready for braiding, and the effect is that the hair is now divided into sections.\n\n---\n\n#### Action 3: Begin the Braid\n```lisp\n",
        "(:action part_hair\n    :parameters (?h - hair ?h1 - section ?h2 - section)\n    :precondition (and (condition ?h smooth) (sectioned ?h false))\n    :effect (and (sectioned ?h true) (location ?h1 left_side) (location ?h2 right_side))\n)\n```\n\n---\n\n#### Step 3: Begin your braid.\n\n**PDDL Action:**\n```lisp\n",
        "(:action divide_chunk_into_sections\n    :parameters (?c - chunk ?s1 - section ?s2 - section ?s3 - section)\n    :precondition (and (gathered ?c) (not (divided ?c)))\n    :effect (and (divided ?c) (section ?s1) (section ?s2) (section ?s3))\n)\n```\n\n#### 4. Begin Standard Braid\n```lisp\n"
    ],
    "pull": [
        "(:action pull-strands\n    :parameters (?r - wire_rope)\n    :precondition (and\n                    (strands-separated ?r)\n                    (not (strands-pulled ?r))\n                  )\n    :effect (and\n              (strands-pulled ?r)\n              (aligned ?r)\n            )\n)\n```\n**Explanation**: This action ensures the strands are pulled correctly and aligned for braiding. The precondition ensures the strands are already separated but not yet pulled. The effect states that the strands are now pulled and aligned.\n\n---\n\n#### 4. Secure Loose Ends\n```lisp\n"
    ],
    "secure": [
        "(:action secure-loose-ends\n    :parameters (?r - wire_rope ?t - tool)\n    :precondition (and\n                    (strands-pulled ?r)\n                    (not (ends-secured ?r))\n                    (tool-available ?t)\n                  )\n    :effect (and\n              (ends-secured ?r)\n              (not (loose-ends ?r))\n            )\n)\n```\n**Explanation**: This action secures the loose ends of the wire rope. The precondition ensures the strands are pulled and a tool is available for securing. The effect ensures the ends are now secured and no longer loose.\n\n---\n\n### Adjustments and Relevance:\n1. The step \"Know how many strands of wire you'll be braiding\" was translated into an action to determine strands, ensuring logical progression.\n2. The step \"Pull the wire strands correctly\" was clarified to include alignment as an outcome.\n3. The step \"Secure loose ends\" was revised to include the use of a tool, as implied by the task's requirements.\n\nThese actions follow the structure and logic of PDDL while adhering to the task's requirements.",
        "(:action secure_with_hair_elastic\n    :parameters (?h - hair ?e - elastic)\n    :precondition (and (state ?h partially_braided) (location ?e on_counter))\n    :effect (and (state ?h fully_braided) (location ?e in_hair))\n)\n```\n\n**Explanation**: This action secures the braid with a hair elastic. The precondition checks that the hair is partially braided and the elastic is on the counter, and the effect is that the hair is now fully braided, and the elastic is in the hair.\n\n---\n\n### Summary of Actions:\n1. **Sweep Hair to One Side**: Moves hair to one side to prepare for braiding.\n2. **Part Hair into Two Sections**: Divides the hair into two sections for braiding.\n3. **Begin the Braid**: Starts the braiding process.\n4. **Secure with Hair Elastic**: Completes the braid by securing it with an elastic.\n\nEach action is designed to reflect the logical flow of the task while adhering to the PDDL structure and the provided entity states. If any step in the task or descriptions appears irrelevant or incorrect, it has been adjusted to align with the overall goal of side braiding hair.",
        "(:action secure_braid\n    :parameters (?h - hair ?e - elastic)\n    :precondition (and (shape ?h braided) (location ?e in_hand))\n    :effect (and (secured ?h true) (location ?e attached_to_hair))\n)\n```\n\n---\n\n### Notes:\n1. **Entity States**: The conditions such as `tangled`, `smooth`, `sectioned`, `twisted`, `folded`, and `braided` were derived from the task and descriptions provided.\n2. **Relevance**: Each step was mapped to a logical action in the braiding process. Irrelevant or unclear steps were adjusted for clarity and relevance.\n3. **Task-Specific Logic**: Actions were designed to capture the sequential and cumulative nature of braiding hair, ensuring logical progression from brushing to securing the braid.\n\n",
        "(:action gather_hair_chunk\n    :parameters (?h - hair ?c - chunk)\n    :precondition (and (parted ?h) (ungathered ?c) (next_to_part ?c))\n    :effect (and (gathered ?c) (not (ungathered ?c)))\n)\n```\n\n#### 3. Divide Chunk into Sections\n```lisp\n",
        "(:action find-surgical-tubing\n    :parameters (?t - surgical_tubing)\n    :precondition (not (found ?t))\n    :effect (found ?t)\n)\n```\n\n#### Action 2: Loop-rubber-bands\n```lisp\n"
    ],
    "begin": [
        "(:action begin_braid\n    :parameters (?h1 - section ?h2 - section ?h3 - section)\n    :precondition (and (sectioned ?h true) (location ?h1 left_side) (location ?h2 right_side) (braid_started false))\n    :effect (and (braid_started true) (shape ?h1 twisted) (shape ?h2 twisted) (shape ?h3 twisted))\n)\n```\n\n---\n\n#### Step 4: Do the same for the left side.\n\n**PDDL Action:**\n```lisp\n",
        "(:action begin_standard_braid\n    :parameters (?s1 - section ?s2 - section ?s3 - section)\n    :precondition (and (section ?s1) (section ?s2) (section ?s3) (not (braided ?s1 ?s2 ?s3)))\n    :effect (and (braided ?s1 ?s2 ?s3))\n)\n```\n\n#### 5. Add Strand to Hairline Section\n```lisp\n",
        "(:action continue_braiding\n    :parameters (?h - hair ?h1 - section ?h2 - section ?h3 - section)\n    :precondition (and (progress ?h ongoing) (shape ?h1 twisted) (shape ?h2 twisted) (shape ?h3 folded))\n    :effect (and (progress ?h completed) (shape ?h braided))\n)\n```\n\n---\n\n#### Step 6: Secure the braid at the end with a hair elastic.\n\n**PDDL Action:**\n```lisp\n",
        "(:action stop_braiding_near_nape\n    :parameters (?s1 - section ?s2 - section ?s3 - section ?n - nape)\n    :precondition (and (finished_braiding ?s1 ?s2 ?s3) (near_nape ?n))\n    :effect (and (braiding_stopped ?s1 ?s2 ?s3) (not (finished_braiding ?s1 ?s2 ?s3)))\n)\n```\n\n#### 11. Tie Off Braid\n```lisp\n"
    ],
    "add": [
        "(:action add_strand_to_hairline_section\n    :parameters (?s - section ?strand - strand)\n    :precondition (and (near_hairline ?s) (available ?strand) (not (added ?strand ?s)))\n    :effect (and (added ?strand ?s) (not (available ?strand)))\n)\n```\n\n#### 6. Cross Hairline Section Over Middle Section\n```lisp\n",
        "(:action add_strand_to_side_part_section\n    :parameters (?s - section ?strand - strand)\n    :precondition (and (near_side_part ?s) (available ?strand) (not (added ?strand ?s)))\n    :effect (and (added ?strand ?s) (not (available ?strand)))\n)\n```\n\n#### 8. Cross Side Part Section Over Middle Section\n```lisp\n",
        "(:action add_decoration_to_braid\n    :parameters (?b - braid ?d - decoration)\n    :precondition (and (tied_off ?b) (available ?d))\n    :effect (and (decorated ?b) (not (available ?d)))\n)\n```\n\n---\n\n### Notes:\n- Each action is designed to reflect a logical step in the braiding process.\n- Preconditions ensure that the task progresses in the correct sequence.\n- Effects update the state of the braid, sections, strands, and decorations as the task is completed.\n- Irrelevant or unclear steps have been omitted or adjusted to ensure logical consistency with the task.",
        "(:action add_colored_hair_extensions\n    :parameters (?hair - hair ?extension - hair_extension)\n    :precondition (and (organization ?extension scattered) (availability ?extension all_over_place))\n    :effect (and (organization ?extension bundled) (availability ?extension collected))\n)\n\n",
        "(:action add-second-hook\n    :parameters (?h - hook ?s - strand)\n    :precondition (and\n                    (braided ?s1 ?s2 ?s3)\n                    (hook ?h)\n                    (not (strung ?h ?s))\n                  )\n    :effect (strung ?h ?s)\n)\n```\n\n#### Action 7: Stretch-clothesline\n```lisp\n",
        "(:action tie_off_braid\n    :parameters (?b - braid ?tie - tie)\n    :precondition (and (braiding_stopped ?b) (available ?tie))\n    :effect (and (tied_off ?b) (not (available ?tie)))\n)\n```\n\n#### 12. Add Decoration to Braid\n```lisp\n",
        "(:action loop-rubber-bands\n    :parameters (?b1 - rubber_band ?b2 - rubber_band)\n    :precondition (and\n                    (not (looped ?b1 ?b2))\n                    (rubber_band ?b1)\n                    (rubber_band ?b2)\n                  )\n    :effect (looped ?b1 ?b2)\n)\n```\n\n#### Action 3: Measure-and-cut-strands\n```lisp\n",
        "(:action string-hook\n    :parameters (?h - hook ?s - strand)\n    :precondition (and\n                    (strand ?s)\n                    (hook ?h)\n                    (not (strung ?h ?s))\n                  )\n    :effect (strung ?h ?s)\n)\n```\n\n#### Action 5: Braid-strands\n```lisp\n"
    ],
    "use": [
        "(:action use_clip_to_cover_hair_tie\n    :parameters (?clip - hair_clip ?ponytail - ponytail)\n    :precondition (and (state ?ponytail tied) (visibility ?clip visible))\n    :effect (and (decoration ?ponytail adorned) (visibility ?clip invisible))\n)\n\n"
    ],
    "measure": [
        "(:action measure-and-cut-strands\n    :parameters (?t - surgical_tubing ?s1 - strand ?s2 - strand ?s3 - strand)\n    :precondition (and\n                    (found ?t)\n                    (not (cut ?t))\n                  )\n    :effect (and\n              (cut ?t)\n              (divided ?t ?s1 ?s2 ?s3)\n            )\n)\n```\n\n#### Action 4: String-hook\n```lisp\n"
    ],
    "stretch": [
        "(:action stretch-clothesline\n    :parameters (?l - clothesline ?f1 - fixture ?f2 - fixture)\n    :precondition (and\n                    (braided ?s1 ?s2 ?s3)\n                    (strung ?h1 ?s1)\n                    (strung ?h2 ?s3)\n                    (fixture ?f1)\n                    (fixture ?f2)\n                    (not (stretched ?l))\n                  )\n    :effect (and\n              (stretched ?l)\n              (looped ?l ?f1 ?f2)\n            )\n)\n```\n\n#### Action 8: Hang-garment\n```lisp\n"
    ],
    "brush": [
        "(:action brush_hair\n    :parameters (?h - hair ?b - brush)\n    :precondition (and (condition ?h tangled) (location ?b in_hand))\n    :effect (and (condition ?h smooth) (focus ?b on_hair))\n)\n```\n\n---\n\n#### Step 2: Part your hair into two sections.\n\n**PDDL Action:**\n```lisp\n"
    ],
    "PartHair": [
        "(:action PartHair\n    :parameters (?h - hair)\n    :precondition (not (parted ?h))\n    :effect (parted ?h)\n)\n```\n**Explanation:** This action represents parting the hair down the center. The precondition ensures the hair is not already parted, and the effect updates the hair state to parted.\n\n---\n\n#### Action 2: GrabHairSection\n```lisp\n"
    ],
    "GrabHairSection": [
        "(:action GrabHairSection\n    :parameters (?h - hair ?s - section)\n    :precondition (and (parted ?h) (not (selected ?s)))\n    :effect (selected ?s)\n)\n```\n**Explanation:** This action involves grabbing a small section of hair from the parted area. The precondition ensures the hair is parted and the section is not already selected. The effect updates the section state to selected.\n\n---\n\n#### Action 3: DivideHairSection\n```lisp\n"
    ],
    "DivideHairSection": [
        "(:action DivideHairSection\n    :parameters (?s - section ?strand1 - strand ?strand2 - strand)\n    :precondition (and (selected ?s) (not (divided ?s)))\n    :effect (and (divided ?s) (contains ?s ?strand1) (contains ?s ?strand2))\n)\n```\n**Explanation:** This action divides the selected hair section into two thinner strands. The precondition ensures the section is selected and not yet divided. The effect updates the section state to divided and assigns the strands to the section.\n\n---\n\n#### Action 4: TieStrandKnot\n```lisp\n"
    ],
    "TieStrandKnot": [
        "(:action TieStrandKnot\n    :parameters (?strand1 - strand ?strand2 - strand)\n    :precondition (and (contains ?s ?strand1) (contains ?s ?strand2) (not (knotted ?strand1 ?strand2)))\n    :effect (knotted ?strand1 ?strand2)\n)\n```\n**Explanation:** This action ties the two strands into a knot, similar to tying a pair of shoes. The precondition ensures the strands are part of the section and not already knotted. The effect updates the strands to be knotted.\n\n---\n\n#### Action 5: AddHairToStrands\n```lisp\n"
    ],
    "AddHairToStrands": [
        "(:action AddHairToStrands\n    :parameters (?h - hair ?strand1 - strand ?strand2 - strand)\n    :precondition (and (parted ?h) (knotted ?strand1 ?strand2) (not (added_hair ?strand1 ?strand2)))\n    :effect (added_hair ?strand1 ?strand2)\n)\n```\n**Explanation:** This action adds more hair to each strand, similar to French braiding. The precondition ensures the hair is parted, the strands are knotted, and no additional hair has been added yet. The effect updates the strands to include added hair.\n\n---\n\n#### Action 6: ContinueKnotting\n```lisp\n"
    ],
    "ContinueKnotting": [
        "(:action ContinueKnotting\n    :parameters (?strand1 - strand ?strand2 - strand)\n    :precondition (and (added_hair ?strand1 ?strand2) (not (continued_knotting ?strand1 ?strand2)))\n    :effect (continued_knotting ?strand1 ?strand2)\n)\n```\n**Explanation:** This action continues the process of adding hair and tying the strands into knots. The precondition ensures hair has been added to the strands and the process has not yet continued. The effect updates the state to reflect continued knotting.\n\n---\n\n#### Action 7: TieBraidOff\n```lisp\n"
    ],
    "TieBraidOff": [
        "(:action TieBraidOff\n    :parameters (?b - braid ?e - elastic)\n    :precondition (and (completed ?b) (not (tied_off ?b)))\n    :effect (tied_off ?b)\n)\n```\n**Explanation:** This action ties off the braid with an elastic. The precondition ensures the braid is completed and not yet tied off. The effect updates the braid state to tied off.\n\n---\n\n#### Action 8: BraidOtherSection\n```lisp\n"
    ],
    "BraidOtherSection": [
        "(:action BraidOtherSection\n    :parameters (?h - hair ?s - section)\n    :precondition (and (parted ?h) (not (braided ?s)))\n    :effect (braided ?s)\n)\n```\n**Explanation:** This action braids the other section of hair. The precondition ensures the hair is parted and the section is not yet braided. The effect updates the section state to braided.\n\n---\n\n#### Action 9: GatherHair\n```lisp\n"
    ],
    "GatherHair": [
        "(:action GatherHair\n    :parameters (?h - hair ?p - ponytail)\n    :precondition (and (braided ?h) (not (gathered ?p)))\n    :effect (gathered ?p)\n)\n```\n**Explanation:** This action gathers the braided hair into a half-up, half-down ponytail or two pigtails. The precondition ensures the hair is braided and not yet gathered. The effect updates the ponytail state to gathered.\n\n---\n\n#### Action 10: TwistIntoBun\n```lisp\n"
    ],
    "TwistIntoBun": [
        "(:action TwistIntoBun\n    :parameters (?p - ponytail ?b - bun)\n    :precondition (and (gathered ?p) (not (twisted ?b)))\n    :effect (twisted ?b)\n)\n```\n**Explanation:** This action twists the ponytail or pigtails into a bun. The precondition ensures the ponytail is gathered and not yet twisted. The effect updates the bun state to twisted.\n\n---\n\n### Summary:\nThe actions above capture the steps required to perform a chain braid, including parting the hair, selecting and dividing sections, tying knots, adding hair, and finishing the style with a bun. Each action is designed to reflect the logical progression and entity state changes described in the task."
    ],
    "GatherHairAtCrown": [
        "(:action GatherHairAtCrown\n    :parameters (?h - hair ?p - person)\n    :precondition (and (loose ?h) (not (braided ?h)) (at_crown ?h ?p))\n    :effect (and (gathered ?h) (braiding_started ?h))\n)\n\n"
    ],
    "PullHairFromSides": [
        "(:action PullHairFromSides\n    :parameters (?h - hair ?p - person)\n    :precondition (and (loose ?h) (braiding_started ?h) (available_on_sides ?h ?p))\n    :effect (and (added_to_braid ?h) (not (loose ?h)))\n)\n\n"
    ],
    "ContinueBraiding": [
        "(:action ContinueBraiding\n    :parameters (?h - hair)\n    :precondition (and (braiding_started ?h) (not (braided ?h)))\n    :effect (and (braided ?h) (not (loose ?h)))\n)\n```\n\n---\n\n### Explanation of PDDL Actions:\n\n1. **`GatherHairAtCrown`:**\n   - **Parameters:** Hair and person involved in the action.\n   - **Preconditions:** Hair must be loose and located at the crown of the head. The hair must not already be braided.\n   - **Effects:** The hair is gathered, and the braiding process starts.\n\n2. **`PullHairFromSides`:**\n   - **Parameters:** Hair and person involved in the action.\n   - **Preconditions:** Hair must be loose, the braid must already be started, and hair must be available on the sides of the head.\n   - **Effects:** Hair from the sides is added to the braid, and it is no longer loose.\n\n3. **`ContinueBraiding`:**\n   - **Parameters:** Hair being braided.\n   - **Preconditions:** The braid must already be started, and there must still be loose hair to braid.\n   - **Effects:** The braid is completed, and all hair is braided.\n\n---\n\n### Notes:\n- The entity state information provided (e.g., scissors, helmet) appears irrelevant to the task of braiding hair. These were excluded from the PDDL actions as they do not align with the task steps or descriptions.\n- The generated actions align with the task steps and descriptions provided while ensuring logical consistency in preconditions and effects.\n"
    ],
    "redo": [
        "(:action redo_braids_around_hairline\n    :parameters (?b - braid ?h - hairline)\n    :precondition (and (braid ?b) (around_hairline ?b ?h) (messy ?b))\n    :effect (and (tidy ?b) (not (messy ?b)))\n)\n\n"
    ],
    "side": [
        "(:action side_swept_cornrows\n    :parameters (?c - cornrow ?b - bead ?e - elastic)\n    :precondition (and \n        (location ?b off_strip)\n        (organization ?b random)\n        (shape ?c loose)\n    )\n    :effect (and \n        (location ?b on_strip)\n        (organization ?b in_order_on_band)\n        (shape ?c banded)\n    )\n)\n```\n\n#### Action 2: swirl_cornrows\n```lisp\n"
    ],
    "determine": [
        "(:action determine-strands\n    :parameters (?r - wire_rope)\n    :precondition (not (strands-determined ?r))\n    :effect (strands-determined ?r)\n)\n```\n**Explanation**: This action represents the step of knowing how many strands of wire will be braided. The precondition ensures this knowledge has not been determined yet, and the effect sets it as determined.\n\n---\n\n#### 2. Separate the Strands\n```lisp\n"
    ],
    "PrepareHair": [
        "(:action PrepareHair\n    :parameters (?h - hair ?p - person)\n    :precondition (and (not (smooth ?h)) (on_head ?h ?p))\n    :effect (smooth ?h)\n)\n\n"
    ],
    "SeparateHair": [
        "(:action SeparateHair\n    :parameters (?h - hair ?p - person)\n    :precondition (and (smooth ?h) (on_head ?h ?p) (not (separated ?h)))\n    :effect (separated ?h)\n)\n\n"
    ],
    "PlaitHair": [
        "(:action PlaitHair\n    :parameters (?h - hair ?p - person)\n    :precondition (and (separated ?h) (on_head ?h ?p) (not (plaited ?h)))\n    :effect (plaited ?h)\n)\n\n"
    ],
    "SecureBraid": [
        "(:action SecureBraid\n    :parameters (?h - hair ?p - person)\n    :precondition (and (plaited ?h) (on_head ?h ?p) (not (secured ?h)))\n    :effect (secured ?h)\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **PrepareHair**:\n   - **Action Name**: PrepareHair\n   - **Parameters**: Hair (`?h`) and the person (`?p`).\n   - **Preconditions**: The hair must not already be smooth, and it must be on the person's head.\n   - **Effects**: The hair becomes smooth, as described in the first step (\"Start with smooth tangle-free hair\").\n\n2. **SeparateHair**:\n   - **Action Name**: SeparateHair\n   - **Parameters**: Hair (`?h`) and the person (`?p`).\n   - **Preconditions**: The hair must already be smooth and on the person's head, and it must not already be separated.\n   - **Effects**: The hair becomes separated, as described in the second step (\"Separate the hair to plait\").\n\n3. **PlaitHair**:\n   - **Action Name**: PlaitHair\n   - **Parameters**: Hair (`?h`) and the person (`?p`).\n   - **Preconditions**: The hair must be separated, on the person's head, and not already plaited.\n   - **Effects**: The hair becomes plaited, as described in the third step (\"Plait as normal\").\n\n4. **SecureBraid**:\n   - **Action Name**: SecureBraid\n   - **Parameters**: Hair (`?h`) and the person (`?p`).\n   - **Preconditions**: The hair must be plaited, on the person's head, and not already secured.\n   - **Effects**: The braid is secured, completing the final step (\"Secure the braid over the top of your head like a headband\").\n\n---\n\n### Notes:\n- The actions are designed to follow a logical progression based on the task steps and descriptions.\n- Irrelevant or incorrect elements in the entity state (e.g., attributes for asparagus, helmets, or light) were ignored as they do not pertain to the task of plaiting hair.\n- The conditions and effects directly correspond to the task's descriptions and ensure the proper sequencing of actions."
    ],
    "FashionBracelet": [
        "(:action FashionBracelet\n    :parameters (?l - leather ?b - bracelet)\n    :precondition (and (braided ?l) (not (fashioned ?b)))\n    :effect (fashioned ?b)\n)\n\n"
    ],
    "MakeNecklace": [
        "(:action MakeNecklace\n    :parameters (?l - leather ?n - necklace)\n    :precondition (and (braided ?l) (not (fashioned ?n)))\n    :effect (fashioned ?n)\n)\n\n"
    ],
    "CreateLeatherRing": [
        "(:action CreateLeatherRing\n    :parameters (?l - leather ?r - ring)\n    :precondition (and (braided ?l) (not (fashioned ?r)))\n    :effect (fashioned ?r)\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **FashionBracelet**:\n   - **Action Name**: \"FashionBracelet\" corresponds to the step of making a bracelet from braided leather.\n   - **Parameters**: `?l` represents the braided leather, and `?b` represents the bracelet.\n   - **Preconditions**: The leather must be braided (`braided ?l`), and the bracelet must not already be fashioned (`not (fashioned ?b)`).\n   - **Effects**: The bracelet is considered fashioned (`fashioned ?b`).\n\n2. **MakeNecklace**:\n   - **Action Name**: \"MakeNecklace\" corresponds to the step of making a necklace using braided leather.\n   - **Parameters**: `?l` represents the braided leather, and `?n` represents the necklace.\n   - **Preconditions**: The leather must be braided (`braided ?l`), and the necklace must not already be fashioned (`not (fashioned ?n)`).\n   - **Effects**: The necklace is considered fashioned (`fashioned ?n`).\n\n3. **CreateLeatherRing**:\n   - **Action Name**: \"CreateLeatherRing\" corresponds to the step of making a tiny braid into a leather ring.\n   - **Parameters**: `?l` represents the braided leather, and `?r` represents the ring.\n   - **Preconditions**: The leather must be braided (`braided ?l`), and the ring must not already be fashioned (`not (fashioned ?r)`).\n   - **Effects**: The ring is considered fashioned (`fashioned ?r`).\n\n---\n\n### Notes:\n- The provided entity states (e.g., \"velveeta,\" \"helmet\") do not align with the task of braiding leather and were ignored in the PDDL generation.\n- The actions focus on the task descriptions and steps provided, ensuring relevance and logical flow.\n- If additional details about the braiding process (e.g., \"braidLeather\" action) were provided, they could be incorporated into the PDDL actions."
    ]
}