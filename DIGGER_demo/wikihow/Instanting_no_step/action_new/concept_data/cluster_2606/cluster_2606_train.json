[
    "(:action choose\n    :parameters (?agent - person ?item - entity ?location - location ?container - object ?theme - theme ?recipient - person)\n    :precondition (and \n        ;; General preconditions for choosing or gathering items\n        (not (in-possession ?item))           ;; The item is not already in possession\n        (or \n            (available ?item)                 ;; The item is available\n            (available-in-store ?item)        ;; The item is available in the store\n            (recipe_available ?item ?location) ;; A recipe is available at a location\n        )\n        \n        ;; Specific conditions for themes, templates, or design\n        (or \n            (unselected ?item)                ;; The item (e.g., moment or template) is unselected\n            (not (theme-selected ?theme))     ;; A theme is not yet selected\n        )\n        \n        ;; Contextual conditions for location and interaction\n        (or \n            (at ?agent ?location)             ;; The agent is at the required location\n            (inventory ?agent ?container)     ;; The agent has the required container\n        )\n    )\n    :effect (and \n        ;; General effects for choosing or gathering items\n        (in-possession ?item)                 ;; The item is now in possession\n        (not (not-in-possession ?item))",
    "(:action decorate\n    :parameters (?agent - person ?entity - object ?tool - object)\n    :precondition (and \n        (has_tool ?agent ?tool) \n        (modifiable ?entity) \n        (not (decorated ?entity)))\n    :effect (and \n        (decorated ?entity) \n        (not (plain ?entity))",
    "(:action record_and_mark\n    :parameters (?agent - person ?subject - person ?recorder - object ?notepad - object ?container - object ?date - date)\n    :precondition (and \n        (has ?agent ?recorder) \n        (has ?agent ?notepad) \n        (functional ?recorder) \n        (stored ?container ?location) \n        (not (marked ?container ?date)))\n    :effect (and \n        (recorded ?subject) \n        (transcribed ?subject) \n        (marked ?container ?date) \n        (has_text ?subject) \n        (not (functional ?recorder))",
    "(:action add\n  :parameters (?actor - agent ?item - entity ?container - entity)\n  :precondition (and (in-possession ?actor ?item)\n                     (compatible ?item ?container)\n                     (not (in ?item ?container)))\n  :effect (and (in ?item ?container) \n               (not (available ?item source))",
    "(:action add_photos\n  :parameters (?actor - agent ?photo - photo ?album - album)\n  :precondition (and (has_photos ?actor ?photo)\n                     (compatible ?photo ?album)\n                     (not (in_album ?photo)))\n  :effect (and (in_album ?photo)\n               (not (has_photos ?actor ?photo))",
    "(:action collect\n  :parameters (?collector - agent ?item - entity ?source - entity)\n  :precondition (and (available ?item ?source)\n                     (not (collected ?item ?source)))\n  :effect (and (collected ?item ?source)\n               (has ?collector ?item))",
    "(:action write ; Write and document information to complete a task\n    :parameters (?actor - agent ?item - writable ?context - context)\n    :precondition (and \n                    (in-possession ?actor ?item)\n                    (not (written ?item))\n                    (relevant_context ?context ?item))\n    :effect (and \n              (written ?item)\n              (task_completed ?actor ?item ?context)\n              (contextual_effect ?item ?context))",
    "(:action hold\n    :parameters (?entity - object ?holder - agent ?location - place)\n    :precondition (and \n        (available ?entity)\n        (not (in-possession ?holder ?entity))\n        (or (safe ?location) (dry ?location))  ; Location constraints (if applicable)\n    )\n    :effect (and \n        (stored-for-later ?entity ?location)  ; Reflects holding/storing the entity\n        (in-possession ?holder ?entity)       ; Entity is now in possession\n        (not (available ?entity))",
    "(:action order\n    :parameters (?actor - agent ?resource - object)\n    :precondition (and (ready-for-order ?resource) (not (processed ?resource)))\n    :effect (and (processed ?resource) (shared ?resource) (ordered ?resource))",
    "(:action create ; Create and prepare an item or concept with resources\n  :parameters (?creator - agent ?item - object ?resource - object ?context - context)\n  :precondition (and \n                  (available ?resource ?context) \n                  (ready_to_create ?creator)\n                  (not (created ?item ?context)))\n  :effect (and \n           (created ?item ?context)\n           (used ?resource ?item)\n           (not (available ?resource ?context))",
    "(:action pick ; Pick an attribute or object and update its state\n  :parameters (?attribute - attribute ?agent - agent)\n  :precondition (and (focused ?agent) (not (picked ?attribute)))\n  :effect (and (picked ?attribute) (consistent ?attribute))",
    "(:action bring ; Bring an item or a set of items to a person or task\n    :parameters (?actor - person ?item - object)\n    :precondition (and (available ?item) (not (has ?actor ?item)))\n    :effect (has ?actor ?item)\n)",
    "(:action bring\n       :parameters (?h - historian ?r - recorder)\n       :precondition (and (available ?r) (not (has ?h ?r)))\n       :effect (has ?h ?r)\n   )",
    "(:action bring\n       :parameters (?p - player ?camera - camera)\n       :precondition (and (available ?camera) (not (has ?p ?camera)))\n       :effect (has ?p ?camera)\n   )",
    "(:action scan ; Scan an item and process it for further use\n    :parameters (?agent - person ?item - object ?device - device)\n    :precondition (and \n        (has ?agent ?item) ; Agent must have access to the item\n        (or (scannable ?item) ; Item must be scannable\n            (and \n                (at ?agent scanner_location) ; Agent must be at the scanner location\n                (at ?item scanner_location) ; Item must also be at the scanner location\n                (has_device ?device) ; A scanning device must be present\n            )\n        )\n    )\n    :effect (and \n        (scanned ?item) ; The item gets scanned\n        (or \n            (digitized ?item) ; If it's a photo, it gets digitized\n            (in_album ?item) ; If it's a wedding invitation, it gets added to an album\n        )\n    )",
    "(:action archive ; Archive an entity or resource for future reference or preservation\n  :parameters (?actor - person ?entity - object ?location - archive)\n  :precondition (and \n      (associated ?entity ?actor) ; The entity must be associated with the actor\n      (archive_available ?location) ; The archive location must be available\n      (not (archived ?entity ?location))) ; The entity must not already be archived\n  :effect (and \n      (archived ?entity ?location) ; The entity is now archived in the specified location\n      (not (active ?entity))",
    "(:action prepare ; Prepare an actor or object for a specific task\n  :parameters (?actor - person ?resource - object ?task - task)\n  :precondition (and \n      (available ?actor) ; The actor must be available\n      (available ?resource) ; The resource must be ready for use\n      (not (prepared ?task ?actor))) ; The task should not already be prepared\n  :effect (and \n      (prepared ?task ?actor) ; The task is now prepared with the given actor\n      (not (pending ?task))",
    "(:action transform ; Transform an entity into a different or enhanced state\n  :parameters (?actor - person ?input - object ?output - object)\n  :precondition (and \n      (associated ?input ?actor) ; The input must be associated with the actor\n      (not (transformed ?input ?output))) ; The input should not already be transformed into the output\n  :effect (and \n      (transformed ?input ?output) ; The input is now transformed into the output\n      (not (raw ?input))",
    "(:action publish ; Publish or make an entity accessible to others\n  :parameters (?creator - person ?content - object ?platform - location)\n  :precondition (and \n      (created ?content ?creator) ; The content must be created by the actor\n      (platform_available ?platform) ; The platform must be available\n      (not (published ?content ?platform))) ; The content should not already be published\n  :effect (and \n      (published ?content ?platform) ; The content is now published on the platform\n      (accessible ?content ?platform))",
    "(:action describe ; Describe an entity or attribute to update its state\n    :parameters (?actor - agent ?entity - object ?description - text)\n    :precondition (and (not (described ?entity ?description)))\n    :effect (and (described ?entity ?description))",
    "(:action protect ; Protect an item using a resource\n :parameters (?actor - person ?item - object ?container - collection ?resource - material)\n :precondition (and (contains ?container ?item) (available ?resource protective_material))\n :effect (and (protected ?item ?resource) (not (unprotected ?item))",
    "(:action use ; Utilize a resource to transform its state or context\n    :parameters (?entity - object ?user - agent ?context - situation)\n    :precondition (and (available ?user) (applicable ?entity ?context) (modifiable ?entity))\n    :effect (and (transformed ?entity ?context) (not (modifiable ?entity))",
    "(:action establish ; Establish a transition or state for a narrative element\n    :parameters (?entity - entity ?state - state ?actor - character)\n    :precondition (and \n                    (current_state ?entity ?prev_state) \n                    (can_transition ?entity ?prev_state ?state))\n    :effect (and \n              (not (current_state ?entity ?prev_state))",
    "(:action decide ; Decide on a strategy, resource, or format\n    :parameters (?actor - entity ?target - entity)\n    :precondition (and (undecided ?target)\n                       (or (has_knowledge ?actor ?target) (knows_options ?actor ?target)))\n    :effect (and (decided ?target) \n                 (not (undecided ?target))",
    "(:action upload\n    :parameters (?agent - entity ?item - object ?target - entity)\n    :precondition (and (available ?agent) (not (uploaded ?item)) (ready ?item) (chosen ?target))\n    :effect (and (uploaded ?item) (prepared ?item ?target))",
    "(:action customize ; Customize an item to make it ready for its intended purpose\n    :parameters (?entity - object ?aspect - feature)\n    :precondition (and (applicable ?entity) (not (customized ?entity ?aspect)) (available ?aspect))\n    :effect (and (customized ?entity ?aspect) (ready ?entity ?aspect))",
    "(:action share ; Share an item with a recipient, updating its state accordingly\n    :parameters (?item - object ?giver - agent ?recipient - agent)\n    :precondition (and \n        (owned ?giver ?item) ; The giver must own the item\n        (ready_to_share ?item) ; The item must be in a shareable state\n        (at ?giver ?recipient)) ; The giver must be near the recipient\n    :effect (and \n        (shared ?item ?recipient) ; The item is now shared with the recipient\n        (not (owned ?giver ?item))",
    "(:action pinpoint ; Pinpoint a key moment or element in a sequence\n    :parameters (?entity - entity ?attribute - attribute ?actor - agent)\n    :precondition (and (selected ?entity) (not (finalized ?attribute)) (valid ?actor))\n    :effect (and (finalized ?attribute) (not (pending ?attribute))",
    "(:action brainstorm\n    ; Brainstorm and create a list based on motivation and goals\n    :parameters (?person - person ?list - list ?type - list_type)\n    :precondition (and\n                    (wants_motivation ?person)\n                    (has_goals ?person)\n                    (valid_list_type ?type))\n    :effect (and\n              (created_list ?person ?list)\n              (type_of_list ?list ?type)\n              (motivated ?person))",
    "(:action brainstorm\n       :parameters (?person - person ?list - list)\n       :precondition (and\n                       (wants_motivation ?person)\n                       (has_goals ?person)\n                       (valid_list_type grocery))\n       :effect (and\n                 (created_list ?person ?list)\n                 (type_of_list ?list grocery)\n                 (motivated ?person))",
    "(:action brainstorm\n       :parameters (?person - person ?list - list)\n       :precondition (and\n                       (wants_motivation ?person)\n                       (has_goals ?person)\n                       (valid_list_type packing))\n       :effect (and\n                 (created_list ?person ?list)\n                 (type_of_list ?list packing)\n                 (motivated ?person))",
    "(:action brainstorm\n       :parameters (?person - person ?list - list)\n       :precondition (and\n                       (wants_motivation ?person)\n                       (has_goals ?person)\n                       (valid_list_type bucket))\n       :effect (and\n                 (created_list ?person ?list)\n                 (type_of_list ?list bucket)\n                 (motivated ?person))"
]