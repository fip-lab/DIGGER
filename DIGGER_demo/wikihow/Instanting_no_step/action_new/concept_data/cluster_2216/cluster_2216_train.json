[
    "(:action consult\n  ; Consult an entity to update task status and gather needed information\n  :parameters (?p - person ?entity - entity ?info - object)\n  :precondition (and (available ?p)\n                     (not (consulted ?p ?entity))\n                     (has_contact_info ?entity)\n                     (has_requirement ?p ?info))\n  :effect (and (consulted ?p ?entity)\n               (info_received ?p ?info))",
    "(:action evaluate ; Evaluate a resource and update its status\n  :parameters (?evaluator - person ?entity - object ?aspect - aspect)\n  :precondition (and \n                 (available ?evaluator) \n                 (knowledge ?evaluator ?aspect) \n                 (not (evaluated ?evaluator ?entity ?aspect)))\n  :effect (and \n           (evaluated ?evaluator ?entity ?aspect)\n           (knows ?evaluator ?entity ?aspect))",
    "(:action evaluate\n    :parameters (?p - person ?truck - truck ?aspect - anti_theft_needs)\n    :precondition (and \n                   (available ?p) \n                   (knowledge ?p anti_theft_needs) \n                   (not (evaluated ?p ?truck anti_theft_needs)))\n    :effect (and \n             (evaluated ?p ?truck anti_theft_needs)\n             (knows ?p ?truck anti_theft_needs))",
    "(:action evaluate\n    :parameters (?p - person ?alarm - wireless_driveway_alarm ?aspect - recording_capability)\n    :precondition (and \n                   (available ?p) \n                   (knowledge ?p recording_capability) \n                   (supports_multiple_transmitters ?alarm) \n                   (not (evaluated ?p ?alarm recording_capability)))\n    :effect (and \n             (evaluated ?p ?alarm recording_capability)\n             (knows ?p ?alarm recording_capability))",
    "(:action evaluate\n    :parameters (?p - person ?car - vehicle ?aspect - fuel_economy)\n    :precondition (and \n                   (available ?p) \n                   (knowledge ?p basics_of_transmission) \n                   (not (evaluated ?p ?car fuel_economy)))\n    :effect (and \n             (evaluated ?p ?car fuel_economy)\n             (knows ?p ?car fuel_economy))",
    "(:action establish-budget\n   :parameters (?p - person)\n   :precondition (not (budget_established ?p))\n   :effect (budget_established ?p)\n)",
    "(:action confirm_calibration_feature\n   :parameters (?user - user ?compass - compass)\n   :precondition (and (owned ?user ?compass)\n                      (not (confirmed ?user calibration_feature))\n                      (has_feature ?compass calibration_feature))\n   :effect (and (confirmed ?user calibration_feature))",
    "(:action establish\n   :parameters (?agent - person ?entity - object ?attribute - attribute)\n   :precondition (and \n                   (not (established ?agent ?entity ?attribute))\n                   (or \n                     (and (eq ?attribute budget) (not (budget_established ?agent)))\n                     (and (eq ?attribute calibration_feature) \n                          (owned ?agent ?entity) \n                          (has_feature ?entity calibration_feature))\n                   )\n                 )\n   :effect (and \n             (established ?agent ?entity ?attribute)\n             (or \n               (and (eq ?attribute budget) (budget_established ?agent))",
    "(:action choose\n    :parameters (?p - person ?entity - object ?criteria - criteria)\n    :precondition (and\n                    (not (selected ?p ?entity))\n                    (meets_criteria ?entity ?criteria)\n                   )\n    :effect (and\n             (selected ?p ?entity)\n             (not (meets_criteria ?entity ?criteria))",
    "(:action search\n  :parameters (?p - person ?source - resource ?item - object ?info - information)\n  :precondition (and\n                  (available ?p)\n                  (not (possesses ?p ?info))\n                  (or (at ?p ?source)\n                      (has_access_to ?p ?source)\n                      (connected_to_internet ?p ?source)\n                      (knows ?p ?item)\n                      (requires ?item ?info))\n                )\n  :effect (and\n            (possesses ?p ?info)\n            (not (unaware ?p ?info))",
    "(:action fill\n    :parameters (?entity - entity ?resource - resource ?location - location ?condition - condition)\n    :precondition (and (at ?entity ?location) (has ?entity ?resource) (satisfies ?condition))\n    :effect (and (filled ?entity ?resource) (not (empty ?entity ?resource))",
    "(:action fill\n    :parameters (?p - person ?fuel - fuel ?loc - gas_station ?time - time_of_day)\n    :precondition (and (at ?p ?loc) (has ?p ?fuel) (time_optimal ?time))\n    :effect (and (filled ?p ?fuel) (not (empty ?p ?fuel))",
    "(:action fill\n    :parameters (?p - person ?fuel - fuel ?loc - gas_station)\n    :precondition (and (at ?p ?loc) (has ?p ?fuel) (not (full ?p ?fuel)) (not (empty ?p ?fuel)))\n    :effect (and (filled ?p ?fuel) (not (low ?p ?fuel))",
    "(:action fill\n    :parameters (?p - person ?kit - bluetooth_car_kit ?car - vehicle)\n    :precondition (and (at ?p ?car) (has ?p ?kit) (compatible ?kit ?car))\n    :effect (and (filled ?car ?kit) (not (empty ?p ?kit))",
    "(:action fill\n    :parameters (?p - person ?loop - hearing_loop ?h - home)\n    :precondition (and (at ?p ?h) (not (filled ?h ?loop)))\n    :effect (and (filled ?h ?loop))",
    "(:action learn\n  ; Learn a feature or attribute, updating the knowledge state\n  :parameters (?entity - entity ?attribute - attribute)\n  :precondition (and (not (known ?entity ?attribute)) \n                     (available ?attribute))\n  :effect (known ?entity ?attribute)\n)",
    "(:action pick ; Pick an item based on a specific feature\n    :parameters (?agent - entity ?item - object ?feature - feature)\n    :precondition (and (not (selected ?agent ?item))\n                       (has_feature ?item ?feature))\n    :effect (selected ?agent ?item)\n)",
    "(:action compare\n  ; Compare two entities and update the status based on the comparison\n  :parameters (?entity1 - object ?entity2 - object ?observer - person)\n  :precondition (and \n                  (available ?entity1)\n                  (available ?entity2))\n  :effect (compared ?entity1 ?entity2)\n)",
    "(:action consider\n  :parameters (?p - person ?item - object ?decision - decision ?context - context)\n  :precondition (and \n    (not (decided ?p ?decision))\n    (case \n      ; for hearing dog consideration\n      ((and (lives_alone ?p) (not (has_hearing_dog ?p))) \n       (context hearing_dog))\n      ; for evaluating car power\n      ((and (knowledge ?p basics_of_transmission) (not (evaluated ?p ?item power))) \n       (context car_power))\n      ; for semi-automatic transmission evaluation\n      ((and (knowledge ?p basics_of_transmission) (not (evaluated ?p semi_automatic_transmission))) \n       (context semi_automatic_transmission))\n      ; for deciding on features\n      ((and (has_budget ?p ?budget) (not (decided_features ?p))) \n       (context car_features))\n      ; for identifying needs\n      ((not (identified ?p needs)) \n       (context identifying_needs))\n    )\n  )\n  :effect (and \n    (case \n      ; effect for hearing dogs\n      (context hearing_dog) \n      (or (decided ?p get_hearing_dog) (decided ?p no_hearing_dog))",
    "(:action understand ; Achieve understanding of a concept and update knowledge status\n    :parameters (?p - person ?concept - object)\n    :precondition (not (knowledge ?p ?concept))\n    :effect (knowledge ?p ?concept)\n)",
    "(:action research ; Research a resource and update task status\n  :parameters (?p - person ?resource - object ?internet - resource)\n  :precondition (and\n                  (or (budget_established ?p)\n                      (has_access ?p ?internet))\n                  (not (researched ?p ?resource))\n                  (or (device_connected ?resource ?internet)\n                      (knows_suitable_system ?p ?resource))\n                 )\n  :effect (researched ?p ?resource)\n)",
    "(:action shortlist ; Create a shortlist and update task status\n  :parameters (?p - person ?item - object)\n  :precondition (and\n                  (researched ?p ?item)\n                  (not (shortlisted ?p ?item))\n                )\n  :effect (shortlisted ?p ?item))",
    "(:action browse ; Browse a resource and update task status\n  :parameters (?p - person ?resource - object)\n  :precondition (and\n                  (shortlist_created ?p)\n                  (not (browsing_done ?p ?resource))\n                )\n  :effect (browsing_done ?p ?resource)\n)",
    "(:action decide ; Make a decision on a given item or task\n  :parameters (?p - person ?item - object ?decision_type - task)\n  :precondition (and \n                  (not (decision_made ?p ?item ?decision_type))\n                  (precondition_met ?p ?item ?decision_type)\n                )\n  :effect (decision_made ?p ?item ?decision_type)\n)",
    "(:action precondition_met ; Check if preconditions for a decision are met\n  :parameters (?p - person ?item - object ?decision_type - task)\n  :precondition (and \n                  (or \n                    (and (online_browsing_done ?p) (eq ?decision_type installation_method))\n                    (and (knows ?p ?item) (eq ?decision_type decided_purpose))\n                    (and (or (type ?item bubble_compass) (type ?item digital_compass)) (eq ?decision_type compass_type))\n                    (and (knowledge ?p basics_of_transmission) (identified ?p needs) (eq ?decision_type manual_transmission))\n                    (has_vehicle_details ?p ?item) (eq ?decision_type protection_needs)\n                  )\n                )\n  :effect (precondition_met ?p ?item ?decision_type)\n)",
    "(:action determine ; Determine a specific attribute or need for an entity\n  :parameters (?p - person ?entity - object ?attribute - attribute)\n  :precondition (and (knows ?p ?entity) (not (determined ?entity ?attribute)))\n  :effect (and (determined ?entity ?attribute) (knows ?p ?attribute))",
    "(:action list ; List a set of features or items to a user\n  :parameters (? user - person ? item_list - list)\n  :precondition (not (has_list ? user ? item_list))\n  :effect (has_list ? user ? item_list)\n)",
    "(:action request ; Request a resource and update possession status\n :parameters (?requester - entity ?provider - entity ?resource - resource)\n :precondition (and\n                (has_provider_list ?requester ?provider)\n                (not (has_resource ?requester ?resource))\n               )\n :effect (has_resource ?requester ?resource)\n)",
    "(:action contact ; Contact an entity and update interaction status\n  :parameters (?actor - person ?entity - object)\n  :precondition (and (available ?actor) (not (contacted ?actor ?entity)))\n  :effect (contacted ?actor ?entity)\n)",
    "(:action recycle_battery\n    :parameters (?p - person ?recycling_center - location ?old_battery - battery)\n    :precondition (and (at ?p ?recycling_center) (has ?p ?old_battery))\n    :effect (and (recycled ?old_battery) (not (has ?p ?old_battery))",
    "(:action recycle_paper\n    :parameters (?p - person ?recycling_bin - location ?old_paper - paper)\n    :precondition (and (at ?p ?recycling_bin) (has ?p ?old_paper))\n    :effect (and (recycled ?old_paper) (not (has ?p ?old_paper))",
    "(:action recycle_plastic\n    :parameters (?p - person ?recycling_station - location ?old_plastic - plastic)\n    :precondition (and (at ?p ?recycling_station) (has ?p ?old_plastic))\n    :effect (and (recycled ?old_plastic) (not (has ?p ?old_plastic))",
    "(:action recycle ; Recycle an item at a designated location\n    :parameters (?p - person ?location - location ?item - object)\n    :precondition (and (at ?p ?location) (has ?p ?item))\n    :effect (and (recycled ?item) (not (has ?p ?item))"
]