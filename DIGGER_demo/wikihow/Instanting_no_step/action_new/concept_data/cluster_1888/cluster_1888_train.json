[
    "(:action wait ; Wait for a condition to be met and update status\n    :parameters (?agent - agent ?condition - condition ?entity - entity)\n    :precondition (and (not (?condition)) (?agent ?entity))\n    :effect (?condition)\n)",
    "(:action place\n    :parameters (?p - player ?item - object ?target - location_or_container)\n    :precondition (and \n        (inventory ?p ?item)\n        (not (at ?item ?target)) ; Ensure the item is not already at the target location or in the container\n        (or (and (is_heating_element ?item) (in_sunlight ?target) (is_hot_day))\n            (and (is_empty ?target) (is_egg ?item))\n            (and (is_strips ?item) (is_empty ?target))\n            (and (clean ?item) (clear ?target))\n            (and (fried ?item) (clean ?target))\n            (and (at ?item ?target) (clean ?brush))\n            (and (inPan ?item ?target) (melted ?item))\n            (and (whole ?item) (at ?knife kitchen_counter) (clean ?knife))\n            (and (trimmed ?item) (shaped ?target ?shape) (at ?item kitchen_counter))\n        )\n    )\n    :effect (and \n        (not (inventory ?p ?item))",
    "(:action crack\n    :parameters (?actor - agent ?item - object ?surface - surface ?location - location)\n    :precondition (and\n        (inventory ?actor ?item)\n        (is_crackable ?item)\n        (at ?actor ?location)\n        (at ?surface ?location)\n        (appropriate_conditions ?surface ?location)\n    )\n    :effect (and\n        (not (inventory ?actor ?item))",
    "(:action flip\n    :parameters (?actor - person ?item - object ?location - location ?tool - tool)\n    :precondition (and\n        (at ?actor ?location)\n        (or\n            (and (fried ?item) (in-pan ?item ?tool))\n            (and (on_surface ?item ?location) (not (discarded ?item)))\n        )\n    )\n    :effect (and\n        (or\n            (and (fried ?item) (in-pan ?item ?tool) (flipped ?item) (evenly_cooked ?item))",
    "(:action cook\n    :parameters (?ingredient - ingredient ?container - container ?appliance - appliance ?npc - person ?location - location)\n    \n    :precondition (and\n        (or\n            (and (at ?ingredient ?container) (at ?container ?appliance) (on ?appliance))\n            (and (in_pan ?ingredient ?container) (has_heat ?container) (not (is_cooked ?ingredient)))\n            (and (inPan ?ingredient ?container) (on ?appliance) (hot ?container))\n            (and (cooked ?ingredient) (at ?ingredient ?location) (at ?container ?location))\n            (and (fried ?ingredient) (flipped ?ingredient) (at ?ingredient ?location))\n            (and (inToaster ?ingredient ?appliance) (on ?appliance))\n            (and (rolled ?container) (at ?ingredient ?location) (at ?container ?location))\n            (and (filling_added ?container ?ingredient) (on_surface ?container ?location) (not (rolled ?container)))\n            (and (on ?appliance) (whitesTurningWhite ?ingredient))\n        )\n    )\n    \n    :effect (and\n        (or\n            (cooked ?ingredient)\n            (is_cooked ?ingredient)\n            (whitesTurningWhite ?ingredient) (not (raw ?ingredient))",
    "(:action add\n  ; Universal action to add an ingredient, liquid, or filling to a container or utensil\n  :parameters (?item - object ?container - container ?entity - entity ?location - location)\n  :precondition (and \n    (or (cooked ?item) (inventory ?entity ?item) (at ?item pantry) (on_surface ?item ?location))\n    (or (at ?container ?location) (at ?container kitchen_counter) (at ?container ?table) (clean ?container))\n    (not (is_full ?container))\n    (not (inPan ?item ?container))\n  )\n  :effect (and\n    (or (in ?item ?container) (in_bowl ?item ?container) (has_oil ?container) (filling_added ?container ?item))",
    "(:action repeat \n    ; Repeat a preparation or task until completion\n    :parameters (?agent - entity ?task - task ?condition - condition)\n    :precondition (and \n        (task_started ?agent ?task) \n        (not (task_completed ?task))\n        (condition_met ?condition)\n    )\n    :effect (and \n        (task_progressed ?agent ?task)\n        (check_completion ?task)\n    )",
    "(:action serve\n    :parameters (?entity - object ?container - container ?loc - location)\n    :precondition (and\n        (prepared ?entity)\n        (at ?container ?loc)\n    )\n    :effect (and\n        (served ?entity ?container)\n        (not (prepared ?entity))",
    "(:action remove\n    ; Remove an item from its current state or location and update its status\n    :parameters (?entity - object ?source - location ?target - location ?tool - object)\n    :precondition (and \n        (at ?entity ?source)\n        (not (at ?entity ?target))\n        (cleared ?source)\n        (available ?tool)\n    )\n    :effect (and \n        (at ?entity ?target)\n        (not (at ?entity ?source))",
    "(:action secure\n    :parameters (?agent - person ?ingredient - ingredient ?item - object ?tool - tool ?location - location)\n    :precondition (and \n        (at ?ingredient ?location)\n        (at ?item ?location)\n        (at ?tool ?location)\n        (clean ?tool)\n    )\n    :effect (and \n        (secured_with_ingredient ?item ?ingredient)\n    )",
    "(:action beat_eggs_and_milk :parameters (?bowl - container ?p - player) :precondition (and (in_bowl ?eggs ?bowl) (in_bowl ?milk ?bowl) (is_mixed ?bowl) (not (is_beaten ?bowl))) :effect (and (is_beaten ?bowl) (not (is_mixed ?bowl))",
    "(:action beat ; Beat a mixture and update its status\n  :parameters (?container - container ?player - person ?item1 - object ?item2 - object)\n  :precondition (and \n    (in_container ?item1 ?container)\n    (in_container ?item2 ?container)\n    (is_mixed ?container)\n    (not (is_beaten ?container))\n  )\n  :effect (and \n    (is_beaten ?container)\n    (not (is_mixed ?container))",
    "(:action roll\n  :parameters (?item - object ?agent - agent)\n  :precondition (and \n      (is_prepared ?item)\n      (is_cooked ?item)\n      (is_cooled ?item)\n      (not (is_rolled ?item))\n  )\n  :effect (and \n      (is_rolled ?item)\n      (not (is_cooled ?item))",
    "(:action cut\n  :parameters (?item - object ?agent - agent)\n  :precondition (and \n      (is_rolled ?item)\n      (not (is_cut ?item))\n  )\n  :effect (is_cut ?item)\n)",
    "(:action roll_and_cut\n  :parameters (?item - object ?agent - agent)\n  :precondition (and \n      (is_prepared ?item)\n      (is_cooked ?item)\n      (is_cooled ?item)\n      (not (is_rolled ?item))\n      (not (is_cut ?item))\n  )\n  :effect (and \n      (is_rolled ?item)\n      (is_cut ?item)\n      (not (is_cooled ?item))",
    "(:action cut ; Cut an item using a tool\n    :parameters (?item - object ?tool - tool ?agent - agent)\n    :precondition (and\n        (is_prepared ?item)\n        (inventory ?agent ?tool)\n        (is_sharp ?tool)\n    )\n    :effect (and\n        (is_cut ?item)\n        (not (is_prepared ?item))",
    "(:action shape ; Shape or modify an ingredient or object\n    :parameters (?item - ingredient ?form - form)\n    :precondition (and\n        (prepared ?item)\n        (at ?item workspace)\n    )\n    :effect (and\n        (shaped ?item ?form)\n        (not (prepared ?item))",
    "(:action deep ; Perform a deep transformation on a dish with various states\n    :parameters (?entity - dish ?tool - utensil ?location - place ?state - state)\n    :precondition (and\n        (has_state ?entity ?state)\n        (at ?tool ?location)\n        (available ?tool)\n    )\n    :effect (and\n        (transformed ?entity ?state)\n        (dirty ?tool)\n        (not (has_state ?entity ?state))"
]