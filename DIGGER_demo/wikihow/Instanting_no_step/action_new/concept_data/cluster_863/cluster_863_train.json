[
    "(:action remove ; Remove a substance or clean an area\n  :parameters (?p - player ?area - body_part ?item - object ?cleaning_agent - object ?condition - condition)\n  :precondition (and \n    (or (dirty ?area) \n        (effect_applied ?item ?area) \n        (inventory ?p ?cleaning_agent) \n        (not (clean ?area)) \n        (test_patch ?area)) \n    (not (clean ?area)))\n  :effect (and \n    (clean ?area) \n    (not (dirty ?area))",
    "(:action wash\n    :parameters (?entity - object ?tool - tool ?area - area)\n    :precondition (and\n        (dirty ?area)\n        (available ?tool)\n        (functional ?tool)\n        (not (clean ?area))\n    )\n    :effect (and\n        (clean ?area)\n        (not (dirty ?area))",
    "(:action wet\n    :parameters (?entity - entity ?item - item ?source - source)\n    :precondition (and \n        (not (wet ?entity)) \n        (has ?entity ?item) \n        (wet ?item))\n    :effect (wet ?entity)\n)",
    "(:action wet_skin\n       :parameters (?p - player ?area - body_part)\n       :precondition (and (clean ?area) (trimmed ?area) (not (wet ?area)))\n       :effect (wet ?area)\n   )",
    "(:action wet-legs\n       :parameters (?p - person ?t - towel ?w - water)\n       :precondition (and (not (wet ?p)) (has ?p ?t) (wet ?t))\n       :effect (wet ?p)\n   )",
    "(:action heat_honey\n       :parameters (?h - honey ?c - container ?st - stove)\n       :precondition (and\n           (in ?h ?c)\n           (on ?c ?st)\n           (not (heated ?h))\n       )\n       :effect (and\n           (heated ?h)\n           (not (cool ?h))",
    "(:action dry-legs\n       :parameters (?p - person ?t - towel)\n       :precondition (and (wet ?p) (has ?p ?t) (not (dry ?p)))\n       :effect (and (dry ?p) (not (wet ?p))",
    "(:action wait ;  Wait for a resource to take effect and update its status\n    :parameters (?entity - entity ?resource - item ?context - context)\n    :precondition (and (applied ?resource ?context) (waiting_for_effect ?resource ?context))\n    :effect (and (effect_applied ?resource ?context) (not (waiting_for_effect ?resource ?context))",
    "(:action maintain ; Maintain an area and ensure it is well-kept\n  :parameters (?p - person ?area - object ?routine - item)\n  :precondition (and (moisturized ?area) (inventory ?p ?routine))\n  :effect (well_maintained ?area)\n)",
    "(:action use ; Use a tool on a target to achieve a desired state change\n  :parameters (?target - entity ?tool - tool)\n  :precondition (and\n                  (requires_action ?target)\n                  (available ?tool)\n                  (functional ?tool))\n  :effect (and\n            (not (requires_action ?target))",
    "(:action choose_dry_shampoo\n       :parameters (?p - powder ?a - agent)\n       :precondition (and (available ?p) (not (selected ?p)))\n       :effect (and (selected ?p))",
    "(:action apply_powder_to_roots\n       :parameters (?p - powder ?h - hair)\n       :precondition (and (selected ?p) (not (applied ?p ?h)))\n       :effect (and (applied ?p ?h))",
    "(:action choose\n    :parameters (?entity - object ?target - entity)\n    :precondition (and (available ?entity) (not (selected ?entity)))\n    :effect (and (selected ?entity))",
    "(:action apply\n    :parameters (?entity - object ?target - entity)\n    :precondition (and (selected ?entity) (not (applied ?entity ?target)))\n    :effect (and (applied ?entity ?target))",
    "(:action check_and_comb\n  :parameters (?agent - agent ?resource - object ?item - object)\n  :precondition (and (available ?resource) (not (checked ?agent ?resource)) (not (processed ?item)) (ready_for_processing ?item))\n  :effect (and (checked ?agent ?resource) (processed ?item))",
    "(:action grow\n    :parameters (?entity - entity ?attribute - attribute ?state1 - state ?state2 - state)\n    :precondition (and\n        (?state1 ?attribute)\n        (attached ?attribute ?entity)\n    )\n    :effect (and\n        (?state2 ?attribute)\n        (not (?state1 ?attribute))",
    "(:action grow\n    :parameters (?p - person ?h - hair ?short - state ?long - state)\n    :precondition (and\n        (short ?h)\n        (attached ?h ?p)\n    )\n    :effect (and\n        (long ?h)\n        (not (short ?h))",
    "(:action grow\n    :parameters (?p - plant ?s - seed ?small - state ?large - state)\n    :precondition (and\n        (small ?s)\n        (attached ?s ?p)\n    )\n    :effect (and\n        (large ?s)\n        (not (small ?s))",
    "(:action freeze\n    :parameters (?actor - person ?resource - object ?tool - tool)\n    :precondition (and (inventory ?actor ?resource) (available ?tool) (not (frozen ?resource)))\n    :effect (and (frozen ?resource) (not (melted ?resource))",
    "(:action take\n  ; Take an item and prepare it for use\n  :parameters (?p - player ?item - object)\n  :precondition (and (inventory ?p ?item) (preparable ?item))\n  :effect (and (ready_to_use ?item))",
    "(:action repeat\n    :parameters (?actor - person ?entity - object ?tool - object)\n    :precondition (and (available ?actor) (has ?actor ?tool) (prepared ?entity ?tool))\n    :effect (and (processed ?entity) (not (prepared ?entity ?tool))",
    "(:action add\n    :parameters (?actor - person ?item1 - object ?item2 - object)\n    :precondition (and (has ?actor ?item1) (has ?actor ?item2) (not (combined ?item1 ?item2)))\n    :effect (combined ?item1 ?item2)\n)",
    "(:action shave\n    :parameters (?p - person ?r - tool ?d - drying_tool)\n    :precondition (and (wet ?p) (has ?p ?r) (not (shaved ?p)))\n    :effect (and (shaved ?p) (dry ?p ?d))",
    "(:action chip\n    :parameters (?entity - object ?tool - tool)\n    :precondition (and \n        (entity_in_state ?entity hardened_gum)\n        (available ?tool)\n    )\n    :effect (and\n        (not (entity_in_state ?entity hardened_gum))",
    "(:action run ; Perform a task and update the state accordingly\n  :parameters (?actor - agent ?resource - object ?target - location)\n  :precondition (and\n                  (ready ?actor)\n                  (resource_available ?resource)\n                  (not (task_completed ?actor ?resource ?target))\n                )\n  :effect (and\n            (task_completed ?actor ?resource ?target)\n            (state_updated ?resource ?target)\n           )",
    "(:action decide ; Decide on a course of action and update task status\n    :parameters (?actor - entity ?subject - entity)\n    :precondition (and (clean ?subject) (not (decided ?actor ?subject)))\n    :effect (and (decided ?actor ?subject))",
    "(:action apply\n    :parameters (?actor - agent ?substance - item ?target - object)\n    :precondition (and (available ?actor) \n                       (inventory ?actor ?substance) \n                       (not (applied ?substance ?target)))\n    :effect (and (applied ?substance ?target)\n                 (not (available ?substance))",
    "(:action apply\n        :parameters (?p - player ?nair - item ?area - body_part)\n        :precondition (and (wet ?area) \n                           (inventory ?p ?nair) \n                           (not (applied ?nair ?area)))\n        :effect (and (applied ?nair ?area)\n                     (waiting_for_effect ?nair ?area)\n                     (not (available ?nair))",
    "(:action apply\n        :parameters (?actor - agent ?cream - product ?area - body_area)\n        :precondition (and (has_hair ?area)\n                           (inventory ?actor ?cream)\n                           (safe_for_use ?cream)\n                           (not (applied ?cream ?area)))\n        :effect (and (applied ?cream ?area)\n                     (not (has_hair ?area))",
    "(:action apply\n        :parameters (?a - agent ?p - powder ?h - hair)\n        :precondition (and (selected ?p) \n                           (inventory ?a ?p)\n                           (not (applied ?p ?h)))\n        :effect (and (applied ?p ?h)\n                     (powder_applied ?h)\n                     (not (available ?p))",
    "(:action apply\n        :parameters (?actor - agent ?h - honey ?s - skin ?ha - hair)\n        :precondition (and (heated ?h)\n                           (clean ?s)\n                           (dry ?s)\n                           (long ?ha)\n                           (attached ?ha ?s)\n                           (inventory ?actor ?h)\n                           (not (applied ?h ?ha)))\n        :effect (and (applied ?h ?ha)\n                     (removed ?ha ?s)\n                     (not (attached ?ha ?s))",
    "(:action apply\n        :parameters (?p - player ?ganda_beroza - ganda_beroza ?hair - body_hair)\n        :precondition (and (ready_to_apply ?ganda_beroza)\n                           (attached ?hair)\n                           (inventory ?p ?ganda_beroza)\n                           (not (applied ?ganda_beroza ?hair)))\n        :effect (and (applied ?ganda_beroza ?hair)\n                     (coated ?hair ?ganda_beroza)\n                     (not (ready_to_apply ?ganda_beroza))",
    "(:action apply\n        :parameters (?p - person ?l - lotion)\n        :precondition (and (shaved ?p)\n                           (inventory ?p ?l)\n                           (not (moisturized ?p))\n                           (not (applied ?l ?p)))\n        :effect (and (applied ?l ?p)\n                     (moisturized ?p)\n                     (not (available ?l))",
    "(:action apply\n        :parameters (?actor - agent ?ice_wrap - tool ?hair - object)\n        :precondition (and (gum_in_hair ?hair)\n                           (inventory ?actor ?ice_wrap)\n                           (not (applied ?ice_wrap ?hair)))\n        :effect (and (applied ?ice_wrap ?hair)\n                     (gum_hardened ?hair)\n                     (not (gum_soft ?hair))",
    "(:action moisturize ; Moisturize a body part using an item\n  :parameters (?p - person ?area - body_part ?item - object)\n  :precondition (and (waited_24_hours ?area) (inventory ?p ?item) (not (moisturized ?area)))\n  :effect (moisturized ?area))",
    "(:action laser ; Perform a hair removal task using a laser device\n  :parameters (?area - body_area ?device - device)\n  :precondition (and\n                  (has_hair ?area)\n                  (available ?device)\n                  (functional ?device))\n  :effect (and\n            (not (has_hair ?area))",
    "(:action LayOutTowel ; Lay out an item and update its status\n    :parameters (?item - object)\n    :precondition (and (clean ?item) (dry ?item) (not (on_surface ?item)))\n    :effect (and (on_surface ?item) (ready_for_use ?item))",
    "(:action SitComfortably ; Allow a person to sit comfortably on a surface\n  :parameters (?p - person ?s - surface ?r - resource)\n  :precondition (and (on_surface ?s) (ready_for_use ?r) (not (comfortable ?p)))\n  :effect (comfortable ?p)\n)",
    "(:action WarmAndPrepare\n    :parameters (?item - object)\n    :precondition (and (not (warm ?item)) (not (ready_to_use ?item)))\n    :effect (and (warm ?item) (ready_to_use ?item))",
    "(:action PeelWaxStrip\n    :parameters (?entity - object)\n    :precondition (and (ready_to_use ?entity) (not (peeled ?entity)))\n    :effect (and (peeled ?entity) (state_changed ?entity))",
    "(:action PlaceWaxStrip\n    :parameters (?item - object ?entity - agent)\n    :precondition (and (ready_for_use ?item) (not (used ?item)) (ready ?entity))\n    :effect (used ?item)\n)",
    "(:action process_item\n  :parameters (?entity - object)\n  :precondition (and (applied ?entity) (not (processed ?entity)))\n  :effect (processed ?entity)\n)",
    "(:action HoldSkinTaut ; Ensure the skin is held taut and update status\n  :parameters (?p - person)\n  :precondition (and (comfortable ?p) (not (skin_taut ?p)))\n  :effect (skin_taut ?p)\n)",
    "(:action RipWaxStrip\n    :parameters (?strip - object ?person - person)\n    :precondition (and (secured ?strip) (skin_taut ?person) (not (removed ?strip)))\n    :effect (and (removed ?strip) (hair_removed ?person))",
    "(:action continue_task ; Continue a task and update status\n    :parameters (?entity - object ?task - task)\n    :precondition (and (task_started ?entity ?task) (not (task_completed ?entity ?task)))\n    :effect (task_completed ?entity ?task))",
    "(:action PerformWaxingTask\n    :parameters (?c - cloth ?p - person ?t - towel ?ws - wax_strip)\n    :precondition (and \n        (available ?p) ; The person should be available for the waxing process\n        (clean ?c) ; The cloth must be clean to wipe excess wax\n        (not (wax_removed ?p)) ; Wax must not have been removed yet\n        (exists (?towel - towel) (not (laid_out ?towel))) ; A towel needs to be laid out\n        (exists (?strip - wax_strip) (not (warmed ?strip))) ; Wax strip needs to be warmed\n        (exists (?strip - wax_strip) (not (peeled ?strip))) ; Wax strip needs to be peeled\n        (exists (?strip - wax_strip) (not (placed ?strip ?p))) ; Wax strip needs to be placed\n        (exists (?strip - wax_strip) (not (rubbed ?strip))) ; Wax strip needs to be rubbed\n        (exists (?strip - wax_strip) (not (skin_taut ?p))) ; Skin needs to be held taut\n        (exists (?strip - wax_strip) (not (ripped ?strip))) ; Wax strip needs to be ripped off\n    )\n    :effect (and\n        (wax_removed ?p) ; The person should be wax-free after the action\n        (dirty ?c) ; The cloth becomes dirty after wiping excess wax\n        (laid_out ?t) ; Towel is laid out\n        (warmed ?ws) ; Wax strip is warmed\n        (peeled ?ws) ; Wax strip is peeled\n        (placed ?ws ?p) ; Wax strip is placed on the person\n        (rubbed ?ws) ; Wax strip is rubbed for adhesion\n        (skin_taut ?p) ; Skin is held taut\n        (ripped ?ws) ; Wax strip is ripped off\n    )\n)",
    "(:action exfoliate\n    :parameters (?p - person ?item - object)\n    :precondition (and (inventory ?p ?item) (clean ?item))\n    :effect (and (exfoliated ?item) (not (clean ?item))",
    "(:action AvoidIngrownHairs\n    :parameters (?entity - object ?task - task)\n    :precondition (not (prepared ?entity ?task))\n    :effect (prepared ?entity ?task)\n)",
    "(:action UseBabyPowder\n    :parameters (?agent - person ?powder - baby_powder ?area - body_area)\n    :precondition (and (not (applied ?powder ?area)) (prepared ?area))\n    :effect (applied ?powder ?area)\n)",
    "(:action AvoidBurningWithWax\n    :parameters (?entity - object ?condition - state)\n    :precondition (and (heated ?entity) (not (too_hot ?entity)))\n    :effect (safe_temperature ?entity)\n)",
    "(:action ensure_hair_length ; Ensure the hair length in a specific area\n:parameters (?hair - hair ?area - body_area)\n:precondition (and (in_area ?hair ?area) (not (long_enough ?hair)))\n:effect (long_enough ?hair))",
    "(:action maintain_waxing_procedure\n  :parameters (?person - person ?area - body_area ?powder - object ?wax - object ?hair - object)\n  \n  :precondition (and \n    (available ?person)\n    (not (prepared ?area))\n    (not (applied_powder ?powder ?area))\n    (heated ?wax)\n    (not_too_hot ?wax)\n    (enough_length ?hair ?area)\n    (waxed ?area)\n    (not (reapplied ?area))\n  )\n  \n  :effect (and\n    (prepared ?area)\n    (applied_powder ?powder ?area)\n    (safe_temp ?wax)\n    (ready_for_waxing ?hair ?area)\n    (not (reapplied ?area))",
    "(:action StartWithDryCombedHair ; Prepare an entity by ensuring it is dry and combed\n    :parameters (?entity - entity ?attribute1 - attribute ?attribute2 - attribute ?state - state)\n    :precondition (and (has_attribute ?entity ?attribute1 ?state) (has_attribute ?entity ?attribute2 ?state))\n    :effect (prepared ?entity)\n)",
    "(:action WarmWax\n    :parameters (?w - wax)\n    :precondition (and (not (heated ?w)) (at_temperature ?w cool))\n    :effect (and (heated ?w) (not (at_temperature ?w cool))",
    "(:action DipApplicator\n    :parameters (?a - applicator ?w - wax)\n    :precondition (and (heated ?w) (not (dipped ?a ?w)))\n    :effect (dipped ?a ?w)\n)",
    "(:action WarmWaxAndDipApplicator\n    :parameters (?a - applicator ?w - wax)\n    :precondition (and \n        (not (heated ?w)) \n        (at_temperature ?w cool)\n    )\n    :effect (and \n        (heated ?w) \n        (not (at_temperature ?w cool))",
    "(:action TousleHair ; Tousle hair and update its state\n    :parameters (?h - hair ?f - fingers)\n    :precondition (and (prepared ?h) (warmed ?f) (not (tousled ?h)))\n    :effect (tousled ?h)\n)",
    "(:action ApplyWaxForVolume\n    :parameters (?agent - entity ?w - wax ?h - hair)\n    :precondition (and (tousled ?h) (warmed ?w) (not (voluminous ?h)))\n    :effect (voluminous ?h)\n)",
    "(:action DipApplicator\n  :parameters (?a - applicator ?item - object ?condition - state)\n  :precondition (and (clean ?a) (at_temperature ?item ?condition))\n  :effect (and (not (clean ?a))",
    "(:action manage_resource\n  :parameters (?actor - person ?resource - object ?location - place)\n  :precondition (and (at ?actor ?location) (not (acquired ?actor ?resource)))\n  :effect (acquired ?actor ?resource)\n)",
    "(:action ApplyHairWax ; Apply hair wax to style hair\n  :parameters (?actor - person ?hw - hairwax ?h - hair)\n  :precondition (and (owned ?actor ?hw) (or (dry ?h) (slightly_damp ?h)))\n  :effect (styled ?h)\n)",
    "(:action EnsureClothing ; Ensure a person is fully clothed\n  :parameters (?p - person)\n  :precondition (not (fully_clothed ?p))\n  :effect (fully_clothed ?p)\n)",
    "(:action EnsureClothing ; Ensure a person is fully clothed by checking and wearing different items of clothing\n  :parameters (?p - person ?item - clothing)\n  :precondition (and (not (wearing ?p ?item)) (available ?item) (not (fully_clothed ?p)))\n  :effect (and (wearing ?p ?item) (fully_clothed ?p))",
    "(:action handle_item\n    :parameters (?agent - agent ?item - object ?tool - tool)\n    :precondition (and (owned ?item) (clean ?tool))\n    :effect (handled ?agent ?item ?tool))",
    "(:action process\n    :parameters (?agent - agent ?entity - entity ?state_before - state ?state_after - state)\n    :precondition (and (state ?agent ?entity ?state_before) (not (state ?agent ?entity ?state_after)))\n    :effect (and (not (state ?agent ?entity ?state_before))",
    "(:action process\n    :parameters (?npc - person ?book - book ?state_before - state ?state_after - state)\n    :precondition (and (available ?npc) (not (checked_list ?npc ?book)))\n    :effect (and (checked_list ?npc ?book))",
    "(:action process\n    :parameters (?leader - player ?member - player ?bc - book_club ?state_before - state ?state_after - state)\n    :precondition (and (in ?leader ?bc) (in ?member ?bc) (not (loan_tracker ?member ?bc)))\n    :effect (loan_tracker ?member ?bc)\n)",
    "(:action process\n    :parameters (?f - fingers ?state_before - state ?state_after - state)\n    :precondition (wax_on_fingers ?f)\n    :effect (wax_evenly_spread ?f)\n)",
    "(:action transform_entity\n    :parameters (?entity - object ?state1 - state ?state2 - state)\n    :precondition (and (in_state ?entity ?state1) (not (in_state ?entity ?state2)))\n    :effect (and (in_state ?entity ?state2) (not (in_state ?entity ?state1))",
    "(:action check_bestseller_list\n    :parameters (?npc - person ?book - book)\n    :precondition (and (in_state ?npc available) (not (in_state ?npc checked_list)))\n    :effect (and (in_state ?npc checked_list) (not (in_state ?npc available))",
    "(:action listen_to_member_secret\n    :parameters (?leader - player ?member - player ?bc - book_club)\n    :precondition (and (in_state ?leader in_bc) (in_state ?member in_bc) (not (in_state ?member loan_tracker)))\n    :effect (and (in_state ?member loan_tracker) (not (in_state ?member in_bc))",
    "(:action restyle_hair\n    :parameters (?h - hair)\n    :precondition (and (in_state ?h styled) (not (in_state ?h restyled)))\n    :effect (and (in_state ?h restyled) (not (in_state ?h styled))",
    "(:action ManageHairWaxProcess\n    :parameters (?person - person ?hair - hair ?wax - hair_wax ?store - store ?clothing - clothing)\n    :precondition (and \n        (available ?person)\n        (at ?person ?store)\n        (or (and (not (owns ?person ?wax))\n                 (not (fully_clothed ?person)))\n            (and (owns ?person ?wax)\n                 (or (dry ?hair) (slightly_damp ?hair))\n                 (clean ?fingers)\n                 (or (not (styled ?hair)) (styled ?hair))))\n    )\n    :effect (and \n        (or (owns ?person ?wax)\n            (fully_clothed ?person))",
    "(:action SearchForWaxServices :parameters (?p - person ?a - area) :precondition (not (found_services ?p ?a)) :effect (found_services ?p ?a))",
    "(:action make_appointment :parameters (?p - person ?s - service_provider) :precondition (and (found_services ?p ?s) (not (appointment_made ?p ?s))) :effect (appointment_made ?p ?s))",
    "(:action SearchForWaxServices\n    :parameters (?p - person ?a - area ?s - service_provider)\n    :precondition (and (not (found_services ?p ?a)) (not (appointment_made ?p ?s)))\n    :effect (and (found_services ?p ?a) (appointment_made ?p ?s))",
    "(:action MakeAppointment\n        :parameters (?p - person ?s - service)\n        :precondition (and (found_services ?p ?s) (not (appointment_scheduled ?p ?s)))\n        :effect (appointment_scheduled ?p ?s)\n    )",
    "(:action ShowUpForAppointment\n        :parameters (?p - person ?s - service)\n        :precondition (and (appointment_scheduled ?p ?s) (not (appointment_completed ?p ?s)))\n        :effect (appointment_completed ?p ?s)\n    )",
    "(:action ManageAppointment ; Manage the process of making and attending an appointment\n    :parameters (?p - person ?s - service)\n    :precondition (and (found_services ?p ?s) (not (appointment_completed ?p ?s)))\n    :effect (and \n        (when (not (appointment_scheduled ?p ?s))",
    "(:action AttendAppointment\n    :parameters (?p - person ?a - area ?s - service)\n    :precondition (and \n        (not (found_service ?p ?a ?s)) ; The person has not found the service in the area\n        (not (appointment_scheduled ?p ?s)) ; The person has not scheduled an appointment\n        (not (at_service_location ?p ?s)) ; The person is not yet at the service location\n    )\n    :effect (and \n        (found_service ?p ?a ?s) ; Person finds the service in the area\n        (appointment_scheduled ?p ?s) ; Person schedules an appointment\n        (at_service_location ?p ?s) ; Person attends the appointment\n    )\n)"
]