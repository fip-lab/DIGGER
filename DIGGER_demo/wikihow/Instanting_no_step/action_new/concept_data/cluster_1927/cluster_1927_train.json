[
    "(:action plan\n    :parameters (?planner - agent ?target - entity ?context - scenario ?goal - outcome)\n    :precondition (and \n        (capable ?planner ?context) ; Planner is capable of handling the context\n        (not (planned ?context ?goal)) ; The goal has not already been planned for this context\n        (valid_context ?context) ; The context is valid for planning\n    )\n    :effect (and \n        (planned ?context ?goal) ; The goal is now planned for the context\n        (ready ?planner ?goal) ; The planner is ready to execute the plan\n    )\n)",
    "(:action make\n    :parameters (?person - individual ?item - object ?location - place ?resource - resource ?theme - theme ?supplies - item)\n    :precondition (and \n        (at ?person ?location)\n        (available ?resource ?location)\n        (not (created ?item ?location))\n        (or (interested_in ?person ?theme) (common_interest ?person ?theme))\n    )\n    :effect (and\n        (created ?item ?location)\n        (used ?resource)\n        (prepared ?location)\n        (organized_event ?person ?item)\n        (theme_assigned ?item ?theme)\n    )",
    "(:action make\n    :parameters (?person - individual ?item - party ?location - home ?resource - decorations ?theme - theme)\n    :precondition (and \n        (at ?person ?location)\n        (available ?resource ?location)\n        (not (created ?item ?location))\n        (common_interest ?person ?theme)\n    )\n    :effect (and\n        (created ?item ?location)\n        (used ?resource)\n        (prepared ?location)\n        (organized_event ?person ?item)\n        (theme_assigned ?item ?theme)\n    )",
    "(:action make\n    :parameters (?person - individual ?item - supplies ?location - store ?resource - materials ?theme - none)\n    :precondition (and \n        (at ?person ?location)\n        (available ?resource ?location)\n        (not (created ?item ?location))\n    )\n    :effect (and\n        (created ?item ?location)\n        (used ?resource)\n        (prepared ?location)\n        (organized_event ?person ?item)\n    )",
    "(:action make\n    :parameters (?person - individual ?item - memory_book ?location - home ?resource - photos ?theme - graduation)\n    :precondition (and \n        (at ?person ?location)\n        (available ?resource ?location)\n        (not (created ?item ?location))\n        (interested_in ?person ?theme)\n    )\n    :effect (and\n        (created ?item ?location)\n        (used ?resource)\n        (prepared ?location)\n        (organized_event ?person ?item)\n        (theme_assigned ?item ?theme)\n    )",
    "(:action host\n    :parameters (?host - person ?location - location ?guests - group ?preparations - preparation_set)\n    :precondition (and \n        (at ?host ?location) \n        (clean ?location) \n        (suitable_for_event ?location)\n        (ready ?preparations)\n    )\n    :effect (and \n        (event_hosted ?host ?location ?guests) \n        (gratitude_expressed ?host ?guests) \n        (location_state ?location messy) \n        (resources_used ?preparations)\n    )",
    "(:action complete\n    :parameters (?actor - entity ?task - objective ?location - place)\n    :precondition (and (at ?actor ?location) (status ?task in_progress))\n    :effect (and (status ?task completed) (achieved_goal ?actor ?task))",
    "(:action complete\n       :parameters (?p - player ?wreath - objective ?f - flag_parade)\n       :precondition (and (at ?p ?f) (status ?wreath in_progress))\n       :effect (and (status ?wreath completed) (achieved_goal ?p ?wreath))",
    "(:action complete\n       :parameters (?host - person ?party - event ?neighborhood - place)\n       :precondition (and (at ?host ?neighborhood) (status ?party in_progress))\n       :effect (and (status ?party completed) (achieved_goal ?host ?party))",
    "(:action complete\n       :parameters (?chef - person ?dinner - event ?kitchen - place)\n       :precondition (and (at ?chef ?kitchen) (status ?dinner in_progress))\n       :effect (and (status ?dinner completed) (achieved_goal ?chef ?dinner))",
    "(:action find ; Locate or acquire an item, information, or resource\n    :parameters (?agent - entity ?target - object ?source - resource ?context - condition)\n    :precondition (and \n        (available ?agent) \n        (accessible ?source) \n        (related ?target ?context) \n        (not (found ?agent ?target)))\n    :effect (and \n        (found ?agent ?target) \n        (owned ?agent ?target))",
    "(:action find\n       :parameters (?agent - person ?target - gift ?source - store ?context - hobby)\n       :precondition (and \n           (available ?agent) \n           (accessible ?source) \n           (related ?target ?context) \n           (not (found ?agent ?target)))\n       :effect (and \n           (found ?agent ?target) \n           (owned ?agent ?target))",
    "(:action find\n       :parameters (?agent - person ?target - punctuation_fact ?source - information_source ?context - punctuation_topic)\n       :precondition (and \n           (available ?agent) \n           (accessible ?source) \n           (related ?target ?context) \n           (not (found ?agent ?target)))\n       :effect (and \n           (found ?agent ?target))",
    "(:action find\n       :parameters (?agent - individual ?target - event ?source - location ?context - community_interest)\n       :precondition (and \n           (available ?agent) \n           (accessible ?source) \n           (related ?target ?context) \n           (not (found ?agent ?target)))\n       :effect (and \n           (found ?agent ?target) \n           (ready_to_participate ?agent))",
    "(:action show\n  ; Generalized action to demonstrate appreciation, create plans, or host events\n  :parameters (?actor - person ?recipient - person ?object - object ?context - location)\n  :precondition (and \n      (graduated ?actor)              ; The actor must have graduated\n      (has_budget ?actor)             ; The actor must have a sufficient budget\n      (at ?actor ?context)            ; The actor must be at the relevant location\n      (knows_about ?actor ?object)    ; The actor must have knowledge or possession of the object\n      (not (action_completed ?actor ?recipient ?object))) ; Ensure the action hasn\u2019t already occurred\n  :effect (and \n      (action_completed ?actor ?recipient ?object) ; Marks the action as completed\n      (appreciation_shown ?actor ?recipient)       ; Appreciation or acknowledgment is shown to the recipient\n      (object_used ?actor ?object)                ; The object is used or given\n      (budget_updated ?actor))",
    "(:action review ; Review a resource and update its status based on the specific review context\n  :parameters (?p - person ?resource - object ?aspect - aspect)\n  :precondition (and (has_resource ?p ?resource) (relevant_aspect ?resource ?aspect) (not (reviewed ?p ?resource ?aspect)))\n  :effect (reviewed ?p ?resource ?aspect))",
    "(:action spot ; Observe and identify an entity in a specific context\n  :parameters (?observer - person ?context - location ?entity - object)\n  :precondition (and (knows_about ?observer ?entity) (is_in ?observer ?context))\n  :effect (spotted ?observer ?context ?entity))",
    "(:action take\n    :parameters (?actor - agent ?item - object ?target - entity ?context - context)\n    :precondition (and \n        (in_context ?actor ?context) ; Actor is in the appropriate context/location\n        (available ?item)           ; Item/resource is available\n        (not (used_or_taken ?actor ?item ?target)) ; Item hasn't been used/taken for the target yet\n    )\n    :effect (and \n        (used_or_taken ?actor ?item ?target) ; Actor has used/taken the item for the target\n        (context_updated ?context)          ; Context/state is updated to reflect the action\n    )\n)",
    "(:action use ; Utilize a resource or item to achieve a task\n  :parameters (?actor - entity ?tool - object ?target - entity ?context - context)\n  :precondition (and \n      (has ?actor ?tool) ; Actor must possess the tool\n      (at ?actor ?context) ; Actor must be in the relevant context\n      (at ?target ?context) ; Target must be in the same context\n      (not (used ?tool ?target ?context))) ; Tool must not have already been used on the target in the context\n  :effect (and\n      (used ?tool ?target ?context) ; Marks the tool as used\n      (updated ?target ?tool ?context))",
    "(:action use_guest_book\n     :parameters (?player - person ?guest_book - object ?event - event ?location - context)\n     :precondition (and \n         (has ?player ?guest_book)\n         (at ?player ?location)\n         (at ?event ?location)\n         (not (used ?guest_book ?event ?location)))\n     :effect (and\n         (used ?guest_book ?event ?location)\n         (guest_book_filled ?guest_book ?event))",
    "(:action use_souvenir\n     :parameters (?player - person ?souvenir - object ?memory - event ?place - context)\n     :precondition (and \n         (has ?player ?souvenir)\n         (at ?player ?place)\n         (at ?memory ?place)\n         (not (used ?souvenir ?memory ?place)))\n     :effect (and\n         (used ?souvenir ?memory ?place)\n         (memory_preserved ?souvenir ?memory))",
    "(:action keep ; Retain an object from a location or context\n    :parameters (?actor - agent ?object - physical_entity ?context - context ?loc - location)\n    :precondition (and (at ?actor ?loc) (at ?object ?loc) (in_context ?context ?loc))\n    :effect (and (in_inventory ?actor ?object))",
    "(:action record ; Record an entity and update its state\n  :parameters (?agent - agent ?tool - object ?target - entity ?location - location)\n  :precondition (and \n      (at ?agent ?location) ; The agent must be at the specified location\n      (has_tool ?agent ?tool) ; The agent must have the required tool\n      (ready ?tool) ; The tool must be ready for use\n      (at ?target ?location) ; The target entity must be at the location\n      (not (recorded ?target)) ; The target entity must not already be recorded\n  )\n  :effect (and\n      (recorded ?target) ; The target entity is now recorded\n      (used ?tool) ; The tool is marked as used\n      (updated ?target ?agent) ; The target entity's state is linked to the agent\n  )\n)",
    "(:action spread ; Spread knowledge, resources, or information to update state\n  :parameters (?source - entity ?target - entity ?topic - object)\n  :precondition (and (at ?source location) (at ?target location) (not (informed ?target ?topic)))\n  :effect (and (informed ?target ?topic) (ongoing_discussion ?source ?target ?topic))",
    "(:action talk ; Engage in a conversation to inform, clarify, or update an entity's state\n    :parameters (?speaker - person ?listener - person ?topic - topic)\n    :precondition (and \n        (at ?speaker location) ; Ensures the speaker is present at the location\n        (at ?listener location) ; Ensures the listener is present at the location\n        (informed ?listener ?topic) ; Listener needs to already have basic knowledge of the topic\n        (not (updated ?listener ?topic)) ; The listener's state on the topic should not already be updated\n    )\n    :effect (updated ?listener ?topic) ; Updates the listener's state regarding the topic\n)\n```\n\n---\n\n### Explanation of the Merged Action:\n1. **Generality**:\n   - The merged action uses abstract parameters (`?speaker`, `?listener`, `?topic`) to generalize the action for a variety of conversational tasks, such as discussing puberty, answering questions, or clarifying topics.\n   - It avoids specifics like \"periods\" or \"honesty,\" making it adaptable to different contexts.\n\n2. **State Change**:\n   - The action focuses on gradually transforming the listener's state by updating their knowledge or perspective on a given topic (`?topic`).\n   - Preconditions ensure the listener already has some basic knowledge (`informed ?listener ?topic`) but their detailed understanding or outlook is not yet updated (`not (updated ?listener ?topic)`).\n\n3. **Core Logic**:\n   - Preconditions and effects are retained from the original actions but abstracted for broader use.\n   - For example, in the original \"talk_about_periods_positive\" action, the effect was to create a `positive_outlook`. This is generalized as updating the listener's state (`updated ?listener ?topic`).\n\n4. **Avoid Redundancy**:\n   - Redundant specifics about \"positive outlook\" or \"honesty\" are avoided, combining similar conversational contexts into one universal action.\n\n5. **Logical Consistency**:\n   - The preconditions and effects are logically consistent across different conversational tasks.\n   - The `at` precondition ensures both participants are in the same location, and the `informed` precondition ensures the conversation is meaningful (e.g., the listener already has some knowledge of the topic).\n\n---\n\n### Example Applications:\n1. **Original \"Talk About Periods Positively\" Task**:\n   ```lisp\n   (:action talk\n       :parameters (?p - parent ?d - daughter ?topic - puberty_periods)\n       :precondition (and \n           (at ?p home) \n           (at ?d home)\n           (informed ?d puberty_periods)\n           (not (updated ?d puberty_periods))",
    "(:action talk\n       :parameters (?teacher - person ?student - person ?topic - exam_questions)\n       :precondition (and \n           (at ?teacher classroom) \n           (at ?student classroom)\n           (informed ?student exam_questions)\n           (not (updated ?student exam_questions))\n       )\n       :effect (updated ?student exam_questions)\n   )",
    "(:action read ; Engage with a material and create a shared experience or personal growth\n    :parameters (?agent1 - person ?agent2 - person ?material - object)\n    :precondition (and \n        (at ?agent1 location) \n        (at ?agent2 location) \n        (available ?material))\n    :effect (and \n        (shared_experience ?agent1 ?agent2 ?material) \n        (knowledge_increased ?agent2))",
    "(:action reassure\n    :parameters (?actor - person ?receiver - person ?resource - object)\n    :precondition (and (at ?actor location) (at ?receiver location) (not (shared ?actor ?receiver ?resource)))\n    :effect (and (shared ?actor ?receiver ?resource) (confidence ?receiver task))",
    "(:action plan_event\n    :parameters (?host - person ?event - activity ?location - place ?resource - object ?guest - person)\n    :precondition (and (ready ?host ?event ?location) (not (event_executed ?event ?location)) (available ?resource))\n    :effect (and (event_executed ?event ?location) (guests_entertained ?location))",
    "(:action check\n    :parameters (?actor - person ?item - object)\n    :precondition (and (available ?actor) (not (checked ?actor ?item)))\n    :effect (checked ?actor ?item))",
    "(:action assign_role\n    :parameters (?assigner - person ?assignee - person ?role - task ?context - group)\n    :precondition (and (in ?assigner ?context) (in ?assignee ?context) (not (has_role ?assignee ?role ?context)))\n    :effect (has_role ?assignee ?role ?context))",
    "(:action watch ; Watch or listen to a resource and update task status\n  :parameters (?observer - person ?resource - object ?context - context)\n  :precondition (and (accessible ?observer ?context) \n                     (available ?resource ?context) \n                     (not (engaged_with ?observer ?resource)))\n  :effect (and (engaged_with ?observer ?resource) \n               (updated_status ?observer ?resource))",
    "(:action watch\n     :parameters (?p - player ?screen - device ?location - place)\n     :precondition (and (at ?p ?location) \n                        (party_prepared ?location) \n                        (has_device ?p ?screen) \n                        (not (engaged_with ?p debate)))\n     :effect (and (engaged_with ?p debate) \n                  (updated_status ?p debate))",
    "(:action watch\n     :parameters (?d - dad ?a - advice ?context - context)\n     :precondition (and (accessible ?d ?context) \n                        (available ?a ?context) \n                        (not (engaged_with ?d ?a)))\n     :effect (and (engaged_with ?d ?a) \n                  (gift_idea ?d ?a))",
    "(:action visit\n    :parameters (?actor - entity ?location_or_activity - entity ?goal - outcome)\n    :precondition (and \n        (interested_in ?actor ?goal)\n        (accessible ?location_or_activity)\n        (not (achieved ?actor ?goal)))\n    :effect (and \n        (visited ?actor ?location_or_activity)\n        (gained_knowledge ?actor ?goal)\n        (achieved ?actor ?goal))",
    "(:action visit\n    :parameters (?person - individual ?museum - location ?goal - outcome)\n    :precondition (and \n        (interested_in ?person african_american_history)\n        (accessible ?museum)\n        (not (achieved ?person african_american_history)))\n    :effect (and \n        (visited ?person ?museum)\n        (gained_knowledge ?person african_american_history)\n        (achieved ?person african_american_history))",
    "(:action visit\n    :parameters (?player - player ?game - activity ?goal - outcome)\n    :precondition (and \n        (interested_in ?player recreation)\n        (accessible ?game)\n        (not (achieved ?player recreation)))\n    :effect (and \n        (visited ?player ?game)\n        (gained_knowledge ?player recreation)\n        (achieved ?player recreation))",
    "(:action visit\n    :parameters (?person - individual ?lecture - event ?goal - outcome)\n    :precondition (and \n        (interested_in ?person black_culture)\n        (accessible ?lecture)\n        (not (achieved ?person black_culture)))\n    :effect (and \n        (visited ?person ?lecture)\n        (gained_knowledge ?person black_culture)\n        (achieved ?person black_culture))",
    "(:action participate\n    ; Engage in an activity or event, contributing to learning or community involvement\n    :parameters (?entity - individual ?activity - event ?context - location ?theme - topic)\n    :precondition (and \n        (associated ?entity ?context) ; The individual is linked to the context (e.g., school, club, organization)\n        (scheduled ?activity)         ; The activity/event is scheduled\n        (related_to ?activity ?theme) ; The activity aligns with the specified theme or purpose\n        (not (participated ?entity ?activity)) ; The individual has not yet participated\n    )\n    :effect (and \n        (participated ?entity ?activity)       ; Records participation in the activity/event\n        (gained_knowledge ?entity ?theme)      ; Indicates knowledge or experience gained on the theme\n        (strengthened_community ?context ?theme) ; Optionally represents broader impact on the context\n    )\n)",
    "(:action understand ; Process and comprehend a concept, event, or entity\n    :parameters (?actor - person ?concept - object ?context - location)\n    :precondition (and (at ?actor ?context) (has_access_to_information ?actor) (not (understood ?actor ?concept)))\n    :effect (and (understood ?actor ?concept))",
    "(:action stay ; Stay in a location to perform a task or mark an event\n    :parameters (?p - person ?l - location ?event - event_type)\n    :precondition (and (at ?p ?l) (not (completed ?p ?event)) (conditions_met ?event))\n    :effect (and (completed ?p ?event) (notified ?p ?event))",
    "(:action stay\n       :parameters (?p - person ?l - location ?event - event_type)\n       :precondition (and (at ?p ?l) (night_time) (not (completed ?p welcome_autumn)))\n       :effect (and (completed ?p welcome_autumn) (notified ?p welcome_autumn))",
    "(:action stay\n       :parameters (?p - person ?l - location ?event - event_type)\n       :precondition (and (at ?p ?l) (tools_available ?l) (not (completed ?p setup_autumn_monument)))\n       :effect (and (completed ?p setup_autumn_monument) (notified ?p setup_autumn_monument))",
    "(:action stay\n       :parameters (?p - person ?l - location ?event - event_type)\n       :precondition (and (at ?p ?l) (festival_starting ?l) (not (completed ?p attend_festival)))\n       :effect (and (completed ?p attend_festival) (notified ?p attend_festival))",
    "(:action express ; Express thoughts, feelings, or creativity in a location\n    :parameters (?p - person ?l - location ?state - state ?expression - expression_type)\n    :precondition (and (at ?p ?l) (has_state ?p ?state))\n    :effect (and (expressed ?p ?expression ?l))",
    "(:action express\n      :parameters (?p - person ?l - location)\n      :precondition (and (at ?p ?l) (has_state ?p inspired))\n      :effect (and (expressed ?p creative_expression ?l))",
    "(:action express\n      :parameters (?p - person ?l - location)\n      :precondition (and (at ?p ?l) (has_state ?p observing_fall))\n      :effect (and (expressed ?p fall_awe ?l))",
    "(:action improve ; Improve the state of an entity in a specific context\n    :parameters (?entity - object ?context - location_or_situation)\n    :precondition (and (present ?entity ?context) (eligible_for_improvement ?entity ?context))\n    :effect (and (state_improved ?entity ?context))",
    "(:action improve_health\n       :parameters (?person - person ?location - location)\n       :precondition (and (present ?person ?location) (eligible_for_improvement ?person ?location))\n       :effect (and (state_improved ?person ?location))",
    "(:action turn_home_into_haven\n       :parameters (?home - location)\n       :precondition (and (present ?home ?context) (eligible_for_improvement ?home ?context))\n       :effect (and (state_improved ?home ?context))",
    "(:action improve_skill\n       :parameters (?person - person ?skill - skill)\n       :precondition (and (present ?person ?context) (eligible_for_improvement ?person ?context))\n       :effect (and (state_improved ?person ?context))",
    "(:action honor ; Honor a tradition, event, or activity based on context\n    :parameters (?actor - person ?context - object ?location - place)\n    :precondition (and \n        (at ?actor ?location) \n        (prepared ?context) \n        (not (honored ?context ?actor))\n    )\n    :effect (and \n        (honored ?context ?actor)\n    )",
    "(:action invite ; Invite individuals to a gathering and update their status\n    :parameters (?host - person ?guest - person ?location - location)\n    :precondition (and (at ?host ?location) (not (invited ?guest ?location)) (has_contact_info ?guest))\n    :effect (and (invited ?guest ?location) (gathering_planned ?location) (aware_of_event ?guest))",
    "(:action attend ; Attend an event or activity and update participation state\n    :parameters (?participant - individual ?event - activity ?location - location)\n    :precondition (and \n        (at ?participant ?location)\n        (hosted_at ?event ?location)\n        (available ?event)\n        (interested_in ?participant ?event)\n    )\n    :effect (and \n        (attended ?participant ?event)\n        (gained_experience ?participant ?event)\n        (not (available ?event))",
    "(:action answer ; Provide a response/action to a query or interaction\n  :parameters (?agent - person ?recipient - person ?interaction - interaction_type)\n  :precondition (and \n                 (at ?agent home) \n                 (at ?recipient home) \n                 (initiated ?recipient ?interaction) \n                 (not (resolved ?interaction)))\n  :effect (and \n           (resolved ?interaction) \n           (trust ?recipient ?agent))",
    "(:action contemplate ; Reflect on a subject or improve state of being\n    :parameters (?p - person ?subject - concept ?l - location)\n    :precondition (and (at ?p ?l) (quiet_environment ?l) (not (contemplated ?p ?subject)))\n    :effect (and (contemplated ?p ?subject))",
    "(:action tend\n    :parameters (?p - person ?target - object ?location - location ?tools - item)\n    :precondition (and \n        (at ?p ?location) \n        (available ?tools ?location) \n        (not (tended ?target ?location))\n    )\n    :effect (and \n        (tended ?target ?location) \n        (connected_to_nature ?p)\n    )",
    "(:action decide ; Make a decision about a task or resource\n    :parameters (?actor - agent ?task - task ?target - object)\n    :precondition (and \n        (ready_for_decision ?task) ; Task is ready for a decision\n        (not (decision_made ?task ?target)) ; Decision has not been made yet\n    )\n    :effect (and \n        (decision_made ?task ?target) ; Mark the decision as made\n        (task_updated ?task ?target) ; Update the task state\n    )\n)",
    "(:action have ; Perform an operation to possess, consume, or interact with a resource\n    :parameters (?actor - agent ?item - object)\n    :precondition (and \n        (available ?actor) ; Actor must be available\n        (possessable ?item) ; Item must be eligible for possession or interaction\n        (not (acquired ?actor ?item)) ; Actor has not yet acquired or interacted with the item\n    )\n    :effect (and \n        (acquired ?actor ?item) ; Actor now possesses or has interacted with the item\n        (state_changed ?item) ; Item's state has been updated to reflect the interaction\n    )\n)",
    "(:action have\n    :parameters (?p - player ?c - cake)\n    :precondition (and \n        (available ?p)\n        (possessable ?c)\n        (special ?c)\n        (not (acquired ?p ?c))\n    )\n    :effect (and \n        (acquired ?p ?c)\n        (cake_eaten ?c)\n        (state_changed ?c)\n    )",
    "(:action have\n    :parameters (?p - person ?b - book)\n    :precondition (and \n        (available ?p)\n        (possessable ?b)\n        (not (acquired ?p ?b))\n    )\n    :effect (and \n        (acquired ?p ?b)\n        (checked_out ?b)\n        (state_changed ?b)\n    )",
    "(:action have\n    :parameters (?worker - person ?tool - object)\n    :precondition (and \n        (available ?worker)\n        (possessable ?tool)\n        (not (acquired ?worker ?tool))\n    )\n    :effect (and \n        (acquired ?worker ?tool)\n        (in_use ?tool)\n        (state_changed ?tool)\n    )",
    "(:action theme ; Assign a theme or categorize a resource to transform its state\n    :parameters (?agent - entity ?resource - task)\n    :precondition (and (prepared ?agent) (not (themed ?resource 100)))\n    :effect (themed ?resource 100)\n)",
    "(:action showcase ; Showcase or highlight an event, resource, or achievement\n    :parameters (?agent - entity ?audience - group ?location - place ?subject - topic ?duration - time)\n    :precondition (and (in ?agent ?location) (engaged ?audience) (prepared ?location) (ready ?subject))\n    :effect (and (highlighted ?agent ?subject ?audience ?duration))"
]