[
    "(:action cook\n  :parameters (?p - player ?item1 - entity ?item2 - entity ?tool1 - tool ?tool2 - tool ?loc - location ?appliance - appliance)\n  :precondition (and\n    (inventory ?p ?item1) ; The player has the primary item\n    (at ?item1 ?loc) ; The primary item is at the location\n    (at ?item2 ?loc) ; The secondary item (if any) is at the location\n    (clean ?tool1) ; The primary tool is clean\n    (at-tool ?tool1 ?loc) ; The primary tool is at the location\n    (clean ?tool2) ; The secondary tool (if any) is clean\n    (at-tool ?tool2 ?loc) ; The secondary tool (if any) is at the location\n    (at ?p ?loc) ; The player is at the location\n    (has-power ?appliance) ; The appliance is powered\n    (not (cooked_or_not ?item1 cooked)) ; The item is not yet cooked\n  )\n  :effect (and\n    (cooked_or_not ?item1 cooked) ; The primary item is cooked\n    (not (cooked_or_not ?item1 uncooked))",
    "(:action chill_beef\n    :parameters (?p - player ?gc - ground_chuck ?fridge - location)\n    :precondition (and (inventory ?p ?gc) (at ?p ?fridge) (prepared ?gc) (not (chilled ?gc)))\n    :effect (and (chilled ?gc) (not (prepared ?gc))",
    "(:action season_meat\n    :parameters (?p - player ?meat - meat ?seasoning - seasoning)\n    :precondition (and (inventory ?p ?meat) (inventory ?p ?seasoning) (not (seasoned ?meat)))\n    :effect (seasoned ?meat)\n)",
    "(:action chill\n  :parameters (?p - player ?item - object ?location - location ?condition - state)\n  :precondition (and (inventory ?p ?item) (at ?p ?location) (not (?condition ?item)))\n  :effect (and (?condition ?item))",
    "(:action chill\n  :parameters (?p - player ?gc - ground_chuck ?fridge - location ?condition - chilled)\n  :precondition (and (inventory ?p ?gc) (at ?p ?fridge) (not (chilled ?gc)))\n  :effect (and (chilled ?gc))",
    "(:action chill\n  :parameters (?p - player ?meat - meat ?kitchen - location ?condition - seasoned)\n  :precondition (and (inventory ?p ?meat) (at ?p ?kitchen) (not (seasoned ?meat)))\n  :effect (and (seasoned ?meat))",
    "(:action place ; Place an item and update its state\n    :parameters (?actor - agent ?item - object ?location - location ?tool - tool)\n    :precondition (and \n        (available ?actor) ; The actor must be available\n        (not (placed ?item ?location)) ; The item must not already be placed at the location\n        (at ?actor ?location) ; The actor must be at the location\n        (or \n            (and (inventory ?actor ?item)) ; The actor has the item in inventory\n            (and (clean ?tool) (at-tool ?tool ?location)) ; The tool is clean and at the location\n            (and (ready ?item) (at ?item ?location)) ; The item is ready and at the location\n            (and (shaped ?item)) ; The item is shaped (for specific tasks like cooking)\n        )\n    )\n    :effect (and\n        (placed ?item ?location) ; The item is now placed at the location\n        (not (inventory ?actor ?item))",
    "(:action check_doneness\n    :parameters (?p - player ?patty - patties)\n    :precondition (and (cooking ?patty) (not (checked ?patty)))\n    :effect (checked ?patty)\n)",
    "(:action check_burger_temperature\n    :parameters (?p - player ?grill - grill ?patty - patty)\n    :precondition (and (at ?p ?grill) (on_grill ?patty ?grill) (cooked ?patty))\n    :effect (and (inventory ?p ?patty) (not (on_grill ?patty ?grill))",
    "(:action check\n    :parameters (?agent - agent ?item - item ?location - location)\n    :precondition (and \n        (available ?agent) \n        (at ?agent ?location) \n        (or (and (cooking ?item) (not (checked ?item))) \n            (and (on_grill ?item ?location) (cooked ?item)))\n    )\n    :effect (and \n        (checked ?item) \n        (when (on_grill ?item ?location) \n            (and (inventory ?agent ?item) (not (on_grill ?item ?location))",
    "(:action serve\n    :parameters (?entity - entity ?location_before - location ?location_after - location ?condition_before - condition ?condition_after - condition)\n    :precondition (and \n        (at ?entity ?location_before)\n        (has_condition ?entity ?condition_before)\n        (not (served ?entity))\n    )\n    :effect (and\n        (at ?entity ?location_after)\n        (has_condition ?entity ?condition_after)\n        (served ?entity)\n    )",
    "(:action serve_burger\n    :parameters (?p - player ?patty - patties ?bun - item ?plate - location)\n    :precondition (and \n        (at ?patty ?grill)\n        (has_condition ?patty cooked)\n        (not (served ?patty))\n    )\n    :effect (and\n        (at ?patty ?plate)\n        (has_condition ?patty served)\n        (served ?patty)\n    )",
    "(:action serve_polenta\n    :parameters (?polenta - entity ?pot - location ?bowl - location ?stove - location)\n    :precondition (and\n        (at ?polenta ?pot)\n        (has_condition ?polenta hot)\n        (not (served ?polenta))\n    )\n    :effect (and\n        (at ?polenta ?bowl)\n        (has_condition ?polenta served)\n        (served ?polenta)\n    )",
    "(:action choose ;  Choose a resource and update its status\n  :parameters (?entity - entity ?location - location ?method - method ?appliance - appliance ?container - container)\n  \n  :precondition (and \n    (or (at ?entity ?location) (available ?appliance)) \n    (or (quality ?entity good) (type ?entity ground_beef) (frozen ?entity) (thickness ?entity <= 0.5) (empty ?container)) \n    (or (atLocation ?entity pantry) (atLocation ?entity fridge)) \n    (has_cleanliness ?location clean))\n  \n  :effect (and \n    (or (ready ?entity) (selected ?method) (ready-to-cook ?method) (inventory ?entity) (not (at ?entity fridge))",
    "(:action chop\n    ; Generic chopping action for various ingredients\n    :parameters (?ingredient1 - ingredient ?ingredient2 - ingredient ?tool1 - tool ?tool2 - tool ?loc - location)\n    :precondition (and\n        (at ?ingredient1 ?loc)\n        (at ?ingredient2 ?loc)\n        (at-tool ?tool1 ?loc)\n        (at-tool ?tool2 ?loc)\n        (clean ?tool1)\n        (clean ?tool2)\n    )\n    :effect (and\n        (chopped ?ingredient1)\n        (chopped ?ingredient2)\n        (not (whole ?ingredient1))",
    "(:action add\n  :parameters (?agent - entity ?target - entity ?location - entity ?context - context)\n  :precondition (and\n    (available ?agent)\n    (at_location ?target ?location)\n    (in_context ?context)\n    (not (added ?agent ?target ?context))\n  )\n  :effect (and\n    (added ?agent ?target ?context)\n    (context_state_changed ?context)\n  )",
    "(:action shape_burgers\n    :parameters (?bowl - tool ?burger - ingredient)\n    :precondition (and\n        (ready-to-shape ?bowl)\n        (clean ?bowl)\n    )\n    :effect (and\n        (shaped ?burger)\n        (not (ready-to-shape ?bowl))",
    "(:action shape ; Shape or transform an item using a tool\n    :parameters (?tool - tool ?item - object)\n    :precondition (and\n        (ready-to-shape ?tool)\n        (clean ?tool)\n    )\n    :effect (and\n        (shaped ?item)\n        (not (ready-to-shape ?tool))",
    "(:action write\n  ; Write a piece of content and update the paragraph's state\n  :parameters (?writer - writer ?content - content ?target - target)\n  :precondition (and (has_idea ?writer ?content) (is_empty ?target))\n  :effect (and (has_content ?target ?content) (not (is_empty ?target))",
    "(:action analyze ; Analyze and review a paragraph\n  :parameters (?p - writer ?para - paragraph)\n  :precondition (or (has_conclusion ?para ?conclusion) (analyzed ?para))\n  :effect (and \n    (imply (has_conclusion ?para ?conclusion) (analyzed ?para))",
    "(:action toast ; Perform a task on an item and update its status\n  :parameters (?item - object ?tool - object)\n  :precondition (and \n                 (atLocation ?item counter) \n                 (empty ?tool) \n                 (plain ?item))\n  :effect (and \n           (toasted ?item) \n           (flavorful ?item) \n           (not (plain ?item))",
    "(:action defrost ; Defrost an item and prepare it for cooking\n    :parameters (?p - person ?item - object ?loc - location)\n    :precondition (and \n        (at ?p ?loc) \n        (at ?item ?loc) \n        (or (temperature ?item cold) (clean ?item))\n        (or (ingredient ?item) (tool ?item))\n        (or (appliance ?item) (has-power ?item) (not (heated ?item)))\n    )\n    :effect (and \n        (or (temperature ?item room_temperature) (heated ?item))",
    "(:action finish ; Finish a task involving the preparation of items\n  :parameters (?p - player ?item1 - object ?item2 - object ?item3 - object ?container1 - container ?container2 - container ?loc - location)\n  :precondition (and (at ?p ?loc)\n                     (at ?item1 ?loc) (at ?item2 ?loc) (at ?item3 ?loc)\n                     (at ?container1 ?loc) (at ?container2 ?loc)\n                     (or (and (cooked_or_not ?item1 cooked) (location ?item1 in_skillet))\n                         (and (texture ?item1 smooth) (location ?item1 on_wax_paper))\n                         (and (texture ?item1 rigid) (location ?item1 in_pan)))\n                     (cooked_or_not ?item2 cooked)\n                     (texture ?item3 mixed))\n  :effect (and (or (location ?item1 in_bowl) (location ?item1 in_pan) (location ?item1 on_plate))",
    "(:action enjoy ; Enjoy a prepared item and update the enjoyment status\n    :parameters (?p - player ?item - object ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?item ?loc) (prepared ?item))\n    :effect (and (enjoyed ?item))",
    "(:action eat\n    :parameters (?p - player ?item - object)\n    :precondition (and (inventory ?p ?item) (cooked ?item) (tested ?item) (temperature ?item >= 140))\n    :effect (and (eaten ?item) (not (inventory ?p ?item))",
    "(:action flip ; Flip and process an item\n    :parameters (?item - object ?additional - object ?tool - tool)\n    :precondition (and\n        (in-tool ?item ?tool)\n        (processed_first_side ?item)\n        (available ?additional)\n    )\n    :effect (and\n        (flipped ?item)\n        (processed_second_side ?item)\n    )",
    "(:action prep ; Prepare an item by changing its state\n    :parameters (?p - player ?item - object ?loc - location ?state1 - state ?state2 - state)\n    :precondition (and (at ?p ?loc) (at ?item ?loc) (?state1 ?item))\n    :effect (and (?state2 ?item) (not (?state1 ?item))",
    "(:action prep_bread\n        :parameters (?p - player ?dough - bread_dough ?loc - location)\n        :precondition (and (at ?p ?loc) (at ?dough ?loc) (temperature ?dough cold) (location ?dough in_bowl))\n        :effect (and (temperature ?dough warm) (location ?dough on_wax_paper) (not (location ?dough in_bowl))",
    "(:action prep_sauce\n        :parameters (?p - player ?ingredients - sauce_ingredients ?bowl - mixing_bowl ?loc - location)\n        :precondition (and (at ?p ?loc) (at ?ingredients ?loc) (at ?bowl ?loc) (composition ?ingredients separate))\n        :effect (and (composition ?ingredients mixed) (location ?ingredients in_bowl) (not (composition ?ingredients separate))",
    "(:action cook_meat\n        :parameters (?p - player ?meat - meat ?loc - location)\n        :precondition (and (at ?p ?loc) (at ?meat ?loc) (state ?meat raw))\n        :effect (and (state ?meat cooked) (not (state ?meat raw))",
    "(:action prep ; Prepare an item by changing its state\n    :parameters (?p - player ?item - object ?loc - location ?state1 - state ?state2 - state)\n    :precondition (and (at ?p ?loc) (at ?item ?loc) (?state1 ?item))\n    :effect (and (?state2 ?item) (not (?state1 ?item))",
    "(:action preheat ; Preheat a device or resource\n    :parameters (?actor - agent ?device - object)\n    :precondition (and (at ?actor ?device) (not (on ?device)))\n    :effect (and (on ?device) (preheated ?device))"
]