[
    "(:action place\n    :parameters (?p - player ?item - object ?location - location ?container - container ?condition - condition)\n    :precondition (and \n        (available ?p)\n        (at ?p ?location)\n        (or \n            (and (inventory ?p ?item))\n            (and (at ?item in_hand))\n        )\n        (or\n            (and (at ?container on_table))\n            (and (at ?container in_hand))\n            (and (selected ?location))\n            (and (hole_dug ?location))\n            (and (roots_loosened ?item))\n            (and (wet_soil ?location))\n            (and (mulched ?location))\n        )\n        (or \n            (not (checked ?p ?item))\n            (not (in_bag ?item ?container))\n            (not (protected ?item))\n            (not (placed ?item ?location))\n            (not (filled ?location))\n            (not (watered ?item))\n            (not (grafted ?item ?container))\n        )\n    )\n    :effect (and \n        (or\n            (checked ?p ?item)\n            (in_bag ?item ?container)\n            (protected ?item)\n            (placed ?item ?location)\n            (filled ?location)\n            (watered ?item)\n            (grafted ?item ?container)\n        )",
    "(:action remove\n    :parameters (?p - player ?entity - object ?location - location ?tool - tool)\n    :precondition (and \n        (at ?p ?location) \n        (at ?entity ?location) \n        (or (and (in_container ?entity) (at ?container on_table))\n            (and (inventory ?p ?tool) (roots_dug ?entity))\n            (and (staked ?entity) (time_elapsed ?entity 1_year))\n            (and (cut_above_bud ?entity) (new_leaves ?entity))\n            (and (in_container ?entity ?container))\n        )\n    )\n    :effect (and \n        (or (at ?entity in_hand)\n            (root_ball_removed ?entity)\n            (not (staked ?entity))",
    "(:action prepare\n    :parameters (?p - player ?item1 - object ?item2 - object ?loc - location ?tool - tool)\n    :precondition (and \n        (at ?p ?loc) \n        (or \n            (and (inventory ?p ?tool) (topsoil_removed ?item1) (not (roots_dug ?item1)))\n            (and (dry ?item1) (not (wet ?item1)))\n            (and (planted ?item1) (budding ?item2) (cool_weather ?loc))\n            (and (inventory ?p ?tool) (not (hole_dug ?loc)))\n            (and (planted ?item1 ?loc) (filled ?loc) (not (built ?item2)))\n            (and (planted ?item1) (ready_to_graft ?item1 ?item2) (not (cut ?item1)))\n            (and (at ?p ?loc) (has_soil ?item1) (filled ?loc ?item2))\n        )\n    )\n    :effect (and \n        (or \n            (roots_dug ?item1)\n            (wet ?item1)\n            (ready_to_graft ?item1 ?item2)\n            (hole_dug ?loc)\n            (built ?item2) \n            (around ?item2 ?item1)\n            (cut ?item1)\n            (t_cut ?item1)\n            (created_berm ?loc)\n            (not (no_berm ?loc))",
    "(:action choose\n  :parameters (?p - player ?target - object)\n  :precondition (and \n                  (at ?p ?location)\n                  (or \n                    (and (at ?target selected) (not (dirt_around ?target)))\n                    (and (spring ?target) (fall ?target))\n                    (and (at ?target ?location) (not (selected ?target)))\n                    (and (available ?target) (not (inventory ?p ?target)))\n                  )\n                )\n  :effect (and \n            (or (dirt_around ?target) \n                (chosen_time ?p ?target)\n                (selected ?target)\n                (inventory ?p ?target)\n            )",
    "(:action check\n    :parameters (?actor - agent ?entity - object ?context - context)\n    :precondition (and (available ?actor) (not (checked ?actor ?entity)) (contextual_precondition ?context ?entity))\n    :effect (and (checked ?actor ?entity) (contextual_effect ?context ?entity))",
    "(:action loosen ; Loosen or prepare items or entities for a task\n    :parameters (?p - player ?item - object)\n    :precondition (and (available ?p) (or (and (at ?p ?item) (not (loosened ?item))) (and (extracted ?item) (not (loosened ?item))) (and (knows_transplant_date ?p ?item) (not (hardened ?item))) (and (in_pot ?item ?p) (not (fertilized ?p ?item)))))\n    :effect (and (or (loosened ?item) (hardened ?item) (fertilized ?p ?item))",
    "(:action add ; Add, mix, or tie items to change the state of an area or object\n    :parameters (?p - player ?item1 - object ?item2 - object ?loc - location)\n    :precondition (and (at ?p ?loc) (has_item ?item1) (has_item ?item2))\n    :effect (and (item_combined ?item1 ?item2 ?loc) (not (separate ?item1 ?item2))",
    "(:action maintain\n  :parameters (?agent - person ?entity - object ?task - task)\n  :precondition (and (assigned_task ?agent ?task) (not (task_completed ?agent ?entity ?task)))\n  :effect (task_completed ?agent ?entity ?task)\n)",
    "(:action maintain\n  :parameters (?agent - person ?boxwood - plant ?schedule - schedule)\n  :precondition (and (assigned_task ?agent maintain_watering_schedule) (not (task_completed ?agent ?boxwood maintain_watering_schedule)))\n  :effect (task_completed ?agent ?boxwood maintain_watering_schedule)\n)",
    "(:action maintain\n  :parameters (?agent - person ?garden - plot ?task - soil_test)\n  :precondition (and (assigned_task ?agent ?task) (not (task_completed ?agent ?garden ?task)))\n  :effect (task_completed ?agent ?garden ?task)\n)",
    "(:action maintain\n  :parameters (?agent - person ?plant - plant ?task - health_check)\n  :precondition (and (assigned_task ?agent ?task) (not (task_completed ?agent ?plant ?task)))\n  :effect (task_completed ?agent ?plant ?task)\n)",
    "(:action plan ; Plan a task related to a specific object and update the planning status\n    :parameters (?p - player ?obj - object)\n    :precondition (and (knows_transplant_date ?p ?obj) (not (planned ?obj)))\n    :effect (planned ?obj)\n)",
    "(:action cut\n  :parameters (?p - player ?item - object ?loc - location ?target - object)\n  :precondition (and \n                  (at ?p ?loc)\n                  (or \n                    (and (budding ?item) (healthy ?target) (part_of ?target ?item)) ; for cutting scion bud\n                    (and (healed ?item ?target) (branch_above_bud ?item)) ; for cutting above bud\n                    (and (at ?item ?loc) (yearly_pruning ?item)) ; for cutting back kumquat roots\n                    (and (has_attachment ?item ?target) (not (mowed ?loc))) ; for mowing reforested area\n                  )\n                )\n  :effect (and \n            (or \n              (and (not (part_of ?target ?item))",
    "(:action wait ; Wait for a certain condition to be fulfilled and update the status\n  :parameters (?entity1 - entity ?entity2 - entity)\n  :precondition (and (linked ?entity1 ?entity2) (in_progress ?entity1 ?entity2) (not (completed ?entity1 ?entity2)))\n  :effect (and (completed ?entity1 ?entity2))",
    "(:action use ; Use an item on a target and update the status\n    :parameters (?user - agent ?target - object ?item - object)\n    :precondition (and (available ?user) (not (used ?target ?item)))\n    :effect (used ?target ?item)\n)",
    "(:action use :parameters (?user - gardener ?target - pot ?item - compost) :precondition (and (available ?user) (not (used ?target ?item))) :effect (used ?target ?item))",
    "(:action use :parameters (?user - mechanic ?target - machine ?item - tool) :precondition (and (available ?user) (not (used ?target ?item))) :effect (used ?target ?item))",
    "(:action keep ; Keep an item in a specific state or location\n :parameters (?item - object ?location - location)\n :precondition (and (in ?item ?location) (not (desired_state ?item ?location)))\n :effect (desired_state ?item ?location))",
    "(:action enjoy ; Enjoy a resource and update task status\n  :parameters (?p - person ?item - object)\n  :precondition (and (at ?p ?item) (prepared ?item))\n  :effect (and (satisfied ?p) (not (task_incomplete ?p))",
    "(:action move\n    :parameters (?entity - object ?loc1 - location ?loc2 - location ?agent - person)\n    :precondition (and (at ?entity ?loc1) (at ?agent ?loc1) (or (and (season summer) (sunlight ?loc2 ?hours) (>= ?hours 6)) (and (season winter) (has_window ?loc2 south_facing))))\n    :effect (and (not (at ?entity ?loc1))",
    "(:action order\n    :parameters (?actor - agent ?resource - object ?source - location)\n    :precondition (and (at ?actor ?source) (available ?resource ?source))\n    :effect (and (ordered ?resource ?source) (not (available ?resource ?source))",
    "(:action press ; Press or secure an item at a location\n  :parameters (?p - player ?tool - object ?item - object ?location - location)\n  :precondition (and (at ?p ?location) (exists (?condition - condition) (condition_met ?item ?location ?condition)) (inventory ?p ?tool))\n  :effect (secured ?item ?location)\n)",
    "(:action decide ; Decide on a course of action and update the entity's status\n  :parameters (?entity - agent ?option - choice)\n  :precondition (and (available ?entity) (not (decided ?entity ?option)))\n  :effect (decided ?entity ?option))",
    "(:action decide ; Decide on a course of action and update the entity's status\n       :parameters (?p - player ?loc - location)\n       :precondition (and (available ?p) (at ?p ?loc) (or (garden ?loc) (pot ?loc)) (not (decided ?p ?loc)))\n       :effect (decided ?p ?loc))",
    "(:action decide ; Decide on a course of action and update the entity's status\n       :parameters (?p - player ?time - time)\n       :precondition (and (available ?p) (not (decided ?p ?time)))\n       :effect (decided ?p ?time))",
    "(:action determine ; Determine and update status of a location or resource\n  :parameters (?agent - agent ?entity - entity ?context - context)\n  :precondition (and (at ?agent ?context) (not (determined ?agent ?entity ?context)))\n  :effect (determined ?agent ?entity ?context)\n)",
    "(:action research ; Research a subject and update knowledge status\n    :parameters (?entity - agent ?subject - object)\n    :precondition (and (knowledge ?entity ?subject) (not (knows_details ?entity ?subject)))\n    :effect (knows_details ?entity ?subject)\n)",
    "(:action prepare_for_task ; Prepare for a task by gradually updating state\n    :parameters (?agent - person ?object - item)\n    :precondition (and (ready ?agent) (not (prepared ?agent ?object)))\n    :effect (prepared ?agent ?object)\n)",
    "(:action unpack_tree\n    :parameters (?tree - bare_root_tree ?container - container ?p - player)\n    :precondition (and (at ?p ?container) (in ?tree ?container))\n    :effect (and (not (in ?tree ?container))",
    "(:action unpack ; Unpack an item from a container and update its location\n    :parameters (?item - object ?container - container ?agent - agent)\n    :precondition (and (at ?agent ?container) (in ?item ?container))\n    :effect (and (not (in ?item ?container))",
    "(:action plant ; Plant an entity in a suitable location\n    :parameters (?item - object ?loc - location ?p - player)\n    :precondition (and \n        (at ?p ?loc)\n        (not (planted ?item))\n        (or (and (in ?item ?container) (clean ?container) (has_good_drainage ?container))\n            (and (in ?item ?bucket))\n            (and (suitable_soil ?loc))\n            (and (hole_dug ?loc) (in_bag ?item ?bag))\n            (and (weed_free ?loc) (dug ?loc))\n        )\n    )\n    :effect (and \n        (planted ?item ?loc) \n        (not (in ?item ?container))",
    "(:action stake_tree\n       :parameters (?p - player ?tree - tree ?stake - stake ?area - area)\n       :precondition (and (at ?p ?area) (placed ?root_ball ?hole) (has_stake ?stake))\n       :effect (and (staked ?tree) (not (unstaked ?tree))",
    "(:action water_area\n       :parameters (?p - player ?area - area)\n       :precondition (and (at ?p ?area) (not (watered ?area)))\n       :effect (and (watered ?area) (not (dry ?area))",
    "(:action stake\n    :parameters (?p - player ?item - object ?location - area)\n    :precondition (and (at ?p ?location) \n                       (or (and (placed ?item ?location) (has_stake ?item))\n                           (and (not (watered ?location)))))\n    :effect (and (or (and (staked ?item) (not (unstaked ?item))",
    "(:action replant ; Replant an item to refresh its state\n  :parameters (?item - object ?location - container)\n  :precondition (and (in ?item ?location) (not (fresh ?item)))\n  :effect (fresh ?item)\n)",
    "(:action transplant ; Transplant an entity to a new location/state\n  :parameters (?entity - object ?source - location ?destination - location ?agent - person ?season - season ?compost - compost ?fertilizer - fertilizer)\n  :precondition (and \n                    (at ?entity ?source) \n                    (at ?agent ?source) \n                    (or (eq ?season spring) (eq ?season fall)) \n                    (not (at ?entity ?destination)) \n                    (not (in_ground ?entity)) \n                    (not (planted ?entity))\n                    (not (fertilized ?entity ?fertilizer))\n                    (not (composted ?entity ?compost))\n                    (not (cool_dark_location ?source))\n                )\n  :effect (and \n             (at ?entity ?destination) \n             (at ?agent ?destination) \n             (not (at ?entity ?source))",
    "(:action till_soil\n    :parameters (?p - player ?tool - tool ?area - area)\n    :precondition (and (at ?p ?area) (has_tool ?p ?tool) (not (tilled ?area)))\n    :effect (and (tilled ?area) (not (untouched_soil ?area))",
    "(:action dig_hole\n    :parameters (?p - player ?tool - tool ?spot - spot)\n    :precondition (and (at ?p ?spot) (has_tool ?p ?tool) (not (dug ?spot)))\n    :effect (and (dug ?spot) (not (undug ?spot))",
    "(:action till ; General action for preparing an area or spot using a tool\n    :parameters (?p - player ?tool - tool ?location - location)\n    :precondition (and (at ?p ?location) (has_tool ?p ?tool) (not (prepared ?location)))\n    :effect (and (prepared ?location) (not (unprepared ?location))",
    "(:action harvest ; Harvest a resource and update the state\n    :parameters (?entity - entity ?agent - person ?resource - object ?loc - location)\n    :precondition (and (at ?entity ?loc) (at ?agent ?loc) (ripe ?resource) (season ?season) (attached ?resource ?entity))\n    :effect (and (inventory ?agent ?resource) (not (attached ?resource ?entity))",
    "(:action apply ; Apply a treatment or resource to an entity\n    :parameters (?entity - object ?actor - person ?resource - object ?location - location ?condition - predicate)\n    :precondition (and (at ?entity ?location) (at ?actor ?location) (inventory ?actor ?resource) (condition ?entity))\n    :effect (and (not (condition ?entity))",
    "(:action apply\n      :parameters (?tree - kumquat ?p - player ?oil - neem_oil ?loc - location ?condition - has_pests)\n      :precondition (and (at ?tree ?loc) (at ?p ?loc) (inventory ?p ?oil) (has_pests ?tree spider_mites))\n      :effect (and (not (has_pests ?tree spider_mites))",
    "(:action contact ; Contact an entity and update contact status\n :parameters (?actor - agent ?entity - object)\n :precondition (and (at ?actor ?entity) (not (contacted ?entity)))\n :effect (contacted ?entity))"
]