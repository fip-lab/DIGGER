[
    "(:action choose\n    :parameters (?actor - agent ?item - object ?location - place)\n    :precondition (and (at ?actor ?location) (available ?item ?location))\n    :effect (and (chosen ?item) (not (available ?item ?location))",
    "(:action handle\n    :parameters (?agent - agent ?entity - entity ?location - location ?tool - tool)\n    :precondition (and (available ?agent)\n                       (at ?agent ?location)\n                       (chosen ?entity)\n                       (clean ?tool))\n    :effect (and (in_tool ?entity ?tool)\n                 (not (chosen ?entity))",
    "(:action handle_chuck_steak\n        :parameters (?p - player ?s - steak ?l - location ?pan - cookware)\n        :precondition (and (available ?p)\n                           (at ?p ?l)\n                           (chosen ?s)\n                           (clean ?pan))\n        :effect (and (in_pan ?s ?pan)\n                     (not (chosen ?s))",
    "(:action check_bestseller_list\n        :parameters (?npc - person ?book - book ?list - location ?tool - object)\n        :precondition (and (available ?npc)\n                           (at ?npc ?list)\n                           (chosen ?book)\n                           (clean ?tool)) ; Assuming the tool is some kind of list checker\n        :effect (and (in_tool ?book ?tool)\n                     (not (chosen ?book))",
    "(:action make\n  :parameters (?p - player ?item1 - item ?item2 - item ?appliance - appliance ?location - location)\n  :precondition (and \n    (at ?p ?location)\n    (inventory ?p ?item1)\n    (optional (inventory ?p ?item2))\n    (optional (at ?p ?appliance))\n    (optional (ready_to_cook ?item1))\n    (optional (seasoned ?item1))\n    (optional (raw ?item1))\n    (optional (is_stove ?appliance))\n    (optional (on ?appliance))\n    (optional (in_pan ?item1 ?item2))\n  )\n  :effect (and\n    (optional (marinade_prepared ?p))",
    "(:action serve\n    :parameters (?person - player ?item1 - entity ?item2 - entity ?container - entity ?location - location)\n    :precondition (and \n        (at ?person ?location)\n        (clean ?container)\n        (or (and (cooked ?item1) (is_bowl ?container))\n            (and (grilled ?item1) (at_location ?item1 on_grill))\n            (and (hot ?item1) (at_location ?item2 on_grill))\n            (and (inventory ?person ?item1) (inventory ?person ?item2) (steak_grilled ?item1)))\n    )\n    :effect (and \n        (not (at_location ?item1 on_grill))",
    "(:action cut ; Perform a cutting or testing action on an ingredient to check its state\n  :parameters (?agent - person ?item - ingredient)\n  :precondition (and\n    (available ?agent) ; The agent must be available to perform the action\n    (at ?item ?location) ; The item must be at a specific location\n    (cooked ?item) ; The item must be cooked or in a specific state\n    (not (tested ?item)) ; The item must not have been tested or cut yet\n  )\n  :effect (and\n    (cut_open ?item) ; The item is cut open\n    (exposed_inside ?item) ; The inside of the item is exposed\n    (tested ?item) ; The item is now tested\n  )\n)",
    "(:action mix\n    :parameters (?entity1 - entity ?entity2 - entity ?location - location)\n    :precondition (and\n        (at_location ?entity1 ?location)\n        (at_location ?entity2 ?location)\n        (not (mixed ?entity1 ?entity2))\n    )\n    :effect (and\n        (mixed ?entity1 ?entity2)\n        (not (separated ?entity1 ?entity2))",
    "(:action use_size_as_indicator\n       :parameters (?steak - ingredient)\n       :precondition (and\n         (cooked ?steak)\n         (at ?steak plate)\n       )\n       :effect (and\n         (size_checked ?steak)\n         (estimated_doneness ?steak)\n       )",
    "(:action cut_into_thickest_part\n       :parameters (?steak - ingredient)\n       :precondition (and\n         (cooked ?steak)\n         (at ?steak plate)\n         (has_knife ?agent)\n       )\n       :effect (and\n         (cut ?steak)\n         (visual_inspection_done ?steak)\n       )",
    "(:action perform_finger_test\n       :parameters (?steak - ingredient ?agent - person)\n       :precondition (and\n         (cooked ?steak)\n         (at ?steak plate)\n         (has_fingers ?agent)\n       )\n       :effect (and\n         (firmness_checked ?steak)\n         (estimated_doneness ?steak)\n       )",
    "(:action compare_firmness_to_face\n       :parameters (?steak - ingredient ?agent - person)\n       :precondition (and\n         (cooked ?steak)\n         (at ?steak plate)\n         (firmness_checked ?steak)\n         (has_face ?agent)\n       )\n       :effect (and\n         (doneness_estimated ?steak)\n       )",
    "(:action use ; Use a method to inspect or estimate the state of an item\n   :parameters (?agent - person ?item - object ?method - method)\n   :precondition (and\n     (cooked ?item)\n     (at ?item plate)\n     (available ?agent)\n     (not (used ?method ?agent ?item))\n     (or (and (method_type ?method size_indicator)\n              (not (size_checked ?item)))\n         (and (method_type ?method cutting)\n              (has_knife ?agent)\n              (not (cut ?item)))\n         (and (method_type ?method finger_test)\n              (has_fingers ?agent)\n              (not (firmness_checked ?item)))\n         (and (method_type ?method face_comparison)\n              (firmness_checked ?item)\n              (has_face ?agent)\n              (not (doneness_estimated ?item))))\n   )\n   :effect (and\n     (used ?method ?agent ?item)\n     (or (and (method_type ?method size_indicator)\n              (size_checked ?item)\n              (estimated_doneness ?item))",
    "(:action process_item ; Process an item with specified materials and tools\n    :parameters (?p - player ?item - object ?material1 - material ?material2 - material ?container - container ?tool - tool ?location - location)\n    :precondition (and\n        (inventory ?p ?item)\n        (inventory ?p ?material1)\n        (inventory ?p ?material2)\n        (inventory ?p ?container)\n        (inventory ?p ?tool)\n        (not (processed ?item))\n        (at ?p ?location))\n    :effect (and\n        (processed ?item)\n        (not (inventory ?p ?material1))",
    "(:action submerge\n  :parameters (?actor - person ?item - object ?container - object ?substance - object)\n  :precondition (and \n    (inventory ?actor ?item)\n    (inventory ?actor ?substance)\n    (inventory ?actor ?container)\n    (not (processed ?item))\n    (processable ?item ?substance)\n  )\n  :effect (and\n    (processed ?item)\n    (not (inventory ?actor ?substance))",
    "(:action top\n   :parameters (?p - player ?loc - location ?item1 - item ?item2 - item ?state - state)\n   :precondition (and (at ?p ?loc) (inventory ?p ?item1) (inventory ?p ?item2) (?state ?item1))\n   :effect (and (topped ?item1 ?item2) (not (inventory ?p ?item2))",
    "(:action brush ; Apply a substance to an item and update its state\n  :parameters (?entity - object ?substance - ingredient)\n  :precondition (and (prepared ?entity) (available ?substance))\n  :effect (and (coated ?entity ?substance) (enhanced ?entity))",
    "(:action apply ; Apply a substance to an item and update its state\n :parameters (?item - object ?substance - substance)\n :precondition (and (raw ?item) (room_temperature ?item) (available ?substance))\n :effect (and (seasoned ?item) (not (plain ?item))",
    "(:action marinate\n    :parameters (?entity - entity ?marinade - entity ?container - entity)\n    :precondition (and\n        (raw ?entity)\n        (room_temperature ?entity)\n        (available ?marinade)\n        (at_location ?entity in_package)\n        (has_openness ?entity closed)\n        (has_cleanliness ?container clean)\n        (at_location ?marinade in_bottle)\n        (has_openness ?marinade closed)\n    )\n    :effect (and\n        (marinated ?entity)\n        (flavorful ?entity)\n        (not (plain ?entity))"
]