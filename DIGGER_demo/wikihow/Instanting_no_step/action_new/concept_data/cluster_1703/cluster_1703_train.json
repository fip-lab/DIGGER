[
    "(:action add\n    ; Add a substance to a container and update its state\n    :parameters (?container - object ?substance - object)\n    :precondition (and \n        (container ?container)\n        (substance ?substance)\n        (not (sealed ?container))\n        (not (combined ?container))\n    )\n    :effect (and \n        (contains ?container ?substance)\n        (not (empty ?container))",
    "(:action use ; Use a resource to achieve a specific effect\n    :parameters (?actor - entity ?resource - object ?target - entity)\n    :precondition (and\n                    (available ?resource)\n                    (not (effect_applied ?target ?resource)))\n    :effect (and\n              (effect_applied ?target ?resource))",
    "(:action use\n      :parameters (?b - bottle ?c - clear-polish)\n      :precondition (and (available ?c) (not (effect_applied ?b ?c)))\n      :effect (and (effect_applied ?b ?c))",
    "(:action use\n      :parameters (?fabric - fabric ?peroxide - hydrogen_peroxide)\n      :precondition (and (available ?peroxide) (not (effect_applied ?fabric ?peroxide)))\n      :effect (and (effect_applied ?fabric ?peroxide))",
    "(:action use\n      :parameters (?fabric - fabric ?hairspray - hairspray)\n      :precondition (and (available ?hairspray) (not (effect_applied ?fabric ?hairspray)))\n      :effect (and (effect_applied ?fabric ?hairspray))",
    "(:action use\n      :parameters (?fabric - fabric ?bug_spray - bug_spray)\n      :precondition (and (available ?bug_spray) (not (effect_applied ?fabric ?bug_spray)))\n      :effect (and (effect_applied ?fabric ?bug_spray))",
    "(:action use\n      :parameters (?f - file ?s - strip ?n - nail)\n      :precondition (and (available ?f) (not (effect_applied ?s ?f)))\n      :effect (and (effect_applied ?s ?f))",
    "(:action use\n      :parameters (?p - player ?b - bottle ?t - thinner)\n      :precondition (and (available ?t) (not (effect_applied ?b ?t)))\n      :effect (and (effect_applied ?b ?t))",
    "(:action use\n      :parameters (?p - player ?b - bottle ?hw - hot_water)\n      :precondition (and (available ?hw) (not (effect_applied ?b ?hw)))\n      :effect (and (effect_applied ?b ?hw))",
    "(:action avoid\n  ; Avoid a certain harmful resource or interaction\n  :parameters (?entity - object ?resource - object)\n  :precondition (and (harmful ?resource) (interacts-with ?entity ?resource))\n  :effect (and (not (interacts-with ?entity ?resource))",
    "(:action avoid\n  ; Avoid a certain harmful resource or interaction\n  :parameters (?entity - object ?resource - object)\n  :precondition (and (harmful ?resource) (interacts-with ?entity ?resource))\n  :effect (and (not (interacts-with ?entity ?resource))",
    "(:action wipe ; Wipe an entity to change its state\n  :parameters (?p - person ?entity - object ?tool - tool)\n  :precondition (and \n    (has_tool ?p ?tool) \n    (or \n      (and (stained ?entity) (is_type ?entity nails) (is_type ?tool remover)) \n      (and (tacky ?entity) (is_type ?entity nail) (is_type ?tool alcohol_wipe))\n      (and (mostly_chipped ?entity) (is_type ?entity nails) (is_type ?tool cuticle_stick))\n      (and (stuck_cap ?entity) (is_type ?entity bottle) (is_type ?tool rubber_band))\n    )\n  )\n  :effect (and \n    (or \n      (and (not (stained ?entity))",
    "(:action paint\n    :parameters (?p - person ?item - object ?target - body-part)\n    :precondition (and \n        (has ?p ?item) \n        (or \n            (and (type ?item nail_polish) (glue_dry ?target))\n            (and (type ?item base_coat) (clean ?target))\n            (and (type ?item whitening_pencil) (clean ?target) (not (whitened ?target)))\n            (and (type ?item remover) (stained ?target))\n        )\n    )\n    :effect (and \n        (or \n            (and (type ?item nail_polish) (nails_painted ?target) (used ?item))",
    "(:action wait_for_chipping\n        :parameters (?p - player ?nails - nails)\n        :precondition (and (has_gel_polish ?nails) (not (mostly_chipped ?nails)))\n        :effect (mostly_chipped ?nails)\n    )",
    "(:action wait\n    :parameters (?entity - object ?state1 - state ?state2 - state)\n    :precondition (and (in_state ?entity ?state1) (not (in_state ?entity ?state2)))\n    :effect (in_state ?entity ?state2)\n)",
    "(:action peel\n    :parameters (?agent - person ?surface - object ?tool - tool)\n    :precondition (and\n        (attached ?surface)\n        (available ?tool)\n        (ready_to_peel ?surface))\n    :effect (and\n        (not (attached ?surface))",
    "(:action condition_nails\n    :parameters (?p - player ?nails - nails ?conditioner - nail_conditioner)\n    :precondition (and (bare_nails ?nails) (inventory ?p ?conditioner))\n    :effect (and (conditioned ?nails) (not (bare_nails ?nails))",
    "(:action wait_for_chipping\n    :parameters (?p - player ?nails - nails)\n    :precondition (and (gel_polish_applied ?nails) (not (mostly_chipped ?nails)))\n    :effect (mostly_chipped ?nails)\n)",
    "(:action insert_cuticle_stick\n    :parameters (?p - player ?nails - nails ?stick - cuticle_stick)\n    :precondition (and (mostly_chipped ?nails) (inventory ?p ?stick))\n    :effect (inserted_stick ?nails)\n)",
    "(:action peel_off_gel\n    :parameters (?p - player ?nails - nails ?stick - cuticle_stick)\n    :precondition (and (inserted_stick ?nails))\n    :effect (and (bare_nails ?nails) (not (gel_polish_applied ?nails))",
    "(:action condition\n    :parameters (?p - player ?subject - object ?tool - object ?resource - object)\n    \n    :precondition (and \n        (or (gel_polish_applied ?subject) (bare_nails ?subject))\n        (inventory ?p ?tool)\n        (inventory ?p ?resource))\n    \n    :effect (and \n        (when (gel_polish_applied ?subject) \n            (and (mostly_chipped ?subject)\n            (inserted_stick ?subject)\n            (bare_nails ?subject)\n            (not (gel_polish_applied ?subject))",
    "(:action gather\n  ; Generic action to gather resources, choose items, or select materials\n  :parameters (?p - person ?item - object ?location - location)\n  :precondition (and \n    (at ?p ?location) \n    (available ?item ?location)\n    (not (has ?p ?item)) \n    (or \n      (not (chosen ?item))\n      (not (selected ?item))\n    )\n  )\n  :effect (and \n    (has ?p ?item) \n    (not (available ?item ?location))",
    "(:action open ; Open a resource and update its status\n    :parameters (?opener - agent ?item - object)\n    :precondition (and (available ?opener) (not (open ?item)) (or (closed ?item) (not (stuck_cap ?item))))\n    :effect (and (open ?item) (not (closed ?item))",
    "(:action examine\n    :parameters (?agent - entity ?item - object)\n    :precondition (and (available ?agent) (contains ?agent ?item) (not (examined ?item)))\n    :effect (examined ?item)\n)",
    "(:action air\n  :parameters (?p - player ?nail - nail ?s - strip)\n  :precondition (and\n    (or (placed ?s ?nail) (coated ?nail) (double_coated ?nail) (top_coated ?nail))\n    (drying ?nail))\n  :effect (and\n    (or (smooth ?s ?nail) (dry ?nail) (fully_dry ?nail))",
    "(:action enjoy\n    :parameters (?entity - object ?resource - object)\n    :precondition (and (protected ?resource) (not (satisfied ?entity)))\n    :effect (satisfied ?entity)\n)",
    "(:action store ; Store an item in a container\n  :parameters (?c - container ?i - item)\n  :precondition (and\n    (clean ?c)\n    (empty ?c)\n    (not (contains ?c ?i))\n  )\n  :effect (and\n    (contains ?c ?i)\n    (not (empty ?c))",
    "(:action allow ; Allow a process or state change to occur\n  :parameters (?entity - object ?condition - state)\n  :precondition (and (in_state ?entity ?condition) (not (blocked ?entity)))\n  :effect (state_changed ?entity ?condition)\n)",
    "(:action apply ; Apply a substance or tool to a target object and update state\n    :parameters (?p - person ?substance - object ?target - object)\n    :precondition (and\n        (has_tool ?p ?substance)\n        (clean ?target)\n        (not (applied ?substance ?target))\n    )\n    :effect (and\n        (applied ?substance ?target)\n        (if (or (is_glue ?substance) (is_gel ?substance))",
    "(:action let ; Universal action to wait for a transformation to complete\n  :parameters (?entity - object ?transformation - transformation)\n  :precondition (and (applied ?transformation ?entity))\n  :effect (completed ?transformation ?entity)\n)",
    "(:action let\n     :parameters (?nails - body-part ?transformation - glue_dry)\n     :precondition (and (glue_applied ?nails))\n     :effect (glue_dry ?nails)\n   )",
    "(:action let\n     :parameters (?nails - body-part ?transformation - nails_dry)\n     :precondition (and (nails_painted ?nails))\n     :effect (nails_dry ?nails)\n   )",
    "(:action decide ; Decide on the use of an item and update its status\n  :parameters (?entity - object)\n  :precondition (and \n    (disorganized ?entity)\n  )\n  :effect (and\n    (organized ?entity)\n    (selected_for_use ?entity)\n    (not (disorganized ?entity))",
    "(:action reuse ; Reuse a resource for a new purpose\n:parameters (?container - object ?content - object)\n:precondition (and\n  (clean ?container)\n  (empty ?container)\n  (not (contains ?container ?content))\n)\n:effect (and\n  (contains ?container ?content)\n  (not (empty ?container))"
]