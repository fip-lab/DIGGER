[
    "(:action perform_task\n    :parameters (?agent - entity ?target - entity ?tool - entity ?container - entity ?material - entity)\n    :precondition (and \n        (available ?agent) \n        (or \n            (and (fine-grain ?target) (empty ?container)) ; pour-sea-salt-into-bowl\n            (and (wet ?target) (not (wrung ?target))) ; wring-towels\n            (and (wrung ?target) (available ?material)) ; wrap-towels-with-cellophane\n            (and (wrapped ?target) (available ?material)) ; cover-body\n            (and (removed ?target ?tool) (empty ?container)) ; place-crust-in-bowl\n            (and (unselected ?target)) ; set-up-painting-area\n            (and (wet ?target) (available ?material)) ; sprinkle-salt\n            (and (boiling ?container) (crust-formed ?container) (available ?tool)) ; scrape-crust\n        )\n    )\n    :effect (and \n        (or \n            (and (in ?target ?container) (not (empty ?container))",
    "(:action add\n    :parameters (?actor - agent ?container - object ?item1 - object ?item2 - object ?attribute - attribute ?state1 - state ?state2 - state)\n    :precondition (and \n        (has ?actor ?item1) \n        (inContainer ?item1 ?container) \n        (inContainer ?item2 ?container) \n        (hasAttribute ?container ?state1) \n        (not (hasAttribute ?container ?state2))\n    )\n    :effect (and \n        (hasAttribute ?container ?state2) \n        (not (hasAttribute ?container ?state1))",
    "(:action store-crust\n  :parameters (?crust - solid ?container - container)\n  :precondition (and (dry ?crust) (empty ?container))\n  :effect (and (in ?crust ?container) (stored ?crust))",
    "(:action use-lemon-salt\n  :parameters (?lemon - lemon ?salt - salt ?container - container)\n  :precondition (and (fresh ?lemon) (dry ?salt) (empty ?container))\n  :effect (and (in ?lemon ?container) (in ?salt ?container) (preserved ?lemon ?salt))",
    "(:action store\n  :parameters (?item1 - object ?item2 - object ?container - container)\n  :precondition (and (available ?item1) (available ?item2) (empty ?container))\n  :effect (and (in ?item1 ?container) (in ?item2 ?container) (stored ?item1) (stored ?item2))",
    "(:action take\n  ; Abstract action to perform a task that involves changing the state of an entity\n  :parameters (?entity - object ?action-location - location)\n  :precondition (and (available ?entity) (not (in-use ?entity)) (precondition_met ?entity ?action-location))\n  :effect (and (in-use ?entity) (state_changed ?entity ?action-location))",
    "(:action purchase ; Purchase or select an item and update the state accordingly\n    :parameters (?agent - person ?item - object ?location - place)\n    :precondition (and\n        (not (has ?agent ?item))\n        (available ?item ?location)\n        (at ?agent ?location)\n        (has-money ?agent)\n    )\n    :effect (and\n        (has ?agent ?item)\n        (not (available ?item ?location))",
    "(:action make ; Make or prepare an item\n    :parameters (?agent - agent ?target - item ?tool - tool ?container - container)\n    :precondition (and \n        (available ?agent) \n        (not (completed ?target))\n        (or \n            (and (inBowl flour ?container) (inBowl salt ?container) (inBowl water ?container) (not (mixed ?container)))\n            (and (mixed ?target) (smooth ?target))\n            (and (decorated ?target) (not (baked ?target)) (atTemperature ?tool 350))\n            (and (wet ?target) (available ?tool))\n            (and (inPantry ?target) (empty ?container))\n        )\n    )\n    :effect (and \n        (completed ?target)\n        (or \n            (and (mixed ?container) (not (separate ?container))",
    "(:action divide\n    ; Divide a resource and update its state\n    :parameters (?resource - object ?container1 - container ?container2 - container ?location - location ?agent - person)\n    :precondition (and (at ?resource ?location) (empty ?container1) (empty ?container2) (available ?agent))\n    :effect (and (in ?resource ?container1) (in ?resource ?container2) (not (empty ?container1))",
    "(:action shape\n    :parameters (?entity - object ?form - form)\n    :precondition (and (modifiable ?entity) (not (shaped ?entity ?form)))\n    :effect (and (shaped ?entity ?form) (formOf ?form ?entity))",
    "(:action poke ; Poke or decorate an item to transform its state\n    :parameters (?entity - object ?decorator - person)\n    :precondition (and (available ?decorator) (shaped ?entity) (not (transformed ?entity)))\n    :effect (transformed ?entity)\n)",
    "(:action decorate-letters\n    :parameters (?l - letter)\n    :precondition (and (shaped ?l) (holes ?l) (not (decorated ?l)))\n    :effect (and (decorated ?l))",
    "(:action bake-letters\n    :parameters (?l - letter)\n    :precondition (and (shaped ?l) (not (baked ?l)))\n    :effect (and (baked ?l))",
    "(:action decorate ;  Decorate or prepare a letter\n    :parameters (?l - letter ?action - action-type)\n    :precondition (and (shaped ?l) \n                       (or (and (holes ?l) (not (decorated ?l)) (eq ?action decorate))\n                           (and (not (baked ?l)) (eq ?action bake))))\n    :effect (and (or (and (decorated ?l) (eq ?action decorate))",
    "(:action transform_state\n    :parameters (?entity - object ?location - location ?substance1 - substance ?substance2 - substance ?container - container ?appliance - appliance)\n    :precondition (and \n        (or (cold ?location) (separate ?substance1 ?substance2) (dry ?entity) (evenly-colored ?substance1 ?container) (in ?substance1 ?container) (on ?appliance ?container) (power-on ?appliance))\n        (or (empty ?container) (available ?substance2) (at ?container ?location))\n    )\n    :effect (and \n        (or (warm ?location) (mixed ?substance1 ?substance2 ?container) (wet ?entity) (dry ?substance1) (boiling ?container))",
    "(:action brush\n  :parameters (?entity - agent ?tool - object ?location - location ?cover - object)\n  :precondition (and\n    (or (clean ?tool) (available ?location) (has_lamp ?entity ?tool) (in ?tool ?location))\n    (or (ready ?entity) (covered ?entity ?cover) (monitored_sweating ?tool) (wet ?tool))\n    (not (or (exfoliated ?entity) (clean ?entity) (is_cleaned ?tool) (dry ?tool)))\n    (is_big_enough ?tool) ; Assumed necessary for consistency\n  )\n  :effect (and\n    (or (exfoliated ?entity) (clean ?entity) (is_cleaned ?tool) (dry ?tool))",
    "(:action use\n  :parameters (?agent - agent ?resource - resource ?target - target)\n  :precondition (and (available ?agent) (stored ?resource) (not (used ?resource ?target)))\n  :effect (and (used ?resource ?target) (not (plain ?target))",
    "(:action finish ; Complete a task involving a resource\n  :parameters (?entity - object)\n  :precondition (and (ready ?entity) (not (completed ?entity)))\n  :effect (and (completed ?entity) (not (incomplete ?entity))",
    "(:action monitor_salt_lamp_sweating\n       :parameters (?p - person ?l - lamp)\n       :precondition (and (has_lamp ?p ?l) (is_big_enough ?l) (not (monitored_sweating ?l)))\n       :effect (and (monitored_sweating ?l))",
    "(:action clean_lamp_and_check_build_up\n       :parameters (?p - person ?l - lamp)\n       :precondition (and (has_lamp ?p ?l) (not (cleaned ?l)))\n       :effect (and (cleaned ?l) (checked_build_up ?l))",
    "(:action monitor\n    ; Monitor a resource and update its status\n    :parameters (?p - person ?item - object)\n    :precondition (and (has_item ?p ?item) (not (monitored ?item)))\n    :effect (and (monitored ?item))",
    "(:action reduce\n  ; Abstractly reduce an entity's state through various transformations\n  :parameters (?entity - object ?state - state)\n  :precondition (and \n                  (inTransformableState ?entity ?state) ; Entity must be in a state that allows transformation\n                  (not (transformed ?entity ?state)))   ; Entity must not be already transformed\n  :effect (and \n            (transformed ?entity ?state)               ; Mark the entity as transformed\n            (not (inTransformableState ?entity ?state))",
    "(:action reduce-liquid\n    :parameters (?p - pot ?l - liquid)\n    :precondition (and (boiling ?l) (inPot ?l ?p))\n    :effect (and (reduced ?l) (not (boiling ?l))",
    "(:action add-salt-and-dry\n    :parameters (?item - object ?salt - ingredient)\n    :precondition (and (wet ?item) (has ?item ?salt))\n    :effect (and (dry ?item) (not (wet ?item))",
    "(:action play\n    :parameters (?entity - entity ?resource - resource)\n    :precondition (and (usable ?resource) (has ?entity ?resource) (not (engaged ?entity ?resource)))\n    :effect (and (engaged ?entity ?resource) (enjoyed ?entity ?resource))",
    "(:action measure ; Measure resources and update container status\n    :parameters (?resource1 - object ?resource2 - object ?container - container)\n    :precondition (and (empty ?container) (available ?resource1) (available ?resource2))\n    :effect (and (in ?resource1 ?container) (in ?resource2 ?container) (not (empty ?container))",
    "(:action hydrate\n    :parameters (?person - agent ?water - liquid)\n    :precondition (and (thirsty ?person) (available ?water))\n    :effect (and (hydrated ?person) (not (thirsty ?person))",
    "(:action warm-room\n    :parameters (?room - room ?heater - device)\n    :precondition (and (cold ?room) (available ?heater))\n    :effect (and (warm ?room) (not (cold ?room))",
    "(:action hydrate\n    :parameters (?entity - entity ?resource - resource)\n    :precondition (and (needs_resource ?entity) (available ?resource))\n    :effect (and (has_resource ?entity) (not (needs_resource ?entity))",
    "(:action apply ; Apply a substance or item to an entity\n  :parameters (?entity - agent ?item - object)\n  :precondition (and (clean ?entity) (available ?item))\n  :effect (applied ?entity ?item)\n)",
    "(:action let\n  :parameters (?entity - object ?state1 - state ?state2 - state)\n  :precondition (and (?state1 ?entity))\n  :effect (and (?state2 ?entity) (not (?state1 ?entity))"
]