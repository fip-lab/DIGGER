[
    "(:action trim ; Perform a grooming or styling operation to achieve desired hair or braid state\n    :parameters (?entity - object ?tool1 - object ?tool2 - object)\n    :precondition (and \n                    (requires_grooming ?entity)\n                    (available ?tool1) \n                    (available ?tool2))\n    :effect (and \n             (styled ?entity) \n             (not (requires_grooming ?entity))",
    "(:action hang ; Hang an item onto a support structure\n    :parameters (?item - object ?structure - object)\n    :precondition (and \n                    (not (hanging ?item)) \n                    (support_structure ?structure))\n    :effect (and \n             (hanging ?item) \n             (used ?structure))",
    "(:action style_braids ; Adjust or style braids to achieve a desired appearance\n    :parameters (?entity - object ?style - object ?tool - object)\n    :precondition (and \n                    (braided ?entity) \n                    (available ?tool))\n    :effect (and \n             (styled ?entity ?style) \n             (not (available ?tool))",
    "(:action tame ; Tame or manage an entity and update its state\n  :parameters (?entity - object ?tool - resource)\n  :precondition (and (needs_taming ?entity) (available ?tool))\n  :effect (and (tamed ?entity) (not (needs_taming ?entity))",
    "(:action create\n  :parameters (?p - person ?h - hair ?style - hairstyle ?components - set)\n  :precondition (and\n                  (available ?p)\n                  (inventory ?p ?h)\n                  (natural_hair ?h) ; Hair is in a natural state or usable for styling\n                  (knows_style ?p ?style) ; The person knows the technique for the style\n                  (valid_components ?h ?style ?components) ; Components are valid for the desired style\n                )\n  :effect (and\n           (styled ?h ?style) ; Hair is styled into the desired hairstyle\n           (knows_advanced_style ?p ?style) ; The person improves skill in the style\n           (updated_components ?h ?components) ; Components are updated to reflect the new style\n           (not (natural_hair ?h))",
    "(:action learn\n  :parameters (?entity - agent ?skill - skill ?resource - resource)\n  :precondition (and\n                  (not (knows ?entity ?skill))     ; The entity does not know the skill yet\n                  (prepared ?resource ?skill)      ; The resource is in the required state for learning\n                )\n  :effect (and\n            (knows ?entity ?skill)                ; The entity acquires the skill\n            (transformed ?resource ?skill)        ; The resource's state changes based on the skill learned\n          )\n)",
    "(:action try\n  ; Try a task or transformation, updating knowledge or entity state\n  :parameters (?entity - object ?actor - person ?pre_state - state ?post_state - state ?knowledge - knowledge_type)\n  :precondition (and\n                  (has-state ?entity ?pre_state) ; The entity must be in the prerequisite state\n                  (knows ?actor ?knowledge)      ; The actor must have knowledge of the task\n                )\n  :effect (and\n            (not (has-state ?entity ?pre_state))",
    "(:action cross ; Cross sections/items, update composition or structure\n  :parameters (?item1 - object ?item2 - object ?context - object)\n  :precondition (and \n      (not (crossed ?item1 ?item2))\n      (or \n          (and (near_hairline ?item1) (middle ?item2))\n          (and (near_side_part ?item1) (middle ?item2))\n          (and \n              (location ?item1 in_container) \n              (shape ?context loose) \n              (composition ?item1 random)\n          )\n      )\n  )\n  :effect (and \n      (crossed ?item1 ?item2)\n      (or \n          (and \n              (location ?item1 on_strip_of_elastic) \n              (shape ?context curved) \n              (composition ?item1 in_order)\n          )",
    "(:action braid ; Perform a braiding operation on various components\n    :parameters (?component1 - object ?component2 - object ?component3 - object ?tool - object)\n    :precondition (and \n        (prepared ?component1 ?component2 ?component3) ; Components are ready for braiding (e.g., in position, divided, or twisted)\n        (not (braided ?component1 ?component2 ?component3)) ; Components are not already braided\n        (available ?tool) ; The required tool (e.g., elastic, hook, or bead) is available\n    )\n    :effect (and \n        (braided ?component1 ?component2 ?component3) ; The components are now braided\n        (progress ongoing) ; Update progress state\n        (organized ?component1 ?component2 ?component3) ; The components are now organized (e.g., in order or folded)\n    )",
    "(:action zigzag\n    :parameters (?entity - object ?modifier1 - object ?modifier2 - object)\n    :precondition (and \n        (location ?modifier1 off_base_of ?modifier2)\n        (shape ?entity linear_or_ordered)\n        (composition ?modifier1 random_or_unarranged)\n    )\n    :effect (and \n        (location ?modifier1 on_base_of ?modifier2)\n        (shape ?entity alternated_or_curved)\n        (composition ?modifier1 arranged_or_in_order)\n    )",
    "(:action part ; Generalized action for dividing or separating an entity into sections\n    :parameters (?entity - object ?section1 - part ?section2 - part ?section3 - (either part null))\n    :precondition (and \n                    (not (partitioned ?entity)) ; Ensure the entity is not already partitioned\n                    (ready_for_partitioning ?entity) ; Ensure preconditions for partitioning are met\n                  )\n    :effect (and \n              (partitioned ?entity) ; Entity is now partitioned\n              (section ?section1) ; Section 1 is created\n              (section ?section2) ; Section 2 is created\n              (when (not (null ?section3))",
    "(:action part\n    :parameters (?r - wire_rope ?s1 - strand ?s2 - strand)\n    :precondition (and \n                    (not (partitioned ?r)) \n                    (strands-determined ?r)\n                  )\n    :effect (and \n              (partitioned ?r) \n              (section ?s1) \n              (section ?s2) \n              (not (strands-touching ?r))",
    "(:action part\n    :parameters (?h - hair ?h_left - section ?h_right - section)\n    :precondition (and \n                    (not (partitioned ?h)) \n                    (location ?h on_one_side) \n                    (state ?h ready_for_braiding)\n                  )\n    :effect (and \n              (partitioned ?h) \n              (section ?h_left) \n              (section ?h_right)\n            )",
    "(:action part\n    :parameters (?c - chunk ?s1 - section ?s2 - section ?s3 - section)\n    :precondition (and \n                    (not (partitioned ?c)) \n                    (gathered ?c)\n                  )\n    :effect (and \n              (partitioned ?c) \n              (section ?s1) \n              (section ?s2) \n              (section ?s3)\n            )",
    "(:action pull ; Perform a pulling operation to prepare and align an item\n  :parameters (?entity - object ?state1 - state ?state2 - state)\n  :precondition (and \n                  (?state1 ?entity) ; The entity is in the initial state\n                  (not (?state2 ?entity)) ; The entity is not yet in the final state\n                 )\n  :effect (and \n           (?state2 ?entity) ; The entity is now in the new state\n           (aligned ?entity) ; The entity is aligned or prepared for subsequent actions\n          )\n)",
    "(:action secure ; Secure an entity using a tool or object\n    :parameters (?entity - object ?tool - object)\n    :precondition (and \n                    (requires-securing ?entity)  ; The entity needs to be secured\n                    (tool-available ?tool)       ; A tool or securing object is available\n                  )\n    :effect (and \n              (secured ?entity)                ; The entity is now secured\n              (not (requires-securing ?entity))",
    "(:action begin ; Begin or progress a structured task, like braiding, with adaptable parameters\n :parameters (?entity - object ?s1 - section ?s2 - section ?s3 - section ?state - state ?location - area)\n :precondition (and \n   (structured ?entity)                 ; The entity (e.g., hair) must have a structured state\n   (sectioned ?s1 ?s2 ?s3)              ; The sections involved must be defined\n   (not (completed ?entity))            ; Task must not already be completed\n   (state ?s1 ?state)                   ; Sections must match the specified state (e.g., twisted, folded)\n   (state ?s2 ?state)\n   (state ?s3 ?state)\n   (location_check ?entity ?location)   ; Optional location precondition (e.g., near nape, left side)\n )\n :effect (and\n   (progress ?entity ongoing)           ; Update task status to ongoing\n   (state ?s1 braided)                  ; Transform sections to a braided state\n   (state ?s2 braided)\n   (state ?s3 braided)\n   (secured ?entity)                    ; Optional: Secure entity (e.g., tied off, completed)\n   (completed ?entity)                  ; Mark task as completed\n ))",
    "(:action add ; Generalized action for adding or modifying objects in a system\n  :parameters (?actor - entity ?target - object ?destination - location)\n  :precondition (and\n                  (available ?target)\n                  (not (added ?target ?destination))\n                  (can_modify ?actor ?target ?destination) ; Ensures the actor is capable of performing the task\n                 )\n  :effect (and\n           (added ?target ?destination) ; Marks the target as added to the destination\n           (not (available ?target))",
    "(:action add_strand_to_hairline_section\n  :parameters (?s - section ?strand - strand)\n  :precondition (and (near_hairline ?s) (available ?strand) (not (added ?strand ?s)))\n  :effect (and (added ?strand ?s) (not (available ?strand))",
    "(:action add_decoration_to_braid\n  :parameters (?b - braid ?d - decoration)\n  :precondition (and (tied_off ?b) (available ?d))\n  :effect (and (decorated ?b) (not (available ?d))",
    "(:action string-hook\n  :parameters (?h - hook ?s - strand)\n  :precondition (and (strand ?s) (hook ?h) (not (strung ?h ?s)))\n  :effect (strung ?h ?s)\n)",
    "(:action use ; Use an object to modify or enhance the state of another entity\n    :parameters (?user - agent ?tool - object ?target - entity)\n    :precondition (and \n        (state ?target modifiable) \n        (visibility ?tool visible)\n        (not (state ?target enhanced))\n    )\n    :effect (and \n        (state ?target enhanced) \n        (visibility ?tool invisible)\n    )",
    "(:action measure ; Measure and prepare a resource by dividing or cutting\n  :parameters (?resource - object ?part1 - object ?part2 - object ?part3 - object)\n  :precondition (and\n                  (found ?resource)\n                  (not (prepared ?resource))\n                )\n  :effect (and\n            (prepared ?resource)\n            (divided ?resource ?part1 ?part2 ?part3)\n          )",
    "(:action stretch ; Stretch an entity and establish relationships\n  :parameters (?entity - object ?anchor1 - object ?anchor2 - object)\n  :precondition (and\n                  (modifiable ?entity) ; The entity must be modifiable\n                  (attached ?entity ?anchor1) ; The entity must be attached to the first anchor\n                  (attached ?entity ?anchor2) ; The entity must be attached to the second anchor\n                  (not (stretched ?entity)) ; The entity must not already be stretched\n                )\n  :effect (and\n            (stretched ?entity) ; The entity is now stretched\n            (connected ?entity ?anchor1 ?anchor2) ; The entity is looped or connected to the anchors\n          )\n)",
    "(:action brush ; Brush an entity and update its state\n    :parameters (?entity - object ?tool - object)\n    :precondition (and (condition ?entity tangled) (location ?tool in_hand))\n    :effect (and (condition ?entity smooth) (focus ?tool on_entity))",
    "(:action manipulate_resource\n    :parameters (?agent - agent ?resource - object ?state - state)\n    :precondition (and (not (?state ?resource)) (can_manipulate ?agent ?resource))\n    :effect (and (?state ?resource))",
    "(:action manipulate_resource\n    :parameters (?agent - person ?hair - hair ?state - parted)\n    :precondition (and (not (parted ?hair)) (can_manipulate ?agent ?hair))\n    :effect (and (parted ?hair))",
    "(:action manipulate_resource\n    :parameters (?agent - person ?hair - hair ?state - grabbed)\n    :precondition (and (not (grabbed ?hair)) (can_manipulate ?agent ?hair))\n    :effect (and (grabbed ?hair))",
    "(:action manipulate_resource\n    :parameters (?agent - person ?book - object ?state - checked)\n    :precondition (and (not (checked ?book)) (can_manipulate ?agent ?book))\n    :effect (and (checked ?book))",
    "(:action ManipulateHairSection \n    :parameters (?h - hair ?s - section ?new_s - section)\n    :precondition (and \n        (parted ?h) \n        (not (selected ?s)) \n        (or (not (divided ?s)) (selected ?s)))\n    :effect (and \n        (selected ?s) \n        (divided ?s)\n        (created ?new_s))",
    "(:action TransformEntityState\n    :parameters (?entity - object ?aspect1 - attribute ?aspect2 - attribute ?actor - agent)\n    :precondition (and \n        (ready_for_transformation ?entity) \n        (not (transformed ?entity ?aspect1 ?aspect2)))\n    :effect (and \n        (transformed ?entity ?aspect1 ?aspect2)\n        (updated_state ?entity ?aspect1 ?aspect2 ?actor))",
    "(:action TransformEntityState\n    :parameters (?npc - person ?book - object)\n    :precondition (and \n        (ready_for_transformation ?book) \n        (not (transformed ?book checked ?npc)))\n    :effect (and \n        (transformed ?book checked ?npc)\n        (updated_state ?book checked ?npc ?npc))",
    "(:action TransformEntityState\n    :parameters (?section - section ?strand1 - strand ?strand2 - strand ?hairdresser - person)\n    :precondition (and \n        (ready_for_transformation ?section) \n        (not (transformed ?section ?strand1 ?strand2)))\n    :effect (and \n        (transformed ?section ?strand1 ?strand2)\n        (updated_state ?section ?strand1 ?strand2 ?hairdresser))",
    "(:action ModifyRelationship\n    :parameters (?entity1 - entity ?entity2 - entity ?relation - relation)\n    :precondition (and \n        (exists (?context - context) (in_context ?entity1 ?context))  ; Ensure the first entity is in a relevant context\n        (exists (?context - context) (in_context ?entity2 ?context))  ; Ensure the second entity is in a relevant context\n        (not (related ?entity1 ?entity2 ?relation)))                  ; Ensure the relationship does not already exist\n    :effect (related ?entity1 ?entity2 ?relation))",
    "(:action ManageHairStrands\n    :parameters (?h - hair ?strand1 - strand ?strand2 - strand)\n    :precondition (and \n        (parted ?h)\n        (knotted ?strand1 ?strand2)\n        (not (updated_strands ?strand1 ?strand2))\n    )\n    :effect (and \n        (updated_strands ?strand1 ?strand2)\n    )",
    "(:action ModifyState\n    :parameters (?actor - entity ?target - entity ?context - entity)\n    :precondition (and (current_state ?actor ?target ?context)\n                       (not (desired_state ?actor ?target ?context)))\n    :effect (and (desired_state ?actor ?target ?context))",
    "(:action ModifyState\n       :parameters (?npc - person ?book - book ?context - list)\n       :precondition (and (current_state ?npc ?book ?context)\n                          (not (desired_state ?npc ?book ?context)))\n       :effect (and (desired_state ?npc ?book ?context))",
    "(:action ModifyState\n       :parameters (?strand1 - strand ?strand2 - strand ?context - knotting)\n       :precondition (and (current_state ?strand1 ?strand2 ?context)\n                          (not (desired_state ?strand1 ?strand2 ?context)))\n       :effect (and (desired_state ?strand1 ?strand2 ?context))",
    "(:action ModifyState\n       :parameters (?leader - player ?member - player ?context - book_club)\n       :precondition (and (current_state ?leader ?member ?context)\n                          (not (desired_state ?leader ?member ?context)))\n       :effect (and (desired_state ?leader ?member ?context))",
    "(:action manage_braid_section\n    :parameters (?section - braid_section ?tool - object)\n    :precondition (and (prepared ?section) (not (finalized ?section)))\n    :effect (finalized ?section)\n)",
    "(:action Transform\n    :parameters (?entity - object ?context - object ?state - predicate)\n    :precondition (and (not (?state ?entity ?context)) (valid_context ?context ?entity))\n    :effect (and (?state ?entity ?context))",
    "(:action Transform\n        :parameters (?npc - person ?book - book ?state - predicate)\n        :precondition (and (not (?state ?npc ?book)) (valid_context ?book ?npc))\n        :effect (and (?state ?npc ?book))",
    "(:action Transform\n        :parameters (?section - hair ?hair - object ?state - predicate)\n        :precondition (and (not (?state ?section ?hair)) (valid_context ?hair ?section))\n        :effect (and (?state ?section ?hair))",
    "(:action Transform\n        :parameters (?member - person ?club - book_club ?state - predicate)\n        :precondition (and (not (?state ?member ?club)) (valid_context ?club ?member))\n        :effect (and (?state ?member ?club))",
    "(:action ManageHairState ; Manage the state of hair (e.g., braid, gather, twist into a bun)\n    :parameters (?h - hair ?s1 - state ?s2 - state ?style - hairstyle)\n    :precondition (and (has_state ?h ?s1) (not (has_state ?h ?s2)) (compatible ?s1 ?s2 ?style))\n    :effect (and (not (has_state ?h ?s1))",
    "(:action GatherBraidedHair\n      :parameters (?h - hair ?p - ponytail)\n      :precondition (and (has_state ?h braided) (not (has_state ?h gathered)) (compatible braided gathered ponytail))\n      :effect (and (not (has_state ?h braided))",
    "(:action TwistHairIntoBun\n      :parameters (?h - hair ?b - bun)\n      :precondition (and (has_state ?h gathered) (not (has_state ?h twisted)) (compatible gathered twisted bun))\n      :effect (and (not (has_state ?h gathered))",
    "(:action TwistIntoBun\n    :parameters (?entity - object ?state1 - state ?state2 - state)\n    :precondition (and (in_state ?entity ?state1) (not (in_state ?entity ?state2)))\n    :effect (and (not (in_state ?entity ?state1))",
    "(:action GatherHairAtCrown ; Gather hair into a specific position and prepare for styling\n    :parameters (?h - hair ?p - person)\n    :precondition (and (loose ?h) (not (styled ?h)) (at_position ?h ?p))\n    :effect (and (gathered ?h) (styling_started ?h))",
    "(:action PullHairFromSides ; Pull hair from the sides and incorporate into the braid\n    :parameters (?h - hair ?p - person)\n    :precondition (and (loose ?h) (braiding_started ?h) (available_on_sides ?h ?p))\n    :effect (and (added_to_braid ?h) (not (loose ?h))",
    "(:action ContinueBraiding\n    :parameters (?h - hair ?p - person ?source - part)\n    :precondition (and \n        (braiding_started ?h)\n        (not (braided ?h))\n        (loose ?source ?h)\n    )\n    :effect (and\n        (braided ?h)\n        (not (loose ?source ?h))",
    "(:action redo ; Redo a task to fix or transform a state\n    :parameters (?entity - object ?context - location)\n    :precondition (and (associated ?entity ?context) (requires_redo ?entity))\n    :effect (and (fixed ?entity) (not (requires_redo ?entity))",
    "(:action style_cornrows\n    :parameters (?c - cornrow ?b - bead ?e - elastic ?style - style_type)\n    :precondition (and \n        (location ?b off_strip)\n        (organization ?b random)\n        (shape ?c loose)\n        (style_available ?style)\n    )\n    :effect (and \n        (location ?b on_strip)\n        (organization ?b in_order_on_band)\n        (shape ?c banded)\n        (styled ?c ?style)\n    )",
    "(:action style_cornrows\n      :parameters (?c cornrow1 ?b bead1 ?e elastic1 ?style side_swept)\n      :precondition (and \n          (location bead1 off_strip)\n          (organization bead1 random)\n          (shape cornrow1 loose)\n          (style_available side_swept)\n      )\n      :effect (and \n          (location bead1 on_strip)\n          (organization bead1 in_order_on_band)\n          (shape cornrow1 banded)\n          (styled cornrow1 side_swept)\n      )",
    "(:action determine ; Determine a property or state of an entity\n  :parameters (?entity - object ?property - attribute)\n  :precondition (and (not (property-determined ?entity ?property)))\n  :effect (property-determined ?entity ?property)\n)",
    "(:action determine\n     :parameters (?r - wire_rope ?property - strands)\n     :precondition (not (property-determined ?r ?property))\n     :effect (property-determined ?r ?property)\n   )",
    "(:action determine\n     :parameters (?box - container ?property - color)\n     :precondition (not (property-determined ?box ?property))\n     :effect (property-determined ?box ?property)\n   )",
    "(:action PrepareHair\n    :parameters (?item - object ?p - person)\n    :precondition (and (not (prepared ?item)) (associated_with ?item ?p))\n    :effect (prepared ?item))",
    "(:action PrepareHair\n    :parameters (?h - hair ?p - person)\n    :precondition (and (not (smooth ?h)) (on_head ?h ?p))\n    :effect (smooth ?h))",
    "(:action transform_state ; Transform the state of an entity to achieve a goal state\n    :parameters (?entity - object ?agent - agent)\n    :precondition (and (requires_transformation ?entity) (associated_with ?entity ?agent) (not (transformed ?entity)))\n    :effect (transformed ?entity)\n)",
    "(:action transform\n  ; Transform a resource or entity's state\n  :parameters (?entity - object ?owner - agent)\n  :precondition (and (modifiable ?entity) (belongs_to ?entity ?owner) (not (transformed ?entity)))\n  :effect (transformed ?entity)\n)",
    "(:action transform\n  :parameters (?h - hair ?p - person)\n  :precondition (and (modifiable ?h) (belongs_to ?h ?p) (not (transformed ?h)))\n  :effect (transformed ?h)\n)",
    "(:action TransformEntity\n  :parameters (?entity - object ?state1 - state ?state2 - state ?context - context)\n  :precondition (and \n                 (in_state ?entity ?state1)\n                 (valid_context ?context ?entity ?state1 ?state2)\n                 (not (in_state ?entity ?state2)))\n  :effect (and \n           (not (in_state ?entity ?state1))",
    "(:action fashion_bracelet ; Fashion an item from materials\n    :parameters (?material - object ?item - object)\n    :precondition (and (prepared ?material) (not (fashioned ?item)))\n    :effect (fashioned ?item))",
    "(:action MakeNecklace ; Create an object by transforming resources\n    :parameters (?resource - object ?product - object)\n    :precondition (and (transformed ?resource) (not (created ?product)))\n    :effect (and (created ?product))",
    "(:action fashion_leather_item\n    :parameters (?l - leather ?item - accessory)\n    :precondition (and (braided ?l) (not (fashioned ?item)))\n    :effect (fashioned ?item)\n)",
    "(:action fashion_leather_item\n      :parameters (?l - leather ?b - bracelet)\n      :precondition (and (braided ?l) (not (fashioned ?b)))\n      :effect (fashioned ?b)\n  )",
    "(:action fashion_leather_item\n      :parameters (?l - leather ?r - ring)\n      :precondition (and (braided ?l) (not (fashioned ?r)))\n      :effect (fashioned ?r)\n  )",
    "(:action fashion_leather_item\n      :parameters (?l - leather ?n - necklace)\n      :precondition (and (braided ?l) (not (fashioned ?n)))\n      :effect (fashioned ?n)\n  )"
]