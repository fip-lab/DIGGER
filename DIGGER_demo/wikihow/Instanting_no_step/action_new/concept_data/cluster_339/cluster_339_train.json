[
    "(:action model_zipper_use\n    :parameters (?a - adult ?z - zipper)\n    :precondition (and\n        (has_knowledge ?a zipper_use)\n        (functional ?z)\n    )\n    :effect (and\n        (child_observing ?a ?z)\n        (child_acquires_knowledge zipper_use)\n    )",
    "(:action practice_zipping_with_help\n    :parameters (?a - adult ?c - child ?z - zipper)\n    :precondition (and\n        (functional ?z)\n        (child_observing ?a ?z)\n    )\n    :effect (child_acquires_knowledge zipper_use)\n)",
    "(:action model\n    :parameters (?instructor - person ?learner - person ?item - object ?skill - skill)\n    :precondition (and\n        (has_knowledge ?instructor ?skill)\n        (functional ?item)\n        (or (not (child_observing ?instructor ?item)) (child_observing ?instructor ?item))\n    )\n    :effect (and\n        (child_observing ?instructor ?item)\n        (child_acquires_knowledge ?skill)\n    )",
    "(:action clean ; Clean a resource and update its state\n  :parameters (?agent - person ?resource - object ?tool - object ?location - location)\n  :precondition (and \n                  (available ?agent)\n                  (at ?agent ?location)\n                  (at ?resource ?location)\n                  (functional ?tool)\n                  (or (dirty ?resource)\n                      (needs_cleaning ?resource)\n                      (child_practices_zipping ?agent ?resource)\n                      (inventory ?agent ?tool)))\n  :effect (and \n            (clean ?resource)\n            (not (dirty ?resource))",
    "(:action provide\n    :parameters (?actor - person ?recipient - entity ?item - object ?loc - location ?skill - skill_type)\n    :precondition (and\n        (at ?actor ?loc)\n        (at ?recipient ?loc)\n        (inventory ?actor ?item)\n        (or (is_healthy_food ?item)\n            (is_fluoridated ?item)\n            (zipping_made_easier ?item)\n            (type_winter_clothes ?item))\n        (or (child_focused ?recipient)\n            (not (difficult_to_wear ?item)))\n    )\n    :effect (and\n        (or (well_nourished ?recipient)\n            (teeth_strengthened ?recipient)\n            (child_practices_independently ?recipient ?item)\n            (child_improves_skill ?recipient ?skill)\n            (easy_to_wear ?item))",
    "(:action reward\n  ; Reward an entity for achieving a goal or improving a skill\n  :parameters (?actor - person ?entity - entity ?reward - reward_type)\n  :precondition (and\n    (goal_achieved ?entity ?task)\n    (entity_feels_encouraged ?entity)\n  )\n  :effect (and\n    (entity_receives_reward ?entity ?reward)\n    (entity_feels_accomplished ?entity)\n  )",
    "(:action make ; Create or modify an environment or entity to suit specific purposes\n    :parameters (?agent - person ?entity - object ?location - place)\n    :precondition (and\n        (available ?agent)\n        (not (prepared ?entity ?location))\n    )\n    :effect (and\n        (prepared ?entity ?location)\n        (engaged ?agent ?entity)\n    )",
    "(:action encourage\n  ; Encourage an entity to take responsibility and update task status\n  :parameters (?entity - person ?task - object)\n  :precondition (and\n    (available ?entity)\n    (not (responsible_for ?entity ?task))\n    (knowledge ?task)\n  )\n  :effect (and\n    (independent ?entity)\n    (responsible_for ?entity ?task)\n  )",
    "(:action load\n  :parameters (?agent - person ?item - object ?container - object)\n  :precondition (and\n                  (available ?agent)\n                  (not (loaded ?item ?container))\n                  (or \n                    (and (pre-rinsed ?item) (empty ?container))\n                    (and (type_summer_clothes ?item) (available ?container))\n                    (and (at ?agent laundromat) (has ?agent ?item) (usable ?container) (not (damaged ?item)))\n                    (and (long_dry_cycles ?container) (needs_efficiency ?container))\n                  ))\n  :effect (and\n            (loaded ?item ?container)\n            (or \n              (and (not (pre-rinsed ?item))",
    "(:action instruct\n  :parameters (?agent - person ?target - object ?knowledge - knowledge ?condition - condition)\n  :precondition (and (has-knowledge ?agent ?knowledge) (condition_met ?target ?condition))\n  :effect (and (knows ?agent ?knowledge) (condition_applied ?target ?condition) (ready ?target))",
    "(:action start ; Start and complete a process involving a resource\n    :parameters (?agent - person ?resource - object)\n    :precondition (and \n        (ready-to-start ?resource)\n        (soap-in-dishwasher ?resource) ; Specific to dishwashers, can be generalized to (resources-prepared ?resource)\n        (not (process-completed ?resource))\n    )\n    :effect (and \n        (process-running ?resource)\n        (not (ready-to-start ?resource))",
    "(:action inspect\n    :parameters (?agent - agent ?entity - entity)\n    :precondition (and (available ?agent) (not (inspected ?entity)))\n    :effect (and (inspected ?entity) (identified_issues ?entity))",
    "(:action inspect_dryer_vent\n    :parameters (?agent - person ?vent - dryer_vent)\n    :precondition (and (available ?agent) (not (inspected ?vent)) (exists_signs ?vent))\n    :effect (and (inspected ?vent) (identified_issues ?vent) (needs_cleaning ?vent))",
    "(:action inspect_blanket\n    :parameters (?agent - player ?blanket - electric_blanket)\n    :precondition (and (available ?agent) (at ?agent home) (has ?agent ?blanket) (not (damaged ?blanket)))\n    :effect (and (inspected ?blanket))",
    "(:action inspect_ears\n    :parameters (?agent - person ?child - person ?ear - ear)\n    :precondition (and (available ?agent) (has_ears ?child) (foreign_object_unknown ?ear))\n    :effect (and (inspected ?ear) (not (foreign_object_unknown ?ear))",
    "(:action limit ; Limit the use or action based on specific conditions\n  :parameters (?entity - object ?resource - object)\n  :precondition (and \n                  (in_use ?resource ?entity)\n                  (excessive_use ?resource))\n  :effect (and\n            (reduced_use ?resource)\n            (not (excessive_use ?resource))",
    "(:action establish\n    :parameters (?agent - entity ?activity - task ?item - object)\n    :precondition (and\n                    (not (routine_established ?agent ?activity))\n                  )\n    :effect (and\n              (routine_established ?agent ?activity)\n              (not (routine_absent ?agent))",
    "(:action avoid ; Avoid actions that may cause discomfort or harm\n  :parameters (?entity - entity ?item - object)\n  :precondition (and\n                   (not (willing ?entity ?item))\n                   (not (inserted ?item ?entity))\n                )\n  :effect (and\n            (not (forced ?entity ?item))",
    "(:action use ; Use an item to perform a task\n  :parameters (?user - person ?target - entity ?item - object ?loc - location)\n  :precondition (and (at ?user ?loc) (at ?target ?loc) (inventory ?user ?item) (is_usable ?item))\n  :effect (and (task_performed ?target ?item) (not (inventory ?user ?item))",
    "(:action floss ; Perform a dental hygiene task on a subject using a tool\n  :parameters (?actor - person ?subject - person ?tool - item ?location - location)\n  :precondition (and (at ?actor ?location) (at ?subject ?location) (inventory ?actor ?tool) (is_tool ?tool))\n  :effect (and (hygiene_task_done ?subject) (not (inventory ?actor ?tool))",
    "(:action visit ; Visit a location and perform a related task\n  :parameters (?person1 - person ?person2 - person ?location - location)\n  :precondition (and (at ?person1 ?location) (at ?person2 ?location) (is_relevant_location ?location))\n  :effect (and (task_completed ?person2))",
    "(:action dry ; Dry an item and update its state\n  :parameters (?item - object ?machine - machine ?p - person)\n  :precondition (and (at ?p location) (has ?p ?item) (washed ?item) (usable ?machine))\n  :effect (and (dry ?item) (not (wet ?item))",
    "(:action practice ; Facilitate practice or familiarity with a task or item\n    :parameters (?learner - entity ?mentor - entity ?object - object)\n    :precondition (and\n                    (requires_practice ?learner ?object)\n                    (functional ?object)\n                    (supported ?learner ?mentor)\n                  )\n    :effect (and\n              (practiced ?learner ?object)\n              (gains_confidence ?learner ?object)\n              (familiar_with ?learner ?object)\n              (not (unfamiliar_with ?learner ?object))",
    "(:action involve_young_children_in_safe_tasks\n    :parameters (?k - kids ?l - laundry)\n    :precondition (and\n        (availability ?k unmade)\n        (not (dangerous ?l))\n    )\n    :effect (and\n        (availability ?k created)\n        (participating_in_safe_tasks ?k ?l)\n    )",
    "(:action make_laundry_fun_for_older_kids\n    :parameters (?k - kids ?l - laundry)\n    :precondition (and\n        (availability ?k ready)\n        (not (dangerous ?l))\n    )\n    :effect (and\n        (availability ?k engaged)\n        (participating_in_fun_tasks ?k ?l)\n    )",
    "(:action involve\n    :parameters (?k - kids ?task - task)\n    :precondition (and\n        (availability ?k unmade) ; or use (availability ?k ready) for older kids\n        (not (dangerous ?task))\n    )\n    :effect (and\n        (availability ?k engaged) ; or use (availability ?k created) for young children\n        (participating_in_task ?k ?task)\n    )",
    "(:action dispose\n  ; Dispose of an item and update the status of the involved entities\n  :parameters (?entity - object ?container - object)\n  :precondition (and \n                 (collected ?entity)\n                 (empty ?container))\n  :effect (and \n           (disposed ?entity ?container)\n           (not (collected ?entity))",
    "(:action determine_water_temperature\n    :parameters (?p - person ?water - water ?station - workstation)\n    :precondition (and (at ?p ?station) (attribute ?water temperature cold))\n    :effect (and (attribute ?water temperature warm))",
    "(:action choose_detergent\n    :parameters (?p - person ?detergent - detergent ?laundry - laundry)\n    :precondition (and (at ?p ?laundry) (not (chosen ?detergent ?laundry)))\n    :effect (and (chosen ?detergent ?laundry))",
    "(:action determine ; Determine a resource attribute or choice and update status\n    :parameters (?p - person ?resource - object ?location - place ?attribute - attribute ?value - value ?new_value - value)\n    :precondition (and (at ?p ?location) (attribute ?resource ?attribute ?value))\n    :effect (and (attribute ?resource ?attribute ?new_value))"
]