[
    "(:action clean\n  :parameters (?item - object ?tool - utensil ?agent - person ?location - place ?substance - substance)\n  :precondition (and \n    (at ?item ?location)\n    (at ?agent ?location)\n    (has ?agent ?tool)\n    (not (cleaned ?item))\n    (or (clean ?tool) ; For tools like peeler\n        (and (has ?agent ?substance) ; For substances like vinegar\n             (not (mixed ?item ?substance)) ; For actions that mix items with substances\n        )\n    )\n  )\n  :effect (and\n    (cleaned ?item)\n    (or (dirty ?tool) ; For tools that get dirty after use\n        (mixed ?item ?substance) ; For items mixed with substances\n    )\n    (not (dirty ?item))",
    "(:action cool\n  :parameters (?item - object ?container - container ?location - location)\n  :precondition (and\n    (at ?container ?location)\n    (clean ?container)\n    (cooked ?item)\n    (not (cooled ?item))\n    (on ?item ?container)\n  )\n  :effect (and\n    (cooled ?item)\n    (not (hot ?item))",
    "(:action mash\n  :parameters (?ingredient - ingredient ?container - utensil ?tool - utensil ?additional_ingredient - ingredient ?additional_ingredient2 - ingredient)\n  :precondition (and\n    (prepared ?ingredient)\n    (at ?container kitchen_counter)\n    (at ?tool kitchen_counter)\n    (clean ?tool)\n    (at ?additional_ingredient kitchen_counter)\n    (at ?additional_ingredient2 kitchen_counter)\n  )\n  :effect (and\n    (transformed ?ingredient)\n    (dirty ?tool)\n    (dirty ?container)\n  )",
    "(:action select ; Select a specific type of goat cheese based on its condition or other resources for various purposes\n    :parameters (?p - person ?item - object)\n    :precondition (and (available ?item) (or (and (goat_cheese ?item) (or (and (fresh ?item) (not (aged ?item)) (not (soft_ripened ?item)))\n                                                  (and (aged ?item) (not (fresh ?item)) (not (soft_ripened ?item)))\n                                                  (and (soft_ripened ?item) (not (fresh ?item)) (not (aged ?item)))))\n                          (and (fish ?item) (learned ?p cooking_techniques) (knowledge_state ?item read))\n                          (and (liver ?item) (location ?item in_store) (availability ?p present))\n                          (and (sour_milk ?item) (condition ?item sour) (hunger_level ?p hungry) (growth_stage ?p chick_or_hen))))\n    :effect (or (selected ?item)\n                (and (has_ideas ?p ?item) (prepared ?p ?item))",
    "(:action use ; Universal action to use an item and update the environment\n    :parameters (?user - agent ?item - object ?context - context)\n    :precondition (and \n        (has ?user ?item) \n        (appropriate_context ?context ?item) \n        (not (used ?item ?context))\n    )\n    :effect (and \n        (used ?item ?context) \n        (updated_environment ?context ?item)\n    )",
    "(:action make\n    :parameters (?agent - agent ?item1 - object ?item2 - object ?item3 - object ?tool1 - tool ?tool2 - tool ?location - location)\n    :precondition (and \n        (inventory ?agent ?item1) \n        (inventory ?agent ?item2) \n        (inventory ?agent ?item3) \n        (available ?tool1 ?location)\n        (available ?tool2 ?location)\n    )\n    :effect (and \n        (not (inventory ?agent ?item1))",
    "(:action shape ; Shape an item and update its state\n    :parameters (?agent - entity ?source - resource ?target - form)\n    :precondition (and \n        (inventory ?agent ?source)\n        (raw ?source))\n    :effect (and \n        (shaped ?target ?source)\n        (not (raw ?source))",
    "(:action freeze ; Freeze or preserve an item based on specific conditions\n  :parameters (?entity - object ?freezer - freezer ?container - container ?ingredient - ingredient)\n  :precondition (and \n    (or (shaped ?entity) (inContainer ?entity ?container))\n    (or (empty ?freezer) (inFreezer ?freezer))\n    (or (not (frozen ?entity)) (mixed ?ingredient))\n  )\n  :effect (and \n    (frozen ?entity)\n    (preserved ?entity)\n    (not (empty ?freezer))",
    "(:action learn\n    ; General action for learning different types of knowledge and skills\n    :parameters (?p - person ?item - object ?location - place ?skill - skill_type)\n    :precondition (and (at ?p ?location) \n                       (knowledge_state ?item unread)\n                       (not (learned ?p ?skill)))\n    :effect (and (knowledge_state ?item read) \n                 (learned ?p ?skill))",
    "(:action place\n    :parameters (?p - person ?item - object ?container - container ?appliance - appliance)\n    :precondition (and\n        (owned ?p ?item)\n        (owned ?p ?container)\n        (owned ?p ?appliance)\n        (at ?p ?item)\n        (at ?p ?container)\n        (at ?p ?appliance)\n        (not (sealed ?container)) ; Ensure the container is open for placing items\n        (not (in ?item ?container)) ; Ensure item is not already in the container\n        (not (at ?item ?appliance)) ; Ensure item is not already at the appliance\n    )\n    :effect (and\n        (in ?item ?container) ; Place item inside the container\n        (not (at ?p ?item))",
    "(:action collect ; Collect a resource and update its state based on the task\n    :parameters (?entity1 - object ?entity2 - object)\n    :precondition (and (state ?entity1 initial_state) (condition ?entity2 initial_condition))\n    :effect (and (state ?entity1 updated_state) (condition ?entity2 updated_condition))",
    "(:action marinate ; Marinate an item and update inventory status\n    :parameters (?p - player ?item - object ?marinade - item ?seasoning - item)\n    :precondition (and (inventory ?p ?item) (inventory ?p ?marinade) (inventory ?p ?seasoning))\n    :effect (and (marinated ?item) (not (inventory ?p ?marinade))"
]