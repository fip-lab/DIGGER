[
    "(:action fill ; Fill an item with a resource and update its state\n :parameters (?actor - entity ?item - entity ?resource - entity ?location - location)\n :precondition (and (at ?actor ?location) \n                    (available ?resource) \n                    (not (filled ?item)) \n                    (not (in_use ?item))\n                    (not (clean ?item)))\n :effect (and (filled ?item) \n              (not (empty ?item))",
    "(:action prepare ; Prepare a resource and update task status\n  :parameters (?preparer - agent ?item - object ?location - location)\n  :precondition (and\n                  (at ?preparer ?location)\n                  (not (prepared ?item))\n                  (or (and (cloth_diapers ?item) (clean ?item) (wet ?item))\n                      (and (shirt ?item) (folded ?item) (clear ?location))\n                      (and (garment ?item) (bleach_safe ?item) (not (spread ?item)) (well_ventilated ?location))\n                      (and (glass_casserole_pan ?item) (empty ?item) (at ?acetone ?location))))\n  :effect (and \n            (prepared ?item)\n            (or (and (cloth_diapers ?item) (laid_flat ?item ?location))",
    "(:action choose ;  Choose an item based on specific criteria\n :parameters (?actor - entity ?item - object)\n :precondition (and \n                (available ?item) \n                (not (chosen ?item)))\n :effect (and \n          (chosen ?item)\n          (not (not_selected ?item))",
    "(:action bring ; Bring an item to a location\n  :parameters (?p - person ?item - object ?loc - location ?target_loc - location)\n  :precondition (and (at ?p ?loc) (not (at ?item ?target_loc)) (available ?item))\n  :effect (and (at ?item ?target_loc) (not (at ?item ?loc))",
    "(:action repeat_process\n    :parameters (?p - person ?item - object ?loc - location ?container - container ?utensil - utensil ?substance1 - substance ?substance2 - substance ?time - time_unit)\n    :precondition (and \n        (at ?p ?loc) \n        (available ?item) \n        (available ?container) \n        (available ?utensil) \n        (available ?substance1) \n        (available ?substance2)\n        (stains ?item) ; or (dirty ?item) or (problem ?item)\n    )\n    :effect (and \n        (treated ?item ?substance1) \n        (combined ?substance1 ?substance2 ?container) \n        (applied ?container ?utensil ?item) \n        (waited ?time) \n        (clean ?item) ; or (problem_solved ?item)\n        (not (stains ?item))",
    "(:action dry\n    :parameters (?entity - object ?location - location ?method - method)\n    :precondition (and \n        (at ?entity ?location) \n        (wet ?entity)\n        (not (dry ?entity))\n        (available ?method))\n    :effect (and \n        (dry ?entity) \n        (not (wet ?entity))",
    "(:action dry_diapers\n    :parameters (?p - player ?diapers - cloth_diapers ?dryer - dryer ?loc - location)\n    :precondition (and (at ?p ?loc) (inventory ?p ?diapers) (clean ?diapers) (not (wet ?diapers)) (available ?dryer))\n    :effect (and (dry ?diapers) (not (wet ?diapers))",
    "(:action dry_shirt\n    :parameters (?shirt - shirt ?loc - location ?method - method)\n    :precondition (and (at ?shirt ?loc) (wet ?shirt) (available ?method))\n    :effect (and (dry ?shirt) (not (wet ?shirt))",
    "(:action dry_towels\n    :parameters (?towel - towel ?drying_rack - drying_rack ?loc - location)\n    :precondition (and (at ?towel ?loc) (wet ?towel) (available ?drying_rack))\n    :effect (and (dry ?towel) (not (wet ?towel))",
    "(:action add ; General action to add various substances or objects to a container\n :parameters (?p - person ?container - container ?item - object ?state - state)\n :precondition (and \n                (at ?p ?container)\n                (not (contains ?container ?item))\n                (or (and (has_dispenser ?container) (not (contains ?container ?item)))\n                    (and (not (has_dispenser ?container)) (filled_with ?container ?state))\n                    (and (washer_state ?container running) (not (contains ?container ?item)))\n                    (and (available ?item))\n                    (and (clean_tool ?item))\n                    (and (has ?p ?item))))\n :effect (and \n          (contains ?container ?item)\n          (or (mixed ?container ?item)\n              (treated ?state)\n              (not (available ?item))",
    "(:action run ; Operate a machine and update its status\n  :parameters (?p - person ?machine - machine ?content1 - object ?content2 - object)\n  :precondition (and (at ?p ?machine) (machine_state ?machine heating) (contents ?machine ?content1) (contents ?machine ?content2))\n  :effect (and (machine_state ?machine running))",
    "(:action wait ; Wait for a condition to be met and update the state accordingly\n    :parameters (?entity - object ?condition - condition)\n    :precondition (and (applied ?entity ?condition) (not (fully_visible ?condition)))\n    :effect (and (fully_visible ?condition) (not (not_fully_visible ?condition))",
    "(:action rinse\n  :parameters (?agent - agent ?item - object ?water - resource)\n  :precondition (and\n    (available ?agent)\n    (soaked ?item ?water))\n  :effect (and\n    (rinsed ?item)\n    (not (soaked ?item ?water))",
    "(:action use ; Use a resource and update task status\n  :parameters (?p - player ?resource1 - object ?resource2 - object ?target - object ?location - place)\n  :precondition (and \n    (at ?p ?location) \n    (has ?p ?resource1) \n    (has ?p ?resource2) \n    (functional ?location)\n    (not (used ?p ?target))\n  )\n  :effect (and \n    (used ?p ?target) \n    (clean ?target) \n    (bleached ?target) \n    (not (dirty ?target))",
    "(:action sit ;  Perform sitting-related actions and update status\n    :parameters (?entity - entity ?condition - condition)\n    :precondition (and (suitable_condition ?entity ?condition) (not (state_changed ?entity ?condition)))\n    :effect (state_changed ?entity ?condition)\n)",
    "(:action check\n  ; Check a resource and update task status\n  :parameters (?agent - agent ?resource - resource)\n  :precondition (and (available ?agent)\n                     (not (checked ?agent ?resource)))\n  :effect (and (checked ?agent ?resource)\n               (when (has_tag ?resource)\n                 (checked_tag ?resource))",
    "(:action grate ; Grate an item and update container status\n  :parameters (?item - object ?container - container)\n  :precondition (and\n    (intact ?item)\n    (empty ?container)\n  )\n  :effect (and\n    (grated ?item)\n    (contains ?container ?item)\n    (not (intact ?item))",
    "(:action apply\n    :parameters (?agent - person ?target - object ?resource - object)\n    :precondition (and\n        (available ?agent)\n        (not (applied ?target ?resource))\n        (or \n            (and (selected ?resource) (flat ?target))\n            (and (mixed ?resource) (rinsed ?target))\n            (and (paste_made ?resource) (clean ?target))\n            (and (clean ?agent) (available ?resource))\n        )\n    )\n    :effect (and\n        (applied ?target ?resource)\n        (not (not_applied ?target ?resource))",
    "(:action sun ; Utilize sunlight for various tasks involving state transformation\n  :parameters (?agent - person ?item - object ?location - location ?condition - condition)\n  :precondition (and (at ?agent ?location) (has ?agent ?item) (satisfies ?location ?condition))\n  :effect (and (transformed ?item ?condition) (not (original_state ?item))",
    "(:action precondition-hair\n        :parameters (?hair - entity ?conditioner - entity)\n        :precondition (and (not (conditioned ?hair)) (available ?conditioner))\n        :effect (and (conditioned ?hair) (used ?conditioner))",
    "(:action juice_lemons\n        :parameters (?lemons - entity ?juicer - entity)\n        :precondition (and (not (juiced ?lemons)) (available ?juicer))\n        :effect (and (juiced ?lemons) (used ?juicer))",
    "(:action precondition\n    :parameters (?item - entity ?tool - entity)\n    :precondition (and (not (processed ?item)) (available ?tool))\n    :effect (and (processed ?item) (used ?tool))",
    "(:action juice ; Juice an entity and update its state\n    :parameters (?entity - entity ?container - entity)\n    :precondition (and (not (juiced ?entity)) (empty ?container))\n    :effect (and (juiced ?entity) (filled-with-juice ?container))",
    "(:action machine\n    ; Perform a generic machine-related task\n    :parameters (?entity - entity ?machine - machine)\n    :precondition (and\n                    (prepared ?entity)\n                    (operational ?machine))\n    :effect (and\n              (processed ?entity)\n              (not (prepared ?entity))",
    "(:action determine_neutralizing_agent\n    :parameters (?p - person ?n - neutralizer)\n    :precondition (and\n        (not (has_neutralizer ?p ?n))\n        (available ?n)\n    )\n    :effect (has_neutralizer ?p ?n)\n)",
    "(:action bleach_wood\n    :parameters (?worker - person ?wood - wood ?bleach - bleach)\n    :precondition (and\n        (available ?worker)\n        (available ?bleach)\n        (not (bleached ?wood))\n    )\n    :effect (bleached ?wood)\n)",
    "(:action determine ; Determine a resource and update its status\n    :parameters (?agent - person ?resource - object ?task - task)\n    :precondition (and\n        (available ?agent)\n        (available ?resource)\n        (not (task_done ?task ?resource))\n    )\n    :effect (task_done ?task ?resource)\n)"
]