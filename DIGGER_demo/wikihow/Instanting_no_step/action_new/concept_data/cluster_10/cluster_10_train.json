[
    "(:action look ; Look for information or recommendations\n    :parameters (?agent - person ?source - object ?context - context)\n    :precondition (and \n        (member ?agent ?context) \n        (not (has_info ?context ?source))\n    )\n    :effect (and \n        (has_info ?context ?source)\n    )",
    "(:action ask ; Ask for information, opinions, or suggestions\n    :parameters (?asker - person ?responder - person ?item - object ?context - group)\n    :precondition (and \n        (in ?asker ?context) \n        (in ?responder ?context) \n        (or \n            (and (not (has_recommendation ?context)) (member ?asker ?context) (member ?responder ?context)) ; Asking for recommendations\n            (and (chosen ?item) (not (has_opinion ?responder ?item))) ; Asking for opinions on an item\n            (and (not (suggestions_requested ?context))) ; Asking for suggestions\n        )\n    )\n    :effect (and \n        (or \n            (has_recommendation ?context) ; Recommendation asked and received\n            (has_opinion ?responder ?item) ; Opinion on an item received\n            (and (suggestions_requested ?context) (suggestions_received ?context))",
    "(:action visit ; Visit a resource to gather or update information\n  :parameters (?person - agent ?target - location ?info - information_type)\n  :precondition (and (member ?person ?target) (not (has_info ?target ?info)))\n  :effect (and (has_info ?target ?info))",
    "(:action visit_expert_websites\n    :parameters (?p - person ?bc - bookclub)\n    :precondition (and (member ?p ?bc) (not (has_expert_info ?bc)))\n    :effect (and (has_expert_info ?bc))",
    "(:action select\n    :parameters (?actor - person ?context - context ?item - object)\n    :precondition (and \n        (in ?actor ?context) ; The actor must be part of the relevant context (e.g., book club).\n        (relevant ?item ?context) ; The item must be relevant to the context.\n        (not (selected ?item ?context)) ; The item has not yet been selected in the context.\n    )\n    :effect (and \n        (selected ?item ?context) ; The item is now marked as selected in the context.\n        (updated_context ?context ?item))",
    "(:action select\n    :parameters (?p - person ?bc - book_club ?b - book)\n    :precondition (and \n        (in ?p ?bc) \n        (relevant ?b ?bc) \n        (complex ?b) \n        (not (selected ?b ?bc))\n    )\n    :effect (and \n        (selected ?b ?bc) \n        (updated_context ?bc ?b))",
    "(:action select\n    :parameters (?p - person ?bc - book_club ?sg - sub_genre)\n    :precondition (and \n        (in ?p ?bc) \n        (relevant ?sg ?bc) \n        (not (selected ?sg ?bc))\n    )\n    :effect (and \n        (selected ?sg ?bc) \n        (updated_context ?bc ?sg))",
    "(:action select\n    :parameters (?p - person ?bc - book_club ?tracker - person)\n    :precondition (and \n        (in ?p ?bc) \n        (relevant ?tracker ?bc) \n        (not (selected ?tracker ?bc))\n    )\n    :effect (and \n        (selected ?tracker ?bc) \n        (updated_context ?bc ?tracker))",
    "(:action pick ; Pick an item and update its status\n  :parameters (?p - person ?item - object ?context - context)\n  :precondition (and \n    (in_context ?p ?context) ; The person must be in the relevant context (e.g., book club, library, etc.)\n    (relevant ?item ?context) ; The item must be relevant to the context (e.g., matches theme, enjoyed by the person, available, etc.)\n    (not (selected ?item ?context)) ; The item must not already be selected\n  )\n  :effect (and \n    (selected ?item ?context) ; The item is marked as selected\n    (updated_status ?item ?context) ; Update the item's status in the context (e.g., book_selected, loaned, etc.)\n  )",
    "(:action avoid\n    :parameters (?agent - entity ?context - entity ?state - property)\n    :precondition (and (related ?agent ?context) (not (?state ?context)))\n    :effect (?state ?context))",
    "(:action avoid_stress\n       :parameters (?p - person ?bc - bookclub)\n       :precondition (and (member ?p ?bc) (not (stress_free ?bc)))\n       :effect (stress_free ?bc))",
    "(:action avoid_disorganization\n       :parameters (?leader - person ?team - group)\n       :precondition (and (leader ?leader ?team) (not (organized ?team)))\n       :effect (organized ?team))",
    "(:action strike\n    ; Establish agreements or deals to enable specific functionalities or benefits\n    :parameters (?actor - agent ?target - entity)\n    :precondition (and (in ?actor ?target) (not (has_deal ?target)))\n    :effect (and (has_deal ?target) (enabled_functionality ?target))",
    "(:action create\n    :parameters (?creator - person ?entity - object ?context - context)\n    :precondition (and \n        (can_create ?creator ?entity ?context) ; Abstract capability check\n        (not (exists (?entity) (is_created ?entity ?context))) ; Ensure entity not already created\n    )\n    :effect (and \n        (is_created ?entity ?context) ; Mark the entity as created in the context\n        (created_by ?creator ?entity ?context) ; Link the entity to the creator\n        (updated_context ?context) ; Optional, marks the context as updated\n    )\n)",
    "(:action start ; Start a task or activity, such as a book club or selecting books\n    :parameters (?p - person ?group - group ?item - object)\n    :precondition (and \n                   (in ?p ?group) \n                   (or (familiar_with ?p ?item) (has_interest ?p ?item)) \n                   (not (selected ?group ?item)))\n    :effect (and \n             (selected ?group ?item) \n             (active ?group))",
    "(:action offer ; Offer a resource, activity, or update to a group\n    :parameters (?entity - object ?group - group ?item - object)\n    :precondition (and (in ?entity ?group) (not (offered ?group ?item)))\n    :effect (and (offered ?group ?item))",
    "(:action offer\n      :parameters (?p - person ?bg - book_group ?activity - activity)\n      :precondition (and (in ?p ?bg) (not (offered ?bg ?activity)))\n      :effect (and (offered ?bg ?activity))",
    "(:action offer\n      :parameters (?admin - person ?website - platform ?update - object)\n      :precondition (and (in ?admin ?website) (not (offered ?website ?update)))\n      :effect (and (offered ?website ?update))",
    "(:action welcome ; Welcome an entity into a group or environment\n    :parameters (?p - person ?group - group ?entity - person)\n    :precondition (and (in ?p ?group) (not (in ?entity ?group)))\n    :effect (and (in ?entity ?group) (welcomed ?entity ?group))",
    "(:action set ; Universal action to configure and assign attributes or rules\n    :parameters (?p - person ?bc - book_club ?attribute - attribute ?value - value)\n    :precondition (and \n        (is_organizer ?p ?bc) ; The person must be an organizer of the book club\n        (has_member_list ?bc) ; The book club must have a member list\n        (not (set_attribute ?bc ?attribute ?value)) ; The attribute must not already be set\n    )\n    :effect (and \n        (set_attribute ?bc ?attribute ?value) ; The attribute is set with the specified value\n    )\n)",
    "(:action write\n    ; Write or recommend information, policies, or suggestions to update or share knowledge.\n    :parameters (?p - person ?receiver - entity ?context - context)\n    :precondition (and \n        (is_authorized ?p ?context) ; The person must be authorized to write in the context.\n        (relevant_context ?context) ; The context must be relevant for the action.\n        (not (written ?receiver ?context))) ; The receiver must not already have the written information.\n    :effect (and \n        (written ?receiver ?context) ; The receiver now has the written information.\n        (updated_state ?context))",
    "(:action write\n       :parameters (?p - person ?receiver - book_club ?context - loan_policy)\n       :precondition (and \n           (has_member_list ?receiver) \n           (is_organizer ?p ?receiver) \n           (not (written ?receiver ?context)))\n       :effect (and \n           (written ?receiver ?context) \n           (updated_state ?context))",
    "(:action write\n       :parameters (?p - person ?receiver - person ?context - book_recommendation)\n       :precondition (and \n           (knows ?p ?receiver) \n           (has_read ?p ?context) \n           (not (written ?receiver ?context)))\n       :effect (and \n           (written ?receiver ?context) \n           (updated_state ?context))",
    "(:action write\n       :parameters (?p - person ?receiver - book_forum ?context - book_recommendation)\n       :precondition (and \n           (is_active ?receiver) \n           (member ?p ?receiver) \n           (has_read ?p ?context) \n           (not (written ?receiver ?context)))\n       :effect (and \n           (written ?receiver ?context) \n           (updated_state ?context))",
    "(:action add\n  ; Add an item to a container or system and update ownership or availability status\n  :parameters (?actor - agent ?item - object ?container - location)\n  :precondition (and \n    (owns ?actor ?item) \n    (is_built ?container) \n    (not (in ?item ?container)))\n  :effect (and \n    (in ?item ?container) \n    (not (owns ?actor ?item))",
    "(:action join ; Join a group or entity to participate in related activities\n  :parameters (?entity - person ?group - group)\n  :precondition (and (is_active ?group) \n                     (not (member ?entity ?group)) \n                     (interested_in ?entity ?activity)) \n  :effect (and (member ?entity ?group))",
    "(:action venture ; Explore a category or resource and update its status\n    :parameters (?actor - person ?group - group ?resource - object)\n    :precondition (and (in ?actor ?group) (not (explored ?group ?resource)))\n    :effect (and (explored ?group ?resource) (includes ?group ?resource))",
    "(:action venture\n       :parameters (?p - person ?bc - book_club ?nf - nonfiction_book)\n       :precondition (and (in ?p ?bc) (not (explored ?bc ?nf)))\n       :effect (and (explored ?bc ?nf) (includes ?bc ?nf))",
    "(:action venture\n       :parameters (?p - person ?bc - book_club ?cr - romance_book)\n       :precondition (and (in ?p ?bc) (not (explored ?bc ?cr)))\n       :effect (and (explored ?bc ?cr) (includes ?bc ?cr))",
    "(:action read ; Read and analyze books to achieve insights or comparisons within a group\n  :parameters (?p1 - person ?p2 - person ?bc - book_club ?b1 - book ?b2 - book ?genre - genre)\n  :precondition (and \n    (in ?p1 ?bc) ; Participant 1 is part of the book club\n    (in ?p2 ?bc) ; Participant 2 is part of the book club\n    (includes_book ?bc ?b1) ; Book 1 is included in the book club's collection\n    (includes_book ?bc ?b2) ; Book 2 is included in the book club's collection\n    (focused_genre ?bc ?genre) ; The club has chosen a specific genre\n    (not (books_compared ?bc)) ; The books have not yet been compared\n  )\n  :effect (and \n    (books_compared ?bc) ; The books have been compared\n    (comparison_made ?b1 ?b2) ; A comparison between Book 1 and Book 2 has been made\n    (analyzed_genre ?bc ?genre) ; The genre has been analyzed during the reading process\n  )\n)",
    "(:action take ; Take a resource, task, or request and update state\n  :parameters (?actor - agent ?target - entity ?resource - object)\n  :precondition (and \n                  (associated ?actor ?target) ; The actor must be associated with the target (e.g., member of a group, participant in an activity)\n                  (not (has ?target ?resource))) ; The target does not already have the resource\n  :effect (and \n           (has ?target ?resource))",
    "(:action take\n     :parameters (?p - person ?bc - book_club ?req - request)\n     :precondition (and \n                     (member ?p ?bc)\n                     (not (has_request ?bc ?req)))\n     :effect (and \n              (has_request ?bc ?req))",
    "(:action take\n     :parameters (?manager - agent ?team - group ?task - task)\n     :precondition (and \n                     (manages ?manager ?team)\n                     (not (has_task ?team ?task)))\n     :effect (and \n              (has_task ?team ?task))",
    "(:action take\n     :parameters (?leader - person ?group - organization ?resource - resource)\n     :precondition (and \n                     (leader_of ?leader ?group)\n                     (not (has_resource ?group ?resource)))\n     :effect (and \n              (has_resource ?group ?resource))",
    "(:action peruse ; Analyze or review a resource and update its status\n    :parameters (?actor - agent ?group - collective ?resource - entity)\n    :precondition (and (member ?actor ?group) (not (reviewed ?group ?resource)))\n    :effect (and (reviewed ?group ?resource))",
    "(:action encourage\n    ; Encourage participation and contribution in a group\n    :parameters (?initiator - person ?group - group ?participant - person ?activity - activity)\n    :precondition (and \n        (member ?initiator ?group) ; Initiator must be a member of the group\n        (member ?participant ?group) ; Participant must be a member of the group\n        (not (encouraged ?group ?participant ?activity)) ; Activity must not already be encouraged\n    )\n    :effect (and \n        (encouraged ?group ?participant ?activity) ; Mark the activity as encouraged for the participant\n    )\n)",
    "(:action request\n    ; Request or assign a task to a person or entity, updating the associated state.\n    :parameters (?requester - person ?receiver - entity ?task - task ?context - context)\n    :precondition (and \n        (in ?requester ?context) ; The requester must be part of the context (e.g., club, library, etc.)\n        (in ?receiver ?context) ; The receiver must also be part of the context\n        (valid_task ?task ?context) ; The task must be valid for the given context\n        (not (completed ?receiver ?task)) ; The task must not already be completed by the receiver\n    )\n    :effect (and \n        (completed ?receiver ?task) ; Marks the task as completed by the receiver\n        (not (pending ?receiver ?task))",
    "(:action update ; Perform an update on a resource or system\n    :parameters (?agent - person ?target - entity)\n    :precondition (and \n        (modifiable ?target) ; The target must be modifiable\n        (authorized ?agent ?target) ; The agent must have authorization to update the target\n        (not (updated ?target)) ; Ensure the target has not already been updated\n    )\n    :effect (and \n        (updated ?target) ; Mark the target as updated\n        (improved_state ?target) ; Reflect that the state of the target has improved\n    )\n)",
    "(:action market ; Promote a resource or group to attract attention\n    :parameters (?entity - object ?platform - platform ?actor - person)\n    :precondition (and (has_presence ?entity) (not (promoted ?entity ?platform)) (authorized ?actor ?entity))\n    :effect (and (promoted ?entity ?platform))",
    "(:action decide ; Decide on a focus or assign a role for a task\n    :parameters (?actor - entity ?context - context ?focus - focus_type)\n    :precondition (and (in_context ?actor ?context) (not (has_focus ?context ?focus)))\n    :effect (and (has_focus ?context ?focus))",
    "(:action share ; Share information, thoughts, or ideas within a context\n    :parameters (?entity - person ?context - group ?object - resource ?content - information)\n    :precondition (and (member ?entity ?context) \n                       (associated_with ?context ?object) \n                       (not (shared ?context ?entity ?content)))\n    :effect (and (shared ?context ?entity ?content))",
    "(:action share\n    :parameters (?p - person ?bc - book_club ?book - book ?thought - thought)\n    :precondition (and (member ?p ?bc) \n                       (associated_with ?bc ?book) \n                       (not (shared ?bc ?p ?thought)))\n    :effect (and (shared ?bc ?p ?thought))",
    "(:action share\n    :parameters (?member - person ?team - team ?project - project ?feedback - feedback)\n    :precondition (and (member ?member ?team) \n                       (associated_with ?team ?project) \n                       (not (shared ?team ?member ?feedback)))\n    :effect (and (shared ?team ?member ?feedback))"
]