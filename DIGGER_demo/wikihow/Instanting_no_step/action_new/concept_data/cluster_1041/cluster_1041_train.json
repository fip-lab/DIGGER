[
    "(:action search ; Search a resource and update its discovery status\n  :parameters (?entity - agent ?resource - object ?location - place ?source - collection)\n  :precondition (and \n                  (at ?entity ?location) \n                  (has_source ?location ?source) \n                  (not (discovered ?entity ?resource)))\n  :effect (and \n           (discovered ?entity ?resource) \n           (found ?resource ?source))",
    "(:action ask ; Request assistance to locate or resolve a resource/task\n    :parameters (?requester - agent ?assistant - agent ?context - location ?resource - object)\n    :precondition (and (at ?requester ?context) \n                       (at ?assistant ?context) \n                       (not (resolved ?requester ?resource)))\n    :effect (and (resolved ?requester ?resource) \n                 (assisted ?requester ?assistant))",
    "(:action choose\n  :parameters (?actor - agent ?item - object ?context - context)\n  :precondition (and \n                  (available ?actor)\n                  (not (chosen ?actor ?item ?context))\n                  (relevant ?item ?context)\n                )\n  :effect (and \n            (chosen ?actor ?item ?context)\n            (prepared ?item ?context)\n          )",
    "(:action write_journal\n  :parameters (?actor - agent ?journal - journal ?entry - entry ?context - context)\n  :precondition (and \n                  (has_journal ?actor ?journal)\n                  (not (logged ?journal ?entry ?context))\n                  (valid_entry ?entry ?context)\n                )\n  :effect (and \n            (logged ?journal ?entry ?context)\n            (updated ?journal ?context)\n          )",
    "(:action secure_item\n  :parameters (?actor - agent ?item - object ?location - location)\n  :precondition (and \n                  (has ?actor ?item)\n                  (not (secured ?item ?location))\n                  (secure_location ?location)\n                )\n  :effect (and \n            (secured ?item ?location)\n            (protected ?item)\n          )",
    "(:action divide ; Divide an entity into sections or components\n    :parameters (?actor - agent ?entity - object)\n    :precondition (and (inventory ?actor ?entity) (prepared ?entity))\n    :effect (and (divided ?entity))",
    "(:action set ; Perform a state-changing operation to configure, position, or prepare an entity\n    :parameters (?actor - agent ?entity - object ?context - context ?details - details)\n    :precondition (and \n        (has ?actor ?entity) \n        (not (configured ?entity ?context ?details)))\n    :effect (and \n        (configured ?entity ?context ?details)\n        (not (has ?actor ?entity))",
    "(:action set ; Cover a journal with a protective book cover\n       :parameters (?npc - player ?garden_journal - journal ?book_cover - book_cover)\n       :precondition (and \n           (has ?npc ?garden_journal)\n           (has ?npc ?book_cover)\n           (not (configured ?garden_journal protection ?book_cover)))\n       :effect (and \n           (configured ?garden_journal protection ?book_cover)\n           (not (has ?npc ?book_cover))",
    "(:action set ; Place a log in a specified location\n       :parameters (?p - player ?log - log ?spot - location)\n       :precondition (and \n           (has ?p ?log)\n           (at ?p ?spot)\n           (not (configured ?log position ?spot)))\n       :effect (and \n           (configured ?log position ?spot)\n           (not (has ?p ?log))",
    "(:action set ; Set a time each day to reflect on a spiritual journey\n       :parameters (?p - person ?t - time)\n       :precondition (and \n           (has_journal ?p)\n           (not (configured reflection_time ?p ?t)))\n       :effect (and \n           (configured reflection_time ?p ?t))",
    "(:action set ; Log a spiritual goal in the journal\n       :parameters (?p - person ?j - journal ?g - goal)\n       :precondition (and \n           (has_journal ?p)\n           (has ?p ?j)\n           (not (configured ?j goal ?g)))\n       :effect (and \n           (configured ?j goal ?g))",
    "(:action enter ; Enter information or reach a desired state in a resource\n    :parameters (?actor - agent ?resource - object ?data - entity)\n    :precondition (and \n        (available ?actor) \n        (modifiable ?resource) \n        (not (state_reached ?resource ?data)))\n    :effect (and \n        (state_reached ?resource ?data))",
    "(:action read\n    :parameters (?reader - player ?resource - item ?location - location ?journal - journal ?entry - entry)\n    :precondition (and\n        (at ?reader ?location) ; The reader must be at the same location as the resource\n        (or \n            (inventory ?reader ?resource) ; The resource (e.g., book) is in the reader's inventory\n            (accessible ?resource ?reader) ; OR the resource is accessible to the reader\n        )\n        (or \n            (is_book ?resource) ; The resource is a book\n            (is_journal ?journal) ; OR the resource is a journal\n            (written ?entry ?journal) ; OR an entry exists in a journal\n            (is_online_resource ?resource) ; OR the resource is an online resource\n        )\n        (not (deep_understanding ?reader ?resource)) ; Reader has not yet fully understood the resource\n    )\n    :effect (and\n        (or \n            (knowledge_gained ?reader ?resource) ; Gain knowledge from the resource\n            (read ?resource) ; Mark the resource as read\n            (read ?entry ?journal) ; Mark journal entry as read\n            (deep_understanding ?reader ?resource) ; Gain deep understanding of the resource\n        )\n    )",
    "(:action take\n    :parameters (?actor - agent ?item - object ?container - container ?location - location)\n    :precondition (and \n                    (at ?actor ?location) \n                    (not (taken ?actor ?item))\n                    (or \n                        (and (inventory ?actor ?container) (contains ?container ?item))\n                        (and (at_location ?item ?location))\n                        (and (owns ?actor ?item) (not (carrying ?actor ?item)))\n                        (and (read ?item))\n                        (and (content_decided ?item) (not (notes_taken ?item))))\n                  )\n    :effect (and \n              (taken ?actor ?item)\n              (or \n                  (notes_taken ?item)\n                  (carrying ?actor ?item)\n                  (has_journal ?actor)\n                  (not (at_location ?item ?location))",
    "(:action reflect ; Engage in reflective journaling to process thoughts, emotions, or experiences\n  :parameters (?person - player ?journal - item ?topic - reflection_topic)\n  :precondition (and (has_journal ?person) \n                     (journal_ready ?journal) \n                     (valid_topic ?topic))\n  :effect (and (journal_entry_written ?journal ?topic) \n               (reflected ?person ?topic))",
    "(:action keep ; Maintain possession and readiness of an item\n    :parameters (?person - player ?item - item ?location - location)\n    :precondition (and \n        (at ?person ?location) \n        (or (is_notebook ?item) (is_computer ?item))\n        (not (carrying ?person ?item)))\n    :effect (and \n        (carrying ?person ?item)\n        (journal_ready ?item))",
    "(:action schedule\n    :parameters (?actor - agent ?task - activity ?resource - item ?time - time)\n    :precondition (and \n        (has_resource ?actor ?resource)  ; Actor must have the required resource (e.g., a journal or notebook)\n        (ready_for_task ?resource)       ; Resource must be ready for use (e.g., journal is ready, notebook can be written in)\n        (not (time_blocked ?time))       ; The specified time slot should not already be blocked\n        (not (task_scheduled ?actor ?task))) ; The specific task should not already be scheduled for this actor\n    :effect (and \n        (task_scheduled ?actor ?task)    ; The task is now scheduled for the actor\n        (not (time_free ?time))",
    "(:action schedule\n       :parameters (?actor - person ?task - writing ?resource - journal ?time - time)\n       :precondition (and \n           (has_resource ?actor ?resource) \n           (ready_for_task ?resource) \n           (not (time_blocked ?time))\n           (not (task_scheduled ?actor ?task)))\n       :effect (and \n           (task_scheduled ?actor ?task)\n           (not (time_free ?time))",
    "(:action schedule\n       :parameters (?actor - person ?task - organizing ?resource - notebook ?time - time)\n       :precondition (and \n           (has_resource ?actor ?resource) \n           (ready_for_task ?resource) \n           (not (time_blocked ?time))\n           (not (task_scheduled ?actor ?task)))\n       :effect (and \n           (task_scheduled ?actor ?task)\n           (not (time_free ?time))",
    "(:action schedule\n       :parameters (?actor - person ?task - journaling ?resource - journal ?time - time)\n       :precondition (and \n           (has_resource ?actor ?resource) \n           (ready_for_task ?resource) \n           (not (time_blocked ?time))\n           (not (task_scheduled ?actor ?task)))\n       :effect (and \n           (task_scheduled ?actor ?task)\n           (not (time_free ?time))",
    "(:action write ; General action for writing entries in a journal\n    :parameters (?p - person ?journal - item ?content - entry ?context - state)\n    :precondition (and \n        (has_journal ?p) \n        (journal_ready ?journal)\n        (not (written ?content ?journal))\n        (valid_context ?p ?context)\n    )\n    :effect (and \n        (written ?content ?journal)\n        (journal_contains ?journal ?content)\n        (updated_state ?p ?context)\n    )",
    "(:action write\n      :parameters (?p - person ?journal - item ?content - entry ?context - state)\n      :precondition (and \n          (has_journal ?p) \n          (journal_ready ?journal)\n          (not (written prayer ?journal))\n          (valid_context ?p spiritual_task)\n      )\n      :effect (and \n          (written prayer ?journal)\n          (journal_contains ?journal prayer)\n          (updated_state ?p spiritual_task)\n      )",
    "(:action write\n      :parameters (?p - person ?journal - item ?content - entry ?context - state)\n      :precondition (and \n          (has_journal ?p) \n          (journal_ready ?journal)\n          (not (written facts_about_mermaids ?journal))\n          (valid_context ?p knowledge)\n      )\n      :effect (and \n          (written facts_about_mermaids ?journal)\n          (journal_contains ?journal facts_about_mermaids)\n          (updated_state ?p knowledge)\n      )",
    "(:action stream\n  ; Perform a reflective or creative action to transform a state\n  :parameters (?actor - person ?tool - item ?context - state ?block - obstacle)\n  :precondition (and \n      (has ?actor ?tool)                ; The actor possesses the tool/resource\n      (relevant_context ?tool ?context) ; The tool/resource is ready for the task\n      (experiencing ?actor ?block))     ; The actor is facing some obstacle or challenge\n  :effect (and \n      (state_transformed ?context ?tool) ; The tool/resource used to transform the state\n      (not (experiencing ?actor ?block))",
    "(:action stream\n     :parameters (?author - person ?journal - item ?writing - state ?writers_block - obstacle)\n     :precondition (and \n         (has ?author ?journal)\n         (relevant_context ?journal ?writing)\n         (experiencing ?author ?writers_block))\n     :effect (and \n         (state_transformed ?writing ?journal)\n         (not (experiencing ?author ?writers_block))",
    "(:action stream\n     :parameters (?artist - person ?sketchbook - item ?creative_process - state ?creative_block - obstacle)\n     :precondition (and \n         (has ?artist ?sketchbook)\n         (relevant_context ?sketchbook ?creative_process)\n         (experiencing ?artist ?creative_block))\n     :effect (and \n         (state_transformed ?creative_process ?sketchbook)\n         (not (experiencing ?artist ?creative_block))",
    "(:action stream\n     :parameters (?person - person ?journal - item ?reflection - state ?stress - obstacle)\n     :precondition (and \n         (has ?person ?journal)\n         (relevant_context ?journal ?reflection)\n         (experiencing ?person ?stress))\n     :effect (and \n         (state_transformed ?reflection ?journal)\n         (not (experiencing ?person ?stress))",
    "(:action start ; Begin a task and update the state accordingly\n    :parameters (?entity - agent ?task - task ?resource - object)\n    :precondition (and (has ?entity ?resource) (not (started ?task ?resource)))\n    :effect (and (started ?task ?resource))",
    "(:action stay ; Maintain a state and manage interactions\n  :parameters (?p - person ?o - onlooker)\n  :precondition (and (writing ?p ?j) (observing ?o ?p))\n  :effect (and (calm ?p) (not (panicked ?p))",
    "(:action avoid ;  Perform a task while avoiding a specific condition\n  :parameters (?entity - object ?task - task ?condition - condition)\n  :precondition (and (performing ?entity ?task) (not (?condition ?entity)))\n  :effect (and (not (?condition ?entity))",
    "(:action acknowledge ; Acknowledge a resource and log its status\n    :parameters (?p - person ?resource - object ?context - entity)\n    :precondition (and \n        (engaged ?p ?context)\n        (not (acknowledged ?resource ?context))\n    )\n    :effect (acknowledged ?resource ?context)\n)",
    "(:action review ; Review a resource and update its status\n  :parameters (?p - person ?r - resource ?c - context)\n  :precondition (and (has_resource ?p ?r) (not (reviewed ?r ?c)))\n  :effect (and (reviewed ?r ?c))",
    "(:action review :parameters (?p - person ?r - journal ?c - month) :precondition (and (has_journal ?p) (carrying ?p ?r) (not (reviewed ?r ?c))) :effect (and (reviewed ?r ?c))",
    "(:action review :parameters (?p - person ?r - entry ?c - journal) :precondition (and (has_entry ?r ?c) (not (recent ?c))) :effect (and (reviewed ?c) (gained_insight ?r))",
    "(:action add ; Add content or features to a journal\n  :parameters (?j - journal ?item - object)\n  :precondition (and \n                  (available_for_use ?j)\n                  (or (and (notes_taken ?j) (not (visual_prompts_added ?j)))\n                      (and (personalized ?j) (exists (?item) (in_home ?item))))\n                )\n  :effect (and \n            (or (visual_prompts_added ?j)\n                (and (has_content ?j ?item) (not (in_home ?item))",
    "(:action capture\n    :parameters (?entity - object ?state - state)\n    :precondition (and (available ?entity) (not (captured ?entity ?state)))\n    :effect (captured ?entity ?state))",
    "(:action study\n  ; Study a resource and update the entity's state\n  :parameters (?entity - person ?resource - object)\n  :precondition (and (has_access ?entity ?resource) (not (studied_today ?entity)))\n  :effect (and (studied_today ?entity) (gains_knowledge ?entity ?resource))",
    "(:action plan ; Plan a task and update its status in the schedule\n  :parameters (?p - person ?task - task ?sched - schedule)\n  :precondition (and (has_schedule ?p ?sched) (not (task_planned ?task ?sched)))\n  :effect (task_planned ?task ?sched)\n)",
    "(:action use ; Apply a resource or skill to transform the state of an entity\n    :parameters (?agent - person ?entity - entity)\n    :precondition (and (prepared ?agent ?entity) (not (used ?entity)))\n    :effect (used ?entity)\n)",
    "(:action access\n  ; Access a resource and update access status\n  :parameters (?entity - agent ?resource - resource ?medium - medium ?platform - platform)\n  :precondition (and \n    (available ?resource ?platform) \n    (has_access ?entity ?platform) \n    (has_device ?entity ?medium) \n    (connected ?medium ?platform)\n    (not (accessed ?entity ?resource))\n  )\n  :effect (and \n    (accessed ?entity ?resource)\n    (not (unaccessed ?entity ?resource))",
    "(:action request ; Request a resource and update task status\n  :parameters (?user - user ?resource - object ?location - place ?service - service)\n  \n  :precondition (and \n    (not (available ?resource ?location)) \n    (supports_service ?location ?service) \n    (registered ?user ?service)\n  )\n  \n  :effect (and \n    (requested ?user ?resource ?service) \n    (in_progress ?resource ?service)\n  )",
    "(:action decide ; Determine a purpose or content for an entity\n    :parameters (?entity - object ?actor - agent)\n    :precondition (and (inventory ?actor ?entity) (not (decided ?entity)))\n    :effect (decided ?entity)\n)",
    "(:action update\n  ; Update a resource and manage associated items\n  :parameters (?npc - person ?resource - object ?new_content - content ?additional_item - item)\n  \n  :precondition (and (inventory ?npc ?resource) \n                     (resource-entry ?resource ?info))\n                     \n  :effect (and (updated ?resource) \n               (inventory ?npc ?new_content) \n               (inventory ?npc ?additional_item))",
    "(:action reread\n  ; Reread a resource, reflect on it, and update the state\n  :parameters (?p - person ?item - object ?loc - location)\n  :precondition (and (at ?p ?loc) (inventory ?p ?item) (not (reflected ?p ?item)))\n  :effect (and (reflected ?p ?item))",
    "(:action share\n    :parameters (?entity - object ?actor - person ?recipient - person)\n    :precondition (and \n                    (visual_prompts_added ?entity)\n                    (not (shared ?entity))\n                    (available ?actor)\n                  )\n    :effect (and\n              (shared ?entity)\n              (not (available ?actor))",
    "(:action personalize ;  Personalize a resource and update its usage status\n  :parameters (?resource - resource ?item - object)\n  :precondition (and (available_for_use ?resource) (in_home ?item))\n  :effect (and (personalized ?resource) (used ?item))",
    "(:action experiment\n  ; Define abstract parameters to cover a variety of tasks\n  :parameters (?entity - object ?method - action)\n\n  ; Preconditions must ensure that the entity is in a state to be experimented on\n  :precondition (and (can_experiment ?entity) (not (experimented ?entity ?method)))\n\n  ; The effects should reflect the state change after applying the method\n  :effect (and (experimented ?entity ?method) (enhanced_state ?entity))",
    "(:action experiment_with_techniques\n    :parameters (?j - journal ?t - technique)\n    :precondition (and (has_content ?j ?c) (knows ?t))\n    :effect (and (applied_technique ?j ?t) (enhanced_content ?j))",
    "(:action experiment\n  :parameters (?journal - journal ?technique - technique)\n  :precondition (and (has_content ?journal ?content) (knows ?technique))\n  :effect (and (experimented ?journal ?technique) (enhanced_content ?journal))",
    "(:action disable ; Disable a resource and update its state\n  :parameters (?entity - object ?resource - object)\n  :precondition (and (available_for_use ?entity) (active ?resource))\n  :effect (and (not (active ?resource))",
    "(:action list\n  ; List names and reasons in a journal \n  :parameters (?p - player ?item - object ?n - name ?r - reason)\n  :precondition (and (has_journal ?p) (not (listed ?n ?r ?item)))\n  :effect (listed ?n ?r ?item))",
    "(:action proofread\n  ; Proofread a written work and update its status\n  :parameters (?agent - person ?document - document)\n  :precondition (and (written ?document) (not (proofread ?document)))\n  :effect (and (proofread ?document) (mistakes_corrected ?document))"
]