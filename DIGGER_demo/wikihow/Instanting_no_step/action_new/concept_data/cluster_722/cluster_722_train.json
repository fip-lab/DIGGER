[
    "(:action drain\n    :parameters (?entity - entity ?actor - person ?item - object ?loc - location)\n    :precondition (and\n        (at ?actor ?loc)\n        (at ?entity ?loc)\n        (or (and (exists (?c - cyst) (inflamed ?c)) (has_cyst ?actor ?c))\n            (and (inventory ?actor ?item) (not (dirty ?entity))))\n    )\n    :effect (and\n        (or (and (not (inflamed ?entity))",
    "(:action take ;  Take an item and update its status\n  :parameters (?agent - entity ?item - object)\n  :precondition (and (available ?item) (not (in_use ?item)) (condition ?agent))\n  :effect (and (in_use ?item) (not (condition ?agent))",
    "(:action consult\n  :parameters (?person - person ?professional - person ?condition - condition ?treatment - treatment)\n  :precondition (and\n    (has_condition ?person ?condition)\n    (available ?professional)\n    (qualifies_for_treatment ?person ?treatment ?condition))\n  :effect (and\n    (informed ?person ?professional)\n    (consulted ?person ?professional)\n    (treatment_considered ?person ?treatment ?condition)\n    (not (seekingHelp ?person))",
    "(:action place ; Place an item and update the entity's state\n  :parameters (?entity - object ?item - object ?target - object ?loc - location)\n  :precondition (and (at ?entity ?loc) (at ?target ?loc) (inventory ?entity ?item)\n                     (or (draining ?target) (unwrapped ?target) (available ?item) (accessible ?loc)))\n  :effect (and (or (covered ?target ?item) (wrapped ?target) (discarded ?target))",
    "(:action leave\n  :parameters (?actor - person ?object - entity ?loc - location)\n  :precondition (and\n    (at ?actor ?loc)\n    (at ?object ?loc)\n    (not (interfered ?object)))\n  :effect (not (disturbed ?object))",
    "(:action check\n    :parameters (?entity - entity ?condition - condition ?agent - agent)\n    :precondition (and (has_condition ?entity ?condition) (available ?agent))\n    :effect (and (checked ?entity ?condition) (updated_status ?entity ?condition))",
    "(:action diagnose\n    :parameters (?entity - entity ?condition - condition ?agent - agent)\n    :precondition (and (suspected ?entity ?condition) (available ?agent))\n    :effect (and (diagnosed ?entity ?condition) (not (suspected ?entity ?condition))",
    "(:action consult\n    :parameters (?entity - entity ?specialist - specialist)\n    :precondition (and (needs_consultation ?entity) (available ?specialist))\n    :effect (and (consulted ?entity ?specialist) (received_treatment_plan ?entity))",
    "(:action record_symptoms\n    :parameters (?entity - entity ?symptom - symptom ?agent - agent)\n    :precondition (and (has_symptom ?entity ?symptom) (available ?agent))\n    :effect (and (recorded ?entity ?symptom))",
    "(:action assess ; Assess a resource or situation and update the entity's state\n    :parameters (?entity - object ?resource - object)\n    :precondition (and (relevant ?entity ?resource) (not (assessed ?entity ?resource)))\n    :effect (and (assessed ?entity ?resource) (aware_of ?entity ?resource))",
    "(:action schedule ; Schedule a task and update the entity's state\n  :parameters (?entity - thing ?task - task)\n  :precondition (and (requires_scheduling ?entity ?task) (not (scheduled ?entity ?task)))\n  :effect (scheduled ?entity ?task)\n)",
    "(:action schedule_doctor_appointment\n    :parameters (?p - patient ?doctor - doctor)\n    :precondition (requires_scheduling ?p ?doctor)\n    :effect (scheduled ?p ?doctor)\n  )",
    "(:action fold_and_use_towel\n    :parameters (?t - towel ?w - wrist)\n    :precondition (requires_scheduling ?t ?w)\n    :effect (scheduled ?t ?w)\n  )",
    "(:action get ;  Get a resource and update its status\n    :parameters (?entity - object ?resource - object)\n    :precondition (and (requires ?entity ?resource) (not (has ?entity ?resource)))\n    :effect (and (has ?entity ?resource))",
    "(:action ask ; Ask a person about a particular topic or issue\n  :parameters (?asker - person ?responder - person ?topic - topic)\n  :precondition (and (has_issue ?asker ?topic) (available ?responder))\n  :effect (and (inquired_about ?asker ?responder ?topic))",
    "(:action inquire ; Inquire about a medical or treatment-related topic\n    :parameters (?person1 - person ?person2 - person ?topic - topic)\n    :precondition (and (available ?person2)\n                       (or (and (fibroids_present ?person1) (eq ?topic fus))\n                           (and (consulted ?person1 ?person2) (eq ?topic hormone_treatment))))\n    :effect (and (inquired ?person1 ?person2 ?topic))",
    "(:action consider\n    :parameters (?p - person ?d - person)\n    :precondition (and\n        (or (painful_fibroids ?p) (fibroids_interfering_life ?p) (treatment_discussed ?p ?d) (has_bartholin_cyst ?p))\n        (doctor_available ?d)\n    )\n    :effect (and \n        (or (considered_minimally_invasive_procedures ?p ?d) (considered_surgery ?p ?d) (decision_pending ?p) (surgical_option_considered ?p) (treated_bartholin_cyst ?p) (relieved_symptoms ?p))",
    "(:action understand ; Understand treatment options for various health issues\n  :parameters (?patient - person ?specialist - doctor ?condition - health_issue)\n  \n  :precondition (and (has_condition ?patient ?condition) (available ?specialist) (specialist_for ?specialist ?condition))\n  \n  :effect (and (consulted_specialist ?patient ?specialist) (understands_treatment_options ?patient ?condition))",
    "(:action surgically_handle_cysts\n    :parameters (?entity - entity ?resource - resource ?actor - actor)\n    :precondition (and \n        (available ?actor) \n        (has_cyst ?entity ?resource)\n        (or (inflamed ?resource) (infected ?entity) (exists (?d - doctor) (available ?d)))\n    )\n    :effect (and \n        (not (has_cyst ?entity ?resource))",
    "(:action apply\n  ; General action to apply a treatment to an entity\n  :parameters (?agent - person ?treatment - object ?entity - entity ?loc - location)\n  \n  ; Preconditions ensure the agent is at the location, the entity is at the location,\n  ; the agent has the treatment, and the treatment is available and/or warm if needed.\n  :precondition (and \n    (at ?agent ?loc)\n    (at ?entity ?loc)\n    (inventory ?agent ?treatment)\n    (or (available ?treatment) (warm ?treatment))\n    (not (applied ?treatment ?entity))\n    (or (untreated ?entity) (small ?entity))\n  )\n  \n  ; Effects mark the treatment as applied to the entity, \n  ; the entity as treated, and potentially soothing or other effects.\n  :effect (and \n    (applied ?treatment ?entity)\n    (treated ?entity)\n    (not (untreated ?entity))",
    "(:action discuss ; Discuss a topic and update knowledge status\n    :parameters (?person1 - person ?person2 - person ?subject - entity)\n    :precondition (and (available ?person2) (consulted ?person1 ?person2))\n    :effect (and (discussed ?person1 ?person2 ?subject) (informed ?person1))",
    "(:action determine ; Determine a decision for cyst removal\n  :parameters (?you - person ?cyst - cyst)\n  :precondition (and (has_cyst ?you) (is_cyst ?cyst) (knows_removal_options ?you))\n  :effect (and (decision_made ?you ?cyst))"
]