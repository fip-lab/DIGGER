[
    "(:action run ; Perform a transformation on an object using a resource\n    :parameters (?object - object ?location - location ?resource - resource)\n    :precondition (and\n        (at ?object ?location)\n        (active ?resource)\n        (not (transformed ?object))\n    )\n    :effect (and\n        (transformed ?object)\n        (affected_by ?object ?resource)\n    )",
    "(:action use ; Use a tool or resource to modify an object's state\n    :parameters (?actor - agent ?tool - tool ?target - object ?location - location)\n    :precondition (and\n        (at ?target ?location) ; The target must be at the location\n        (functional ?tool)     ; The tool must be functional\n        (not (desired_state ?target)) ; The target must not already be in the desired state\n    )\n    :effect (and\n        (desired_state ?target) ; The target is now in the desired state\n        (modified ?target)      ; The target has been modified\n    )\n)",
    "(:action perform_task\n    :parameters (?agent - entity ?resource - object ?location - location ?target - object ?tool - tool)\n    :precondition (and \n        (at ?agent ?location)\n        (available ?resource)\n        (ready ?tool)\n        (not (processed ?target))\n    )\n    :effect (and \n        (processed ?target)\n        (updated ?resource)\n        (not (ready ?tool))",
    "(:action perform_task\n    :parameters (?agent - person ?resource - salt ?location - surface ?target - ice ?tool - none)\n    :precondition (and \n        (at ?agent ?location)\n        (available ?resource)\n        (not (processed ?target))\n    )\n    :effect (and \n        (processed ?target) ; Ice is melted\n        (updated ?resource) ; Salt is used\n    )\n)",
    "(:action perform_task\n    :parameters (?agent - person ?resource - water_source ?location - sink ?target - measuring_cup ?tool - none)\n    :precondition (and \n        (at ?agent ?location)\n        (available ?resource)\n        (not (processed ?target))\n    )\n    :effect (and \n        (processed ?target) ; Measuring cup is filled\n        (updated ?resource) ; Water source is used\n    )\n)",
    "(:action perform_task\n    :parameters (?agent - person ?resource - electricity ?location - flat_surface ?target - glue_gun ?tool - none)\n    :precondition (and \n        (at ?agent ?location)\n        (available ?resource)\n        (not (processed ?target))\n    )\n    :effect (and \n        (processed ?target) ; Glue gun is plugged in and heating\n        (updated ?resource) ; Electricity is consumed\n    )\n)",
    "(:action perform_task\n    :parameters (?agent - player ?resource - butter ?location - kitchen ?target - glass ?tool - none)\n    :precondition (and \n        (at ?agent ?location)\n        (available ?resource)\n        (not (processed ?target))\n    )\n    :effect (and \n        (processed ?target) ; Butter is placed into the glass\n        (updated ?resource) ; Butter is moved\n    )\n)",
    "(:action cut ;  Generalized action for cutting or slicing an item\n    :parameters (?p - person ?item - ingredient ?tool - tool ?surface - object)\n    :precondition (and \n        (at ?p ?surface)                ; Person must be at the designated surface or location\n        (has_tool ?p ?tool)             ; Person must have the tool in possession\n        (is_tool ?tool)                 ; The tool must be a valid cutting tool (e.g., knife)\n        (is_cuttable ?item)             ; The item must be something that can be cut\n        (not (is_cut ?item))            ; The item must not already be in a cut state\n    )\n    :effect (and \n        (not (is_whole ?item))",
    "(:action mix\n    :parameters (?p - person ?tool - tool ?ingredient - ingredient ?container - container ?location - location)\n    :precondition (and \n        (at ?p ?location)                     ; The person must be present at the location\n        (has_tool ?p ?tool)                   ; The person must have the tool (e.g., bowl, blender, processor)\n        (in ?ingredient ?container)           ; The ingredient must be in the container\n        (is_tool ?tool)                       ; Ensure the tool is a valid tool (e.g., mixer, processor, etc.)\n        (state ?ingredient ?initial_state)    ; The ingredient must have a specific initial state (e.g., cubed, partially mixed, etc.)\n        (not (state ?ingredient fully_mixed)) ; The ingredient should not already be fully mixed\n        (valid_tool_state ?tool))             ; Tool must be in a valid state (e.g., powered on, ready to use)\n    :effect (and \n        (not (state ?ingredient ?initial_state))",
    "(:action mix\n       :parameters (?p - player ?tool - bowl ?ingredient - butter ?container - bowl ?location - kitchen)\n       :precondition (and\n           (at ?p kitchen)\n           (has_tool ?p bowl)\n           (in butter bowl)\n           (is_tool bowl)\n           (state butter cubed)\n           (not (state butter fully_mixed))\n           (valid_tool_state bowl))\n       :effect (and\n           (not (state butter cubed))",
    "(:action mix\n       :parameters (?p - player ?tool - processor ?ingredient - butter ?container - processor ?location - kitchen)\n       :precondition (and\n           (at ?p kitchen)\n           (has_tool ?p processor)\n           (in butter processor)\n           (is_tool processor)\n           (state butter partially_mixed)\n           (not (state butter fully_mixed))\n           (valid_tool_state processor))\n       :effect (and\n           (not (state butter partially_mixed))",
    "(:action mix\n       :parameters (?p - player ?tool - container ?ingredient - cream ?container - container ?location - kitchen)\n       :precondition (and\n           (at ?p kitchen)\n           (has_tool ?p container)\n           (in cream container)\n           (is_tool container)\n           (state cream plain)\n           (not (state cream fully_mixed))\n           (valid_tool_state container))\n       :effect (and\n           (not (state cream plain))",
    "(:action obtain\n    :parameters (?actor - agent ?item - object ?location - location ?container - container ?dependency - object)\n    :precondition (and \n        (at ?actor ?location)                ; The actor must be at the location of the item\n        (available ?item)                    ; The item must be available\n        (or                                  ; Additional conditions based on context\n            (compatible ?item ?dependency)   ; Check compatibility if applicable\n            (clarified ?dependency)          ; Check if a dependency (e.g., butter) is in the correct state\n            (ready ?container))              ; Check if a container/tool is ready\n    )\n    :effect (and\n        (obtained ?item ?actor)              ; The item is now obtained by the actor\n        (not (available ?item))",
    "(:action obtain\n    :parameters (?actor - agent ?glue_gun - glue_gun ?location - location ?stick - glue_stick ?container - container)\n    :precondition (and \n        (at ?actor ?location)\n        (available ?glue_gun)\n        (compatible ?glue_gun ?stick))\n    :effect (and\n        (obtained ?glue_gun ?actor)\n        (not (available ?glue_gun))",
    "(:action obtain\n    :parameters (?actor - player ?butter - butter ?location - location ?glass - container ?container - container)\n    :precondition (and \n        (at ?actor ?location)\n        (in ?butter ?glass)\n        (clarified ?butter))\n    :effect (and\n        (obtained ?butter ?actor)\n        (in ?butter ?container)\n        (not (in ?butter ?glass))",
    "(:action obtain\n    :parameters (?actor - agent ?ingredient - object ?location - location ?container - container)\n    :precondition (and \n        (at ?actor ?location)\n        (available ?ingredient))\n    :effect (and\n        (obtained ?ingredient ?actor)\n        (not (available ?ingredient))",
    "(:action feed ; Feed an object into a process/tool and update its state\n    :parameters (?tool - object ?item - object)\n    :precondition (and (operational ?tool) (usable ?item))\n    :effect (and (processing ?item) (not (usable ?item))",
    "(:action measure ; Measure a resource and update its state\n    :parameters (?agent - agent ?resource - object ?container - container)\n    :precondition (and (at ?agent counter) (at ?resource counter) (empty ?container))\n    :effect (and (measured ?resource) (at ?resource ?container) (not (at ?resource counter))",
    "(:action push ; Push an entity to change its physical state or distribution\n  :parameters (?actor - agent ?entity - object ?target - location)\n  :precondition (and (at ?actor ?target) (requires_adjustment ?entity ?target))\n  :effect (and (not (requires_adjustment ?entity ?target))",
    "(:action push\n     :parameters (?p - person ?butter - butter ?measuring_cup - measuring_cup)\n     :precondition (and (at ?p ?measuring_cup) (butter_piling_up ?measuring_cup ?butter))\n     :effect (and (not (butter_piling_up ?measuring_cup ?butter))",
    "(:action push\n     :parameters (?worker - person ?box - box ?shelf - shelf)\n     :precondition (and (at ?worker ?shelf) (misaligned ?box ?shelf))\n     :effect (and (not (misaligned ?box ?shelf))",
    "(:action push\n     :parameters (?chef - person ?butter - butter ?bowl - bowl)\n     :precondition (and (at ?chef ?bowl) (water_level_incorrect ?bowl))\n     :effect (and (not (water_level_incorrect ?bowl))",
    "(:action stop ; Stop a process once a desired condition is met\n  :parameters (?actor - agent ?resource - object ?desired_state - state)\n  :precondition (and (at ?actor ?resource) (state_reached ?resource ?desired_state))\n  :effect (and (knows_state_achieved ?actor ?resource ?desired_state))",
    "(:action drain ; Drain a substance from one container to another\n  :parameters (?agent - person ?source - container ?target - container ?substance - fluid)\n  :precondition (and \n                  (at ?agent ?source)\n                  (contains ?source ?substance)\n                  (clean ?target))\n  :effect (and \n           (not (contains ?source ?substance))",
    "(:action drain\n     :parameters (?p - person ?measuring_cup - container ?sink - container ?water - fluid)\n     :precondition (and \n                     (at ?p ?measuring_cup)\n                     (contains ?measuring_cup ?water)\n                     (clean ?sink))\n     :effect (and \n              (not (contains ?measuring_cup ?water))",
    "(:action drain\n     :parameters (?p - person ?cream_container - container ?bowl - container ?buttermilk - fluid)\n     :precondition (and \n                     (at ?p ?cream_container)\n                     (contains ?cream_container ?buttermilk)\n                     (clean ?bowl))\n     :effect (and \n              (not (contains ?cream_container ?buttermilk))",
    "(:action adjust_temperature ; Adjust the temperature of an item to a desired state\n    :parameters (?item - object ?source - device ?desired_state - state)\n    :precondition (and \n        (state_of ?source ?source_state) ; The device must be in the appropriate state to perform the action\n        (not (state_of ?item ?desired_state)) ; The item must not already be in the desired state\n        (supports ?source ?desired_state) ; The source must support transitioning the item to the desired state\n    )\n    :effect (and \n        (state_of ?item ?desired_state) ; The item transitions to the desired state\n        (forall (?prev_state - state) ; Remove the previous state of the item\n            (not (state_of ?item ?prev_state))",
    "(:action adjust_temperature\n       :parameters (?c - cream ?s - stove ?desired_state - warm)\n       :precondition (and \n           (state_of ?s atRoomTemperature)\n           (not (state_of ?c warm))\n           (supports ?s warm))\n       :effect (and \n           (state_of ?c warm)\n           (not (state_of ?c cold))",
    "(:action adjust_temperature\n       :parameters (?b - butter ?r - refrigerator ?desired_state - cool)\n       :precondition (and \n           (state_of ?r working)\n           (not (state_of ?b cool))\n           (supports ?r cool))\n       :effect (and \n           (state_of ?b cool)\n           (not (state_of ?b warm))",
    "(:action prepare ; Prepare an entity for use or task execution\n    :parameters (?entity - object ?substance - object)\n    :precondition (and (or (off ?entity) (inProcessor ?substance ?entity)) \n                       (clean ?entity) \n                       (not (ready ?entity)))\n    :effect (and (ready ?entity) \n                 (not (off ?entity))",
    "(:action pulse ; Perform a transformation process using a tool to modify the state of a resource\n    :parameters (?agent - actor ?tool - tool ?resource - resource ?location - location)\n    :precondition (and \n        (at ?agent ?location)                   ; The agent must be at the location\n        (has_tool ?agent ?tool)                 ; The agent must have the tool\n        (usable ?tool)                          ; The tool must be usable\n        (contains ?tool ?resource)              ; The tool must contain the resource to be processed\n        (not (fully_transformed ?resource))     ; The resource must not already be fully transformed\n    )\n    :effect (and \n        (partially_transformed ?resource)       ; The resource becomes partially transformed\n        (used ?tool)                            ; The tool is marked as used\n    )\n)",
    "(:action let ; Allow an entity to change its state or location\n    :parameters (?actor - agent ?entity - object ?loc - location)\n    :precondition (and \n        (in ?entity ?loc) ; The entity must be at the specified location\n        (at ?actor ?loc)  ; The actor must also be at the same location\n        (not (settled ?entity))) ; The entity must not already be settled\n    :effect (and \n        (settled ?entity))"
]