[
    "(:action remove ; General action for removing or cleaning an entity or object\n  :parameters (?entity - object ?context - object ?actor - agent)\n  :precondition (and \n    (removable ?entity ?context)               ; Indicates that the entity can be removed from the context\n    (valid_context ?context)                  ; The context must be valid for the removal to occur\n    (has_access ?actor ?context)              ; The actor has access to perform the removal\n  )\n  :effect (and \n    (not (in ?entity ?context))",
    "(:action remove\n  :parameters (?entity - jar ?context - freezer ?actor - user)\n  :precondition (and \n    (removable ?entity ?context) \n    (valid_context ?context) \n    (has_access ?actor ?context))\n  :effect (and \n    (not (in ?entity ?context))",
    "(:action remove\n  :parameters (?entity - candleholder ?context - dirt ?actor - cleaner)\n  :precondition (and \n    (removable ?entity ?context)\n    (valid_context ?context)\n    (has_access ?actor ?context))\n  :effect (and \n    (not (in ?entity ?context))",
    "(:action remove\n  :parameters (?entity - wax_cube ?context - mold ?actor - worker)\n  :precondition (and \n    (removable ?entity ?context)\n    (valid_context ?context)\n    (has_access ?actor ?context))\n  :effect (and \n    (not (in ?entity ?context))",
    "(:action cut ; Generalized action for cutting an object to change its state\n    :parameters (?agent - entity ?item - object ?tool - tool ?target - object)\n    :precondition (and \n        (holds_tool ?agent ?tool) ; Agent must have the tool\n        (pre_cut_state ?item ?target) ; Item must be in a state where it can be cut relative to the target\n        (not (cut ?item ?target)) ; Item must not already be in the \"cut\" state\n    )\n    :effect (and \n        (cut ?item ?target) ; Marks the item as cut\n        (transformed_state ?item ?target) ; Updates the item's state to reflect the cutting operation\n        (not (pre_cut_state ?item ?target))",
    "(:action pour\n    :parameters (?actor - agent ?source - container ?target - container ?material - substance ?tool - tool)\n    :precondition (and \n        (contains ?source ?material)           ; Source must contain the material to be poured\n        (empty ?target)                       ; Target must be empty or ready to receive the material\n        (usable ?tool)                        ; Tool (if applicable) must be usable for the task\n        (prepared ?material)                  ; Material must be in the correct state (e.g., melted, liquid)\n        (available ?actor)                    ; Actor performing the action must be available\n    )\n    :effect (and \n        (not (contains ?source ?material))",
    "(:action pour\n    :parameters (?actor - player ?source - saucepan ?target - candle_mold ?material - wax ?tool - ladle)\n    :precondition (and \n        (contains ?source ?material)\n        (empty ?target)\n        (prepared ?material)\n        (usable ?tool)\n        (available ?actor)\n    )\n    :effect (and \n        (not (contains ?source ?material))",
    "(:action pour\n    :parameters (?actor - chef ?source - spray_can ?target - tart_pan ?material - cooking_spray ?tool - none)\n    :precondition (and \n        (contains ?source ?material)\n        (empty ?target)\n        (prepared ?material)\n        (available ?actor)\n    )\n    :effect (and \n        (not (contains ?source ?material))",
    "(:action pour\n    :parameters (?actor - player ?source - kettle ?target - wax_pot ?material - boiling_water ?tool - none)\n    :precondition (and \n        (contains ?source ?material)\n        (empty ?target)\n        (prepared ?material)\n        (available ?actor)\n    )\n    :effect (and \n        (not (contains ?source ?material))",
    "(:action pour\n    :parameters (?actor - crafter ?source - container ?target - shot_glass ?material - wax ?tool - funnel)\n    :precondition (and \n        (contains ?source ?material)\n        (empty ?target)\n        (prepared ?material)\n        (usable ?tool)\n        (available ?actor)\n    )\n    :effect (and \n        (not (contains ?source ?material))",
    "(:action gather ; Gather resources, items, or materials and prepare them for subsequent tasks\n  :parameters (?actor - agent ?item - object ?location - location)\n  :precondition (and\n    (at ?actor ?location) ; Actor must be at the specified location\n    (not (gathered ?item)) ; Item must not already be gathered\n    (or\n      (and (is_wrapped ?item ?location true) (is_taped ?item ?location false)) ; If item needs to be taped\n      (and (on_sale ?item ?location) (has_money ?actor)) ; If item needs to be purchased\n      (at-location ?item in-storage) ; If item is located in storage\n      (disorganized ?item) ; If item is disorganized\n    )\n  )\n  :effect (and\n    (gathered ?item) ; Item is now gathered\n    (or\n      (is_taped ?item ?location true) ; Item is taped if required\n      (inventory ?actor ?item) ; Item is added to actor's inventory if purchased\n      (at-location ?item on-table) ; Item is moved to the table if gathered from storage\n      (not (disorganized ?item))",
    "(:action move ; Move an entity to a specific location or situation\n  :parameters (?entity - object ?destination - location)\n  :precondition (and \n        (not (is_in ?entity ?destination)) ; The entity should not already be in the destination\n        (valid_destination ?destination) ; Destination must meet a valid condition (abstracted)\n  )\n  :effect (and \n        (is_in ?entity ?destination) ; The entity is now in the destination\n  )\n)",
    "(:action use\n    :parameters (?entity - object ?task - task)\n    :precondition (and\n        (is_ready ?entity false) ; The entity must not yet be marked as ready\n        (task_sequence_completed ?entity ?task) ; The required task sequence must be fully completed\n    )\n    :effect (and\n        (is_ready ?entity true) ; Marks the entity as ready for use\n        (used_for ?entity ?task) ; Associates the entity with the completed task\n    )\n)",
    "(:action pop ; Perform a task to extract or remove an entity from a container or surface\n  :parameters (?actor - agent ?container - object ?tool - tool ?substance - material)\n  :precondition (and \n                  (contained ?substance ?container) ; The substance must be present in the container\n                  (usable_tool ?actor ?tool)        ; The actor must have and be capable of using the tool\n                  (suitable_tool ?tool ?substance) ; The tool must be suitable for the substance\n                  (ready_state ?container))        ; The container must be in a ready state for the action\n  :effect (and \n           (not (contained ?substance ?container))",
    "(:action add\n    ; Add a component, material, or property to an object\n    :parameters (?actor - entity ?target - entity ?component - entity ?tool - entity)\n    :precondition (and \n        (available ?actor) \n        (requires_addition ?target ?component)\n        (has ?actor ?component)\n        (or (not (added ?target ?component)) (not (prepared ?target)))\n        (or (not (used ?tool)) (has ?actor ?tool))\n    )\n    :effect (and \n        (added ?target ?component)\n        (prepared ?target)\n        (not (requires_addition ?target ?component))",
    "(:action melt\n    :parameters (?entity - object ?tool - object ?heat_source - object)\n    :precondition (and\n        (solid ?entity)                      ; The entity must initially be solid\n        (usable ?tool)                       ; The tool being used must be functional or accessible\n        (active ?heat_source)                ; The heat source must be active or capable of applying heat\n        (at_temperature ?heat_source ?temp)  ; Heat source must be at the required temperature\n        (not (melted ?entity))               ; The entity should not already be melted\n    )\n    :effect (and\n        (melted ?entity)                     ; The entity transitions to a melted state\n        (not (solid ?entity))",
    "(:action melt\n    :parameters (?candle - candle ?cup - measuring_cup ?stove - stove)\n    :precondition (and\n        (solid ?candle)\n        (usable ?cup)\n        (active ?stove)\n        (at_temperature ?stove 160)\n        (not (melted ?candle))\n    )\n    :effect (and\n        (melted ?candle)\n        (not (solid ?candle))",
    "(:action melt\n    :parameters (?chocolate - material ?bowl - container ?saucepan - tool)\n    :precondition (and\n        (solid ?chocolate)\n        (usable ?bowl)\n        (active ?saucepan)\n        (at_temperature ?saucepan medium-low)\n        (not (melted ?chocolate))\n    )\n    :effect (and\n        (melted ?chocolate)\n        (not (solid ?chocolate))",
    "(:action melt\n    :parameters (?shortening - material ?bowl - container ?counter - workspace)\n    :precondition (and\n        (solid ?shortening)\n        (usable ?bowl)\n        (at_temperature ?counter room_temp)\n        (not (melted ?shortening))\n    )\n    :effect (and\n        (melted ?shortening)\n        (not (solid ?shortening))",
    "(:action wait ; Wait for a state change to occur over time\n    :parameters (?entity - object ?state_start - state ?state_end - state)\n    :precondition (and (in_state ?entity ?state_start) (not (in_state ?entity ?state_end)))\n    :effect (and (not (in_state ?entity ?state_start))",
    "(:action wait\n       :parameters (?cup - cup ?wax - wax)\n       :precondition (and (in_state ?wax liquid) (not (in_state ?wax solid)))\n       :effect (and (not (in_state ?wax liquid))",
    "(:action wait\n       :parameters (?pot - pot ?water - water)\n       :precondition (and (in_state ?water boiling) (not (in_state ?water cooled)))\n       :effect (and (not (in_state ?water boiling))",
    "(:action wait\n       :parameters (?container - container)\n       :precondition (and (in_state ?container filled_with_wax_and_chocolate) (not (in_state ?container set)))\n       :effect (and (not (in_state ?container filled_with_wax_and_chocolate))",
    "(:action wait\n       :parameters (?mold - container ?wax - material)\n       :precondition (and (in_state ?mold frozen) (not (in_state ?mold filled)))\n       :effect (and (not (in_state ?mold frozen))",
    "(:action enjoy ; Enjoy a resource and update state to reflect enjoyment or appreciation\n  :parameters (?entity - object ?person - agent)\n  :precondition (and \n                    (usable ?entity)\n                    (prepared ?entity)\n                    (has ?person ?entity))\n  :effect (and \n              (enjoyed ?person ?entity)\n              (admired ?person ?entity))",
    "(:action check ; Check a resource, process its state, and update status\n    :parameters (?actor - agent ?entity - object ?context - context)\n    :precondition (and \n        (available ?actor) \n        (not (checked ?actor ?entity))\n        (in-context ?entity ?context)\n        (current-condition ?entity ?state_before)\n    )\n    :effect (and\n        (checked ?actor ?entity)\n        (transformed-condition ?entity ?state_after)\n        (not (current-condition ?entity ?state_before))",
    "(:action measure\n    :parameters (?entity - object ?container - object)\n    :precondition (and \n        (available ?entity)\n        (empty ?container)\n    )\n    :effect (and \n        (measured ?entity)\n        (in_container ?entity ?container)\n        (not (empty ?container))",
    "(:action burn ; Burn an item and transform its state\n    :parameters (?container - object ?item - consumable)\n    :precondition (and \n        (in_container ?item ?container)\n        (flammable ?item)\n        (ignite_ready ?item)\n        (solid ?item)\n    )\n    :effect (and \n        (burning ?container)\n        (not (solid ?item))",
    "(:action burn\n       :parameters (?c - candle ?w - wick)\n       :precondition (and \n           (in_container ?w ?c)\n           (flammable ?w)\n           (ignite_ready ?w)\n           (solid ?w)\n       )\n       :effect (and \n           (burning ?c)\n           (not (solid ?w))",
    "(:action burn\n       :parameters (?stove - object ?fuel - consumable)\n       :precondition (and \n           (in_container ?fuel ?stove)\n           (flammable ?fuel)\n           (ignite_ready ?fuel)\n           (solid ?fuel)\n       )\n       :effect (and \n           (burning ?stove)\n           (not (solid ?fuel))",
    "(:action take ; Take an object and update its location or state\n  :parameters (?agent - agent ?item - object ?source - location ?destination - location)\n  :precondition (and (at_location ?item ?source) (accessible ?source ?agent) (accessible ?destination ?agent))\n  :effect (and (not (at_location ?item ?source))",
    "(:action take\n     :parameters (?agent - agent ?item - jar ?source - baking_sheet ?destination - countertop)\n     :precondition (and (at_location ?item ?source) (accessible ?source ?agent) (accessible ?destination ?agent))\n     :effect (and (not (at_location ?item ?source))",
    "(:action take\n     :parameters (?agent - agent ?item - candle ?source - storage ?destination - counter)\n     :precondition (and (at_location ?item ?source) (accessible ?source ?agent) (accessible ?destination ?agent))\n     :effect (and (not (at_location ?item ?source))",
    "(:action release ; Release an entity from an associated container or binding\n  :parameters (?agent - person ?entity - object ?container - object)\n  :precondition (and (set ?entity ?container) (not (released ?entity ?container)))\n  :effect (and (released ?entity ?container))",
    "(:action lick ; Perform a licking action to alter the state of the object\n    :parameters (?actor - entity ?target - object)\n    :precondition (and (clean ?target) (not (wet ?target)) (can_interact ?actor ?target))\n    :effect (and (wet ?target) (not (clean ?target))",
    "(:action locate\n  :parameters (?agent - agent ?container - object ?item - object)\n  :precondition (and (prepared ?container) (not (located ?item)))\n  :effect (and (located ?item) (contained_in ?item ?container))",
    "(:action wick ; Wick a material and update container state\n  :parameters (?worker - person ?container - container ?material - material ?filler - material)\n  :precondition (and (has_material ?worker ?filler) (empty ?container) (not (positioned ?material ?container)))\n  :effect (and (positioned ?material ?container) (filled ?container ?filler))",
    "(:action preheat ; Preheat a device or resource and update its state\n    :parameters (?device - object)\n    :precondition (and (off ?device))\n    :effect (and (preheated ?device))",
    "(:action adjust ; Align or modify the state of an object to progress toward the goal state\n    :parameters (?entity1 - object ?entity2 - object ?context - object)\n    :precondition (and \n        (related_state ?entity1 ?entity2 ?context) ; Represents that the objects are in a related state\n        (not (final_state ?context))              ; Ensures the task hasn't already reached the final state\n    )\n    :effect (and\n        (aligned_state ?entity1 ?entity2 ?context) ; Captures progress in alignment or adjustment\n        (final_state ?context)                    ; Marks the context as fully adjusted or set\n    )\n)",
    "(:action adjust\n    :parameters (?w - wick ?g - shot_glass ?candle - object)\n    :precondition (and (wax_in_glass ?g) (in_shot_glass ?w ?g) (not (fully_set ?g)))\n    :effect (and (wick_centered ?w ?g) (fully_set ?g))",
    "(:action adjust\n    :parameters (?gear - component ?shaft - component ?machine - object)\n    :precondition (and (connected ?gear ?shaft ?machine) (not (aligned ?machine)))\n    :effect (and (aligned ?gear ?shaft ?machine) (aligned ?machine))",
    "(:action extinguish ; Extinguish a resource and update its state\n  :parameters (?agent - entity ?tool - object ?target - object)\n  :precondition (and \n      (active ?target) ; The target must be active (e.g., lit, burning, etc.)\n      (usable ?tool) ; The tool must be usable for extinguishing\n      (in_proximity ?agent ?target) ; The agent must be near the target\n  )\n  :effect (and \n      (not (active ?target))",
    "(:action practice\n    :parameters (?u - user ?t - task ?o - object)\n    :precondition (and \n        (has_skill ?u ?t)                     ; The user must have the skill to practice\n        (can_practice ?u ?t ?o)              ; The user must be able to perform the task on the object\n        (not (mastered ?u ?t))               ; The skill must not already be mastered\n    )\n    :effect (and \n        (improved_skill ?u ?t)               ; The user's skill in the task improves\n        (not (unskilled ?u ?t))"
]