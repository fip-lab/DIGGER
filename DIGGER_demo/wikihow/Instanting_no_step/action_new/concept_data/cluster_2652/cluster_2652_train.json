[
    "(:action check ; General action to check and update knowledge or status of an entity\n  :parameters (?agent - entity ?target - entity ?attribute - attribute)\n  :precondition (and\n                 (available ?agent) ; The agent must be available\n                 (exists (?attribute-value - attribute-value)\n                         (and (has ?target ?attribute-value ?attribute) ; Target must have the attribute being checked\n                              (not (checked ?agent ?target ?attribute-value)))) ; The attribute must not have been checked by the agent\n  )\n  :effect (and \n           (checked ?agent ?target ?attribute-value) ; Mark the attribute as checked\n           (knows ?agent ?attribute ?attribute-value))",
    "(:action add\n    :parameters (?actor - agent ?item - material ?container - container ?location - location ?condition - predicate)\n    :precondition (and\n                    (at ?actor ?location)\n                    (inventory ?actor ?item)\n                    (ready_for_use ?container)\n                    (not (in ?item ?container))\n                    (valid_condition ?condition ?container))\n    :effect (and\n              (in ?item ?container)\n              (not (inventory ?actor ?item))",
    "(:action select ; Select and assign an entity or resource for a specific purpose\n  :parameters (?actor - agent ?entity - object ?context - context)\n  :precondition (and\n                  (available ?actor)\n                  (unselected ?entity)\n                  (valid_context ?entity ?context))\n  :effect (and\n           (selected ?entity)\n           (assigned ?actor ?entity ?context)\n           (not (unselected ?entity))",
    "(:action create ; Create or prepare a resource by combining components or transitioning its state\n  :parameters (?actor - entity ?resource - object ?location - location ?component1 - object ?component2 - object ?component3 - object)\n  :precondition (and\n                  (at ?actor ?location)\n                  (or (and (inventory ?actor ?component1) (inventory ?actor ?component2) (inventory ?actor ?component3))\n                      (and (selected ?location) (empty ?resource))\n                      (and (inventory ?actor ?resource) (clean ?resource) (intended_usage ?resource liquid_fertilizer))\n                      (and (inventory ?actor ?component1) (at ?component2 ?location) (bed_of_worms ?location))\n                      (and (in_cabinet ?resource) (empty ?resource)))\n                 )\n  :effect (and\n            (or (and (constructed ?resource)\n                     (in_area ?resource ?location)\n                     (not (empty ?resource))",
    "(:action roll ; Manipulate an object to transform or optimize its state\n    :parameters (?obj - object)\n    :precondition (and \n                    (processable ?obj) ; The object is suitable for the operation\n                    (not (processed ?obj))) ; The object hasn't been processed yet\n    :effect (and \n              (processed ?obj) ; The object has been processed\n              (optimized ?obj))",
    "(:action roll_manure_pile\n       :parameters (?pile - bin)\n       :precondition (and \n                       (full ?pile)\n                       (processable ?pile)\n                       (not (processed ?pile)))\n       :effect (and \n                 (processed ?pile)\n                 (optimized ?pile))",
    "(:action tumble_composter\n       :parameters (?composter - tumbler)\n       :precondition (and \n                       (in ?composter)\n                       (moist ?composter)\n                       (processable ?composter)\n                       (not (processed ?composter)))\n       :effect (and \n                 (processed ?composter)\n                 (optimized ?composter))",
    "(:action add_garden_lime\n       :parameters (?compost - compost)\n       :precondition (and \n                       (processable ?compost)\n                       (not (processed ?compost)))\n       :effect (and \n                 (processed ?compost)\n                 (optimized ?compost))",
    "(:action place ; Place an item, resource, or container in a specific location or state\n  :parameters (?actor - agent ?item - object ?target - location ?condition - condition_type)\n  :precondition (and \n      (at ?actor ?target) ; The actor must be at the target location\n      (inventory ?actor ?item) ; The actor must have the item in their inventory\n      (valid_condition ?target ?condition) ; The target location must satisfy a valid condition\n  )\n  :effect (and \n      (placed ?item ?target) ; The item is now placed at the target location\n      (not (inventory ?actor ?item))",
    "(:action limit ; Limit a resource or entity to ensure proper constraints\n    :parameters (?entity - object ?condition - state)\n    :precondition (and (applicable ?entity) (violates ?entity ?condition))\n    :effect (and (not (violates ?entity ?condition))",
    "(:action limit ; Limit tumbler capacity\n       :parameters (?t - tumbler ?condition - state)\n       :precondition (and (in ?t) (violates ?t overfilled))\n       :effect (and (not (violates ?t overfilled))",
    "(:action limit ; Limit resource usage\n         :parameters (?resource - resource ?condition - state)\n         :precondition (and (in_use ?resource) (violates ?resource overused))\n         :effect (and (not (violates ?resource overused))",
    "(:action limit ; Limit compost quality\n       :parameters (?compost - resource ?condition - state)\n       :precondition (and (quality_check ?compost) (violates ?compost poor_quality))\n       :effect (and (not (violates ?compost poor_quality))",
    "(:action moisten\n    :parameters (?entity - object ?resource - resource)\n    :precondition (and (needs-moisture ?entity) (available ?resource))\n    :effect (and (moist ?entity) (not (needs-moisture ?entity))",
    "(:action use\n    :parameters (?agent - entity ?tool - resource ?target - object)\n    :precondition (and \n        (ready ?tool) \n        (exists (?need - attribute) (needs ?target ?need))\n        (not (used ?tool ?target))\n    )\n    :effect (and \n        (fulfilled ?target ?need) \n        (used ?tool ?target))",
    "(:action use\n       :parameters (?agent - person ?tool - compost ?target - plant)\n       :precondition (and \n           (ready ?tool) \n           (exists (?soil - attribute) (needs ?target ?soil))\n           (not (used ?tool ?target)))\n       :effect (and \n           (fulfilled ?target ?soil) \n           (used ?tool ?target))",
    "(:action use\n       :parameters (?agent - person ?tool - secondary_bin ?target - primary_bin)\n       :precondition (and\n           (ready ?tool) \n           (exists (?capacity - attribute) (needs ?target ?capacity))\n           (not (used ?tool ?target)))\n       :effect (and \n           (fulfilled ?target ?capacity) \n           (used ?tool ?target))",
    "(:action inquire ; Inquire about a resource from a specified location\n  :parameters (?p - player ?location - location ?item - item)\n  :precondition (and (at ?p ?location) (exists (?resource - item) (resource_available ?location ?resource)))\n  :effect (and (inventory ?p ?item))",
    "(:action ask ; Ask an entity for an item and obtain it\n   :parameters (?requester - person ?giver - entity ?item - object)\n   :precondition (and \n       (at ?requester ?giver) \n       (willing_to_give ?giver) \n       (exists (?available_item - object) (has ?giver ?available_item)))\n   :effect (and (has ?requester ?item))",
    "(:action wait\n  :parameters (?entity - object ?context - context ?duration - time)\n  :precondition (and (in ?entity ?context) (prepared ?entity ?context) (not (ready ?entity)))\n  :effect (and (ready ?entity))",
    "(:action wait\n  :parameters (?bin - container ?compost_area - location ?two_months - time)\n  :precondition (and (in ?bin ?compost_area) (prepared ?bin ?compost_area) (not (ready ?bin)))\n  :effect (and (ready ?bin))",
    "(:action transport\n    ; Transport an item between locations and update its state\n    :parameters (?entity - object ?source - location ?destination - location)\n    :precondition (and\n                    (at ?entity ?source) ; The entity must be at the source location\n                    (accessible ?destination) ; The destination must be accessible\n                    (not (at ?entity ?destination))) ; The entity is not already at the destination\n    :effect (and\n              (at ?entity ?destination) ; The entity is now at the destination\n              (not (at ?entity ?source))",
    "(:action setup ; Setup a resource or system\n  :parameters (?agent - agent ?resource - object ?location - location)\n  :precondition (and \n    (at ?agent ?location) \n    (has_precondition ?resource ?location) ; Abstracted precondition for adaptability (e.g., soil, materials)\n    (not (setup ?resource))) ; Ensure the resource/system is not already set up\n  :effect (and \n    (setup ?resource) ; Marks the resource/system as set up\n    (ready_for_use ?resource))",
    "(:action apply\n    :parameters (?actor - agent ?item - object ?target - location)\n    :precondition (and \n        (inventory ?actor ?item)          ; The actor must have the item in their inventory\n        (prepared ?item)                 ; The item must be in a prepared state (e.g., cleaned, processed, or ready for use)\n        (intended_usage ?item applicable) ; The item's intended usage must allow for application\n        (at ?actor ?target)              ; The actor must be at the target location\n    )\n    :effect (and \n        (applied ?item ?target)          ; The item is now applied to the target\n        (not (inventory ?actor ?item))",
    "(:action adjust\n  ; Adjust the state of an entity to meet specific requirements\n  :parameters (?entity - object ?resource - object)\n  :precondition (and (requires-adjustment ?entity) (suitable ?resource))\n  :effect (and (adjusted ?entity) (not (requires-adjustment ?entity))",
    "(:action adjust\n     :parameters (?t - tumbler ?w - water)\n     :precondition (and (requires-adjustment ?t) (suitable-water ?w))\n     :effect (and (adjusted ?t) (not (requires-adjustment ?t))",
    "(:action adjust\n     :parameters (?composter - object ?tool - object)\n     :precondition (and (requires-adjustment ?composter) (suitable-tool ?tool))\n     :effect (and (adjusted ?composter) (not (requires-adjustment ?composter))",
    "(:action adjust\n     :parameters (?container - object ?resource - object)\n     :precondition (and (requires-adjustment ?container) (suitable-resource ?resource))\n     :effect (and (adjusted ?container) (not (requires-adjustment ?container))",
    "(:action harvest\n  ; Harvest a resource and update its state\n  :parameters (?actor - agent ?resource - object ?location - place)\n  :precondition (and \n      (at ?actor ?location) ; Actor is present at the resource location\n      (in ?resource ?location) ; Resource exists at the location\n      (ready-for-harvest ?resource) ; Resource is in a state ready to be harvested\n  )\n  :effect (and \n      (harvested ?resource) ; Resource is successfully harvested\n      (not (ready-for-harvest ?resource))",
    "(:action harvest\n  :parameters (?manager - person ?compost - resource ?tumbler - tumbler)\n  :precondition (and \n      (at ?manager ?tumbler)\n      (in ?compost ?tumbler)\n      (ready-for-harvest ?compost)\n  )\n  :effect (and \n      (harvested ?compost)\n      (not (ready-for-harvest ?compost))"
]