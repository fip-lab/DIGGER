[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:cook\n\n\nAction sets that need to be merged:\n(:action prepare_ground_chuck\n    :parameters (?p - player ?gc - ground_chuck)\n    :precondition (and (inventory ?p ?gc) (unprepared ?gc))\n    :effect (and (prepared ?gc) (not (unprepared ?gc)))\n)\n```\n\n#### Action 2: chill_beef\n```lisp\n\n(:action prepare_toppings\n    :parameters (?topping - ingredient ?knife - tool ?board - tool ?loc - location)\n    :precondition (and\n        (at ?topping ?loc)\n        (clean ?knife)\n        (clean ?board)\n        (at-tool ?knife ?loc)\n        (at-tool ?board ?loc)\n    )\n    :effect (and\n        (prepared ?topping)\n        (not (whole ?topping))\n    )\n)\n```\n\n---\n\n#### Step 10: Cover each with the top half of its bun, and enjoy.\n```lisp\n\n(:action form_patties\n    :parameters (?p - player ?gc - ground_chuck ?patty - patties)\n    :precondition (and (inventory ?p ?gc) (seasoned ?gc) (not (formed ?patty)))\n    :effect (and (formed ?patty) (not (inventory ?p ?gc)) (inventory ?p ?patty))\n)\n```\n\n#### Action 5: build_hot_fire\n```lisp\n\n(:action build_hot_fire\n    :parameters (?p - player ?grill - location)\n    :precondition (and (at ?p ?grill) (not (hot_fire ?grill)))\n    :effect (hot_fire ?grill)\n)\n```\n\n#### Action 6: place_burgers_on_grill\n```lisp\n\n(:action assemble_and_serve_burgers\n    :parameters (?burger - ingredient ?bun - ingredient ?plate - tool ?loc - location)\n    :precondition (and\n        (on-plate ?burger ?plate)\n        (at ?bun ?loc)\n        (clean ?plate)\n    )\n    :effect (and\n        (assembled ?burger ?bun)\n        (served ?burger)\n        (enjoyed ?burger)\n    )\n)\n```\n\n---\n\n### Notes:\n- Each action is derived to reflect the logical sequence and entity states described in the task.\n- Preconditions and effects are carefully crafted to ensure consistency with the example format and the task's intent.\n- If any step seemed irrelevant or unclear, it was adjusted to align with the task's goal of cooking a cheeseburger.\n(:action cook_meat\n    :parameters (?p - player ?meat - beef ?pan - skillet ?stove - stove_knob ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?meat ?loc) (at ?pan ?loc) (at ?stove ?loc) (temperature ?stove hot) (cooked_or_not ?meat uncooked))\n    :effect (and (cooked_or_not ?meat cooked) (temperature ?meat hot) (not (cooked_or_not ?meat uncooked)))\n)\n```\n\n#### 5. Finish the Meat\n```lisp\n\n(:action cook_burgers\n    :parameters (?p - player ?grill - grill ?patty1 - patty ?patty2 - patty)\n    :precondition (and (at ?p ?grill) (on ?grill) (on_grill ?patty1 ?grill) (on_grill ?patty2 ?grill) \n                       (preheated ?grill) (not (cooked ?patty1)) (not (cooked ?patty2)))\n    :effect (and (cooked ?patty1) (cooked ?patty2))\n)\n```\n\n---\n\n#### **Step 5: Remove the burgers and test the internal temperature for doneness.**\n\n```lisp\n\n(:action cook_burger_first_side\n    :parameters (?burger - ingredient ?pan - tool ?stove - appliance)\n    :precondition (and\n        (in-pan ?burger ?pan)\n        (flattened ?burger)\n        (seasoned ?burger)\n        (at-tool ?pan stove_top)\n        (has-power ?stove)\n    )\n    :effect (and\n        (cooked_first_side ?burger)\n        (browned_first_side ?burger)\n    )\n)\n```\n\n---\n\n#### Action 5: Flip_and_season_burger\n```lisp\n\n(:action cook_burger_second_side\n    :parameters (?burger - ingredient ?pan - tool ?stove - appliance)\n    :precondition (and\n        (in-pan ?burger ?pan)\n        (flipped ?burger)\n        (seasoned_second_side ?burger)\n        (at-tool ?pan stove_top)\n        (has-power ?stove)\n    )\n    :effect (and\n        (cooked_second_side ?burger)\n        (browned_second_side ?burger)\n        (fully_cooked ?burger)\n    )\n)\n```\n\n---\n\n### Explanation of the Actions:\n\n1. **Warm_oil_in_pan**: This action captures the step of warming vegetable oil in the pan. Preconditions include the presence of oil, a clean pan, and a powered stove. The effect is that the oil and pan are heated.\n\n2. **Place_and_smash_burger**: This action places the burger in the pan and ensures it is smashed flat. The burger must be at the same location as the pan, and the pan must be heated.\n\n3. **Season_burger**: This step allows seasoning the burger with salt and pepper. The burger must already be in the pan and flattened.\n\n4. **Cook_burger_first_side**: This action cooks the first side of the burger until it is browned. The pan must be on the stove, and the stove must be powered.\n\n5. **Flip_and_season_burger**: This action flips the burger to the other side and seasons it again. The burger must already have its first side cooked.\n\n6. **Cook_burger_second_side**: This action cooks the second side of the burger until it is browned and fully cooked. The pan must remain on the stove with power.\n\n---\n\nThis sequence of actions accurately represents the logical steps for the task \"How to Keep Burgers Flat\" while adhering to the PDDL structure.\n(:action make_basic_polenta\n    :parameters (?polenta - entity ?water - entity ?salt - entity ?pot - entity ?stove - entity)\n    :precondition (and\n      (at_location ?polenta in_package)\n      (at_location ?water in_bottle)\n      (at_location ?salt in_shaker)\n      (at_location ?pot on_counter)\n      (has_power ?stove off)\n    )\n    :effect (and\n      (not (at_location ?polenta in_package))\n      (at_location ?polenta in_pot)\n      (not (at_location ?water in_bottle))\n      (at_location ?water in_pot)\n      (not (at_location ?salt in_shaker))\n      (at_location ?salt in_pot)\n      (not (at_location ?pot on_counter))\n      (at_location ?pot on_stove)\n      (not (has_power ?stove off))\n      (has_power ?stove on)\n    )\n)\n```\n\n---\n\n#### Step 3: Stir in the butter and cheese\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:chill\n\n\nAction sets that need to be merged:\n(:action chill_beef\n    :parameters (?p - player ?gc - ground_chuck ?fridge - location)\n    :precondition (and (inventory ?p ?gc) (at ?p ?fridge) (prepared ?gc) (not (chilled ?gc)))\n    :effect (and (chilled ?gc) (not (prepared ?gc)))\n)\n```\n\n#### Action 3: season_meat\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:place\n\n\nAction sets that need to be merged:\n(:action season_meat\n    :parameters (?p - player ?gc - ground_chuck)\n    :precondition (and (inventory ?p ?gc) (chilled ?gc) (not (seasoned ?gc)))\n    :effect (and (seasoned ?gc) (not (chilled ?gc)))\n)\n```\n\n#### Action 4: form_patties\n```lisp\n\n(:action season_burger\n    :parameters (?burger - ingredient ?seasoning - ingredient ?pan - tool)\n    :precondition (and\n        (in-pan ?burger ?pan)\n        (flattened ?burger)\n        (available ?seasoning)\n    )\n    :effect (and\n        (seasoned ?burger)\n    )\n)\n```\n\n---\n\n#### Action 4: Cook_burger_first_side\n```lisp\n\n(:action place_burgers_on_grill\n    :parameters (?p - player ?patty - patties ?grill - location)\n    :precondition (and (inventory ?p ?patty) (at ?p ?grill) (hot_fire ?grill) (not (cooked ?patty)))\n    :effect (and (cooking ?patty) (not (inventory ?p ?patty)))\n)\n```\n\n#### Action 7: check_doneness\n```lisp\n\n(:action place_ground_beef_in_bowl\n    :parameters (?meat - ingredient ?bowl - tool ?loc - location)\n    :precondition (and\n        (ready ?meat)\n        (at ?meat ?loc)\n        (clean ?bowl)\n        (at-tool ?bowl ?loc)\n    )\n    :effect (and\n        (in-bowl ?meat ?bowl)\n        (not (at ?meat ?loc))\n    )\n)\n```\n\n---\n\n#### Step 3: Roughly chop the onion and garlic.\n```lisp\n\n(:action place_burgers_on_plate\n    :parameters (?burger - ingredient ?plate - tool ?loc - location)\n    :precondition (and\n        (shaped ?burger)\n        (clean ?plate)\n        (at-tool ?plate ?loc)\n    )\n    :effect (and\n        (on-plate ?burger ?plate)\n        (not (shaped ?burger))\n    )\n)\n```\n\n---\n\n#### Step 8: Choose your cooking method.\n```lisp\n\n(:action place_patties_on_grill\n    :parameters (?p - player ?grill - grill ?patty1 - patty ?patty2 - patty)\n    :precondition (and (at ?p ?grill) (on ?grill) (inventory ?p ?patty1) (inventory ?p ?patty2) (frozen ?patty1) (frozen ?patty2))\n    :effect (and (on_grill ?patty1 ?grill) (on_grill ?patty2 ?grill) \n                 (not (inventory ?p ?patty1)) (not (inventory ?p ?patty2)))\n)\n```\n\n---\n\n#### **Step 4: Close the lid and cook the burgers for 4.5-6.5 minutes.**\n\n```lisp\n\n(:action place_and_smash_burger\n    :parameters (?burger - ingredient ?pan - tool ?loc - location)\n    :precondition (and\n        (at ?burger ?loc)\n        (at-tool ?pan ?loc)\n        (heated ?pan)\n    )\n    :effect (and\n        (in-pan ?burger ?pan)\n        (flattened ?burger)\n        (not (at ?burger ?loc))\n    )\n)\n```\n\n---\n\n#### Action 3: Season_burger\n```lisp\n\n(:action spread-mixture-on-toast\n    :parameters (?m - mixture ?t - toast)\n    :precondition (and (mixed ?m) \n                       (toasted ?t) \n                       (flavorful ?t))\n    :effect (and (spread ?m ?t) \n                 (tasty ?t) \n                 (not (plain ?t))))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **gather-ingredients**: This action gathers all necessary ingredients (corned beef hash, onion, mayonnaise, salt, and pepper) into a bowl. The preconditions ensure the ingredients are in their respective locations and the bowl is empty. The effects move the ingredients into the bowl and update their locations.\n\n2. **combine-ingredients**: This action combines the ingredients in the bowl, mixing them thoroughly. The preconditions check that the ingredients are in the bowl. The effects mark the bowl as mixed and no longer separate.\n\n3. **toast-bread**: This action toasts the bread using a toaster. The preconditions ensure the bread is plain and located on the counter, and the toaster is empty. The effects make the bread toasted and flavorful.\n\n4. **spread-mixture-on-toast**: This action spreads the corned beef hash mixture onto the toasted bread. The preconditions ensure the mixture is mixed, and the bread is toasted and flavorful. The effects make the toast tasty and spread with the mixture.\n\n---\n\n### Notes:\n- The entity states provided were used to derive preconditions and effects for each action.\n- Irrelevant or ambiguous steps were adjusted to fit the logical flow of the task.\n- The PDDL actions align with the example format and structure provided.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:check\n\n\nAction sets that need to be merged:\n(:action check_doneness\n    :parameters (?p - player ?patty - patties)\n    :precondition (and (cooking ?patty) (not (checked ?patty)))\n    :effect (checked ?patty)\n)\n```\n\n#### Action 8: serve_burger\n```lisp\n\n(:action check_burger_temperature\n    :parameters (?p - player ?grill - grill ?patty - patty)\n    :precondition (and (at ?p ?grill) (on_grill ?patty ?grill) (cooked ?patty))\n    :effect (and (inventory ?p ?patty) (not (on_grill ?patty ?grill)) (tested ?patty))\n)\n```\n\n---\n\n#### **Step 6: Eat the burgers before the internal temperature falls below 140 \u00b0F (60 \u00b0C).**\n\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:serve\n\n\nAction sets that need to be merged:\n(:action serve_burger\n    :parameters (?p - player ?patty - patties ?bun - item ?plate - location)\n    :precondition (and (checked ?patty) (cooked ?patty) (at ?bun ?plate) (not (served ?patty)))\n    :effect (and (served ?patty) (at ?patty ?plate))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **prepare_ground_chuck**: This action prepares the ground chuck, ensuring it is in a usable state for forming patties.\n2. **chill_beef**: The ground chuck is chilled to ensure it is firm and ready for forming patties.\n3. **season_meat**: The meat is seasoned with salt and pepper for flavor.\n4. **form_patties**: The chilled and seasoned ground chuck is formed into patties of the desired size and thickness.\n5. **build_hot_fire**: A hot fire is built in the grill to prepare it for cooking the patties.\n6. **place_burgers_on_grill**: The formed patties are placed on the grill over direct heat to begin cooking.\n7. **check_doneness**: The doneness of the patties is checked using a spatula or thermometer.\n8. **serve_burger**: The cooked patties are served on fresh buns with toppings as desired.\n\nEach action aligns with the task steps and descriptions provided, ensuring the process of grilling the perfect burger is accurately represented in PDDL. If a step was irrelevant or unclear, it was adjusted to maintain task relevance.\n(:action serve_polenta\n    :parameters (?polenta - entity ?pot - entity ?bowl - entity ?stove - entity)\n    :precondition (and\n      (at_location ?polenta in_pot)\n      (at_location ?pot on_stove)\n      (has_power ?stove on)\n      (has_temperature ?polenta hot)\n      (at_location ?bowl on_counter)\n    )\n    :effect (and\n      (not (at_location ?polenta in_pot))\n      (at_location ?polenta in_bowl)\n      (not (at_location ?pot on_stove))\n      (at_location ?pot in_sink)\n      (not (has_power ?stove on))\n      (has_power ?stove off)\n    )\n)\n```\n\n---\n\n### Notes:\n- Each step follows the logical flow of the task and ensures the preconditions and effects are consistent with the entity states provided.\n- The attributes such as location, cleanliness, and temperature are incorporated into the preconditions and effects to reflect the changes in the environment or object states after each action.\n- Irrelevant or missing details were adjusted to make the steps coherent and relevant to the task of cooking polenta.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:choose\n\n\nAction sets that need to be merged:\n(:action select_good_meat\n    :parameters (?meat - ingredient ?loc - location)\n    :precondition (and\n        (at ?meat ?loc)\n        (quality ?meat good)\n        (type ?meat ground_beef)\n    )\n    :effect (and\n        (ready ?meat)\n    )\n)\n```\n\n---\n\n#### Step 2: Place the ground beef in a bowl.\n```lisp\n\n(:action choose_cooking_method\n    :parameters (?method - cooking_method ?stove - appliance ?grill - appliance)\n    :precondition (or\n        (available ?stove)\n        (available ?grill)\n    )\n    :effect (and\n        (selected ?method)\n        (ready-to-cook ?method)\n    )\n)\n```\n\n---\n\n#### Step 9: While the burgers are cooking, prepare the toppings.\n```lisp\n\n(:action choose_patties\n    :parameters (?p - player ?patty - patty)\n    :precondition (and (at ?p fridge) (at ?patty fridge) (frozen ?patty) (thickness ?patty <= 0.5))\n    :effect (and (inventory ?p ?patty) (not (at ?patty fridge)))\n)\n```\n\n---\n\n#### **Step 2: Preheat the grill for 5 minutes.**\n\n```lisp\n\n(:action gather-ingredients\n    :parameters (?b - bowl ?i1 - ingredient ?i2 - ingredient ?i3 - ingredient ?i4 - ingredient ?i5 - ingredient)\n    :precondition (and (empty ?b) \n                       (atLocation ?i1 pantry) \n                       (atLocation ?i2 fridge) \n                       (atLocation ?i3 fridge) \n                       (atLocation ?i4 pantry) \n                       (atLocation ?i5 pantry))\n    :effect (and (inBowl ?i1 ?b) \n                 (inBowl ?i2 ?b) \n                 (inBowl ?i3 ?b) \n                 (inBowl ?i4 ?b) \n                 (inBowl ?i5 ?b)\n                 (not (atLocation ?i1 pantry))\n                 (not (atLocation ?i2 fridge))\n                 (not (atLocation ?i3 fridge))\n                 (not (atLocation ?i4 pantry))\n                 (not (atLocation ?i5 pantry))))\n)\n```\n\n---\n\n#### Action 2: combine-ingredients\n```lisp\n\n(:action gather_ingredients\n    :parameters (?ingredients - entity ?kitchen - location)\n    :precondition (and\n      (at_location ?ingredients in_pantry)\n      (has_cleanliness ?kitchen clean)\n    )\n    :effect (and\n      (not (at_location ?ingredients in_pantry))\n      (at_location ?ingredients on_counter)\n    )\n)\n```\n\n---\n\n#### Step 2: Make the basic polenta recipe\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:chop\n\n\nAction sets that need to be merged:\n(:action chop_onion_and_garlic\n    :parameters (?onion - ingredient ?garlic - ingredient ?knife - tool ?board - tool ?loc - location)\n    :precondition (and\n        (at ?onion ?loc)\n        (at ?garlic ?loc)\n        (at-tool ?knife ?loc)\n        (at-tool ?board ?loc)\n        (clean ?knife)\n        (clean ?board)\n    )\n    :effect (and\n        (chopped ?onion)\n        (chopped ?garlic)\n        (not (whole ?onion))\n        (not (whole ?garlic))\n    )\n)\n```\n\n---\n\n#### Step 4: Add the egg yolk.\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:add\n\n\nAction sets that need to be merged:\n(:action add_egg_yolk\n    :parameters (?yolk - ingredient ?bowl - tool)\n    :precondition (and\n        (in-bowl ?bowl)\n        (at ?yolk ?bowl)\n        (clean ?yolk)\n    )\n    :effect (and\n        (in-bowl ?yolk ?bowl)\n        (mixed ?yolk ?bowl)\n    )\n)\n```\n\n---\n\n#### Step 5: Mix it all together.\n```lisp\n\n(:action add_detail_tomato)\n**Action Name:** add_detail_tomato  \n**Parameters:** (?p - writer ?para - paragraph ?detail - sentence)  \n**Preconditions:**  \n- (and (has_topic_sentence ?para ?topic) (not (has_detail ?para ?detail)))  \n**Effects:**  \n- (and (has_detail ?para ?detail) (detail_type ?detail tomato))\n\n---\n\n#### \n(:action add_detail_cheese)\n**Action Name:** add_detail_cheese  \n**Parameters:** (?p - writer ?para - paragraph ?detail - sentence)  \n**Preconditions:**  \n- (and (has_detail ?para ?prev_detail) (not (has_detail ?para ?detail)))  \n**Effects:**  \n- (and (has_detail ?para ?detail) (detail_type ?detail cheese))\n\n---\n\n#### \n(:action add_burger_sentence)\n**Action Name:** add_burger_sentence  \n**Parameters:** (?p - writer ?para - paragraph ?burger - sentence)  \n**Preconditions:**  \n- (and (has_detail ?para ?prev_detail) (not (has_burger ?para ?burger)))  \n**Effects:**  \n- (and (has_burger ?para ?burger))\n\n---\n\n#### \n(:action add_detail_lettuce)\n**Action Name:** add_detail_lettuce  \n**Parameters:** (?p - writer ?para - paragraph ?detail - sentence)  \n**Preconditions:**  \n- (and (has_burger ?para ?burger) (not (has_detail ?para ?detail)))  \n**Effects:**  \n- (and (has_detail ?para ?detail) (detail_type ?detail lettuce))\n\n---\n\n#### \n(:action add_detail_onion)\n**Action Name:** add_detail_onion  \n**Parameters:** (?p - writer ?para - paragraph ?detail - sentence)  \n**Preconditions:**  \n- (and (has_topic_sentence ?para ?topic) (not (has_detail ?para ?detail)))  \n**Effects:**  \n- (and (has_detail ?para ?detail) (detail_type ?detail onion))\n\n---\n\n#### \n(:action add_bottom_bun)\n**Action Name:** add_bottom_bun  \n**Parameters:** (?p - writer ?para - paragraph ?conclusion - sentence)  \n**Preconditions:**  \n- (and (has_detail ?para ?last_detail) (not (has_conclusion ?para ?conclusion)))  \n**Effects:**  \n- (and (has_conclusion ?para ?conclusion))\n\n---\n\n#### \n(:action mix_ingredients\n    :parameters (?bowl - tool ?meat - ingredient ?onion - ingredient ?garlic - ingredient ?yolk - ingredient)\n    :precondition (and\n        (in-bowl ?meat ?bowl)\n        (in-bowl ?onion ?bowl)\n        (in-bowl ?garlic ?bowl)\n        (in-bowl ?yolk ?bowl)\n        (clean ?bowl)\n    )\n    :effect (and\n        (mixed ?meat ?bowl)\n        (mixed ?onion ?bowl)\n        (mixed ?garlic ?bowl)\n        (mixed ?yolk ?bowl)\n        (ready-to-shape ?bowl)\n    )\n)\n```\n\n---\n\n#### Step 6: Create the burgers.\n```lisp\n\n(:action combine-ingredients\n    :parameters (?b - bowl ?i1 - corned_beef_hash ?i2 - onion ?i3 - mayonnaise ?i4 - salt ?i5 - pepper)\n    :precondition (and (inBowl ?i1 ?b) \n                       (inBowl ?i2 ?b) \n                       (inBowl ?i3 ?b) \n                       (inBowl ?i4 ?b) \n                       (inBowl ?i5 ?b) \n                       (empty ?b))\n    :effect (and (mixed ?b) \n                 (not (separate ?b))\n                 (not (empty ?b))))\n)\n```\n\n---\n\n#### Action 3: toast-bread\n```lisp\n\n(:action stir_in_butter_and_cheese\n    :parameters (?butter - entity ?cheese - entity ?polenta - entity ?pot - entity ?spatula - entity)\n    :precondition (and\n      (at_location ?butter in_fridge)\n      (at_location ?cheese in_fridge)\n      (at_location ?polenta in_pot)\n      (at_location ?pot on_stove)\n      (has_power ?stove on)\n      (has_cleanliness ?spatula clean)\n    )\n    :effect (and\n      (not (at_location ?butter in_fridge))\n      (at_location ?butter in_pot)\n      (not (at_location ?cheese in_fridge))\n      (at_location ?cheese in_pot)\n      (not (has_cleanliness ?spatula clean))\n      (has_cleanliness ?spatula dirty)\n      (has_mixture ?polenta mixed_with_butter_and_cheese)\n    )\n)\n```\n\n---\n\n#### Step 4: Stir in the milk, parsley, and spices\n```lisp\n\n(:action stir_in_milk_parsley_spices\n    :parameters (?milk - entity ?parsley - entity ?spices - entity ?polenta - entity ?pot - entity ?spatula - entity)\n    :precondition (and\n      (at_location ?milk in_fridge)\n      (at_location ?parsley in_pantry)\n      (at_location ?spices in_pantry)\n      (at_location ?polenta in_pot)\n      (at_location ?pot on_stove)\n      (has_power ?stove on)\n      (has_cleanliness ?spatula dirty)\n    )\n    :effect (and\n      (not (at_location ?milk in_fridge))\n      (at_location ?milk in_pot)\n      (not (at_location ?parsley in_pantry))\n      (at_location ?parsley in_pot)\n      (not (at_location ?spices in_pantry))\n      (at_location ?spices in_pot)\n      (not (has_cleanliness ?spatula dirty))\n      (has_cleanliness ?spatula dirty_with_mixture)\n      (has_mixture ?polenta mixed_with_milk_parsley_spices)\n    )\n)\n```\n\n---\n\n#### Step 5: Place the polenta in a bowl and serve hot\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:shape\n\n\nAction sets that need to be merged:\n(:action shape_burgers\n    :parameters (?bowl - tool ?burger - ingredient)\n    :precondition (and\n        (ready-to-shape ?bowl)\n        (clean ?bowl)\n    )\n    :effect (and\n        (shaped ?burger)\n        (not (ready-to-shape ?bowl))\n    )\n)\n```\n\n---\n\n#### Step 7: Arrange the burgers on a plate.\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:write\n\n\nAction sets that need to be merged:\n(:action write_topic_sentence)\n**Action Name:** write_topic_sentence  \n**Parameters:** (?p - writer ?para - paragraph ?topic - sentence)  \n**Preconditions:**  \n- (and (has_idea ?p ?topic) (is_empty ?para))  \n**Effects:**  \n- (and (has_topic_sentence ?para ?topic) (not (is_empty ?para)))\n\n---\n\n#### \nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:analyze\n\n\nAction sets that need to be merged:\n(:action analyze_paragraph)\n**Action Name:** analyze_paragraph  \n**Parameters:** (?p - writer ?para - paragraph)  \n**Preconditions:**  \n- (and (has_conclusion ?para ?conclusion))  \n**Effects:**  \n- (and (analyzed ?para))\n\n---\n\n#### \n(:action review_paragraph)\n**Action Name:** review_paragraph  \n**Parameters:** (?p - writer ?para - paragraph)  \n**Preconditions:**  \n- (and (analyzed ?para))  \n**Effects:**  \n- (and (reviewed ?para) (improved ?para))\n\n---\n\n### Notes:\n- The \"hamburger\" metaphor is captured by the sequence of actions: topic sentence (top bun), details (tomato, cheese, lettuce, onion), burger sentence, and conclusion (bottom bun).\n- Preconditions ensure logical progression in writing the paragraph.\n- Effects update the paragraph's state after each action to reflect the added components.\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:toast\n\n\nAction sets that need to be merged:\n(:action toast-bread\n    :parameters (?b - bread ?t - toaster)\n    :precondition (and (atLocation ?b counter) \n                       (empty ?t) \n                       (plain ?b))\n    :effect (and (toasted ?b) \n                 (flavorful ?b) \n                 (not (plain ?b)) \n                 (not (bland ?b))\n                 (inToaster ?b ?t)))\n)\n```\n\n---\n\n#### Action 4: spread-mixture-on-toast\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:defrost\n\n\nAction sets that need to be merged:\n(:action defrost_meat\n    :parameters (?p - player ?meat - beef ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?meat ?loc) (temperature ?meat cold))\n    :effect (and (temperature ?meat room_temperature) (not (temperature ?meat cold)))\n)\n```\n\n#### 2. Prep Bread\n```lisp\n\n(:action warm_oil_in_pan\n    :parameters (?oil - ingredient ?pan - tool ?stove - appliance ?loc - location)\n    :precondition (and\n        (at ?oil ?loc)\n        (at-tool ?pan ?loc)\n        (at-appliance ?stove ?loc)\n        (has-power ?stove)\n        (clean ?pan)\n    )\n    :effect (and\n        (heated ?oil)\n        (heated ?pan)\n        (not (at ?oil ?loc))\n    )\n)\n```\n\n---\n\n#### Action 2: Place_and_smash_burger\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:finish\n\n\nAction sets that need to be merged:\n(:action finish_meat\n    :parameters (?p - player ?meat - beef ?bowl - bowl ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?meat ?loc) (at ?bowl ?loc) (cooked_or_not ?meat cooked) (location ?meat in_skillet))\n    :effect (and (location ?meat in_bowl) (not (location ?meat in_skillet)))\n)\n```\n\n#### 6. Finish the Bread\n```lisp\n\n(:action finish_bread\n    :parameters (?p - player ?dough - bread_dough ?pan - baking_pan ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?dough ?loc) (at ?pan ?loc) (location ?dough on_wax_paper) (texture ?dough smooth))\n    :effect (and (location ?dough in_pan) (texture ?dough rigid) (not (location ?dough on_wax_paper)))\n)\n```\n\n#### 7. Finish the Meal\n```lisp\n\n(:action finish_meal\n    :parameters (?p - player ?bread - bread_dough ?meat - beef ?sauce - sauce ?plate - plate ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?bread ?loc) (at ?meat ?loc) (at ?sauce ?loc) (at ?plate ?loc) \n                       (texture ?bread rigid) (cooked_or_not ?meat cooked) (composition ?sauce mixed))\n    :effect (and (location ?bread on_plate) (location ?meat on_plate) (location ?sauce on_plate) (not (location ?bread in_pan)))\n)\n```\n\n#### 8. Enjoy Burger Bites\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:enjoy\n\n\nAction sets that need to be merged:\n(:action enjoy_burger_bites\n    :parameters (?p - player ?meal - burger_bites ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?meal ?loc) (location ?meal on_plate))\n    :effect (and (enjoyed ?meal))\n)\n```\n\n---\n\n### Notes:\n1. **Defrost Meat**: Captures the transition of the beef's temperature from cold to room temperature.\n2. **Prep Bread**: Includes flattening the dough and warming it to prepare it for baking.\n3. **Prep Sauce**: Mixes separate ingredients into a cohesive sauce in a mixing bowl.\n4. **Cook the Meat**: Simulates the cooking process by changing the beef's state from uncooked to cooked.\n5. **Finish the Meat**: Transfers the cooked beef from the skillet to a bowl for later use.\n6. **Finish the Bread**: Places the bread dough into a pan and changes its texture to rigid (ready for baking or assembly).\n7. **Finish the Meal**: Combines all prepared components (bread, meat, and sauce) onto a plate.\n8. **Enjoy Burger Bites**: Final step where the player enjoys the completed meal.\n\nThese actions align with the task's logical progression and the provided entity states.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:eat\n\n\nAction sets that need to be merged:\n(:action eat_burger\n    :parameters (?p - player ?patty - patty)\n    :precondition (and (inventory ?p ?patty) (cooked ?patty) (tested ?patty) (temperature ?patty >= 140))\n    :effect (and (eaten ?patty) (not (inventory ?p ?patty)))\n)\n```\n\n---\n\n### Key Notes:\n- **Preheat Grill:** The grill must be preheated before placing patties on it.\n- **Cook Patties:** The patties must be frozen and meet the thickness requirement before cooking.\n- **Check Temperature:** Testing for doneness ensures the burgers are safe to eat.\n- **Eat Burgers:** Temperature must remain above 140\u00b0F for safe consumption.\n\nThe actions are designed to align with the task's logical flow and ensure the conditions and effects are properly captured for each step.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:flip\n\n\nAction sets that need to be merged:\n(:action flip_and_season_burger\n    :parameters (?burger - ingredient ?seasoning - ingredient ?pan - tool)\n    :precondition (and\n        (in-pan ?burger ?pan)\n        (cooked_first_side ?burger)\n        (available ?seasoning)\n    )\n    :effect (and\n        (flipped ?burger)\n        (seasoned_second_side ?burger)\n    )\n)\n```\n\n---\n\n#### Action 6: Cook_burger_second_side\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:prep\n\n\nAction sets that need to be merged:\n(:action prep_bread\n    :parameters (?p - player ?dough - bread_dough ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?dough ?loc) (temperature ?dough cold) (location ?dough in_bowl))\n    :effect (and (temperature ?dough warm) (location ?dough on_wax_paper) (not (location ?dough in_bowl)))\n)\n```\n\n#### 3. Prep Sauce\n```lisp\n\n(:action prep_sauce\n    :parameters (?p - player ?ingredients - sauce_ingredients ?bowl - mixing_bowl ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?ingredients ?loc) (at ?bowl ?loc) (composition ?ingredients separate))\n    :effect (and (composition ?ingredients mixed) (location ?ingredients in_bowl) (not (composition ?ingredients separate)))\n)\n```\n\n#### 4. Cook the Meat\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:preheat\n\n\nAction sets that need to be merged:\n(:action preheat_grill\n    :parameters (?p - player ?grill - grill)\n    :precondition (and (at ?p ?grill) (not (on ?grill)))\n    :effect (and (on ?grill) (preheated ?grill))\n)\n```\n\n---\n\n#### **Step 3: Place 2-4 frozen patties on the lower grill plate.**\n\n```lisp\n\nThe actions after the merger are:"
]