[
    {
        "task": "How to Buy a Remote Keyless Entry System for a Car",
        "instantiting_action": [
            "install(dealer car store)",
            "install(dealer car site)",
            "install(dealer product store)",
            "install(dealer product site)",
            "install(dealer kit store)",
            "install(dealer kit site)",
            "install(retailer car store)",
            "install(retailer car site)",
            "install(retailer product store)",
            "install(retailer product site)",
            "install(retailer kit store)",
            "install(retailer kit site)",
            "check(entity budget store)",
            "check(entity budget site)",
            "listen(entity internet store)",
            "listen(entity internet site)",
            "evaluate(entity budget store)",
            "evaluate(entity budget site)",
            "seek(entity target store)",
            "seek(entity target site)",
            "shop(entity budget store)",
            "shop(entity budget site)",
            "research(entity topic store)",
            "research(entity topic site)",
            "test(entity budget remote store)",
            "test(entity budget remote site)",
            "test(entity budget keyless store)",
            "test(entity budget keyless site)",
            "go(dealer store entry)",
            "go(dealer site entry)",
            "go(retailer store entry)",
            "go(retailer site entry)",
            "choose(agent car list)",
            "choose(agent product list)",
            "choose(agent kit list)",
            "take(actor entity)",
            "talk(dealer entity)",
            "talk(retailer entity)",
            "pick(entity car target)",
            "pick(entity product target)",
            "pick(entity kit target)",
            "make(agent loc car)",
            "make(agent loc product)",
            "make(agent loc kit)",
            "confirm(entity checker price)",
            "confirm(entity checker option)",
            "confirm(entity checker feature)",
            "choose_type_of_display(display entity)",
            "compare(entity item1 item2)",
            "understand(p recommendation)",
            "identify(entity car)",
            "identify(entity product)",
            "identify(entity kit)",
            "evaluate(agent car criteria)",
            "evaluate(agent product criteria)",
            "evaluate(agent kit criteria)",
            "finish(dealer research car store)",
            "finish(dealer research car site)",
            "finish(dealer research product store)",
            "finish(dealer research product site)",
            "finish(dealer research kit store)",
            "finish(dealer research kit site)",
            "finish(retailer research car store)",
            "finish(retailer research car site)",
            "finish(retailer research product store)",
            "finish(retailer research product site)",
            "finish(retailer research kit store)",
            "finish(retailer research kit site)",
            "determine(agent aspect)",
            "list_features(a)",
            "search_remote_starter_manufacturers(a)",
            "list(a budget)",
            "contact_manufacturers(a manufacturer)",
            "contact(agent entity)",
            "research(agent target)",
            "decide(p research)",
            "perform_task(actor target store budget)",
            "perform_task(actor target site budget)",
            "recycle(p car store)",
            "recycle(p car site)",
            "recycle(p product store)",
            "recycle(p product site)",
            "recycle(p kit store)",
            "recycle(p kit site)"
        ]
    },
    {
        "task": "How to Reset a Factory Car Alarm",
        "instantiting_action": [
            "install(dealer item factory)",
            "install(dealer item store)",
            "install(professional item factory)",
            "install(professional item store)",
            "check(entity resource factory)",
            "check(entity resource store)",
            "listen(entity source factory)",
            "listen(entity source store)",
            "evaluate(entity resource factory)",
            "evaluate(entity resource store)",
            "seek(entity target factory)",
            "seek(entity target store)",
            "shop(entity resource factory)",
            "shop(entity resource store)",
            "research(entity topic factory)",
            "research(entity topic store)",
            "test(entity resource transmitter factory)",
            "test(entity resource transmitter store)",
            "test(entity resource sensor factory)",
            "test(entity resource sensor store)",
            "go(dealer factory state)",
            "go(dealer store state)",
            "go(professional factory state)",
            "go(professional store state)",
            "choose(agent item context)",
            "take(actor entity)",
            "talk(dealer entity)",
            "talk(professional entity)",
            "pick(entity item target)",
            "make(agent loc item)",
            "confirm(entity checker feature)",
            "choose_type_of_display(display entity)",
            "compare(entity item1 item2)",
            "understand(p concept)",
            "identify(entity item)",
            "evaluate(agent item criteria)",
            "finish(dealer automation item factory)",
            "finish(dealer automation item store)",
            "finish(dealer diy item factory)",
            "finish(dealer diy item store)",
            "finish(professional automation item factory)",
            "finish(professional automation item store)",
            "finish(professional diy item factory)",
            "finish(professional diy item store)",
            "determine(agent aspect)",
            "list_features(a)",
            "search_remote_starter_manufacturers(a)",
            "list(a resource)",
            "contact_manufacturers(a m)",
            "contact(agent entity)",
            "research(agent target)",
            "decide(p automation)",
            "decide(p diy)",
            "perform_task(actor target factory resource)",
            "perform_task(actor target store resource)",
            "recycle(p item factory)",
            "recycle(p item store)"
        ]
    }
]