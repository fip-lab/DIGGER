[
    {
        "task": "heal-old-man",
        "step": [
            "go north npc parkinglot park",
            "go south npc park church",
            "get npc church pot",
            "go north npc church park",
            "collect_rain_water npc park pot water",
            "go east npc park store",
            "get npc store bandage",
            "boil_water npc brickhouse water pot",
            "clean_others_wound npc old_man water bandage"
        ],
        "desc": [
            "Purify any water you drink that isn\u2019t from a sealed bottle. A waterborne illness can be life-threatening in a survival situation. If need to use any unbottled water for drinking, always purify it first. The most common method is boiling the water for 1 minute to kill any pathogens. Then filter out larger objects by pouring the water through a fine net or cloth.",
            "Eat as healthy as you can. This isn\u2019t always possible and you have to survive on whatever food you can find. But if at all possible, keep your health up with nutritious food. A steady supply of vitamins, minerals, antioxidants, and fatty acids will help keep your immune system up and fight off sickness.",
            "Loot supplies if you have no other choice. Unfortunately, people sometimes have to do desperate things to survive. If you come across supplies or stores that no one is watching or look abandoned, then take everything you need. This might be ethically wrong, but you and your family have to survive."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action barter_food_for_healing ; get food in exchange for healing.\n      :parameters (?p - player ?p_inj - player ?water - water ?bandage - bandage ?food - food ?l -location) \n      :precondition (and (inventory ?p ?water) (inventory ?p ?bandage) (is_injured ?p_inj) (at ?p ?l) (at ?p_inj ?l))\n      :effect (and (not (is_injured ?p_inj)) (gettable ?food)  )\n   )\n\n   \n)",
            "(:action gofish \n      :parameters (?p - player ?l - location ?fp - fishingpole ?f - fish)\n      :precondition (and (at ?p ?l) (inventory ?p ?fp) (haslake ?l) (at ?f ?l))\n      :effect (and (gettable ?f) )\n   )",
            "(:action clean_others_wound ; heal injury.\n      :parameters (?p - player ?p_inj - player ?water - water ?bandage - bandage) \n      :precondition (and (inventory ?p ?water) (treated ?water) (inventory ?p ?bandage) (is_injured ?p_inj))\n      :effect (and (not (is_injured ?p_inj)) (not (inventory ?p ?water)) (not (inventory ?p ?bandage)) )\n   )",
            "(:action collect_rain_water ; collect rain water to be treated.\n      :parameters (?p - player ?loc - location ?pot - pot ?water - water) \n      :precondition (and (inventory ?p ?pot) (at ?p ?loc) (outdoors ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get\n      :parameters (?p - player ?l - location ?i - item)\n      :precondition (and (at ?p ?l) (at ?i ?l) (gettable ?i))\n      :effect (and (not (at ?i ?l)) (inventory ?p ?i))\n   )",
            "(:action boil_water ; boil water that has not been treated.\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot) \n      :precondition (and (inventory ?p ?water) (inventory ?p ?pot) (not (treated ?water)))\n      :effect (and (treated ?water))\n   )",
            "(:action break_car_window ; steal food from car.\n      :parameters (?p - player ?car - car ?rock - rock ?item - item) \n      :precondition (and (at ?p ?car) (inventory ?p ?rock) (has_windows ?car) (at ?item ?car))\n      :effect (and (gettable ?item) (not (inventory ?p ?rock)) (not (has_windows ?car)))\n   )"
        ]
    },
    {
        "task": "find-shelter",
        "step": [
            "go north npc parkinglot park",
            "go west npc park car",
            "go north npc car stonehouse",
            "find_shelter npc stonehouse"
        ],
        "desc": [
            "Find a strong, brick building with a basement for shelter. These buildings types can withstand the most damage and remain standing. Look especially for a building with a basement. This provides added protection and a hiding place if you have to stay out of sight. Search your area for suitable buildings like these and move into one as soon as possible."
        ],
        "action": [
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action gofish \n      :parameters (?p - player ?l - location ?fp - fishingpole ?f - fish)\n      :precondition (and (at ?p ?l) (inventory ?p ?fp) (haslake ?l) (at ?f ?l))\n      :effect (and (gettable ?f) )\n   )",
            "(:action find_shelter \n      :parameters (?p - player ?l - location)\n      :precondition (and (at ?p ?l) (has_basement ?l) (not (is_occupied ?l)) )\n      :effect (and (in_shelter ?p))\n   )"
        ]
    },
    {
        "task": "fill-inventory",
        "step": [
            "go south npc parkinglot pond",
            "get_water npc pond water",
            "go north npc pond parkinglot",
            "go north npc parkinglot park",
            "go east npc park store",
            "get npc store bandage",
            "go west npc store park",
            "go west npc park car",
            "go west npc car brickhouse",
            "loot_shelter npc brickhouse food"
        ],
        "desc": [
            "Learn basic first-aid to treat minor injuries. Injuries are unfortunately inevitable, and they can range from minor to serious. Develop at least a basic knowledge of first aid to treat the injuries you or a partner may encounter. When searching for supplies, take any first aid gear you may find and build a basic first aid kit.",
            "Purify any water you drink that isn\u2019t from a sealed bottle. A waterborne illness can be life-threatening in a survival situation. If need to use any unbottled water for drinking, always purify it first. The most common method is boiling the water for 1 minute to kill any pathogens. Then filter out larger objects by pouring the water through a fine net or cloth."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action barter_food_for_healing ; get food in exchange for healing.\n      :parameters (?p - player ?p_inj - player ?water - water ?bandage - bandage ?food - food ?l -location) \n      :precondition (and (inventory ?p ?water) (inventory ?p ?bandage) (is_injured ?p_inj) (at ?p ?l) (at ?p_inj ?l))\n      :effect (and (not (is_injured ?p_inj)) (gettable ?food)  )\n   )\n\n   \n)",
            "(:action gofish \n      :parameters (?p - player ?l - location ?fp - fishingpole ?f - fish)\n      :precondition (and (at ?p ?l) (inventory ?p ?fp) (haslake ?l) (at ?f ?l))\n      :effect (and (gettable ?f) )\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get\n      :parameters (?p - player ?l - location ?i - item)\n      :precondition (and (at ?p ?l) (at ?i ?l) (gettable ?i))\n      :effect (and (not (at ?i ?l)) (inventory ?p ?i))\n   )",
            "(:action loot_shelter ; steal food from location that is occupied.\n      :parameters (?p - player ?loc - location ?food - food) \n      :precondition (and (at ?food ?loc) (at ?p ?loc) (is_occupied ?loc))\n      :effect (and (inventory ?p ?food) (not (at ?food ?loc)))\n   )",
            "(:action break_car_window ; steal food from car.\n      :parameters (?p - player ?car - car ?rock - rock ?item - item) \n      :precondition (and (at ?p ?car) (inventory ?p ?rock) (has_windows ?car) (at ?item ?car))\n      :effect (and (gettable ?item) (not (inventory ?p ?rock)) (not (has_windows ?car)))\n   )"
        ]
    },
    {
        "task": "3-decorate",
        "step": [
            "go south npc bedroom closet",
            "get lantern npc closet",
            "get balloon npc closet",
            "go north npc closet bedroom",
            "go west npc bedroom livingroom",
            "turn_on_tv npc livingroom",
            "hang_lantern npc",
            "blow_balloon npc"
        ],
        "desc": [
            "Put out anime balloons. Draw anime faces on balloons. Alternately, you can call local party supply stores to see if they have any relevant balloons. A third option is to purchase anime balloons online. You can have the balloons filled with helium, or blow them up yourself and place them around.",
            "Hang paper lanterns. Buy paper lanterns, in the color of your party theme, at a party supply store or online. You can also make paper lanterns using tissue paper and bendable metal wire.",
            "Ideas for main dishes include teriyaki meat or salmon, and stir fry with chicken or beef, noodles, vegetables, and toasted sesame seed sauce."
        ],
        "action": [
            "(:action hang_lantern\n    :parameters (?p - player)\n    :precondition (and (inventory ?p lantern))\n    :effect (and (hung lantern) (not (inventory ?p lantern)))\n  )",
            "(:action turn_on_tv\n    :parameters (?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at tv ?l))\n    :effect (on tv)\n  )\n)",
            "(:action blow_balloon\n    :parameters (?p - player)\n    :precondition (and (inventory ?p balloon))\n    :effect (and (inflated balloon) (not (inventory ?p balloon)))\n  )",
            "(:action get\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at ?obj ?l))\n    :effect (and (inventory ?p ?obj) (not (at ?obj ?l)))\n  )",
            "(:action get_beer\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_fridge ?l) (at ?p ?l))\n    :effect (and (inventory ?p beer) (opened beer))\n  )",
            "(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )"
        ]
    },
    {
        "task": "1-cook-food",
        "step": [
            "go west npc bedroom livingroom",
            "go west npc livingroom kitchen",
            "cook npc kitchen clams",
            "cook npc kitchen soup",
            "cook npc kitchen stirfry",
            "cook npc kitchen sushi",
            "cook npc kitchen teriyaki",
            "go east npc kitchen livingroom",
            "drop teriyaki npc livingroom",
            "drop stirfry npc livingroom",
            "drop soup npc livingroom",
            "drop sushi npc livingroom",
            "drop clams npc livingroom"
        ],
        "desc": [
            "Serve beverages. There are various Japanese-themed drinks you can serve at your party. If it\u2019s a kid\u2019s party, you\u2019ll of course want to stick to non-alcoholic options. If it\u2019s an adult party, you may want to include both alcoholic and non-alcoholic beverage choices."
        ],
        "action": [
            "(:action cook\n    :parameters (?p - player ?l - location ?f - food)\n    :precondition (and (has_kitchen ?l) (at ?p ?l))\n    :effect (inventory ?p ?f)\n  )",
            "(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action drop\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (inventory ?p ?obj))\n    :effect (and (at ?obj ?l) (not (inventory ?p ?obj)))\n  )"
        ]
    },
    {
        "task": "2-serve-drinks",
        "step": [
            "get_beer npc bedroom",
            "get phone npc bedroom",
            "go west npc bedroom livingroom",
            "go west npc livingroom kitchen",
            "go north npc kitchen cupboard",
            "get teabag npc cupboard",
            "get soda npc cupboard",
            "go south npc cupboard kitchen",
            "brew npc kitchen",
            "get soymilk npc kitchen",
            "go east npc kitchen livingroom",
            "buy_sake npc",
            "serve npc tea livingroom",
            "drop soymilk npc livingroom",
            "drop soda npc livingroom",
            "drop sake npc livingroom",
            "serve npc beer livingroom"
        ],
        "desc": [
            "Serve beverages. There are various Japanese-themed drinks you can serve at your party. If it\u2019s a kid\u2019s party, you\u2019ll of course want to stick to non-alcoholic options. If it\u2019s an adult party, you may want to include both alcoholic and non-alcoholic beverage choices.",
            "Cut Rice Krispie treats into circles. Attach chewy fruit snacks and Swedish fish to them with Laffy Taffy. Wrap a Fruit Roll-Up around each circle."
        ],
        "action": [
            "(:action buy_sake\n    :parameters (?p - player)\n    :precondition (and (inventory ?p phone) (inventory ?p money))\n    :effect (and (inventory ?p sake) (not (inventory ?p money)))\n  )",
            "(:action get\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at ?obj ?l))\n    :effect (and (inventory ?p ?obj) (not (at ?obj ?l)))\n  )",
            "(:action get_beer\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_fridge ?l) (at ?p ?l))\n    :effect (and (inventory ?p beer) (opened beer))\n  )",
            "(:action brew\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_kitchen ?l) (at ?p ?l) (inventory ?p teabag))\n    :effect (and (inventory ?p tea) (not (inventory ?p teabag)) (opened tea))\n  )",
            "(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action drop\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (inventory ?p ?obj))\n    :effect (and (at ?obj ?l) (not (inventory ?p ?obj)))\n  )",
            "(:action serve\n    :parameters (?p - player ?d - drink ?l - location)\n    :precondition (and (inventory ?p ?d) (opened ?d) (at ?p ?l))\n    :effect (and (not (inventory ?p ?d)) (at ?d ?l))\n  )"
        ]
    },
    {
        "task": "collect-water",
        "step": [
            "go up npc basement kitchen",
            "get bottles kitchen npc",
            "go up npc kitchen bedroom",
            "go in npc bedroom bathroom",
            "drop bottles bathroom npc",
            "fill bottles bathroom npc",
            "put_in_stopper bathtub bathroom npc",
            "get purification_tablets bathroom npc",
            "purify bottles bathroom npc",
            "fill bathtub bathroom npc"
        ],
        "desc": [
            "Shelter in place and wait for the initial chaos to subside. If all of the electronics suddenly stop working, the immediate loss of electricity will cause a lot of sudden confusion and chaos. If you aren\u2019t home, wait 30-45 minutes for all of the abrupt danger to pass. Then, go home if you\u2019re within a few miles or kilometers. If you\u2019re already home, stay there and do not go outside.",
            "Eat anything in your fridge first to minimize food shortages. For the first 1-2 days, eat whatever is in your fridge and hasn\u2019t gone bad immediately. Save the dry stuff for later when you may really need it. The odds are low society will completely collapse and you\u2019ll go without help for super long, but it\u2019s still better to go through everything that\u2019s going to go bad anyway."
        ],
        "action": [
            "(:action drop\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (inventory ?p ?it) (at ?p ?l))\n      :effect (and (not (inventory ?p ?it)) (at ?it ?l))\n   )",
            "(:action fill\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (can_be_filled ?it) (at ?p ?l) (at ?it ?l))\n      :effect (full ?it)\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action purify\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l) (full ?it) (inventory ?p purification_tablets) (not (sealed ?it)))\n      :effect (and (purified ?it) (not (inventory ?p purification_tablets)))\n   )",
            "(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )",
            "(:action put_in_stopper\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (has_stopper ?it) (not (full ?it)) (at ?it ?l) (at ?p ?l))\n      :effect (can_be_filled ?it)\n   )"
        ]
    },
    {
        "task": "turn-on-radio",
        "step": [
            "go up npc kitchen bedroom",
            "get batteries bedroom npc",
            "go down npc bedroom kitchen",
            "go down npc kitchen basement",
            "put_batteries_in npc basement radio",
            "turn_on_radio npc basement radio"
        ],
        "desc": [
            "Your vehicle may still work if it\u2019s older or it doesn\u2019t rely on a dedicated electrical signal outside of the battery to keep the engine going, which is the case for many vehicles.",
            "Turn your radio on immediately to get as much information as possible. Most electronics are going to stop functioning as soon as the EMP goes off. However, depending on the type of EMP, there is a good chance that radios will continue to work\u2014at least for a short while. Turn the radio on and tune in to any news source with a decent signal. Keep it on as long as possible and pay attention while you take the next steps to ensure that you get as much information as you can."
        ],
        "action": [
            "(:action turn_on_radio ; turn on the radio\n      :parameters (?p - player ?loc - location ?radio - radio) \n      :precondition (and (at ?p ?loc) (at ?radio ?loc) (has_batteries ?radio))\n      :effect (on ?radio)\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )",
            "(:action put_batteries_in ; pick up an item and put it in the inventory\n      :parameters (?p - player ?l1 - location ?radio - radio) \n      :precondition (and (at ?p ?l1) (inventory ?p batteries) (not (has_batteries ?radio)))\n      :effect (has_batteries ?radio)\n   )"
        ]
    },
    {
        "task": "get-home",
        "step": [
            "wait npc",
            "go east npc work backroads",
            "go south npc backroads school",
            "get kids school npc",
            "go west npc school home",
            "go down npc home basement",
            "drop kids basement npc"
        ],
        "desc": [
            "If you\u2019re outside during a nuclear blast, cover your mouth and nose with a cloth or mask to avoid breathing in toxic particles."
        ],
        "action": [
            "(:action wait\n      :parameters (?p - player)\n      :precondition (not (at ?p home))\n      :effect (and (not (blocked work east backroads)) (not (blocked school north backroads)) \n              (not (blocked school west home)) (not (blocked home east school)))\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )",
            "(:action drop\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (inventory ?p ?it) (at ?p ?l))\n      :effect (and (not (inventory ?p ?it)) (at ?it ?l))\n   )"
        ]
    },
    {
        "task": "prepare-for-attack",
        "step": [
            "get phone bedroom npc",
            "get ipad bedroom npc",
            "go down npc bedroom kitchen",
            "get aluminum_foil kitchen npc",
            "get laptop kitchen npc",
            "go down npc kitchen basement",
            "get trashcan basement npc",
            "get trashlid basement npc",
            "get nintendo_switch basement npc",
            "create_cage npc basement",
            "put_in_cage npc basement phone",
            "put_in_cage npc basement nintendo_switch",
            "put_in_cage npc basement laptop",
            "put_in_cage npc basement ipad",
            "close_cage npc basement"
        ],
        "desc": [
            "You can drive it if you absolutely have to, but it\u2019s safer to stay off of the roads if you can."
        ],
        "action": [
            "(:action put_in_cage ; put item in the farraday cage\n      :parameters (?p - player ?loc - location ?it - item)\n      :precondition (and (at farraday_cage ?loc) (inventory ?p ?it))\n      :effect (and (in_cage ?it) (not (inventory ?p ?it))  (not (cage_closed farraday_cage)))\n   )\n\n)",
            "(:action close_cage ; Close the farraday cage\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at farraday_cage ?loc) (inventory ?p trashlid))\n      :effect (cage_closed farraday_cage)\n   )",
            "(:action create_cage ; create a farraday cage\n      :parameters (?p - player ?loc - location)\n      :precondition (and (inventory ?p trashcan) (inventory ?p aluminum_foil))\n      :effect (and (at farraday_cage ?loc) (not (inventory ?p trashcan)) (not (inventory ?p aluminum_foil)))\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )"
        ]
    },
    {
        "task": "build_fire",
        "step": [
            "go east npc shore forest_edge",
            "go east npc forest_edge forest",
            "gather_tinder npc forest tinder",
            "get softwood npc forest",
            "build_campfire npc forest tinder campfire",
            "get hardwood_stick npc forest",
            "light_campfire npc forest softwood hardwood_stick campfire"
        ],
        "desc": [
            "You can also try a swim-float-swim technique, where you swim and then roll and float on your back.",
            "Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:"
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n        :parameters (?item - item ?p - player ?l1 - location) \n        :precondition (and (at ?p ?l1) (at ?item ?l1))\n        :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n    )",
            "(:action gather_tinder\n        :parameters (?p - player ?loc - location ?tinder - tinder)\n        :precondition (and (at ?p ?loc) (has_tinder ?loc))\n        :effect (and (inventory ?p ?tinder))\n    )",
            "(:action light_campfire\n        :parameters (?p -player ?loc - location ?softwood - softwood ?hardwood - hardwood_stick ?campfire - campfire)\n        :precondition (and (at ?p ?loc) (at ?campfire ?loc) (not (lit ?campfire)) (inventory ?p ?softwood) (inventory ?p ?hardwood))\n        :effect (and (lit ?campfire))\n    )",
            "(:action build_campfire\n        :parameters (?p -player ?loc - location ?tinder - tinder ?campfire - campfire)\n        :precondition (and (at ?p ?loc) (inventory ?p ?tinder))\n        :effect (and (at ?campfire ?loc) (not (inventory ?p ?tinder)))\n    )",
            "(:action go ; navigate to an adjacent location \n        :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n        :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n        :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n    )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n        :parameters (?p - player ?loc - location ?water - water) \n        :precondition (and (at ?p ?loc) (has_freshwater_source ?loc))\n        :effect (and (inventory ?p ?water) (not (treated ?water)))\n    )"
        ]
    },
    {
        "task": "find_water",
        "step": [
            "go east npc shore forest_edge",
            "go east npc forest_edge forest",
            "go north npc forest river",
            "get_water npc river water"
        ],
        "desc": [
            "Scavenge anything you can. Before you head to shore, it can be a good idea to gather up any supplies or materials near you. There may be useful items floating on the waters surface that will help you survive and await rescue. Try to look for anything you can use before heading to shore."
        ],
        "action": [
            "(:action go ; navigate to an adjacent location \n        :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n        :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n        :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n    )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n        :parameters (?p - player ?loc - location ?water - water) \n        :precondition (and (at ?p ?loc) (has_freshwater_source ?loc))\n        :effect (and (inventory ?p ?water) (not (treated ?water)))\n    )"
        ]
    },
    {
        "task": "make_smoke_signal",
        "step": [
            "go east npc shore forest_edge",
            "go east npc forest_edge forest",
            "gather_tinder npc forest tinder",
            "go west npc forest forest_edge",
            "go west npc forest_edge shore",
            "wet_tinder npc shore tinder",
            "build_campfire npc forest tinder campfire",
            "make_smoke_signal npc forest campfire tinder"
        ],
        "desc": [
            "",
            "You can float in water by laying on your back and keeping your lungs full.",
            "You can also try a swim-float-swim technique, where you swim and then roll and float on your back.",
            "Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:"
        ],
        "action": [
            "(:action gather_tinder\n        :parameters (?p - player ?loc - location ?tinder - tinder)\n        :precondition (and (at ?p ?loc) (has_tinder ?loc))\n        :effect (and (inventory ?p ?tinder))\n    )",
            "(:action make_smoke_signal\n        :parameters (?p - player ?loc - location ?campfire - campfire ?tinder - tinder)\n        :precondition (and (at ?p ?loc)(at ?campfire ?loc)(inventory ?p ?tinder)(wet ?tinder))\n        :effect (and (signaling ?campfire)(not (wet ?tinder))(not (inventory ?p ?tinder)))\n    )\n    \n    \n    \n    \n    \n)",
            "(:action build_campfire\n        :parameters (?p -player ?loc - location ?tinder - tinder ?campfire - campfire)\n        :precondition (and (at ?p ?loc) (inventory ?p ?tinder))\n        :effect (and (at ?campfire ?loc) (not (inventory ?p ?tinder)))\n    )",
            "(:action go ; navigate to an adjacent location \n        :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n        :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n        :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n    )",
            "(:action wet_tinder\n        :parameters (?p - player ?loc - location ?tinder - tinder)\n        :precondition (and (at ?p ?loc)(has_water ?loc)(inventory ?p ?tinder))\n        :effect (and (wet ?tinder))\n    )"
        ]
    },
    {
        "task": "build_a_shelter",
        "step": [
            "go west npc camp path",
            "build_shelter npc path twigs_leaves long_branch propped_branches"
        ],
        "desc": [
            "Lean branches against the main branch to form the structure of your shelter. Gather a bunch of branches that are long enough to be propped up against the main branch of your shelter. Think about forming ribs with the branches. Try to keep them as close together as you can."
        ],
        "action": [
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action build_shelter ; built shelter\n      :parameters (?p - player ?loc - location ?twigs_leaves - twigs_leaves ?long_branch - long_branch ?propped_branches - propped_branches)\n      :precondition (and (at ?p ?loc) (has_twigs_leaves ?loc) (has_branches ?loc) (has_branches ?loc))\n      :effect (and (has_shelter ?p))\n   )"
        ]
    },
    {
        "task": "collect_water",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff waterfall",
            "get_water npc waterfall water"
        ],
        "desc": [
            "Search for a source of fresh water."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)) (not (strained ?water)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ]
    },
    {
        "task": "start_a_fire",
        "step": [
            "go west npc camp path",
            "get_dry_materials npc path dry_materials",
            "get_twigs_leaves npc path twigs_leaves",
            "get_logs npc path logs",
            "build_teepee npc path dry_materials twigs_leaves teepee",
            "start_fire npc path teepee logs"
        ],
        "desc": [
            "Use dry sticks, branches, or tree bark to serve as your kindling.",
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Avoid using too much energy. It may be difficult for you to find adequate food and water if you're lost in the woods. Try not to sweat or use too much energy by doing things like running around and screaming for help if you're by yourself. Conserve as much energy as you can for doing things like building shelter, fire, and searching for water.",
            "Search for a dry, flat area between 2 trees with splits in their trunks. Look around the area to find a relatively flat area with a tree that has a trunk that splits about 3\u20135 feet (0.91\u20131.52 m) off of the ground. If possible, try to find 2 trees that have a split in their trunks about 3\u20135 feet (0.91\u20131.52 m) off of the ground and are about 10 feet (3.0 m) apart from each other.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action get_logs ; get logs\n      :parameters (?p - player ?loc - location ?logs - logs)\n      :precondition (and (at ?p ?loc) (has_logs ?loc))\n      :effect (and (inventory ?p ?logs))\n   )",
            "(:action get_dry_materials ; get dry materials\n      :parameters (?p - player ?loc - location ?dry_materials - dry_materials)\n      :precondition (and (at ?p ?loc) (has_dry_materials ?loc))\n      :effect (and (inventory ?p ?dry_materials))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action start_fire ; start_fire\n      :parameters (?p - player ?loc - location ?teepee - teepee ?logs - logs)\n      :precondition (and (at ?p ?loc) (inventory ?p ?teepee) (inventory ?p ?logs))\n      :effect (and (has_fire ?p))\n   )\n)",
            "(:action build_teepee ; build teepee structure\n      :parameters (?p - player ?loc - location ?dry_materials - dry_materials ?twigs_leaves - twigs_leaves ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (inventory ?p ?dry_materials) (inventory ?p ?twigs_leaves))\n      :effect (and (inventory ?p ?teepee))\n   )",
            "(:action get_twigs_leaves ; get twigs and leaves\n      :parameters (?p - player ?loc - location ?twigs_leaves - twigs_leaves)\n      :precondition (and (at ?p ?loc) (has_twigs_leaves ?loc))\n      :effect (and (inventory ?p ?twigs_leaves))\n   )"
        ]
    },
    {
        "task": "build_shelter",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff waterfall",
            "go east npc waterfall mountain",
            "get branch npc mountain",
            "go east npc mountain west_plain",
            "insert_beam branch tree npc west_plain beam",
            "go east npc west_plain east_plain",
            "get branches npc east_plain",
            "get leaves npc east_plain",
            "get twigs npc east_plain",
            "go west npc east_plain west_plain",
            "lean_branches branches npc west_plain beam frame",
            "clear_spider leaves npc",
            "layer twigs leaves npc west_plain frame shelter"
        ],
        "desc": [
            "Find a branch 10 feet (3.0 m) long and 3\u20136 inches (7.6\u201315.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.",
            "In the event that you have no containers and no way to purify water, you can dig a deep hole, let it fill with groundwater, and wait for the particles to settle at the bottom and the water is clear before you drink it. You should only do this if you have no other option.",
            "Place the other end of the branch into the split of the other tree. Form a horizontal frame with the main branch by inserting the other end in the split of a nearby tree. Make sure the branch is firmly held in place by shaking it a little.",
            "Insert 1 end of the branch into the split of 1 of the trees. Where the tree splits and forms a \u201cV\u201d shape, place 1 end of the branch to hold it up as a support beam. If the tree doesn't have a split, use a log that ends in a \u201cV\u201d shape and lean it against a tree so the branch is supported by the tree."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )",
            "(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )",
            "(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)",
            "(:action drop ; drop down an item and remove it from the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?item) (not (at ?item ?l1)))\n      :effect (and (not (inventory ?p ?item)) (at ?item ?l1))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action lean_branches ; Lean branches against the main branch to form the structure of your shelter.\n      :parameters (?branches - branches ?p - player ?l1 - location ?beam - beam ?frame - frame) \n      :precondition (and (at ?p ?l1) (inventory ?p ?branches) (at ?beam ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?branches)) (at ?frame ?l1))\n   )",
            "(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )",
            "(:action clear_spider ; clear off any critters or spiders that may be on the branch or leaves\n      :parameters (?item - item ?p - player) \n      :precondition (and (inventory ?p ?item) (has_bug ?item))\n      :effect (and (not (has_bug ?item)) (inventory ?p ?item))\n   )",
            "(:action insert_beam ; insert end(s) of the branch into the split(s) of the tree(s)\n      :parameters (?b - branch ?t - tree ?p - player ?l1 - location ?beam - beam) \n      :precondition (and (at ?p ?l1) (dry ?l1) (flat ?l1) (at ?t ?l1) (has_split_in_trunk ?t) (inventory ?p ?b) (not (has_bug ?b)) (long ?b) (thick ?b) )\n      :effect (and (at ?p ?l1) (not (inventory ?p ?b)) (at ?beam ?l1))\n   )",
            "(:action layer ; Lay twigs and leaves\n      :parameters (?twigs - twigs ?leaves - leaves ?p - player ?l1 - location ?frame - frame ?shelter - shelter) \n      :precondition (and (at ?p ?l1) (inventory ?p ?twigs) (inventory ?p ?leaves) (not (has_bug ?leaves)) (at ?frame ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?twigs)) (not (inventory ?p ?leaves)) (at ?shelter ?l1))\n   )",
            "(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )"
        ]
    },
    {
        "task": "eat_plants",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff waterfall",
            "get_water npc waterfall water",
            "go east npc waterfall mountain",
            "get flowers npc mountain",
            "wash flowers npc water",
            "eat flowers npc"
        ],
        "desc": [
            "Pick wild edible berries to eat. If you happen to come by an identifiable berry bush, definitely take advantage. Never consume any berries that you cannot positively identify as many are toxic. To be safe, stick to eating berries that you recognize like blackberries, raspberries, and wild strawberries.",
            "Search for a source of fresh water."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )"
        ]
    },
    {
        "task": "build_snare",
        "step": [
            "go west npc camp path",
            "get wire npc path",
            "go west npc path cliff",
            "go up npc cliff waterfall",
            "go east npc waterfall mountain",
            "get branch npc mountain",
            "go west npc mountain waterfall",
            "go west npc waterfall footpath",
            "make_snare wire npc snare",
            "make_horizontal_bar branch npc bar",
            "hang_snare snare bar npc footpath"
        ],
        "desc": [
            "Look for edible mushrooms in the woods, if you are trained. Look for wild mushrooms near dark and damp areas or on dying trees in the woods. But be very careful because if you eat the wrong mushroom, you could become extremely ill and potentially die. If you're not sure about whether or not a mushroom is safe to eat, don't eat it!"
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )",
            "(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )"
        ]
    },
    {
        "task": "process-strips",
        "step": [
            "get wooden_board npc garage",
            "go in npc garage work_station",
            "soak_strips npc work_station strip",
            "dry_out_strips npc strip",
            "weave_strips_into_sheet npc work_station strip sheet",
            "press_sheet npc work_station wooden_board sheet"
        ],
        "desc": [
            "Lay the papyrus plant strips on a hard, flat surface. The pattern doesn't matter at this point as you will be rearranging them later. Just lay them out on a hard, flat surface and make sure they don't overlap.",
            "Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours.",
            "Lay the second half of the strips out. Once the first half off the strips have been laid out vertically, begin laying out the second half of the strips. Lay the strips out horizontally and on top of the vertical ones.",
            "Dip the strips into the glue and water mixture. Dip each strip individually. Try to keep the strips as flat as possible when dipping them. Make sure the strips are fully soaked with the mixture."
        ],
        "action": [
            "(:action weave_strips_into_sheet ; \n      :parameters (?p - player ?loc - location ?strip - strip ?sheet - sheet) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?strip) (dry ?strip))\n      :effect (and (inventory ?p ?sheet) (not (inventory ?p ?strip)) (not (flat ?sheet)))\n   )",
            "(:action soak_strips ; \n      :parameters (?p - player ?loc - location ?strip - strip) \n      :precondition (and (at ?p ?loc) (has_water ?loc) (inventory ?p ?strip))\n      :effect (and (clean ?strip) (not (dry ?strip)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action press_sheet ; \n      :parameters (?p - player ?loc - location ?wooden_board - wooden_board ?sheet - sheet) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?wooden_board) (inventory ?p ?sheet))\n      :effect (and (flat ?sheet) (not (very_flat ?sheet)))\n   )",
            "(:action dry_out_strips ; \n      :parameters (?p - player ?strip - strip) \n      :precondition (and (inventory ?p ?strip) (clean ?strip))\n      :effect (dry ?strip)\n   )"
        ]
    },
    {
        "task": "get-strips",
        "step": [
            "get scissors npc garage",
            "go west npc garage nursery",
            "get plant npc nursery",
            "cut_plant npc scissors plant stalk",
            "peel_stalk npc stalk",
            "cut_stalk_into_strips npc scissors stalk strip"
        ],
        "desc": [
            "Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however.",
            "Peel away the outer layer of the papyrus plant. Only the inner part of the plant is used for the paper. You will need to remove the outer green part of the plant. Use a sharp knife and slice down the length of the plant until the entire outer layer is removed. The inside of the plant should be a white or slightly greenish color.",
            "Cut the stalks. About 12 inches (30 cm) of papyrus plant will make a large piece of paper that will be nearly 24 inches (61 cm) in length. Cut off as many stalks as you will need to make the amount of paper you want. The cuts must be diagonally made. Then, cut the tips of the papyrus. You will not use the tips, which are the thinner, grass-like end of the plant."
        ],
        "action": [
            "(:action peel_stalk ; \n      :parameters (?p - player ?stalk - stalk) \n      :precondition (and (not (peeled ?stalk)) (inventory ?p ?stalk))\n      :effect (peeled ?stalk)\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action cut_plant ;\n      :parameters (?p - player ?scissors - scissors ?plant - plant ?stalk - stalk) \n      :precondition  (and (inventory ?p ?scissors) (inventory ?p ?plant))\n      :effect (and (inventory ?p ?stalk) (not (inventory ?p ?plant)) (not (peeled ?stalk)))\n   )",
            "(:action cut_stalk_into_strips ; \n      :parameters (?p - player ?scissors - scissors ?stalk - stalk ?strip - strip) \n      :precondition (and (inventory ?p ?stalk) (inventory ?p ?scissors) (peeled ?stalk))\n      :effect (and (inventory ?p ?strip) (not (inventory ?p ?stalk)) (not (clean ?strip)))\n   )"
        ]
    },
    {
        "task": "get-papyrus",
        "step": [
            "get shell npc garage",
            "go in npc garage work_station",
            "flatten_sheet npc work_station sheet",
            "polish_sheet npc work_station sheet shell",
            "cut_sheet npc garage sheet scissors papyrus"
        ],
        "desc": [
            "Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours.",
            "Polish the papyrus. This step isn't absolutely necessary, but it will make the papyrus look nicer and more finished. Use a shell or smooth piece of ivory. Any type of shell that is smooth and without ridges will do. Rub the shell or ivory over the sheet of paper until it appears to be shinier than it was.",
            "Flatten the sheet. The paper may not be completely flat after you remove it from the wooden boards. Put the paper under a stone slab for up to 6 days to make it completely flat."
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action cut_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet ?scissors - scissors ?papyrus - papyrus) \n      :precondition (and (inventory ?p ?scissors) (smooth ?sheet))\n      :effect (inventory ?p ?papyrus)\n   )\n)",
            "(:action polish_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet ?shell - shell) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?sheet) (inventory ?p ?shell) (very_flat ?sheet))\n      :effect (and (not (inventory ?p ?shell)) (smooth ?sheet))\n   )",
            "(:action flatten_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?sheet) (flat ?sheet))\n      :effect (and (very_flat ?sheet) (not (smooth ?sheet)))\n   )"
        ]
    },
    {
        "task": "be-amazed",
        "step": [
            "record_crosses paper npc hallway",
            "record_tosses paper npc hallway",
            "divide_crosses paper npc",
            "calculate_pi paper npc",
            "be_amazed npc"
        ],
        "desc": [
            "Get into position and THROW YOUR FOOD! Throw just one item at a time. Once it is at rest, observe whether or not it is crossing one of the lines. If it is, put a tick under \"Crosses\" and a tick under \"Tosses.\" If it isn't, just put a tick under \"Tosses.\" When you\u2019ve run out of hot dogs, pick them up and re-use them, making sure to throw from the same position. Repeat this as many times as you like. You should start seeing some interesting results by around 100 to 200 throws. (This doesn't take as long as it sounds.)",
            "When you\u2019re done, divide the number of crosses by 2 and divide the number of tosses by that. For example, if you threw 300 times, and it crossed 191 times, you would calculate 300/(191/2). And, to your amazement, you will now have an approximation for pi!"
        ],
        "action": [
            "(:action be_amazed ; divide tosses\n      :parameters (?p - player)\n      :precondition (and (calculated_pi ?p) (not (amazed ?p)))\n      :effect (amazed ?p)\n   )\n\n)",
            "(:action divide_crosses ; divide crosses\n      :parameters (?object - paper ?p - player)\n      :precondition (and (inventory ?p ?object) (crosses_recorded ?object) (not (crosses_divided ?object)))\n      :effect (crosses_divided ?object)\n   )",
            "(:action record_tosses ; record tosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (tosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (tosses_recorded ?object)\n   )",
            "(:action record_crosses ; record crosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (crosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (crosses_recorded ?object)\n   )",
            "(:action calculate_pi ; divide tosses\n      :parameters (?object - paper ?p - player)\n      :precondition (and (inventory ?p ?object) (crosses_recorded ?object) (tosses_recorded ?object) (crosses_divided ?object) (not (calculated_pi ?p)))\n      :effect (calculated_pi ?p)\n   )"
        ]
    },
    {
        "task": "get-materials",
        "step": [
            "go north npc foyer hallway",
            "go west npc hallway kitchen",
            "get items npc kitchen",
            "go east npc kitchen hallway",
            "go east npc hallway study",
            "get pen npc study",
            "get paper npc study",
            "thaw_food items npc"
        ],
        "desc": [],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?object - object ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?object ?l1) (is_gettable ?object))\n      :effect (and (inventory ?p ?object) (not (at ?object ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action thaw_food ; thaw food items\n      :parameters (?object - items ?p - player)\n      :precondition (and (inventory ?p ?object) (is_food_item ?object) (frozen ?object))\n      :effect (not (frozen ?object))\n   )"
        ]
    },
    {
        "task": "throw-hotdogs",
        "step": [
            "go east npc kitchen hallway",
            "thaw_food items npc",
            "lay_masking_tape masking_tape npc hallway",
            "throw items npc hallway"
        ],
        "desc": [
            "Lay down masking tape in parallel strips across the floor as far apart as your projectile is long. The strips should be perpendicular to the direction you will be throwing. If your item is 15-45 cm (6-18 inches) long, lay down about 6-10 strips; lay down fewer if longer and more if shorter.",
            "Select a food item to throw. There are a couple of qualifications. First, it must be long, thin, hard, and straight, like a frozen hot dog, for example. Second, it must be a reasonably stiff item. Third, it should be somewhere between 15 and 20 cm (6-8 inches) long; the experiment can be performed otherwise, but read on, and you will see why this size is optimal. There are lots of other items that fit these criteria including Otter Pops, celery, and churros. (If you simply can't come to grips with throwing perfectly good food, see the Tips section for some additional ideas.)"
        ],
        "action": [
            "(:action thaw_food ; thaw food items\n      :parameters (?object - items ?p - player)\n      :precondition (and (inventory ?p ?object) (is_food_item ?object) (frozen ?object))\n      :effect (not (frozen ?object))\n   )",
            "(:action record_tosses ; record tosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (tosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (tosses_recorded ?object)\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action record_crosses ; record crosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (crosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (crosses_recorded ?object)\n   )",
            "(:action lay_masking_tape ; lay masking tape\n      :parameters (?object - masking_tape ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?object) (has_ten_strips ?object))\n      :effect (and (not (has_ten_strips ?object)) (has_ten_strips ?l1))\n   )",
            "(:action throw ; throw food items\n      :parameters (?object - items ?p - player ?l1 - location) \n      :precondition (and \n      (at ?p ?l1)\n      (has_throwing_distance ?l1) \n      (is_clear ?l1) \n      (is_food_item ?object) \n      (is_long ?object) \n      (is_thin ?object) \n      (is_hard ?object) \n      (is_straight ?object) \n      (is_stiff ?object) \n      (has_ten_strips ?l1) \n      (not (frozen ?object))\n      )\n      :effect (thrown_food_items ?l1)\n   )"
        ]
    },
    {
        "task": "escape",
        "step": [
            "get stone npc basecamp",
            "create_sos_sign npc",
            "go west npc basecamp bamboo_forrest",
            "get stone npc bamboo_forrest",
            "get_bamboo_container npc bamboo_forrest",
            "go east npc bamboo_forrest basecamp",
            "go east npc basecamp jungle",
            "collect_rain_water npc jungle",
            "get wood npc jungle",
            "create_fire npc jungle",
            "treat_water npc jungle",
            "drink_water npc",
            "pick_fruit npc jungle",
            "eat_fruit npc",
            "go west npc jungle basecamp",
            "escape npc"
        ],
        "desc": [
            "",
            "Stop, think, observe, and plan. Remember the acronym STOP and follow it when you get lost in the jungle. Stop to rest and think about where you came from, observe your surroundings, try to orient yourself, then plan how you are going to get out or get rescued.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water.",
            "Collect rainfall from leaves and bamboo stalks. Look for large leaves that collect rainfall and bend them into a funnel to pour the water into a bottle or straight into your mouth. Bend bamboo stalks to let the water that collects in the compartments flow out into a container or break the bamboo compartment off at the line that goes across the stalk to use it as a water bottle.",
            "Look for fruits and plants that you recognize and are safe to eat. Jungles are full of tropical fruits and edible plants if you know what to look for. Don\u2019t try eating any plants that you don\u2019t recognize because they could be poisonous.",
            "Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container."
        ],
        "action": [
            "(:action collect_rain_water\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (inventory ?p bamboo_container) (has_rainfall ?loc))\n      :effect (and (inventory ?p water) (not (treated water)))\n   )",
            "(:action eat_fruit\n      :parameters (?p - player)\n      :precondition (and (is hungry ?p) (inventory ?p fruit))\n      :effect (and (not (inventory ?p fruit)) (not (is hungry ?p)))\n   )",
            "(:action create_fire\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (inventory ?p stone) (inventory ?p wood))\n      :effect (and (at fire ?loc) (not (inventory ?p stone)) (not (inventory ?p wood)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action create_sos_sign\n      :parameters (?p - player)\n      :precondition (and (inventory ?p stone) (at ?p basecamp))\n      :effect (and (not (inventory ?p stone)) (at sos_sign basecamp))\n   )",
            "(:action treat_water\n      :parameters (?p - player ?loc - location)\n      :precondition (and (inventory ?p water) (not (treated water)) (at fire ?loc))\n      :effect (and (treated water))\n   )",
            "(:action get_bamboo_container; get a bamboo container using surrounding bamboo\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (has_bamboo ?loc))\n      :effect (inventory ?p bamboo_container)\n   )",
            "(:action drink_water\n      :parameters (?p - player)\n      :precondition (and (inventory ?p water) (treated water))\n      :effect (not (is dehydrated ?p))\n   )",
            "(:action pick_fruit\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (has_fruit ?loc))\n      :effect (inventory ?p fruit)\n   )",
            "(:action escape\n      :parameters (?p - player)\n      :precondition (and (at ?p basecamp) (at sos_sign basecamp) (not (is hungry ?p)) (not (is dehydrated ?p)) (not (is ill ?p)))\n      :effect (not (at ?p basecamp))\n   )\n)"
        ]
    },
    {
        "task": "hunger",
        "step": [
            "go east npc basecamp jungle",
            "pick_fruit npc jungle",
            "eat_fruit npc"
        ],
        "desc": [
            "Look for fruits and plants that you recognize and are safe to eat. Jungles are full of tropical fruits and edible plants if you know what to look for. Don\u2019t try eating any plants that you don\u2019t recognize because they could be poisonous.",
            "Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container."
        ],
        "action": [
            "(:action eat_fruit\n      :parameters (?p - player)\n      :precondition (and (is hungry ?p) (inventory ?p fruit))\n      :effect (and (not (inventory ?p fruit)) (not (is hungry ?p)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action pick_fruit\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (has_fruit ?loc))\n      :effect (inventory ?p fruit)\n   )"
        ]
    },
    {
        "task": "dehydration",
        "step": [
            "go west npc basecamp bamboo_forrest",
            "get_bamboo_container npc bamboo_forrest",
            "go east npc bamboo_forrest basecamp",
            "get stone npc basecamp",
            "go east npc basecamp jungle",
            "get wood npc jungle",
            "collect_rain_water npc jungle",
            "create_fire npc jungle",
            "treat_water npc jungle",
            "drink_water npc"
        ],
        "desc": [
            "Collect rainfall from leaves and bamboo stalks. Look for large leaves that collect rainfall and bend them into a funnel to pour the water into a bottle or straight into your mouth. Bend bamboo stalks to let the water that collects in the compartments flow out into a container or break the bamboo compartment off at the line that goes across the stalk to use it as a water bottle.",
            "Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water."
        ],
        "action": [
            "(:action collect_rain_water\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (inventory ?p bamboo_container) (has_rainfall ?loc))\n      :effect (and (inventory ?p water) (not (treated water)))\n   )",
            "(:action create_fire\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (inventory ?p stone) (inventory ?p wood))\n      :effect (and (at fire ?loc) (not (inventory ?p stone)) (not (inventory ?p wood)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action treat_water\n      :parameters (?p - player ?loc - location)\n      :precondition (and (inventory ?p water) (not (treated water)) (at fire ?loc))\n      :effect (and (treated water))\n   )",
            "(:action get_bamboo_container; get a bamboo container using surrounding bamboo\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (has_bamboo ?loc))\n      :effect (inventory ?p bamboo_container)\n   )",
            "(:action drink_water\n      :parameters (?p - player)\n      :precondition (and (inventory ?p water) (treated water))\n      :effect (not (is dehydrated ?p))\n   )"
        ]
    },
    {
        "task": "get_out_deep",
        "step": [
            "liedown npc",
            "breathe npc",
            "get stick npc here",
            "usestick npc stick qsand"
        ],
        "desc": [
            "Breathe deeply. Not only will deep breathing help you remain calm, it will also make you more buoyant. Keep as much air in your lungs as possible. It is impossible to \"go under\" if your lungs are full of air.",
            "Lay back. Sit down and lean back if your feet are stuck fast. Creating a larger \"footprint\" should free your feet by removing the pressure they create, allowing them to float. When you feel them start to come free, roll to your side away from the quicksand and free of its grip. You'll get dirty, but its the quickest and safest way to free yourself.",
            "Stay flat on your back with your arms and legs fully touching the quicksand and use the pole as a guide. Inch sideways along the pole to firm ground."
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?i - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?i ?l1))\n      :effect (and (inventory ?p ?i) (not (at ?i ?l1)))\n   )",
            "(:action liedown ; player gets on their back\n      :parameters (?p - player)\n      :precondition (not (laying ?p))\n      :effect (laying ?p)\n   )",
            "(:action usestick ; player uses the stick to help get out of sand\n      :parameters (?p - player ?s - stick ?q - quicksand)\n      :precondition (and (inventory ?p ?s) (laying ?p) (calm ?p))\n      :effect (and (not (stuck ?p ?q)) (not (inventory ?p ?s)))\n   )",
            "(:action breathe ; breathe in to fill your lungs with air\n      :parameters (?p - player)\n      :precondition (not (calm ?p))\n      :effect (calm ?p)\n   )"
        ]
    },
    {
        "task": "get_feet_out",
        "step": [
            "liedown npc",
            "swim npc qs"
        ],
        "desc": [
            "Get on your back and \"swim.\" If you sink up to your hips or higher, bend backward. The more you spread out your weight, the harder it will be to sink. Float on your back while you slowly and carefully extricate your legs. Once your legs are free you can inch yourself to safety by using your arms to slowly and smoothly propel yourself backward with your arms in a sweeping motion, as if you were swimming. When you get near the edge of the quicksand, you can roll to hard ground.",
            "Lay back. Sit down and lean back if your feet are stuck fast. Creating a larger \"footprint\" should free your feet by removing the pressure they create, allowing them to float. When you feel them start to come free, roll to your side away from the quicksand and free of its grip. You'll get dirty, but its the quickest and safest way to free yourself."
        ],
        "action": [
            "(:action liedown ; player gets on their back\n      :parameters (?p - player)\n      :precondition (not (laying ?p))\n      :effect (laying ?p)\n   )",
            "(:action swim ; player starts to swim through the sand\n      :parameters (?p - player ?q - quicksand)\n      :precondition (and (laying ?p) (not (tired ?p)) (not (deep ?q)))\n      :effect (and (tired ?p) (not (stuck ?p ?q)))\n   )"
        ]
    },
    {
        "task": "avoid_quicksand",
        "step": [
            "research npc l1",
            "go north npc home l1",
            "research npc l2",
            "go east npc l1 l2",
            "go east npc l2 l3"
        ],
        "desc": [],
        "action": [
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) (aware ?p ?l1))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action research\n      :parameters (?p - player ?l - location)\n      :precondition (not (at ?p ?l))\n      :effect (aware ?p ?l)\n   )"
        ]
    },
    {
        "task": "get_materials",
        "step": [
            "get knife npc home",
            "get linen_sheets npc home",
            "get rolling_pin npc home",
            "get water npc home",
            "get wooden_boards npc home"
        ],
        "desc": [],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l - location)\n      :precondition (and (at ?p ?l) (at ?item ?l) (not (not_gettable ?item)))\n      :effect (and (inventory ?p ?item))\n  )"
        ]
    },
    {
        "task": "make_papyrus",
        "step": [
            "cut_stalks npc knife papyrus_plant papyrus_stalks",
            "cut_strips npc papyrus_strips papyrus_stalks knife",
            "soak_strips npc water papyrus_strips",
            "roll_strips npc rolling_pin papyrus_strips",
            "weave_strips npc papyrus_strips",
            "bundle_strips npc papyrus_strips wooden_boards linen_sheets",
            "cut_sheet npc papyrus_strips knife papyrus"
        ],
        "desc": [
            "Cut the stalks. About 12 inches (30 cm) of papyrus plant will make a large piece of paper that will be nearly 24 inches (61 cm) in length. Cut off as many stalks as you will need to make the amount of paper you want. The cuts must be diagonally made. Then, cut the tips of the papyrus. You will not use the tips, which are the thinner, grass-like end of the plant.",
            "Weave the strips together. Lay the strips on the cloth. Get a dry sheet of linen cloth or felt. Then, begin to weave them together. You want to create 2 layers of strips, with the top layer strips being perpendicular to the bottom layer strips. It should resemble a placemat. The strips should slightly overlap one another to prevent the papyrus from falling apart later.",
            "Roll the excess water and sugar out of the plant. Grab a rolling pin and use it to roll the strips flat. The rolling pin should be squeezing the water out of them and flattening the strips into sheets.",
            "Cut the paper. The sheet may be larger than you want when it is finished. Use a razor, scissors, or paper cutter to cut the papyrus into smaller sheets. Measure the sizes you are cutting so you will have multiple sheets of the same size.",
            "Cut up the inner portion into strips. Use the knife you used to cut off the outer portion to cut the inner layers of the papyrus plant (pith) into thin strips. Hold the plant in your hand and cut towards you vertically. Make sure that all of the strips have the same size and thickness.",
            "Place the bundle between 2 wooden boards. Make sure that the wooden boards are somewhat heavy. The pressure is necessary to flatten the papyrus strips together. Once the strips have been placed between the boards, press them together. Lay the sandwiched papyrus sheet on a flat surface and allow the wooden boards to flatten the sheet using gravity."
        ],
        "action": [
            "(:action roll_strips; roll the excess water and sugar out of the strips to dry them\n    :parameters (?p - player ?rolling_pin - rolling_pin ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?rolling_pin) (inventory ?p ?papyrus_strips) (soaked ?papyrus_strips))\n    :effect (dried ?papyrus_strips)\n  )",
            "(:action soak_strips; place papyrus strips in water and let them soak\n    :parameters (?p - player ?water - water ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?water) (inventory ?p ?papyrus_strips))\n    :effect (soaked ?papyrus_strips)\n  )",
            "(:action weave_strips; weave the dried papyrus strips into a lattice\n    :parameters (?p - player ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?papyrus_strips) (dried ?papyrus_strips))\n    :effect (woven ?papyrus_strips)\n  )",
            "(:action bundle_strips; bundle the woven strips between linen sheets and wooden boards\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?wooden_boards - wooden_boards ?linen_sheets - linen_sheets)\n    :precondition (and (inventory ?p ?papyrus_strips) (woven ?papyrus_strips) (inventory ?p ?wooden_boards) (inventory ?p ?linen_sheets))\n    :effect (finished ?papyrus_strips)\n  )",
            "(:action cut_sheet; the finished sheet is cut to size to complete the papyrus\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?knife - knife ?papyrus - papyrus)\n    :precondition (and (inventory ?p ?papyrus_strips) (finished ?papyrus_strips) (inventory ?p ?knife))\n    :effect (and (inventory ?p ?papyrus) (not (inventory ?p ?papyrus_strips)))\n  )\n)",
            "(:action cut_stalks; cut papyrus plant into stalks\n    :parameters (?p - player ?knife - knife ?papyrus_plant - papyrus_plant ?papyrus_stalks - papyrus_stalks)\n    :precondition (and (inventory ?p ?knife) (inventory ?p ?papyrus_plant))\n    :effect (and (inventory ?p ?papyrus_stalks) (not (inventory ?p ?papyrus_plant)))\n  )",
            "(:action cut_strips; cut papyrus stalks into strips\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?papyrus_stalks - papyrus_stalks ?knife - knife)\n    :precondition (and (inventory ?p ?knife) (inventory ?p ?papyrus_stalks))\n    :effect (and (inventory ?p ?papyrus_strips) (not (inventory ?p ?papyrus_stalks)))\n  )"
        ]
    },
    {
        "task": "get_papyrus_plant",
        "step": [
            "travel npc home river",
            "search_location npc river",
            "pluck_river_reeds npc papyrus_plant river",
            "travel npc river home"
        ],
        "desc": [
            "Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however.",
            "You can also make the paper out of wide grasses, like river reeds."
        ],
        "action": [
            "(:action travel ; travel from one location to another\n    :parameters (?p - player ?l1 - location ?l2 - location)\n    :precondition (at ?p ?l1)\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action search_location; search location\n    :parameters (?p - player ?l - location)\n    :precondition (at ?p ?l)\n    :effect (searched ?l)\n  )",
            "(:action pluck_river_reeds; obtain the papyrus plant\n    :parameters (?p - player ?papyrus_plant - papyrus_plant ?l - location)\n    :precondition (and (searched ?l) (at ?papyrus_plant ?l) (at ?p ?l))\n    :effect (inventory ?p ?papyrus_plant)\n  )"
        ]
    },
    {
        "task": "pick_car_lock",
        "step": [
            "go up npc living_room hallway",
            "go east npc hallway bathroom",
            "go east npc bathroom bedroom",
            "get coathanger npc bedroom",
            "go west npc bedroom bathroom",
            "go west npc bathroom hallway",
            "go down npc hallway living_room",
            "go east npc living_room office",
            "go east npc office kitchen",
            "go down npc kitchen garage",
            "go out npc garage car",
            "straighten_coathanger npc",
            "insert_hanger npc car",
            "hook_latch npc car",
            "pull_coathanger npc car"
        ],
        "desc": [
            "Unravel and straighten the coat hanger. You can leave the hooked top section alone, but unwind it from itself at the \u201cneck\u201d and straighten the rest of the hanger out, giving you a long metal tool with a hooked tip.",
            "Lift the weather stripping from the bottom of the driver's-side window. Push the end of the hanger in through the soft rubber weather stripping and the bottom of the window. The hanger is now inside the wall of the door.",
            "Hook and pull the latch. Hook the hanger around the latch and pull it towards the rear of the car. This should unlock any manually locked car door."
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action pull_coathanger ;  unlock the car\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (locked_car ?loc) (coathanger_inserted ?loc) (inventory ?p straightened_coathanger) (latch_hooked ?loc)) \n      :effect (not (locked_car ?loc))\n   )\n\n)",
            "(:action hook_latch ;    hook onto car latch  \n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (locked_car ?loc) (coathanger_inserted ?loc) (inventory ?p straightened_coathanger)) \n      :effect (and (latch_hooked ?loc))\n   )",
            "(:action straighten_coathanger ; straighten coathanger\n      :parameters (?p - player) \n      :precondition (and (inventory ?p coathanger)) \n      :effect (and (not (inventory ?p coathanger)) (inventory ?p straightened_coathanger)) \n   )",
            "(:action insert_hanger ;    insert hanger \n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (locked_car ?loc) (inventory ?p straightened_coathanger)) \n      :effect (and (coathanger_inserted ?loc))\n   )"
        ]
    },
    {
        "task": "pick_easy_lock",
        "step": [
            "go east npc living_room office",
            "go east npc office kitchen",
            "get credit_card npc kitchen",
            "go west npc kitchen office",
            "go west npc office living_room",
            "go up npc living_room hallway",
            "go east npc hallway bathroom",
            "go east npc bathroom bedroom",
            "pick_lock_with_card npc bedroom"
        ],
        "desc": [
            "Put the credit card into the side of the door. Slide the long end of a credit card in between the door frame and the locking side of the door, just above where the lock enters the frame."
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action pick_lock_with_card ; pick lock\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_easy_lock ?loc) (inventory ?p credit_card)) \n      :effect (not (has_easy_lock ?loc))\n   )"
        ]
    },
    {
        "task": "pick_hard_lock",
        "step": [
            "go east npc living_room office",
            "go east npc office kitchen",
            "go down npc kitchen garage",
            "get file npc garage",
            "get allen_key npc garage",
            "go up npc garage kitchen",
            "go west npc kitchen office",
            "get paper_clip npc office",
            "go west npc office living_room",
            "go up npc living_room hallway",
            "go east npc hallway bathroom",
            "go east npc bathroom bedroom",
            "file_key_into_wrench npc",
            "insert_wrench npc bedroom",
            "bend_paperclip_into_pick npc",
            "insert_pick npc bedroom",
            "push_pins_out_of_tumblers npc bedroom"
        ],
        "desc": [
            "Make your tools. For weak locks, a pair of paper clips should work; tougher locks might require bobby pins, wire clippers, and a pair of pliers. The key is to use metal firm enough for your pick and your tension wrench, the two components of the tool.",
            "Insert the pick above the wrench. Use the leg of the pick to find and push each pin up and out of the tumbler. Once all pins have been moved, the lock should open. As previously noted, this skill takes a lot of practice to master, so have plenty of cheap practice locks on hand if you hope to get good at it.",
            "The tension wrench is made in an \u201cL\u201d shape and is used to apply tension to the bottom of the lock. You can make this by getting an Allen key and filing it flat."
        ],
        "action": [
            "(:action insert_pick ; insert pick\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_hard_lock ?loc) (inventory ?p pick) (wrench_in_lock ?loc)) \n      :effect (and (pick_in_lock ?loc))\n   )",
            "(:action file_key_into_wrench ; make wrench from allen key\n      :parameters (?p - player) \n      :precondition (and (inventory ?p allen_key) (inventory ?p file)) \n      :effect (and (not (inventory ?p allen_key)) (inventory ?p wrench)) \n   )",
            "(:action push_pins_out_of_tumblers ; pick lock with wrench and pick\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_hard_lock ?loc) (wrench_in_lock ?loc) (pick_in_lock ?loc))\n      :effect (not (has_hard_lock ?loc))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action insert_wrench ; insert wrench \n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_hard_lock ?loc) (inventory ?p wrench)) \n      :effect (and (wrench_in_lock ?loc))\n   )",
            "(:action bend_paperclip_into_pick  ; bend paperclip into pick \n      :parameters (?p - player) \n      :precondition (and (inventory ?p paper_clip)) \n      :effect (and (not (inventory ?p paper_clip)) (inventory ?p pick)) \n   )"
        ]
    },
    {
        "task": "finishing_papyrus",
        "step": [
            "go north npc kitchen cabinet",
            "get roller npc cabinet",
            "go south npc cabinet kitchen",
            "get scissors npc kitchen",
            "get papyrus npc kitchen",
            "go south npc kitchen living_room",
            "get smooth_stone npc living_room",
            "polish_papyrus npc papyrus",
            "cut_paprus npc papyrus scissors",
            "flatten_papyrus npc papyrus roller"
        ],
        "desc": [
            "Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours.",
            "Polish the papyrus. This step isn't absolutely necessary, but it will make the papyrus look nicer and more finished. Use a shell or smooth piece of ivory. Any type of shell that is smooth and without ridges will do. Rub the shell or ivory over the sheet of paper until it appears to be shinier than it was.",
            "Flatten the sheet. The paper may not be completely flat after you remove it from the wooden boards. Put the paper under a stone slab for up to 6 days to make it completely flat."
        ],
        "action": [
            "(:action flatten_papyrus ; Use a roller to make the papyrus flat.\n      :parameters (?p - player ?pap - papyrus ?r - roller) \n      :precondition (and (inventory ?p ?pap) (inventory ?p ?r))\n      :effect  (flattened ?pap)\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action polish_papyrus ; Use a stone to polish the papyrus.\n      :parameters (?p - player ?pap - papyrus) \n      :precondition (and (inventory ?p ?pap) (inventory ?p smooth_stone))\n      :effect  (polished ?pap)\n   )"
        ]
    },
    {
        "task": "preparing_papyrus",
        "step": [
            "get scissors npc kitchen",
            "cut_stalks npc papyrus_tree kitchen papyrus_stalks",
            "papyrus_strips npc papyrus_tree kitchen papyrus_stalks papyrus_strips"
        ],
        "desc": [
            "Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however.",
            "Peel away the outer layer of the papyrus plant. Only the inner part of the plant is used for the paper. You will need to remove the outer green part of the plant. Use a sharp knife and slice down the length of the plant until the entire outer layer is removed. The inside of the plant should be a white or slightly greenish color."
        ],
        "action": [
            "(:action cut_stalks ; cut stalks\n      :parameters (?p - player ?tree - papyrus_tree ?l1 - location ?s - papyrus_stalks) \n      :precondition (and  (at ?p ?l1) (at ?tree ?l1) (inventory ?p scissors))\n      :effect (and (inventory ?p ?s))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action papyrus_strips ; cut strips from stalks\n      :parameters (?p - player ?tree - papyrus_tree ?l1 - location ?pst - papyrus_stalks ?strip - papyrus_strips) \n      :precondition (and  (at ?p ?l1) (at ?tree ?l1) (inventory ?p scissors) (inventory ?p ?pst))\n      :effect (and (inventory ?p ?strip) (not (inventory ?p ?pst)))\n   )",
            "(:action place_strips_between_boards ; place papyrus strips between two wooden boards\n      :parameters (?p - player) \n      :precondition (and (inventory ?p wooden_boards) (inventory ?p papyrus_strips) (strips_woven))\n      :effect (and (strips_between_boards ?item))\n   )"
        ]
    },
    {
        "task": "assembling-disguises",
        "step": [
            "go west npc house bus_stop",
            "go north npc bus_stop costume_store",
            "get_costume npc costume_store costume"
        ],
        "desc": [
            "Find supplies for each disguise. Each of your disguises should have at least three parts, so make sure you have enough supplies for each of your characters to have a full costume!"
        ],
        "action": [
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_costume ; get costume from a store.\n      :parameters (?p - player ?loc - location ?costume - costume) \n      :precondition (and (at ?p ?loc) (sells_costume ?loc))\n      :effect (and (inventory ?p ?costume))\n   )"
        ]
    },
    {
        "task": "make_a_fire",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff clifftop",
            "go east npc clifftop bushwood",
            "get stick npc bushwood",
            "go east npc bushwood clifftop",
            "go down npc clifftop cliff",
            "go east npc cliff path",
            "go east npc path camp",
            "sharpen_stick npc stick",
            "start_fire npc camp stick"
        ],
        "desc": [
            "Test the food you eat for poison. If you've never eaten the fruit that you find on the island, test it for poison by rubbing it on a sensitive part of your skin, like your wrist. Wait 45 minutes. If there is no adverse reaction, rub some of the food on your lips. If you form a rash, or there is burning or irritation, then the food is most likely poisonous. Never eat large amounts of any unknown food. Eat a small amount, wait an hour or two to see if you feel sick, then eat the rest of it.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action start_fire ; start a fire at a location\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (has_fire ?loc))\n  )",
            "(:action get_shellfish ; catch shellfish from a location that has fish.\n     :parameters (?p - player ?loc - location ?shellfish - shellfish)\n     :precondition (and (at ?p ?loc) (has_shellfish ?loc))\n     :effect (and (inventory ?p ?shellfish) (not (edible ?shellfish)))\n  )",
            "(:action go ; navigate to an adjacent location\n     :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location)\n     :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n     :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action get_tarp ; get tarp for shelter construction\n     :parameters (?p - player ?loc - location ?tarp - tarp)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?tarp))\n  )",
            "(:action get_stick ; get a stick from bosk\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (at ?stick ?loc))\n     :effect (and (inventory ?p ?stick) (not (sharpened ?stick)))\n  )",
            "(:action get_leave ; get leaves for shelter construction\n     :parameters (?p - player ?loc - location ?leave - leave)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?leave))\n  )",
            "(:action sharpen_stick ; sharpen stick to hunt fish or bird or to use it to make a fire\n     :parameters (?p - player ?stick - stick)\n     :precondition (and (inventory ?p ?stick) (not (sharpened ?stick)))\n     :effect (and (inventory ?p ?stick) (sharpened ?stick))\n  )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n     :parameters (?p - player ?loc - location ?water - water)\n     :precondition (and (at ?p ?loc) (has_water_source ?loc))\n     :effect (and (inventory ?p ?water) (not (treated ?water)))\n  )",
            "(:action get ; pick up an item and put it in the inventory\n     :parameters (?item - item ?p - player ?l1 - location)\n     :precondition (and (at ?p ?l1) (at ?item ?l1))\n     :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n  )"
        ]
    },
    {
        "task": "hunt_animal_for_food",
        "step": [
            "get stick2 npc camp",
            "sharpen_stick npc stick2",
            "go north npc camp beach",
            "get_shellfish npc beach shellfish",
            "catch_fish npc beach fish stick2",
            "go south npc beach camp",
            "go west npc camp path",
            "hunt_insect npc path insect",
            "go west npc path cliff",
            "go up npc cliff clifftop",
            "start_fire npc clifftop stick2",
            "cook npc clifftop shellfish",
            "hunt_bird npc clifftop bird stick2"
        ],
        "desc": [
            "Test the food you eat for poison. If you've never eaten the fruit that you find on the island, test it for poison by rubbing it on a sensitive part of your skin, like your wrist. Wait 45 minutes. If there is no adverse reaction, rub some of the food on your lips. If you form a rash, or there is burning or irritation, then the food is most likely poisonous. Never eat large amounts of any unknown food. Eat a small amount, wait an hour or two to see if you feel sick, then eat the rest of it.",
            "Heating the water above 185\u00b0 F (85\u00b0 C) for three minutes will kill all pathogens in your water.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action start_fire ; start a fire at a location\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (has_fire ?loc))\n  )",
            "(:action get_shellfish ; catch shellfish from a location that has fish.\n     :parameters (?p - player ?loc - location ?shellfish - shellfish)\n     :precondition (and (at ?p ?loc) (has_shellfish ?loc))\n     :effect (and (inventory ?p ?shellfish) (not (edible ?shellfish)))\n  )",
            "(:action go ; navigate to an adjacent location\n     :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location)\n     :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n     :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action get_tarp ; get tarp for shelter construction\n     :parameters (?p - player ?loc - location ?tarp - tarp)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?tarp))\n  )",
            "(:action catch_fish ; catch fish from a location that has fish.\n     :parameters (?p - player ?loc - location ?fish - fish ?stick - stick)\n     :precondition (and (at ?p ?loc) (has_fish ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (inventory ?p ?fish) (edible ?fish))\n  )",
            "(:action cook ; cook to make animal edible\n     :parameters (?p - player ?loc - location ?animal - animal)\n     :precondition (and (at ?p ?loc) (inventory ?p ?animal) (has_fire ?loc))\n     :effect (and (inventory ?p ?animal) (edible ?animal))\n  )",
            "(:action get_stick ; get a stick from bosk\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (at ?stick ?loc))\n     :effect (and (inventory ?p ?stick) (not (sharpened ?stick)))\n  )",
            "(:action get_leave ; get leaves for shelter construction\n     :parameters (?p - player ?loc - location ?leave - leave)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?leave))\n  )",
            "(:action hunt_bird ; catch a bird from a location that has birds.\n     :parameters (?p - player ?loc - location ?bird - bird ?stick - stick)\n     :precondition (and (at ?p ?loc) (has_bird ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (inventory ?p ?bird) (edible ?bird))\n  )",
            "(:action sharpen_stick ; sharpen stick to hunt fish or bird or to use it to make a fire\n     :parameters (?p - player ?stick - stick)\n     :precondition (and (inventory ?p ?stick) (not (sharpened ?stick)))\n     :effect (and (inventory ?p ?stick) (sharpened ?stick))\n  )",
            "(:action hunt_insect ; catch an insect from a location that has insects.\n     :parameters (?p - player ?loc - location ?insect - insect)\n     :precondition (and (at ?p ?loc) (has_insect ?loc))\n     :effect (and (inventory ?p ?insect) (edible ?insect))\n  )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n     :parameters (?p - player ?loc - location ?water - water)\n     :precondition (and (at ?p ?loc) (has_water_source ?loc))\n     :effect (and (inventory ?p ?water) (not (treated ?water)))\n  )",
            "(:action get ; pick up an item and put it in the inventory\n     :parameters (?item - item ?p - player ?l1 - location)\n     :precondition (and (at ?p ?l1) (at ?item ?l1))\n     :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n  )"
        ]
    },
    {
        "task": "construct_a_sturdy_shelter",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff clifftop",
            "go east npc clifftop bushwood",
            "get stick npc bushwood",
            "go east npc bushwood clifftop",
            "go down npc clifftop cliff",
            "go east npc cliff path",
            "get_tarp npc path tarp",
            "go east npc path camp",
            "construct_shelter npc camp stick tarp leave"
        ],
        "desc": [
            "Scurvy is a serious condition that occurs when you don't have a balanced diet. Symptoms include fatigue, anemia, and infections and is caused by a vitamin C deficiency.",
            "Eating fresh citrus fruits like lemons and oranges can help prevent the condition."
        ],
        "action": [
            "(:action get_shellfish ; catch shellfish from a location that has fish.\n     :parameters (?p - player ?loc - location ?shellfish - shellfish)\n     :precondition (and (at ?p ?loc) (has_shellfish ?loc))\n     :effect (and (inventory ?p ?shellfish) (not (edible ?shellfish)))\n  )",
            "(:action go ; navigate to an adjacent location\n     :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location)\n     :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n     :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action get_tarp ; get tarp for shelter construction\n     :parameters (?p - player ?loc - location ?tarp - tarp)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?tarp))\n  )",
            "(:action get_stick ; get a stick from bosk\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (at ?stick ?loc))\n     :effect (and (inventory ?p ?stick) (not (sharpened ?stick)))\n  )",
            "(:action get_leave ; get leaves for shelter construction\n     :parameters (?p - player ?loc - location ?leave - leave)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?leave))\n  )",
            "(:action construct_shelter ; construct a shelter with stick plus either tarp or leaves\n     :parameters (?p - player ?loc - location ?stick - stick ?tarp - tarp ?leave - leave)\n     :precondition (and (at ?p ?loc) (inventory ?p ?stick) (inventory ?p ?tarp))\n     :effect (and (sheltered ?loc))\n  )\n)",
            "(:action get_water ; get water from a location that has a water source like a lake.\n     :parameters (?p - player ?loc - location ?water - water)\n     :precondition (and (at ?p ?loc) (has_water_source ?loc))\n     :effect (and (inventory ?p ?water) (not (treated ?water)))\n  )",
            "(:action get ; pick up an item and put it in the inventory\n     :parameters (?item - item ?p - player ?l1 - location)\n     :precondition (and (at ?p ?l1) (at ?item ?l1))\n     :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n  )"
        ]
    },
    {
        "task": "drink_water",
        "step": [
            "get container npc camp",
            "go east npc camp path",
            "go east npc path riverside",
            "collect_water npc container water riverside",
            "go north npc riverside rainforest",
            "get_wood npc wood rainforest",
            "make_drill npc wood drill",
            "make_fire npc drill rainforest",
            "filter_water npc water",
            "boil_water npc water rainforest",
            "drink_water npc water"
        ],
        "desc": [
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.",
            "If you don\u2019t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.",
            "Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container."
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action collect_water ; use container to collect water from a location that has water\n      :parameters (?p - player ?container - container ?water - water ?loc - location) \n      :precondition (and (at ?p ?loc) (has_water ?loc) (inventory ?p ?container) (not (inventory ?p ?water)))\n      :effect (and (inventory ?p ?water) (not (filtered ?water)) (not (boiled ?water)))\n   )",
            "(:action boil_water ; boil water to kill any bacteria\n      :parameters (?p - player ?water - water ?loc - location) \n      :precondition (and (inventory ?p ?water) (at ?p ?loc) (filtered ?water) (not (boiled ?water)) (has_fire ?loc))\n      :effect (and (boiled ?water))\n   )",
            "(:action get_foliage ; get foliage from a location that has trees\n      :parameters (?p - player ?foliage - foliage ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?foliage)))\n      :effect (and (inventory ?p ?foliage))\n   )",
            "(:action filter_water ; filter water to remove any particles\n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (not (filtered ?water)))\n      :effect (and (filtered ?water))\n   )",
            "(:action drink_water ; drink boiled water \n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (boiled ?water))\n      :effect (and (not (thirsty ?p)))\n   )",
            "(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )",
            "(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )",
            "(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )"
        ]
    },
    {
        "task": "safe_in_cave",
        "step": [
            "go east npc camp path",
            "go east npc path riverside",
            "go north npc riverside rainforest",
            "get_wood npc wood rainforest",
            "get_foliage npc foliage rainforest",
            "go east npc rainforest cave",
            "make_drill npc wood drill",
            "build_shelter npc wood foliage cave",
            "make_fire npc drill cave",
            "make_spear npc spear wood",
            "survive npc spear cave"
        ],
        "desc": [
            "Think about where you came from if you got lost on foot. Orient yourself using any landmarks you remember, such as a hill in the distance or a river. Get back to a point you remember to find the trail again or head back in the direction of a village that you came from.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "Place shorter sticks and branches against the sides of the center pole. Line the length of the middle stick with branches going outward towards the ground at a 45-degree angle. The more sticks you can find to place along the sides, the easier it will be to cover your shelter.",
            "The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.",
            "Make a 4-pronged bamboo spear to fish with. Find a 6-ft (1.8 m) stalk of bamboo and cut 4- 6 in (15.24 cm) slits into 1 end of it with a knife or sharp rock. Weave a piece of vine into the slits to separate the tip of the bamboo into 4 prongs and sharpen them with a knife or a sharp rock.",
            "If you don\u2019t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.",
            "Cover the sides with leaves and foliage to cover the lean-to shelter. Find large leaves and lay them over top of the frame you built. Cover the shelter as well as you can to protect you from the elements and keep animals out."
        ],
        "action": [
            "(:action build_shelter ; build a shelter using wood and foliage\n      :parameters (?p - player ?wood - wood ?foliage - foliage ?loc - location) \n      :precondition (and (at ?p ?loc) (inventory ?p ?wood) (inventory ?p ?foliage) (not (has_shelter ?loc)))\n      :effect (and (has_shelter ?loc))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_foliage ; get foliage from a location that has trees\n      :parameters (?p - player ?foliage - foliage ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?foliage)))\n      :effect (and (inventory ?p ?foliage))\n   )",
            "(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )",
            "(:action survive ; live safely in the shelter with weapon and fire on\n      :parameters (?p - player ?spear - spear ?loc - location) \n      :precondition (and (at ?p ?loc) (has_shelter ?loc) (has_fire ?loc) (inventory ?p ?spear) (not (safe ?p ?loc)))\n      :effect (and (safe ?p ?loc))\n   )\n)",
            "(:action make_spear ; make a spear using wood to catch fish or defend against predators\n      :parameters (?p - player ?spear - spear ?wood - wood) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?spear)))\n      :effect (and (inventory ?p ?spear))\n   )",
            "(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )",
            "(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )"
        ]
    },
    {
        "task": "eat_fish",
        "step": [
            "go east npc camp path",
            "go east npc path riverside",
            "go north npc riverside rainforest",
            "get_wood npc wood rainforest",
            "go south npc rainforest riverside",
            "make_spear npc spear wood",
            "make_drill npc wood drill",
            "catch_fish npc spear fish riverside",
            "make_fire npc drill riverside",
            "cook_fish npc fish riverside",
            "eat_fish npc fish"
        ],
        "desc": [
            "Build simple hole-in-the-ground traps to catch animals. Dig a hole in the ground and cover it with something like a large leaf. Put a piece of fruit in the middle as bait. When an animal comes to take the fruit, they will fall in the hole and you can kill it, skin it, and cook it to eat it.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.",
            "Make a 4-pronged bamboo spear to fish with. Find a 6-ft (1.8 m) stalk of bamboo and cut 4- 6 in (15.24 cm) slits into 1 end of it with a knife or sharp rock. Weave a piece of vine into the slits to separate the tip of the bamboo into 4 prongs and sharpen them with a knife or a sharp rock.",
            "If you don\u2019t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water."
        ],
        "action": [
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action eat_fish ; eat cooked fish \n      :parameters (?p - player ?fish - fish) \n      :precondition (and (inventory ?p ?fish) (cooked ?fish))\n      :effect (and (not (hungry ?p)))\n   )",
            "(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )",
            "(:action make_spear ; make a spear using wood to catch fish or defend against predators\n      :parameters (?p - player ?spear - spear ?wood - wood) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?spear)))\n      :effect (and (inventory ?p ?spear))\n   )",
            "(:action catch_fish ; catch a fish using spear\n      :parameters (?p - player ?spear - spear ?fish - fish ?loc - location) \n      :precondition (and (at ?p ?loc) (inventory ?p ?spear) (has_fish ?loc) (not (inventory ?p ?fish)))\n      :effect (and (inventory ?p ?fish))\n   )",
            "(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )",
            "(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action cook_fish ; grill fish using fire\n      :parameters (?p - player ?fish - fish ?loc - location) \n      :precondition (and (inventory ?p ?fish) (at ?p ?loc) (has_fire ?loc) (not (cooked ?fish)))\n      :effect (and (cooked ?fish))\n   )"
        ]
    },
    {
        "task": "make_fire",
        "step": [
            "go east npc camp path",
            "go east npc path riverside",
            "go north npc riverside rainforest",
            "get_wood npc wood rainforest",
            "go south npc rainforest riverside",
            "make_drill npc wood drill",
            "make_fire npc drill riverside"
        ],
        "desc": [
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.",
            "If you don\u2019t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water."
        ],
        "action": [
            "(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )"
        ]
    },
    {
        "task": "boil_water",
        "step": [
            "get pot npc camp",
            "go west npc camp path",
            "go south npc path oaks",
            "log_oak npc oaks pot oak_log",
            "get flat_wood npc oaks",
            "get oak_log npc oaks",
            "go north npc oaks path",
            "go north npc path grassland",
            "go north npc grassland bush",
            "break_branch npc bush branch_piece",
            "get_branch npc bush branch",
            "get branch_piece npc bush",
            "go south npc bush grassland",
            "get_water npc grassland water pot",
            "get grass npc grassland",
            "go south npc grassland path",
            "go east npc path camp",
            "cluster_grass npc grass grass_tinder",
            "stack_log npc oak_log log_stack",
            "build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure",
            "ignite_wood npc camp flat_wood branch teepee_structure",
            "ignite_teepee npc camp flat_wood teepee_structure",
            "boil_water npc camp teepee_structure water"
        ],
        "desc": [
            "Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.",
            "Find a branch 10 feet (3.0 m) long and 3\u20136 inches (7.6\u201315.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.",
            "Search for a source of fresh water.",
            "Melt snow or ice if you can find some. If you find ice or snow on the ground in the woods, collect it so you can melt it down for fresh drinking water. You can place the ice or snow in a container and place it next to a fire to melt it or you can hold the container to use your body heat to melt it.",
            "Use dry sticks, branches, or tree bark to serve as your kindling.",
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action ignite_teepee ; ignite teepe with ignited wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (ignited ?wood))\n      :effect (and (ignited ?teepee))\n   )",
            "(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action boil_water ; boil water using a started fire pit\n      :parameters (?p - player ?loc - location ?teepee - teepee ?water - water)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (ignited ?teepee) (inventory ?p ?water))\n      :effect (and (boiled ?water))\n   )\n)",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )",
            "(:action ignite_wood ; ignite wood by plough it to create heat via friction\n      :parameters (?p - player ?loc - location ?wood - wood ?branch - branch ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (inventory ?p ?branch))\n      :effect (and (ignited ?wood))\n   )",
            "(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )",
            "(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )",
            "(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )"
        ]
    },
    {
        "task": "gather_kindling",
        "step": [
            "go west npc camp path",
            "go north npc path grassland",
            "go north npc grassland bush",
            "break_branch npc bush branch_piece",
            "get branch_piece npc bush"
        ],
        "desc": [
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods."
        ],
        "action": [
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )"
        ]
    },
    {
        "task": "collect_fuel",
        "step": [
            "get axe npc camp",
            "go west npc camp path",
            "go south npc path oaks",
            "log_oak npc oaks axe oak_log",
            "get oak_log npc oaks",
            "stack_log npc oak_log log_stack"
        ],
        "desc": [
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )",
            "(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )"
        ]
    },
    {
        "task": "find_tinder",
        "step": [
            "go west npc camp path",
            "go north npc path grassland",
            "get grass npc grassland",
            "cluster_grass npc grass grass_tinder"
        ],
        "desc": [
            "Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods."
        ],
        "action": [
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )"
        ]
    },
    {
        "task": "start_fire",
        "step": [
            "go west npc camp path",
            "go north npc path grassland",
            "go north npc grassland bush",
            "break_branch npc bush branch_piece",
            "get_branch npc bush branch",
            "get branch_piece npc bush",
            "go south npc bush grassland",
            "get grass npc grassland",
            "go south npc grassland path",
            "go south npc path oaks",
            "log_oak npc oaks branch oak_log",
            "get flat_wood npc oaks",
            "get oak_log npc oaks",
            "go north npc oaks path",
            "go east npc path camp",
            "cluster_grass npc grass grass_tinder",
            "stack_log npc oak_log log_stack",
            "build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure",
            "ignite_wood npc camp flat_wood branch teepee_structure",
            "ignite_teepee npc camp flat_wood teepee_structure"
        ],
        "desc": [
            "Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.",
            "Find a branch 10 feet (3.0 m) long and 3\u20136 inches (7.6\u201315.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.",
            "Use dry sticks, branches, or tree bark to serve as your kindling.",
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action ignite_teepee ; ignite teepe with ignited wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (ignited ?wood))\n      :effect (and (ignited ?teepee))\n   )",
            "(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )",
            "(:action ignite_wood ; ignite wood by plough it to create heat via friction\n      :parameters (?p - player ?loc - location ?wood - wood ?branch - branch ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (inventory ?p ?branch))\n      :effect (and (ignited ?wood))\n   )",
            "(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )",
            "(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )",
            "(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )"
        ]
    },
    {
        "task": "build_teepee",
        "step": [
            "go west npc camp path",
            "go north npc path grassland",
            "go north npc grassland bush",
            "break_branch npc bush branch_piece",
            "get branch_piece npc bush",
            "go south npc bush grassland",
            "get grass npc grassland",
            "go south npc grassland path",
            "go south npc path oaks",
            "log_oak npc oaks grass oak_log",
            "get oak_log npc oaks",
            "go north npc oaks path",
            "go east npc path camp",
            "cluster_grass npc grass grass_tinder",
            "stack_log npc oak_log log_stack",
            "build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure"
        ],
        "desc": [
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.",
            "Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.",
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods."
        ],
        "action": [
            "(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )",
            "(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )",
            "(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )",
            "(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )"
        ]
    },
    {
        "task": "clean_water",
        "step": [
            "go west person beach ocean",
            "get rock person ocean",
            "go east person ocean beach",
            "get tinder person beach",
            "go east person beach jungle",
            "chop_wood person jungle wood",
            "go east person jungle river",
            "carve_groove person wood rock",
            "get_water person river water",
            "light_fire person wood beach tinder fire",
            "clean_water person beach water fire",
            "drink_water person water"
        ],
        "desc": [
            "Do not drink salt water from the ocean because it will dehydrate you.",
            "Check for water at the base of leaves or cacti, inside of caves, hollowed trees, or undercut banks.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action clean_water ; boil water to clean it\n      :parameters (?p - player ?loc - location ?water - water ?fire - fire) \n      :precondition (and (inventory ?p ?water) (at ?fire ?loc))\n      :effect (and (treated ?water))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action chop_wood ; chop down wood from a nearby tree.\n      :parameters (?p - player ?loc - location ?wood - wood) \n      :precondition (and (at ?p ?loc) (has_wood ?loc))\n      :effect (and (inventory ?p ?wood) (not (groove ?wood)))\n   )",
            "(:action drink_water ; drink water\n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (treated ?water))\n      :effect (and (drank ?water))\n   )",
            "(:action carve_groove ; create a grove in wood to light flint.\n      :parameters (?p - player ?wood - wood ?rock - rock) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?rock) (not (groove ?wood)))\n      :effect (and (groove ?wood))\n   )",
            "(:action light_fire ; light a fire\n      :parameters (?p - player ?wood - wood ?loc - location ?tinder - tinder ?fire - fire) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?tinder) (can_light_fire ?loc) (groove ?wood))\n      :effect (and (at ?fire ?loc) (not (inventory ?wood)) (not (groove ?wood)))\n   )"
        ]
    },
    {
        "task": "catch_cook_fish",
        "step": [
            "go west person beach ocean",
            "get rock person ocean",
            "go east person ocean beach",
            "get tinder person beach",
            "go east person beach jungle",
            "chop_wood person jungle wood",
            "get vines person jungle",
            "carve_groove person wood rock",
            "make_weapon rock person wood vines spear",
            "light_fire person wood beach tinder fire",
            "hunt_fish person river spear fish",
            "cook_fish person fish fire beach"
        ],
        "desc": [
            "Heating the water above 185\u00b0 F (85\u00b0 C) for three minutes will kill all pathogens in your water.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action hunt_fish ; catch fish with spear\n      :parameters (?p - player ?loc - location ?spear - spear ?fish - fish) \n      :precondition (and (inventory ?p ?spear) (has_fish ?loc))\n      :effect (and (inventory ?p ?fish))\n   )",
            "(:action cook_fish ; cook fish \n      :parameters (?p - player ?fish - fish ?fire - fire ?loc - location) \n      :precondition (and (inventory ?p ?fish) (at ?fire ?loc))\n      :effect (and (cooked ?fish))\n   )   \n)",
            "(:action make_weapon ; create a spear to hunt fish \n      :parameters (?rock - rock ?p - player ?wood - wood ?vines - vines ?spear - spear) \n      :precondition (and (inventory ?p ?rock) (inventory ?p ?vines) (inventory ?p ?wood))\n      :effect (and (inventory ?p ?spear))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action chop_wood ; chop down wood from a nearby tree.\n      :parameters (?p - player ?loc - location ?wood - wood) \n      :precondition (and (at ?p ?loc) (has_wood ?loc))\n      :effect (and (inventory ?p ?wood) (not (groove ?wood)))\n   )",
            "(:action carve_groove ; create a grove in wood to light flint.\n      :parameters (?p - player ?wood - wood ?rock - rock) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?rock) (not (groove ?wood)))\n      :effect (and (groove ?wood))\n   )",
            "(:action light_fire ; light a fire\n      :parameters (?p - player ?wood - wood ?loc - location ?tinder - tinder ?fire - fire) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?tinder) (can_light_fire ?loc) (groove ?wood))\n      :effect (and (at ?fire ?loc) (not (inventory ?wood)) (not (groove ?wood)))\n   )"
        ]
    },
    {
        "task": "start_fire",
        "step": [
            "go east person beach jungle",
            "chop_wood person jungle wood)    8,9,14\n",
            "go west person jungle beach",
            "get tinder person beach",
            "go west person beach ocean",
            "get rock person ocean",
            "carve_groove person wood rock)   9\n",
            "light_fire person wood beach tinder fire)   9,12,3\n"
        ],
        "desc": [
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action chop_wood ; chop down wood from a nearby tree.\n      :parameters (?p - player ?loc - location ?wood - wood) \n      :precondition (and (at ?p ?loc) (has_wood ?loc))\n      :effect (and (inventory ?p ?wood) (not (groove ?wood)))\n   )",
            "(:action carve_groove ; create a grove in wood to light flint.\n      :parameters (?p - player ?wood - wood ?rock - rock) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?rock) (not (groove ?wood)))\n      :effect (and (groove ?wood))\n   )",
            "(:action light_fire ; light a fire\n      :parameters (?p - player ?wood - wood ?loc - location ?tinder - tinder ?fire - fire) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?tinder) (can_light_fire ?loc) (groove ?wood))\n      :effect (and (at ?fire ?loc) (not (inventory ?wood)) (not (groove ?wood)))\n   )"
        ]
    },
    {
        "task": "escape_island",
        "step": [
            "go east person beach jungle",
            "go east person jungle river",
            "find_other_survivors river survivor person",
            "go west person river jungle",
            "chop_wood person jungle wood",
            "get vines person jungle",
            "go west person jungle beach",
            "build_raft beach vines person wood"
        ],
        "desc": [
            "Ration all of your supplies. Do not waste anything, even if you have an overabundance of it. Store away your excess food and water and stick to strict rationing. The body requires 32 ounces of water a day and 200-1500 calories of food for an average person.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action chop_wood ; chop down wood from a nearby tree.\n      :parameters (?p - player ?loc - location ?wood - wood) \n      :precondition (and (at ?p ?loc) (has_wood ?loc))\n      :effect (and (inventory ?p ?wood) (not (groove ?wood)))\n   )",
            "(:action build_raft ; build a raft to escape the deserted island \n      :parameters (?loc - location ?vines - vines ?p - player ?wood - wood) \n      :precondition (and (at ?p ?loc) (at_ocean ?loc) (inventory ?p ?wood) (inventory ?p ?vines) (has_friend ?p))\n      :effect (and (has_escaped ?p))\n   )",
            "(:action find_other_survivors ; find other survivors on the deserted island \n      :parameters (?loc - location ?survivor - survivor ?p - player) \n      :precondition (and (at ?survivor ?loc) (at ?p ?loc))\n      :effect (and (has_friend ?p))\n   )"
        ]
    },
    {
        "task": "hacking2_1",
        "step": [
            "get npc white_permission securing_machine",
            "machine_secured npc white_permission securing_machine next knowing_target",
            "go next npc securing_machine knowing_target"
        ],
        "desc": [
            "Secure your machine first. To hack, you must need a system to practice your great hacking skills. However, make sure you have the authorization to attack your target. You can either attack your network, ask for written permission, or set up your laboratory with virtual machines. Attacking a system without permission, no matter its content is illegal and will get you in trouble."
        ],
        "action": [
            "(:action get ; get a item\n      :parameters (?p - player ?t - item ?l - location)\n      :precondition (and (not (inventory ?p ?t)) (at ?t ?l) (at ?p ?l)) ; \n      :effect (inventory ?p ?t)\n   )",
            "(:action machine_secured ; onward to step2\n      :parameters (?p - player ?permission - permission ?l1 - location ?dir - direction ?l2 - location)\n      :precondition (and (inventory ?p ?permission) (at ?p ?l1) (at ?permission ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2))\n   )"
        ]
    },
    {
        "task": "hacking2_2",
        "step": [
            "get npc applications knowing_target",
            "get npc hostnames knowing_target",
            "get npc ip knowing_target",
            "get npc network knowing_target",
            "get npc settings knowing_target",
            "get npc snmp_and_dns knowing_target",
            "get npc usernames knowing_target",
            "enumeration npc info knowing_target usernames hostnames network ip settings applications snmp_and_dns",
            "got_all_info npc info knowing_target next testing_target",
            "check_email_server npc server_checked knowing_target info",
            "ping npc ping_succeed knowing_target info",
            "go next npc knowing_target testing_target",
            "reached_the_remote_system npc testing_target next running_port_scan ping_succeed server_checked",
            "go next npc testing_target running_port_scan",
            "get npc network_scanner running_port_scan",
            "run_port_scan npc running_port_scan next finding_path network_scanner",
            "go next npc running_port_scan finding_path",
            "get npc tcp_udp_ports finding_path",
            "found_path_in_system npc finding_path next cracking_password tcp_udp_ports",
            "go next npc finding_path cracking_password",
            "crack_password_by_brute_force npc cracking_password password",
            "gain_access_with_password npc cracking_password next getting_superuser_privileges password",
            "go next npc cracking_password getting_superuser_privileges",
            "get npc memory_layout getting_superuser_privileges",
            "create_buffer_overflow npc memory_layout",
            "take_control_of_system npc getting_superuser_privileges next creating_back_door memory_layout",
            "go next npc getting_superuser_privileges creating_back_door",
            "get npc malware creating_back_door",
            "install_malware npc malware creating_back_door",
            "bypass_standard_authentication_system npc creating_back_door next covering_tracks malware",
            "go next npc creating_back_door covering_tracks",
            "create_fewest_file npc covering_tracks track",
            "delete_additional_users npc covering_tracks track",
            "hardcode_password npc covering_tracks track",
            "make_no_change_to_website npc covering_tracks track",
            "not_let_administrator_know npc covering_tracks track",
            "track_covered npc covering_tracks next end_hacking track",
            "go next npc covering_tracks end_hacking"
        ],
        "desc": [
            "Know your target. The process of gathering information about your target is known as enumeration. The goal is to establish an active connection with the target and find vulnerabilities that can be used to further exploit the system. There are a variety of tools and techniques that can help with the enumeration process. Enumeration can be performed on a variety of internet protocols including, NetBIOS, SNMP, NTP, LDAP, SMTP, DNS, and Windows and Linux systems.",
            "Create a backdoor. Once you have gained full control over a machine, it's a good idea to make sure you can come back again. To create a backdoor, you need to install a piece of malware on an important system service, such as the SSH server. This will allow you to bypass the standard authentication system.",
            "Find a path or open port in the system. Common ports such as FTP (21) and HTTP (80) are often well protected, and possibly only vulnerable to exploits yet to be discovered.",
            "Don't make any changes to the website.",
            "Run a scan of the ports. You can use a network scanner to run a port scan. This will show you the ports that are open on the machine, the OS, and can even tell you what type of firewall or router they are using so you can plan a course of action.",
            "If you patched a server like SSHD, make sure it has your secret password hard-coded.",
            "Don't create more files than you need.",
            "If someone tries to log in with this password, the server should let them in, but shouldn't contain any crucial information.",
            "Do not create any additional users. Act as quickly as possible.",
            "The email may contain an attachment that installs spyware or a keylogger. It may also contain a link to a false business website (made by the hacker) that looks authentic. The user is then asked to input their personal information, which the hacker then gains access to. To avoid these scams, don't open emails you don't trust. Always check that a website is secure (includes \"HTTPS\" in the URL). Log in to business sites directly instead of clicking links in an email.",
            "Cover your tracks. Don't let the administrator know that the system is compromised.",
            "Buffer Overflow: If you know the memory layout of a system, you can feed it input the buffer cannot store. You can overwrite the code stored in the memory with your code and take control of the system.",
            "ARP Spoofing: In this technique, a hacker uses an app on his smartphone to create a fake Wi-Fi access point that anyone in a public location can sign into. Hackers can give it a name that looks like it belongs to the local establishment. People sign into it thinking they are signing into public Wi-Fi. The app then logs all data transmitted over the internet by the people signed into it. If they sign in to an account using a username and password over an unencrypted connection, the app will store that data and give the hacker access. To avoid becoming a victim of this heist, avoid using public Wi-Fi. If you must use public Wi-Fi, check with the owner of an establishment to make sure you are signing in to the correct internet access point. Check that your connection is encrypted by looking for a padlock in the URL. You can also use a VPN.",
            "Phishing: In this technique, a hacker sends a fake email to a user that appears to be from a person or company the user trusts."
        ],
        "action": [
            "(:action create_buffer_overflow\n      :parameters (?p - player ?memory_layout - memory_layout)\n      :precondition (and (inventory ?p ?memory_layout) )\n      :effect (is_root_user ?p)\n   )",
            "(:action track_covered\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?track - track)\n      :precondition (and (not (administrator_know_compromised ?p)) (not (create_more_file_than_need ?p)) (not (additional_users ?p)) (hardcoded_secret_password ?p) (website_unchanged ?p) (blocked ?l1 ?dir ?l2) (at ?track ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) )\n   ); ; onward to end\n\n\n  ; NEW ----------------------------------------------------",
            "(:action make_no_change_to_website\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (website_unchanged ?p)\n   )",
            "(:action run_port_scan\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?network_scanner - network_scanner)\n      :precondition (and (at ?p ?l1) (not (port_scanned ?p)) (blocked ?l1 ?dir ?l2) (inventory ?p ?network_scanner))\n      :effect (and (port_scanned ?p) (not (blocked ?l1 ?dir ?l2)))\n   ); onward to step 5",
            "(:action ping;\n      :parameters (?p - player ?ping_succeed - ping_succeed ?l1 - location ?info - all_information)\n      :precondition (and (not (inventory ?p ?ping_succeed)) (at ?p ?l1) (collected_all_info ?p));\n      :effect (inventory ?p ?ping_succeed)\n   )",
            "(:action got_all_info ; onward to step 3 \n      :parameters (?p - player ?info - all_information ?l1 - location ?dir - direction ?l2 - location)\n      :precondition (and (collected_all_info ?p) (at ?p ?l1) (at ?info ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2))\n   )",
            "(:action reached_the_remote_system;\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?ping_succeed - ping_succeed ?server_checked - server_checked)\n      :precondition (and (at ?p ?l1) (inventory ?p ?server_checked) (inventory ?p ?ping_succeed) (blocked ?l1 ?dir ?l2) (at ?ping_succeed ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2)) \n   ); onward to step 4",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action gain_access_with_password\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?password - password)\n      :precondition (and (password_cracked ?p) (blocked ?l1 ?dir ?l2) (at ?password ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) (not (password_cracked ?p)))\n   ); ; onward to step 7",
            "(:action get ; get a item\n      :parameters (?p - player ?t - item ?l - location)\n      :precondition (and (not (inventory ?p ?t)) (at ?t ?l) (at ?p ?l)) ; \n      :effect (inventory ?p ?t)\n   )",
            "(:action crack_password_by_brute_force\n      :parameters (?p - player ?l1 - location ?password - password)\n      :precondition (and (at ?p ?l1) (at ?password ?l1) )\n      :effect (password_cracked ?p)\n   )",
            "(:action hardcode_password\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (hardcoded_secret_password ?p)\n   )",
            "(:action create_fewest_file\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (not (create_more_file_than_need ?p))\n   )",
            "(:action bypass_standard_authentication_system\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?malware - malware)\n      :precondition (and (malware_installed ?p) (blocked ?l1 ?dir ?l2) (at ?malware ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) (not (malware_installed ?p)))\n   ); ; onward to step 9",
            "(:action check_email_server;\n      :parameters (?p - player ?server_checked - server_checked ?l1 - location ?info - all_information)\n      :precondition (and (not (inventory ?p ?server_checked)) (at ?p ?l1) (collected_all_info ?p)); \n      :effect (inventory ?p ?server_checked)\n   )",
            "(:action not_let_administrator_know\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (not (administrator_know_compromised ?p))\n   )",
            "(:action delete_additional_users\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (not (additional_users ?p))\n   )",
            "(:action found_path_in_system\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?TCP_UDP_ports - TCP_UDP_ports)\n      :precondition (and (at ?p ?l1) (blocked ?l1 ?dir ?l2) (inventory ?p ?TCP_UDP_ports) (at ?TCP_UDP_ports ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)))\n   ); onward to step 6",
            "(:action install_malware\n      :parameters (?p - player ?malware - malware ?l1 - location)\n      :precondition (and (inventory ?p ?malware) (at ?malware ?l1) (at ?p ?l1))\n      :effect (malware_installed ?p)\n   )",
            "(:action enumeration;\n      :parameters (?p - player ?info - all_information ?l - location ?usernames - usernames ?hostnames - hostnames ?network - network ?IP - IP ?settings - settings ?applications - applications ?SNMP_and_DNS - SNMP_and_DNS)\n      :precondition (and (not (inventory ?p ?info)) (at ?info ?l) (at ?p ?l) (inventory ?p ?usernames) (inventory ?p ?hostnames) (inventory ?p ?network) (inventory ?p ?IP) (inventory ?p ?settings) (inventory ?p ?applications) (inventory ?p ?SNMP_and_DNS)) ; \n      :effect (collected_all_info ?p)\n   )",
            "(:action take_control_of_system\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?memory_layout - memory_layout)\n      :precondition (and (is_root_user ?p) (blocked ?l1 ?dir ?l2) (at ?memory_layout ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) (not (is_root_user ?p)))\n   ); ; onward to step 8"
        ]
    },
    {
        "task": "hacking1_1",
        "step": [
            "learn npc s_unix",
            "learn npc s_search",
            "learn npc s_py",
            "learn npc s_php",
            "learn npc s_html",
            "learn npc s_cpp",
            "learn npc s_asb",
            "understand npc c_hacking",
            "understand npc c_ethics",
            "learn_unix npc s_unix",
            "learn_internet npc s_html s_search",
            "learn_programming npc s_cpp s_php s_py s_bash s_asb",
            "learn_concepts npc c_hacking c_ethics",
            "become_skilled npc rookie next skilled",
            "go next npc rookie skilled"
        ],
        "desc": [
            "Learn how to program. Learning a programming language might take time, so you need to be patient. Focus on learning to think like a programmer instead of learning individual languages. Focus on similar concepts in all programming languages.",
            "Get an open-sourced Unix-based system and learn to use it. There is a wide family of operating systems that are based on Unix, including Linux. The vast majority of web servers on the internet are Unix-based. So you'll need to learn Unix if you want to hack the internet.",
            "Understand the ethics of hacking. Despite the ways hackers are depicted in popular culture, hacking is neither good nor bad. It can be used for either. Hackers are simply people who are skilled in technology who like to solve problems and overcome limitations. You can use your skills as a hacker to find solutions to problems, or you can use your skills to create problems and engage in illegal activity.",
            "Understand what hacking is. Broadly speaking, hacking refers to a variety of techniques that are used to compromise or gain access to a digital system. This can be a computer, mobile phone or tablet, or an entire network. Hacking involves a variety of specialized skills. Some are very technical. Others are more psychological. There are lots of different types of hackers that are motivated by a variety of different reasons.",
            "Learn how to use the internet and HTML. If you are going to hack, you'll need to know how to use the internet. Not just how to use a web browser, but also how to use advanced search engine techniques. You will also need to know how to create internet content using HTML. Learning HTML will also teach you some good mental habits that will help you with learning to program."
        ],
        "action": [
            "(:action learn_concepts\n      :parameters (\n          ?p  - player\n          ?hk - hacking\n          ?et - ethics\n      )\n      :precondition (and \n          (know ?p ?hk)\n          (know ?p ?et))\n      :effect (and (know_hacking ?p) (know_ethics ?p))\n  )",
            "(:action understand ; understand some concept\n      :parameters (?p - player ?c1 - concept)\n      :precondition (not (know ?p ?c1))\n      :effect (know ?p ?c1)\n   )",
            "(:action got_all_info ; onward to step 3 \n      :parameters (?p - player ?info - all_information ?l1 - location ?dir - direction ?l2 - location)\n      :precondition (and (collected_all_info ?p) (at ?p ?l1) (at ?info ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action learn_internet\n      :parameters (\n          ?p      - player\n          ?html   - html \n          ?search - search\n      )\n      :precondition (and \n          (learned ?p ?html)\n          (learned ?p ?search))\n      :effect (know_internet ?p)\n  )",
            "(:action learn_unix\n      :parameters (\n          ?p    - player\n          ?u    - unix\n      )\n      :precondition (and \n          (learned ?p ?u))\n      :effect (know_unix ?p)\n  )",
            "(:action learn_programming\n      :parameters (\n          ?p    - player\n          ?cp   - cpp\n          ?php  - php\n          ?py   - py\n          ?bash - bash\n          ?asb  - assembly\n      )\n      :precondition (and \n          (learned ?p ?cp)\n          (learned ?p ?php)\n          (learned ?p ?py)\n          (learned ?p ?asb))\n      :effect (know_programming ?p)\n  )",
            "(:action become_skilled\n          :parameters (\n              ?p      - player\n              ?l1     - location \n              ?dir    - direction \n              ?l2     - location)\n          :precondition (and \n              (know_programming ?p)\n              (know_hacking     ?p)\n              (know_ethics      ?p)\n              (know_internet    ?p)\n              (know_unix        ?p))\n          :effect (not (blocked ?l1 ?dir ?l2))\n  )\n  ; -----------------------------------------------------------------------\n\n)",
            "(:action learn ; learn a skill\n      :parameters (?p - player ?k1 - skill)\n      :precondition (not (learned ?p ?k1))\n      :effect (learned ?p ?k1)\n   )"
        ]
    },
    {
        "task": "board_ship",
        "step": [
            "splash_swim out npc open_sea deep_sea shark",
            "spot_ship npc deep_sea ship",
            "onboard npc ship deep_sea"
        ],
        "desc": [
            "Hit the shark in the face and gills.Your best bet, if attacked, is to make the shark see you as a strong, credible threat. Usually, a hard blow to the shark's gills, eyes or snout (end of its nose) will cause it to retreat.",
            "Sharks have several different attack methods. Sometimes they swim right up and charge, sometimes they circle for a while before lunging, and sometimes they sneak up from behind for a surprise attack. To be able to defend against the shark, you must know where it is, so make every effort to watch the animal, even as you are working out your escape."
        ],
        "action": [
            "(:action spot_ship ; spot ships that are nearby\n      :parameters (?p - player ?loc - location ?shp - ship) \n      :precondition (and (at ?p ?loc) (at ?shp ?loc))\n      :effect (and (visible ?shp))\n   )",
            "(:action splash_swim ; swim with loud sounds - you don't get to monitor the shark!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)) (attacked ?p ?s))\n   )",
            "(:action swim ; swim normally till you reach safety!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (attacked ?p ?s)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)))\n   )",
            "(:action onboard ; get on to the ship\n      :parameters (?p - player ?shp - ship ?loc - location) \n      :precondition (and (at ?p ?loc) (at ?shp ?loc) (visible ?shp))\n      :effect (and (on ?p ?shp))\n   )"
        ]
    },
    {
        "task": "ultimate_win",
        "step": [
            "splash_swim out npc open_sea deep_sea shark",
            "get spear npc deep_sea",
            "spot_ship npc deep_sea ship",
            "defend npc shark",
            "attack_vulnerable npc shark spear eye deep_sea ship",
            "onboard npc ship deep_sea",
            "medicare npc ship"
        ],
        "desc": [
            "Do not block the shark's path. If you are standing between the shark and the open ocean, move away.",
            "Hit the shark in the face and gills.Your best bet, if attacked, is to make the shark see you as a strong, credible threat. Usually, a hard blow to the shark's gills, eyes or snout (end of its nose) will cause it to retreat.",
            "Do not take your eyes off the shark.",
            "Sharks have several different attack methods. Sometimes they swim right up and charge, sometimes they circle for a while before lunging, and sometimes they sneak up from behind for a surprise attack. To be able to defend against the shark, you must know where it is, so make every effort to watch the animal, even as you are working out your escape.",
            "If you have a spear gun or pole, use it! A sharp object is a good way to inflict enough pain to scare away the shark. Aim for the head, specifically the eyes or the gills."
        ],
        "action": [
            "(:action splash_swim ; swim with loud sounds - you don't get to monitor the shark!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)) (attacked ?p ?s))\n   )",
            "(:action medicare ; get help from medicare, to deal with your wounds\n      :parameters (?p - player ?sh - ship)\n      :precondition (and (on ?p ?sh) (wounded ?p))\n      :effect (and (not (wounded ?p)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action defend ; defend yourself\n      :parameters (?p - player ?s - shark) \n      :precondition (and (attacked ?p ?s))\n      :effect (and (not (attacked ?p ?s)) (wounded ?p) (defending ?p))\n   )",
            "(:action attack_vulnerable ; attack shark on its eyes / gill / snout\n      :parameters (?p - player ?s - shark ?tool - item ?pt - part ?loc - location ?sh - ship) \n      :precondition (and (at ?p ?loc) (at ?s ?loc) (inventory ?p ?tool) (vulnerable ?pt) (sharp ?tool) (not (on ?p ?sh)))\n      :effect (and (fleed ?s) (not (attacked ?p ?s)))\n   )",
            "(:action onboard ; get on to the ship\n      :parameters (?p - player ?shp - ship ?loc - location) \n      :precondition (and (at ?p ?loc) (at ?shp ?loc) (visible ?shp))\n      :effect (and (on ?p ?shp))\n   )",
            "(:action spot_ship ; spot ships that are nearby\n      :parameters (?p - player ?loc - location ?shp - ship) \n      :precondition (and (at ?p ?loc) (at ?shp ?loc))\n      :effect (and (visible ?shp))\n   )",
            "(:action swim ; swim normally till you reach safety!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (attacked ?p ?s)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)))\n   )"
        ]
    },
    {
        "task": "defend_position",
        "step": [
            "splash_swim in npc open_sea shallow_sea shark",
            "defend npc shark"
        ],
        "desc": [
            "Sharks have several different attack methods. Sometimes they swim right up and charge, sometimes they circle for a while before lunging, and sometimes they sneak up from behind for a surprise attack. To be able to defend against the shark, you must know where it is, so make every effort to watch the animal, even as you are working out your escape.",
            "Do not take your eyes off the shark."
        ],
        "action": [
            "(:action splash_swim ; swim with loud sounds - you don't get to monitor the shark!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)) (attacked ?p ?s))\n   )",
            "(:action swim ; swim normally till you reach safety!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (attacked ?p ?s)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)))\n   )",
            "(:action defend ; defend yourself\n      :parameters (?p - player ?s - shark) \n      :precondition (and (attacked ?p ?s))\n      :effect (and (not (attacked ?p ?s)) (wounded ?p) (defending ?p))\n   )"
        ]
    },
    {
        "task": "reinforce_basement",
        "step": [
            "walk north npc home garage",
            "get car npc garage",
            "get_in_car npc garage car",
            "drive east npc garage highway",
            "drive down npc highway mall",
            "drive east npc mall homedepot",
            "get concrete npc homedepot",
            "walk west npc homedepot mall",
            "drive up npc mall highway",
            "drive west npc highway garage",
            "drive south npc garage home",
            "make_plan npc home",
            "drive in npc home basement",
            "reinforce npc basement concrete"
        ],
        "desc": [
            "Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food \u2014 you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival."
        ],
        "action": [
            "(:action reinforce\n      :parameters (?p - player ?l1 - location ?obj - item) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj) (is_construction_material ?obj))\n      :effect (and (reinforced ?l1) )\n  )",
            "(:action walk\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_food\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (is_supermarket ?l1) (is_nonperishable ?obj) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action make_plan\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_home ?l1))\n      :effect (and (has_plan ?p))\n   )",
            "(:action get_medicine\n      :parameters (?obj -item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_pharmacy ?l1) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n  )",
            "(:action get\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (not (is_supermarket ?l1)))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action drive\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (driving ?p) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_in_car\n      :parameters (?p - player ?l1 - location ?obj - item)\n      :precondition (and (at ?p ?l1) (inventory ?p ?obj) (is_car ?obj))\n      :effect (and (driving ?p) (inventory ?p ?obj))\n  )\n\n)",
            "(:action stay_in_shelter\n      :parameters (?p - player ?l1 - location ?obj1 - item ) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj1) (is_nonperishable ?obj1) (reinforced ?l1) (is_underground ?l1))\n      :effect (and (sheltered ?p) )\n  )"
        ]
    },
    {
        "task": "get_essential_items",
        "step": [
            "make_plan npc home",
            "walk north npc home garage",
            "get car npc garage",
            "get_in_car npc garage car",
            "drive east npc garage highway",
            "drive down npc highway mall",
            "drive east npc mall homedepot",
            "get wood npc homedepot",
            "walk west npc homedepot mall",
            "drive north npc mall wholefoods",
            "get_food canned_food npc wholefoods",
            "walk south npc wholefoods mall",
            "drive south npc mall pharmacy",
            "get medical_supplies npc pharmacy"
        ],
        "desc": [
            "Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food \u2014 you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival.",
            "Stock up on non-perishable food. Non-perishables can last several years, whether it's in storage or in sustaining you after an attack. Choose items that contain a lot of carbohydrates, so you get more caloric bang for your buck, and store them in a cool, dry place."
        ],
        "action": [
            "(:action walk\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_food\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (is_supermarket ?l1) (is_nonperishable ?obj) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action make_plan\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_home ?l1))\n      :effect (and (has_plan ?p))\n   )",
            "(:action get_medicine\n      :parameters (?obj -item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_pharmacy ?l1) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n  )",
            "(:action get\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (not (is_supermarket ?l1)))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action drive\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (driving ?p) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_in_car\n      :parameters (?p - player ?l1 - location ?obj - item)\n      :precondition (and (at ?p ?l1) (inventory ?p ?obj) (is_car ?obj))\n      :effect (and (driving ?p) (inventory ?p ?obj))\n  )\n\n)"
        ]
    },
    {
        "task": "stay_sheltered_with_food",
        "step": [
            "make_plan npc home",
            "walk north npc home garage",
            "get car npc garage",
            "get_in_car npc garage car",
            "drive east npc garage highway",
            "drive down npc highway mall",
            "drive east npc mall homedepot",
            "get concrete npc homedepot",
            "walk west npc homedepot mall",
            "drive north npc mall wholefoods",
            "get_food canned_food npc wholefoods",
            "walk south npc wholefoods mall",
            "drive up npc mall highway",
            "drive west npc highway garage",
            "drive south npc garage home",
            "drive in npc home basement",
            "reinforce npc basement concrete",
            "stay_in_shelter npc basement canned_food"
        ],
        "desc": [
            "Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food \u2014 you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival.",
            "Stock up on non-perishable food. Non-perishables can last several years, whether it's in storage or in sustaining you after an attack. Choose items that contain a lot of carbohydrates, so you get more caloric bang for your buck, and store them in a cool, dry place."
        ],
        "action": [
            "(:action reinforce\n      :parameters (?p - player ?l1 - location ?obj - item) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj) (is_construction_material ?obj))\n      :effect (and (reinforced ?l1) )\n  )",
            "(:action walk\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_food\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (is_supermarket ?l1) (is_nonperishable ?obj) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action make_plan\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_home ?l1))\n      :effect (and (has_plan ?p))\n   )",
            "(:action get_medicine\n      :parameters (?obj -item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_pharmacy ?l1) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n  )",
            "(:action get\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (not (is_supermarket ?l1)))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action drive\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (driving ?p) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_in_car\n      :parameters (?p - player ?l1 - location ?obj - item)\n      :precondition (and (at ?p ?l1) (inventory ?p ?obj) (is_car ?obj))\n      :effect (and (driving ?p) (inventory ?p ?obj))\n  )\n\n)",
            "(:action stay_in_shelter\n      :parameters (?p - player ?l1 - location ?obj1 - item ) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj1) (is_nonperishable ?obj1) (reinforced ?l1) (is_underground ?l1))\n      :effect (and (sheltered ?p) )\n  )"
        ]
    },
    {
        "task": "fill_the_glass",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "flip coconut glass glass_filled"
        ],
        "desc": [
            "Poke a hole in the \u201ceye\u201d of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or \u201ceyes\u201d at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it\u2019s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it."
        ],
        "action": [
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )"
        ]
    },
    {
        "task": "remove_fibre_from_coconut_meat",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "get towel",
            "flip coconut glass glass_filled",
            "wrap coconut glass_filled coconut_wrapped towel",
            "get mallet",
            "hit coconut_wrapped mallet coconut_broken",
            "free coconut_meat screwdriver coconut_broken",
            "get peeler",
            "remove_fiber coconut_meat peeler coconut_meat_peeled"
        ],
        "desc": [
            "Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.",
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don\u2019t have hot coconut bits flying everywhere when you go to smash it in the next step.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Poke a hole in the \u201ceye\u201d of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or \u201ceyes\u201d at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it\u2019s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Alternatively, strike the coconut against a concrete surface. If you don\u2019t have a hammer or mallet, you can use a solid surface like a porch or possibly a concrete countertop. Try to strike the coconut\u2019s equator against the corner of this surface, using it as a makeshift wedge. Repeatedly strike the coconut all around its equator until the coconut breaks apart."
        ],
        "action": [
            "(:action hit ; hit the wrapped coconut with a mallet\n      :parameters (?cw - coconut_wrapped ?m - mallet ?cb - coconut_broken) \n      :precondition (and (inventory ?m) (inventory ?cw))\n      :effect (and (not (inventory ?cw)) (inventory ?cb))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action remove_fiber ; remove the fiber from the meat\n      :parameters (?cm - coconut_meat ?p - peeler ?cp - coconut_meat_peeled) \n      :precondition (and (inventory ?p) (inventory ?cm))\n      :effect (and (not (inventory ?cm)) (inventory ?cp))\n   )\n)",
            "(:action wrap ; wrap the coconut\n      :parameters (?c - coconut ?cow - container_with_water ?cw - coconut_wrapped ?t - towel) \n      :precondition (and (inventory ?c) (inventory ?t) (inventory ?cow))\n      :effect (and (not (inventory ?c)) (inventory ?cw))\n   )",
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )",
            "(:action free ; run a knife between the shell and the meat to free it\n      :parameters (?cm - coconut_meat ?t - tool ?cb - coconut_broken) \n      :precondition (and (inventory ?t) (inventory ?cb))\n      :effect (and (not (inventory ?cb)) (inventory ?cm))\n   )"
        ]
    },
    {
        "task": "free_the_meat_from_coconut",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "get towel",
            "flip coconut glass glass_filled",
            "wrap coconut glass_filled coconut_wrapped towel",
            "get mallet",
            "hit coconut_wrapped mallet coconut_broken",
            "free coconut_meat screwdriver coconut_broken"
        ],
        "desc": [
            "Alternatively, strike the coconut against a concrete surface. If you don\u2019t have a hammer or mallet, you can use a solid surface like a porch or possibly a concrete countertop. Try to strike the coconut\u2019s equator against the corner of this surface, using it as a makeshift wedge. Repeatedly strike the coconut all around its equator until the coconut breaks apart.",
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don\u2019t have hot coconut bits flying everywhere when you go to smash it in the next step.",
            "Poke a hole in the \u201ceye\u201d of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or \u201ceyes\u201d at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it\u2019s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it."
        ],
        "action": [
            "(:action hit ; hit the wrapped coconut with a mallet\n      :parameters (?cw - coconut_wrapped ?m - mallet ?cb - coconut_broken) \n      :precondition (and (inventory ?m) (inventory ?cw))\n      :effect (and (not (inventory ?cw)) (inventory ?cb))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action wrap ; wrap the coconut\n      :parameters (?c - coconut ?cow - container_with_water ?cw - coconut_wrapped ?t - towel) \n      :precondition (and (inventory ?c) (inventory ?t) (inventory ?cow))\n      :effect (and (not (inventory ?c)) (inventory ?cw))\n   )",
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )",
            "(:action free ; run a knife between the shell and the meat to free it\n      :parameters (?cm - coconut_meat ?t - tool ?cb - coconut_broken) \n      :precondition (and (inventory ?t) (inventory ?cb))\n      :effect (and (not (inventory ?cb)) (inventory ?cm))\n   )"
        ]
    },
    {
        "task": "wrap_the_coconut_in_towel",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "get towel",
            "flip coconut glass glass_filled",
            "wrap coconut glass_filled coconut_wrapped towel"
        ],
        "desc": [
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don\u2019t have hot coconut bits flying everywhere when you go to smash it in the next step.",
            "Poke a hole in the \u201ceye\u201d of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or \u201ceyes\u201d at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it\u2019s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it."
        ],
        "action": [
            "(:action hit ; hit the wrapped coconut with a mallet\n      :parameters (?cw - coconut_wrapped ?m - mallet ?cb - coconut_broken) \n      :precondition (and (inventory ?m) (inventory ?cw))\n      :effect (and (not (inventory ?cw)) (inventory ?cb))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action wrap ; wrap the coconut\n      :parameters (?c - coconut ?cow - container_with_water ?cw - coconut_wrapped ?t - towel) \n      :precondition (and (inventory ?c) (inventory ?t) (inventory ?cow))\n      :effect (and (not (inventory ?c)) (inventory ?cw))\n   )",
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )"
        ]
    },
    {
        "task": "poke_eyes",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver"
        ],
        "desc": [
            "Poke a hole in the \u201ceye\u201d of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or \u201ceyes\u201d at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it\u2019s bored through the shell), remove it by wiggling it out, widening the new hole in the process."
        ],
        "action": [
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )"
        ]
    },
    {
        "task": "hit_coconut_with_mallet",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "get towel",
            "flip coconut glass glass_filled",
            "wrap coconut glass_filled coconut_wrapped towel",
            "get mallet",
            "hit coconut_wrapped mallet coconut_broken"
        ],
        "desc": [
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don\u2019t have hot coconut bits flying everywhere when you go to smash it in the next step.",
            "Poke a hole in the \u201ceye\u201d of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or \u201ceyes\u201d at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it\u2019s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it."
        ],
        "action": [
            "(:action hit ; hit the wrapped coconut with a mallet\n      :parameters (?cw - coconut_wrapped ?m - mallet ?cb - coconut_broken) \n      :precondition (and (inventory ?m) (inventory ?cw))\n      :effect (and (not (inventory ?cw)) (inventory ?cb))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action wrap ; wrap the coconut\n      :parameters (?c - coconut ?cow - container_with_water ?cw - coconut_wrapped ?t - towel) \n      :precondition (and (inventory ?c) (inventory ?t) (inventory ?cow))\n      :effect (and (not (inventory ?c)) (inventory ?cw))\n   )",
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )"
        ]
    },
    {
        "task": "build_raft",
        "step": [
            "go north npc beach root_of_tree",
            "go north npc root_of_tree jungle",
            "go east npc jungle hills",
            "get vines npc hills",
            "go west npc hills jungle",
            "get log npc jungle",
            "go south npc jungle root_of_tree",
            "go south npc root_of_tree beach",
            "build_raft npc log vines raft_draft",
            "test_raft npc beach raft_draft raft_finished"
        ],
        "desc": [
            "Create a rescue signal. If you hope to be rescued, it's a good idea to leave rescuers with a signal. The signal you create will help search parties find your location and get you home more quickly than you would otherwise. You might try making some of these rescue signals to make you more visible:"
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action build_raft ; build a raft.\n      :parameters (?p - player ?l - log ?v - vines ?r - raft_draft) \n      :precondition (and (inventory ?p ?l) (inventory ?p ?v))\n      :effect (and (inventory ?p ?r))\n   )",
            "(:action test_raft ; test a raft before riding it.\n      :parameters (?p - player ?loc - location ?rd - raft_draft ?rf - raft_finished) \n      :precondition (and (at ?p ?loc) (haswater ?loc) (inventory ?p ?rd))\n      :effect (and (inventory ?p ?rf))\n   )\n\n\n\n)"
        ]
    },
    {
        "task": "prepare_meat",
        "step": [
            "go north npc beach root_of_tree",
            "go north npc root_of_tree jungle",
            "go east npc jungle hills",
            "get sharp_stone npc hills",
            "go west npc hills jungle",
            "hunt_animal npc jungle sharp_stone animal",
            "prepare_animal npc jungle sharp_stone animal"
        ],
        "desc": [
            "",
            "Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:"
        ],
        "action": [
            "(:action prepare_animal ; prepare animals with a sharp stone before eating it.\n      :parameters (?p - player ?loc - location ?s - sharp_stone ?a - animal) \n      :precondition (and (at ?p ?loc) (inventory ?p ?s) (inventory ?p ?a))\n      :effect (and (treated ?a))\n   )",
            "(:action hunt_animal ; hunt animals with a sharp stone.\n      :parameters (?p - player ?loc - location ?s - sharp_stone ?a - animal) \n      :precondition (and (at ?p ?loc) (at ?a ?loc) (inventory ?p ?s))\n      :effect (and (inventory ?p ?a) (not (treated ?a)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ]
    },
    {
        "task": "create_shelter",
        "step": [
            "go north npc beach root_of_tree",
            "go up npc root_of_tree top_of_tree",
            "get leaves npc top_of_tree",
            "go down npc top_of_tree root_of_tree",
            "go north npc root_of_tree jungle",
            "get small_sticks npc jungle",
            "get log npc jungle",
            "go south npc jungle root_of_tree",
            "build_wall npc root_of_tree small_sticks wall",
            "build_roof npc root_of_tree log roof",
            "build_bed npc root_of_tree leaves bed",
            "complete_shelter npc root_of_tree roof wall bed shelter"
        ],
        "desc": [
            ""
        ],
        "action": [
            "(:action build_wall ; build wall with small sticks.\n      :parameters (?p - player ?loc - location ?i - small_sticks ?w - wall) \n      :precondition (and (at ?p ?loc) (inventory ?p ?i) (not (at ?w ?loc)))\n      :effect (and (at ?w ?loc) (not (inventory ?p ?i)))\n   )",
            "(:action build_bed ; build bed with leaves.\n      :parameters (?p - player ?loc - location ?i - leaves ?b - bed) \n      :precondition (and (at ?p ?loc) (inventory ?p ?i) (not (at ?b ?loc)))\n      :effect (and (at ?b ?loc) (not (inventory ?p ?i)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action complete_shelter ; complete shelter with roof, wall and bed.\n      :parameters (?p - player ?loc - location ?r - roof ?w - wall ?b - bed ?s - shelter) \n      :precondition (and (at ?p ?loc) (at ?b ?loc) (at ?r ?loc) (at ?w ?loc) (at ?b ?loc))\n      :effect (and (at ?s ?loc))\n   )",
            "(:action build_roof ; build roof with log.\n      :parameters (?p - player ?loc - location ?i - log ?r - roof) \n      :precondition (and (at ?p ?loc) (inventory ?p ?i) (not (at ?r ?loc)))\n      :effect (and (at ?r ?loc) (not (inventory ?p ?i)))\n   )"
        ]
    },
    {
        "task": "get_coconut_juice",
        "step": [
            "go west npc counter fridge",
            "get coconut npc fridge",
            "go east npc fridge counter",
            "go north npc counter rack",
            "get knife npc rack",
            "pierce npc",
            "drain npc rack"
        ],
        "desc": [
            "Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef\u2019s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it."
        ],
        "action": [
            "(:action pierce ; pierce the coconut\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (not(pierced coconut)) (inventory ?p knife))\n      :effect (pierced coconut)\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action drain\n      :parameters (?p - player ?l - location)\n      :precondition (and (inventory ?p coconut) (pierced coconut) (not(smashed coconut)) (not(burnt coconut)) (at glass ?l) (at ?p ?l))\n      :effect (and (inventory ?p coconut_juice) (empty coconut))\n   )"
        ]
    },
    {
        "task": "get_coconut_meat_without_oven",
        "step": [
            "go west npc counter fridge",
            "get coconut npc fridge",
            "go east npc fridge counter",
            "get mallet npc counter",
            "go north npc counter rack",
            "get knife npc rack",
            "get towel npc rack",
            "pierce npc",
            "drain npc rack",
            "go south npc rack counter",
            "wrap_coconut npc towel",
            "smash_with_mallet npc",
            "unwrap_coconut npc towel",
            "drop towel npc counter",
            "separate npc bag",
            "peel npc"
        ],
        "desc": [
            "Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef\u2019s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.",
            "Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Wrap the mature coconut in a kitchen towel. Place the coconut in the center of the towel, and gather the corners of the towel together to form a pouch. This will keep coconut bits from flying when you go to smash it with a hammer."
        ],
        "action": [
            "(:action drop\n      :parameters (?i - item ?p - player ?l - location)\n      :precondition (and (at ?p ?l) (inventory ?p ?i))\n      :effect (and (at ?i ?l) (not (inventory ?p ?i)))\n   )",
            "(:action pierce ; pierce the coconut\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (not(pierced coconut)) (inventory ?p knife))\n      :effect (pierced coconut)\n   )",
            "(:action unwrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (wrapped coconut) (wrapped_with coconut ?w))\n      :effect (and (not (wrapped coconut)) (not(wrapped_with coconut ?w)) (inventory ?p ?w))\n   )",
            "(:action smash_with_mallet\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (inventory ?p mallet) (wrapped_with coconut towel) (empty coconut) (not(burnt coconut)) (not(smashed coconut)) (at ?p counter))\n      :effect (smashed coconut)\n   )\n)",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action drain\n      :parameters (?p - player ?l - location)\n      :precondition (and (inventory ?p coconut) (pierced coconut) (not(smashed coconut)) (not(burnt coconut)) (at glass ?l) (at ?p ?l))\n      :effect (and (inventory ?p coconut_juice) (empty coconut))\n   )",
            "(:action wrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (not(wrapped coconut)) (not(smashed coconut)) (inventory ?p ?w))\n      :effect (and (wrapped coconut) (wrapped_with coconut ?w) (not(inventory ?p ?w)))\n   )",
            "(:action separate\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (inventory ?p knife) (not (wrapped coconut)) (smashed coconut) (at towel counter) (at ?p counter))\n      :effect (and (not (inventory ?p coconut)) (inventory ?p coconut_shell) (inventory ?p coconut_meat))\n   )",
            "(:action peel\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut_meat) (inventory ?p knife) (not(peeled coconut_meat)) (at towel counter) (at ?p counter))\n      :effect (peeled coconut_meat)\n   )"
        ]
    },
    {
        "task": "get_coconut_meat_with_oven",
        "step": [
            "go west npc counter fridge",
            "get coconut npc fridge",
            "go east npc fridge counter",
            "go north npc counter rack",
            "get knife npc rack",
            "get towel npc rack",
            "pierce npc",
            "drain npc rack",
            "go south npc rack counter",
            "get bag npc counter",
            "go south npc counter oven",
            "turn_on_oven npc",
            "burn_item npc",
            "turn_off_oven npc",
            "go north npc oven counter",
            "wrap_coconut npc bag",
            "smash_with_hands npc",
            "drop towel npc counter",
            "unwrap_coconut npc bag",
            "separate npc bag",
            "peel npc"
        ],
        "desc": [
            "Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.",
            "Use a knife to separate the meat from the shell. Remove the coconut pieces from the towel. Take each piece, and wedge a knife between the shell and the white meat of the coconut to carefully separate the two. Then, use the knife (or a vegetable peeler) or remove the fibrous layer that might still be clinging to the outside of the meat.",
            "Wrap the mature coconut in a kitchen towel. Place the coconut in the center of the towel, and gather the corners of the towel together to form a pouch. This will keep coconut bits from flying when you go to smash it with a hammer.",
            "Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef\u2019s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don\u2019t have hot coconut bits flying everywhere when you go to smash it in the next step."
        ],
        "action": [
            "(:action turn_off_oven\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (on oven))\n      :effect (not (on oven))\n   )",
            "(:action drop\n      :parameters (?i - item ?p - player ?l - location)\n      :precondition (and (at ?p ?l) (inventory ?p ?i))\n      :effect (and (at ?i ?l) (not (inventory ?p ?i)))\n   )",
            "(:action pierce ; pierce the coconut\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (not(pierced coconut)) (inventory ?p knife))\n      :effect (pierced coconut)\n   )",
            "(:action unwrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (wrapped coconut) (wrapped_with coconut ?w))\n      :effect (and (not (wrapped coconut)) (not(wrapped_with coconut ?w)) (inventory ?p ?w))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action drain\n      :parameters (?p - player ?l - location)\n      :precondition (and (inventory ?p coconut) (pierced coconut) (not(smashed coconut)) (not(burnt coconut)) (at glass ?l) (at ?p ?l))\n      :effect (and (inventory ?p coconut_juice) (empty coconut))\n   )",
            "(:action turn_on_oven\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (not (on oven)))\n      :effect (on oven)\n   )",
            "(:action wrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (not(wrapped coconut)) (not(smashed coconut)) (inventory ?p ?w))\n      :effect (and (wrapped coconut) (wrapped_with coconut ?w) (not(inventory ?p ?w)))\n   )",
            "(:action smash_with_hands\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (wrapped_with coconut bag) (not(smashed coconut)) (not(on oven)) (burnt coconut) (at ?p counter))\n      :effect (smashed coconut)\n   )",
            "(:action separate\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (inventory ?p knife) (not (wrapped coconut)) (smashed coconut) (at towel counter) (at ?p counter))\n      :effect (and (not (inventory ?p coconut)) (inventory ?p coconut_shell) (inventory ?p coconut_meat))\n   )",
            "(:action burn_item\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (on oven) (inventory ?p coconut) (empty coconut) (not(burnt coconut)) (not(smashed coconut)))\n      :effect (burnt coconut)\n   )",
            "(:action peel\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut_meat) (inventory ?p knife) (not(peeled coconut_meat)) (at towel counter) (at ?p counter))\n      :effect (peeled coconut_meat)\n   )"
        ]
    },
    {
        "task": "remove_players",
        "step": [
            "gather_info npc ss",
            "set_dress_code npc ss",
            "set_meeting_location npc ss",
            "create_name npc ss",
            "create_secret npc ss",
            "secret_society_is_ready npc ss",
            "initiate_new_member npc adrian ss",
            "initiate_new_member npc chris ss",
            "initiate_new_member npc lara ss",
            "teach_new_member_secret npc adrian ss",
            "teach_new_member_secret adrian chris ss",
            "teach_new_member_secret adrian lara ss",
            "remove_member anish ss",
            "check_if_cult adrian chris lara npc ss"
        ],
        "desc": [
            "Create a secret or a secret mission. A secret society must have something to protect.",
            "Conduct a proper initiation for you and your closest friend. This should be done before you initiate others. That way, you are sure to come up with a good idea. The initiation is one of the most important parts of the society. It has to be something neither of you would do normally. Candle-lighting sets a serious and official tone, which is always good. Secret names are fun to have.",
            "An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.",
            "Initiate well to do people in the society. In a school, initiate the most brilliant and enthusiastic students that seem like clique-material, and they will motivate and inspire others. But you don't want to have too many members. The more members, the less secret it is. Five to ten should be good.",
            "There needs to be a way to get rid of someone if they become bad for the group or start talking\u2014like blabbing the society's secret. If they do, pretend like that was never the secret, but immediately create a new secret. Put this in the rules.",
            "Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were.",
            "Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.",
            "Think of a name. You and your closest friend should discuss what your secret society should be called."
        ],
        "action": [
            "(:action create_name ; create name for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_name ?sc)))\n      :effect (and (has_name ?sc))\n   )",
            "(:action create_secret ; create secret for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_secret ?sc)))\n      :effect (and (has_secret ?sc) (knows_secret ?p ?sc))\n   )",
            "(:action set_meeting_location ; determine a regular secret meeting location for the society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_location ?sc)))\n      :effect (and (has_location ?sc))\n   )",
            "(:action secret_society_is_ready ; check that all prequisites of the secret society are complete\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (not (society_is_ready ?sc)) (has_name ?sc) (has_dress_code ?sc) (has_location ?sc) (has_info ?p) (has_secret ?sc))\n      :effect (and (society_is_ready ?sc))\n   )",
            "(:action initiate_new_member ; add a new member to secret society\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (in ?p1 ?sc) (is_trusted ?p2 ?sc) (friends ?p1 ?p2) (not (in ?p2 ?sc)))\n      :effect (and (in ?p2 ?sc))\n   )",
            "(:action remove_member ; remove an existing society member due to untrustworthiness\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (is_trusted ?p ?sc)))\n      :effect (and (not (in ?p ?sc)))\n   )",
            "(:action teach_new_member_secret ; once a new member becomes trustworthy, teach them the secret\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (in ?p1 ?sc) (in ?p2 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (knows_secret ?p1 ?sc) (not (knows_secret ?p2 ?sc)))\n      :effect (and (knows_secret ?p2 ?sc))\n   )",
            "(:action check_if_cult ; check if the group is large enough for a cult\n      :parameters (?p1 - player ?p2 - player ?p3 - player ?p4 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (not (equals ?p1 ?p2)) (not (equals ?p1 ?p3)) (not (equals ?p1 ?p4)) (not (equals ?p2 ?p3)) (not (equals ?p2 ?p4)) (not (equals ?p3 ?p4)) (in ?p1 ?sc) (in ?p2 ?sc) (in ?p3 ?sc) (in ?p4 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (is_trusted ?p3 ?sc) (is_trusted ?p4 ?sc) (knows_secret ?p1 ?sc) (knows_secret ?p2 ?sc) (knows_secret ?p3 ?sc) (knows_secret ?p4 ?sc))\n      :effect (and (is_cult ?sc))\n   )\n)",
            "(:action set_dress_code ; determines the dress code for the secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_dress_code ?sc)))\n      :effect (and (has_dress_code ?sc))\n   )",
            "(:action gather_info ; read books to gather information on how to create a secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (has_info ?p)))\n      :effect (and (has_info ?p))\n   )"
        ]
    },
    {
        "task": "create_cult",
        "step": [
            "gather_info npc ss",
            "set_dress_code npc ss",
            "set_meeting_location npc ss",
            "create_name npc ss",
            "create_secret npc ss",
            "secret_society_is_ready npc ss",
            "initiate_new_member npc adrian ss",
            "initiate_new_member adrian lara ss",
            "initiate_new_member adrian liam ss",
            "teach_new_member_secret npc adrian ss",
            "teach_new_member_secret adrian lara ss",
            "teach_new_member_secret adrian liam ss",
            "check_if_cult adrian lara liam npc ss"
        ],
        "desc": [
            "Create a secret or a secret mission. A secret society must have something to protect.",
            "Conduct a proper initiation for you and your closest friend. This should be done before you initiate others. That way, you are sure to come up with a good idea. The initiation is one of the most important parts of the society. It has to be something neither of you would do normally. Candle-lighting sets a serious and official tone, which is always good. Secret names are fun to have.",
            "An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.",
            "Initiate well to do people in the society. In a school, initiate the most brilliant and enthusiastic students that seem like clique-material, and they will motivate and inspire others. But you don't want to have too many members. The more members, the less secret it is. Five to ten should be good.",
            "Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were.",
            "Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.",
            "Think of a name. You and your closest friend should discuss what your secret society should be called."
        ],
        "action": [
            "(:action create_name ; create name for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_name ?sc)))\n      :effect (and (has_name ?sc))\n   )",
            "(:action create_secret ; create secret for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_secret ?sc)))\n      :effect (and (has_secret ?sc) (knows_secret ?p ?sc))\n   )",
            "(:action set_meeting_location ; determine a regular secret meeting location for the society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_location ?sc)))\n      :effect (and (has_location ?sc))\n   )",
            "(:action secret_society_is_ready ; check that all prequisites of the secret society are complete\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (not (society_is_ready ?sc)) (has_name ?sc) (has_dress_code ?sc) (has_location ?sc) (has_info ?p) (has_secret ?sc))\n      :effect (and (society_is_ready ?sc))\n   )",
            "(:action initiate_new_member ; add a new member to secret society\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (in ?p1 ?sc) (is_trusted ?p2 ?sc) (friends ?p1 ?p2) (not (in ?p2 ?sc)))\n      :effect (and (in ?p2 ?sc))\n   )",
            "(:action teach_new_member_secret ; once a new member becomes trustworthy, teach them the secret\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (in ?p1 ?sc) (in ?p2 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (knows_secret ?p1 ?sc) (not (knows_secret ?p2 ?sc)))\n      :effect (and (knows_secret ?p2 ?sc))\n   )",
            "(:action check_if_cult ; check if the group is large enough for a cult\n      :parameters (?p1 - player ?p2 - player ?p3 - player ?p4 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (not (equals ?p1 ?p2)) (not (equals ?p1 ?p3)) (not (equals ?p1 ?p4)) (not (equals ?p2 ?p3)) (not (equals ?p2 ?p4)) (not (equals ?p3 ?p4)) (in ?p1 ?sc) (in ?p2 ?sc) (in ?p3 ?sc) (in ?p4 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (is_trusted ?p3 ?sc) (is_trusted ?p4 ?sc) (knows_secret ?p1 ?sc) (knows_secret ?p2 ?sc) (knows_secret ?p3 ?sc) (knows_secret ?p4 ?sc))\n      :effect (and (is_cult ?sc))\n   )\n)",
            "(:action set_dress_code ; determines the dress code for the secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_dress_code ?sc)))\n      :effect (and (has_dress_code ?sc))\n   )",
            "(:action gather_info ; read books to gather information on how to create a secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (has_info ?p)))\n      :effect (and (has_info ?p))\n   )"
        ]
    },
    {
        "task": "ready_sc",
        "step": [
            "gather_info npc ss",
            "create_secret npc ss",
            "create_name npc ss",
            "set_meeting_location npc ss",
            "set_dress_code npc ss",
            "secret_society_is_ready npc ss"
        ],
        "desc": [
            "Create a secret or a secret mission. A secret society must have something to protect.",
            "An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.",
            "Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were.",
            "Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.",
            "Think of a name. You and your closest friend should discuss what your secret society should be called."
        ],
        "action": [
            "(:action create_name ; create name for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_name ?sc)))\n      :effect (and (has_name ?sc))\n   )",
            "(:action create_secret ; create secret for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_secret ?sc)))\n      :effect (and (has_secret ?sc) (knows_secret ?p ?sc))\n   )",
            "(:action set_meeting_location ; determine a regular secret meeting location for the society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_location ?sc)))\n      :effect (and (has_location ?sc))\n   )",
            "(:action secret_society_is_ready ; check that all prequisites of the secret society are complete\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (not (society_is_ready ?sc)) (has_name ?sc) (has_dress_code ?sc) (has_location ?sc) (has_info ?p) (has_secret ?sc))\n      :effect (and (society_is_ready ?sc))\n   )",
            "(:action set_dress_code ; determines the dress code for the secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_dress_code ?sc)))\n      :effect (and (has_dress_code ?sc))\n   )",
            "(:action gather_info ; read books to gather information on how to create a secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (has_info ?p)))\n      :effect (and (has_info ?p))\n   )"
        ]
    },
    {
        "task": "move_to_bunker",
        "step": [
            "go west npc home market",
            "buy_supplies food npc market",
            "buy_supplies medicine npc market",
            "buy_supplies water npc market",
            "check_supplies food water medicine",
            "go west npc market weapon_market",
            "buy_weapons ammunition npc weapon_market",
            "buy_weapons pistol npc weapon_market",
            "go east npc weapon_market market",
            "buy_supplies heat npc market",
            "go east npc market home",
            "go north npc home bunker1",
            "go north npc bunker1 bunker2",
            "check_weapons pistol ammunition",
            "check_bunker bunker2 npc",
            "outfit_bunker_with_energy_source bunker2 npc heat"
        ],
        "desc": [
            "Purchase enough food, water, medicine, and other supplies. If the comet does hit on land, dust and rock particles flying into our atmosphere will make it too dangerous to go outside for months to years.",
            "Move into a bunker or fortified structure and outfit it with an energy source. An underground bunker isn\u2019t only the best for the time of impact; it will also protect you from environmental hazards after the comet has hit. When the comet hits, dust, soot, and water will shoot up into our atmosphere, making it cold for months to years.",
            "A semi-automatic rifle and a pistol with enough ammunition should be more than enough firepower.",
            "Limit your generator usage and only use it if necessary. Your generator will be a lifesaver for many things while you are in your bunker. You can use it to produce heat, cook food, and power lights. However, because most generators run on fuel, it\u2019s important that you limit its usage because you will likely have a limited amount of fuel in your bunker. If you aren't in a bunker, a generator may still work, but there's a good chance that the main power grid will be down.",
            "Buy weapons and ammunition for after the impact. You may be more concerned with withstanding the destruction of the comet impact itself, but you also need to be conscious of the possible dangers of other people after the dust settles.",
            "Make sure to stock your hide-out with canned food, dried goods, non-perishable foods, and bottled water."
        ],
        "action": [
            "(:action buy_supplies ; buy supplies and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - market) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?item))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action outfit_bunker_with_energy_source ; outfit your bunker with an energy source for heat\n      :parameters (?bk - bunker ?p - player ?es - energy_source) \n      :precondition (and (at ?p ?bk) (find_good_bunker ?bk) (inventory ?es))\n      :effect (and (outfit_bunker_with_heat ?bk))\n   )",
            "(:action check_weapons ; check enough supplies in the inventory\n      :parameters (?ps - pistol ?am - ammunition) \n      :precondition (and (inventory ?ps) (inventory ?am))\n      :effect (and (enough_weapons))\n   )",
            "(:action check_supplies ; check enough supplies in the inventory\n      :parameters (?fd - food ?wt - water ?md - medicine) \n      :precondition (and (inventory ?fd) (inventory ?wt) (inventory ?md))\n      :effect (and (enough_supplies))\n   )",
            "(:action check_bunker ; check if the bunker is good for sheiding\n      :parameters (?bk - bunker ?p - player) \n      :precondition (and (at ?p ?bk) (enough_supplies) (enough_weapons) (has_air_filtration_system ?bk) (has_strong_material ?bk))\n      :effect (and (find_good_bunker ?bk))\n   )",
            "(:action buy_weapons ; buy weapons and put it in the inventory (after buy_supplies)\n      :parameters (?wp - weapon ?p - player ?l1 - weapon_market) \n      :precondition (and (at ?p ?l1) (at ?wp ?l1) (enough_supplies))\n      :effect (and (inventory ?wp))\n   )"
        ]
    },
    {
        "task": "listen_to_astronomers_predictions_and_move",
        "step": [
            "listen_to_astronomers_predictions npc home",
            "move_away npc philly salt_lake home"
        ],
        "desc": [
            "Move away from coastal areas. Because the earth is made up of 71% water, there\u2019s a greater likelihood that the comet will hit a body of water. If this does happen, it could mean that giant tsunamis would be created by the initial impact and they would likely destroy our coastal cities. Additionally, there would be an increase in water vapor entering our atmosphere which would cause heavy rain, which could cause landslides and flooding.",
            "Pay attention to astronomers\u2019 predictions on any possible collisions with earth. NASA currently has astronomers that track comets that are flying in our solar system. As a result, there\u2019s a very good chance they will know if there is a large object about to collide with us. By listening to their predictions, you can develop a real sense of how much time you have to prepare."
        ],
        "action": [
            "(:action move_away ; flight from coastal area to inland area \n      :parameters (?p - player ?c1 - city ?c2 - city ?l1 - location) \n      :precondition (and (in ?p ?c1) (coastal ?c1) (inland ?c2) (listen_to_broadcast ?p ?l1))\n      :effect (and (in ?p ?c2) (not (in ?p ?c1)))\n   )",
            "(:action listen_to_astronomers_predictions ; listen to astronomers predictions on collision with earth\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (has_pc ?p))\n      :effect (and (listen_to_broadcast ?p ?l1))\n   )"
        ]
    },
    {
        "task": "final",
        "step": [
            "go west npc home market",
            "buy_supplies food npc market",
            "buy_supplies medicine npc market",
            "buy_supplies water npc market",
            "check_supplies food water medicine",
            "go west npc market weapon_market",
            "buy_weapons ammunition npc weapon_market",
            "buy_weapons pistol npc weapon_market",
            "go east npc weapon_market market",
            "buy_supplies heat npc market",
            "go east npc market home",
            "go north npc home bunker1",
            "go north npc bunker1 bunker2",
            "check_weapons pistol ammunition",
            "check_bunker bunker2 npc",
            "outfit_bunker_with_energy_source bunker2 npc heat",
            "listen_to_astronomers_predictions npc bunker2",
            "enjoylife bunker2 npc",
            "connect_through_social_media_with_family bunker2 npc family philly",
            "move_away npc philly salt_lake bunker2"
        ],
        "desc": [
            "Move away from coastal areas. Because the earth is made up of 71% water, there\u2019s a greater likelihood that the comet will hit a body of water. If this does happen, it could mean that giant tsunamis would be created by the initial impact and they would likely destroy our coastal cities. Additionally, there would be an increase in water vapor entering our atmosphere which would cause heavy rain, which could cause landslides and flooding.",
            "Purchase enough food, water, medicine, and other supplies. If the comet does hit on land, dust and rock particles flying into our atmosphere will make it too dangerous to go outside for months to years.",
            "Don\u2019t believe everything you hear. Early reporting is notoriously inaccurate at times, so wait it out until you hear unified reports.",
            "Move into a bunker or fortified structure and outfit it with an energy source. An underground bunker isn\u2019t only the best for the time of impact; it will also protect you from environmental hazards after the comet has hit. When the comet hits, dust, soot, and water will shoot up into our atmosphere, making it cold for months to years.",
            "A semi-automatic rifle and a pistol with enough ammunition should be more than enough firepower.",
            "Isolation has multiple negative effects on your mental health, so having people with you is a good idea if you want to stay mentally healthy.",
            "Limit your generator usage and only use it if necessary. Your generator will be a lifesaver for many things while you are in your bunker. You can use it to produce heat, cook food, and power lights. However, because most generators run on fuel, it\u2019s important that you limit its usage because you will likely have a limited amount of fuel in your bunker. If you aren't in a bunker, a generator may still work, but there's a good chance that the main power grid will be down.",
            "Pay attention to astronomers\u2019 predictions on any possible collisions with earth. NASA currently has astronomers that track comets that are flying in our solar system. As a result, there\u2019s a very good chance they will know if there is a large object about to collide with us. By listening to their predictions, you can develop a real sense of how much time you have to prepare.",
            "Buy weapons and ammunition for after the impact. You may be more concerned with withstanding the destruction of the comet impact itself, but you also need to be conscious of the possible dangers of other people after the dust settles.",
            "Make sure to stock your hide-out with canned food, dried goods, non-perishable foods, and bottled water."
        ],
        "action": [
            "(:action buy_supplies ; buy supplies and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - market) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?item))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action listen_to_astronomers_predictions ; listen to astronomers predictions on collision with earth\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (has_pc ?p))\n      :effect (and (listen_to_broadcast ?p ?l1))\n   )",
            "(:action outfit_bunker_with_energy_source ; outfit your bunker with an energy source for heat\n      :parameters (?bk - bunker ?p - player ?es - energy_source) \n      :precondition (and (at ?p ?bk) (find_good_bunker ?bk) (inventory ?es))\n      :effect (and (outfit_bunker_with_heat ?bk))\n   )",
            "(:action connect_through_social_media_with_family ; let other family members know you are safe\n      :parameters (?bk - bunker ?p - player ?f - player ?c - city) \n      :precondition (and (at ?p ?bk) (has_pc ?p) (enjoylife ?p ?bk) (not(at ?f ?bk)) (in ?p ?c) (not (in ?f ?c)) )\n      :effect (and (family_memebers_know_you_are_safe))\n   )\n   \n\n)",
            "(:action move_away ; flight from coastal area to inland area \n      :parameters (?p - player ?c1 - city ?c2 - city ?l1 - location) \n      :precondition (and (in ?p ?c1) (coastal ?c1) (inland ?c2) (listen_to_broadcast ?p ?l1))\n      :effect (and (in ?p ?c2) (not (in ?p ?c1)))\n   )",
            "(:action enjoylife ; after all preparation, enjoy life in a bunker\n      :parameters (?bk - bunker ?p - player ) \n      :precondition (and (at ?p ?bk) (outfit_bunker_with_heat ?bk))\n      :effect (and (enjoylife ?p ?bk))\n   )",
            "(:action check_weapons ; check enough supplies in the inventory\n      :parameters (?ps - pistol ?am - ammunition) \n      :precondition (and (inventory ?ps) (inventory ?am))\n      :effect (and (enough_weapons))\n   )",
            "(:action check_supplies ; check enough supplies in the inventory\n      :parameters (?fd - food ?wt - water ?md - medicine) \n      :precondition (and (inventory ?fd) (inventory ?wt) (inventory ?md))\n      :effect (and (enough_supplies))\n   )",
            "(:action check_bunker ; check if the bunker is good for sheiding\n      :parameters (?bk - bunker ?p - player) \n      :precondition (and (at ?p ?bk) (enough_supplies) (enough_weapons) (has_air_filtration_system ?bk) (has_strong_material ?bk))\n      :effect (and (find_good_bunker ?bk))\n   )",
            "(:action buy_weapons ; buy weapons and put it in the inventory (after buy_supplies)\n      :parameters (?wp - weapon ?p - player ?l1 - weapon_market) \n      :precondition (and (at ?p ?l1) (at ?wp ?l1) (enough_supplies))\n      :effect (and (inventory ?wp))\n   )"
        ]
    },
    {
        "task": "put CellPhone1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 cellphone1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts cellphone 1 in garbage can 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up book 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone2 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone2 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 cellphone2 bed1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 puts cellphone 2 in bed 1.",
            "Agent 1 picks up cellphone 2 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 keychain1 desk1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 creditcard1 bed1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in bed 1",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow2 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow2 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 pillow2 bed1"
        ],
        "desc": [
            "Agent 1 puts pillow 2 in bed 1.",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 picks up pillow 2 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 cd1 bed1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in bed 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 puts laptop 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 watch1 bed1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 puts watch 1 in bed 1.",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up book 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pencil1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pencil 1 in drawer 1.",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 keychain1 drawer1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in drawer 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 book1 bed1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in bed 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts book 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 cd1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts CD 1 in drawer 1.",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 keychain1 bed1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in bed 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book2 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book2 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book2 sofa1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts book 2 in sofa 1.",
            "Agent 1 picks up book 2 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 pen1 desk1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts pen 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone2 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone2 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 cellphone2 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts cellphone 2 in desk 1.",
            "Agent 1 picks up cellphone 2 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 2",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard2 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard2 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard2 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 2 in sofa 1",
            "Agent 1 picks up credit card 2 from desk",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 pen1 bed1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in bed 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 pen1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pen 1 in desk 1.",
            "Agent 1 picks up pen 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 2",
            "Agent 1 puts cellphone 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 keychain1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in garbage can",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up watch 1 from desk 2",
            "Agent 1 puts watch 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 cd1 drawer1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in drawer 1.",
            "Agent 1 picks up CD 1 from drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up watch 1 from desk 2",
            "Agent 1 puts watch 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 keychain1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts keychain 1 in drawer 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 pen1 bed1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pen 1 in bed 1.",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts cellphone 1 in garbage can 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in sofa 1.",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 picks up pillow 1 from sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 watch1 bed1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 puts watch 1 in bed 1.",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk1",
            "putobjectinreceptacle agent1 pencil1 desk1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in desk 1.",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard2 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard2 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 creditcard2 desk1"
        ],
        "desc": [
            "Agent 1 picks up credit card 2 from sofa",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts credit card 2 in desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 keychain1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in garbage can",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts CD 1 in desk 1.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 watch1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in drawer 1.",
            "Agent 1 moves from desk 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 laptop1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in garbage can 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts CD 1 in desk 1.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts CD 1 in desk 1.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in garbage can 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 pencil1 desk1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pencil 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 pencil1 desk1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 cd1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts CD 1 in the garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 creditcard1 drawer1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in drawer 1",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 alarmclock1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts alarm clock 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 picks up pillow 1 from sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain2 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain2 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain2 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 2 in sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up keychain 2 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 pencil1 desk1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts watch 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 cd1 drawer1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in drawer 1.",
            "Agent 1 picks up CD 1 from drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 watch1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 2",
            "Agent 1 puts watch 1 in drawer 1.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 bed1",
            "putobjectinreceptacle agent1 pen1 bed1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in bed 1.",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up book 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 pillow1 drawer1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in drawer 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts book 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 keychain1 desk1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts keychain 1 in desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan2",
            "gotolocation agent1 garbagecan2 garbagecan1",
            "putobjectinreceptacle agent1 pencil1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in garbage can 1",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from garbagecan 2 to garbagecan"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts pen 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 pen1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from drawer 1 to desk 2",
            "Agent 1 picks up pen 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts cellphone 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts cellphone 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box2 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 puts pen 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts cellphone 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts cellphone 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer2",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer2",
            "gotolocation agent1 drawer2 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 moves from desk 1 to drawer 2",
            "Agent 1 moves from drawer 2 to box 2",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts credit card 1 in box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 laptop1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts laptop 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 laptop1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts laptop 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts laptop 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts pen 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 keychain1 box3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts watch 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts cellphone 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 pencil1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 puts pencil 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa3 sofa2",
            "pickupobjectnoreceptacle agent1 laptop1 sofa2",
            "gotolocation agent1 sofa2 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from sofa 2",
            "Agent 1 moves from sofa 3 to sofa 2",
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 puts pen 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk3 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 picks up CD 1 from desk 2",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 moves from desk 3 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts laptop 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 pen1 box3"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 puts pen 1 in box 3.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa2",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa2",
            "gotolocation agent1 sofa2 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 puts credit card 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 puts cellphone 1 in box 1.",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 watch1 box3"
        ],
        "desc": [
            "Agent 1 puts watch 1 in box 3.",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts cellphone 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 watch1 box3"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in box 3.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 1.",
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer3 drawer2",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer2",
            "gotolocation agent1 drawer2 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from drawer 3 to drawer 2",
            "Agent 1 puts cellphone 1 in box 1.",
            "Agent 1 picks up cellphone 1 from drawer 2",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 cd1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts CD 1 in box 3.",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 cd1 box3"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 3.",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 alarmclock1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts alarm clock 1 in box 2",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with three object",
        "step": [
            "gotolocation agent1 bed1 sofa2",
            "pickupobjectnoreceptacle agent1 pillow1 sofa2",
            "gotolocation agent1 sofa2 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from sofa 2",
            "Agent 1 moves from bed 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 alarmclock1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts alarm clock 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk3 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 3 to desk 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 1.",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in box 3.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen2 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen2 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 pen2 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts pen 2 in box 3.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pen 2 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 book1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in box 3.",
            "Agent 1 moves from drawer 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk2",
            "pickupobjectnoreceptacle agent1 keychain1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 puts keychain 1 in box 1",
            "Agent 1 moves from sofa 1 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box3 with three object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box3",
            "putobjectinreceptacle agent1 pillow1 box3"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 3.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch2 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch2 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch2 box2"
        ],
        "desc": [
            "Agent 1 puts watch 2 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up watch 2 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box3 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 pen1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts pen 1 in box 3.",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 puts keychain 1 in box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 pen1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 puts pen 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box2 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 puts credit card 1 in box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box3",
            "putobjectinreceptacle agent1 laptop1 box3"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in box 3.",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up book 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa3 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 3 to garbage can",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from drawer 2 to bed 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 puts watch 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow2 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow2 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow2 sofa1"
        ],
        "desc": [
            "Agent 1 puts pillow 2 in sofa 1.",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up pillow 2 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 cd1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 puts CD 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone2 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 cellphone2 sofa3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 2 from desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts cellphone 2 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts CD 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from desk 2 to drawer 1",
            "Agent 1 puts pen 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts book 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in sofa 3.",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch2 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 watch2 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch2 sofa1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up watch 2 from desk 1",
            "Agent 1 puts watch 2 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil2 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil2 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 pencil2 sofa1"
        ],
        "desc": [
            "Agent 1 puts pencil 2 in sofa 1.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up pencil 2 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from sofa 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 cd2 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cd2 sofa3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up CD 2 from drawer 1",
            "Agent 1 puts CD 2 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard2 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 creditcard2 sofa3"
        ],
        "desc": [
            "Agent 1 picks up credit card 2 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 puts credit card 2 in sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 puts cellphone 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cd1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts CD 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts watch 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts book 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from bed 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain2 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain2 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 keychain2 sofa3"
        ],
        "desc": [
            "Agent 1 picks up keychain 2 from drawer",
            "Agent 1 puts keychain 2 in sofa 3",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts book 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 alarmclock1 sofa3"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 3",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 laptop1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 puts laptop 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil2 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pencil2 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pencil 2 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up pencil 2 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts watch 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 puts pen 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from desk 2",
            "Agent 1 moves from bed 1 to desk 2",
            "Agent 1 moves from desk 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa3 sofa2",
            "pickupobjectnoreceptacle agent1 pillow1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 moves from sofa 3 to sofa 2",
            "Agent 1 picks up pillow 1 from sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 pillow1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pillow 1 in sofa 2.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in sofa 1.",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 puts watch 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 alarmclock1 sofa3"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 3",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD2 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd2 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cd2 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts CD 2 in sofa 2.",
            "Agent 1 picks up CD 2 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts pen 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from bed 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts pen 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts pencil 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Bed1 Do not move Laptop1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 cellphone1 bed1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 puts cellphone 1 in bed 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Drawer1 Do not move Watch1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Drawer1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 next to Desk2 Do not move CD1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 alarmclock1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts alarm clock 1 in desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 next to Drawer1 Do not move Pencil2",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pencil1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pencil 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Desk1 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 desk1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 puts CD 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move Book1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Drawer2 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 cd1 drawer2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Desk1 Do not move Book2",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up book 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Bed1 Do not move Laptop2",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 laptop1 bed1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in bed 1.",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to GarbageCan1 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 pillow1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in garbage can 1",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Bed1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 creditcard1 bed1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in bed 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Sofa1 Do not move Laptop1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Drawer1 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 keychain1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts keychain 1 in drawer 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move Laptop1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Sofa1 Do not move CreditCard2",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Desk2 Do not move Pencil1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 keychain1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 puts keychain 1 in desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Desk1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Drawer1 Do not move Watch1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Drawer1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Sofa1 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Drawer2 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 keychain1 drawer2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in drawer 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Sofa1 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Sofa2 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Desk1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Sofa1 Do not move CellPhone2",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 next to Sofa1 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 next to Drawer1 Do not move Book1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pencil1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pencil 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 next to Sofa1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Desk1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 keychain1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts keychain 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to GarbageCan1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in garbage can 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Drawer1 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 cellphone1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Bed1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 keychain1 bed1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts keychain 1 in bed 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 next to Drawer2 Do not move Pen1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 pencil1 drawer2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts watch 1 in desk 1.",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Drawer1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 drawer1",
            "putobjectinreceptacle agent1 pillow1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts pillow 1 in drawer 1.",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 next to GarbageCan1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 watch1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in garbage can 1",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts cellphone 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Desk2 Do not move CD1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 keychain1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 puts keychain 1 in desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Bed2 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 bed2",
            "putobjectinreceptacle agent1 pillow1 bed2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in bed 2.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to bed 2",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Bed2 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 bed2",
            "putobjectinreceptacle agent1 pillow1 bed2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in bed 2.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to bed 2",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 next to GarbageCan2 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 garbagecan2",
            "putobjectinreceptacle agent1 pencil1 garbagecan2"
        ],
        "desc": [
            "Agent 1 moves from garbagecan 1 to garbagecan",
            "Agent 1 puts pencil 1 in garbage can 2",
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 picks up pencil 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Desk2 Do not move Laptop1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 pen1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pen 1 in desk 2.",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts laptop 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to GarbageCan1 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to GarbageCan1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Drawer1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Bed1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 pillow1 bed1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts pillow 1 in bed 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Sofa1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to GarbageCan1 Do not move CD1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts cellphone 1 in garbage can 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Desk1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to GarbageCan1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Drawer1 Do not move Pen1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 creditcard1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts credit card 1 in drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Sofa1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Desk1 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 pen1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts pen 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 next to Drawer1 Do not move Watch1",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 pencil1 drawer1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in drawer 1.",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk2 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 cellphone1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Drawer1 Do not move Book1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts laptop 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Drawer1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Desk2 Do not move Book1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 pen1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pen 1 in desk 2.",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Book2",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Laptop1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Bed1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 keychain1 bed1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts keychain 1 in bed 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to GarbageCan1 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 laptop1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in garbage can 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Bed2 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 bed2",
            "putobjectinreceptacle agent1 laptop1 bed2"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in bed 2.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to bed 2",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk2 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 cellphone1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Desk1 Do not move Book1",
        "step": [
            "gotolocation agent1 desk1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 puts CD 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Sofa2 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Drawer2 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 cd1 drawer2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Drawer1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Book2",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Bed1 Do not move Book1",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 bed1",
            "putobjectinreceptacle agent1 pen1 bed1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 puts pen 1 in bed 1.",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 next to Drawer1 Do not move Watch1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 alarmclock1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts alarm clock 1 in drawer 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to GarbageCan1 Do not move CD1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 laptop1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in garbage can 1",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from sofa 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Drawer2 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 pen1 drawer2"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Drawer1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Drawer1 Do not move CD1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Desk2 Do not move CD1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 laptop1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts laptop 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Desk2 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 creditcard1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts credit card 1 in desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to GarbageCan1 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 pillow1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in garbage can 1",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Sofa1 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Desk2 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 cd1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 puts CD 1 in desk 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Drawer2 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 creditcard1 drawer2"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in drawer 2",
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Sofa1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Drawer2 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 cd1 drawer2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Desk1 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Drawer1 Do not move CD1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 cellphone1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Desk1 Do not move Book1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts laptop 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 pen1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in garbage can 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Desk2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 desk2",
            "putobjectinreceptacle agent1 laptop1 desk2"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in desk 2.",
            "Agent 1 moves from bed 1 to desk 2",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box2 with more object",
        "step": [
            "gotolocation agent1 desk2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 moves from desk 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with more object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Desk2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 desk2",
            "putobjectinreceptacle agent1 keychain1 desk2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 2",
            "Agent 1 puts keychain 1 in desk 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Drawer3 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 drawer3",
            "putobjectinreceptacle agent1 watch1 drawer3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in drawer 3.",
            "Agent 1 moves from drawer 1 to drawer 3",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with more object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts watch 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Drawer1 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box2 with more object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 desk3 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 3 to desk 2",
            "Agent 1 puts CD 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 watch1 bed1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 puts watch 1 in bed 1.",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 keychain1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts keychain 1 in drawer 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to drawer 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with more object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Desk5 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 desk5",
            "putobjectinreceptacle agent1 pen1 desk5"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to desk 5",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in desk 5."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 desk2",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 alarmclock1 desk1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in desk 1",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Desk2 with more object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 desk2",
            "putobjectinreceptacle agent1 laptop1 desk2"
        ],
        "desc": [
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to desk 2",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Drawer3 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 drawer3",
            "putobjectinreceptacle agent1 watch1 drawer3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in drawer 3.",
            "Agent 1 moves from drawer 1 to drawer 3",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 1.",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Desk3 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 desk3",
            "putobjectinreceptacle agent1 watch1 desk3"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 3",
            "Agent 1 puts watch 1 in desk 3.",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box2 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with more object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with more object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with more object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone2 to Bed1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone2 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 cellphone2 bed1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts cellphone 2 in bed 1.",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 picks up cellphone 2 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Sofa3 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts watch 1 in sofa 3.",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with more object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 puts book 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard2 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard2 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 creditcard2 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts credit card 2 in box 2",
            "Agent 1 picks up credit card 2 from desk",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to GarbageCan2 with more object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 garbagecan2",
            "putobjectinreceptacle agent1 keychain1 garbagecan2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts keychain 1 in garbage can",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with more object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Desk4 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 desk4",
            "putobjectinreceptacle agent1 pen1 desk4"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in desk 4.",
            "Agent 1 moves from drawer 1 to desk 4"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 laptop1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in desk 1.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up laptop 1 from desk 2",
            "Agent 1 moves from drawer 1 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Drawer1 with more object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 sofa3 sofa2",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from sofa 3 to sofa 2",
            "Agent 1 picks up cellphone 1 from sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 drawer2",
            "putobjectinreceptacle agent1 cellphone1 drawer2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts cellphone 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Sofa3 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 pillow1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts pillow 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer2",
            "putobjectinreceptacle agent1 book1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts book 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to sofa 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with more object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Desk4 with more object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 desk4",
            "putobjectinreceptacle agent1 cd1 desk4"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to desk 4",
            "Agent 1 puts CD 1 in desk 4."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 alarmclock1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 puts alarm clock 1 in box 2",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book2 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 book2 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 book2 box2"
        ],
        "desc": [
            "Agent 1 puts book 2 in box 2.",
            "Agent 1 picks up book 2 from bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts laptop 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Drawer1 with more object",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 cd1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts CD 1 in drawer 1.",
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with more object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts CD 1 in sofa 2.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Desk6 with more object",
        "step": [
            "gotolocation agent1 desk2 drawer2",
            "pickupobjectnoreceptacle agent1 book1 drawer2",
            "gotolocation agent1 drawer2 desk6",
            "putobjectinreceptacle agent1 book1 desk6"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 6.",
            "Agent 1 moves from desk 2 to drawer 2",
            "Agent 1 picks up book 1 from drawer 2",
            "Agent 1 moves from drawer 2 to desk 6"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 watch1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts watch 1 in garbage can 1",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard2 to Bed1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard2 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 creditcard2 bed1"
        ],
        "desc": [
            "Agent 1 puts credit card 2 in bed 1",
            "Agent 1 picks up credit card 2 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts pen 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Desk2 with more object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk2",
            "putobjectinreceptacle agent1 cd1 desk2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in desk 2.",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Drawer1 with more object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 drawer2",
            "putobjectinreceptacle agent1 cellphone1 drawer2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 puts cellphone 1 in drawer 2.",
            "Agent 1 moves from bed 1 to drawer 2",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Desk3 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 desk3",
            "putobjectinreceptacle agent1 laptop1 desk3"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to desk 3",
            "Agent 1 puts laptop 1 in desk 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 creditcard1 bed1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in bed 1",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 drawer2",
            "putobjectinreceptacle agent1 alarmclock1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to drawer 2",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 puts alarm clock 1 in drawer 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with more object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 keychain1 desk2",
            "gotolocation agent1 desk2 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from desk 2 to sofa 2",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from drawer 1 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain2 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 desk3 desk1",
            "pickupobjectnoreceptacle agent1 keychain2 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 keychain2 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from desk 3 to desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up keychain 2 from desk",
            "Agent 1 puts keychain 2 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 cellphone1 bed1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts cellphone 1 in bed 1.",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to GarbageCan2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 garbagecan2",
            "putobjectinreceptacle agent1 pillow1 garbagecan2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts pillow 1 in garbage can 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts watch 1 in sofa 2.",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in desk 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 desk2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to bed 1",
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Desk3 with more object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk3",
            "putobjectinreceptacle agent1 cd1 desk3"
        ],
        "desc": [
            "Agent 1 puts CD 1 in desk 3.",
            "Agent 1 moves from desk 3 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 desk3 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 bed1",
            "putobjectinreceptacle agent1 pencil1 bed1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in bed 1.",
            "Agent 1 moves from desk 3 to garbage can",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box1 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 bed2 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts CD 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 cellphone1 bed1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 puts cellphone 1 in bed 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 creditcard1 bed1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in bed 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from sofa 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 book1 bed1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 puts book 1 in bed 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 laptop1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in garbage can 1",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to GarbageCan2 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 garbagecan2",
            "putobjectinreceptacle agent1 book1 garbagecan2"
        ],
        "desc": [
            "Agent 1 puts book 1 in garbage can 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 watch1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in garbage can 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 alarmclock1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts alarm clock 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts watch 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 desk2",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 alarmclock1 box1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in box 1",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 moves from desk 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone2 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone2 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 cellphone2 box1"
        ],
        "desc": [
            "Agent 1 puts cellphone 2 in box 1.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up cellphone 2 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book2 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 book2 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 book2 box2"
        ],
        "desc": [
            "Agent 1 puts book 2 in box 2.",
            "Agent 1 picks up book 2 from bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 laptop1 desk2",
            "gotolocation agent1 desk2 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 2",
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 picks up laptop 1 from desk 2",
            "Agent 1 moves from drawer 1 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 alarmclock1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts alarm clock 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from sofa 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain2 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk3 desk1",
            "pickupobjectnoreceptacle agent1 keychain2 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 keychain2 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 3 to desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts keychain 2 in box 2",
            "Agent 1 picks up keychain 2 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts laptop 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk3 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 picks up CD 1 from desk 2",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 moves from desk 3 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa3 sofa2",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa2",
            "gotolocation agent1 sofa2 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to sofa 2",
            "Agent 1 picks up cellphone 1 from sofa 2",
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 moves from sofa 2 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 alarmclock1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts alarm clock 1 in box 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard2 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard2 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 creditcard2 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 2 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up credit card 2 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts cellphone 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Bed1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 book1 bed1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in bed 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts watch 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from bed 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 puts cellphone 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 alarmclock1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 puts alarm clock 1 in box 2",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk4 desk3",
            "pickupobjectnoreceptacle agent1 pen1 desk3",
            "gotolocation agent1 desk3 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from desk 4 to desk 3",
            "Agent 1 moves from desk 3 to box 1",
            "Agent 1 picks up pen 1 from desk 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Drawer2 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 drawer2",
            "putobjectinreceptacle agent1 pencil1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 moves from desk 1 to drawer 2",
            "Agent 1 puts pencil 1 in drawer 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk2 drawer2",
            "pickupobjectnoreceptacle agent1 book1 drawer2",
            "gotolocation agent1 drawer2 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to drawer 2",
            "Agent 1 moves from drawer 2 to box 2",
            "Agent 1 picks up book 1 from drawer 2",
            "Agent 1 puts book 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 puts book 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from desk 2 to bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 keychain1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from drawer 1 to desk 2",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from box 3 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 moves from desk 1 to box 4",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts alarm clock 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 box1",
            "pickupobjectnoreceptacle agent1 alarmclock1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 picks up alarm clock 1 from box"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 alarmclock1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from bed 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 laptop1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 puts laptop 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from drawer 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 box4",
            "pickupobjectnoreceptacle agent1 book1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 cellphone2 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 cellphone2 sofa3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 2 from desk 1",
            "Agent 1 moves from sofa 2 to box 4",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 puts cellphone 2 in sofa 3.",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 picks up book 1 from box 4"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from box 2",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 desk3",
            "pickupobjectnoreceptacle agent1 cd1 desk3",
            "gotolocation agent1 desk3 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from desk 3",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from desk 3 to sofa 2",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 moves from sofa 2 to desk 3",
            "Agent 1 puts CD 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from box 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 2 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 picks up pencil 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box2",
            "pickupobjectnoreceptacle agent1 alarmclock1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 2 to garbage can",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 puts alarm clock 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 alarmclock1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 puts alarm clock 1 in sofa 3",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 puts watch 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 box3",
            "pickupobjectnoreceptacle agent1 alarmclock1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from box 3 to garbage can",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 pillow1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in sofa 2.",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 picks up book 1 from box 2",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 picks up book 1 from box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa3 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 picks up cellphone 1 from sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 moves from sofa 3 to box 3",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer2 box2",
            "pickupobjectnoreceptacle agent1 alarmclock1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from drawer 2 to box 2",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from box 3 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk1 box3",
            "pickupobjectnoreceptacle agent1 alarmclock1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from box 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa1 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 puts pencil 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 box4",
            "pickupobjectnoreceptacle agent1 book1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 4 to garbage can",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 picks up book 1 from box 4",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 3",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 3 to garbage can",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from box 3 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 laptop1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 puts laptop 1 in sofa 3.",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 pillow1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 puts pillow 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from box 2 to sofa 3",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 picks up book 1 from box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from box 4 to garbage can",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 box2",
            "pickupobjectnoreceptacle agent1 alarmclock1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 2",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 puts pen 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box4",
            "pickupobjectnoreceptacle agent1 book1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from box 4",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 moves from box 3 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 4",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts pencil 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 puts pen 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up pen 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 box1",
            "pickupobjectnoreceptacle agent1 alarmclock1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts alarm clock 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 garbagecan1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from drawer 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 puts watch 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2",
            "gotolocation agent1 sofa2 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 moves from sofa 2 to box 3",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from desk 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed1 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from box 2 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2",
            "gotolocation agent1 sofa2 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 puts cellphone 1 in sofa 2.",
            "Agent 1 picks up cellphone 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from desk 1 to box 4",
            "Agent 1 picks up pencil 1 from box 4"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk2 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from desk 2 to box 4",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 pillow1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pillow 1 in sofa 3.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 pencil1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up pencil 1 from box 1",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from box 4 to garbage can",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 puts watch 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up pen 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3",
            "gotolocation agent1 sofa3 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to box 3",
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from box 3 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD2 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd2 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 cd2 sofa3"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 puts CD 2 in sofa 3.",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 3 to garbage can",
            "Agent 1 picks up CD 2 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 laptop1 sofa3",
            "gotolocation agent1 sofa3 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts laptop 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pencil 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 puts laptop 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 garbagecan1 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from box 3 to garbage can",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box1",
            "pickupobjectnoreceptacle agent1 pencil1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 puts cellphone 1 in sofa 2.",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up pencil 1 from box 1",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa1 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer2 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cd1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 puts CD 1 in sofa 3.",
            "Agent 1 moves from drawer 2 to box 2",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from box 2 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 moves from sofa 2 to box 2",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 box4",
            "pickupobjectnoreceptacle agent1 book1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from desk 2 to box 4",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts watch 1 in sofa 2.",
            "Agent 1 picks up book 1 from box 4",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk2 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from desk 2 to box 3",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 puts laptop 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from drawer 2 to box 3",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 alarmclock1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from bed 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from desk 2 to box 4",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts cellphone 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk3 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to desk 2",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 moves from desk 2 to sofa 2",
            "Agent 1 picks up CD 1 from desk 2",
            "Agent 1 moves from desk 3 to box 2",
            "Agent 1 picks up book 1 from box 2",
            "Agent 1 puts CD 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from box 2 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 moves from bed 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from sofa 3 to garbage can",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up pencil 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 puts laptop 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    }
]