[
    "(:action ask ; Request an item and update inventory\n  :parameters (?npc - person ?item - object ?loc - location)\n  :precondition (and (at ?npc ?loc) (for_sale ?item ?loc) (not (inventory ?npc ?item)))\n  :effect (and (purchased ?item) (inventory ?npc ?item))",
    "(:action find ; Find an object and change its location\n  :parameters (?agent - agent ?object - object ?from_location - location ?to_location - location)\n  :precondition (and (at ?agent ?from_location) (in_location ?object ?from_location))\n  :effect (and (in_location ?object ?to_location) (not (in_location ?object ?from_location))",
    "(:action fill\n    :parameters (?p - player ?container - container ?substance - substance ?loc - location)\n    :precondition (and (at ?p ?loc) (on_countertop ?container) (in_pipes ?substance))\n    :effect (and (fuller ?container) (emptier ?substance) (out_of_faucet ?substance))",
    "(:action place\n    :parameters (?p - player ?container - container ?loc - location)\n    :precondition (and (fuller ?container))\n    :effect (and (at ?container ?loc))",
    "(:action fill_and_place\n    :parameters (?p - player ?container - container ?substance - substance ?loc - location)\n    :precondition (and (at ?p ?loc) (on_countertop ?container) (in_pipes ?substance))\n    :effect (and (fuller ?container) (emptier ?substance) (out_of_faucet ?substance) (at ?container ?loc))",
    "(:action add ; Add an item to a container and update inventory status\n :parameters (?agent - entity ?item - object ?container - receptacle)\n :precondition (and (has ?agent ?item) (can_receive ?container))\n :effect (and (in ?item ?container) (not (has ?agent ?item))",
    "(:action prune\n    :parameters (?p - player ?moss - fairy_moss ?cont - container ?loc - location ?water - resource)\n    :precondition (and\n        (at ?p ?loc)\n        (or\n            (and (for_sale ?moss ?loc) (not (in_inventory ?p ?moss)))\n            (and (in_inventory ?p ?moss) (filled ?cont ?water) (contains ?cont ?moss))\n            (and (stored ?cont ?loc) (not (on_counter ?cont)))\n        )\n    )\n    :effect (and\n        (or\n            (and (in_inventory ?p ?moss) (not (for_sale ?moss ?loc))"
]