[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:place\n\n\nAction sets that need to be merged:\n(:action place-ingredients\n    :parameters (?b - bananas ?s - sorbet ?y - yogurt ?bl - blender)\n    :precondition (and (inventory ?b) (inventory ?s) (inventory ?y) (empty ?bl))\n    :effect (and (in ?b ?bl) (in ?s ?bl) (in ?y ?bl) (not (inventory ?b)) (not (inventory ?s)) (not (inventory ?y)) (not (empty ?bl)))\n)\n\n\n(:action pour-into-glass\n    :parameters (?bl - blender ?g - glass)\n    :precondition (and (smooth ?bl) (power ?bl off) (empty ?g))\n    :effect (and (in smoothie ?g) (not (smooth ?bl)) (empty ?bl) (not (empty ?g)))\n)\n\n\n(:action garnish-glass\n    :parameters (?g - glass ?st - strawberry)\n    :precondition (and (in smoothie ?g) (inventory ?st))\n    :effect (and (garnished ?g) (not (inventory ?st)))\n)\n```\n\n### Explanation:\n- **place-ingredients**: This action places bananas, sorbet, and yogurt into the blender. Preconditions ensure that the ingredients are in the player's inventory and the blender is empty. Effects move the ingredients into the blender.\n- **blend_into_texture**: This action blends the ingredients into a smooth texture. Preconditions check that the ingredients are in the blender and the blender is off. Effects turn the blender on and make the mixture smooth.\n- **add-rum-and-blend**: This action adds rum to the blender and blends again. Preconditions ensure the player has rum, the mixture is smooth, and the blender is off. Effects add rum to the blender, make it alcoholic, and turn the blender on.\n- **pour-into-glass**: This action pours the smoothie into a glass. Preconditions check that the mixture is smooth, the blender is off, and the glass is empty. Effects pour the smoothie into the glass and empty the blender.\n- **garnish-glass**: This action garnishes the glass with a strawberry. Preconditions ensure the glass contains the smoothie and the player has a strawberry. Effects garnish the glass and remove the strawberry from the inventory.\n\nThese actions follow the structure and logic provided in the example to capture the steps of making a Banana Strawberry Rum Smoothie.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:blend\n\n\nAction sets that need to be merged:\n(:action blend_into_texture\n    :parameters (?bl - blender)\n    :precondition (and (in bananas ?bl) (in sorbet ?bl) (in yogurt ?bl) (not (power ?bl on)))\n    :effect (and (smooth ?bl) (power ?bl on) (not (power ?bl off)))\n)\n\n\n(:action add-rum-and-blend\n    :parameters (?r - rum ?bl - blender)\n    :precondition (and (inventory ?r) (smooth ?bl) (power ?bl off))\n    :effect (and (in ?r ?bl) (not (inventory ?r)) (alcoholic ?bl) (power ?bl on) (not (power ?bl off)))\n)\n\n\nThe actions after the merger are:"
]