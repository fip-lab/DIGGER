[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:clean\n\n\nAction sets that need to be merged:\n(:action dust_room\n  :parameters (?rug - rug ?p - player ?room - location)\n  :precondition (and (at ?rug ?room) (at ?p ?room))\n  :effect (dust_free ?room)\n)\n```\n\n### Step 3: empty_trash basket1 trash_bag1\n```pddl\n\n(:action empty_trash\n  :parameters (?basket - basket ?trash_bag - trash_bag ?p - player)\n  :precondition (and (at ?basket around_house) (at ?trash_bag around_house) (at ?p around_house) (full ?basket))\n  :effect (and (not (full ?basket)) (full ?trash_bag) (not (at ?basket around_house)) (at ?basket ?trash_bag))\n)\n```\n\n### Step 4: clean_surface tv cleaner1\n```pddl\n\n(:action clean_surface\n  :parameters (?surface - tv ?cleaner - cleaner ?p - player)\n  :precondition (and (at ?surface around_house) (at ?cleaner around_house) (at ?p around_house))\n  :effect (and (clean ?surface) (used ?cleaner))\n)\n```\n\n### Step 5: pickup_throw_rugs rug1\n```pddl\n\n(:action clean_room\n  :parameters (?npc - npc ?room - basement ?p - player)\n  :precondition (and (at ?npc ?room) (at ?p ?room))\n  :effect (clean ?room)\n)\n```\n\nThese actions should capture the necessary steps and conditions for efficiently cleaning a home based on the provided descriptions and entity states.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:pickup\n\n\nAction sets that need to be merged:\n(:action pickup_items\n  :parameters (?item - item ?basket - basket ?p - player)\n  :precondition (and (at ?item around_house) (at ?p around_house))\n  :effect (and (inventory ?p ?item) (not (at ?item around_house)) (at ?item ?basket))\n)\n```\n\n### Step 2: get_dust_room rug1\n```pddl\n\n(:action pickup_throw_rugs\n  :parameters (?rug - rug ?p - player)\n  :precondition (and (at ?rug around_house) (at ?p around_house))\n  :effect (and (inventory ?p ?rug) (not (at ?rug around_house)))\n)\n```\n\n### Step 6: clean_room npc basement\n```pddl\n\nThe actions after the merger are:"
]