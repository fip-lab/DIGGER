[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:cut\n\n\nAction sets that need to be merged:\n(:action cut_lemon\n    :parameters (?npc - npc ?lemon - lemon ?lemon_half - lemon_half)\n    :precondition (and (inventory ?npc ?lemon) (not (inventory ?npc ?lemon_half)))\n    :effect (and (inventory ?npc ?lemon_half) (not (inventory ?npc ?lemon)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:squeeze\n\n\nAction sets that need to be merged:\n(:action squeeze_lemon\n    :parameters (?npc - npc ?lemon - lemon ?juice - juice)\n    :precondition (and (inventory ?npc ?lemon) (not (inventory ?npc ?juice)))\n    :effect (and (inventory ?npc ?juice) (not (inventory ?npc ?lemon)))\n)\n\n\n(:action rub_lemon_half\n    :parameters (?npc - npc ?faucet - faucet ?lemon_half - lemon_half)\n    :precondition (and (inventory ?npc ?lemon_half) (at ?npc ?faucet))\n    :effect (and (clean ?faucet) (not (inventory ?npc ?lemon_half)))\n)\n\n\n(:action wash_tap_with_lemon_half\n    :parameters (?npc - npc ?faucet - faucet ?water - water ?lemon_half - lemon_half)\n    :precondition (and (at ?npc ?faucet) (inventory ?npc ?lemon_half) (has_water ?faucet))\n    :effect (and (clean ?faucet) (not (inventory ?npc ?lemon_half)))\n)\n```\n\nExplanation:\n1. **cut_lemon**: This action involves cutting a lemon in half.\n    - **Parameters**: `?npc` is the player, `?lemon` is the lemon, `?lemon_half` is the half lemon.\n    - **Preconditions**: The player has a lemon.\n    - **Effects**: The player now has a lemon half and no longer has the whole lemon.\n\n2. **squeeze_lemon**: This action involves squeezing the juice out of the lemon.\n    - **Parameters**: `?npc` is the player, `?lemon` is the lemon, `?juice` is the juice.\n    - **Preconditions**: The player has a lemon.\n    - **Effects**: The player now has lemon juice and no longer has the whole lemon.\n\n3. **rub_lemon_half**: This action involves rubbing the lemon half on the faucet.\n    - **Parameters**: `?npc` is the player, `?faucet` is the faucet, `?lemon_half` is the lemon half.\n    - **Preconditions**: The player has a lemon half and is at the faucet.\n    - **Effects**: The faucet is now clean, and the player no longer has the lemon half.\n\n4. **wash_tap_with_lemon_half**: This action involves washing the tap with the lemon half and water.\n    - **Parameters**: `?npc` is the player, `?faucet` is the faucet, `?water` is the water, `?lemon_half` is the lemon half.\n    - **Preconditions**: The player is at the faucet, has a lemon half, and there is water available.\n    - **Effects**: The faucet is now clean, and the player no longer has the lemon half.\n\nThese actions adhere to the provided steps and descriptions, ensuring the task of polishing a faucet with a lemon is completed effectively.\nThe actions after the merger are:"
]