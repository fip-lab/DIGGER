[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:choose\n\n\nAction sets that need to be merged:\n(:action choose_vs_duel\n    :parameters (?d - duel)\n    :precondition (and (option ?d deselected))\n    :effect (and (option ?d selected) (population ?d two_player))\n)\n\n\n(:action choose_goku\n    :parameters (?p - player ?d - duel)\n    :precondition (and (knowledge ?p unselected) (population ?d two_player))\n    :effect (and (knowledge ?p selected))\n)\n\n\n(:action choose_stage\n    :parameters (?s - stage ?d - duel)\n    :precondition (and (location ?s unspecified) (option ?d selected))\n    :effect (and (location ?s specified))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:move\n\n\nAction sets that need to be merged:\n(:action move_to_wall\n    :parameters (?p1 - player ?p2 - player ?p3 - player)\n    :precondition (and (location ?p1 away_from_wall) (location ?p2 away_from_wall) (location ?p3 away_from_wall))\n    :effect (and (location ?p1 against_wall) (location ?p2 against_wall) (location ?p3 against_wall) (division ?p1 ?p2 ?p3 separated))\n)\n```\n\n### Explanation of Actions:\n\n1. **Action Name: choose_vs_duel**\n   - **Parameters:** `?d - duel`\n   - **Preconditions:** The duel option must be deselected.\n   - **Effects:** The duel option is selected, and the population is set to two players.\n\n2. **Action Name: choose_goku**\n   - **Parameters:** `?p - player ?d - duel`\n   - **Preconditions:** The player has not been selected, and the duel population is two players.\n   - **Effects:** The player is selected.\n\n3. **Action Name: choose_stage**\n   - **Parameters:** `?s - stage ?d - duel`\n   - **Preconditions:** The stage location is unspecified, and the duel option is selected.\n   - **Effects:** The stage location is specified.\n\n4. **Action Name: move_to_wall**\n   - **Parameters:** `?p1 - player ?p2 - player ?p3 - player`\n   - **Preconditions:** All players are away from the wall.\n   - **Effects:** All players move against the wall, and they are separated.\n\nThese actions capture the necessary steps and entity states to achieve the task of getting under the stage in Dragonball Z Budokai Tenkaichi 2.\nThe actions after the merger are:"
]