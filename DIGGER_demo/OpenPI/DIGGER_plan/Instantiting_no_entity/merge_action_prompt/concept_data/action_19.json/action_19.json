[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:cut\n\n\nAction sets that need to be merged:\n(:action cut_lemon ; cut a lemon in half\n      :parameters (?npc - npc ?lemon - lemon ?loc - location) \n      :precondition (and (at ?npc ?loc) (inventory ?npc ?lemon) (not (cut ?lemon)))\n      :effect (and (cut ?lemon))\n   )\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:squeeze\n\n\nAction sets that need to be merged:\n(:action squeeze_lemon ; squeeze out the juice from the lemon\n      :parameters (?npc - npc ?lemon - lemon ?juice - juice ?loc - location) \n      :precondition (and (at ?npc ?loc) (cut ?lemon) (not (squeezed ?lemon)) (not (inventory ?npc ?juice)))\n      :effect (and (squeezed ?lemon) (inventory ?npc ?juice))\n   )\n\n(:action rub_lemon_half ; rub the squeezed lemon half on the faucet\n      :parameters (?npc - npc ?lemon - lemon ?faucet - faucet ?loc - location) \n      :precondition (and (at ?npc ?loc) (squeezed ?lemon) (at ?faucet ?loc))\n      :effect (and (rubbed ?faucet ?lemon))\n   )\n\n(:action wash_tap_with_lemon_half ; wash the tap with water after rubbing with the lemon half\n      :parameters (?npc - npc ?water - water ?faucet - faucet ?loc - location) \n      :precondition (and (at ?npc ?loc) (rubbed ?faucet ?lemon) (inventory ?npc ?water))\n      :effect (and (clean ?faucet))\n   )\n```\n\n### Explanation:\n1. **cut_lemon**: This action involves cutting a lemon in half. Preconditions ensure the NPC is at the correct location and has the lemon in their inventory. The effect is that the lemon is now cut.\n2. **squeeze_lemon**: This action involves squeezing the juice out of the lemon. Preconditions ensure the lemon is cut and the NPC is at the correct location. The effect is that the lemon is now squeezed and the NPC has the juice in their inventory.\n3. **rub_lemon_half**: This action involves rubbing the squeezed lemon half on the faucet. Preconditions ensure the lemon is squeezed, the NPC is at the correct location, and the faucet is present at the location. The effect is that the faucet has been rubbed with the lemon.\n4. **wash_tap_with_lemon_half**: This action involves washing the tap with water after rubbing with the lemon half. Preconditions ensure the NPC is at the correct location, has water in their inventory, and the faucet has been rubbed with the lemon. The effect is that the faucet is now clean.\nThe actions after the merger are:"
]