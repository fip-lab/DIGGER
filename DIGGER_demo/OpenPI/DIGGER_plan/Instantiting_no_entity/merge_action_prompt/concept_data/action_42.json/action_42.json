[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:clean\n\n\nAction sets that need to be merged:\n(:action clean_cloth\n      :parameters (?c - cloth ?s - sponge)\n      :precondition (and (at ?c storage) (at ?s storage))\n      :effect (and (clean ?c) (not (dirty ?c)) (not (dirty ?s)))\n   )\n\n\n(:action clean_window\n      :parameters (?p - player ?w - window ?g - glass_cleaner ?c - cloth)\n      :precondition (and (at ?p ?w) (inventory ?p ?g) (clean ?c) (scraped ?w))\n      :effect (and (cleaned ?w) (not (dirty ?w)))\n   )\n\n\n(:action remove_small_splatter\n      :parameters (?p - player ?ps - paint_splatters ?cs - chemical_solvent ?w - window)\n      :precondition (and (at ?p ?w) (inventory ?p ?cs) (at ?ps ?w))\n      :effect (and (removed ?ps) (not (at ?ps ?w)))\n   )\n```\n\nExplanation of each action:\n\n1. `clean_cloth`: This action involves cleaning a cloth and sponge.\n   - Parameters: `?c` is the cloth, `?s` is the sponge.\n   - Preconditions: Both the cloth and sponge are in the storage.\n   - Effects: The cloth and sponge are clean.\n\n2. `wet_window_with_water`: This action wets the window with water.\n   - Parameters: `?p` is the player, `?w` is the window, `?water` is the water.\n   - Preconditions: The player is at the window location, and there is water available.\n   - Effects: The window becomes wet.\n\n3. `position_razor`: This action positions the razor blade on the window.\n   - Parameters: `?p` is the player, `?r` is the razor, `?w` is the window.\n   - Preconditions: The player is at the window location, and the player has the razor.\n   - Effects: The razor is positioned on the window.\n\n4. `scrape_window_with_painting`: This action scrapes the paint from the window using the razor.\n   - Parameters: `?p` is the player, `?r` is the razor, `?w` is the window.\n   - Preconditions: The player is at the window location, the razor is positioned on the window, and the window is wet.\n   - Effects: The window is scraped, and the paint is removed.\n\n5. `clean_window`: This action cleans the window with glass cleaner and a clean cloth.\n   - Parameters: `?p` is the player, `?w` is the window, `?g` is the glass cleaner, `?c` is the cloth.\n   - Preconditions: The player is at the window location, the player has the glass cleaner, the cloth is clean, and the window is scraped.\n   - Effects: The window becomes clean.\n\n6. `remove_small_splatter`: This action removes small paint splatters with chemical solvents.\n   - Parameters: `?p` is the player, `?ps` is the paint splatters, `?cs` is the chemical solvent, `?w` is the window.\n   - Preconditions: The player is at the window location, the player has the chemical solvent, and the paint splatters are on the window.\n   - Effects: The paint splatters are removed from the window.\n\nThese actions capture the steps and logic required to remove paint from windows, ensuring the necessary conditions and effects are properly defined.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:wet\n\n\nAction sets that need to be merged:\n(:action wet_window_with_water\n      :parameters (?p - player ?w - window ?water - water)\n      :precondition (and (at ?p ?w) (has_water ?water))\n      :effect (and (wet ?w) (not (dry ?w)))\n   )\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:position\n\n\nAction sets that need to be merged:\n(:action position_razor\n      :parameters (?p - player ?r - razor ?w - window)\n      :precondition (and (at ?p ?w) (inventory ?p ?r))\n      :effect (and (positioned ?r ?w))\n   )\n\n\n(:action scrape_window_with_painting\n      :parameters (?p - player ?r - razor ?w - window)\n      :precondition (and (at ?p ?w) (positioned ?r ?w) (wet ?w))\n      :effect (and (scraped ?w) (not (painted ?w)))\n   )\n\n\nThe actions after the merger are:"
]