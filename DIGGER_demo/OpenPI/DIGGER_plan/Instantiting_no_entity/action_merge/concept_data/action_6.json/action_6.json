[
    "Given the requirement to merge actions into a single universal action that can be adapted to a variety of tasks, the following action combines the \"purchase\" and \"replace_wicks\" actions while maintaining generality, state change, simplicity, and logical consistency.\n\n### Merged Action\n\n```pddl\n(:action manage_resource\n  ; Manage a resource through purchase, utilization, and maintenance\n  :parameters (?user - user ?resource - object ?location - location ?attachment - object ?spot - object ?component - object)\n  :precondition \n    (or \n      ; For purchase\n      (and (at ?user ?location) (available ?resource ?location))\n      ; For utilization\n      (and (attached ?resource ?spot) (used ?resource))\n      ; For maintenance\n      (and (inventory ?user ?component) (attached ?resource ?spot) (used ?resource))\n    )\n  :effect \n    (and \n      ; For purchase\n      (when (and (at ?user ?location) (available ?resource ?location))\n        (and (inventory ?user ?resource) (not (available ?resource ?location)))\n      )\n      ; For utilization\n      (when (and (attached ?resource ?spot) (used ?resource))\n        (clean ?resource)\n      )\n      ; For maintenance\n      (when (and (inventory ?user ?component) (attached ?resource ?spot) (used ?resource))\n        (and (not (used ?resource)) (clean ?resource) (not (inventory ?user ?component)))\n      )\n    )\n)\n```\n\n### Explanation:\n\n1. **Generality**: \n   - The action `manage_resource` is designed to handle various tasks involving purchasing, using, and maintaining resources.\n   - The parameters are abstract, allowing the action to be applied to different objects (`resource`, `location`, `attachment`, `spot`, `component`), thus increasing its adaptability.\n\n2. **State Change**:\n   - The preconditions and effects are structured to clearly reflect the changes in state for purchasing, utilizing, and maintaining the resource.\n   - The use of conditional (`when`) statements ensures that the correct state changes are applied based on the context.\n\n3. **Simplicity**:\n   - Redundant and unnecessary complexities are avoided by consolidating similar actions into a single, efficient action.\n   - The use of abstract parameters and conditional effects simplifies the overall action.\n\n4. **Logical Consistency**:\n   - The merged action maintains reasonable preconditions and effects, ensuring logical consistency across different contexts.\n   - The use of `or` in the precondition ensures that the action can be applied in different scenarios (purchase, utilize, maintain) while maintaining clear and reasonable logic.\n\nThis merged action should be adaptable to various tasks involving resource management, ensuring a clear state change, simplicity, and logical consistency.",
    "Based on the example actions and the provided guidelines, the merged action \"attach\" must be general, clearly reflect state changes, be simple, and maintain logical consistency. Here is the merged action:\n\n```pddl\n(:action attach ; Attach an item to a location and update state\n  :parameters (?agent - agent ?item - object ?location - location)\n  :precondition (and (inventory ?agent ?item) (available ?location))\n  :effect (and (attached ?item ?location) (not (inventory ?agent ?item)))\n)\n```\n\n### Explanation:\n\n1. **Generality**:\n   - The parameters are abstracted to `?agent - agent`, `?item - object`, and `?location - location` to make the action applicable to a variety of contexts beyond just the given examples.\n2. **State Change**:\n   - Preconditions: The item is in the agent's inventory and the location is available.\n   - Effects: The item is now attached to the location and removed from the agent's inventory.\n3. **Simplicity**:\n   - The action is streamlined to remove unnecessary complexity while maintaining its essential function.\n4. **Logical Consistency**:\n   - The preconditions and effects are clear and reasonable, ensuring the action can be logically applied in different contexts.\n\nThis merged action can now be used for a variety of tasks involving attaching any item to any location by any agent, maintaining both simplicity and flexibility.",
    "To create a merged action named \"clean\" that retains the core logic and generalizes the parameters to be adaptable to a variety of tasks while ensuring simplicity and logical consistency, we can follow these guidelines. We will merge the provided action sets into a single action.\n\nHere\u2019s the merged action definition:\n\n```pddl\n(:action clean ;  Clean a part of an object and update its status\n  :parameters (?cleaner - tool ?part - object ?object - object)\n  :precondition (and (attached ?cleaner ?part) (in_object ?part ?object) (part_of ?part ?object))\n  :effect (clean ?part)\n)\n```\n\nExplanation:\n1. **Generality**: The parameters have been abstracted to `?cleaner` (tool), `?part` (object part), and `?object` (the main object), making the action adaptable to various cleaning tasks.\n2. **State Change**: The preconditions and effects clearly define the change in state. The preconditions ensure the tool is attached and the part is part of the object, while the effect updates the part\u2019s status to cleaned.\n3. **Simplicity**: Redundancy is avoided by merging similar effects and keeping the definition straightforward.\n4. **Logical Consistency**: The merged action retains reasonable preconditions and effects applicable in different contexts.\n\nThis merged action is now adaptable to a variety of cleaning tasks involving different tools and parts of objects, ensuring simplicity and logical consistency."
]