[
    "```lisp\n(:action clean ; Clean an item and update its status\n  :parameters (?actor - agent ?item - object ?cleaner - object ?tool - object)\n  :precondition (and \n    (at ?actor ?item) \n    (inventory ?actor ?cleaner) \n    (or (and (cloth ?item) (at ?item storage) (at ?tool storage))\n        (and (window ?item) (or (clean ?tool) (scraped ?item)) (or (and (chemical_solvent ?cleaner) (at ?paint_splatters ?item))\n                                                                    (glass_cleaner ?cleaner)))\n        (and (paint_splatters ?item) (at ?item ?window)))\n  )\n  :effect (and \n    (or (and (cloth ?item) (not (dirty ?item)))\n        (and (window ?item) (clean ?item))\n        (and (paint_splatters ?item) (clean ?item)))\n  )\n)\n\n(:action wet_window_with_water\n  :parameters (?p - agent ?w - window ?water - object)\n  :precondition (and (at ?p ?w) (has_water ?water))\n  :effect (and (wet ?w) (not (dry ?w)))\n)\n\n(:action wet ; Wet a resource and update its state\n  :parameters (?agent - agent ?resource - object ?liquid - object)\n  :precondition (and (at ?agent ?resource) (has_liquid ?liquid))\n  :effect (and (wet ?resource) (not (dry ?resource)))\n)\n\n(:action position ; Position an item and update the state of the target\n  :parameters (?p - agent ?r - object ?w - target)\n  :precondition (and (at ?p ?w) (inventory ?p ?r))\n  :effect (and (positioned ?r ?w) (scraped ?w) (not (painted ?w)))\n)\n```"
]