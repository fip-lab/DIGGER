[
    "```lisp\n[\n  (:action clean\n    ; Clean an item and update its status\n    :parameters (?item - object ?user - person)\n    :precondition (and (dirty ?item) (available ?user))\n    :effect (and (clean ?item) (not (dirty ?item)) (not (available ?user)))\n  ),\n\n  (:action wear\n    ; Wear an item if it's clean and update its status\n    :parameters (?item - object ?user - person)\n    :precondition (and (clean ?item) (not (damaged ?item)) (available ?user))\n    :effect (and (wearing ?user ?item) (not (clean ?item)) (not (available ?user)))\n  ),\n\n  (:action use\n    ; Use an item for a specific purpose\n    :parameters (?npc - person ?item - object ?purpose - purpose)\n    :precondition (and (available ?npc) (not (used_for ?item ?purpose)) (suitable_for ?item ?purpose))\n    :effect (and (used_for ?item ?purpose) (not (suitable_for ?item ?purpose)) (not (available ?npc)))\n  ),\n\n  (:action make\n    ; Create or transform an item using a tool\n    :parameters (?user - person ?tool - object ?item - object)\n    :precondition (and (available ?user) (usable ?tool) (quality ?item))\n    :effect (and (created ?user ?item) (not (quality ?item)) (not (available ?user)))\n  ),\n\n  (:action donate\n    ; Donate a resource and update its status\n    :parameters (?entity - object ?user - person)\n    :precondition (and (clean ?entity) (not (damaged ?entity)) (available ?user))\n    :effect (and (donated ?entity) (not (clean ?entity)) (not (available ?user)))\n  )\n]\n```"
]