[
    "```lisp\n[\n  (:action remove ; Remove an attachment and update the state of the involved entities\n    :parameters (?att - attachment ?container - container ?res - resource)\n    :precondition (and (attached ?att ?container) (contains ?container ?res))\n    :effect (and (not (attached ?att ?container)))\n  ),\n  \n  (:action screw ; Screw an item to another item\n    :parameters (?item1 - object ?item2 - object ?condition - condition)\n    :precondition (and (not (attached ?item1 ?item2)) (?condition ?item2))\n    :effect (and (attached ?item1 ?item2))\n  ),\n  \n  (:action fill ; Fill a container with a resource\n    :parameters (?container - object ?resource - object ?source - object)\n    :precondition (and (attached ?source ?container) (not (filled ?container ?resource)))\n    :effect (filled ?container ?resource)\n  ),\n  \n  (:action fill_oil ; Fill an oil bottle from a faucet\n    :parameters (?ob - oil_bottle ?fc - faucet ?o - oil)\n    :precondition (and (contains ?ob ?o) (attached ?fc ?ob))\n    :effect (filled ?ob ?o)\n  ),\n  \n  (:action get ; Get an item\n    :parameters (?npc - person ?item - object)\n    :precondition (not (has ?npc ?item))\n    :effect (has ?npc ?item)\n  ),\n  \n  (:action handle_oil ; Handle oil process\n    :parameters (?npc - person ?storage - location ?tank - container ?oil_cap - object ?oil_filter - object)\n    :precondition (and \n        (at ?npc ?storage) \n        (not (open ?storage))\n        (not (empty ?tank))\n        (has ?npc ?oil_cap)\n        (has ?npc ?oil_filter)\n        (not (filled ?tank))\n    )\n    :effect (open ?storage)\n  )\n]\n```"
]