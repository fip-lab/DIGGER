[
    "[\n  '(:action gather ; Collect an item from the environment and add it to the inventory\\n  :parameters (?agent - agent ?item - object ?location - place)\\n  :precondition (and (at ?agent ?location) (at ?item ?location) (not (in_inventory ?agent ?item)))\\n  :effect (in_inventory ?agent ?item))',\n\n  '(:action push ; Push an item away from a container\\n  :parameters (?agent - agent ?container - container ?item - object)\\n  :precondition (and (in_inventory ?agent ?container) (in_inventory ?agent ?item) (threaded ?item ?container))\\n  :effect (pushed_away ?item ?container))',\n\n  '(:action slide ; Slide an object to adjust its position or state\\n  :parameters (?agent - agent ?object - movable ?surface - surface)\\n  :precondition (and (in_inventory ?agent ?surface) (pushed_away ?object ?surface))\\n  :effect (slid ?object ?surface))',\n\n  '(:action finish ; Complete a task involving assembling and finalizing an item\\n  :parameters (?agent - agent ?item1 - object ?item2 - object ?final_item - object)\\n  :precondition (and (in_inventory ?agent ?item1) (in_inventory ?agent ?item2) (not (finished ?final_item)))\\n  :effect (and (at ?final_item ?agent) (not (in_inventory ?agent ?item1)) (not (in_inventory ?agent ?item2)) (finished ?final_item)))',\n\n  '(:action untwist ; Untwist an object and update its state\\n  :parameters (?agent - agent ?object - twistable ?tool - tool)\\n  :precondition (and (in_inventory ?agent ?object) (in_inventory ?agent ?tool) (twisted ?object))\\n  :effect (not (twisted ?object)))'\n]"
]