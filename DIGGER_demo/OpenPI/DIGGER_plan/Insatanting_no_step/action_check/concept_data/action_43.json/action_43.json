[
    "```lisp\n[\n  (:action find ; Find a resource and update its visibility status\n   :parameters (?actor - agent ?resource - object)\n   :precondition (and (at ?actor ?resource) (not (visible ?resource)))\n   :effect (visible ?resource)\n  )\n\n  (:action click ; Click an item and update its status\n   :parameters (?actor - agent ?item - object)\n   :precondition (and (at ?actor ?item) (visible ?item) (not (selected ?item)))\n   :effect (selected ?item)\n  )\n\n  (:action start ; Initiate an action or process with an entity and update its status\n   :parameters (?actor - agent ?resource - object)\n   :precondition (and (available ?actor) (connected ?resource) (functional ?resource) (tested ?resource))\n   :effect (and (active ?resource) (efficient ?resource))\n  )\n\n  (:action communicate ; Communicate with an entity and update communication status\n   :parameters (?actor - agent ?medium - communication_medium ?message - message)\n   :precondition (and (available ?medium) (not (communicated ?actor ?message)))\n   :effect (communicated ?actor ?message)\n  )\n\n  (:action advise ; Provide advice to a teammate and update the status\n   :parameters (?advisor - agent ?advice - suggestion ?receiver - agent)\n   :precondition (and (available ?advisor) (receptive ?receiver) (efficient ?advisor))\n   :effect (and (advised ?advisor ?advice ?receiver) (received ?advice ?receiver))\n  )\n\n  (:action ensure ; Ensure a resource is in the desired state\n   :parameters (?actor - agent ?item - object)\n   :precondition (and (at ?actor ?item) (not (ensured ?item)))\n   :effect (and (ensured ?item) (tested ?item) (functional ?item))\n  )\n]\n```"
]