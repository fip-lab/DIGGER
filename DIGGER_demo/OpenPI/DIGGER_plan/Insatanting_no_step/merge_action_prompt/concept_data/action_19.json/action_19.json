[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:cut\n\n\nAction sets that need to be merged:\n(:action cut_lemon\n    :parameters (?npc - person ?lemon - lemon ?kitchen - location)\n    :precondition (and (at ?npc ?kitchen) (at ?lemon ?kitchen) (whole ?lemon))\n    :effect (and (not (whole ?lemon)) (cut ?lemon))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:squeeze\n\n\nAction sets that need to be merged:\n(:action squeeze_lemon\n    :parameters (?npc - person ?lemon - lemon ?kitchen - location)\n    :precondition (and (at ?npc ?kitchen) (at ?lemon ?kitchen) (cut ?lemon))\n    :effect (and (squeezed ?lemon))\n)\n\n\n(:action rub_lemon_on_faucet\n    :parameters (?npc - person ?lemon - lemon ?faucet - faucet ?bathroom - location)\n    :precondition (and (at ?npc ?bathroom) (at ?faucet ?bathroom) (squeezed ?lemon) (dirty ?faucet))\n    :effect (and (not (dirty ?faucet)) (clean ?faucet))\n)\n\n\n(:action wash_faucet\n    :parameters (?npc - person ?faucet - faucet ?bathroom - location ?water - water)\n    :precondition (and (at ?npc ?bathroom) (at ?faucet ?bathroom) (clean ?faucet) (accessible ?water))\n    :effect (and (washed ?faucet))\n)\n```\n\nExplanation of Actions:\n1. **cut_lemon**: This action involves cutting a whole lemon in half. Preconditions ensure the NPC and lemon are in the kitchen, and the lemon is whole. The effect is that the lemon is no longer whole but cut.\n2. **squeeze_lemon**: This action involves squeezing the juice out of the cut lemon. Preconditions ensure the NPC and cut lemon are in the kitchen. The effect is that the lemon is squeezed.\n3. **rub_lemon_on_faucet**: This action involves rubbing the squeezed lemon on the dirty faucet. Preconditions ensure the NPC, squeezed lemon, and dirty faucet are in the bathroom. The effect is that the faucet becomes clean.\n4. **wash_faucet**: This action involves washing the cleaned faucet. Preconditions ensure the NPC, cleaned faucet, and accessible water are in the bathroom. The effect is that the faucet is washed.\n\nThese actions capture the intent and logic of each step in the task of polishing a faucet with a lemon.\nThe actions after the merger are:"
]