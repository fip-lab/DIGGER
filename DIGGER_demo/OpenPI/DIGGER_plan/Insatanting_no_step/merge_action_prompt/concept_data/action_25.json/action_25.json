[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:place\n\n\nAction sets that need to be merged:\n(:action place_ingredients_in_blender\n    :parameters (?p - player ?y - yogurt ?b - bananas ?s - sorbet ?bl - blender)\n    :precondition (and (inventory ?p ?y) (inventory ?p ?b) (inventory ?p ?s) (at ?p ?bl))\n    :effect (and (in_blender ?bl ?y) (in_blender ?bl ?b) (in_blender ?bl ?s) \n                 (not (inventory ?p ?y)) (not (inventory ?p ?b)) (not (inventory ?p ?s)))\n)\n\n\n(:action pour_smoothie\n    :parameters (?p - player ?bl - blender ?g - glass)\n    :precondition (and (at ?p ?bl) (blended ?bl) (at ?p ?g) (chilled ?g))\n    :effect (and (in_glass ?g smoothie) (not (in_blender ?bl ?y)) (not (in_blender ?bl ?b)) \n                 (not (in_blender ?bl ?s)) (not (in_blender ?bl ?r)))\n)\n\n\n(:action garnish_glass\n    :parameters (?p - player ?st - strawberry ?g - glass)\n    :precondition (and (inventory ?p ?st) (at ?p ?g) (in_glass ?g smoothie))\n    :effect (and (garnished ?g ?st) (not (inventory ?p ?st)))\n)\n```\n\nThis set of PDDL actions captures the steps and the descriptions provided for making a Banana Strawberry Rum Smoothie. Each action includes the necessary parameters, preconditions, and effects to ensure the task is performed correctly.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:blend\n\n\nAction sets that need to be merged:\n(:action blend_mixture\n    :parameters (?p - player ?bl - blender)\n    :precondition (and (at ?p ?bl) (in_blender ?bl ?y) (in_blender ?bl ?b) (in_blender ?bl ?s))\n    :effect (and (blended ?bl) (texture ?bl smooth))\n)\n\n\n(:action add_rum_and_blend\n    :parameters (?p - player ?r - rum ?bl - blender)\n    :precondition (and (inventory ?p ?r) (at ?p ?bl) (blended ?bl))\n    :effect (and (in_blender ?bl ?r) (not (inventory ?p ?r)) (blended ?bl))\n)\n\n\nThe actions after the merger are:"
]