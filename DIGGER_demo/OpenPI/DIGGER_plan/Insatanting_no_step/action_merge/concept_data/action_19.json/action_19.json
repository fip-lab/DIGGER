[
    "(:action cut ; Cut an item using a tool\n    :parameters (?p - person ?item - object ?tool - tool)\n    :precondition (and (inventory ?p ?item) (inventory ?p ?tool) (not (cut ?item)))\n    :effect (cut ?item))",
    "Here\u2019s the merged universal action for the \"squeeze\" category:\n\n### Merged Action: `squeeze`\n\n```lisp\n(:action squeeze\n  :parameters (?p - player ?item - object ?target - entity ?resource - resource)\n  :precondition (and\n    (inventory ?p ?item)                  ; The player must have the item in their inventory\n    (or                                   ; The action must correspond to a valid task\n      (and                                ; Task: Squeeze juice\n        (is_type ?item lemon)             ; The item is a lemon\n        (is_type ?target container)       ; The target is a container\n        (cut ?item)                       ; The lemon is already cut\n      )\n      (and                                ; Task: Rub the item on a target\n        (is_type ?item lemon)             ; The item is a lemon\n        (is_type ?target faucet)          ; The target is a faucet\n        (not (full ?item))                ; The item is not full (e.g., already squeezed)\n        (not (clean ?target))             ; The target is not clean\n      )\n      (and                                ; Task: Wash a target\n        (is_type ?target faucet)          ; The target is a faucet\n        (is_type ?resource water)         ; The resource is water\n        (clean ?target)                   ; The target is already clean\n        (has_water ?resource)             ; The resource (water) is available\n      )\n    )\n  )\n  :effect (and\n    (or\n      (and                                ; Task: Squeeze juice\n        (is_type ?item lemon)             ; The item is a lemon\n        (is_type ?target container)       ; The target is a container\n        (has_juice ?target)               ; The container now contains juice\n        (not (full ?item))                ; The lemon is no longer full\n      )\n      (and                                ; Task: Rub the item on a target\n        (is_type ?item lemon)             ; The item is a lemon\n        (is_type ?target faucet)          ; The target is a faucet\n        (clean ?target)                   ; The target (faucet) is now clean\n      )\n      (and                                ; Task: Wash a target\n        (is_type ?target faucet)          ; The target is a faucet\n        (is_type ?resource water)         ; The resource is water\n        (washed ?target)                  ; The faucet is now washed\n      )\n    )\n  )\n)\n```\n\n---\n\n### Explanation of the Merged Action\n\n1. **Generality**:\n   - The action is abstract enough to handle multiple related tasks (squeezing, rubbing, or washing) by using generalized parameters (`?item`, `?target`, `?resource`) and logical conditions.\n   - The specific tasks are differentiated by `:precondition` and `:effect` clauses, which ensure applicability to a variety of scenarios.\n\n2. **State Change**:\n   - Each task has a clear state transition:\n     - Squeezing juice alters the state of the lemon (from `full` to `not full`) and the container (`has_juice`).\n     - Rubbing the lemon on the faucet changes the faucet's state to `clean`.\n     - Washing the faucet changes its state to `washed`.\n\n3. **Simplicity**:\n   - Redundant or repetitive actions have been merged into a single universal action, making the logic concise.\n   - The use of `or` clauses ensures that the action covers multiple tasks without requiring separate definitions.\n\n4. **Avoid Redundancy**:\n   - Tasks like \"rub_lemon_on_faucet\" and \"wash_faucet\" have overlapping contexts (cleaning a faucet), so their logic has been unified.\n   - The `squeeze_lemon` logic is integrated into the same action since it shares similar mechanics (transforming a state of an item and target).\n\n5. **Logical Consistency**:\n   - Preconditions and effects are contextually appropriate for each task, ensuring that the action behaves correctly in different scenarios.\n   - The use of `is_type` predicates helps maintain clarity about the roles of parameters.\n\n---\n\n### How It Works in Practice\n\n- **Squeeze juice into a container**:\n  - Parameters: `?item = lemon`, `?target = container`\n  - Preconditions: The lemon must be cut, and the player must have it and the container in their inventory.\n  - Effects: The container gains juice, and the lemon is no longer full.\n\n- **Rub a lemon on a faucet**:\n  - Parameters: `?item = lemon`, `?target = faucet`\n  - Preconditions: The player must have the lemon, the faucet must not be clean, and the lemon must not be full.\n  - Effects: The faucet becomes clean.\n\n- **Wash a faucet**:\n  - Parameters: `?target = faucet`, `?resource = water`\n  - Preconditions: The faucet must be clean, and water must be available.\n  - Effects: The faucet becomes washed.\n\nBy combining these into a single action, the universal `squeeze` action can flexibly handle a variety of related tasks while maintaining simplicity and efficiency."
]