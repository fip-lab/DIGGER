[
    "Combining the provided actions into a single universal action that adheres to the specified guidelines, we can create an action named `find` that is general enough to be applied to a variety of tasks. Let's merge the actions while maintaining their core logic, avoiding redundancy, and ensuring logical consistency.\n\n```lisp\n(:action find ; Find a resource and update the state of a group\n  :parameters (?p - player ?g - group ?t - target ?l - location ?e - equipment)\n  :precondition (and\n    (or (group_formed ?g) (not (group_formed ?g)))\n    (or (not (has_meeting_place ?g)) (not (gear_gathered ?g)) (not (has_victim ?g)))\n    (or (not (secured ?l)) (not (organized ?e)) (not (target ?t)))\n  )\n  :effect (and\n    (or (has_meeting_place ?g) (gear_gathered ?g) (has_victim ?g))\n    (or (secured ?l) (organized ?e) (target ?t))\n  )\n)\n```\n\n### Explanation:\n1. **Generality**: The merged action `find` uses abstract parameters (`?p`, `?g`, `?t`, `?l`, `?e`) to ensure it can adapt to various tasks such as finding a meeting place, gathering gear, or finding a victim.\n2. **State Change**: Preconditions and effects are designed to reflect changes in state for different tasks. The preconditions check if the group is formed and if specific attributes (meeting place, gear, victim) are not yet acquired. The effects reflect the acquisition of these attributes.\n3. **Simplicity**: Redundant conditions are avoided by using logical `or` operators to cover different scenarios within a single action.\n4. **Logical Consistency**: The action maintains consistent logic across different contexts by ensuring reasonable preconditions and effects for each task.\n\nThis merged action can be used to adapt to the various tasks outlined, providing a flexible and efficient way to handle the setup and state changes of a group in different scenarios.",
    "Given the example and the guidelines, we can merge the provided action `setup_spy_group` into a more generalized `setup` action. This generalized action will be capable of setting up various groups or tasks in different contexts without being restricted to specific types of actions.\n\n### Merged Action: setup\n\nHere is the merged action:\n\n```lisp\n(:action setup ; Set up a resource/task and update its status\n  :parameters (?entity - agent ?target - target ?context - context)\n  :precondition (and (not (setup_done ?target ?context)) (eligible ?entity ?target ?context))\n  :effect (and (setup_done ?target ?context) (assigned ?entity ?target ?context))\n)\n```\n\n### Explanation\n\n1. **Generality**: \n   - **Parameters**: Using abstract parameters like `?entity`, `?target`, and `?context` makes the action adaptable to a variety of tasks and contexts.\n   - **Example**: This can be used for setting up a spy group, a project team, or any other task that requires an entity to be assigned a role or resource within a specific context.\n\n2. **State Change**:\n   - **Preconditions**: Ensures that the setup has not already been done and that the entity is eligible for the setup in the given context.\n   - **Effects**: Reflects the change in state by marking the setup as done and assigning the entity to the target within the context.\n\n3. **Simplicity**:\n   - **Avoid Redundancy**: Combines similar setup actions into one, reducing the need for multiple specific setup actions.\n   - **Efficiency**: Simple and clear preconditions and effects without unnecessary complexity.\n\n4. **Logical Consistency**:\n   - **Preconditions**: Ensures that the action can only be performed if the setup has not been done and the entity is eligible.\n   - **Effects**: Consistently updates the state to reflect the completion of the setup and assignment of the entity.\n\n### Example Usages\n\n1. **Setting up a spy group**:\n   ```lisp\n   (:action setup\n     :parameters (?p - player ?g - group ?c - context)\n     :precondition (and (not (setup_done ?g ?c)) (trustworthy ?p ?g ?c))\n     :effect (and (setup_done ?g ?c) (assigned ?p ?g ?c))\n   )\n   ```\n\n2. **Setting up a project team**:\n   ```lisp\n   (:action setup\n     :parameters (?employee - person ?team - team ?project - project)\n     :precondition (and (not (setup_done ?team ?project)) (eligible ?employee ?team ?project))\n     :effect (and (setup_done ?team ?project) (assigned ?employee ?team ?project))\n   )\n   ```\n\nBy following these guidelines, we ensure the merged action is general, clear in state change, simple, efficient, and logically consistent across different contexts."
]