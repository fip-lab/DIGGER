[
    {
        "task": "Connect a Wii to HD TV",
        "action": [
            "To generate PDDL actions for the task \"Connect a Wii to HD TV,\" we will break down each step and create corresponding PDDL actions based on the provided descriptions and entity states. Here are the actions:\n\n### PDDL Actions:\n\n#### Action 1: Plug HDMI Cord into Cable\n```lisp\n(:action plug_hdmi_into_cable\n    :parameters (?hdmi - cable ?cable - cable)\n    :precondition (and (at ?hdmi ?cable) (not (connected ?hdmi ?cable)))\n    :effect (and (connected ?hdmi ?cable))\n)\n```\n\n#### Action 2: Plug HDMI Cord into TV's HDMI Input\n```lisp\n(:action plug_hdmi_into_tv\n    :parameters (?hdmi - cable ?tv - tv)\n    :precondition (and (connected ?hdmi ?cable) (not (connected ?hdmi ?tv)))\n    :effect (and (connected ?hdmi ?tv) (attachment ?tv connected))\n)\n```\n\n#### Action 3: Plug HDMI Cord into Wii's AV Composite Output\n```lisp\n(:action plug_hdmi_into_wii\n    :parameters (?hdmi - cable ?wii - console)\n    :precondition (and (connected ?hdmi ?tv) (not (connected ?hdmi ?wii)))\n    :effect (and (connected ?hdmi ?wii) (connection ?wii attached))\n)\n```\n\n#### Action 4: Plug HDMI Cord into Converter and TV\n```lisp\n(:action plug_hdmi_into_converter_and_tv\n    :parameters (?hdmi - cable ?converter - device ?tv - tv)\n    :precondition (and (connected ?hdmi ?wii) (not (connected ?hdmi ?converter)))\n    :effect (and (connected ?hdmi ?converter) (connected ?hdmi ?tv) (attachment ?tv connected))\n)\n```\n\n### Explanation:\n- **Action 1**: This action represents plugging the HDMI cord into the cable, establishing the initial connection.\n- **Action 2**: This action connects the HDMI cord to the TV's HDMI input, ensuring the TV is ready to receive signals.\n- **Action 3**: This action connects the HDMI cord to the Wii's AV Composite Output, replacing the Composite cord that originally comes with the Wii.\n- **Action 4**: This action ensures that the HDMI cord is plugged into a converter and the TV, completing the setup for the HDMI connection between the Wii and the TV.\n\nThese actions reflect the logical steps needed to achieve the task of connecting a Wii to an HD TV using an HDMI cord and converter, based on the entity states and descriptions provided."
        ]
    },
    {
        "task": "Make Cheese Sauce with Jalape\u00f1o Peppers",
        "action": [
            "To generate PDDL actions for the task \"Make Cheese Sauce with Jalape\u00f1o Peppers,\" I will follow the provided steps and entity states to define the actions, parameters, preconditions, and effects.\n\n### PDDL Actions\n\n#### Step 1: Cut the Velveeta into tiny squares and set aside.\n\n```pddl\n(:action cut_velveeta\n    :parameters (?p - player ?velveeta - cheese ?board - cutting_board)\n    :precondition (and (at ?velveeta ?board) (whole ?velveeta))\n    :effect (and (cubed ?velveeta) (not (whole ?velveeta)))\n)\n```\n\n#### Step 2: Set the burner on a medium to low setting before adding the cheese product.\n\n```pddl\n(:action set_burner\n    :parameters (?p - player ?knob - stove_knob)\n    :precondition (and (off ?knob) (in_off_position ?knob))\n    :effect (and (on ?knob) (in_medium_low_position ?knob) (not (off ?knob)))\n)\n```\n\n#### Step 3: Wait until the Velveeta has melted, lower the heat somewhat, and add in the (Rotel) tomatoes.\n\n```pddl\n(:action melt_velveeta\n    :parameters (?p - player ?velveeta - cheese ?pan - sauce_pan)\n    :precondition (and (cubed ?velveeta) (at ?velveeta ?pan) (on ?pan ?stove))\n    :effect (and (melted ?velveeta) (not (cubed ?velveeta)))\n)\n```\n\n```pddl\n(:action lower_heat\n    :parameters (?p - player ?knob - stove_knob)\n    :precondition (and (on ?knob) (in_medium_low_position ?knob))\n    :effect (and (in_low_position ?knob) (not (in_medium_low_position ?knob)))\n)\n```\n\n```pddl\n(:action add_tomatoes\n    :parameters (?p - player ?tomatoes - ingredient ?pan - sauce_pan)\n    :precondition (and (melted ?velveeta) (at ?velveeta ?pan))\n    :effect (and (in ?tomatoes ?pan))\n)\n```\n\n#### Step 4: Add in the Jalapeno peppers, and black olives if desired.\n\n```pddl\n(:action add_jalapenos\n    :parameters (?p - player ?peppers - ingredient ?pan - sauce_pan)\n    :precondition (and (chopped ?peppers) (at ?peppers ?pan))\n    :effect (and (in ?peppers ?pan))\n)\n```\n\n```pddl\n(:action add_black_olives\n    :parameters (?p - player ?olives - ingredient ?pan - sauce_pan)\n    :precondition (and (optional ?olives) (at ?olives ?pan))\n    :effect (and (in ?olives ?pan))\n)\n```\n\nEach action is designed to reflect the logical steps involved in making cheese sauce with jalape\u00f1o peppers, following the entity states and transitions provided."
        ]
    },
    {
        "task": "Board a Small Boat",
        "action": [
            "Based on the task \"Board a Small Boat\" and the provided entity states, here are the PDDL actions:\n\n### PDDL Actions:\n\n1. **Action Name:** approach_boat  \n   **Parameters:**  \n   - ?p - passenger  \n   - ?b - boat  \n   - ?l1 - location (away from boat)  \n   - ?l2 - location (near boat)  \n\n   **Preconditions:**  \n   - (at ?p ?l1)  \n   - (not (at ?p ?l2))  \n\n   **Effects:**  \n   - (at ?p ?l2)  \n   - (not (at ?p ?l1))  \n\n   **Description:**  \n   This action represents the passenger moving from a location away from the boat to a location near the boat.\n\n2. **Action Name:** board_boat  \n   **Parameters:**  \n   - ?p - passenger  \n   - ?b - boat  \n   - ?platform - platform (optional)  \n\n   **Preconditions:**  \n   - (at ?p near_boat)  \n   - (stable ?b)  \n   - (or (has_platform ?b ?platform) (not (has_platform ?b ?platform)))  \n\n   **Effects:**  \n   - (in ?p ?b)  \n   - (not (at ?p near_boat))  \n   - (if (has_platform ?b ?platform) (holding_rails ?p ?platform))  \n\n   **Description:**  \n   This action allows the passenger to board the boat, optionally using a platform and holding the rails for stability.\n\n3. **Action Name:** stabilize_boat  \n   **Parameters:**  \n   - ?b - boat  \n   - ?p - passenger  \n\n   **Preconditions:**  \n   - (in ?p ?b)  \n   - (unstable ?b)  \n\n   **Effects:**  \n   - (stable ?b)  \n   - (crouched ?p)  \n\n   **Description:**  \n   This action involves the passenger stabilizing the boat by crouching, which reduces the center of gravity and steadies the craft.\n\n4. **Action Name:** assist_boarding  \n   **Parameters:**  \n   - ?p1 - passenger assisting  \n   - ?p2 - passenger boarding  \n   - ?b - boat  \n\n   **Preconditions:**  \n   - (in ?p1 ?b)  \n   - (at ?p2 near_boat)  \n   - (stable ?b)  \n\n   **Effects:**  \n   - (in ?p2 ?b)  \n   - (not (at ?p2 near_boat))  \n   - (stable ?b)  \n\n   **Description:**  \n   This action represents a passenger already in the boat assisting another passenger in boarding, ensuring the craft remains stable.\n\nThese actions are designed to capture the logic and safety considerations involved in boarding a small boat, as described in the task and entity states."
        ]
    },
    {
        "task": "Make Slow Cooker Hot Cocoa",
        "action": [
            "Based on the provided task \"Make Slow Cooker Hot Cocoa\" and the steps, here are the corresponding PDDL actions:\n\n### PDDL Actions for Making Slow Cooker Hot Cocoa\n\n1. **Action: make_initial_cocoa_mixture**\n   - **Parameters:** \n     - `?cocoa - ingredient`\n     - `?milk - ingredient`\n     - `?sugar - ingredient`\n     - `?p - player`\n     - `?bowl - container`\n   - **Preconditions:** \n     - `(at ?p kitchen)`\n     - `(inventory ?p ?cocoa)`\n     - `(inventory ?p ?milk)`\n     - `(inventory ?p ?sugar)`\n     - `(empty ?bowl)`\n   - **Effects:** \n     - `(contains ?bowl ?cocoa)`\n     - `(contains ?bowl ?milk)`\n     - `(contains ?bowl ?sugar)`\n     - `(not (empty ?bowl))`\n\n2. **Action: add_ingredients_to_slow_cooker**\n   - **Parameters:** \n     - `?bowl - container`\n     - `?slow_cooker - appliance`\n     - `?p - player`\n   - **Preconditions:** \n     - `(at ?p kitchen)`\n     - `(contains ?bowl ?cocoa)`\n     - `(contains ?bowl ?milk)`\n     - `(contains ?bowl ?sugar)`\n     - `(empty ?slow_cooker)`\n   - **Effects:** \n     - `(contains ?slow_cooker ?cocoa)`\n     - `(contains ?slow_cooker ?milk)`\n     - `(contains ?slow_cooker ?sugar)`\n     - `(not (empty ?slow_cooker))`\n     - `(empty ?bowl)`\n\n3. **Action: heat_mixture_in_slow_cooker**\n   - **Parameters:** \n     - `?slow_cooker - appliance`\n     - `?p - player`\n   - **Preconditions:** \n     - `(at ?p kitchen)`\n     - `(contains ?slow_cooker ?cocoa)`\n     - `(contains ?slow_cooker ?milk)`\n     - `(contains ?slow_cooker ?sugar)`\n     - `(power ?slow_cooker off)`\n   - **Effects:** \n     - `(power ?slow_cooker on)`\n     - `(heating ?slow_cooker)`\n     - `(after 3 hours (hot ?slow_cooker))`\n\n4. **Action: serve_or_keep_warm**\n   - **Parameters:** \n     - `?slow_cooker - appliance`\n     - `?p - player`\n   - **Preconditions:** \n     - `(at ?p kitchen)`\n     - `(hot ?slow_cooker)`\n     - `(power ?slow_cooker on)`\n   - **Effects:** \n     - `(serve ?slow_cooker)`\n     - `(or (keep_warm ?slow_cooker) (power ?slow_cooker off))`\n\nThese actions capture the logical steps required to make slow cooker hot cocoa, based on the descriptions and entity states provided."
        ]
    },
    {
        "task": "Grow Fairy Moss Indoors",
        "action": [
            "Task: Grow Fairy Moss Indoors\n\nSteps:\n1. Ask for it at a nursery or garden center that specializes in pond plant varieties.\n2. Find a suitable container.\n3. Fill the bowl with water.\n4. Add the fairy moss.\n5. Place in a suitable position.\n6. Prune.\n\nPDDL Actions:\n```lisp\n(:action acquire_fairy_moss\n  :parameters (?p - person ?n - nursery ?m - moss)\n  :precondition (and (at ?p ?n) (for_sale ?n ?m))\n  :effect (and (inventory ?p ?m) (not (for_sale ?n ?m)))\n)\n\n(:action find_container\n  :parameters (?p - person ?c - container ?loc - location)\n  :precondition (and (at ?p ?loc) (available ?loc ?c))\n  :effect (and (inventory ?p ?c) (not (available ?loc ?c)))\n)\n\n(:action fill_bowl_with_water\n  :parameters (?p - person ?b - bowl ?w - water ?loc - location)\n  :precondition (and (inventory ?p ?b) (at ?p ?loc) (source ?loc ?w))\n  :effect (and (filled ?b ?w))\n)\n\n(:action add_fairy_moss\n  :parameters (?p - person ?b - bowl ?m - moss)\n  :precondition (and (inventory ?p ?b) (inventory ?p ?m) (filled ?b ?water))\n  :effect (and (in ?m ?b) (not (inventory ?p ?m)))\n)\n\n(:action place_container\n  :parameters (?p - person ?c - container ?loc - location)\n  :precondition (and (inventory ?p ?c) (suitable_position ?loc))\n  :effect (and (at ?c ?loc) (not (inventory ?p ?c)))\n)\n\n(:action prune_fairy_moss\n  :parameters (?p - person ?m - moss ?b - bowl)\n  :precondition (and (in ?m ?b) (at ?p ?b))\n  :effect (and (pruned ?m))\n)\n```\n\nDescriptions:\n- Ask for it at a nursery or garden center that specializes in pond plant varieties.\n- Find a suitable container.\n- Fill the bowl with water.\n- Add the fairy moss.\n- Place in a suitable position.\n- Prune.\n\nEntity State:\n- `fairy_moss`: {`moss`: [{'attribute': 'cost', 'before': 'for sale at nursery', 'after': 'purchased from nursery'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wetter'}, {'attribute': 'position', 'before': 'outside of bowl', 'after': 'inside of bowl'}, {'attribute': 'size', 'before': 'larger', 'after': 'smaller'}, {'attribute': 'shape', 'before': 'mess', 'after': 'pruned'}]}\n- `container`: {`container`: [{'attribute': 'location', 'before': 'in cabinet', 'after': 'on countertop'}, {'attribute': 'volume', 'before': 'empty', 'after': 'fuller'}, {'attribute': 'location', 'before': 'on countertop', 'after': 'on table'}]}\n- `water`: {`boiling pot`: [{'attribute': 'temperature', 'before': 'cold', 'after': 'hot'}, {'attribute': 'fullness', 'before': 'emptier', 'after': 'fuller'}, {'attribute': 'location', 'before': 'in pipes', 'after': 'out of faucet'}]}\n- `person`: {`person`: [{'attribute': 'inventory', 'before': 'empty', 'after': 'full'}, {'attribute': 'location', 'before': 'outside', 'after': 'inside'}]}\n- `nursery`: {`nursery`: [{'attribute': 'for_sale', 'before': 'available', 'after': 'sold'}]}\n\nNote: The entity states are used to define the preconditions and effects for each action. The actions follow the logical sequence of acquiring the fairy moss, preparing the container, and placing the moss in a suitable environment."
        ]
    },
    {
        "task": "Remove Black Skid Marks from Linoleum",
        "action": [
            "Sure, here are the PDDL actions for the task \"Remove Black Skid Marks from Linoleum\" based on the provided steps and entity states:\n\nTask: Remove Black Skid Marks from Linoleum\n\nSteps:\n1. Obtain a decent sized eraser that you can hold comfortably in your fingers.\n2. Kneel down next to the linoleum and use the eraser to rub along the skid mark.\n3. Continue rubbing until the black mark lifts.\n4. Wash and dry as usual.\n\nDescriptions:\n- Obtain a decent sized eraser that you can hold comfortably in your fingers.\n- Kneel down next to the linoleum and use the eraser to rub along the skid mark.\n- Continue rubbing until the black mark lifts.\n- Wash and dry as usual.\n\nEntity State:\n- {'eraser': {'eraser': [{'attribute': 'location', 'before': 'in store | absent | at shop/in drawer | owned by store', 'after': 'in home | present | in hand | bought by you'}, {'attribute': 'cost', 'before': 'for sale at store', 'after': 'purchased from store'}, {'attribute': 'location', 'before': 'in hand', 'after': 'on linoleum'}, {'attribute': 'size', 'before': 'whole', 'after': 'getting smaller'}], 'concept_knowledge': ['*Something you find at [[a desk]] is [[eraser]]', '[[Gomme \u00e0 effacer]] is a translation of [[eraser]]']}}\n- {'linoleum floor': {'linoleum': [{'attribute': 'cleanness', 'before': 'stained', 'after': 'clean'}, {'attribute': 'cleanness', 'before': 'dirty | dry', 'after': 'clean | wet'}], 'concept_knowledge': []}}\n- {'user': {'players': [{'attribute': 'knowledge', 'before': 'unselected', 'after': 'selected'}, {'attribute': 'location', 'before': 'away from wall', 'after': 'against wall'}, {'attribute': 'focus', 'before': 'focused on making bracelet', 'after': 'admiring bracelet'}], 'concept_knowledge': []}}\n\nPDDL Actions:\n\n```lisp\n(:action obtain_eraser\n    :parameters (?p - player ?e - eraser ?store - location ?home - location)\n    :precondition (and (at ?p ?store) (at ?e ?store) (for_sale ?e))\n    :effect (and (inventory ?p ?e) (not (at ?e ?store)) (at ?e ?home) (purchased ?e))\n)\n\n(:action kneel_next_to_linoleum\n    :parameters (?p - player ?linoleum - location)\n    :precondition (and (at ?p ?linoleum))\n    :effect (kneeling ?p)\n)\n\n(:action rub_skid_mark\n    :parameters (?p - player ?e - eraser ?linoleum - location)\n    :precondition (and (kneeling ?p) (inventory ?p ?e) (at ?p ?linoleum) (stained ?linoleum))\n    :effect (and (clean ?linoleum) (not (stained ?linoleum)) (smaller ?e))\n)\n\n(:action wash_and_dry_linoleum\n    :parameters (?p - player ?linoleum - location)\n    :precondition (and (at ?p ?linoleum) (clean ?linoleum))\n    :effect (and (wet ?linoleum) (dry ?linoleum))\n)\n```\n\nExplanation of PDDL Actions:\n1. `obtain_eraser`: This action represents obtaining an eraser from the store. Preconditions include the player being at the store, the eraser being at the store, and the eraser being for sale. The effects include the eraser being in the player's inventory, not at the store, and marked as purchased.\n2. `kneel_next_to_linoleum`: This action represents the player kneeling next to the linoleum. The precondition is that the player is at the linoleum location. The effect is that the player is kneeling.\n3. `rub_skid_mark`: This action represents the player using the eraser to rub along the skid mark on the linoleum. Preconditions include the player kneeling, having the eraser in their inventory, being at the linoleum, and the linoleum being stained. The effects include the linoleum becoming clean and the eraser getting smaller.\n4. `wash_and_dry_linoleum`: This action represents washing and drying the linoleum. Preconditions include the player being at the linoleum and the linoleum being clean. The effects include the linoleum being wet and then dry.\n\nThis set of actions should accurately represent the task of removing black skid marks from linoleum using PDDL."
        ]
    },
    {
        "task": "Make a Simple Inside Windshield Cleaner",
        "action": [
            "Sure! Here are the PDDL actions for the task \"Make a Simple Inside Windshield Cleaner\":\n\n### Task: Make a Simple Inside Windshield Cleaner\n\n#### Steps:\n1. Purchase a blackboard eraser.\n2. Keep the blackboard eraser in the glove box or attach it to a spot on or near the car door for easy access.\n3. Use the eraser to clean the inner side of the windshield.\n4. Replace after use.\n\n### Descriptions:\n- Purchase a blackboard eraser.\n- Keep the blackboard eraser in the glove box or attach it to a spot on or near the car door for easy access.\n- Use the eraser to clean the inner side of the windshield.\n- Replace after use.\n\n### Entity State:\n- 'eraser': {'attribute': 'location', 'before': 'in store', 'after': 'in hand'}\n- 'eraser': {'attribute': 'location', 'before': 'in hand', 'after': 'in glove box'}\n- 'windshield': {'attribute': 'cleanness', 'before': 'dirty', 'after': 'clean'}\n- 'eraser': {'attribute': 'location', 'before': 'in glove box', 'after': 'in hand'}\n\n### PDDL Actions:\n\n```lisp\n(:action purchase_eraser\n    :parameters (?p - player ?eraser - item ?store - location)\n    :precondition (and (at ?p ?store) (at ?eraser ?store) (for_sale ?eraser ?store))\n    :effect (and (inventory ?p ?eraser) (not (at ?eraser ?store)) (purchased ?eraser))\n)\n\n(:action store_eraser\n    :parameters (?p - player ?eraser - item ?glove_box - location)\n    :precondition (and (inventory ?p ?eraser))\n    :effect (and (at ?eraser ?glove_box) (not (inventory ?p ?eraser)))\n)\n\n(:action clean_windshield\n    :parameters (?p - player ?eraser - item ?windshield - location)\n    :precondition (and (at ?p ?windshield) (at ?eraser ?windshield) (dirty ?windshield) (inventory ?p ?eraser))\n    :effect (and (clean ?windshield) (not (dirty ?windshield)))\n)\n\n(:action replace_eraser\n    :parameters (?p - player ?eraser - item ?glove_box - location)\n    :precondition (and (inventory ?p ?eraser) (at ?p ?glove_box))\n    :effect (and (at ?eraser ?glove_box) (not (inventory ?p ?eraser)))\n)\n```\n\nThese actions should capture the necessary steps to complete the task \"Make a Simple Inside Windshield Cleaner\" based on the provided steps and descriptions."
        ]
    },
    {
        "task": "Paint Bare Wood",
        "action": [
            "Based on the task \"Paint Bare Wood\" and the instructions provided, I'll generate PDDL actions for each step. I'll ensure that the actions align with the task and entity states.\n\n### PDDL Actions:\n\n1. **Acquire Oil-Based Paints**\n\n   ```lisp\n   (:action acquire_paint\n      :parameters (?p - player ?paint - oil-based-paint ?loc - location)\n      :precondition (and (at ?p ?loc) (available ?paint ?loc))\n      :effect (and (inventory ?p ?paint) (not (available ?paint ?loc)))\n   )\n   ```\n   - **Description**: Acquire oil-based paints, which air dry slowly.\n   - **Preconditions**: The player is at the location where the paint is available.\n   - **Effects**: The paint is added to the player's inventory, and it is no longer available at the location.\n\n2. **Apply Under-Coat**\n\n   ```lisp\n   (:action apply_undercoat\n      :parameters (?p - player ?wood - bare-wood ?paint - oil-based-paint ?brush - paint-brush)\n      :precondition (and (inventory ?p ?paint) (inventory ?p ?brush) (at ?p ?wood) (smooth ?wood) (dry ?wood))\n      :effect (and (tacky ?wood) (wet ?wood) (not (smooth ?wood)))\n   )\n   ```\n   - **Description**: The under-coat should be thin and smooth. Move your paintbrush down the wood.\n   - **Preconditions**: The player has the paint and brush in inventory, and the wood is smooth and dry.\n   - **Effects**: The wood becomes tacky and wet, and is no longer smooth.\n\n3. **Apply Second Coat**\n\n   ```lisp\n   (:action apply_second_coat\n      :parameters (?p - player ?wood - bare-wood ?paint - oil-based-paint ?brush - paint-brush)\n      :precondition (and (inventory ?p ?paint) (inventory ?p ?brush) (at ?p ?wood) (tacky ?wood))\n      :effect (and (sticky ?wood) (not (tacky ?wood)))\n   )\n   ```\n   - **Description**: Paint the second coat, ensuring no paint bubbles and smoothing out drips or pools.\n   - **Preconditions**: The player has the paint and brush in inventory, and the wood is tacky.\n   - **Effects**: The wood becomes sticky, and is no longer tacky.\n\n4. **Finish Painting**\n\n   ```lisp\n   (:action finish_painting\n      :parameters (?p - player ?wood - bare-wood)\n      :precondition (and (at ?p ?wood) (sticky ?wood))\n      :effect (and (painted ?wood) (not (sticky ?wood)))\n   )\n   ```\n   - **Description**: Be the most precise with this.\n   - **Preconditions**: The player is at the wood, and the wood is sticky.\n   - **Effects**: The wood is marked as painted, and is no longer sticky.\n\nThese actions reflect the logical steps necessary to complete the task of painting bare wood, based on the descriptions and entity states provided."
        ]
    },
    {
        "task": "Create a Character in Lego Star Wars",
        "action": [
            "Here are the PDDL actions based on the provided task and steps for \"Create a Character in Lego Star Wars\":\n\nTask: Create a Character in Lego Star Wars\n\nSteps:\n1. Select a body part.\n2. Choose a specific part for the selected body part.\n3. Name the character.\n4. Save the character and exit.\n\nDescriptions:\n- When you begin the game, you will start as Princess Leia and Captain Antilles in the Star Wars cantina.\n- Use the up and down arrows to select the part of the character (hat, head, shirt, arms, hands, weapon, belt, and legs) and the left and right arrows to select through a selection of the body part you are on.\n- Press \"triangle\" to name it, and \"O\" to save and exit.\n- Now enter a completed level and turn on free play.\n\nEntity State:\n- game: {'attribute': 'knowledge', 'before': 'unplayed', 'after': 'played'}\n- character: {'attribute': 'step', 'before': 'unselected', 'after': 'selected'}\n- character: {'attribute': 'choice', 'before': 'nameless', 'after': 'named'}\n\nPDDL Actions:\n```lisp\n(:action select_body_part ; select a body part of the character\n    :parameters (?p - player ?part - body_part)\n    :precondition (and (at ?p cantina) (part_unselected ?part))\n    :effect (and (part_selected ?part) (not (part_unselected ?part)))\n)\n\n(:action choose_specific_part ; choose a specific part for the selected body part\n    :parameters (?p - player ?part - body_part ?specific_part - specific_part)\n    :precondition (and (at ?p cantina) (part_selected ?part) (specific_part_available ?specific_part))\n    :effect (and (part_chosen ?part ?specific_part) (not (part_selected ?part)))\n)\n\n(:action name_character ; name the character\n    :parameters (?p - player ?name - string)\n    :precondition (and (at ?p cantina) (character_nameless))\n    :effect (and (character_named ?name) (not (character_nameless)))\n)\n\n(:action save_and_exit ; save the character and exit\n    :parameters (?p - player)\n    :precondition (and (at ?p cantina) (character_named ?name))\n    :effect (and (character_saved ?name) (not (at ?p cantina)) (at ?p main_menu))\n)\n\n(:action enter_free_play ; enter a completed level and turn on free play\n    :parameters (?p - player ?level - level)\n    :precondition (and (at ?p main_menu) (level_completed ?level))\n    :effect (and (in_free_play ?p ?level) (not (at ?p main_menu)))\n)\n```\n\nExplanation:\n- `select_body_part`: This action allows the player to select a body part of the character.\n- `choose_specific_part`: This action allows the player to choose a specific part for the selected body part.\n- `name_character`: This action allows the player to name the character.\n- `save_and_exit`: This action allows the player to save the character and exit the character creation screen.\n- `enter_free_play`: This action allows the player to enter a completed level and turn on free play."
        ]
    },
    {
        "task": "Spool Knit a Winter Hat",
        "action": [
            "To generate PDDL actions for the task \"Spool Knit a Winter Hat,\" we will break down each step into a corresponding action with preconditions and effects based on the provided descriptions and entity states.\n\n### PDDL Actions\n\n1. **Step 1: Knit eighty-four inches of flat web.**\n\n   ```pddl\n   (:action knit_flat_web\n      :parameters (?p - player ?loc - location ?web - web)\n      :precondition (and (at ?p ?loc) (not (knit ?web)))\n      :effect (and (knit ?web) (length ?web 84))\n   )\n   ```\n\n2. **Step 2: Begin five inches from the end of the web, turn and sew into a rectangular form five inches wide and eight inches long.**\n\n   ```pddl\n   (:action sew_rectangular_form\n      :parameters (?p - player ?web - web)\n      :precondition (and (knit ?web) (length ?web 84) (not (sewn ?web)))\n      :effect (and (sewn ?web) (shape ?web rectangular) (dimensions ?web 5 8))\n   )\n   ```\n\n3. **Step 3: Join the five-inch ends, and draw in the top with the needle and a piece of the material from which the cap was made.**\n\n   ```pddl\n   (:action join_ends_draw_top\n      :parameters (?p - player ?web - web ?needle - needle ?material - material)\n      :precondition (and (sewn ?web) (shape ?web rectangular) (dimensions ?web 5 8) (inventory ?p ?needle) (inventory ?p ?material))\n      :effect (and (joined ?web) (top_drawn ?web))\n   )\n   ```\n\n4. **Step 4: After securing the top, twist and fold the piece of yarn remaining for a cord and fasten a number of strands of yarn through the loop for a tassel.**\n\n   ```pddl\n   (:action secure_top_and_add_tassel\n      :parameters (?p - player ?web - web ?yarn - yarn)\n      :precondition (and (joined ?web) (top_drawn ?web) (inventory ?p ?yarn))\n      :effect (and (secured_top ?web) (has_tassel ?web))\n   )\n   ```\n\n### Explanation\n\n- **knit_flat_web**: This action represents the initial knitting of the web to a specified length. The precondition checks if the web is not yet knit, and the effect ensures the web is marked as knit with the correct length.\n- **sew_rectangular_form**: This action involves sewing the web into a rectangular shape. Preconditions ensure the web is knit and not yet sewn, and effects set the shape and dimensions.\n- **join_ends_draw_top**: This action joins the ends of the web and draws in the top, using a needle and material. Preconditions ensure the web is sewn and the player has necessary tools, while effects indicate the web is joined and the top is drawn.\n- **secure_top_and_add_tassel**: This action secures the top of the hat and adds a tassel. Preconditions ensure the top is drawn and the player has yarn, with effects marking the top as secured and the tassel added.\n\nThese actions follow the guidelines provided and ensure a logical progression through the task of spool knitting a winter hat."
        ]
    },
    {
        "task": "Get on a Bike",
        "action": [
            "Sure, let's generate the PDDL actions for the task \"Get on a Bike\" based on the provided steps and descriptions.\n\nTask: Get on a Bike\n\nSteps:\n1. Swing your non-dominant leg over the shaft of the bike.\n2. Put your dominant foot on the pedal.\n3. Hold on to the handlebars for support and to keep the bike straight.\n4. Keeping your weight center and even, pedal with your feet.\n5. Stopping.\n\nDescriptions:\n- To get on the bike, swing your non-dominant leg over the shaft of the bike.\n- Put your dominant foot on the pedal.\n- Hold on to the handlebars for support and to keep the bike straight.\n- Keeping your weight center and even, pedal with your feet.\n- Stopping.\n\nEntity State:\n-{'bike': {'bike': [{'attribute': 'location', 'before': \"beside person's body | absent\", 'after': \"now between person's legs | present\"}, {'attribute': 'stability', 'before': 'unstable', 'after': 'stable'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'stability', 'before': 'unbalanced', 'after': 'balanced'}, {'attribute': 'orientation', 'before': 'crooked', 'after': 'straight'}, {'attribute': 'movement', 'before': 'still', 'after': 'moving'}, {'attribute': 'stability', 'before': 'stationary', 'after': 'in motion'}, {'attribute': 'stability', 'before': 'in motion | moving', 'after': 'stopped | stationary'}], 'concept_knowledge': ['[[riding a bike]] requires [[a bike]]', '[[a bike]] has [[two wheels]]']}, 'you': {'you': [{'attribute': 'focus', 'before': 'focused on making bracelet', 'after': 'admiring bracelet'}], 'concept_knowledge': ['[[me]] is not [[you]]', '[[body]] is related to [[you]]']}, 'pedals': {'pedals': [{'attribute': 'location', 'before': 'on ground', 'after': 'in air'}, {'attribute': 'location', 'before': 'in air | on ground', 'after': 'on pedal'}, {'attribute': 'placement', 'before': 'on ground', 'after': 'now off ground'}, {'attribute': 'location', 'before': 'on ground', 'after': 'on pedal'}, {'attribute': 'motion', 'before': 'still', 'after': 'moving'}, {'attribute': 'location', 'before': 'on bike', 'after': 'on ground'}, {'attribute': 'placement', 'before': 'on pedal', 'after': 'now on ground'}], 'concept_knowledge': ['[[Bicycles]] have [[pedals]]']}}-{'bike': {'bike': [{'attribute': 'location', 'before': \"beside person's body | absent\", 'after': \"now between person's legs | present\"}, {'attribute': 'stability', 'before': 'unstable', 'after': 'stable'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'stability', 'before': 'unbalanced', 'after': 'balanced'}, {'attribute': 'orientation', 'before': 'crooked', 'after': 'straight'}, {'attribute': 'movement', 'before': 'still', 'after': 'moving'}, {'attribute': 'stability', 'before': 'stationary', 'after': 'in motion'}, {'attribute': 'stability', 'before': 'in motion | moving', 'after': 'stopped | stationary'}], 'concept_knowledge': ['[[riding a bike]] requires [[a bike]]', '[[a bike]] has [[two wheels]]']}, 'you': {'you': [{'attribute': 'focus', 'before': 'focused on making bracelet', 'after': 'admiring bracelet'}], 'concept_knowledge': ['[[me]] is not [[you]]', '[[body]] is related to [[you]]']}, 'pedals': {'pedals': [{'attribute': 'location', 'before': 'on ground', 'after': 'in air'}, {'attribute': 'location', 'before': 'in air | on ground', 'after': 'on pedal'}, {'attribute': 'placement', 'before': 'on ground', 'after': 'now off ground'}, {'attribute': 'location', 'before': 'on ground', 'after': 'on pedal'}, {'attribute': 'motion', 'before': 'still', 'after': 'moving'}, {'attribute': 'location', 'before': 'on bike', 'after': 'on ground'}, {'attribute': 'placement', 'before': 'on pedal', 'after': 'now on ground'}], 'concept_knowledge': ['[[Bicycles]] have [[pedals]]']}}-{'bike': {'bike': [{'attribute': 'location', 'before': \"beside person's body | absent\", 'after': \"now between person's legs | present\"}, {'attribute': 'stability', 'before': 'unstable', 'after': 'stable'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'stability', 'before': 'unbalanced', 'after': 'balanced'}, {'attribute': 'orientation', 'before': 'crooked', 'after': 'straight'}, {'attribute': 'movement', 'before': 'still', 'after': 'moving'}, {'attribute': 'stability', 'before': 'stationary', 'after': 'in motion'}, {'attribute': 'stability', 'before': 'in motion | moving', 'after': 'stopped | stationary'}], 'concept_knowledge': ['[[riding a bike]] requires [[a bike]]', '[[a bike]] has [[two wheels]]']}, 'you': {'you': [{'attribute': 'focus', 'before': 'focused on making bracelet', 'after': 'admiring bracelet'}], 'concept_knowledge': ['[[me]] is not [[you]]', '[[body]] is related to [[you]]']}, 'pedals': {'pedals': [{'attribute': 'location', 'before': 'on ground', 'after': 'in air'}, {'attribute': 'location', 'before': 'in air | on ground', 'after': 'on pedal'}, {'attribute': 'placement', 'before': 'on ground', 'after': 'now off ground'}, {'attribute': 'location', 'before': 'on ground', 'after': 'on pedal'}, {'attribute': 'motion', 'before': 'still', 'after': 'moving'}, {'attribute': 'location', 'before': 'on bike', 'after': 'on ground'}, {'attribute': 'placement', 'before': 'on pedal', 'after': 'now on ground'}], 'concept_knowledge': ['[[Bicycles]] have [[pedals]]']}}\n\nPDDL Actions:\n\n```lisp\n(:action swing_leg_over_bike\n    :parameters (?p - person ?b - bike)\n    :precondition (and (beside ?p ?b) (not (between_legs ?p ?b)))\n    :effect (and (between_legs ?p ?b) (not (beside ?p ?b)))\n)\n\n(:action put_foot_on_pedal\n    :parameters (?p - person ?b - bike ?pedal - pedal)\n    :precondition (and (between_legs ?p ?b) (not (foot_on_pedal ?p ?pedal)))\n    :effect (foot_on_pedal ?p ?pedal)\n)\n\n(:action hold_handlebars\n    :parameters (?p - person ?b - bike)\n    :precondition (and (between_legs ?p ?b) (not (holding_handlebars ?p ?b)))\n    :effect (holding_handlebars ?p ?b)\n)\n\n(:action pedal_bike\n    :parameters (?p - person ?b - bike ?pedal - pedal)\n    :precondition (and (between_legs ?p ?b) (foot_on_pedal ?p ?pedal) (holding_handlebars ?p ?b) (not (in_motion ?b)))\n    :effect (in_motion ?b)\n)\n\n(:action stop_bike\n    :parameters (?p - person ?b - bike)\n    :precondition (in_motion ?b)\n    :effect (not (in_motion ?b))\n)\n```\n\nThese PDDL actions capture the steps needed to get on a bike and ride it, with appropriate preconditions and effects based on the entity states provided."
        ]
    },
    {
        "task": "Change the Oil on a Yamaha Virago XV250",
        "action": [
            "Based on the task \"Change the Oil on a Yamaha Virago XV250\" and the provided steps, here are the corresponding PDDL actions:\n\n### PDDL Actions:\n\n#### Step 1: Remove the bung to let the oil out to drain.\n```lisp\n(:action remove_bung\n    :parameters (?p - person ?b - bung ?bt - bike)\n    :precondition (and (at ?p ?bt) (attached ?b ?bt))\n    :effect (and (not (attached ?b ?bt)) (removed ?b ?bt) (draining ?bt))\n)\n```\n\n#### Step 2: Remove the oil cap to let the oil drain fully and let air in to help drain the old oil out.\n```lisp\n(:action remove_oil_cap\n    :parameters (?p - person ?oc - oil_cap ?ot - oil_tank)\n    :precondition (and (at ?p ?ot) (attached ?oc ?ot))\n    :effect (and (not (attached ?oc ?ot)) (removed ?oc ?ot) (air_in ?ot))\n)\n```\n\n#### Step 3: Remove the oil filter.\n```lisp\n(:action remove_oil_filter\n    :parameters (?p - person ?of - oil_filter ?ot - oil_tank)\n    :precondition (and (at ?p ?ot) (attached ?of ?ot))\n    :effect (and (not (attached ?of ?ot)) (removed ?of ?ot))\n)\n```\n\n#### Step 4: Screw the bung back on.\n```lisp\n(:action screw_bung_back_on\n    :parameters (?p - person ?b - bung ?bt - bike)\n    :precondition (and (at ?p ?bt) (removed ?b ?bt))\n    :effect (and (attached ?b ?bt) (not (removed ?b ?bt)) (not (draining ?bt)))\n)\n```\n\n#### Step 5: Fill the oil back up.\n```lisp\n(:action fill_oil_back_up\n    :parameters (?p - person ?ot - oil_tank ?ob - oil_bottle)\n    :precondition (and (at ?p ?ot) (has_oil ?ob))\n    :effect (and (filled ?ot) (not (has_oil ?ob)))\n)\n```\n\n#### Step 6: Recycle the old oil.\n```lisp\n(:action recycle_old_oil\n    :parameters (?p - person ?oo - old_oil)\n    :precondition (and (has_old_oil ?oo))\n    :effect (and (recycled ?oo) (not (has_old_oil ?oo)))\n)\n```\n\n### Descriptions and Entity States Considered:\n- The actions are designed to follow the logical sequence of changing the oil on a Yamaha Virago XV250.\n- Preconditions ensure that the person is at the correct location and the necessary components are in the required state before performing the action.\n- Effects describe the resulting state changes after the action is performed, such as components being removed or attached, and oil being filled or recycled.\n\n### Notes:\n- The action names are concise and descriptive, reflecting the task steps.\n- Parameters include the person performing the action, the objects involved (bung, oil cap, oil filter, oil tank, oil bottle, old oil), and the bike.\n- Preconditions and effects are derived based on the entity states provided, ensuring accurate representation of the task."
        ]
    },
    {
        "task": "Open a Rusty Bolt",
        "action": [
            "Sure, based on the provided task and steps, here are the PDDL actions:\n\nTask: Open a Rusty Bolt\n\nSteps:\n1. Obtain some fizzy drink.\n2. Pour the fizzy drink over the bolt.\n3. Wipe it clean with kitchen towel.\n4. Replace the rusty bolt.\n\nDescriptions:\n- Obtain some fizzy drink.\n- Pour the fizzy drink over the bolt.\n- Wipe it clean with kitchen towel.\n- The fizzy drink should have dissolved the rust build-up causing the bolt to stick.\n- Replace the rusty bolt.\n\nEntity State:\n- {'towel': {'towel': [{'attribute': 'cleanness', 'before': 'clean | smooth', 'after': 'dirty | sticky'}, {'attribute': 'color', 'before': 'white', 'after': 'orange'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}], 'concept_knowledge': ['[[napkin]] is related to [[towel]]', '[[a towel]] can [[dry hair]]', '*Something you find at [[at hotel]] is [[a towel]]']}, 'faucet': {'faucet': [{'attribute': 'power', 'before': 'off', 'after': 'on'}], 'concept_knowledge': ['You are likely to find [[a faucet]] in [[a bathroom]]']}, 'fizzy drink': {'fizzy drink': [{'attribute': 'cost', 'before': 'for sale in store', 'after': 'purchased from store'}, {'attribute': 'sealing', 'before': 'sealed', 'after': 'open'}, {'attribute': 'availability', 'before': 'unobtained', 'after': 'obtained'}, {'attribute': 'fullness', 'before': 'empty', 'after': 'filled'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'moisture', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'availability', 'before': 'full', 'after': 'empty'}, {'attribute': 'location', 'before': 'in container', 'after': 'on bolt'}, {'attribute': 'location', 'before': 'on bolt', 'after': 'on towel'}], 'concept_knowledge': []}, 'old bolt': {'old bolt': [{'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'texture', 'before': 'rough', 'after': 'sticky'}, {'attribute': 'wetness', 'before': 'wet', 'after': 'dry'}, {'attribute': 'texture', 'before': 'sticky', 'after': 'rough'}, {'attribute': 'cleanness', 'before': 'dirty', 'after': 'cleaner | clean'}, {'attribute': 'movement', 'before': 'still', 'after': 'moving'}, {'attribute': 'age', 'before': 'stuck', 'after': 'unstuck | free'}, {'attribute': 'age', 'before': 'old', 'after': 'new'}, {'attribute': 'location', 'before': 'in machine', 'after': 'on counter'}], 'concept_knowledge': []}}-{'towel': {'towel': [{'attribute': 'cleanness', 'before': 'clean | smooth', 'after': 'dirty | sticky'}, {'attribute': 'color', 'before': 'white', 'after': 'orange'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}], 'concept_knowledge': ['[[napkin]] is related to [[towel]]', '[[a towel]] can [[dry hair]]', '*Something you find at [[at hotel]] is [[a towel]]']}, 'faucet': {'faucet': [{'attribute': 'power', 'before': 'off', 'after': 'on'}], 'concept_knowledge': ['You are likely to find [[a faucet]] in [[a bathroom]]']}, 'fizzy drink': {'fizzy drink': [{'attribute': 'cost', 'before': 'for sale in store', 'after': 'purchased from store'}, {'attribute': 'sealing', 'before': 'sealed', 'after': 'open'}, {'attribute': 'availability', 'before': 'unobtained', 'after': 'obtained'}, {'attribute': 'fullness', 'before': 'empty', 'after': 'filled'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'moisture', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'availability', 'before': 'full', 'after': 'empty'}, {'attribute': 'location', 'before': 'in container', 'after': 'on bolt'}, {'attribute': 'location', 'before': 'on bolt', 'after': 'on towel'}], 'concept_knowledge': []}, 'old bolt': {'old bolt': [{'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'texture', 'before': 'rough', 'after': 'sticky'}, {'attribute': 'wetness', 'before': 'wet', 'after': 'dry'}, {'attribute': 'texture', 'before': 'sticky', 'after': 'rough'}, {'attribute': 'cleanness', 'before': 'dirty', 'after': 'cleaner | clean'}, {'attribute': 'movement', 'before': 'still', 'after': 'moving'}, {'attribute': 'age', 'before': 'stuck', 'after': 'unstuck | free'}, {'attribute': 'age', 'before': 'old', 'after': 'new'}, {'attribute': 'location', 'before': 'in machine', 'after': 'on counter'}], 'concept_knowledge': []}}-{'towel': {'towel': [{'attribute': 'cleanness', 'before': 'clean | smooth', 'after': 'dirty | sticky'}, {'attribute': 'color', 'before': 'white', 'after': 'orange'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}], 'concept_knowledge': ['[[napkin]] is related to [[towel]]', '[[a towel]] can [[dry hair]]', '*Something you find at [[at hotel]] is [[a towel]]']}, 'faucet': {'faucet': [{'attribute': 'power', 'before': 'off', 'after': 'on'}], 'concept_knowledge': ['You are likely to find [[a faucet]] in [[a bathroom]]']}, 'fizzy drink': {'fizzy drink': [{'attribute': 'cost', 'before': 'for sale in store', 'after': 'purchased from store'}, {'attribute': 'sealing', 'before': 'sealed', 'after': 'open'}, {'attribute': 'availability', 'before': 'unobtained', 'after': 'obtained'}, {'attribute': 'fullness', 'before': 'empty', 'after': 'filled'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'moisture', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'availability', 'before': 'full', 'after': 'empty'}, {'attribute': 'location', 'before': 'in container', 'after': 'on bolt'}, {'attribute': 'location', 'before': 'on bolt', 'after': 'on towel'}], 'concept_knowledge': []}, 'old bolt': {'old bolt': [{'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'texture', 'before': 'rough', 'after': 'sticky'}, {'attribute': 'wetness', 'before': 'wet', 'after': 'dry'}, {'attribute': 'texture', 'before': 'sticky', 'after': 'rough'}, {'attribute': 'cleanness', 'before': 'dirty', 'after': 'cleaner | clean'}, {'attribute': 'movement', 'before': 'still', 'after': 'moving'}, {'attribute': 'age', 'before': 'stuck', 'after': 'unstuck | free'}, {'attribute': 'age', 'before': 'old', 'after': 'new'}, {'attribute': 'location', 'before': 'in machine', 'after': 'on counter'}], 'concept_knowledge': []}}\n\nPDDL Actions:\n```pddl\n(:action obtain_fizzy_drink\n    :parameters (?p - player ?d - fizzy_drink ?s - store)\n    :precondition (and (at ?p ?s) (for_sale ?d ?s))\n    :effect (and (not (for_sale ?d ?s)) (inventory ?p ?d))\n)\n\n(:action pour_fizzy_drink_over_bolt\n    :parameters (?p - player ?d - fizzy_drink ?b - old_bolt)\n    :precondition (and (inventory ?p ?d) (at ?p ?b) (sealed ?d))\n    :effect (and (not (sealed ?d)) (on ?d ?b) (wet ?b))\n)\n\n(:action wipe_bolt_with_towel\n    :parameters (?p - player ?t - towel ?b - old_bolt)\n    :precondition (and (inventory ?p ?t) (at ?p ?b) (wet ?b))\n    :effect (and (not (wet ?b)) (clean ?b) (dirty ?t) (wet ?t))\n)\n\n(:action replace_rusty_bolt\n    :parameters (?p - player ?b - old_bolt ?m - machine)\n    :precondition (and (at ?p ?m) (clean ?b))\n    :effect (and (not (in ?b ?m)) (on_counter ?b) (new ?b))\n)\n```\n\nThese actions follow the task steps and entity states provided, ensuring that each action has the necessary preconditions and effects."
        ]
    },
    {
        "task": "Evolve Vulpix in Pok\u00e9mon",
        "action": [
            "To generate PDDL actions for the task \"Evolve Vulpix in Pok\u00e9mon,\" we'll follow the provided steps and entity states. Let's break down the steps and create corresponding PDDL actions:\n\n### Step 1: Catch or trade for a Vulpix.\n**Action:** `capture_or_trade_vulpix`\n- **Parameters:** `(?p - player ?v - vulpix ?loc - location)`\n- **Preconditions:** `(and (at ?p ?loc) (or (wild ?v ?loc) (traded ?v)))`\n- **Effects:** `(and (inventory ?p ?v) (not (wild ?v ?loc)) (owned ?v))`\n\n### Step 2: Find a fire stone (or Ice Stone in Sun/Moon to evolve Alolan Vulpix).\n**Action:** `find_stone`\n- **Parameters:** `(?p - player ?stone - stone ?loc - location)`\n- **Preconditions:** `(and (at ?p ?loc) (or (fire_stone ?stone) (ice_stone ?stone)) (exists ?s (at ?s ?loc)))`\n- **Effects:** `(and (inventory ?p ?stone))`\n\n### Step 3: Go to your bag and select the stone required.\n**Action:** `select_stone`\n- **Parameters:** `(?p - player ?stone - stone)`\n- **Preconditions:** `(and (inventory ?p ?stone) (or (fire_stone ?stone) (ice_stone ?stone)))`\n- **Effects:** `(and (selected ?stone))`\n\n### Step 4: Wait for the evolution animation to pop up.\n**Action:** `trigger_evolution`\n- **Parameters:** `(?p - player ?v - vulpix ?stone - stone)`\n- **Preconditions:** `(and (inventory ?p ?v) (selected ?stone) (or (fire_stone ?stone) (ice_stone ?stone)))`\n- **Effects:** `(and (evolved ?v) (not (selected ?stone)))`\n\nHere are the PDDL actions based on the task and steps provided:\n\n```lisp\n(:action capture_or_trade_vulpix\n    :parameters (?p - player ?v - vulpix ?loc - location)\n    :precondition (and (at ?p ?loc) (or (wild ?v ?loc) (traded ?v)))\n    :effect (and (inventory ?p ?v) (not (wild ?v ?loc)) (owned ?v))\n)\n\n(:action find_stone\n    :parameters (?p - player ?stone - stone ?loc - location)\n    :precondition (and (at ?p ?loc) (or (fire_stone ?stone) (ice_stone ?stone)) (exists ?s (at ?s ?loc)))\n    :effect (and (inventory ?p ?stone))\n)\n\n(:action select_stone\n    :parameters (?p - player ?stone - stone)\n    :precondition (and (inventory ?p ?stone) (or (fire_stone ?stone) (ice_stone ?stone)))\n    :effect (and (selected ?stone))\n)\n\n(:action trigger_evolution\n    :parameters (?p - player ?v - vulpix ?stone - stone)\n    :precondition (and (inventory ?p ?v) (selected ?stone) (or (fire_stone ?stone) (ice_stone ?stone)))\n    :effect (and (evolved ?v) (not (selected ?stone)))\n)\n```\n\nThese actions are designed to reflect the logical flow of evolving a Vulpix using a stone in the Pok\u00e9mon game context."
        ]
    },
    {
        "task": "Get Under the Stage in Dragonball Z Budokai Tenkaichi 2",
        "action": [
            "Based on the task \"Get Under the Stage in Dragonball Z Budokai Tenkaichi 2\" and the provided steps and entity states, I will generate the appropriate PDDL actions to reflect the task's steps and descriptions. Here's how each step can be translated into PDDL actions:\n\n### PDDL Actions\n\n1. **Choose VS Duel**\n\n   ```lisp\n   (:action choose_vs_duel\n       :parameters (?p - player)\n       :precondition (and (option deselected) (population one_player))\n       :effect (and (option selected) (population two_player))\n   )\n   ```\n\n2. **Choose Goku as Player One and Player Two**\n\n   ```lisp\n   (:action choose_goku\n       :parameters (?p1 - player ?p2 - player)\n       :precondition (and (knowledge ?p1 unselected) (knowledge ?p2 unselected))\n       :effect (and (knowledge ?p1 selected) (knowledge ?p2 selected))\n   )\n   ```\n\n3. **Choose Mountain Road as the Stage**\n\n   ```lisp\n   (:action choose_stage\n       :parameters (?s - stage)\n       :precondition (location unspecified)\n       :effect (location specified)\n   )\n   ```\n\n4. **Move to Opposite Ends of the Street Against the Wall**\n\n   ```lisp\n   (:action move_to_wall\n       :parameters (?p1 - player ?p2 - player)\n       :precondition (and (location ?p1 away_from_wall) (location ?p2 away_from_wall) (division together))\n       :effect (and (location ?p1 against_wall) (location ?p2 against_wall) (division separated))\n   )\n   ```\n\nThese actions capture the process of setting up a duel in Dragonball Z Budokai Tenkaichi 2, selecting the characters, stage, and positioning the players appropriately. Each action considers the necessary preconditions and the resulting effects to achieve the task's goals."
        ]
    },
    {
        "task": "Grow a Rose Bush from Rose Bush Cuttings",
        "action": [
            "To generate the PDDL actions for the task \"Grow a Rose Bush from Rose Bush Cuttings,\" we will follow the provided guidelines. Below are the steps and entity states that we will use to create the corresponding PDDL actions:\n\nTask: Grow a Rose Bush from Rose Bush Cuttings\n\nSteps:\n1. Prepare the pot or area in your yard where you plan to plant your clipping.\n2. Take a cutting from the rose bush you would like to grow your new bush from.\n3. Moisten the part of the clipping that you just scraped and dip it into rooting hormone.\n4. Immediately plant the cutting.\n\nDescriptions:\n- Prepare the pot or area in your yard where you plan to plant your clipping.\n- Take a cutting from the rose bush you would like to grow your new bush from.\n- Moisten the part of the clipping that you just scraped and dip it into rooting hormone.\n- Immediately plant the cutting.\n\nEntity State:\n- {'clipping': {'the clipping': [{'attribute': 'location', 'before': 'attached', 'after': 'cut'}, {'attribute': 'location', 'before': 'attached', 'after': 'removed'}, {'attribute': 'moisture', 'before': 'drier | dry', 'after': 'wetter | moister | moistened'}, {'attribute': 'location', 'before': 'attached', 'after': 'removed'}, {'attribute': 'composition', 'before': 'pure', 'after': 'dipped into rooting hormone'}, {'attribute': 'location', 'before': 'attached', 'after': 'removed'}], 'concept_knowledge': []}, 'npc': {'helmet': [{'attribute': 'decoration', 'before': 'bare | plain', 'after': 'camouflaged'}, {'attribute': 'visibility', 'before': 'visible', 'after': 'invisible'}], 'concept_knowledge': []}}\n\nPDDL Actions:\n\n```lisp\n(:action prepare_planting_area\n :parameters (?area - location ?p - player)\n :precondition (at ?p ?area)\n :effect (prepared ?area))\n\n(:action take_cutting\n :parameters (?rosebush - plant ?clipping - cutting ?p - player)\n :precondition (and (attached ?clipping ?rosebush) (has_tool ?p scissors))\n :effect (and (not (attached ?clipping ?rosebush)) (cut ?clipping)))\n\n(:action moisten_and_dip\n :parameters (?clipping - cutting ?p - player ?hormone - substance)\n :precondition (and (cut ?clipping) (has_tool ?p water) (has_tool ?p ?hormone))\n :effect (and (moistened ?clipping) (dipped_in_rooting_hormone ?clipping)))\n\n(:action plant_cutting\n :parameters (?clipping - cutting ?area - location ?p - player)\n :precondition (and (prepared ?area) (moistened ?clipping) (dipped_in_rooting_hormone ?clipping))\n :effect (planted ?clipping ?area))\n```\n\nExplanation:\n1. **prepare_planting_area**: This action prepares the pot or area where the clipping will be planted.\n   - Preconditions: The player must be at the area.\n   - Effects: The area is marked as prepared.\n\n2. **take_cutting**: This action involves taking a cutting from the rose bush.\n   - Preconditions: The clipping must be attached to the rosebush, and the player must have scissors.\n   - Effects: The clipping is no longer attached and is marked as cut.\n\n3. **moisten_and_dip**: This action moistens the part of the clipping and dips it into rooting hormone.\n   - Preconditions: The clipping must be cut, and the player must have water and rooting hormone.\n   - Effects: The clipping is moistened and dipped in rooting hormone.\n\n4. **plant_cutting**: This action plants the prepared clipping in the prepared area.\n   - Preconditions: The area must be prepared, and the clipping must be moistened and dipped in rooting hormone.\n   - Effects: The clipping is planted in the area.\n\nThese actions follow the structure provided in the example and capture the necessary steps and conditions to grow a rose bush from cuttings."
        ]
    },
    {
        "task": "Make a Fairy House in the Woods",
        "action": [
            "To generate the PDDL actions for the task \"Make a Fairy House in the Woods,\" let's break down each step and create corresponding actions based on the provided descriptions and entity states.\n\n### Step 1: Find a small area with slightly damp dirt.\n\n**PDDL Action:**\n\n```lisp\n(:action find_damp_area\n    :parameters (?p - player ?loc - location)\n    :precondition (and (at ?p ?loc) (not (selected ?loc)) (damp ?loc))\n    :effect (and (selected ?loc))\n)\n```\n\n### Step 2: Collect many twigs and sticks.\n\n**PDDL Action:**\n\n```lisp\n(:action collect_sticks\n    :parameters (?p - player ?loc - location ?sticks - stick)\n    :precondition (and (at ?p ?loc) (scattered ?sticks) (not (collected ?sticks)))\n    :effect (and (collected ?sticks) (bundled ?sticks))\n)\n```\n\n### Step 3: Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n\n**PDDL Action:**\n\n```lisp\n(:action form_structure\n    :parameters (?p - player ?loc - location ?sticks - stick ?formation - formation)\n    :precondition (and (at ?p ?loc) (collected ?sticks) (selected ?loc))\n    :effect (and (in_formation ?sticks ?formation))\n)\n```\n\n### Step 4: Build your exterior walls. You can use either a leaf or a wide strip of bark.\n\n**PDDL Action:**\n\n```lisp\n(:action build_walls\n    :parameters (?p - player ?loc - location ?material - material ?sticks - stick)\n    :precondition (and (at ?p ?loc) (in_formation ?sticks) (or (leaf ?material) (bark ?material)))\n    :effect (and (fortified ?sticks) (not (stand-alone ?sticks)))\n)\n```\n\n### Step 5: Decorate.\n\n**PDDL Action:**\n\n```lisp\n(:action decorate_fairy_house\n    :parameters (?p - player ?loc - location ?decor - decoration ?sticks - stick)\n    :precondition (and (at ?p ?loc) (fortified ?sticks))\n    :effect (and (decorated ?sticks ?decor))\n)\n```\n\nThese actions follow the task's logical flow and are designed to work with the given entity states and descriptions. Each action has preconditions and effects that reflect the changes in the state of the world as described in the task."
        ]
    },
    {
        "task": "Make a Pinwheel Wreath",
        "action": [
            "Certainly! Here are the PDDL actions for the task \"Make a Pinwheel Wreath\" based on the provided steps and descriptions.\n\n### Task: Make a Pinwheel Wreath\n\n### Steps:\n1. Select suitable paper to make the pinwheels.\n2. Make enough pinwheels to create a wreath.\n3. Find a suitable base, such as a Styrofoam/cane/cardboard wreath base.\n4. If the wreath base lacks a hanger, add some twine or ribbon to create one.\n5. Assemble the pinwheels onto the wreath base.\n6. Finished.\n\n### Descriptions:\n- Select suitable paper to make the pinwheels.\n- Make enough pinwheels to create a wreath.\n- Find a suitable base, such as a Styrofoam/cane/cardboard wreath base.\n- If the wreath base lacks a hanger, add some twine or ribbon to create one.\n- Assemble the pinwheels onto the wreath base.\n- Finished.\n\n### PDDL Actions:\n```lisp\n(:action select_paper\n    :parameters (?p - player ?paper - paper)\n    :precondition (and (inventory ?p ?paper))\n    :effect (selected ?paper)\n)\n\n(:action make_pinwheels\n    :parameters (?p - player ?paper - paper ?pinwheel - pinwheel)\n    :precondition (and (selected ?paper) (inventory ?p ?paper))\n    :effect (and (inventory ?p ?pinwheel) (not (inventory ?p ?paper)))\n)\n\n(:action find_wreath_base\n    :parameters (?p - player ?wreath_base - wreath_base)\n    :precondition (inventory ?p ?wreath_base)\n    :effect (selected ?wreath_base)\n)\n\n(:action add_hanger\n    :parameters (?p - player ?wreath_base - wreath_base ?hanger - hanger)\n    :precondition (and (selected ?wreath_base) (inventory ?p ?hanger) (not (has_hanger ?wreath_base)))\n    :effect (has_hanger ?wreath_base)\n)\n\n(:action assemble_pinwheels\n    :parameters (?p - player ?pinwheel - pinwheel ?wreath_base - wreath_base)\n    :precondition (and (inventory ?p ?pinwheel) (selected ?wreath_base))\n    :effect (and (assembled ?wreath_base ?pinwheel) (not (inventory ?p ?pinwheel)))\n)\n\n(:action finish_wreath\n    :parameters (?p - player ?wreath_base - wreath_base)\n    :precondition (and (assembled ?wreath_base ?pinwheel))\n    :effect (completed ?wreath_base)\n)\n```\n\n### Entity State:\n```json\n{\n  \"p\": {\n    \"you\": [\n      {\n        \"attribute\": \"focus\",\n        \"before\": \"focused on making bracelet\",\n        \"after\": \"admiring bracelet\"\n      }\n    ],\n    \"concept_knowledge\": [\n      \"[[P]] is a translation of [[P]]\"\n    ]\n  },\n  \"wreath\": {\n    \"wreath\": [\n      {\n        \"attribute\": \"status\",\n        \"before\": \"in progress\",\n        \"after\": \"completed\"\n      }\n    ],\n    \"concept_knowledge\": []\n  },\n  \"w\": {\n    \"bowl\": [\n      {\n        \"attribute\": \"cleanness\",\n        \"before\": \"clean\",\n        \"after\": \"dirty\"\n      },\n      {\n        \"attribute\": \"weight\",\n        \"before\": \"heavy\",\n        \"after\": \"light\"\n      }\n    ],\n    \"concept_knowledge\": [\n      \"[[W]] is a translation of [[W]]\",\n      null\n    ]\n  }\n}\n```\n\nThese PDDL actions should capture the steps and logic needed to create a pinwheel wreath, considering the preconditions and effects based on the entity states provided."
        ]
    },
    {
        "task": "Be a Spy With Friends",
        "action": [
            "Certainly! Let's generate PDDL actions for the task \"Be a Spy With Friends\" based on the provided steps and entity states.\n\n### PDDL Actions:\n\n1. **Set Up Spy Group**\n   ```lisp\n   (:action setup_spy_group\n      :parameters (?p - player ?group - spy_group)\n      :precondition (and (not (group_formed ?group)))\n      :effect (and (group_formed ?group) (trustworthy ?group))\n   )\n   ```\n\n2. **Establish Base**\n   ```lisp\n   (:action establish_base\n      :parameters (?p - player ?base - location)\n      :precondition (and (has_group ?p) (not (base_established ?base)))\n      :effect (and (base_established ?base) (secure ?base))\n   )\n   ```\n\n3. **Gather Equipment**\n   ```lisp\n   (:action gather_equipment\n      :parameters (?p - player ?eq - equipment)\n      :precondition (and (has_group ?p) (not (organized ?eq)))\n      :effect (and (organized ?eq) (ready_for_mission ?eq))\n   )\n   ```\n\n4. **Find First Victim**\n   ```lisp\n   (:action find_first_victim\n      :parameters (?p - player ?v - victim)\n      :precondition (and (has_group ?p) (not (target_identified ?v)))\n      :effect (and (target_identified ?v) (target_watched ?v))\n   )\n   ```\n\n### Explanation:\n\n- **Set Up Spy Group**: This action forms a trustworthy spy group. The precondition checks if the group is not already formed, and the effect marks the group as formed and trustworthy.\n\n- **Establish Base**: This action establishes a secure base for the spy group. The precondition ensures the player is part of a group and the base is not yet established. The effect secures the base.\n\n- **Gather Equipment**: This action organizes and prepares the equipment for use. The precondition checks if the player has a group and the equipment is not yet organized. The effect organizes the equipment and makes it ready for missions.\n\n- **Find First Victim**: This action identifies the first target to be watched. The precondition ensures the player has a group and the target is not yet identified. The effect marks the target as identified and watched.\n\nThese actions align with the task and descriptions provided, ensuring each step is logically translated into PDDL."
        ]
    },
    {
        "task": "Polish a Faucet With a Lemon",
        "action": [
            "Based on the given task and steps, here are the PDDL actions for polishing a faucet with a lemon:\n\nTask: Polish a Faucet With a Lemon\n\nSteps:\n1. Cut a lemon in half.\n2. Squeeze out the juice.\n3. Take the squeezed-out lemon half and rub vigorously over the faucets.\n4. Wash the tap after scouring with the lemon half.\n\nDescriptions:\n- Cut a lemon in half.\n- Squeeze out the juice.\n- Take the squeezed-out lemon half and rub vigorously over the faucets.\n- Wash the tap after scouring with the lemon half.\n\nEntity State:\n- {'lemon': {'location': 'kitchen', 'condition': 'whole'}, 'npc': {'location': 'kitchen'}, 'faucet': {'location': 'bathroom', 'condition': 'dirty'}, 'water': {'location': 'pipes', 'condition': 'accessible'}}\n\nPDDL Actions:\n\n```pddl\n(:action cut_lemon\n    :parameters (?npc - person ?lemon - lemon ?kitchen - location)\n    :precondition (and (at ?npc ?kitchen) (at ?lemon ?kitchen) (whole ?lemon))\n    :effect (and (not (whole ?lemon)) (cut ?lemon))\n)\n\n(:action squeeze_lemon\n    :parameters (?npc - person ?lemon - lemon ?kitchen - location)\n    :precondition (and (at ?npc ?kitchen) (at ?lemon ?kitchen) (cut ?lemon))\n    :effect (and (squeezed ?lemon))\n)\n\n(:action rub_lemon_on_faucet\n    :parameters (?npc - person ?lemon - lemon ?faucet - faucet ?bathroom - location)\n    :precondition (and (at ?npc ?bathroom) (at ?faucet ?bathroom) (squeezed ?lemon) (dirty ?faucet))\n    :effect (and (not (dirty ?faucet)) (clean ?faucet))\n)\n\n(:action wash_faucet\n    :parameters (?npc - person ?faucet - faucet ?bathroom - location ?water - water)\n    :precondition (and (at ?npc ?bathroom) (at ?faucet ?bathroom) (clean ?faucet) (accessible ?water))\n    :effect (and (washed ?faucet))\n)\n```\n\nExplanation of Actions:\n1. **cut_lemon**: This action involves cutting a whole lemon in half. Preconditions ensure the NPC and lemon are in the kitchen, and the lemon is whole. The effect is that the lemon is no longer whole but cut.\n2. **squeeze_lemon**: This action involves squeezing the juice out of the cut lemon. Preconditions ensure the NPC and cut lemon are in the kitchen. The effect is that the lemon is squeezed.\n3. **rub_lemon_on_faucet**: This action involves rubbing the squeezed lemon on the dirty faucet. Preconditions ensure the NPC, squeezed lemon, and dirty faucet are in the bathroom. The effect is that the faucet becomes clean.\n4. **wash_faucet**: This action involves washing the cleaned faucet. Preconditions ensure the NPC, cleaned faucet, and accessible water are in the bathroom. The effect is that the faucet is washed.\n\nThese actions capture the intent and logic of each step in the task of polishing a faucet with a lemon."
        ]
    },
    {
        "task": "Make a Wreath with Clothes Hangers",
        "action": [
            "Based on the provided task and steps, here are the PDDL actions for making a wreath with clothes hangers:\n\n### Task: Make a Wreath with Clothes Hangers\n\n#### Steps:\n1. Untwist wire hanger and shape into a circle, using pliers as needed.\n2. Gently crumple 3\" squares of wax paper or crepe paper and thread hanger through the center of each square.\n3. When you have threaded enough squares to fill the length of the hanger, gently push squares away from ends and use pliers to twist ends together.\n4. Gently slide squares of paper back toward the joined ends of the wire hanger, scrunching paper more for additional fullness.\n\n#### PDDL Actions:\n\n```lisp\n(:action untwist_and_shape_hanger\n    :parameters (?p - player ?hanger - hanger ?pliers - pliers)\n    :precondition (and (at ?p ?hanger) (at ?p ?pliers) (straight ?hanger) (inventory ?p ?pliers))\n    :effect (and (twisted ?hanger) (not (straight ?hanger)) (shaped ?hanger circle))\n)\n\n(:action crumple_and_thread_squares\n    :parameters (?p - player ?hanger - hanger ?square - paper_square)\n    :precondition (and (at ?p ?hanger) (inventory ?p ?square) (shaped ?hanger circle))\n    :effect (and (threaded ?hanger ?square) (not (inventory ?p ?square)))\n)\n\n(:action fill_hanger_with_squares\n    :parameters (?p - player ?hanger - hanger ?square - paper_square)\n    :precondition (and (at ?p ?hanger) (threaded ?hanger ?square))\n    :effect (and (filled ?hanger) (not (threaded ?hanger ?square)))\n)\n\n(:action twist_hanger_ends\n    :parameters (?p - player ?hanger - hanger ?pliers - pliers)\n    :precondition (and (at ?p ?hanger) (at ?p ?pliers) (inventory ?p ?pliers) (filled ?hanger))\n    :effect (and (ends_twisted ?hanger) (not (filled ?hanger)))\n)\n\n(:action slide_and_scrunch_squares\n    :parameters (?p - player ?hanger - hanger ?square - paper_square)\n    :precondition (and (at ?p ?hanger) (ends_twisted ?hanger) (threaded ?hanger ?square))\n    :effect (and (scrunched ?hanger ?square) (not (threaded ?hanger ?square)))\n)\n\n(:action complete_wreath\n    :parameters (?p - player ?hanger - hanger ?wreath - wreath)\n    :precondition (and (at ?p ?hanger) (ends_twisted ?hanger) (scrunched ?hanger ?square))\n    :effect (and (completed ?wreath) (not (ends_twisted ?hanger)) (not (scrunched ?hanger ?square)))\n)\n```\n\n### Entity State Considerations:\n- The hanger starts in a straight shape and is shaped into a circle.\n- Paper squares are crumpled and threaded onto the hanger.\n- The hanger is filled with squares and the ends are twisted together using pliers.\n- The squares are scrunched for fullness.\n- The wreath is completed with the final action.\n\nThese actions capture the logic and sequence necessary to create a wreath using a wire hanger and paper squares, based on the steps and descriptions provided."
        ]
    },
    {
        "task": "Grow Dwarf Balsam Fir",
        "action": [
            "Here are the PDDL actions for the task \"Grow Dwarf Balsam Fir\":\n\nTask: Grow Dwarf Balsam Fir\n\nSteps:\n1. Choose the plant from a nursery or garden center.\n2. Select a broad-sized container, preferably with a rounded shape.\n3. Choose the potting soil.\n4. Plant the fir in the container.\n5. Water the plant until it is well established.\n6. Re-pot occasionally.\n\nEntity State:\n- Container: {'attribute': 'location', 'before': 'in cabinet', 'after': 'on countertop'}, {'attribute': 'volume', 'before': 'empty', 'after': 'fuller'}, {'attribute': 'location', 'before': 'on countertop', 'after': 'on table'}\n- Garden Center: {'attribute': 'knowledge', 'before': 'unselected', 'after': 'selected'}\n- Fir: {'attribute': 'location', 'before': 'in garden', 'after': 'in hand'}, {'attribute': 'cost', 'before': 'owned by garden center', 'after': 'purchased from garden center'}, {'attribute': 'location', 'before': 'at nursery', 'after': 'in possession'}, {'attribute': 'weight', 'before': 'heavier', 'after': 'lighter'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'container', 'before': 'empty', 'after': 'full'}, {'attribute': 'location', 'before': 'in hand', 'after': 'in container'}, {'attribute': 'watered', 'before': 'dry', 'after': 'wet'}, {'attribute': 'contentment', 'before': 'thirsty', 'after': 'fed'}\n- Nursery: {'attribute': 'availability', 'before': 'unmade', 'after': 'created'}\n- Soil: {'attribute': 'location', 'before': 'in bag', 'after': 'in container'}\n\nPDDL Actions:\n\n(:action choose_plant\n    :parameters (?p - player ?plant - fir ?loc - garden_center)\n    :precondition (and (at ?p ?loc) (available ?plant ?loc))\n    :effect (and (inventory ?p ?plant) (not (available ?plant ?loc)))\n)\n\n(:action select_container\n    :parameters (?p - player ?container - container)\n    :precondition (and (at ?container in_cabinet) (empty ?container))\n    :effect (and (at ?container on_countertop) (not (at ?container in_cabinet)))\n)\n\n(:action choose_soil\n    :parameters (?p - player ?soil - soil ?loc - garden_center)\n    :precondition (and (at ?p ?loc) (available ?soil ?loc))\n    :effect (and (inventory ?p ?soil) (not (available ?soil ?loc)))\n)\n\n(:action plant_fir\n    :parameters (?p - player ?plant - fir ?container - container ?soil - soil)\n    :precondition (and (inventory ?p ?plant) (at ?container on_countertop) (inventory ?p ?soil) (not (planted ?plant)))\n    :effect (and (planted ?plant ?container) (not (inventory ?p ?plant)) (not (inventory ?p ?soil)))\n)\n\n(:action water_plant\n    :parameters (?p - player ?plant - fir ?container - container)\n    :precondition (and (planted ?plant ?container) (dry ?plant))\n    :effect (and (wet ?plant) (not (dry ?plant)))\n)\n\n(:action repot_plant\n    :parameters (?p - player ?plant - fir ?old_container - container ?new_container - container)\n    :precondition (and (planted ?plant ?old_container) (empty ?new_container))\n    :effect (and (planted ?plant ?new_container) (not (planted ?plant ?old_container)) (empty ?old_container))\n)"
        ]
    },
    {
        "task": "Fold Bath Towels for Quick Hanging at Home",
        "action": [
            "Sure, let's generate PDDL actions based on the task and steps provided.\n\nTask: Fold Bath Towels for Quick Hanging at Home\n\nSteps:\n1. Fold the towel in thirds lengthwise.\n2. Fold in half, and then in half again.\n3. Store the towel in the linen closet.\n4. To go from the closet for hanging, simply unfold the final fold and hang on the towel rack.\n\nDescriptions:\n- Fold the towel in thirds lengthwise.\n- Fold in half, and then in half again.\n- Store the towel in the linen closet.\n- To go from the closet for hanging, simply unfold the final fold and hang on the towel rack.\n\nEntity State:\n-{'towel': {'towel': [{'attribute': 'cleanness', 'before': 'clean | smooth', 'after': 'dirty | sticky'}, {'attribute': 'color', 'before': 'white', 'after': 'orange'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}], 'concept_knowledge': ['[[napkin]] is related to [[towel]]', '[[a towel]] can [[dry hair]]', '*Something you find at [[at hotel]] is [[a towel]]']}}\n\nPDDL Actions:\n\n```pddl\n(:action fold_lengthwise\n    :parameters (?t - towel ?p - person)\n    :precondition (and (at ?t ?p) (clean ?t))\n    :effect (folded_lengthwise ?t)\n)\n\n(:action fold_half\n    :parameters (?t - towel ?p - person)\n    :precondition (and (at ?t ?p) (folded_lengthwise ?t))\n    :effect (folded_half ?t)\n)\n\n(:action fold_half_again\n    :parameters (?t - towel ?p - person)\n    :precondition (and (at ?t ?p) (folded_half ?t))\n    :effect (folded_half_again ?t)\n)\n\n(:action store_in_closet\n    :parameters (?t - towel ?c - closet ?p - person)\n    :precondition (and (at ?t ?p) (folded_half_again ?t) (at ?c ?p))\n    :effect (and (stored ?t ?c) (not (at ?t ?p)))\n)\n\n(:action unfold_and_hang\n    :parameters (?t - towel ?r - rack ?c - closet ?p - person)\n    :precondition (and (stored ?t ?c) (at ?c ?p) (at ?r ?p))\n    :effect (and (hung ?t ?r) (not (stored ?t ?c)))\n)\n```\n\nExplanation:\n- `fold_lengthwise`: This action represents folding the towel in thirds lengthwise.\n- `fold_half`: This action represents folding the towel in half after it has been folded lengthwise.\n- `fold_half_again`: This action represents folding the towel in half again after the first half fold.\n- `store_in_closet`: This action represents storing the folded towel in the linen closet.\n- `unfold_and_hang`: This action represents unfolding the final fold and hanging the towel on the towel rack.\n\nEach action has parameters (objects involved), preconditions (conditions that must be true before the action), and effects (outcomes of the action)."
        ]
    },
    {
        "task": "Make Seasoned Salt",
        "action": [
            "Based on the provided task, steps, descriptions, and entity state information, I will generate the corresponding PDDL actions for the task \"Make Seasoned Salt.\"\n\nTask: Make Seasoned Salt\n\nSteps:\n1. Grind the ingredients together in a mortar and pestle.\n2. Mix the ingredients together thoroughly.\n3. Transfer to a storage container as needed.\n4. Pour into an air-tight container with a lid.\n\nDescriptions:\n- Mix the ingredients together thoroughly.\n- Pour into an air-tight container with a lid.\n- It goes well in dips, salad dressings, soups, and on sandwiches.\n- Grind the ingredients together in a mortar and pestle.\n- Transfer to a storage container as needed.\n\nEntity State:\n- container: {'attribute': 'location', 'before': 'in cabinet', 'after': 'on countertop'}, {'attribute': 'volume', 'before': 'empty', 'after': 'fuller'}, {'attribute': 'location', 'before': 'on countertop', 'after': 'on table'}\n- mortar and pestle: {'attribute': 'fullness', 'before': 'empty', 'after': 'full'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'location', 'before': 'absent', 'after': 'present'}, {'attribute': 'status', 'before': 'idle | on table | absent', 'after': 'used | in mortar | present'}\n- mixture: {'attribute': 'mixture', 'before': 'separate', 'after': 'mixed'}, {'attribute': 'location', 'before': 'in cabinet', 'after': 'on stove top'}, {'attribute': 'cleanness', 'before': 'cleaner | clean', 'after': 'dirtier | dirty'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'fullness', 'before': 'empty | emptier', 'after': 'fuller'}, {'attribute': 'composition', 'before': 'separate', 'after': 'mixed'}, {'attribute': 'location', 'before': 'in drawer', 'after': 'in pan'}, {'attribute': 'fullness', 'before': 'emptier', 'after': 'fuller'}, {'attribute': 'composition', 'before': 'separate', 'after': 'mixed'}, {'attribute': 'location', 'before': 'in containter | in its place | in  its place', 'after': 'on macaroni | in pan'}, {'attribute': 'temperature', 'before': 'cooler', 'after': 'hotter | warmer'}, {'attribute': 'cleanness', 'before': 'cleaner', 'after': 'dirtier'}, {'attribute': 'location', 'before': 'farther east', 'after': 'farther west'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}\n- npc: {'attribute': 'location', 'before': 'further out', 'after': 'in'}, {'attribute': 'location', 'before': 'out', 'after': 'hidden'}, {'attribute': 'focus', 'before': 'pulling out pistol', 'after': 'investigating'}, {'attribute': 'focus', 'before': 'investigating routes', 'after': 'waiting'}, {'attribute': 'location', 'before': 'in hiding spot', 'after': 'now at bomb'}, {'attribute': 'focus', 'before': 'hiding', 'after': 'defusing'}\n\nPDDL Actions:\n\n```lisp\n(:action grind_ingredients\n  :parameters (?p - player ?m - mortar_pestle)\n  :precondition (and (at ?p kitchen) (at ?m kitchen) (clean ?m) (empty ?m))\n  :effect (and (full ?m) (dirty ?m) (used ?m))\n)\n\n(:action mix_ingredients\n  :parameters (?p - player ?m - mortar_pestle)\n  :precondition (and (at ?p kitchen) (full ?m) (used ?m))\n  :effect (and (mixed ?m))\n)\n\n(:action transfer_to_storage\n  :parameters (?p - player ?m - mortar_pestle ?c - container)\n  :precondition (and (at ?p kitchen) (mixed ?m) (at ?c kitchen) (empty ?c))\n  :effect (and (full ?c) (empty ?m))\n)\n\n(:action pour_into_container\n  :parameters (?p - player ?c - container ?airtight_c - container)\n  :precondition (and (at ?p kitchen) (full ?c) (empty ?airtight_c))\n  :effect (and (full ?airtight_c) (empty ?c) (airtight ?airtight_c))\n)\n```\n\nThese actions represent the steps to make seasoned salt, considering the descriptions and entity states provided."
        ]
    },
    {
        "task": "Make a Pancake Mix Container from a Recycled Ketchup Bottle",
        "action": [
            "Sure, let's break down the task into PDDL actions based on the provided steps and entity states.\n\n### Task: Make a Pancake Mix Container from a Recycled Ketchup Bottle\n\n### Steps:\n1. Scrub the ketchup bottle thoroughly.\n2. Place the funnel over the mouth of the bottle.\n3. Pour pancake batter through the funnel into the empty ketchup bottle.\n4. Replace the lid and label the bottle.\n5. Place the bottle in the refrigerator.\n6. Finished.\n\n### Descriptions:\n- Scrub the ketchup bottle thoroughly.\n- Place the funnel over the mouth of the bottle.\n- Pour pancake batter through the funnel into the empty ketchup bottle.\n- Replace the lid and label the bottle.\n- Place the bottle in refrigerator.\n- Finished.\n\n### PDDL Actions:\n\n#### Action 1: Scrub the Ketchup Bottle\n```lisp\n(:action scrub\n    :parameters (?p - player ?b - bottle)\n    :precondition (and (at ?p ?b) (cleanness ?b dirty))\n    :effect (and (cleanness ?b clean) (wetness ?b wet))\n)\n```\n\n#### Action 2: Place the Funnel\n```lisp\n(:action place_funnel\n    :parameters (?p - player ?f - funnel ?b - bottle)\n    :precondition (and (at ?p ?f) (at ?p ?b) (location ?f in_drawer))\n    :effect (location ?f over_mouth_of_bottle)\n)\n```\n\n#### Action 3: Pour Pancake Batter\n```lisp\n(:action pour_batter\n    :parameters (?p - player ?f - funnel ?b - bottle ?batter - batter)\n    :precondition (and (at ?p ?b) (location ?f over_mouth_of_bottle) (emptiness ?b empty))\n    :effect (and (emptiness ?b full) (weight ?b heavy))\n)\n```\n\n#### Action 4: Replace Lid and Label Bottle\n```lisp\n(:action replace_lid_and_label\n    :parameters (?p - player ?b - bottle ?lid - lid)\n    :precondition (and (at ?p ?b) (emptiness ?b full) (orientation ?b open))\n    :effect (and (orientation ?b closed_with_lid) (clarity ?b written_on))\n)\n```\n\n#### Action 5: Place Bottle in Refrigerator\n```lisp\n(:action place_in_refrigerator\n    :parameters (?p - player ?b - bottle ?r - refrigerator)\n    :precondition (and (at ?p ?b) (location ?b on_counter) (orientation ?b closed_with_lid))\n    :effect (and (location ?b in_refrigerator) (temperature ?b cold))\n)\n```\n\n### Summary\nThe steps have been translated into PDDL actions with defined parameters, preconditions, and effects based on the entity states provided. Each action captures the necessary conditions and outcomes to complete the task of making a pancake mix container from a recycled ketchup bottle."
        ]
    },
    {
        "task": "Make a Banana Strawberry Rum Smoothie",
        "action": [
            "Sure, let's generate the PDDL actions based on the provided task and steps.\n\nTask: Make a Banana Strawberry Rum Smoothie\n\nSteps:\n1. Place the yogurt, bananas, and sorbet in a blender.\n2. Blend the mixture until it's smooth in texture.\n3. Pour the rum in and quickly blend again.\n4. Pour the smoothie into chilled glasses.\n5. Garnish each glass with a strawberry.\n\nDescriptions:\n- Place the yogurt, bananas, and sorbet in a blender.\n- Blend the mixture until it's smooth in texture.\n- Pour the rum in and quickly blend again.\n- Pour the smoothie into chilled glasses.\n- Garnish each glass with a strawberry.\n\nEntity State:\n- The blender's attributes and changes before and after actions.\n- The glasses' attributes and changes before and after actions.\n- The yogurt's location changes.\n- The bananas' location changes.\n- The sorbet's location changes.\n- The rum's location changes.\n- The strawberries' location changes.\n\nPDDL Actions:\n\n```pddl\n(:action place_ingredients_in_blender\n    :parameters (?p - player ?y - yogurt ?b - bananas ?s - sorbet ?bl - blender)\n    :precondition (and (inventory ?p ?y) (inventory ?p ?b) (inventory ?p ?s) (at ?p ?bl))\n    :effect (and (in_blender ?bl ?y) (in_blender ?bl ?b) (in_blender ?bl ?s) \n                 (not (inventory ?p ?y)) (not (inventory ?p ?b)) (not (inventory ?p ?s)))\n)\n\n(:action blend_mixture\n    :parameters (?p - player ?bl - blender)\n    :precondition (and (at ?p ?bl) (in_blender ?bl ?y) (in_blender ?bl ?b) (in_blender ?bl ?s))\n    :effect (and (blended ?bl) (texture ?bl smooth))\n)\n\n(:action add_rum_and_blend\n    :parameters (?p - player ?r - rum ?bl - blender)\n    :precondition (and (inventory ?p ?r) (at ?p ?bl) (blended ?bl))\n    :effect (and (in_blender ?bl ?r) (not (inventory ?p ?r)) (blended ?bl))\n)\n\n(:action pour_smoothie\n    :parameters (?p - player ?bl - blender ?g - glass)\n    :precondition (and (at ?p ?bl) (blended ?bl) (at ?p ?g) (chilled ?g))\n    :effect (and (in_glass ?g smoothie) (not (in_blender ?bl ?y)) (not (in_blender ?bl ?b)) \n                 (not (in_blender ?bl ?s)) (not (in_blender ?bl ?r)))\n)\n\n(:action garnish_glass\n    :parameters (?p - player ?st - strawberry ?g - glass)\n    :precondition (and (inventory ?p ?st) (at ?p ?g) (in_glass ?g smoothie))\n    :effect (and (garnished ?g ?st) (not (inventory ?p ?st)))\n)\n```\n\nThis set of PDDL actions captures the steps and the descriptions provided for making a Banana Strawberry Rum Smoothie. Each action includes the necessary parameters, preconditions, and effects to ensure the task is performed correctly."
        ]
    },
    {
        "task": "Make Your Den Look Like a Home on Animal Jam (Non Members)",
        "action": [
            "Based on the provided task and steps, here are the corresponding PDDL actions:\n\n### PDDL Actions:\n\n#### Action 1: Acquire Gems\n```pddl\n(:action acquire_gems\n    :parameters (?p - player ?g - gems)\n    :precondition (and (not (acquired ?g)))\n    :effect (and (acquired ?g))\n)\n```\n\n#### Action 2: Select Area\n```pddl\n(:action select_area\n    :parameters (?p - player ?a - area)\n    :precondition (and (not (selected ?a)))\n    :effect (and (selected ?a))\n)\n```\n\n#### Action 3: Purchase Stuff\n```pddl\n(:action purchase_stuff\n    :parameters (?p - player ?s - stuff ?g - gems)\n    :precondition (and (acquired ?g) (not (in_home ?s)))\n    :effect (and (in_home ?s))\n)\n```\n\n#### Action 4: Create Kids Room\n```pddl\n(:action create_kids_room\n    :parameters (?p - player ?k - kids_room)\n    :precondition (and (not (created ?k)))\n    :effect (and (created ?k))\n)\n```\n\n#### Action 5: Create Master Bedroom\n```pddl\n(:action create_master_bedroom\n    :parameters (?p - player ?m - master_bedroom)\n    :precondition (and (not (created ?m)))\n    :effect (and (created ?m))\n)\n```\n\n#### Action 6: Create Living/Dining Room\n```pddl\n(:action create_living_dining_room\n    :parameters (?p - player ?l - living_dining_room)\n    :precondition (and (not (created ?l)))\n    :effect (and (created ?l))\n)\n```\n\n#### Action 7: Create Outside Area\n```pddl\n(:action create_outside_area\n    :parameters (?p - player ?o - outside_area)\n    :precondition (and (not (created ?o)))\n    :effect (and (created ?o))\n)\n```\n\n#### Action 8: Keep Family Safe\n```pddl\n(:action keep_family_safe\n    :parameters (?p - player ?f - family)\n    :precondition (and (created ?k) (created ?m) (created ?l) (created ?o))\n    :effect (and (safe ?f))\n)\n```\n\nThese actions capture the logic and intent of each step required to make your den look like a home on Animal Jam for non-members. Each action has been defined with appropriate parameters, preconditions, and effects based on the task and descriptions provided."
        ]
    },
    {
        "task": "Make Taco Filling",
        "action": [
            "Sure, here are the PDDL actions based on the task and steps provided:\n\nTask: Make Taco Filling\n\nSteps:\n1. Brown the meat and the onion in a medium sized frying pan.\n2. Drain the excess fat.\n3. Add the remaining ingredients (except for the hot sauce) and simmer for fifteen minutes.\n4. Finished.\n\nDescriptions:\n- Brown the meat and the onion in a medium sized frying pan.\n- Drain the excess fat.\n- Add the remaining ingredients (except for the hot sauce) and simmer for fifteen minutes.\n- Finished.\n\nEntity State:\n-{'pot': {'pot': [{'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'location', 'before': 'in the cupboard | in the cabinet', 'after': 'on the stovetop | on the stove top'}, {'attribute': 'temperature', 'before': 'cool', 'after': 'hot'}], 'concept_knowledge': ['[[-gryde]] is a translation of [[pot]]', 'You are likely to find [[a ficus]] in [[a pot]]', '[[a pot]] can be used to [[make soup]]']}, 'wreath': {'wreath': [{'attribute': 'status', 'before': 'in progress', 'after': 'completed'}], 'concept_knowledge': []}, 'faucet': {'faucet': [{'attribute': 'power', 'before': 'off', 'after': 'on'}], 'concept_knowledge': ['You are likely to find [[a faucet]] in [[a bathroom]]']}, 'water': {'boiling pot': [{'attribute': 'temperature', 'before': 'cold', 'after': 'hote'}, {'attribute': 'fullness', 'before': 'emptier', 'after': 'fuller'}, {'attribute': 'location', 'before': 'in pipes', 'after': 'out of faucet'}], 'concept_knowledge': ['You are likely to find [[a fish]] in [[water]].', '[[river]] is related to [[water]]', '[[rain]] is [[water]]', 'You can use [[water]] to [[drink]]', '[[Water]] is [[liquid]]']}, 'canola oil': {'funnel': [{'attribute': 'location', 'before': 'in drawer | in cupboard | on table', 'after': 'on bottle | in bottle | over mouth of bottle'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}], 'concept_knowledge': []}, 'stove': {'stove knob': [{'attribute': 'temperature', 'before': 'cool | cold', 'after': 'hot'}, {'attribute': 'power', 'before': 'off', 'after': 'on'}, {'attribute': 'electric conductivity', 'before': 'turned off', 'after': 'turned on'}, {'attribute': 'orientation', 'before': 'in the off position', 'after': 'in the on position'}, {'attribute': 'temperature', 'before': 'medium-low', 'after': 'low'}], 'concept_knowledge': ['[[a stove]] can [[heat food]]', 'You can use [[a stove]] to [[cook]]', 'You are likely to find [[a stove]] in [[a house]]', '[[Stove]] is [[hot]]', '[[range]] is related to [[stove]]']}, 'npc': {'helmet': [{'attribute': 'decoration', 'before': 'bare | plain', 'after': 'camouflaged'}, {'attribute': 'visibility', 'before': 'visible', 'after': 'invisible'}], 'concept_knowledge': []}}-{'pot': {'pot': [{'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'location', 'before': 'in the cupboard | in the cabinet', 'after': 'on the stovetop | on the stove top'}, {'attribute': 'temperature', 'before': 'cool', 'after': 'hot'}], 'concept_knowledge': ['[[-gryde]] is a translation of [[pot]]', 'You are likely to find [[a ficus]] in [[a pot]]', '[[a pot]] can be used to [[make soup]]']}, 'wreath': {'wreath': [{'attribute': 'status', 'before': 'in progress', 'after': 'completed'}], 'concept_knowledge': []}, 'faucet': {'faucet': [{'attribute': 'power', 'before': 'off', 'after': 'on'}], 'concept_knowledge': ['You are likely to find [[a faucet]] in [[a bathroom]]']}, 'water': {'boiling pot': [{'attribute': 'temperature', 'before': 'cold', 'after': 'hote'}, {'attribute': 'fullness', 'before': 'emptier', 'after': 'fuller'}, {'attribute': 'location', 'before': 'in pipes', 'after': 'out of faucet'}], 'concept_knowledge': ['You are likely to find [[a fish]] in [[water]].', '[[river]] is related to [[water]]', '[[rain]] is [[water]]', 'You can use [[water]] to [[drink]]', '[[Water]] is [[liquid]]']}, 'canola oil': {'funnel': [{'attribute': 'location', 'before': 'in drawer | in cupboard | on table', 'after': 'on bottle | in bottle | over mouth of bottle'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}], 'concept_knowledge': []}, 'stove': {'stove knob': [{'attribute': 'temperature', 'before': 'cool | cold', 'after': 'hot'}, {'attribute': 'power', 'before': 'off', 'after': 'on'}, {'attribute': 'electric conductivity', 'before': 'turned off', 'after': 'turned on'}, {'attribute': 'orientation', 'before': 'in the off position', 'after': 'in the on position'}, {'attribute': 'temperature', 'before': 'medium-low', 'after': 'low'}], 'concept_knowledge': ['[[a stove]] can [[heat food]]', 'You can use [[a stove]] to [[cook]]', 'You are likely to find [[a stove]] in [[a house]]', '[[Stove]] is [[hot]]', '[[range]] is related to [[stove]]']}, 'npc': {'helmet': [{'attribute': 'decoration', 'before': 'bare | plain', 'after': 'camouflaged'}, {'attribute': 'visibility', 'before': 'visible', 'after': 'invisible'}], 'concept_knowledge': []}}-{'pot': {'pot': [{'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'location', 'before': 'in the cupboard | in the cabinet', 'after': 'on the stovetop | on the stove top'}, {'attribute': 'temperature', 'before': 'cool', 'after': 'hot'}], 'concept_knowledge': ['[[-gryde]] is a translation of [[pot]]', 'You are likely to find [[a ficus]] in [[a pot]]', '[[a pot]] can be used to [[make soup]]']}, 'wreath': {'wreath': [{'attribute': 'status', 'before': 'in progress', 'after': 'completed'}], 'concept_knowledge': []}, 'faucet': {'faucet': [{'attribute': 'power', 'before': 'off', 'after': 'on'}], 'concept_knowledge': ['You are likely to find [[a faucet]] in [[a bathroom]]']}, 'water': {'boiling pot': [{'attribute': 'temperature', 'before': 'cold', 'after': 'hote'}, {'attribute': 'fullness', 'before': 'emptier', 'after': 'fuller'}, {'attribute': 'location', 'before': 'in pipes', 'after': 'out of faucet'}], 'concept_knowledge': ['You are likely to find [[a fish]] in [[water]].', '[[river]] is related to [[water]]', '[[rain]] is [[water]]', 'You can use [[water]] to [[drink]]', '[[Water]] is [[liquid]]']}, 'canola oil': {'funnel': [{'attribute': 'location', 'before': 'in drawer | in cupboard | on table', 'after': 'on bottle | in bottle | over mouth of bottle'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}], 'concept_knowledge': []}, 'stove': {'stove knob': [{'attribute': 'temperature', 'before': 'cool | cold', 'after': 'hot'}, {'attribute': 'power', 'before': 'off', 'after': 'on'}, {'attribute': 'electric conductivity', 'before': 'turned off', 'after': 'turned on'}, {'attribute': 'orientation', 'before': 'in the off position', 'after': 'in the on position'}, {'attribute': 'temperature', 'before': 'medium-low', 'after': 'low'}], 'concept_knowledge': ['[[a stove]] can [[heat food]]', 'You can use [[a stove]] to [[cook]]', 'You are likely to find [[a stove]] in [[a house]]', '[[Stove]] is [[hot]]', '[[range]] is related to [[stove]]']}, 'npc': {'helmet': [{'attribute': 'decoration', 'before': 'bare | plain', 'after': 'camouflaged'}, {'attribute': 'visibility', 'before': 'visible', 'after': 'invisible'}], 'concept_knowledge': []}}-{'pot': {'pot': [{'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'location', 'before': 'in the cupboard | in the cabinet', 'after': 'on the stovetop | on the stove top'}, {'attribute': 'temperature', 'before': 'cool', 'after': 'hot'}], 'concept_knowledge': ['[[-gryde]] is a translation of [[pot]]', 'You are likely to find [[a ficus]] in [[a pot]]', '[[a pot]] can be used to [[make soup]]']}, 'wreath': {'wreath': [{'attribute': 'status', 'before': 'in progress', 'after': 'completed'}], 'concept_knowledge': []}, 'faucet': {'faucet': [{'attribute': 'power', 'before': 'off', 'after': 'on'}], 'concept_knowledge': ['You are likely to find [[a faucet]] in [[a bathroom]]']}, 'water': {'boiling pot': [{'attribute': 'temperature', 'before': 'cold', 'after': 'hote'}, {'attribute': 'fullness', 'before': 'emptier', 'after': 'fuller'}, {'attribute': 'location', 'before': 'in pipes', 'after': 'out of faucet'}], 'concept_knowledge': ['You are likely to find [[a fish]] in [[water]].', '[[river]] is related to [[water]]', '[[rain]] is [[water]]', 'You can use [[water]] to [[drink]]', '[[Water]] is [[liquid]]']}, 'canola oil': {'funnel': [{'attribute': 'location', 'before': 'in drawer | in cupboard | on table', 'after': 'on bottle | in bottle | over mouth of bottle'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}], 'concept_knowledge': []}, 'stove': {'stove knob': [{'attribute': 'temperature', 'before': 'cool | cold', 'after': 'hot'}, {'attribute': 'power', 'before': 'off', 'after': 'on'}, {'attribute': 'electric conductivity', 'before': 'turned off', 'after': 'turned on'}, {'attribute': 'orientation', 'before': 'in the off position', 'after': 'in the on position'}, {'attribute': 'temperature', 'before': 'medium-low', 'after': 'low'}], 'concept_knowledge': ['[[a stove]] can [[heat food]]', 'You can use [[a stove]] to [[cook]]', 'You are likely to find [[a stove]] in [[a house]]', '[[Stove]] is [[hot]]', '[[range]] is related to [[stove]]']}, 'npc': {'helmet': [{'attribute': 'decoration', 'before': 'bare | plain', 'after': 'camouflaged'}, {'attribute': 'visibility', 'before': 'visible', 'after': 'invisible'}], 'concept_knowledge': []}}-{'pot': {'pot': [{'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'location', 'before': 'in the cupboard | in the cabinet', 'after': 'on the stovetop | on the stove top'}, {'attribute': 'temperature', 'before': 'cool', 'after': 'hot'}], 'concept_knowledge': ['[[-gryde]] is a translation of [[pot]]', 'You are likely to find [[a ficus]] in [[a pot]]', '[[a pot]] can be used to [[make soup]]']}, 'wreath': {'wreath': [{'attribute': 'status', 'before': 'in progress', 'after': 'completed'}], 'concept_knowledge': []}, 'faucet': {'faucet': [{'attribute': 'power', 'before': 'off', 'after': 'on'}], 'concept_knowledge': ['You are likely to find [[a faucet]] in [[a bathroom]]']}, 'water': {'boiling pot': [{'attribute': 'temperature', 'before': 'cold', 'after': 'hote'}, {'attribute': 'fullness', 'before': 'emptier', 'after': 'fuller'}, {'attribute': 'location', 'before': 'in pipes', 'after': 'out of faucet'}], 'concept_knowledge': ['You are likely to find [[a fish]] in [[water]].', '[[river]] is related to [[water]]', '[[rain]] is [[water]]', 'You can use [[water]] to [[drink]]', '[[Water]] is [[liquid]]']}, 'canola oil': {'funnel': [{'attribute': 'location', 'before': 'in drawer | in cupboard | on table', 'after': 'on bottle | in bottle | over mouth of bottle'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}], 'concept_knowledge': []}, 'stove': {'stove knob': [{'attribute': 'temperature', 'before': 'cool | cold', 'after': 'hot'}, {'attribute': 'power', 'before': 'off', 'after': 'on'}, {'attribute': 'electric conductivity', 'before': 'turned off', 'after': 'turned on'}, {'attribute': 'orientation', 'before': 'in the off position', 'after': 'in the on position'}, {'attribute': 'temperature', 'before': 'medium-low', 'after': 'low'}], 'concept_knowledge': ['[[a stove]] can [[heat food]]', 'You can use [[a stove]] to [[cook]]', 'You are likely to find [[a stove]] in [[a house]]', '[[Stove]] is [[hot]]', '[[range]] is related to [[stove]]']}, 'npc': {'helmet': [{'attribute': 'decoration', 'before': 'bare | plain', 'after': 'camouflaged'}, {'attribute': 'visibility', 'before': 'visible', 'after': 'invisible'}], 'concept_knowledge': []}}-{'pot': {'pot': [{'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'location', 'before': 'in the cupboard | in the cabinet', 'after': 'on the stovetop | on the stove top'}, {'attribute': 'temperature', 'before': 'cool', 'after': 'hot'}], 'concept_knowledge': ['[[-gryde]] is a translation of [[pot]]', 'You are likely to find [[a ficus]] in [[a pot]]', '[[a pot]] can be used to [[make soup]]']}, 'wreath': {'wreath': [{'attribute': 'status', 'before': 'in progress', 'after': 'completed'}], 'concept_knowledge': []}, 'faucet': {'faucet': [{'attribute': 'power', 'before': 'off', 'after': 'on'}], 'concept_knowledge': ['You are likely to find [[a faucet]] in [[a bathroom]]']}, 'water': {'boiling pot': [{'attribute': 'temperature', 'before': 'cold', 'after': 'hote'}, {'attribute': 'fullness', 'before': 'emptier', 'after': 'fuller'}, {'attribute': 'location', 'before': 'in pipes', 'after': 'out of faucet'}], 'concept_knowledge': ['You are likely to find [[a fish]] in [[water]].', '[[river]] is related to [[water]]', '[[rain]] is [[water]]', 'You can use [[water]] to [[drink]]', '[[Water]] is [[liquid]]']}, 'canola oil': {'funnel': [{'attribute': 'location', 'before': 'in drawer | in cupboard | on table', 'after': 'on bottle | in bottle | over mouth of bottle'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}], 'concept_knowledge': []}, 'stove': {'stove knob': [{'attribute': 'temperature', 'before': 'cool | cold', 'after': 'hot'}, {'attribute': 'power', 'before': 'off', 'after': 'on'}, {'attribute': 'electric conductivity', 'before': 'turned off', 'after': 'turned on'}, {'attribute': 'orientation', 'before': 'in the off position', 'after': 'in the on position'}, {'attribute': 'temperature', 'before': 'medium-low', 'after': 'low'}], 'concept_knowledge': ['[[a stove]] can [[heat food]]', 'You can use [[a stove]] to [[cook]]', 'You are likely to find [[a stove]] in [[a house]]', '[[Stove]] is [[hot]]', '[[range]] is related"
        ]
    },
    {
        "task": "Make a Bead Ring",
        "action": [
            "Sure, let's generate the PDDL actions for the task \"Make a Bead Ring\" based on the steps and descriptions provided.\n\nTask: Make a Bead Ring\n\nSteps:\n1. Cut a strip of elastic.\n2. Slip two larger beads at either side of the small bead.\n3. Slip a small bead on one tail.\n4. Continue this pattern until you have enough beads to fit around the finger.\n5. Finish the ring by slipping the loose tails through the first small bead you placed on the elastic.\n6. Finished.\n\nDescriptions:\n- Cut a strip of elastic.\n- Slip two larger beads at either side of the small bead.\n- Slip a small bead on one tail.\n- Continue this pattern until you have enough beads to fit around the finger.\n- Finish the ring by slipping the loose tails through the first small bead you placed on the elastic.\n- Finished.\n\nEntity State:\n- Bead: {'the bead': [{'attribute': 'location', 'before': 'off strip | on counter', 'after': 'on strip | on band'}, {'attribute': 'organization', 'before': 'random', 'after': 'in order on band'}, {'attribute': 'shape', 'before': 'loose', 'after': 'banded'}, {'attribute': 'location', 'before': 'off strip of elastic | in container', 'after': 'on strip of elastic | on elastic'}, {'attribute': 'location', 'before': 'off strip of elastic | off elastic', 'after': 'on strip of elastic | on elastic'}, {'attribute': 'composition', 'before': 'random', 'after': 'in order'}, {'attribute': 'shape', 'before': 'in straighter line', 'after': 'curved'}], 'concept_knowledge': []}\n- Elastic: {'the strip of elastic': [{'attribute': 'length', 'before': 'longer | heavier', 'after': 'shorter | lighter'}, {'attribute': 'shape', 'before': 'uncut', 'after': 'cut'}, {'attribute': 'location', 'before': 'on counter', 'after': 'in lap'}, {'attribute': 'length', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'color', 'before': 'less colorful', 'after': 'more colorful'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'length', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'color', 'before': 'less colorful', 'after': 'more colorful'}, {'attribute': 'length', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'color', 'before': 'less colorful', 'after': 'more colorful'}, {'attribute': 'shape', 'before': 'straight', 'after': 'rounded'}], 'concept_knowledge': ['[[stretch]] is related to [[elastic]]']}\n\nPDDL Actions:\n```pddl\n(:action cut_elastic\n    :parameters (?p - player ?elastic - elastic ?scissors - item ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?elastic ?loc) (inventory ?p ?scissors))\n    :effect (and (cut ?elastic) (not (uncut ?elastic)) (shorter ?elastic) (not (longer ?elastic)))\n)\n\n(:action slip_large_bead\n    :parameters (?p - player ?elastic - elastic ?large_bead - bead ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?elastic ?loc) (inventory ?p ?large_bead))\n    :effect (and (on_strip ?large_bead ?elastic) (not (inventory ?p ?large_bead)))\n)\n\n(:action slip_small_bead\n    :parameters (?p - player ?elastic - elastic ?small_bead - bead ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?elastic ?loc) (inventory ?p ?small_bead))\n    :effect (and (on_strip ?small_bead ?elastic) (not (inventory ?p ?small_bead)))\n)\n\n(:action continue_pattern\n    :parameters (?p - player ?elastic - elastic ?small_bead - bead ?large_bead - bead ?loc - location)\n    :precondition (and (at ?p ?loc) (at ?elastic ?loc) (inventory ?p ?small_bead) (inventory ?p ?large_bead))\n    :effect (and (on_strip ?small_bead ?elastic) (on_strip ?large_bead ?elastic) (not (inventory ?p ?small_bead)) (not (inventory ?p ?large_bead)))\n)\n\n(:action finish_ring\n    :parameters (?p - player ?elastic - elastic ?small_bead - bead ?loc - location)\n    :precondition (and (at ?p ?loc) (on_strip ?small_bead ?elastic))\n    :effect (and (completed_ring ?elastic) (not (incomplete_ring ?elastic)))\n)\n```\n\nThese actions follow the steps and descriptions provided for making a bead ring, capturing the necessary preconditions and effects for each action."
        ]
    },
    {
        "task": "Make Chocolate Hearts for Valentine&#x27;s Day",
        "action": [
            "To generate PDDL actions for the task \"Make Chocolate Hearts for Valentine's Day,\" we'll follow the given steps and entity states to define the actions, preconditions, and effects.\n\n### PDDL Actions:\n\n#### Step 1: Assemble the ingredients needed.\n\n```lisp\n(:action assemble_ingredients\n    :parameters (?p - person ?i - ingredient ?l - location)\n    :precondition (and (at ?p ?l) (at ?i ?l) (not (inventory ?p ?i)))\n    :effect (and (inventory ?p ?i) (not (at ?i ?l)))\n)\n```\n\n#### Step 2: Melt the chocolate bars in the microwave until you have no lumps left after stirring.\n\n```lisp\n(:action melt_chocolate\n    :parameters (?p - person ?c - chocolate ?m - microwave)\n    :precondition (and (inventory ?p ?c) (at ?m ?p) (power ?m off))\n    :effect (and (melted ?c) (power ?m on) (not (inventory ?p ?c)))\n)\n```\n\n#### Step 3: Pour the melted chocolate into the heart-shaped molds.\n\n```lisp\n(:action pour_chocolate_into_molds\n    :parameters (?p - person ?c - chocolate ?mold - mold)\n    :precondition (and (melted ?c) (inventory ?p ?c) (empty ?mold))\n    :effect (and (filled ?mold ?c) (not (melted ?c)) (not (inventory ?p ?c)))\n)\n```\n\n#### Step 4: Put the chocolate into the freezer until hardened.\n\n```lisp\n(:action harden_chocolate\n    :parameters (?p - person ?mold - mold ?f - freezer)\n    :precondition (and (filled ?mold ?c) (at ?f ?p))\n    :effect (and (hardened ?mold) (not (filled ?mold ?c)))\n)\n```\n\n#### Step 5: Leave them out for one minute and pop out of molds, Or, cut heart shapes in the tray.\n\n```lisp\n(:action pop_chocolate_out_of_molds\n    :parameters (?p - person ?mold - mold)\n    :precondition (and (hardened ?mold) (filled ?mold ?c))\n    :effect (and (released ?c) (not (hardened ?mold)))\n)\n```\n\n#### Step 6: Enjoy then and there, or box them up and give away!\n\n```lisp\n(:action box_chocolates\n    :parameters (?p - person ?c - chocolate)\n    :precondition (and (released ?c) (at ?p ?l))\n    :effect (and (boxed ?c) (not (released ?c)))\n)\n```\n\nThese actions capture the steps necessary to make chocolate hearts, ensuring that each step is logically connected with the conditions and effects as described in the task."
        ]
    },
    {
        "task": "Make Chinese Macaroni in Just 20 Minutes",
        "action": [
            "To generate PDDL actions for the task \"Make Chinese Macaroni in Just 20 Minutes,\" we'll break down each step and translate them into corresponding PDDL actions. Each action will reflect the conditions and effects based on the provided entity states.\n\n### PDDL Actions:\n\n#### Step 1: Boil macaroni in hot boiling water with some salt and oil for 10-15 minutes.\n\n```pddl\n(:action boil_macaroni\n    :parameters (?p - player ?m - macaroni ?w - water ?s - stove ?pot - pot)\n    :precondition (and (at ?p ?s) (in ?m ?pot) (in ?w ?pot) (hot ?w) (has_salt ?pot) (has_oil ?pot))\n    :effect (and (cooked ?m) (not (raw ?m)) (not (in_bag ?m)) (in_boiling_water ?m))\n)\n```\n\n#### Step 2: After the macaroni has boiled put under running water for about 15 seconds to prevent overcooking.\n\n```pddl\n(:action rinse_macaroni\n    :parameters (?p - player ?m - macaroni ?sink - sink)\n    :precondition (and (at ?p ?sink) (cooked ?m) (in_boiling_water ?m))\n    :effect (and (not (in_boiling_water ?m)) (rinsed ?m) (not (overcooked ?m)))\n)\n```\n\n#### Step 3: In another pan add some oil and toss in the macaroni.\n\n```pddl\n(:action toss_macaroni\n    :parameters (?p - player ?m - macaroni ?pan - pan)\n    :precondition (and (at ?p ?pan) (rinsed ?m) (has_oil ?pan))\n    :effect (and (in_pan ?m) (tossed ?m) (not (in_strainer ?m)))\n)\n```\n\n#### Step 4: Add salt, red chili powder, soy sauce, white vinegar, and ajinomoto.\n\n```pddl\n(:action season_macaroni\n    :parameters (?p - player ?m - macaroni ?pan - pan)\n    :precondition (and (at ?p ?pan) (in_pan ?m) (tossed ?m))\n    :effect (and (seasoned ?m) (has_salt ?pan) (has_red_chili_powder ?pan) \n                 (has_soy_sauce ?pan) (has_white_vinegar ?pan) (has_ajinomoto ?pan))\n)\n```\n\n#### Step 5: Cook for some seconds.\n\n```pddl\n(:action cook_macaroni\n    :parameters (?p - player ?m - macaroni ?pan - pan)\n    :precondition (and (at ?p ?pan) (seasoned ?m) (in_pan ?m))\n    :effect (and (cooked ?m) (not (tossed ?m)) (hot ?m))\n)\n```\n\n#### Step 6: Serve hot with chilled drinks.\n\n```pddl\n(:action serve_macaroni\n    :parameters (?p - player ?m - macaroni ?plate - plate ?drink - drink)\n    :precondition (and (at ?p ?plate) (cooked ?m) (hot ?m) (chilled ?drink))\n    :effect (and (served ?m ?plate) (served ?drink ?plate) (not (in_pan ?m)))\n)\n```\n\nThese actions are designed to reflect the logical sequence of the task \"Make Chinese Macaroni in Just 20 Minutes\" and incorporate the conditions and effects based on the entity states provided."
        ]
    },
    {
        "task": "Get Wailord in Pok\u00e9mon Emerald",
        "action": [
            "To generate PDDL actions for the task \"Get Wailord in Pok\u00e9mon Emerald,\" we need to break down each step into a corresponding PDDL action, considering the provided descriptions and entity states. Let's proceed with the steps and create the actions accordingly:\n\n### PDDL Actions:\n\n#### Step 1: Train Wailmer\n\n```pddl\n(:action train_wailmer\n    :parameters (?w - wailmer ?player - player)\n    :precondition (and (inventory ?player ?w) (untrained ?w))\n    :effect (and (trained ?w) (not (untrained ?w)))\n)\n```\n\n#### Step 2: Go to Battle Frontier and Copy Rare Candies\n\n```pddl\n(:action go_to_battle_frontier\n    :parameters (?player - player ?loc1 - location ?loc2 - location)\n    :precondition (and (at ?player ?loc1) (connected ?loc1 battle_frontier ?loc2))\n    :effect (and (at ?player ?loc2) (not (at ?player ?loc1)))\n)\n\n(:action copy_rare_candies\n    :parameters (?player - player ?candies - rare_candies)\n    :precondition (and (at ?player battle_frontier) (uncopied ?candies))\n    :effect (and (copied ?candies) (not (uncopied ?candies)))\n)\n```\n\n#### Step 3: Give Rare Candies to Wailmer\n\n```pddl\n(:action give_rare_candies\n    :parameters (?candies - rare_candies ?w - wailmer ?player - player)\n    :precondition (and (inventory ?player ?candies) (inventory ?player ?w) (copied ?candies) (unevolved ?w))\n    :effect (and (not (inventory ?player ?candies)) (evolved ?w) (not (unevolved ?w)))\n)\n```\n\nThese actions capture the process of evolving a Wailmer into a Wailord by training it and using rare candies. Each action includes parameters for the involved entities, preconditions that must be met before the action can occur, and effects that describe the changes resulting from the action."
        ]
    },
    {
        "task": "Clean Your Home Efficiently",
        "action": [
            "Based on the provided task and steps, here are the corresponding PDDL actions:\n\nTask: Clean Your Home Efficiently\n\nSteps:\n1. Pick up and put away stray items and throw trash into waste baskets.\n2. Dust, again going through the entire house room by room.\n3. Take a large trash bag and go through each room emptying the waste baskets and trash cans.\n4. Use a spray cleaner and rags or paper towels to clean any glass surfaces, including the TV screens.\n5. First pick up any throw rugs and inside door mats and shake them outside.\n6. Enjoy your clean home!\n\nPDDL Actions:\n\n```lisp\n(:action pick_up_item\n    :parameters (?it - item ?p - person ?l - location)\n    :precondition (and (at ?it ?l) (at ?p ?l) (disorganized ?it))\n    :effect (and (inventory ?p ?it) (not (at ?it ?l)) (not (disorganized ?it)) (organized ?it))\n)\n\n(:action throw_trash\n    :parameters (?tr - trash ?p - person ?wb - waste_basket ?l - location)\n    :precondition (and (at ?tr ?l) (at ?p ?l) (at ?wb ?l))\n    :effect (and (inventory ?p ?tr) (not (at ?tr ?l)) (at ?tr ?wb))\n)\n\n(:action dust_room\n    :parameters (?p - person ?r - room)\n    :precondition (and (at ?p ?r) (not (dust_free ?r)))\n    :effect (dust_free ?r)\n)\n\n(:action empty_waste_basket\n    :parameters (?p - person ?wb - waste_basket ?tb - trash_bag ?r - room)\n    :precondition (and (at ?p ?r) (at ?wb ?r) (at ?tb ?r) (full ?wb))\n    :effect (and (not (full ?wb)) (full ?tb))\n)\n\n(:action clean_glass_surface\n    :parameters (?p - person ?cs - glass_surface ?sc - spray_cleaner ?r - rag ?l - location)\n    :precondition (and (at ?p ?l) (at ?cs ?l) (at ?sc ?l) (at ?r ?l) (not (clean ?cs)))\n    :effect (and (clean ?cs) (used ?sc) (used ?r))\n)\n\n(:action shake_rug_outside\n    :parameters (?p - person ?r - rug ?l - location ?o - outside)\n    :precondition (and (at ?p ?l) (at ?r ?l) (not (clean ?r)))\n    :effect (and (at ?r ?o) (clean ?r))\n)\n\n(:action enjoy_clean_home\n    :parameters (?p - person)\n    :precondition (and (clean_home))\n    :effect (relaxed ?p)\n)\n```\n\nThese actions capture the intent and logic of each step in the task of cleaning your home efficiently. The preconditions and effects are based on the entity states provided and the descriptions of the steps."
        ]
    },
    {
        "task": "Learn Photography by Shooting Macro",
        "action": [
            "Based on the provided task and entity states, here are the PDDL actions for the task \"Learn Photography by Shooting Macro\":\n\n### PDDL Actions:\n\n```lisp\n(:action create_small_studio\n  :parameters (?p - person ?s - studio)\n  :precondition (and (not (studio_set_up ?s)))\n  :effect (and (studio_set_up ?s))\n)\n\n(:action set_up_reflectors\n  :parameters (?p - person ?r - reflector ?s - studio)\n  :precondition (and (studio_set_up ?s) (not (reflectors_set_up ?r)))\n  :effect (and (reflectors_set_up ?r) (light_diffused ?r))\n)\n\n(:action prepare_closeup_lens\n  :parameters (?p - person ?l - lens)\n  :precondition (and (not (lens_ready ?l)))\n  :effect (and (lens_ready ?l))\n)\n\n(:action start_experimenting\n  :parameters (?p - person ?e - experiment ?s - studio ?r - reflector ?l - lens)\n  :precondition (and (studio_set_up ?s) (reflectors_set_up ?r) (lens_ready ?l) (not (experiment_started ?e)))\n  :effect (and (experiment_started ?e) (light_diffused ?r))\n)\n```\n\n### Explanation:\n\n1. **Action: `create_small_studio`**\n   - **Parameters:** `?p` (person), `?s` (studio)\n   - **Preconditions:** The studio is not set up.\n   - **Effects:** The studio is set up.\n\n2. **Action: `set_up_reflectors`**\n   - **Parameters:** `?p` (person), `?r` (reflector), `?s` (studio)\n   - **Preconditions:** The studio is set up, and the reflectors are not set up.\n   - **Effects:** The reflectors are set up, and the light is diffused.\n\n3. **Action: `prepare_closeup_lens`**\n   - **Parameters:** `?p` (person), `?l` (lens)\n   - **Preconditions:** The lens is not ready.\n   - **Effects:** The lens is ready.\n\n4. **Action: `start_experimenting`**\n   - **Parameters:** `?p` (person), `?e` (experiment), `?s` (studio), `?r` (reflector), `?l` (lens)\n   - **Preconditions:** The studio is set up, the reflectors are set up, the lens is ready, and the experiment is not started.\n   - **Effects:** The experiment is started, and the light is diffused.\n\nThese actions capture the steps and entity states required for the task \"Learn Photography by Shooting Macro\" and ensure that each step logically follows the previous one."
        ]
    },
    {
        "task": "Recycle Underpants",
        "action": [
            "Based on the given task \"Recycle Underpants\" and the entity states provided, here are the PDDL actions:\n\n### Task: Recycle Underpants\n\n**Step 1: Turn the underpants into cleaning rags.**\n\n**PDDL Action:**\n```\n(:action turn_into_cleaning_rags\n    :parameters (?u - underpants ?s - scissors)\n    :precondition (and (at ?u dirty) (at ?s attached))\n    :effect (and (at ?u cleaning_rags) (not (at ?u dirty)))\n)\n```\n\n**Step 2: Use the underwear as garden ties.**\n\n**PDDL Action:**\n```\n(:action use_as_garden_ties\n    :parameters (?u - underpants)\n    :precondition (at ?u dirty)\n    :effect (and (at ?u garden_ties) (not (at ?u dirty)))\n)\n```\n\n**Step 3: Turn quality undies into craft items.**\n\n**PDDL Action:**\n```\n(:action turn_into_craft_items\n    :parameters (?u - underpants)\n    :precondition (at ?u clean)\n    :effect (and (at ?u craft_items) (not (at ?u clean)))\n)\n```\n\n**Step 4: Use a bundle of old underwear as stuffing.**\n\n**PDDL Action:**\n```\n(:action use_as_stuffing\n    :parameters (?u - underpants)\n    :precondition (at ?u dirty)\n    :effect (and (at ?u stuffing) (not (at ?u dirty)))\n)\n```\n\n**Step 5: Children can wear old underwear on the outside of their pants to play superhero.**\n\n**PDDL Action:**\n```\n(:action wear_as_superhero_costume\n    :parameters (?u - underpants ?c - child)\n    :precondition (at ?u clean)\n    :effect (and (wearing ?c ?u) (not (at ?u clean)))\n)\n```\n\n**Step 6: Donate the underpants.**\n\n**PDDL Action:**\n```\n(:action donate_underpants\n    :parameters (?u - underpants ?p - person)\n    :precondition (at ?u clean)\n    :effect (and (at ?p ?u) (not (at ?u clean)))\n)\n```\n\nThese PDDL actions capture the steps involved in recycling underpants, considering the entity states and the descriptions provided."
        ]
    },
    {
        "task": "Make Whole Wheat Pastry With Canola",
        "action": [
            "Sure! Here are the PDDL actions based on the task \"Make Whole Wheat Pastry With Canola\" and the provided steps and descriptions:\n\n```pddl\n(:action place_flour_and_salt\n    :parameters (?p - player ?flour - whole_wheat_flour ?salt - salt ?bowl - mixing_bowl)\n    :precondition (and (inventory ?p ?flour) (inventory ?p ?salt) (empty ?bowl))\n    :effect (and (in ?flour ?bowl) (in ?salt ?bowl) (not (empty ?bowl)) (holding_flour_and_salt ?bowl))\n)\n\n(:action pour_oil\n    :parameters (?p - player ?oil - canola_oil ?bowl - mixing_bowl)\n    :precondition (and (inventory ?p ?oil) (holding_flour_and_salt ?bowl))\n    :effect (and (in ?oil ?bowl) (mixed ?bowl))\n)\n\n(:action place_pastry_on_wax_paper\n    :parameters (?p - player ?pastry - dough ?paper - wax_paper)\n    :precondition (and (inventory ?p ?pastry) (inventory ?p ?paper))\n    :effect (and (on ?pastry ?paper) (flattened ?pastry))\n)\n\n(:action remove_from_fridge\n    :parameters (?p - player ?pastry - dough)\n    :precondition (and (in_fridge ?pastry))\n    :effect (and (removed_from_fridge ?pastry) (at_room_temperature ?pastry))\n)\n\n(:action press_pastry_into_pie_dish\n    :parameters (?p - player ?pastry - dough ?dish - pie_dish)\n    :precondition (and (flattened ?pastry) (inventory ?p ?dish))\n    :effect (and (in ?pastry ?dish) (pressed ?pastry))\n)\n\n(:action create_edge_with_fork\n    :parameters (?p - player ?pastry - dough ?fork - fork)\n    :precondition (and (pressed ?pastry) (inventory ?p ?fork))\n    :effect (and (edge_created ?pastry) (rigid ?pastry))\n)\n```\n\n### Explanation:\n1. **place_flour_and_salt**: This action places the whole wheat flour and salt into the mixing bowl.\n   - Preconditions: The player has the flour and salt in their inventory, and the mixing bowl is empty.\n   - Effects: The flour and salt are in the bowl, and the bowl is now holding flour and salt.\n\n2. **pour_oil**: This action pours the canola oil into the mixing bowl.\n   - Preconditions: The player has the oil in their inventory, and the bowl is holding flour and salt.\n   - Effects: The oil is in the bowl, and the contents of the bowl are mixed.\n\n3. **place_pastry_on_wax_paper**: This action places the pastry dough onto a sheet of wax paper.\n   - Preconditions: The player has the pastry dough and the wax paper in their inventory.\n   - Effects: The pastry is on the wax paper and is flattened.\n\n4. **remove_from_fridge**: This action removes the pastry from the fridge.\n   - Preconditions: The pastry is in the fridge.\n   - Effects: The pastry is removed from the fridge and is now at room temperature.\n\n5. **press_pastry_into_pie_dish**: This action presses the pastry into the pie dish.\n   - Preconditions: The pastry is flattened, and the player has the pie dish in their inventory.\n   - Effects: The pastry is in the pie dish and is pressed.\n\n6. **create_edge_with_fork**: This action creates an edge on the pastry using a fork.\n   - Preconditions: The pastry is pressed into the pie dish, and the player has a fork in their inventory.\n   - Effects: The pastry has an edge created with a fork and is now rigid."
        ]
    },
    {
        "task": "Freeze Baked Cookies or Biscuits",
        "action": [
            "Based on the provided task and entity states, here are the generated PDDL actions:\n\nTask: Freeze Baked Cookies or Biscuits\n\nSteps:\n\nDescriptions:\n- Place the biscuits or cookies into a rigid, airtight container.\n- Separate the biscuits and cookies using freezer paper, baking paper, or foil.\n- Place biscuits in freezer.\n- Thaw.\n\nEntity_state:\n- {'cookies': {'the cookies': [{'attribute': 'location', 'before': 'on plate | on tray', 'after': 'in container'}, {'attribute': 'placement', 'before': 'in different container', 'after': 'now in airtight container'}, {'attribute': 'location', 'before': 'on sheet', 'after': 'in lined tin'}, {'attribute': 'composition', 'before': 'unlined', 'after': 'lined'}, {'attribute': 'organization', 'before': 'touching | together', 'after': 'separated'}, {'attribute': 'location', 'before': 'on table | on counter', 'after': 'in freezer'}, {'attribute': 'flexibility', 'before': 'pliable', 'after': 'hard'}, {'attribute': 'temperature', 'before': 'warm', 'after': 'frozen | cold | freezing'}, {'attribute': 'texture', 'before': 'soft', 'after': 'hard'}, {'attribute': 'placement', 'before': 'in freezer', 'after': 'now outside freezer'}, {'attribute': 'flexibility', 'before': 'hard', 'after': 'chewy'}, {'attribute': 'temperature', 'before': 'frozen | cold', 'after': 'warm | thawed'}, {'attribute': 'texture', 'before': 'hard', 'after': 'soft'}], 'concept_knowledge': ['[[Cookies]] are [[sweet]]']}}\n\nPDDL Actions:\n```lisp\n(:action place_in_container\n    :parameters (?p - player ?cookies - cookies ?container - container)\n    :precondition (and (inventory ?p ?cookies) (not (in_container ?cookies ?container)))\n    :effect (and (in_container ?cookies ?container) (not (on_plate ?cookies)) (not (on_tray ?cookies)))\n)\n\n(:action separate_with_paper\n    :parameters (?p - player ?cookies - cookies ?paper - paper)\n    :precondition (and (inventory ?p ?cookies) (inventory ?p ?paper) (not (separated ?cookies)))\n    :effect (separated ?cookies)\n)\n\n(:action place_in_freezer\n    :parameters (?p - player ?cookies - cookies ?freezer - freezer)\n    :precondition (and (in_container ?cookies ?container) (inventory ?p ?freezer))\n    :effect (and (in_freezer ?cookies ?freezer) (frozen ?cookies))\n)\n\n(:action thaw_cookies\n    :parameters (?p - player ?cookies - cookies ?freezer - freezer)\n    :precondition (and (in_freezer ?cookies ?freezer) (frozen ?cookies))\n    :effect (and (not (in_freezer ?cookies)) (thawed ?cookies) (soft ?cookies))\n)\n```\n\nExplanation of Actions:\n1. `place_in_container`: This action places the cookies into a rigid, airtight container.\n2. `separate_with_paper`: This action separates the cookies using freezer paper, baking paper, or foil.\n3. `place_in_freezer`: This action places the cookies in the freezer to freeze them.\n4. `thaw_cookies`: This action thaws the cookies, changing their state from frozen to thawed and soft.\n\nEach action includes the necessary parameters, preconditions, and effects to capture the intent and logic of the task steps and descriptions provided."
        ]
    },
    {
        "task": "Make a Duct Tape Necklace",
        "action": [
            "To generate PDDL actions for the task \"Make a Duct Tape Necklace,\" we need to break down each step into its corresponding PDDL action, taking into account the entity states and descriptions provided. Let's define the actions:\n\n### Step 1: Take one roll of duct tape and make a piece about a little bigger than your head.\n```pddl\n(:action cut_tape\n    :parameters (?p - player ?tape - duct_tape ?piece - tape_piece)\n    :precondition (and (inventory ?p ?tape) (rolled ?tape))\n    :effect (and (inventory ?p ?piece) (not (rolled ?tape)) (cut ?piece))\n)\n```\n\n### Step 2: Measure it around your head, and cut it off the roll.\n```pddl\n(:action measure_and_cut_tape\n    :parameters (?p - player ?piece - tape_piece)\n    :precondition (and (inventory ?p ?piece) (cut ?piece))\n    :effect (and (measured ?piece) (cut_off ?piece))\n)\n```\n\n### Step 3: Fold it halfway through the middle, like shown.\n```pddl\n(:action fold_tape_halfway\n    :parameters (?p - player ?piece - tape_piece)\n    :precondition (and (inventory ?p ?piece) (measured ?piece) (cut_off ?piece))\n    :effect (and (folded_halfway ?piece) (not (sticky ?piece)))\n)\n```\n\n### Step 4: Fold the other half so there is no sticky part showing.\n```pddl\n(:action fold_tape_completely\n    :parameters (?p - player ?piece - tape_piece)\n    :precondition (and (inventory ?p ?piece) (folded_halfway ?piece))\n    :effect (and (folded_completely ?piece) (smooth ?piece))\n)\n```\n\n### Step 5: Tape the ends together.\n```pddl\n(:action tape_ends_together\n    :parameters (?p - player ?piece - tape_piece)\n    :precondition (and (inventory ?p ?piece) (folded_completely ?piece))\n    :effect (and (ends_taped ?piece) (joined ?piece))\n)\n```\n\n### Step 6: And you are done!\n```pddl\n(:action complete_necklace\n    :parameters (?p - player ?piece - tape_piece)\n    :precondition (and (inventory ?p ?piece) (ends_taped ?piece))\n    :effect (and (necklace_completed ?piece) (not (inventory ?p ?piece)))\n)\n```\n\nThese actions should effectively capture the process of making a duct tape necklace, following the steps and descriptions provided, and aligning with the entity states."
        ]
    },
    {
        "task": "Get a Headshot in Gears of War",
        "action": [
            "Sure, let's define the PDDL actions for the task \"Get a Headshot in Gears of War\" based on the steps and descriptions provided.\n\nTask: Get a Headshot in Gears of War\n\nSteps:\n1. Aim at the head with a Sniper Rifle.\n2. Aim and shoot at the head with a Shotgun.\n3. Aim and shoot at the head with a Pistol.\n4. Aim and shoot at the head with a BoomShot.\n\nDescriptions:\n- Sniper \u2014 Simply aim at the head and pull the trigger, unless you're the host, in which case you will need to aim in front of where they're going.\n- Shotgun \u2014 The aim on the shotgun is almost like a rectangle.\n- Pistol \u2014 I'm not sure because I haven't played in a while, but it's either six or seven shots to the head with the standard-issue pistol for a headshot.\n- BoomShot \u2014 BoomShot headshots are possible \u2014 don't let anyone tell you they're not but the chance of one happening is about a million to one.\n\nEntity State:\n-{'weapon': {'weapon': [{'attribute': 'location', 'before': 'in vehicle', 'after': 'on ground'}, {'attribute': 'attention', 'before': 'carelessly disguised | visible', 'after': 'carefully disguised | disguised'}, {'attribute': 'location', 'before': 'absent', 'after': 'on weapon'}, {'attribute': 'decoration', 'before': 'bare', 'after': 'camouflaged'}], 'concept_knowledge': ['[[a weapon]] is for [[killing someone]]', '[[a pistol]] is [[a weapon, that is]]', '[[gun]] is related to [[weapon]]', '[[killing someone]] requires [[a weapon]]', 'You are likely to find [[a weapon]] in [[the police station]]']}, 'player': {'players': [{'attribute': 'knowledge', 'before': 'unselected', 'after': 'selected'}, {'attribute': 'knowledge', 'before': 'unselected', 'after': 'selected'}, {'attribute': 'location', 'before': 'away from wall', 'after': 'against wall'}, {'attribute': 'division', 'before': 'together', 'after': 'separated'}], 'concept_knowledge': ['[[a player]] is part of [[the team]]', '[[Jogador]] is a translation of [[player]]', '[[record]] is related to [[player]]']}}-{'weapon': {'weapon': [{'attribute': 'location', 'before': 'in vehicle', 'after': 'on ground'}, {'attribute': 'attention', 'before': 'carelessly disguised | visible', 'after': 'carefully disguised | disguised'}, {'attribute': 'location', 'before': 'absent', 'after': 'on weapon'}, {'attribute': 'decoration', 'before': 'bare', 'after': 'camouflaged'}], 'concept_knowledge': ['[[a weapon]] is for [[killing someone]]', '[[a pistol]] is [[a weapon, that is]]', '[[gun]] is related to [[weapon]]', '[[killing someone]] requires [[a weapon]]', 'You are likely to find [[a weapon]] in [[the police station]]']}, 'player': {'players': [{'attribute': 'knowledge', 'before': 'unselected', 'after': 'selected'}, {'attribute': 'knowledge', 'before': 'unselected', 'after': 'selected'}, {'attribute': 'location', 'before': 'away from wall', 'after': 'against wall'}, {'attribute': 'division', 'before': 'together', 'after': 'separated'}], 'concept_knowledge': ['[[a player]] is part of [[the team]]', '[[Jogador]] is a translation of [[player]]', '[[record]] is related to [[player]]']}}\n\nPDDL Actions:\n\n```lisp\n(:action aim_and_shoot_sniper\n  :parameters (?p - player ?w - sniper_rifle ?t - target)\n  :precondition (and (has_weapon ?p ?w) (at ?p ?t))\n  :effect (headshot ?p ?t))\n\n(:action aim_and_shoot_shotgun\n  :parameters (?p - player ?w - shotgun ?t - target)\n  :precondition (and (has_weapon ?p ?w) (at ?p ?t))\n  :effect (headshot ?p ?t))\n\n(:action aim_and_shoot_pistol\n  :parameters (?p - player ?w - pistol ?t - target)\n  :precondition (and (has_weapon ?p ?w) (at ?p ?t))\n  :effect (headshot ?p ?t))\n\n(:action aim_and_shoot_boomshot\n  :parameters (?p - player ?w - boomshot ?t - target)\n  :precondition (and (has_weapon ?p ?w) (at ?p ?t))\n  :effect (headshot ?p ?t))\n```\n\nExplanation:\n- The `aim_and_shoot_sniper` action captures the requirement to aim at the head with a Sniper Rifle and pull the trigger.\n- The `aim_and_shoot_shotgun` action captures the requirement to aim and shoot at the head with a Shotgun.\n- The `aim_and_shoot_pistol` action captures the requirement to aim and shoot at the head with a Pistol.\n- The `aim_and_shoot_boomshot` action captures the requirement to aim and shoot at the head with a BoomShot.\n\nThese actions include the necessary parameters, preconditions, and effects based on the entity states and descriptions provided."
        ]
    },
    {
        "task": "Prevent a Wick Lamp or Stove from Smoking",
        "action": [
            "Certainly! Here are the PDDL actions for the task \"Prevent a Wick Lamp or Stove from Smoking\":\n\n### Task: Prevent a Wick Lamp or Stove from Smoking\n\n#### PDDL Actions:\n\n```pddl\n(:action pour_vinegar_into_container\n  :parameters (?c - container ?v - vinegar)\n  :precondition (and (location ?v in_bottle) (location ?c in_cabinet))\n  :effect (and (location ?v in_container) (location ?c on_countertop))\n)\n\n(:action remove_wick\n  :parameters (?w - wick ?l - lamp ?s - stove)\n  :precondition (or (and (orientation ?w on_lamp) (composition ?w dry)) (and (orientation ?w on_stove) (composition ?w dry)))\n  :effect (and (orientation ?w removed) (not (orientation ?w on_lamp)) (not (orientation ?w on_stove)))\n)\n\n(:action dip_wick_in_vinegar\n  :parameters (?w - wick ?v - vinegar ?c - container)\n  :precondition (and (orientation ?w removed) (composition ?w dry) (location ?v in_container))\n  :effect (and (composition ?w wet) (location ?v in_wick))\n)\n\n(:action dry_wick\n  :parameters (?w - wick)\n  :precondition (and (composition ?w wet))\n  :effect (and (composition ?w dry) (wetness ?w dry))\n)\n\n(:action use_dry_wick\n  :parameters (?w - wick ?l - lamp ?s - stove)\n  :precondition (and (composition ?w dry) (wetness ?w dry))\n  :effect (and (orientation ?w on_lamp) (orientation ?w on_stove))\n)\n```\n\n### Descriptions of Actions:\n\n1. **pour_vinegar_into_container**:\n   - **Action Name**: pour_vinegar_into_container\n   - **Parameters**: ?c - container, ?v - vinegar\n   - **Preconditions**: The vinegar is in the bottle, and the container is in the cabinet.\n   - **Effects**: The vinegar is now in the container, and the container is on the countertop.\n\n2. **remove_wick**:\n   - **Action Name**: remove_wick\n   - **Parameters**: ?w - wick, ?l - lamp, ?s - stove\n   - **Preconditions**: The wick is either on the lamp or the stove and is dry.\n   - **Effects**: The wick is removed from the lamp or stove.\n\n3. **dip_wick_in_vinegar**:\n   - **Action Name**: dip_wick_in_vinegar\n   - **Parameters**: ?w - wick, ?v - vinegar, ?c - container\n   - **Preconditions**: The wick is removed and dry, and the vinegar is in the container.\n   - **Effects**: The wick is now wet, and the vinegar is in the wick.\n\n4. **dry_wick**:\n   - **Action Name**: dry_wick\n   - **Parameters**: ?w - wick\n   - **Preconditions**: The wick is wet.\n   - **Effects**: The wick is dry, and its wetness is set to dry.\n\n5. **use_dry_wick**:\n   - **Action Name**: use_dry_wick\n   - **Parameters**: ?w - wick, ?l - lamp, ?s - stove\n   - **Preconditions**: The wick is dry and its wetness is dry.\n   - **Effects**: The wick is placed back on the lamp or stove.\n\nThese actions should accurately represent the steps necessary to prevent a wick lamp or stove from smoking by treating the wick with vinegar and ensuring it is thoroughly dried before use."
        ]
    },
    {
        "task": "Defeat a Thug on Dead Island",
        "action": [
            "Based on the given task and entity states, here are the PDDL actions for the task \"Defeat a Thug on Dead Island\":\n\n### Task: Defeat a Thug on Dead Island\n\n#### Steps:\n1. Equip a weapon\n2. Ensure the weapon is loaded with ammunition\n3. Use incendiary weapons when Thug's health is below 50%\n4. Attack the Thug\n\n### PDDL Actions:\n\n#### Action 1: Equip a weapon\n```pddl\n(:action equip_weapon\n    :parameters (?p - player ?w - weapon)\n    :precondition (and (inventory ?p ?w) (not (equipped ?w)))\n    :effect (and (equipped ?w) (not (inventory ?p ?w)))\n)\n```\n\n#### Action 2: Load weapon with ammunition\n```pddl\n(:action load_weapon\n    :parameters (?p - player ?w - weapon ?a - ammunition)\n    :precondition (and (equipped ?w) (inventory ?p ?a) (not (loaded ?w)))\n    :effect (and (loaded ?w) (not (inventory ?p ?a)))\n)\n```\n\n#### Action 3: Use incendiary weapon (e.g., Molotov Cocktail or Grenade)\n```pddl\n(:action use_incendiary_weapon\n    :parameters (?p - player ?w - incendiary_weapon ?t - thug)\n    :precondition (and (inventory ?p ?w) (health ?t ?h) (< ?h 50))\n    :effect (and (used ?w) (reduce_health ?t 50))\n)\n```\n\n#### Action 4: Attack the Thug\n```pddl\n(:action attack_thug\n    :parameters (?p - player ?w - weapon ?t - thug)\n    :precondition (and (equipped ?w) (loaded ?w) (has_ammo ?w))\n    :effect (and (reduce_health ?t 100) (not (has_ammo ?w)))\n)\n```\n\n### Descriptions and Entity States:\n- Ensure that the player has a weapon equipped before attacking.\n- The weapon must be loaded with ammunition before it can be used.\n- Use incendiary weapons only when the Thug's health is below 50%.\n- Finally, attack the Thug with the equipped and loaded weapon.\n\nWith these actions, the player can effectively defeat the Thug on Dead Island."
        ]
    },
    {
        "task": "Clean Synthetic Hiking Gear",
        "action": [
            "Based on the provided task, steps, descriptions, and entity states, here are the PDDL actions for cleaning synthetic hiking gear:\n\nTask: Clean Synthetic Hiking Gear\n\nSteps:\n1. Read all of the instructions first.\n2. Wash Gore-Tex and other breathable, waterproof synthetic outer shell clothing following the instructions on the label.\n3. Be careful with synthetic boots.\n4. Take care cleaning synthetic jackets containing down.\n5. Wash polar fleece (microfleece or microfleece) in the washing machine.\n\nDescriptions:\n- Read all instructions before starting the cleaning process to ensure proper care of synthetic hiking gear.\n- Wash Gore-Tex and other breathable, waterproof synthetic outer shell clothing according to the label instructions to maintain their waterproof properties.\n- Handle synthetic boots with care to avoid damage.\n- Clean synthetic jackets containing down carefully to preserve their insulation properties.\n- Wash polar fleece in the washing machine to clean it effectively.\n\nEntity State:\n- {'washing machine': {'washing machine': [{'attribute': 'fullness', 'before': 'empty', 'after': 'full with polar fleece'}, {'attribute': 'electric conductivity', 'before': 'off', 'after': 'on'}], 'concept_knowledge': []}, 'npc': {'helmet': [{'attribute': 'decoration', 'before': 'bare | plain', 'after': 'camouflaged'}, {'attribute': 'visibility', 'before': 'visible', 'after': 'invisible'}], 'concept_knowledge': []}, 'clothing': {'clothing': [{'attribute': 'cleanness', 'before': 'dirty', 'after': 'clean'}], 'concept_knowledge': ['*Something you find in [[the closet]] is [[clothing]]', '[[dress]] is related to [[clothing]]', '[[a person]] wants [[clothing]]', '[[Clothing]] is [[made from fabric]]', '[[Shoes]] are [[clothing]]', '[[fabric]] is for [[clothing]]']}, 'instructions': {'instructions': [{'attribute': 'knowledge', 'before': 'unread | available', 'after': 'known | read'}], 'concept_knowledge': ['[[Some instructions]] are [[misleading]]']}}}\n\nPDDL Actions:\n```lisp\n(:action read_instructions\n  :parameters (?p - player ?i - instructions)\n  :precondition (and (at ?p ?i) (attribute ?i knowledge unread))\n  :effect (and (attribute ?i knowledge read))\n)\n\n(:action wash_gore_tex\n  :parameters (?p - player ?cl - clothing ?i - instructions)\n  :precondition (and (attribute ?cl type gore_tex) (attribute ?cl cleanness dirty) (attribute ?i knowledge read))\n  :effect (and (attribute ?cl cleanness clean))\n)\n\n(:action handle_synthetic_boots\n  :parameters (?p - player ?b - boots)\n  :precondition (and (attribute ?b type synthetic) (attribute ?b condition intact))\n  :effect (and (attribute ?b condition maintained))\n)\n\n(:action clean_down_jackets\n  :parameters (?p - player ?j - jacket ?i - instructions)\n  :precondition (and (attribute ?j type down) (attribute ?j cleanness dirty) (attribute ?i knowledge read))\n  :effect (and (attribute ?j cleanness clean))\n)\n\n(:action wash_polar_fleece\n  :parameters (?p - player ?cl - clothing ?wm - washing_machine)\n  :precondition (and (attribute ?cl type polar_fleece) (attribute ?cl cleanness dirty) (attribute ?wm fullness empty) (attribute ?wm electric conductivity off))\n  :effect (and (attribute ?cl cleanness clean) (attribute ?wm fullness full with polar fleece) (attribute ?wm electric conductivity on))\n)\n```\n\nThese actions capture the steps and descriptions provided for cleaning synthetic hiking gear, ensuring that each action has appropriate preconditions and effects based on the entity states."
        ]
    },
    {
        "task": "Remove Paint from Windows",
        "action": [
            "Sure! Based on the provided task, steps, descriptions, and entity states, here are the corresponding PDDL actions:\n\n### Task: Remove Paint from Windows\n\n#### Steps:\n1. Wet the window with the water and dish soap.\n2. Position the razor blade.\n3. Using slow, smooth motions, start scraping the paint from the window.\n4. Once all of the paint has been scraped away, spritz the window with some glass cleaner and use a clean, dry cloth to buff the windows clean.\n\n#### Descriptions:\n- You will need a bucket of hot water mixed with dish soap, a clean cloth or sponge, a new safety razor blade and some glass cleaner.\n- Wet the window with the water and dish soap.\n- Position the razor blade.\n- Using slow, smooth motions, start scraping the paint from the window.\n- Once all of the paint has been scraped away, spritz the window with some glass cleaner and use a clean, dry cloth to buff the windows clean.\n- Remove small paint splatters with chemical solvents.\n\n### PDDL Actions:\n\n#### Action 1: Wet Window\n```pddl\n(:action wet_window\n    :parameters (?p - person ?w - window ?b - bucket ?water - water ?soap - soap)\n    :precondition (and (at ?p ?w) (in ?water ?b) (in ?soap ?b) (holding ?p ?b))\n    :effect (and (wet ?w) (clean ?w))\n)\n```\n\n#### Action 2: Position Razor Blade\n```pddl\n(:action position_razor_blade\n    :parameters (?p - person ?w - window ?r - razor_blade)\n    :precondition (and (at ?p ?w) (holding ?p ?r) (sharp ?r))\n    :effect (and (in_contact ?r ?w))\n)\n```\n\n#### Action 3: Scrape Paint\n```pddl\n(:action scrape_paint\n    :parameters (?p - person ?w - window ?r - razor_blade ?paint - paint_splatters)\n    :precondition (and (at ?p ?w) (in_contact ?r ?w) (sharp ?r) (on ?paint ?w))\n    :effect (and (removed ?paint ?w) (duller ?r) (dirty ?r))\n)\n```\n\n#### Action 4: Clean Window with Glass Cleaner\n```pddl\n(:action clean_window_with_glass_cleaner\n    :parameters (?p - person ?w - window ?gc - glass_cleaner ?c - cloth)\n    :precondition (and (at ?p ?w) (holding ?p ?gc) (holding ?p ?c))\n    :effect (and (clean ?w) (spritzed ?w ?gc) (buffed ?w ?c))\n)\n```\n\n#### Action 5: Remove Small Paint Splatters\n```pddl\n(:action remove_small_paint_splatters\n    :parameters (?p - person ?w - window ?cs - chemical_solvent ?paint - paint_splatters)\n    :precondition (and (at ?p ?w) (holding ?p ?cs) (on ?paint ?w))\n    :effect (and (removed ?paint ?w) (used ?cs))\n)\n```\n\nThese actions capture the steps and their descriptions, reflecting the necessary conditions and effects based on the entity states provided."
        ]
    },
    {
        "task": "Use a Mic in Team Fortress 2",
        "action": [
            "Based on the provided task, steps, and entity states, here are the corresponding PDDL actions:\n\n### Task: Use a Mic in Team Fortress 2\n\n### Steps:\n1. Make sure that your microphone is working and connected first.\n2. Find various panels at the top like \"Multiplayer\", \"Mouse\", \"Audio\", etc.\n3. Click on the Voice panel.\n4. Start talking with other players using your microphone!\n5. Use the microphone to communicate with your team in a more efficient manner and demand that your voice is heard!\n6. Advise teammates as well as make game plans to help and support your team.\n\n### Descriptions:\n- Make sure that your microphone is working and connected first.\n- Find various panels at the top like \"Multiplayer\", \"Mouse\", \"Audio\", etc.\n- Click on the Voice panel.\n- Start talking with other players using your microphone!\n- Use the microphone to communicate with your team in a more efficient manner and demand that your voice is heard!\n- Advise teammates as well as make game plans to help and support your team.\n\n### Entity State:\n- `panel`: Attributes include `selection`, `visibility`, `availability`.\n- `voice`: Attributes include `availability`, `sound`, `stability`.\n- `advice`: Attributes include `availability`, `ownership`.\n- `mic`: Attributes include `connection`, `electric conductivity`, `availability`, `operation`.\n\n### PDDL Actions:\n\n```lisp\n(:action check_microphone_connection\n  :parameters (?p - player ?mic - microphone)\n  :precondition (and (at ?p ?mic) (not (connected ?mic)))\n  :effect (connected ?mic)\n)\n\n(:action find_panels\n  :parameters (?p - player ?panel - panel)\n  :precondition (and (at ?p ?panel) (not (visible ?panel)))\n  :effect (visible ?panel)\n)\n\n(:action click_voice_panel\n  :parameters (?p - player ?panel - panel)\n  :precondition (and (at ?p ?panel) (visible ?panel) (not (selected ?panel)))\n  :effect (selected ?panel)\n)\n\n(:action start_talking\n  :parameters (?p - player ?mic - microphone ?voice - voice)\n  :precondition (and (connected ?mic) (selected ?panel) (not (heard ?voice)))\n  :effect (heard ?voice)\n)\n\n(:action communicate_efficiently\n  :parameters (?p - player ?mic - microphone ?voice - voice)\n  :precondition (and (connected ?mic) (heard ?voice) (not (efficient ?voice)))\n  :effect (efficient ?voice)\n)\n\n(:action advise_teammates\n  :parameters (?p - player ?advice - advice)\n  :precondition (and (connected ?mic) (heard ?voice) (efficient ?voice) (not (given ?advice)))\n  :effect (given ?advice)\n)\n```\n\n### Explanation:\n1. **check_microphone_connection**: Ensures the microphone is connected.\n   - Preconditions: Player is at the microphone, and the microphone is not connected.\n   - Effects: The microphone becomes connected.\n\n2. **find_panels**: Makes the panels visible.\n   - Preconditions: Player is at the panel, and the panel is not visible.\n   - Effects: The panel becomes visible.\n\n3. **click_voice_panel**: Selects the voice panel.\n   - Preconditions: Player is at the panel, the panel is visible, and the panel is not selected.\n   - Effects: The panel becomes selected.\n\n4. **start_talking**: Starts talking using the microphone.\n   - Preconditions: The microphone is connected, the panel is selected, and the voice is not heard.\n   - Effects: The voice is heard.\n\n5. **communicate_efficiently**: Communicates efficiently using the microphone.\n   - Preconditions: The microphone is connected, the voice is heard, and the voice is not efficient.\n   - Effects: The voice becomes efficient.\n\n6. **advise_teammates**: Advises teammates and makes game plans.\n   - Preconditions: The microphone is connected, the voice is heard, the voice is efficient, and the advice is not given.\n   - Effects: The advice is given.\n\nThese actions capture the logical steps required to use a microphone in Team Fortress 2, ensuring that each step's preconditions and effects are correctly represented."
        ]
    }
]