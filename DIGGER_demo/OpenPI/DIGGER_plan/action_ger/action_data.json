[
    {
        "task": "Connect a Wii to HD TV",
        "action": [
            "To generate the PDDL actions based on the task of connecting a Wii to an HD TV, we'll follow the structure provided in the example. We'll create actions that reflect the steps needed to complete the task, using the entity states provided to define the preconditions and effects.\n\n### Task: Connect a Wii to HD TV\n\n#### PDDL Actions:\n\n1. **Action: plug_in_converter_tv**\n   ```lisp\n   (:action plug_in_converter_tv\n      :parameters (?npc - person ?tv - television ?converter - device)\n      :precondition (and (at ?npc ?tv) (unplugged ?converter) (empty ?tv))\n      :effect (and (plugged_in ?converter) (full ?tv))\n   )\n   ```\n\n2. **Action: plug_into_converter_tv**\n   ```lisp\n   (:action plug_into_converter_tv\n      :parameters (?tv - television ?converter - device)\n      :precondition (and (connected ?converter ?tv) (unattached ?tv))\n      :effect (and (connected ?tv ?converter) (attached ?tv))\n   )\n   ```\n\n3. **Action: plug_in_converter_wii**\n   ```lisp\n   (:action plug_in_converter_wii\n      :parameters (?wii - game_console ?converter - device)\n      :precondition (and (unattached ?wii) (plugged_in ?converter))\n      :effect (and (attached ?wii ?converter) (connected ?wii))\n   )\n   ```\n\n4. **Action: connect_wii_to_tv**\n   ```lisp\n   (:action connect_wii_to_tv\n      :parameters (?wii - game_console ?tv - television ?converter - device)\n      :precondition (and (connected ?wii ?converter) (attached ?tv ?converter))\n      :effect (and (connected ?wii ?tv))\n   )\n   ```\n\n### Explanation:\n- **plug_in_converter_tv**: This action involves plugging in the converter to the TV. The preconditions include having the NPC at the TV, the converter being unplugged, and the TV being empty (not connected). The effect is that the converter is plugged in and the TV is marked as full (connected).\n\n- **plug_into_converter_tv**: This action connects the TV to the converter. The preconditions require the converter to be connected to the TV and the TV to be unattached. The effect is that the TV becomes attached and connected to the converter.\n\n- **plug_in_converter_wii**: This action connects the Wii to the converter. The preconditions are that the Wii is unattached and the converter is plugged in. The effect is that the Wii is attached to the converter and marked as connected.\n\n- **connect_wii_to_tv**: This action completes the connection by ensuring the Wii is connected to the TV via the converter. The preconditions are that both the Wii and TV are connected to the converter. The effect is that the Wii is connected to the TV.\n\nThese actions are designed to follow the logical sequence of setting up the connections between the Wii, the converter, and the TV."
        ]
    },
    {
        "task": "Make Cheese Sauce with Jalape\u00f1o Peppers",
        "action": [
            "Sure, let's generate the PDDL actions for the task \"Make Cheese Sauce with Jalape\u00f1o Peppers\" based on the provided steps, descriptions, and entity states.\n\n### Task: Make Cheese Sauce with Jalape\u00f1o Peppers\n\n#### Steps:\n1. cut velveeta cutting_board\n2. set_burner_add_cheese velveeta pot\n3. add_peppers_and_olives peppers pot\n4. serve_cheese_sauce stove_knob\n\n### Descriptions:\n- First cut the Velveeta into tiny squares and set aside.\n- Set the burner on a medium to low setting, before that you begin adding the cheese product.\n- Wait until the Velveeta has melted, lower the heat somewhat and add in the (Rotel) tomatoes.\n- Add in the Jalapeno peppers, and black olives if desired.\n- Cheese sauce is at its best if served very warm.\n\n### Entity State:\n- Velveeta: {'granularity': 'whole', 'location': 'in the fridge', 'temperature': 'cold'}\n- Cutting Board: {'cleanness': 'clean', 'location': 'in the drawer'}\n- Stove Knob: {'power': 'off', 'temperature': 'cool'}\n- Pot: {'cleanness': 'clean', 'location': 'in the cupboard'}\n- Peppers: {'location': 'whole', 'temperature': 'cold'}\n\n### PDDL Actions:\n\n```lisp\n(:action cut_velveeta\n    :parameters (?p - player ?v - velveeta ?cb - cutting_board)\n    :precondition (and (at ?p ?v) (at ?v ?cb) (whole ?v))\n    :effect (and (cut ?v) (not (whole ?v)) (at ?v ?cb))\n)\n\n(:action set_burner_add_cheese\n    :parameters (?p - player ?v - velveeta ?pot - pot ?knob - stove_knob)\n    :precondition (and (at ?p ?v) (at ?v ?pot) (at ?pot ?knob) (off ?knob))\n    :effect (and (on ?knob) (melting ?v) (not (off ?knob)))\n)\n\n(:action add_peppers_and_olives\n    :parameters (?p - player ?peppers - peppers ?pot - pot)\n    :precondition (and (at ?p ?peppers) (chopped ?peppers) (at ?peppers ?pot) (melting ?cheese))\n    :effect (and (in ?peppers ?pot) (mixing ?peppers ?cheese))\n)\n\n(:action serve_cheese_sauce\n    :parameters (?p - player ?knob - stove_knob ?pot - pot)\n    :precondition (and (at ?p ?pot) (at ?pot ?knob) (on ?knob) (hot ?sauce))\n    :effect (and (served ?sauce) (not (on ?knob)) (off ?knob))\n)\n```\n\n### Explanation:\n1. **cut_velveeta**: This action cuts the Velveeta into cubes on the cutting board.\n   - **Preconditions**: Player is at Velveeta, Velveeta is on the cutting board, and Velveeta is whole.\n   - **Effects**: Velveeta is cut, no longer whole, and remains on the cutting board.\n\n2. **set_burner_add_cheese**: This action sets the burner to medium-low and starts melting the Velveeta in the pot.\n   - **Preconditions**: Player is at Velveeta, Velveeta is in the pot, pot is at the stove knob, and the stove knob is off.\n   - **Effects**: Stove knob is turned on, Velveeta starts melting, and stove knob is no longer off.\n\n3. **add_peppers_and_olives**: This action adds chopped peppers and olives to the melting Velveeta in the pot.\n   - **Preconditions**: Player is at peppers, peppers are chopped, peppers are at the pot, and cheese is melting.\n   - **Effects**: Peppers are in the pot and mixing with the cheese.\n\n4. **serve_cheese_sauce**: This action serves the cheese sauce and turns off the stove.\n   - **Preconditions**: Player is at the pot, pot is at the stove knob, stove knob is on, and sauce is hot.\n   - **Effects**: Cheese sauce is served, stove knob is turned off, and stove knob is no longer on.\n\nThese actions capture the logical steps and conditions required to make cheese sauce with jalape\u00f1o peppers based on the provided descriptions and entity states."
        ]
    },
    {
        "task": "Board a Small Boat",
        "action": [
            "Based on the provided task, steps, descriptions, and entity states, here are the PDDL actions:\n\n### PDDL Actions:\n\n#### Action: choose_boat\n```lisp\n(:action choose_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and (near ?p dock) (available ?b dock))\n    :effect (and (chosen ?p ?b) (not (available ?b dock)))\n)\n```\n\n#### Action: hold_rails\n```lisp\n(:action hold_rails\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and (chosen ?p ?b) (near ?p ?b))\n    :effect (and (holding_rails ?p ?b))\n)\n```\n\n#### Action: stabilize_boat (repeated 3 times for emphasis)\n```lisp\n(:action stabilize_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and (holding_rails ?p ?b) (near ?p ?b))\n    :effect (and (stabilized ?b))\n)\n```\n\n### Explanation:\n\n1. **choose_boat**: The action of choosing a boat involves the passenger being near the dock and the boat being available at the dock. Once the boat is chosen, it is no longer available for others.\n   \n2. **hold_rails**: After choosing the boat, the passenger needs to hold the rails for stability. This action requires the passenger to be near the chosen boat.\n\n3. **stabilize_boat**: The action of stabilizing the boat is repeated three times for emphasis, ensuring that the boat is steady. This requires the passenger to be holding the rails and near the boat. The effect of this action is that the boat becomes stabilized.\n\nThese actions collectively capture the steps and logic needed for the task of boarding a small boat while ensuring stability and safety as described."
        ]
    },
    {
        "task": "Make Slow Cooker Hot Cocoa",
        "action": [
            "Sure, let's generate the PDDL actions for the task \"Make Slow Cooker Hot Cocoa\" based on the provided steps, descriptions, and entity states.\n\nTask: Make Slow Cooker Hot Cocoa\n\nSteps:\n- make_cocoa_mixture mixture\n- add_ingredients_to_slow_cooker mixture\n- heat_mixture mixture1 stove1 heat1\n- cook npc kitchen\n\nDescriptions:\n- Make the initial cocoa mixture.\n- Add all the ingredients in a slow cooker.\n- Allow the mixture to heat for 3 hours on a low setting.\n- Serve immediately or keep the slow cooker on a \"Keep Warm\" setting.\n\nEntity State:\n- mixture: {'attribute': 'composition', 'before': 'separate', 'after': 'mixed'}\n- slow cooker: {'attribute': 'location', 'before': 'empty', 'after': 'full'}\n- stove: {'attribute': 'power', 'before': 'off', 'after': 'on'}\n- kitchen: {'attribute': 'cleanness', 'before': 'clean', 'after': 'messy'}\n\nPDDL Actions:\n\n```lisp\n(:action make_cocoa_mixture\n    :parameters (?mixture - mixture)\n    :precondition (and (composition ?mixture separate))\n    :effect (composition ?mixture mixed)\n)\n\n(:action add_ingredients_to_slow_cooker\n    :parameters (?mixture - mixture ?slow_cooker - slow_cooker)\n    :precondition (and (composition ?mixture mixed) (location ?slow_cooker empty))\n    :effect (location ?slow_cooker full)\n)\n\n(:action heat_mixture\n    :parameters (?mixture - mixture ?stove - stove ?heat - heat)\n    :precondition (and (location ?mixture in_slow_cooker) (power ?stove off))\n    :effect (power ?stove on)\n)\n\n(:action cook\n    :parameters (?npc - npc ?kitchen - kitchen)\n    :precondition (and (location ?mixture in_slow_cooker) (power ?stove on))\n    :effect (cleanness ?kitchen messy)\n)\n```\n\nExplanation:\n1. **make_cocoa_mixture**: This action mixes the initial ingredients to form the cocoa mixture.\n2. **add_ingredients_to_slow_cooker**: This action adds the mixed cocoa mixture to the slow cooker.\n3. **heat_mixture**: This action turns on the stove to heat the mixture in the slow cooker.\n4. **cook**: This action represents the process of cooking the mixture, which results in the kitchen becoming messy.\n\nThese actions capture the necessary steps and conditions for making slow cooker hot cocoa based on the provided descriptions and entity states."
        ]
    },
    {
        "task": "Grow Fairy Moss Indoors",
        "action": [
            "Here are the PDDL actions for the task \"Grow Fairy Moss Indoors\" based on the provided steps and descriptions:\n\n### PDDL Actions\n\n1. **Ask for Moss**\n   ```lisp\n   (:action ask_for_moss\n      :parameters (?p - player ?loc - location ?moss - fairy_materials)\n      :precondition (and (at ?p ?loc) (available ?moss ?loc))\n      :effect (and (inventory ?p ?moss) (not (available ?moss ?loc)))\n   )\n   ```\n\n2. **Find Container**\n   ```lisp\n   (:action find_container\n      :parameters (?p - player ?container - container)\n      :precondition (and (not (inventory ?p ?container)) (available ?container))\n      :effect (and (inventory ?p ?container) (not (available ?container)))\n   )\n   ```\n\n3. **Fill Bowl with Water**\n   ```lisp\n   (:action fill_bowl\n      :parameters (?p - player ?container - container ?water - water)\n      :precondition (and (inventory ?p ?container) (empty ?container) (available ?water))\n      :effect (and (filled ?container ?water) (not (empty ?container)))\n   )\n   ```\n\n4. **Add Fairy Moss to Pot**\n   ```lisp\n   (:action add_fairy_moss\n      :parameters (?p - player ?moss - fairy_materials ?container - container)\n      :precondition (and (inventory ?p ?moss) (filled ?container water))\n      :effect (and (contains ?container ?moss) (not (inventory ?p ?moss)))\n   )\n   ```\n\n5. **Place in Suitable Position**\n   ```lisp\n   (:action place_suitable_position\n      :parameters (?p - player ?loc - location ?container - container)\n      :precondition (and (inventory ?p ?container) (suitable_position ?loc))\n      :effect (and (at ?container ?loc) (not (inventory ?p ?container)))\n   )\n   ```\n\n6. **Prune Fairy Moss**\n   ```lisp\n   (:action prune_fairy_moss\n      :parameters (?p - player ?moss - fairy_materials ?container - container)\n      :precondition (and (contains ?container ?moss) (not (pruned ?moss)))\n      :effect (and (pruned ?moss))\n   )\n   ```\n\nThese actions translate the task of growing fairy moss indoors into a series of logical steps that reflect the necessary conditions and effects for each action."
        ]
    },
    {
        "task": "Remove Black Skid Marks from Linoleum",
        "action": [
            "Based on the task and steps provided, here are the PDDL actions:\n\nTask: Remove Black Skid Marks from Linoleum\n\nSteps:\n- obtain_eraser you eraser\n- kneel_and_rub you eraser linoleum_floor\n- rub_with_rubber user1 user2 user3\n- wash_wicks wick1\n\nDescriptions:\n- Obtain a decent sized eraser that you can hold comfortably in your fingers.\n- Kneel down next to the linoleum and use the eraser to rub along the skid mark.\n- Continue rubbing until the black mark lifts.\n- Wash and dry as usual.\n\nPDDL Actions:\n```lisp\n(:action obtain_eraser\n  :parameters (?p - person ?eraser - item)\n  :precondition (and (at ?p store) (at ?eraser store) (for_sale ?eraser store))\n  :effect (and (inventory ?p ?eraser) (not (at ?eraser store)) (not (for_sale ?eraser store))))\n\n(:action kneel_and_rub\n  :parameters (?p - person ?eraser - item ?floor - surface)\n  :precondition (and (inventory ?p ?eraser) (at ?p ?floor) (stained ?floor))\n  :effect (and (kneeling ?p) (not (stained ?floor)) (clean ?floor) (getting_smaller ?eraser)))\n\n(:action rub_with_rubber\n  :parameters (?p - person ?eraser - item ?floor - surface)\n  :precondition (and (kneeling ?p) (inventory ?p ?eraser) (at ?p ?floor) (stained ?floor))\n  :effect (and (clean ?floor) (getting_smaller ?eraser)))\n\n(:action wash_wicks\n  :parameters (?p - person ?wick - item)\n  :precondition (and (at ?p sink) (dirty ?wick))\n  :effect (and (clean ?wick) (wet ?wick)))\n```\n\nExplanation:\n1. **obtain_eraser**: This action allows a person to obtain an eraser from a store. The preconditions ensure that the person and the eraser are at the store and the eraser is for sale. The effects are that the eraser is now in the person's inventory and no longer at the store or for sale.\n2. **kneel_and_rub**: This action represents the person kneeling and rubbing the linoleum floor with the eraser to remove the skid mark. The preconditions ensure that the person has the eraser, is at the floor, and the floor is stained. The effects are that the person is kneeling, the floor is clean, and the eraser is getting smaller.\n3. **rub_with_rubber**: This action is similar to the previous one but focuses on the rubbing motion to clean the floor. The preconditions and effects are similar, ensuring the floor becomes clean and the eraser gets smaller.\n4. **wash_wicks**: This action involves washing a dirty wick. The preconditions ensure the person is at the sink and the wick is dirty. The effects are that the wick becomes clean and wet.\n\nNote: The provided step \"rub_with_rubber user1 user2 user3\" seems irrelevant or incorrect for the task. It was modified to be more relevant to the task of removing skid marks from linoleum. Similarly, \"wash_wicks wick1\" was interpreted as washing a wick, assuming it to be part of the task."
        ]
    },
    {
        "task": "Make a Simple Inside Windshield Cleaner",
        "action": [
            "Here are the PDDL actions for the task \"Make a Simple Inside Windshield Cleaner\":\n\nTask: Make a Simple Inside Windshield Cleaner\n\nSteps:\n1. purchase_eraser user1 eraser1 store_location\n2. attach_eraser user1 eraser1 car_spot1\n3. clean_inner_side_of_vehicle user1 eraser1 windshield_clean\n4. replace_wicks user1 wick1\n\nDescriptions:\n- Purchase a blackboard eraser.\n- Keep the blackboard eraser in the glove box or attach it to a spot on or near the car door for easy access.\n- Use the eraser to clean the inner side of the windshield.\n- Replace after use.\n\nEntity State:\n- 'windshield clean': {'inside windshield': [{'attribute': 'cleanness', 'before': 'dirty', 'after': 'clean'}]}\n- 'eraser': {'eraser': [{'attribute': 'location', 'before': 'in store', 'after': 'in home'}, {'attribute': 'cost', 'before': 'for sale at store', 'after': 'purchased from store'}]}\n- 'store location': {'container': [{'attribute': 'location', 'before': 'in cabinet', 'after': 'on countertop'}]}\n- 'car spot': {'vehicle': [{'attribute': 'location', 'before': 'in garage', 'after': 'in forest'}, {'attribute': 'visibility', 'before': 'visible', 'after': 'invisible'}]}\n- 'user': {'players': [{'attribute': 'knowledge', 'before': 'unselected', 'after': 'selected'}, {'attribute': 'location', 'before': 'away from wall', 'after': 'against wall'}, {'attribute': 'division', 'before': 'together', 'after': 'separated'}]}\n- 'wick': {'wicks': [{'attribute': 'cost', 'before': 'on sale at store', 'after': 'purchased from store'}, {'attribute': 'orientation', 'before': 'on lamp', 'after': 'removed'}, {'attribute': 'composition', 'before': 'dry', 'after': 'wet'}, {'attribute': 'composition', 'before': 'wet', 'after': 'dry'}, {'attribute': 'wetness', 'before': 'wet', 'after': 'dry'}, {'attribute': 'composition', 'before': 'whole', 'after': 'burned'}, {'attribute': 'location', 'before': 'on counter', 'after': 'in lamp'}, {'attribute': 'temperature', 'before': 'cool', 'after': 'heated'}]}\n\nPDDL Actions:\n```pddl\n(:action purchase_eraser\n    :parameters (?user - user ?eraser - eraser ?store - store_location)\n    :precondition (and (at ?user ?store) (at ?eraser ?store) (for_sale ?eraser))\n    :effect (and (purchased ?eraser) (not (at ?eraser ?store)) (inventory ?user ?eraser))\n)\n\n(:action attach_eraser\n    :parameters (?user - user ?eraser - eraser ?car_spot - car_spot)\n    :precondition (and (inventory ?user ?eraser) (at ?user ?car_spot))\n    :effect (and (attached ?eraser ?car_spot) (not (inventory ?user ?eraser)))\n)\n\n(:action clean_inner_side_of_vehicle\n    :parameters (?user - user ?eraser - eraser ?windshield - windshield_clean)\n    :precondition (and (attached ?eraser ?car_spot) (at ?user ?car_spot) (dirty ?windshield))\n    :effect (and (clean ?windshield) (not (dirty ?windshield)))\n)\n\n(:action replace_wicks\n    :parameters (?user - user ?wick - wick)\n    :precondition (and (inventory ?user ?wick) (wet ?wick))\n    :effect (and (dry ?wick) (not (wet ?wick)))\n)\n```\n\nThese actions capture the steps and descriptions provided for the task \"Make a Simple Inside Windshield Cleaner\"."
        ]
    },
    {
        "task": "Paint Bare Wood",
        "action": [
            "Based on the provided task \"Paint Bare Wood\" and the steps given, I will generate PDDL actions that align with the task's descriptions and the entity states. Let's break down each step and create corresponding PDDL actions.\n\n### Step 1: Acquire Oil-Based Painting\n#### Action: acquire_oil_based_painting\n```lisp\n(:action acquire_oil_based_painting\n    :parameters (?oil - oil_based_paint ?floor - location ?roller - tool)\n    :precondition (and (at ?oil ?floor) (empty ?roller))\n    :effect (and (has_oil_paint ?roller) (not (empty ?roller)))\n)\n```\n- **Precondition:** The oil-based paint is available at the floor location, and the roller is empty.\n- **Effect:** The roller now contains oil-based paint.\n\n### Step 2: Move Painting Brush\n#### Action: move_painting_brush\n```lisp\n(:action move_painting_brush\n    :parameters (?npc - agent ?brush - tool ?work_station - location ?wood - object)\n    :precondition (and (at ?npc ?work_station) (smooth ?wood) (has_brush ?npc ?brush))\n    :effect (and (painted_undercoat ?wood) (not (smooth ?wood)))\n)\n```\n- **Precondition:** The NPC is at the work station with a brush, and the wood is smooth.\n- **Effect:** The wood has an undercoat painted, and it is no longer smooth.\n\n### Step 3: Clean Room\n#### Action: clean_room\n```lisp\n(:action clean_room\n    :parameters (?npc - agent ?room - location)\n    :precondition (and (at ?npc ?room) (dirty ?room))\n    :effect (and (clean ?room) (not (dirty ?room)))\n)\n```\n- **Precondition:** The NPC is at the room location, and the room is dirty.\n- **Effect:** The room is now clean.\n\n### Step 4: Be Amazed\n#### Action: be_amazed\n```lisp\n(:action be_amazed\n    :parameters (?npc - agent)\n    :precondition (and (finished_painting ?npc))\n    :effect (amazed ?npc)\n)\n```\n- **Precondition:** The NPC has finished painting.\n- **Effect:** The NPC is amazed.\n\n### Step 5: Finish Wreath\n#### Action: finish_wreath\n```lisp\n(:action finish_wreath\n    :parameters (?wreath - object)\n    :precondition (and (status ?wreath in_progress))\n    :effect (and (status ?wreath completed) (not (status ?wreath in_progress)))\n)\n```\n- **Precondition:** The wreath's status is in progress.\n- **Effect:** The wreath's status is now completed.\n\nThese actions are designed to reflect the task of painting bare wood, considering the descriptions and entity states provided. Each action's preconditions and effects are aligned with the logical flow of the task steps."
        ]
    },
    {
        "task": "Create a Character in Lego Star Wars",
        "action": [
            "Based on the task \"Create a Character in Lego Star Wars\" and the steps provided, here are the corresponding PDDL actions:\n\n### PDDL Actions:\n\n1. **Start Game**\n   ```lisp\n   (:action start_game\n      :parameters (?g - game)\n      :precondition (and (knowledge ?g unplayed))\n      :effect (and (knowledge ?g played))\n   )\n   ```\n\n2. **Select Character**\n   ```lisp\n   (:action select_character\n      :parameters (?c - character)\n      :precondition (and (step ?c unselected))\n      :effect (and (step ?c selected))\n   )\n   ```\n\n3. **Save Name and Exit**\n   ```lisp\n   (:action save_name_and_exit\n      :parameters (?c - character)\n      :precondition (and (choice ?c nameless))\n      :effect (and (choice ?c named))\n   )\n   ```\n\n4. **Turn On Free Game**\n   ```lisp\n   (:action turn_on_free_game\n      :parameters (?g - game)\n      :precondition (and (knowledge ?g played))\n      :effect (and (free_play ?g on))\n   )\n   ```\n\n### Explanation:\n\n- **Start Game**: This action represents starting the game. The precondition checks if the game is in an \"unplayed\" state, and the effect changes it to \"played\".\n\n- **Select Character**: This action involves selecting a character. The precondition checks if the character is \"unselected\", and the effect changes the state to \"selected\".\n\n- **Save Name and Exit**: This action is for naming the character and exiting the character creation. The precondition checks if the character is \"nameless\", and the effect changes it to \"named\".\n\n- **Turn On Free Game**: This action allows the player to turn on the free play mode after a level has been completed. The precondition ensures the game has been \"played\", and the effect turns on the \"free play\" mode."
        ]
    },
    {
        "task": "Spool Knit a Winter Hat",
        "action": [
            "Sure, here are the PDDL actions for the task \"Spool Knit a Winter Hat\":\n\n```lisp\n(:action knit_web ; knit a flat web for the hat\n    :parameters (?p - person ?web - web)\n    :precondition (and (at ?p ?web) (has_knitting_material ?p))\n    :effect (and (knit ?web) (length ?web 84_inches))\n)\n\n(:action sliplargerbeads ; sew the web into a rectangular form\n    :parameters (?p - person ?web - web)\n    :precondition (and (at ?p ?web) (knit ?web) (length ?web 84_inches))\n    :effect (and (sewn ?web) (shape ?web rectangle) (dimension ?web 5_inches 8_inches))\n)\n\n(:action join_ends ; join the ends of the web to form the hat\n    :parameters (?p - person ?web - web ?ends - ends)\n    :precondition (and (at ?p ?web) (sewn ?web) (shape ?web rectangle) (dimension ?web 5_inches 8_inches))\n    :effect (and (joined ?ends) (shape ?web cylinder))\n)\n\n(:action wrap_with_tassel ; add a tassel to the top of the hat\n    :parameters (?p - person ?web - web ?tassel - tassel)\n    :precondition (and (at ?p ?web) (shape ?web cylinder) (joined ?ends))\n    :effect (and (wrapped_with_tassel ?web ?tassel))\n)\n```\n\n### Explanation of Actions:\n\n1. **knit_web**:\n   - **Action Name**: Knit a flat web for the hat.\n   - **Parameters**: `?p` (person), `?web` (web).\n   - **Preconditions**: The person is at the location of the web and has knitting material.\n   - **Effects**: The web is knitted to a length of 84 inches.\n\n2. **sliplargerbeads**:\n   - **Action Name**: Sew the web into a rectangular form.\n   - **Parameters**: `?p` (person), `?web` (web).\n   - **Preconditions**: The person is at the location of the web, and the web is knitted to 84 inches.\n   - **Effects**: The web is sewn into a rectangular shape with dimensions 5 inches wide and 8 inches long.\n\n3. **join_ends**:\n   - **Action Name**: Join the ends of the web to form the hat.\n   - **Parameters**: `?p` (person), `?web` (web), `?ends` (ends).\n   - **Preconditions**: The person is at the location of the web, and the web is sewn into a rectangular shape with the specified dimensions.\n   - **Effects**: The ends of the web are joined, and the web takes on a cylindrical shape.\n\n4. **wrap_with_tassel**:\n   - **Action Name**: Add a tassel to the top of the hat.\n   - **Parameters**: `?p` (person), `?web` (web), `?tassel` (tassel).\n   - **Preconditions**: The person is at the location of the web, and the web is in a cylindrical shape with the ends joined.\n   - **Effects**: The web is wrapped with a tassel, completing the hat.\n\nThese actions should accurately reflect the steps and descriptions provided for the task of spool knitting a winter hat."
        ]
    },
    {
        "task": "Get on a Bike",
        "action": [
            "To generate the PDDL actions for the task \"Get on a Bike,\" I'll follow the provided steps and descriptions to create corresponding actions. Here's the breakdown:\n\n### Step 1: Swing Leg Over Bike\n**Action Name:** swing-leg-over-bike  \n**Parameters:** (?p - person ?b - bike)  \n**Preconditions:** (and (beside ?b ?p) (not (between-legs ?b ?p)))  \n**Effects:** (and (between-legs ?b ?p) (not (beside ?b ?p)))\n\n```pddl\n(:action swing-leg-over-bike\n   :parameters (?p - person ?b - bike)\n   :precondition (and (beside ?b ?p) (not (between-legs ?b ?p)))\n   :effect (and (between-legs ?b ?p) (not (beside ?b ?p)))\n)\n```\n\n### Step 2: Put Foot on Pedal\n**Action Name:** put-foot-on-pedal  \n**Parameters:** (?p - person ?pedal - pedal)  \n**Preconditions:** (and (between-legs ?b ?p) (on-ground ?pedal) (not (on-pedal ?p ?pedal)))  \n**Effects:** (and (on-pedal ?p ?pedal) (not (on-ground ?pedal)))\n\n```pddl\n(:action put-foot-on-pedal\n   :parameters (?p - person ?pedal - pedal)\n   :precondition (and (between-legs ?b ?p) (on-ground ?pedal) (not (on-pedal ?p ?pedal)))\n   :effect (and (on-pedal ?p ?pedal) (not (on-ground ?pedal)))\n)\n```\n\n### Step 3: Hold Handbrakes\n**Action Name:** hold-handbrakes  \n**Parameters:** (?p - person ?b - bike)  \n**Preconditions:** (and (between-legs ?b ?p) (not (holding-handbrakes ?p ?b)))  \n**Effects:** (holding-handbrakes ?p ?b)\n\n```pddl\n(:action hold-handbrakes\n   :parameters (?p - person ?b - bike)\n   :precondition (and (between-legs ?b ?p) (not (holding-handbrakes ?p ?b)))\n   :effect (holding-handbrakes ?p ?b)\n)\n```\n\n### Step 4: Pedal with Feet\n**Action Name:** pedal-with-feet  \n**Parameters:** (?p - person ?b - bike)  \n**Preconditions:** (and (between-legs ?b ?p) (on-pedal ?p ?pedal) (holding-handbrakes ?p ?b) (not (moving ?b)))  \n**Effects:** (and (moving ?b) (not (holding-handbrakes ?p ?b)))\n\n```pddl\n(:action pedal-with-feet\n   :parameters (?p - person ?b - bike)\n   :precondition (and (between-legs ?b ?p) (on-pedal ?p ?pedal) (holding-handbrakes ?p ?b) (not (moving ?b)))\n   :effect (and (moving ?b) (not (holding-handbrakes ?p ?b)))\n)\n```\n\n### Step 5: Stop\n**Action Name:** stop  \n**Parameters:** (?p - person ?b - bike)  \n**Preconditions:** (moving ?b)  \n**Effects:** (and (not (moving ?b)) (stationary ?b))\n\n```pddl\n(:action stop\n   :parameters (?p - person ?b - bike)\n   :precondition (moving ?b)\n   :effect (and (not (moving ?b)) (stationary ?b))\n)\n```\n\nThese actions are designed to capture the logical sequence and conditions necessary for getting on a bike and riding it, based on the steps and descriptions provided."
        ]
    },
    {
        "task": "Change the Oil on a Yamaha Virago XV250",
        "action": [
            "Below are the PDDL actions generated for the task \"Change the Oil on a Yamaha Virago XV250\" based on the provided steps and descriptions:\n\n### PDDL Actions\n\n1. **Remove Bung**\n\n```lisp\n(:action remove_bung\n    :parameters (?bt - bike ?bg - bung ?ot - oil_tank)\n    :precondition (and (attached ?bg ?bt) (full ?ot))\n    :effect (and (removed ?bg ?bt) (empty ?ot))\n)\n```\n\n2. **Remove Oil Cap**\n\n```lisp\n(:action remove_oil_cap\n    :parameters (?oc - oil_cap ?bt - bike ?btl - bottle ?ol - oil1)\n    :precondition (and (attached ?oc ?bt) (empty ?btl))\n    :effect (and (removed ?oc ?bt) (in ?ol ?btl))\n)\n```\n\n3. **Remove Oil Filter**\n\n```lisp\n(:action remove_oil_filter\n    :parameters (?of - oil_filter ?btl - bottle)\n    :precondition (and (attached ?of) (empty ?btl))\n    :effect (and (removed ?of) (in ?of ?btl))\n)\n```\n\n4. **Screw Bung**\n\n```lisp\n(:action screw_bung\n    :parameters (?bg - bung ?bt - bike)\n    :precondition (and (removed ?bg ?bt))\n    :effect (and (attached ?bg ?bt))\n)\n```\n\n5. **Fill Oil**\n\n```lisp\n(:action fill_oil\n    :parameters (?ob - oil_bottle ?fc - faucet ?bt - bike)\n    :precondition (and (empty ?ob) (on ?fc))\n    :effect (and (full ?ob) (off ?fc))\n)\n```\n\n6. **Get Oil**\n\n```lisp\n(:action get_oil\n    :parameters (?npc - npc ?ol - oil)\n    :precondition (and (not (in ?ol ?npc)))\n    :effect (and (in ?ol ?npc))\n)\n```\n\n### Notes\n- The actions are generated based on the steps and descriptions provided.\n- Each action includes parameters, preconditions, and effects that reflect the task's logical sequence.\n- If any step seems irrelevant or incorrect, it has been adjusted to align with the task's context and descriptions."
        ]
    },
    {
        "task": "Open a Rusty Bolt",
        "action": [
            "Sure, here are the PDDL actions based on the provided task and steps:\n\n### Task: Open a Rusty Bolt\n\n### Steps:\n- obtain-fizzy-drink faucet\n- pour-fizzy-drink faucet1\n- wipe_clean towel1\n- dissolve_rust old_bolt1 fizzy_drink1\n- replace-bolt old_bolt1\n\n### Descriptions:\n- Obtain some fizzy drink.\n- Pour the fizzy drink over the bolt.\n- Wipe it clean with kitchen towel.\n- The fizzy drink should have dissolved the rust build-up causing the bolt to stick.\n- Replace the rusty bolt.\n\n### Entity State:\n-{'towel': {'towel': [{'attribute': 'cleanness', 'before': 'clean | smooth', 'after': 'dirty | sticky'}, {'attribute': 'color', 'before': 'white', 'after': 'orange'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}], 'concept_knowledge': ['[[napkin]] is related to [[towel]]', '[[a towel]] can [[dry hair]]', '*Something you find at [[at hotel]] is [[a towel]]']}, 'faucet': {'faucet': [{'attribute': 'power', 'before': 'off', 'after': 'on'}], 'concept_knowledge': ['You are likely to find [[a faucet]] in [[a bathroom]]']}, 'fizzy drink': {'fizzy drink': [{'attribute': 'cost', 'before': 'for sale in store', 'after': 'purchased from store'}, {'attribute': 'sealing', 'before': 'sealed', 'after': 'open'}, {'attribute': 'availability', 'before': 'unobtained', 'after': 'obtained'}, {'attribute': 'fullness', 'before': 'empty', 'after': 'filled'}, {'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'moisture', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'availability', 'before': 'full', 'after': 'empty'}, {'attribute': 'location', 'before': 'in container', 'after': 'on bolt'}, {'attribute': 'location', 'before': 'on bolt', 'after': 'on towel'}], 'concept_knowledge': []}, 'old bolt': {'old bolt': [{'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'texture', 'before': 'rough', 'after': 'sticky'}, {'attribute': 'wetness', 'before': 'wet', 'after': 'dry'}, {'attribute': 'texture', 'before': 'sticky', 'after': 'rough'}, {'attribute': 'cleanness', 'before': 'dirty', 'after': 'cleaner | clean'}, {'attribute': 'movement', 'before': 'still', 'after': 'moving'}, {'attribute': 'age', 'before': 'stuck', 'after': 'unstuck | free'}, {'attribute': 'age', 'before': 'old', 'after': 'new'}, {'attribute': 'location', 'before': 'in machine', 'after': 'on counter'}], 'concept_knowledge': []}}\n\n### PDDL Actions:\n```pddl\n(:action obtain_fizzy_drink\n    :parameters (?p - player ?f - faucet)\n    :precondition (and (at ?p ?f) (faucet_off ?f))\n    :effect (and (faucet_on ?f) (inventory ?p fizzy_drink))\n)\n\n(:action pour_fizzy_drink\n    :parameters (?p - player ?f - faucet ?b - bolt)\n    :precondition (and (at ?p ?f) (inventory ?p fizzy_drink) (faucet_on ?f) (at ?b ?f))\n    :effect (and (not (inventory ?p fizzy_drink)) (on_bolt ?b fizzy_drink))\n)\n\n(:action wipe_clean\n    :parameters (?p - player ?t - towel ?b - bolt)\n    :precondition (and (at ?p ?t) (at ?b ?t) (on_bolt ?b fizzy_drink))\n    :effect (and (not (on_bolt ?b fizzy_drink)) (clean ?b) (dirty ?t))\n)\n\n(:action dissolve_rust\n    :parameters (?p - player ?b - bolt ?f - fizzy_drink)\n    :precondition (and (at ?p ?b) (on_bolt ?b ?f))\n    :effect (and (not (rusty ?b)) (clean ?b))\n)\n\n(:action replace_bolt\n    :parameters (?p - player ?b - bolt)\n    :precondition (and (at ?p ?b) (not (rusty ?b)))\n    :effect (and (replaced ?b))\n)\n```\n\nThese actions capture the necessary steps and logic to achieve the task of opening a rusty bolt, based on the provided descriptions and entity states."
        ]
    },
    {
        "task": "Evolve Vulpix in Pok\u00e9mon",
        "action": [
            "Based on the task \"Evolve Vulpix in Pok\u00e9mon\" and the provided steps, I will generate the corresponding PDDL actions. The entity states and descriptions will guide the preconditions and effects.\n\n### PDDL Actions:\n\n#### Step 1: Catch or trade for a Vulpix.\n```lisp\n(:action catch_or_trade_vulpix\n     :parameters (?trainer - trainer ?vulpix - vulpix)\n     :precondition (and (not (owned ?trainer ?vulpix)) (or (in_wild ?vulpix) (traded ?vulpix)))\n     :effect (and (owned ?trainer ?vulpix) (not (in_wild ?vulpix)))\n)\n```\n\n#### Step 2: Evolve Alolan Vulpix\n```lisp\n(:action evolve_alolan_vulpix\n     :parameters (?trainer - trainer ?vulpix - vulpix ?ice_stone - stone)\n     :precondition (and (owned ?trainer ?vulpix) (in_inventory ?trainer ?ice_stone) (is_alolan ?vulpix))\n     :effect (and (evolved ?vulpix) (not (in_inventory ?trainer ?ice_stone)))\n)\n```\n\n#### Step 3: Select Bag\n```lisp\n(:action select_bag\n     :parameters (?trainer - trainer ?bag - bag)\n     :precondition (and (has_bag ?trainer ?bag))\n     :effect (and (bag_selected ?trainer ?bag))\n)\n```\n\n#### Step 4: Wait for Evolution\n```lisp\n(:action wait_for_evolution\n     :parameters (?trainer - trainer ?vulpix - vulpix)\n     :precondition (and (evolved ?vulpix))\n     :effect (and (evolution_complete ?vulpix))\n)\n```\n\n### Notes:\n- The action `catch_or_trade_vulpix` captures the process of obtaining a Vulpix, either by catching it in the wild or through a trade.\n- The action `evolve_alolan_vulpix` specifies the evolution process for an Alolan Vulpix using an Ice Stone, considering that the trainer owns the Vulpix and has the necessary stone.\n- The action `select_bag` involves selecting the trainer's bag, which is a prerequisite for using items like the Ice Stone.\n- The action `wait_for_evolution` represents the waiting period for the evolution animation to complete, marking the evolution process as finished.\n\nThese actions are designed to reflect the logical sequence and conditions necessary for evolving a Vulpix in the Pok\u00e9mon universe."
        ]
    },
    {
        "task": "Get Under the Stage in Dragonball Z Budokai Tenkaichi 2",
        "action": [
            "Certainly! Based on the provided task, steps, descriptions, and entity states, here are the PDDL actions:\n\n### Action 1: Choose VS Duel\n\n```pddl\n(:action choose_vs_duel\n    :parameters (?d - duel)\n    :precondition (and (attribute ?d option deselected) (attribute ?d population one_player))\n    :effect (and (attribute ?d option selected) (attribute ?d population two_player))\n)\n```\n\n### Action 2: Choose Goku as Player One\n\n```pddl\n(:action choose_goku_player1\n    :parameters (?p1 - player)\n    :precondition (attribute ?p1 knowledge unselected)\n    :effect (attribute ?p1 knowledge selected)\n)\n```\n\n### Action 3: Choose Stage\n\n```pddl\n(:action choose_stage\n    :parameters (?s - stage)\n    :precondition (attribute ?s location unspecified)\n    :effect (attribute ?s location specified)\n)\n```\n\n### Action 4: Move to Wall\n\n```pddl\n(:action move_to_wall\n    :parameters (?p1 - player ?p2 - player ?p3 - player)\n    :precondition (and (attribute ?p1 location away_from_wall) (attribute ?p2 location away_from_wall) (attribute ?p3 location away_from_wall))\n    :effect (and (attribute ?p1 location against_wall) (attribute ?p2 location against_wall) (attribute ?p3 location against_wall) (attribute ?p1 division separated) (attribute ?p2 division separated) (attribute ?p3 division separated))\n)\n```\n\nThese actions reflect the task of setting up a duel in Dragonball Z Budokai Tenkaichi 2, selecting Goku as a player, choosing a stage, and positioning the players against the wall. Each action is defined with its parameters, preconditions, and effects as per the given entity states."
        ]
    },
    {
        "task": "Grow a Rose Bush from Rose Bush Cuttings",
        "action": [
            "Certainly! Below are the PDDL actions for the task \"Grow a Rose Bush from Rose Bush Cuttings\" based on the provided steps and entity states:\n\n### PDDL Actions:\n\n```lisp\n(:action prepare_area ; prepare the planting area\n    :parameters (?p - player ?l - location)\n    :precondition (and (at ?p ?l) (not (prepared ?l)))\n    :effect (prepared ?l)\n)\n\n(:action take_cutting ; take a cutting from the rose bush\n    :parameters (?p - player ?clipping - clipping ?bush - rose_bush)\n    :precondition (and (attached ?clipping ?bush) (has_clippers ?p))\n    :effect (and (not (attached ?clipping ?bush)) (cut ?clipping))\n)\n\n(:action dip_in_hormone ; dip the cutting into rooting hormone\n    :parameters (?p - player ?clipping - clipping ?hormone - rooting_hormone)\n    :precondition (and (cut ?clipping) (moistened ?clipping) (inventory ?p ?hormone))\n    :effect (dipped_into_rooting_hormone ?clipping)\n)\n\n(:action plant_cutting ; plant the cutting in the prepared area\n    :parameters (?p - player ?clipping - clipping ?l - location)\n    :precondition (and (dipped_into_rooting_hormone ?clipping) (prepared ?l) (at ?p ?l))\n    :effect (and (not (dipped_into_rooting_hormone ?clipping)) (planted ?clipping ?l))\n)\n```\n\n### Explanation:\n\n1. **Prepare Area**: The action `prepare_area` involves preparing the location where the cutting will be planted. The precondition checks that the player is at the location and the location is not already prepared. The effect marks the location as prepared.\n\n2. **Take Cutting**: The action `take_cutting` involves cutting the rose bush to obtain a clipping. The precondition ensures that the clipping is attached to the bush and the player has clippers. The effect is that the clipping is no longer attached and is considered cut.\n\n3. **Dip in Hormone**: The action `dip_in_hormone` involves dipping the moistened cutting into rooting hormone. The precondition checks that the clipping is cut and moistened and that the player has rooting hormone in their inventory. The effect marks the clipping as dipped into rooting hormone.\n\n4. **Plant Cutting**: The action `plant_cutting` involves planting the hormone-dipped cutting in the prepared location. The precondition ensures the clipping is dipped into rooting hormone, the location is prepared, and the player is at the location. The effect marks the clipping as planted at the location.\n\nThese actions capture the process of growing a rose bush from cuttings by following the given steps and entity states."
        ]
    },
    {
        "task": "Make a Fairy House in the Woods",
        "action": [
            "Here are the PDDL actions for the task \"Make a Fairy House in the Woods\" based on the provided steps and entity states:\n\n```pddl\n(:action find_area\n    :parameters (?p - player ?area - area ?garden_center - location)\n    :precondition (and (at ?p ?garden_center) (has_damp_dirt ?garden_center))\n    :effect (and (selected ?area))\n)\n\n(:action collect_sticks\n    :parameters (?p - player ?stick - stick ?forest - location)\n    :precondition (and (at ?p ?forest) (scattered ?stick))\n    :effect (and (collected ?stick) (bundled ?stick))\n)\n\n(:action create_formation\n    :parameters (?p - player ?stick - stick ?formation - formation)\n    :precondition (and (collected ?stick))\n    :effect (and (in_formation ?stick ?formation))\n)\n\n(:action build_walls\n    :parameters (?p - player ?stick - stick ?basement - location)\n    :precondition (and (in_formation ?stick) (at ?p ?basement))\n    :effect (and (fortified ?stick))\n)\n\n(:action use_as_leaves\n    :parameters (?p - player ?leaf - leaf ?path - location)\n    :precondition (and (at ?p ?path) (has_leaf ?path))\n    :effect (and (covered ?path ?leaf))\n)\n\n(:action create_decorations\n    :parameters (?p - player ?fairy_moss - moss ?house - structure)\n    :precondition (and (purchased ?fairy_moss) (at ?p ?house))\n    :effect (and (decorated ?house ?fairy_moss))\n)\n```\n\n### Explanation:\n- **find_area**: This action involves finding a small area with slightly damp dirt, which is necessary for the fairy house's location.\n- **collect_sticks**: This action collects sticks from a forest, bundling them for use in the formation of the house.\n- **create_formation**: This action uses the collected sticks to create a formation (e.g., square, circle, or teepee) for the house's structure.\n- **build_walls**: This action uses the stick formation to build the house's exterior walls, fortifying the structure.\n- **use_as_leaves**: This action involves using leaves or bark to cover paths, contributing to the house's decoration.\n- **create_decorations**: This action uses fairy moss to decorate the fairy house, enhancing its appearance.\n\nEach action is designed to reflect the task's steps and entity states, ensuring that the preconditions and effects align with the task's requirements."
        ]
    },
    {
        "task": "Make a Pinwheel Wreath",
        "action": [
            "To generate PDDL actions for the task \"Make a Pinwheel Wreath,\" we'll break down each step and create corresponding actions based on the provided descriptions and entity states. Here\u2019s how we can define these actions:\n\n### PDDL Actions\n\n1. **Action: select_papyrus**\n   - **Parameters:** `(?p - player ?paper - paper)`\n   - **Preconditions:** `(and (inventory ?p ?paper))`\n   - **Effects:** `(selected ?paper)`\n\n   **Description:** Select suitable paper to make the pinwheels.\n\n2. **Action: create_wreath**\n   - **Parameters:** `(?p - player ?paper - paper ?pinwheel_wreath - pinwheel_wreath)`\n   - **Preconditions:** `(and (selected ?paper))`\n   - **Effects:** `(and (inventory ?p ?pinwheel_wreath) (not (selected ?paper)))`\n\n   **Description:** Make enough pinwheels to create a wreath.\n\n3. **Action: find_wreath_base**\n   - **Parameters:** `(?p - player ?wreath_base - wreath_base)`\n   - **Preconditions:** `(and (not (inventory ?p ?wreath_base)))`\n   - **Effects:** `(inventory ?p ?wreath_base)`\n\n   **Description:** Find a suitable base, such as a Styrofoam/cane/cardboard wreath base.\n\n4. **Action: create_wreath_base**\n   - **Parameters:** `(?p - player ?wreath_base - wreath_base ?hanger - hanger)`\n   - **Preconditions:** `(and (inventory ?p ?wreath_base) (not (attached ?wreath_base ?hanger)))`\n   - **Effects:** `(attached ?wreath_base ?hanger)`\n\n   **Description:** If the wreath base lacks a hanger, add some twine or ribbon to create one.\n\n5. **Action: finish_wreath**\n   - **Parameters:** `(?p - player ?pinwheel_wreath - pinwheel_wreath ?completed_wreath - completed_wreath)`\n   - **Preconditions:** `(and (inventory ?p ?pinwheel_wreath) (attached ?wreath_base ?hanger))`\n   - **Effects:** `(and (inventory ?p ?completed_wreath) (not (inventory ?p ?pinwheel_wreath)))`\n\n   **Description:** Finished.\n\n### Explanation\n\n- **select_papyrus:** This action involves selecting the appropriate paper for the pinwheels, setting the paper's state to selected.\n- **create_wreath:** This action creates the pinwheel wreath from the selected paper, transitioning the paper from selected to being part of the wreath.\n- **find_wreath_base:** This action involves acquiring a suitable base for the wreath.\n- **create_wreath_base:** This action adds a hanger to the wreath base if it doesn't have one, ensuring the wreath can be hung.\n- **finish_wreath:** This finalizes the wreath by combining the pinwheels with the wreath base and adding a hanger, resulting in a completed wreath.\n\nEach action is structured with parameters, preconditions, and effects to ensure logical progression in the task."
        ]
    },
    {
        "task": "Be a Spy With Friends",
        "action": [
            "Based on the task \"Be a Spy With Friends\" and the provided steps and descriptions, here are the PDDL actions that capture the intent and logic of each step:\n\n### PDDL Actions:\n\n#### Step 1: Set-up your spy group\n```pddl\n(:action set_spy_group\n    :parameters (?p - player ?c - co_conspirator ?sg - spy_group)\n    :precondition (and (not (in_group ?c ?sg)) (trustworthy ?c))\n    :effect (and (in_group ?c ?sg) (group_formed ?sg))\n)\n```\n\n#### Step 2: Talk in private\n```pddl\n(:action talk_in_private\n    :parameters (?p - player ?npc - person)\n    :precondition (and (has_private_location ?p) (not (talked_privately ?npc)))\n    :effect (and (talked_privately ?npc))\n)\n```\n\n#### Step 3: Gather gear\n```pddl\n(:action gather_gear\n    :parameters (?p - player ?g - gear)\n    :precondition (and (not (gear_ready ?g)) (gear_available ?g))\n    :effect (and (gear_ready ?g))\n)\n```\n\n#### Step 4: Find your first \"victim\"\n```pddl\n(:action find_victim\n    :parameters (?p - player ?v - victim)\n    :precondition (and (not (victim_identified ?v)) (has_info ?p))\n    :effect (and (victim_identified ?v))\n)\n```\n\n### Explanation:\n\n- **Set-up your spy group:** This action involves enlisting a co-conspirator into the spy group, ensuring they are trustworthy, and marking the group as formed.\n  \n- **Talk in private:** This action ensures that there is a private location available for the player to talk privately with another person, marking the conversation as private.\n\n- **Gather gear:** This action involves organizing and preparing the necessary gear (like a camera or binoculars) for spying, ensuring the gear is ready for use.\n\n- **Find your first \"victim\":** This action involves identifying a person to be observed, ensuring the player has the necessary information to identify a victim.\n\nThese actions are designed to reflect the steps and descriptions provided while adhering to the PDDL format and structure."
        ]
    },
    {
        "task": "Polish a Faucet With a Lemon",
        "action": [
            "Based on the provided task and steps, here are the PDDL actions for polishing a faucet with a lemon:\n\nTask: Polish a Faucet With a Lemon\n\nSteps:\n1. cut_lemon\n2. squeeze_lemon\n3. rub_lemon_half\n4. wash_tap_with_lemon_half\n\nDescriptions:\n- Cut a lemon in half.\n- Squeeze out the juice.\n- Take the squeezed out lemon half and rub vigorously over the faucets.\n- Wash the tap after scouring with the lemon half.\n\nEntity State:\n- faucet: {'attribute': 'cleanliness', 'before': 'dirty', 'after': 'clean'}\n- lemon: {'attribute': 'whole', 'before': 'whole', 'after': 'cut'}\n- lemon_half: {'attribute': 'juice', 'before': 'full', 'after': 'squeezed'}\n- water: {'attribute': 'location', 'before': 'in pipes', 'after': 'out of faucet'}\n\nPDDL Actions:\n```pddl\n(:action cut_lemon\n    :parameters (?npc - npc ?lemon - lemon ?loc - location)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?lemon) (whole ?lemon))\n    :effect (and (not (whole ?lemon)) (cut ?lemon))\n)\n\n(:action squeeze_lemon\n    :parameters (?npc - npc ?lemon_half - lemon_half ?loc - location)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?lemon_half) (cut ?lemon_half) (full ?lemon_half))\n    :effect (and (not (full ?lemon_half)) (squeezed ?lemon_half) (has_juice ?npc))\n)\n\n(:action rub_lemon_half\n    :parameters (?npc - npc ?lemon_half - lemon_half ?faucet - faucet ?loc - location)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?lemon_half) (squeezed ?lemon_half) (dirty ?faucet))\n    :effect (and (not (dirty ?faucet)) (clean ?faucet))\n)\n\n(:action wash_tap_with_lemon_half\n    :parameters (?npc - npc ?water - water ?faucet - faucet ?loc - location)\n    :precondition (and (at ?npc ?loc) (has_water ?loc) (clean ?faucet))\n    :effect (and (not (clean ?faucet)) (washed ?faucet))\n)\n```\n\nExplanation:\n1. `cut_lemon`: This action involves cutting a lemon in half. The precondition checks if the NPC is at the location with the whole lemon. The effect updates the lemon state to cut.\n2. `squeeze_lemon`: This action involves squeezing the juice out of the lemon half. The precondition checks if the NPC has the cut lemon half that is still full of juice. The effect updates the lemon half state to squeezed and gives the NPC the juice.\n3. `rub_lemon_half`: This action involves rubbing the squeezed lemon half on the faucet. The precondition checks if the NPC has the squeezed lemon half and the faucet is dirty. The effect updates the faucet state to clean.\n4. `wash_tap_with_lemon_half`: This action involves washing the faucet with water after scouring it with the lemon half. The precondition checks if the faucet is clean and there is water available at the location. The effect updates the faucet state to washed."
        ]
    },
    {
        "task": "Make a Wreath with Clothes Hangers",
        "action": [
            "Based on the provided task, steps, descriptions, and entity states, here are the PDDL actions for making a wreath with clothes hangers:\n\n### PDDL Actions:\n\n```lisp\n(:action untwist_hanger\n  :parameters (?p - player ?hanger - hanger ?pliers - pliers)\n  :precondition (and (at ?p ?hanger) (at ?p ?pliers) (shape ?hanger straight))\n  :effect (and (shape ?hanger twisted) (not (shape ?hanger straight)))\n)\n\n(:action gather_squares\n  :parameters (?p - player ?paper - velveeta)\n  :precondition (and (at ?p ?paper) (granularity ?paper whole))\n  :effect (and (granularity ?paper cubed) (not (granularity ?paper whole)))\n)\n\n(:action push_squares_away\n  :parameters (?p - player ?hanger - hanger ?paper - velveeta)\n  :precondition (and (at ?p ?hanger) (at ?hanger ?paper))\n  :effect (and (pushed_away ?paper) (not (at ?hanger ?paper)))\n)\n\n(:action slide_squares\n  :parameters (?p - player ?hanger - hanger ?paper - velveeta)\n  :precondition (and (at ?p ?hanger) (pushed_away ?paper))\n  :effect (and (scrunched ?paper) (not (pushed_away ?paper)))\n)\n\n(:action finish_wreath\n  :parameters (?p - player ?wreath - wreath ?hanger - hanger)\n  :precondition (and (at ?p ?hanger) (shape ?hanger twisted) (scrunched ?paper))\n  :effect (and (status ?wreath completed) (not (status ?wreath in_progress)))\n)\n```\n\n### Explanation of Steps and Actions:\n\n1. **Untwist Hanger:**\n   - **Action Name:** `untwist_hanger`\n   - **Parameters:** `?p` (player), `?hanger` (hanger), `?pliers` (pliers)\n   - **Preconditions:** The player is at the hanger and pliers, and the hanger is straight.\n   - **Effects:** The hanger is now twisted.\n\n2. **Gather Squares:**\n   - **Action Name:** `gather_squares`\n   - **Parameters:** `?p` (player), `?paper` (velveeta)\n   - **Preconditions:** The player is at the paper, and the paper is whole.\n   - **Effects:** The paper is now cubed.\n\n3. **Push Squares Away:**\n   - **Action Name:** `push_squares_away`\n   - **Parameters:** `?p` (player), `?hanger` (hanger), `?paper` (velveeta)\n   - **Preconditions:** The player is at the hanger, and the hanger is at the paper.\n   - **Effects:** The paper is pushed away from the hanger.\n\n4. **Slide Squares:**\n   - **Action Name:** `slide_squares`\n   - **Parameters:** `?p` (player), `?hanger` (hanger), `?paper` (velveeta)\n   - **Preconditions:** The player is at the hanger, and the paper is pushed away.\n   - **Effects:** The paper is scrunched.\n\n5. **Finish Wreath:**\n   - **Action Name:** `finish_wreath`\n   - **Parameters:** `?p` (player), `?wreath` (wreath), `?hanger` (hanger)\n   - **Preconditions:** The player is at the hanger, the hanger is twisted, and the paper is scrunched.\n   - **Effects:** The wreath status is completed.\n\nThese actions follow the guidelines provided and capture the intent and logic of each step in the task of making a wreath with clothes hangers."
        ]
    },
    {
        "task": "Grow Dwarf Balsam Fir",
        "action": [
            "Based on the task \"Grow Dwarf Balsam Fir\" and the provided steps and descriptions, here are the corresponding PDDL actions:\n\n```lisp\n(:action choose_plant\n    :parameters (?fir - fir ?nursery - location)\n    :precondition (and (at ?fir ?nursery) (not (in_inventory ?fir)))\n    :effect (and (in_inventory ?fir) (not (at ?fir ?nursery)))\n)\n\n(:action select_container\n    :parameters (?container - container ?garden_center - location)\n    :precondition (and (at ?container ?garden_center) (not (in_inventory ?container)))\n    :effect (and (in_inventory ?container) (not (at ?container ?garden_center)))\n)\n\n(:action choose_soil\n    :parameters (?soil - soil ?garden_center - location)\n    :precondition (and (at ?soil ?garden_center) (not (in_inventory ?soil)))\n    :effect (and (in_inventory ?soil) (not (at ?soil ?garden_center)))\n)\n\n(:action plant_fir\n    :parameters (?fir - fir ?container - container ?soil - soil)\n    :precondition (and (in_inventory ?fir) (in_inventory ?container) (in_inventory ?soil))\n    :effect (and (planted ?fir ?container) (not (in_inventory ?fir)) (not (in_inventory ?soil)))\n)\n\n(:action establish_plant\n    :parameters (?fir - fir ?container - container)\n    :precondition (and (planted ?fir ?container) (not (established ?fir)))\n    :effect (established ?fir)\n)\n\n(:action re_pot\n    :parameters (?fir - fir ?container - container)\n    :precondition (and (established ?fir) (planted ?fir ?container))\n    :effect (and (re_potted ?fir ?container) (not (planted ?fir ?container)))\n)\n```\n\nExplanation of each action:\n\n1. **choose_plant**: This action represents selecting the fir plant from the nursery.\n   - **Parameters**: `?fir` (the fir plant), `?nursery` (location of the nursery)\n   - **Preconditions**: The fir plant is at the nursery and not yet in inventory.\n   - **Effects**: The fir plant is added to the inventory and removed from the nursery.\n\n2. **select_container**: This action represents selecting a container from the garden center.\n   - **Parameters**: `?container` (the container), `?garden_center` (location of the garden center)\n   - **Preconditions**: The container is at the garden center and not yet in inventory.\n   - **Effects**: The container is added to the inventory and removed from the garden center.\n\n3. **choose_soil**: This action represents selecting soil from the garden center.\n   - **Parameters**: `?soil` (the soil), `?garden_center` (location of the garden center)\n   - **Preconditions**: The soil is at the garden center and not yet in inventory.\n   - **Effects**: The soil is added to the inventory and removed from the garden center.\n\n4. **plant_fir**: This action represents planting the fir in the container with soil.\n   - **Parameters**: `?fir` (the fir plant), `?container` (the container), `?soil` (the soil)\n   - **Preconditions**: The fir plant, container, and soil are all in inventory.\n   - **Effects**: The fir plant is planted in the container and both the fir plant and soil are removed from inventory.\n\n5. **establish_plant**: This action represents the process of establishing the planted fir.\n   - **Parameters**: `?fir` (the fir plant), `?container` (the container)\n   - **Preconditions**: The fir plant is planted in the container and not yet established.\n   - **Effects**: The fir plant becomes established.\n\n6. **re_pot**: This action represents re-potting the established fir plant.\n   - **Parameters**: `?fir` (the fir plant), `?container` (the container)\n   - **Preconditions**: The fir plant is established and planted in the container.\n   - **Effects**: The fir plant is re-potted, meaning it is removed from its current container and presumably placed in a new one.\n\nThese actions capture the intent and logic of the steps provided for growing a Dwarf Balsam Fir."
        ]
    },
    {
        "task": "Fold Bath Towels for Quick Hanging at Home",
        "action": [
            "Sure, here are the PDDL actions based on the provided task and steps:\n\nTask: Fold Bath Towels for Quick Hanging at Home\n\nSteps:\n- fold-twice towel1\n- fold-half-twice towel1\n- store-item towel1\n- hang-on-rack towel1\n\nDescriptions:\n- Fold the towel in thirds lengthwise.\n- Fold in half, and then in half again.\n- Store the towel in the linen closet.\n- To go from the closet for hanging, simply unfold the final fold and hang on the towel rack.\n\nEntity State:\n-{'towel': {'towel': [{'attribute': 'cleanness', 'before': 'clean | smooth', 'after': 'dirty | sticky'}, {'attribute': 'color', 'before': 'white', 'after': 'orange'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}], 'concept_knowledge': ['[[napkin]] is related to [[towel]]', '[[a towel]] can [[dry hair]]', '*Something you find at [[at hotel]] is [[a towel]]']}}\n\nPDDL Actions:\n```lisp\n(:action fold-twice\n    :parameters (?t - towel)\n    :precondition (and (clean ?t) (smooth ?t) (dry ?t) (lighter ?t))\n    :effect (and (folded-twice ?t) (not (smooth ?t)))\n)\n\n(:action fold-half-twice\n    :parameters (?t - towel)\n    :precondition (and (folded-twice ?t) (clean ?t) (dry ?t) (lighter ?t))\n    :effect (and (folded-half-twice ?t) (not (folded-twice ?t)))\n)\n\n(:action store-item\n    :parameters (?t - towel ?l - location)\n    :precondition (and (folded-half-twice ?t) (clean ?t) (dry ?t) (lighter ?t) (at ?t ?l))\n    :effect (and (stored ?t) (not (at ?t ?l)))\n)\n\n(:action hang-on-rack\n    :parameters (?t - towel ?r - rack ?l - location)\n    :precondition (and (stored ?t) (at ?l ?t))\n    :effect (and (hung ?t ?r) (not (stored ?t)))\n)\n```\n\nExplanation:\n1. **fold-twice**: This action represents folding the towel in thirds lengthwise. Preconditions include the towel being clean, smooth, dry, and lighter. The effect is that the towel is folded twice and is no longer smooth.\n2. **fold-half-twice**: This action represents folding the towel in half, and then in half again. Preconditions include the towel being folded twice, clean, dry, and lighter. The effect is that the towel is folded half twice and is no longer folded twice.\n3. **store-item**: This action represents storing the towel in the linen closet. Preconditions include the towel being folded half twice, clean, dry, lighter, and being at a certain location. The effect is that the towel is stored and no longer at the initial location.\n4. **hang-on-rack**: This action represents hanging the towel on the rack. Preconditions include the towel being stored and at a certain location. The effect is that the towel is hung on the rack and is no longer stored."
        ]
    },
    {
        "task": "Make Seasoned Salt",
        "action": [
            "Based on the provided task, steps, and descriptions, here are the PDDL actions for the task \"Make Seasoned Salt\":\n\n```pddl\n(:action mix_ingredients\n    :parameters (?m - mixture ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (is_mixture ?m) (at ?m ?l))\n    :effect (and (mixed ?m) (not (separate ?m)))\n)\n\n(:action grind_ingredients\n    :parameters (?p - player ?a - agent ?m - mixture ?mp - mortar_and_pestle ?l - location)\n    :precondition (and (at ?p ?l) (at ?a ?l) (has ?a ?m) (is_mixture ?m) (at ?mp ?l) (clean ?mp))\n    :effect (and (ground ?m) (dirty ?mp))\n)\n\n(:action pour_into_container\n    :parameters (?m - mixture ?c - container ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at ?m ?l) (at ?c ?l) (mixed ?m) (empty ?c))\n    :effect (and (in ?m ?c) (not (empty ?c)) (full ?c))\n)\n\n(:action gotolocation\n    :parameters (?a - agent ?l1 - location ?l2 - location)\n    :precondition (and (at ?a ?l1) (connected ?l1 ?l2))\n    :effect (and (at ?a ?l2) (not (at ?a ?l1)))\n)\n\n(:action dip_sand\n    :parameters (?npc - npc ?l - location)\n    :precondition (and (at ?npc ?l))\n    :effect (and (dipped ?npc))\n)\n```\n\n**Note:** The step \"dip_sand npc\" appears to be irrelevant to the task of making seasoned salt. However, for completeness, it has been included in the PDDL actions with a generic effect. If this step is indeed irrelevant, it can be omitted.\n\n### Explanation:\n1. **mix_ingredients**:\n   - **Action Name**: mix_ingredients\n   - **Parameters**: ?m (mixture), ?p (player), ?l (location)\n   - **Preconditions**: The player is at the location, the mixture is at the location.\n   - **Effects**: The mixture is mixed.\n\n2. **grind_ingredients**:\n   - **Action Name**: grind_ingredients\n   - **Parameters**: ?p (player), ?a (agent, Alice), ?m (mixture), ?mp (mortar and pestle), ?l (location)\n   - **Preconditions**: The player and Alice are at the location, Alice has the mixture, the mixture is a mixture, the mortar and pestle are at the location and clean.\n   - **Effects**: The mixture is ground, and the mortar and pestle become dirty.\n\n3. **pour_into_container**:\n   - **Action Name**: pour_into_container\n   - **Parameters**: ?m (mixture), ?c (container), ?p (player), ?l (location)\n   - **Preconditions**: The player, mixture, and container are at the location, the mixture is mixed, and the container is empty.\n   - **Effects**: The mixture is in the container, the container is no longer empty, and it becomes full.\n\n4. **gotolocation**:\n   - **Action Name**: gotolocation\n   - **Parameters**: ?a (agent), ?l1 (current location), ?l2 (destination location)\n   - **Preconditions**: The agent is at the current location, and the two locations are connected.\n   - **Effects**: The agent is at the destination location and no longer at the current location.\n\n5. **dip_sand**:\n   - **Action Name**: dip_sand\n   - **Parameters**: ?npc (non-player character), ?l (location)\n   - **Preconditions**: The NPC is at the location.\n   - **Effects**: The NPC has dipped (a placeholder effect as the action seems irrelevant to the task).\n\nThese actions capture the steps and intent of making seasoned salt, as described in the task and entity states provided."
        ]
    },
    {
        "task": "Make a Pancake Mix Container from a Recycled Ketchup Bottle",
        "action": [
            "Let's generate the PDDL actions for the task \"Make a Pancake Mix Container from a Recycled Ketchup Bottle\" based on the provided steps and entity states.\n\n### PDDL Actions:\n\n1. **Action: scrub_ketchup_bottle**\n   ```lisp\n   (:action scrub_ketchup_bottle\n       :parameters (?bottle - ketchup_bottle)\n       :precondition (and (dirty ?bottle))\n       :effect (and (clean ?bottle) (not (dirty ?bottle)))\n   )\n   ```\n\n2. **Action: place_funnel**\n   ```lisp\n   (:action place_funnel\n       :parameters (?user - user ?funnel - funnel ?bottle - ketchup_bottle)\n       :precondition (and (at ?funnel on_table) (clean ?funnel))\n       :effect (and (at ?funnel over_mouth_of_bottle) (not (at ?funnel on_table)))\n   )\n   ```\n\n3. **Action: pour_pancake_batter**\n   ```lisp\n   (:action pour_pancake_batter\n       :parameters (?bottle - ketchup_bottle)\n       :precondition (and (clean ?bottle) (at funnel over_mouth_of_bottle) (empty ?bottle))\n       :effect (and (full ?bottle) (not (empty ?bottle)))\n   )\n   ```\n\n4. **Action: replace_lid_and_label**\n   ```lisp\n   (:action replace_lid_and_label\n       :parameters (?user - user ?bottle - ketchup_bottle)\n       :precondition (and (full ?bottle) (at ?bottle on_counter))\n       :effect (and (closed_with_lid ?bottle) (written_on ?bottle))\n   )\n   ```\n\n5. **Action: place_in_fridge**\n   ```lisp\n   (:action place_in_fridge\n       :parameters (?bottle - ketchup_bottle ?fridge - refrigerator)\n       :precondition (and (closed_with_lid ?bottle) (at ?bottle on_counter))\n       :effect (and (at ?bottle in_refrigerator) (cold ?bottle) (not (at ?bottle on_counter)))\n   )\n   ```\n\n6. **Action: finish_wreath**\n   ```lisp\n   (:action finish_wreath\n       :parameters (?wreath - wreath)\n       :precondition (and (status ?wreath in_progress))\n       :effect (and (status ?wreath completed) (not (status ?wreath in_progress)))\n   )\n   ```\n\nThese actions capture the logic and intent of each step in the task of making a pancake mix container from a recycled ketchup bottle, as well as the additional step related to the wreath, which was included in the entity state."
        ]
    },
    {
        "task": "Make a Banana Strawberry Rum Smoothie",
        "action": [
            "To generate PDDL actions for the task \"Make a Banana Strawberry Rum Smoothie,\" I'll break down each step and provide the corresponding PDDL action based on the provided entity states and descriptions.\n\n### PDDL Actions:\n\n#### Step 1: Place Ingredients in Blender\n**Action Name:** place-ingredients  \n**Parameters:** (?b - banana ?s - sorbet ?y - yogurt ?bl - blender)  \n**Preconditions:**  \n- (at ?b container)  \n- (at ?s refrigerator)  \n- (at ?y container)  \n- (empty ?bl)  \n\n**Effects:**  \n- (in ?b ?bl)  \n- (in ?s ?bl)  \n- (in ?y ?bl)  \n- (not (empty ?bl))  \n- (fuller ?bl)\n\n#### Step 2: Blend into Texture\n**Action Name:** blend_into_texture  \n**Parameters:** (?bl - blender)  \n**Preconditions:**  \n- (in bananas ?bl)  \n- (in sorbet ?bl)  \n- (in yogurt ?bl)  \n- (off ?bl)  \n\n**Effects:**  \n- (on ?bl)  \n- (mixed ?bl)  \n- (not (off ?bl))  \n- (not (isolated ?bl))\n\n#### Step 3: Add Rum and Blend\n**Action Name:** add-rum-and-blend  \n**Parameters:** (?r - rum ?bl - blender)  \n**Preconditions:**  \n- (in bottle ?r)  \n- (mixed ?bl)  \n- (off ?bl)  \n\n**Effects:**  \n- (in ?r ?bl)  \n- (on ?bl)  \n- (not (off ?bl))  \n- (alcoholic ?bl)\n\n#### Step 4: Pour into Glass\n**Action Name:** pour-into-glass  \n**Parameters:** (?bl - blender ?g - glass)  \n**Preconditions:**  \n- (full ?bl)  \n- (empty ?g)  \n\n**Effects:**  \n- (full ?g)  \n- (not (full ?bl))  \n- (less-full ?bl)  \n- (not (empty ?g))\n\n#### Step 5: Garnish Glass\n**Action Name:** garnish-glass  \n**Parameters:** (?g - glass ?st - strawberry)  \n**Preconditions:**  \n- (full ?g)  \n- (ungarnished ?g)  \n- (at ?st container)  \n\n**Effects:**  \n- (garnished ?g)  \n- (not (ungarnished ?g))  \n- (decorated ?g)\n\nThese PDDL actions capture the logic of each step in making a Banana Strawberry Rum Smoothie, considering the preconditions and effects based on the provided entity states."
        ]
    },
    {
        "task": "Make Your Den Look Like a Home on Animal Jam (Non Members)",
        "action": [
            "Here are the PDDL actions based on the given task and steps:\n\nTask: Make Your Den Look Like a Home on Animal Jam (Non Members)\n\nSteps:\n1. get_gems gems\n2. buy_stuff stuff\n3. build_rooms npc basement\n4. create-rooms kids-room\n5. make_area area1\n6. keep-family-safe kids\n\nDescriptions:\n- Get lots of gems.\n- For a family home you will need quite a lot of stuff.\n- Try to get room shoji screens so you can section things off into smaller rooms.\n- If you can get shoji screens, try making a kids room, a master bedroom, and a living/dining room.\n- Make an outside area.\n- Keep your family safe.\n\nEntity State:\n- {'gems': {'gems': [{'attribute': 'availability', 'before': 'unacquired', 'after': 'acquired'}], 'concept_knowledge': [None]}, 'area': {'area': [{'attribute': 'knowledge', 'before': 'unselected', 'after': 'selected'}], 'concept_knowledge': ['[[garden]] is related to [[area]]']}, 'kids': {'kids room': [{'attribute': 'availability', 'before': 'unmade | non-existent', 'after': 'created'}], 'concept_knowledge': ['[[children]] is related to [[kids]]', '[[Kids]] like to [[play with them]]']}, 'basement': {'drop cloth': [{'attribute': 'availability', 'before': 'absent', 'after': 'present'}, {'attribute': 'coverage', 'before': 'uncovered', 'after': 'covered'}, {'attribute': 'location', 'before': 'present', 'after': 'removed'}], 'concept_knowledge': ['*Something you find in [[the basement]] is [[the furnace]]', '[[cellar]] is related to [[basement]]', '[[a house]] has [[a basement]]', '[[A basement]] is [[a room under a house]]', '[[Something you find downstairs]] is the [[basement]]']}, 'stuff': {'stuff': [{'attribute': 'location', 'before': 'in store', 'after': 'in home'}], 'concept_knowledge': ['[[property]] is related to [[stuff]]']}, 'kids-room': {'kids room': [{'attribute': 'availability', 'before': 'unmade | non-existent', 'after': 'created'}], 'concept_knowledge': []}, 'npc': {'helmet': [{'attribute': 'decoration', 'before': 'bare | plain', 'after': 'camouflaged'}, {'attribute': 'visibility', 'before': 'visible', 'after': 'invisible'}], 'concept_knowledge': []}}\n\nPDDL Actions:\n\n```pddl\n(:action get_gems\n    :parameters (?p - player ?g - gems)\n    :precondition (and (not (acquired ?g)))\n    :effect (and (acquired ?g) (inventory ?p ?g))\n)\n\n(:action buy_stuff\n    :parameters (?p - player ?s - stuff ?store - location)\n    :precondition (and (at ?p ?store) (in_store ?s))\n    :effect (and (not (in_store ?s)) (in_home ?s) (inventory ?p ?s))\n)\n\n(:action build_rooms\n    :parameters (?p - player ?b - basement)\n    :precondition (and (at ?p ?b) (not (covered ?b)) (present ?b))\n    :effect (and (covered ?b) (not (present ?b)))\n)\n\n(:action create_rooms\n    :parameters (?p - player ?kr - kids_room)\n    :precondition (and (not (created ?kr)) (inventory ?p shoji_screens))\n    :effect (and (created ?kr) (not (inventory ?p shoji_screens)))\n)\n\n(:action make_area\n    :parameters (?p - player ?a - area1)\n    :precondition (and (not (selected ?a)))\n    :effect (selected ?a)\n)\n\n(:action keep_family_safe\n    :parameters (?p - player ?k - kids)\n    :precondition (and (created ?kr))\n    :effect (safe ?k)\n)\n```\n\nThese actions are designed to reflect the steps and descriptions provided, capturing the necessary preconditions and effects for each action."
        ]
    },
    {
        "task": "Make Taco Filling",
        "action": [
            "Sure! Here are the PDDL actions for the task \"Make Taco Filling\" based on the provided steps and descriptions:\n\n### PDDL Actions:\n\n```pddl\n(:action cook_meat_and_onion\n    :parameters (?npc - player ?meat - item ?onion - item ?pan - cookware ?stove - appliance)\n    :precondition (and (at ?npc ?stove) (has ?npc ?meat) (has ?npc ?onion) (at ?pan ?stove) (is_frying_pan ?pan) (is_stove ?stove) (on ?stove ?pan))\n    :effect (and (cooked ?meat) (cooked ?onion) (dirty ?pan))\n)\n\n(:action drain_excess_fat\n    :parameters (?npc - player ?pan - cookware)\n    :precondition (and (at ?npc ?stove) (is_frying_pan ?pan) (cooked ?meat) (cooked ?onion) (dirty ?pan))\n    :effect (and (fat_drained ?pan))\n)\n\n(:action add_remaining_ingredients\n    :parameters (?npc - player ?ingredients - item ?pan - cookware ?stove - appliance)\n    :precondition (and (at ?npc ?stove) (has ?npc ?ingredients) (fat_drained ?pan) (is_frying_pan ?pan) (is_stove ?stove) (on ?stove ?pan))\n    :effect (and (ingredients_added ?pan) (simmering ?pan))\n)\n\n(:action simmer\n    :parameters (?npc - player ?pan - cookware ?stove - appliance)\n    :precondition (and (at ?npc ?stove) (ingredients_added ?pan) (is_frying_pan ?pan) (is_stove ?stove) (on ?stove ?pan))\n    :effect (and (simmered ?pan))\n)\n\n(:action finish_taco_filling\n    :parameters (?npc - player ?pan - cookware)\n    :precondition (and (at ?npc ?stove) (simmered ?pan) (is_frying_pan ?pan))\n    :effect (and (taco_filling_ready ?pan))\n)\n\n(:action drink_water\n    :parameters (?npc - player ?faucet - appliance ?water - item)\n    :precondition (and (at ?npc ?faucet) (is_faucet ?faucet) (is_water ?water) (power ?faucet on))\n    :effect (and (hydrated ?npc))\n)\n\n(:action add_ingredients_to_sauce\n    :parameters (?npc - player ?oil - item ?stove - appliance ?pot - cookware)\n    :precondition (and (at ?npc ?stove) (has ?npc ?oil) (is_stove ?stove) (is_pot ?pot) (on ?stove ?pot))\n    :effect (and (oil_added ?pot) (dirty ?pot))\n)\n\n(:action finish_wreath\n    :parameters (?npc - player ?wreath - item)\n    :precondition (and (at ?npc ?wreath) (status ?wreath in_progress))\n    :effect (and (status ?wreath completed))\n)\n```\n\n### Explanation:\n\n1. **cook_meat_and_onion**: This action represents browning the meat and onion in a frying pan.\n   - Preconditions: The NPC must be at the stove with the meat, onion, and frying pan.\n   - Effects: The meat and onion are cooked, and the frying pan becomes dirty.\n\n2. **drain_excess_fat**: This action represents draining the excess fat from the pan.\n   - Preconditions: The NPC must be at the stove with the cooked meat and onion in the dirty frying pan.\n   - Effects: The excess fat is drained from the pan.\n\n3. **add_remaining_ingredients**: This action represents adding the remaining ingredients to the pan and simmering.\n   - Preconditions: The NPC must be at the stove with the ingredients and the pan with drained fat.\n   - Effects: The ingredients are added, and the pan starts simmering.\n\n4. **simmer**: This action represents simmering the ingredients for fifteen minutes.\n   - Preconditions: The NPC must be at the stove with the pan that has the ingredients added.\n   - Effects: The pan is simmered.\n\n5. **finish_taco_filling**: This action represents the completion of the taco filling.\n   - Preconditions: The NPC must be at the stove with the simmered pan.\n   - Effects: The taco filling is ready.\n\n6. **drink_water**: This action represents the NPC drinking water from the faucet.\n   - Preconditions: The NPC must be at the faucet with the faucet turned on.\n   - Effects: The NPC becomes hydrated.\n\n7. **add_ingredients_to_sauce**: This action represents adding canola oil to the sauce in a pot on the stove.\n   - Preconditions: The NPC must be at the stove with the canola oil and the pot.\n   - Effects: The oil is added to the pot, and the pot becomes dirty.\n\n8. **finish_wreath**: This action represents the completion of the wreath.\n   - Preconditions: The NPC must be at the location of the wreath, and the wreath must be in progress.\n   - Effects: The wreath is completed.\n\nThese actions capture the steps and entity states required to make taco filling and handle the additional steps provided."
        ]
    },
    {
        "task": "Make a Bead Ring",
        "action": [
            "To generate PDDL actions for the task \"Make a Bead Ring,\" we will follow the steps provided and create actions that reflect the necessary preconditions and effects based on the entity states described. Here are the PDDL actions for each step:\n\n### PDDL Actions:\n\n#### Step 1: Cut a strip of elastic\n```pddl\n(:action cut_strip\n    :parameters (?p - player ?elastic - elastic)\n    :precondition (and (at ?p ?location) (elastic_unmodified ?elastic))\n    :effect (and (elastic_cut ?elastic) (not (elastic_unmodified ?elastic)))\n)\n```\n\n#### Step 2: Slip larger beads\n```pddl\n(:action slip_larger_beads\n    :parameters (?p - player ?bead - bead ?elastic - elastic)\n    :precondition (and (at ?p ?location) (elastic_cut ?elastic) (bead_off_strip ?bead))\n    :effect (and (bead_on_strip ?bead) (not (bead_off_strip ?bead)))\n)\n```\n\n#### Step 3: Slip small bead\n```pddl\n(:action slip_small_bead\n    :parameters (?p - player ?small_bead - bead ?elastic - elastic)\n    :precondition (and (at ?p ?location) (elastic_cut ?elastic) (bead_off_strip ?small_bead))\n    :effect (and (bead_on_strip ?small_bead) (not (bead_off_strip ?small_bead)))\n)\n```\n\n#### Step 4: Finish the ring\n```pddl\n(:action finish_ring\n    :parameters (?p - player ?elastic - elastic)\n    :precondition (and (at ?p ?location) (elastic_cut ?elastic) (beads_ordered_on_strip))\n    :effect (and (ring_completed ?elastic) (not (elastic_cut ?elastic)))\n)\n```\n\n### Additional Actions (Modified Irrelevant Steps):\n\n#### Finish Wreath (Modified to Finish Bead Ring)\n```pddl\n(:action finish_bead_ring\n    :parameters (?p - player ?elastic - elastic ?ring - ring)\n    :precondition (and (at ?p ?location) (ring_completed ?elastic))\n    :effect (and (ring_created ?ring) (not (ring_completed ?elastic)))\n)\n```\n\n### Explanation:\n- **Cut Strip**: This action cuts the strip of elastic, changing its state from uncut to cut.\n- **Slip Larger Beads**: This action places larger beads onto the elastic strip.\n- **Slip Small Bead**: This action places a small bead onto the elastic strip, continuing the pattern.\n- **Finish Ring**: This action finalizes the arrangement of beads on the elastic strip, completing the ring.\n- **Finish Bead Ring**: This modified action from the irrelevant step \"finish-wreath\" now completes the bead ring task.\n\nEach action reflects the necessary preconditions and effects based on the entity states provided, ensuring a logical flow to complete the task of making a bead ring."
        ]
    },
    {
        "task": "Make Chocolate Hearts for Valentine&#x27;s Day",
        "action": [
            "Based on the provided task and steps, here are the PDDL actions for making chocolate hearts for Valentine's Day:\n\n```pddl\n(:action build_ingredients_mixture\n    :parameters (?p - player ?i - ingredients ?b - mixing_bowl)\n    :precondition (and (at ?p ?i) (at ?p ?b) (separate ?i))\n    :effect (and (mixed ?i) (not (separate ?i)) (in ?i ?b))\n)\n\n(:action melt_chocolate\n    :parameters (?p - player ?c - chocolate ?m - microwave)\n    :precondition (and (at ?p ?c) (at ?p ?m) (solid ?c) (off ?m))\n    :effect (and (liquid ?c) (on ?m) (not (solid ?c)))\n)\n\n(:action pour_chocolate\n    :parameters (?p - player ?c - chocolate ?b - mixing_bowl)\n    :precondition (and (at ?p ?c) (at ?p ?b) (liquid ?c))\n    :effect (and (in_molds ?c) (not (in_pot ?c)))\n)\n\n(:action freeze_chocolate\n    :parameters (?p - player ?c - chocolate)\n    :precondition (and (at ?p ?c) (in_molds ?c) (liquid ?c))\n    :effect (and (frozen ?c) (solid ?c) (not (liquid ?c)))\n)\n\n(:action cut_heart_shape\n    :parameters (?p - player ?v - velveeta)\n    :precondition (and (at ?p ?v) (solid ?v) (on_cutting_board ?v))\n    :effect (and (heart_shaped ?v) (not (whole ?v)))\n)\n\n(:action box_chocolates\n    :parameters (?p - player ?c - chocolate)\n    :precondition (and (at ?p ?c) (frozen ?c) (heart_shaped ?c))\n    :effect (and (in_box ?c) (not (in_molds ?c)))\n)\n```\n\n### Explanation:\n1. **build_ingredients_mixture**: This action assembles the ingredients into a mixing bowl.\n2. **melt_chocolate**: This action melts the chocolate in the microwave, changing it from solid to liquid.\n3. **pour_chocolate**: This action pours the melted chocolate into molds.\n4. **freeze_chocolate**: This action freezes the chocolate, transforming it from liquid to solid.\n5. **cut_heart_shape**: This action cuts the velveeta into heart shapes.\n6. **box_chocolates**: This action places the heart-shaped chocolates into a box.\n\nEach action is designed to reflect the changes in state as described in the entity states and task steps."
        ]
    },
    {
        "task": "Make Chinese Macaroni in Just 20 Minutes",
        "action": [
            "To generate PDDL actions for the task \"Make Chinese Macaroni in Just 20 Minutes,\" we need to translate each step into an action that captures the described intent and logic. Let's break down each step and generate the corresponding PDDL actions.\n\n### Step 1: Boil Water\n**Action Name:** boil-water  \n**Parameters:** (?m - macaroni ?w - water ?p - pot)  \n**Preconditions:** (and (at ?m in_bag) (at ?w in_pipes) (at ?p on_stove) (not (boiling ?w)))  \n**Effects:** (and (boiling ?w) (at ?m in_water) (not (at ?m in_bag)) (not (at ?w in_pipes)) (at ?w in_pot))\n\n### Step 2: Boiled Water\n**Action Name:** strain-macaroni  \n**Parameters:** (?m - macaroni ?w - water ?s - strainer)  \n**Preconditions:** (and (boiling ?w) (at ?m in_pot))  \n**Effects:** (and (at ?m in_strainer) (not (at ?m in_pot)) (not (boiling ?w)))\n\n### Step 3: Add Oil\n**Action Name:** add-oil  \n**Parameters:** (?m - macaroni ?p - pan ?o - oil)  \n**Preconditions:** (and (at ?m in_strainer) (at ?p on_stove) (not (mixed ?m ?o)))  \n**Effects:** (and (at ?m in_pan) (mixed ?m ?o) (not (at ?m in_strainer)))\n\n### Step 4: Add Chilli Sauce and Vinegar\n**Action Name:** add-sauce  \n**Parameters:** (?m - macaroni ?s - sauce ?v - vinegar ?p - pan)  \n**Preconditions:** (and (at ?m in_pan) (not (spicy ?m)))  \n**Effects:** (and (spicy ?m) (mixed ?m ?s) (mixed ?m ?v))\n\n### Step 5: Cook Macaroni\n**Action Name:** cook-macaroni  \n**Parameters:** (?m - macaroni ?p - pan)  \n**Preconditions:** (and (at ?m in_pan) (mixed ?m oil) (mixed ?m sauce) (mixed ?m vinegar))  \n**Effects:** (and (cooked ?m) (not (raw ?m)))\n\n### Step 6: Serve\n**Action Name:** serve-macaroni  \n**Parameters:** (?m - macaroni ?d - dish)  \n**Preconditions:** (and (cooked ?m) (at ?m in_pan))  \n**Effects:** (and (at ?m on_dish) (not (at ?m in_pan)))\n\nThese actions reflect the logical sequence of steps needed to make Chinese Macaroni. Each action includes preconditions and effects based on the provided entity states and task descriptions."
        ]
    },
    {
        "task": "Get Wailord in Pok\u00e9mon Emerald",
        "action": [
            "Here are the PDDL actions based on the provided task and steps:\n\nTask: Get Wailord in Pok\u00e9mon Emerald\n\nSteps:\n1. evolution_of_wailord npc\n2. train_wailmer npc\n3. evolve npc\n4. copy-rare-candies wailmer\n5. evolve wailmer\n\nDescriptions:\n- This is the pre-evolution of Wailord.\n- This Wailmer can be pretty annoying to train, so be patient.\n- Train it until it evolves.\n- Go to battle frontier and copy some rare candies.\n- Give the rare candies to a Wailmer and evolve it into a Wailord using them.\n\nEntity State:\n{'wailmer': {'wailmer': [{'attribute': 'action', 'before': 'unused', 'after': 'used'}, {'attribute': 'knowledge', 'before': 'untrained', 'after': 'trained'}, {'attribute': 'going', 'before': 'still', 'after': 'going'}, {'attribute': 'knowledge', 'before': 'untrained', 'after': 'trained'}, {'attribute': 'change', 'before': 'unevolved | still wailmer', 'after': 'evolved | evolving'}, {'attribute': 'location', 'before': 'unattained', 'after': 'now attained'}, {'attribute': 'items', 'before': 'uncopied', 'after': 'copied'}, {'attribute': 'full', 'before': 'hungry', 'after': 'full'}, {'attribute': 'change', 'before': 'unevolved', 'after': 'evolved'}, {'attribute': 'action', 'before': 'without rare candies', 'after': 'now holder of rare candy'}], 'concept_knowledge': []}, 'npc': {'helmet': [{'attribute': 'decoration', 'before': 'bare | plain', 'after': 'camouflaged'}, {'attribute': 'visibility', 'before': 'visible', 'after': 'invisible'}], 'concept_knowledge': []}}\n\nPDDL Actions:\n\n```lisp\n(:action evolution_of_wailord\n    :parameters (?npc - npc ?wailmer - wailmer)\n    :precondition (and (has ?npc ?wailmer) (unevolved ?wailmer))\n    :effect (and (evolvable ?wailmer) (not (unevolved ?wailmer)))\n)\n\n(:action train_wailmer\n    :parameters (?npc - npc ?wailmer - wailmer)\n    :precondition (and (has ?npc ?wailmer) (untrained ?wailmer))\n    :effect (and (trained ?wailmer) (not (untrained ?wailmer)))\n)\n\n(:action evolve\n    :parameters (?npc - npc ?wailmer - wailmer)\n    :precondition (and (has ?npc ?wailmer) (trained ?wailmer) (evolvable ?wailmer))\n    :effect (and (evolved ?wailmer) (not (evolvable ?wailmer)) (not (trained ?wailmer)))\n)\n\n(:action copy_rare_candies\n    :parameters (?wailmer - wailmer ?npc - npc ?candies - rare_candy)\n    :precondition (and (at ?npc battle_frontier) (not (copied ?candies)))\n    :effect (and (copied ?candies) (has ?wailmer ?candies))\n)\n\n(:action evolve_wailmer\n    :parameters (?wailmer - wailmer ?npc - npc ?candies - rare_candy)\n    :precondition (and (has ?wailmer ?candies) (has ?npc ?wailmer) (not (evolved ?wailmer)))\n    :effect (and (evolved ?wailmer) (not (has ?wailmer ?candies)))\n)\n```\n\nThese actions capture the steps and logic required to get a Wailord in Pok\u00e9mon Emerald by evolving a Wailmer using training and rare candies."
        ]
    },
    {
        "task": "Clean Your Home Efficiently",
        "action": [
            "Sure, I'll generate the PDDL actions for the task \"Clean Your Home Efficiently\" based on the provided steps and descriptions.\n\n### PDDL Actions:\n\n#### Step 1: pickup_items item1 basket1\n\n```pddl\n(:action pickup_items\n    :parameters (?item - item ?basket - basket ?p - player)\n    :precondition (and (at ?item around_house) (at ?basket on_floor) (at ?p around_house))\n    :effect (and (in ?item ?basket) (not (at ?item around_house)))\n)\n```\n\n#### Step 2: get_dust_room rug1\n\n```pddl\n(:action get_dust_room\n    :parameters (?rug - rug ?p - player)\n    :precondition (and (at ?rug room) (at ?p room))\n    :effect (clean ?rug)\n)\n```\n\n#### Step 3: empty_trash basket1 trash_bag1\n\n```pddl\n(:action empty_trash\n    :parameters (?basket - basket ?trash_bag - trash_bag ?p - player)\n    :precondition (and (full ?basket) (at ?trash_bag on_floor) (at ?p house))\n    :effect (and (in ?trash_bag ?basket) (not (full ?basket)) (full ?trash_bag))\n)\n```\n\n#### Step 4: clean_surface tv cleaner1\n\n```pddl\n(:action clean_surface\n    :parameters (?surface - surface ?cleaner - cleaner ?p - player)\n    :precondition (and (at ?surface house) (at ?cleaner house) (at ?p house) (is_glass ?surface))\n    :effect (clean ?surface)\n)\n```\n\n#### Step 5: pickup_throw_rugs rug1\n\n```pddl\n(:action pickup_throw_rugs\n    :parameters (?rug - rug ?p - player)\n    :precondition (and (at ?rug floor) (at ?p house))\n    :effect (and (at ?rug outside) (clean ?rug))\n)\n```\n\n#### Step 6: clean_room npc basement\n\n```pddl\n(:action clean_room\n    :parameters (?npc - npc ?room - room ?p - player)\n    :precondition (and (at ?npc ?room) (at ?p house))\n    :effect (clean ?room)\n)\n```\n\nThese PDDL actions are designed to capture the intent and logic of each step in the task \"Clean Your Home Efficiently\" based on the provided descriptions and entity states."
        ]
    },
    {
        "task": "Learn Photography by Shooting Macro",
        "action": [
            "Sure, let's generate the PDDL actions based on the given task and steps:\n\nTask: Learn Photography by Shooting Macro\n\nSteps:\n- create_small_studio studio\n- have_appropriate_reflector reflector\n- closeup_lens lens\n- diffuse_light light\n- start_experimenting experiment\n\nDescriptions:\n- Create a very small studio.\n- Have the appropriate sized reflectors.\n- Have a closeup lens.\n- Again, they don't need to be that big, but big enough to diffuse light for your small subject.\n- Start experimenting.\n\nEntity_state:\n-{'reflector': {'light': [{'attribute': 'amount', 'before': 'bright', 'after': 'diffused'}], 'concept_knowledge': []}, 'lens': {'glasses': [{'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'cleanness', 'before': 'cleaner', 'after': 'dirtier'}, {'attribute': 'taste', 'before': 'ungarnished', 'after': 'garnished'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'decoration', 'before': 'undecorated', 'after': 'decorated'}], 'concept_knowledge': ['You are likely to find [[a lens]] in [[the camera]]', '[[THe lens]] is part of [[the eye]]', '[[Lentille]] is a translation of [[Lens]]', '[[Most cameras]] have [[a lens]]', '[[A lens]] is used to [[magnify something]]', '[[A lens]] is made of [[glass]].', '[[eye]] is related to [[lens]]']}, 'experiment': {'light': [{'attribute': 'amount', 'before': 'bright', 'after': 'diffused'}], 'concept_knowledge': ['[[experiment]] is related to [[test]]']}, 'light': {'light': [{'attribute': 'amount', 'before': 'bright', 'after': 'diffused'}], 'concept_knowledge': ['[[mist]] is related to [[light]]', '[[light]] is [[energy]]', '[[the sun]] is for [[light]]', '*Something you find on [[a desk]] is [[light]]', '[[reading the newspaper]] requires [[light]]', '[[dark]] is not [[light]]']}, 'studio': {'studio': [{'attribute': 'availability', 'before': 'absent | considered | non-existent', 'after': 'set up | created'}], 'concept_knowledge': ['You are likely to find [[a microphone boom]] in [[a studio]]']}}-{'reflector': {'light': [{'attribute': 'amount', 'before': 'bright', 'after': 'diffused'}], 'concept_knowledge': []}, 'lens': {'glasses': [{'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'cleanness', 'before': 'cleaner', 'after': 'dirtier'}, {'attribute': 'taste', 'before': 'ungarnished', 'after': 'garnished'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'decoration', 'before': 'undecorated', 'after': 'decorated'}], 'concept_knowledge': ['You are likely to find [[a lens]] in [[the camera]]', '[[THe lens]] is part of [[the eye]]', '[[Lentille]] is a translation of [[Lens]]', '[[Most cameras]] have [[a lens]]', '[[A lens]] is used to [[magnify something]]', '[[A lens]] is made of [[glass]].', '[[eye]] is related to [[lens]]']}, 'experiment': {'light': [{'attribute': 'amount', 'before': 'bright', 'after': 'diffused'}], 'concept_knowledge': ['[[experiment]] is related to [[test]]']}, 'light': {'light': [{'attribute': 'amount', 'before': 'bright', 'after': 'diffused'}], 'concept_knowledge': ['[[mist]] is related to [[light]]', '[[light]] is [[energy]]', '[[the sun]] is for [[light]]', '*Something you find on [[a desk]] is [[light]]', '[[reading the newspaper]] requires [[light]]', '[[dark]] is not [[light]]']}, 'studio': {'studio': [{'attribute': 'availability', 'before': 'absent | considered | non-existent', 'after': 'set up | created'}], 'concept_knowledge': ['You are likely to find [[a microphone boom]] in [[a studio]]']}}-{'reflector': {'light': [{'attribute': 'amount', 'before': 'bright', 'after': 'diffused'}], 'concept_knowledge': []}, 'lens': {'glasses': [{'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'cleanness', 'before': 'cleaner', 'after': 'dirtier'}, {'attribute': 'taste', 'before': 'ungarnished', 'after': 'garnished'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'decoration', 'before': 'undecorated', 'after': 'decorated'}], 'concept_knowledge': ['You are likely to find [[a lens]] in [[the camera]]', '[[THe lens]] is part of [[the eye]]', '[[Lentille]] is a translation of [[Lens]]', '[[Most cameras]] have [[a lens]]', '[[A lens]] is used to [[magnify something]]', '[[A lens]] is made of [[glass]].', '[[eye]] is related to [[lens]]']}, 'experiment': {'light': [{'attribute': 'amount', 'before': 'bright', 'after': 'diffused'}], 'concept_knowledge': ['[[experiment]] is related to [[test]]']}, 'light': {'light': [{'attribute': 'amount', 'before': 'bright', 'after': 'diffused'}], 'concept_knowledge': ['[[mist]] is related to [[light]]', '[[light]] is [[energy]]', '[[the sun]] is for [[light]]', '*Something you find on [[a desk]] is [[light]]', '[[reading the newspaper]] requires [[light]]', '[[dark]] is not [[light]]']}, 'studio': {'studio': [{'attribute': 'availability', 'before': 'absent | considered | non-existent', 'after': 'set up | created'}], 'concept_knowledge': ['You are likely to find [[a microphone boom]] in [[a studio]]']}}-{'reflector': {'light': [{'attribute': 'amount', 'before': 'bright', 'after': 'diffused'}], 'concept_knowledge': []}, 'lens': {'glasses': [{'attribute': 'cleanness', 'before': 'clean', 'after': 'dirty'}, {'attribute': 'wetness', 'before': 'dry', 'after': 'wet'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'cleanness', 'before': 'cleaner', 'after': 'dirtier'}, {'attribute': 'taste', 'before': 'ungarnished', 'after': 'garnished'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'decoration', 'before': 'undecorated', 'after': 'decorated'}], 'concept_knowledge': ['You are likely to find [[a lens]] in [[the camera]]', '[[THe lens]] is part of [[the eye]]', '[[Lentille]] is a translation of [[Lens]]', '[[Most cameras]] have [[a lens]]', '[[A lens]] is used to [[magnify something]]', '[[A lens]] is made of [[glass]].', '[[eye]] is related to [[lens]]']}, 'experiment': {'light': [{'attribute': 'amount', 'before': 'bright', 'after': 'diffused'}], 'concept_knowledge': ['[[experiment]] is related to [[test]]']}, 'light': {'light': [{'attribute': 'amount', 'before': 'bright', 'after': 'diffused'}], 'concept_knowledge': ['[[mist]] is related to [[light]]', '[[light]] is [[energy]]', '[[the sun]] is for [[light]]', '*Something you find on [[a desk]] is [[light]]', '[[reading the newspaper]] requires [[light]]', '[[dark]] is not [[light]]']}, 'studio': {'studio': [{'attribute': 'availability', 'before': 'absent | considered | non-existent', 'after': 'set up | created'}], 'concept_knowledge': ['You are likely to find [[a microphone boom]] in [[a studio]]']}}\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.\n\nPDDL Actions:\n\n```lisp\n(:action create_small_studio\n    :parameters (?p - player ?s - studio)\n    :precondition (and (not (studio_set_up ?s)))\n    :effect (and (studio_set_up ?s))\n)\n\n(:action have_appropriate_reflector\n    :parameters (?p - player ?r - reflector ?l - light)\n    :precondition (and (not (reflector_set ?r)) (bright_light ?l))\n    :effect (and (reflector_set ?r) (diffused_light ?l))\n)\n\n(:action closeup_lens\n    :parameters (?p - player ?l - lens)\n    :precondition (and (not (lens_ready ?l)))\n    :effect (and (lens_ready ?l))\n)\n\n(:action diffuse_light\n    :parameters (?p - player ?l - light)\n    :precondition (and (bright_light ?l))\n    :effect (and (diffused_light ?l))\n)\n\n(:action start_experimenting\n    :parameters (?p - player ?e - experiment ?l - lens ?s - studio ?r - reflector ?light - light)\n    :precondition (and (studio_set_up ?s) (reflector_set ?r) (lens_ready ?l) (diffused_light ?light))\n    :effect (and (experiment_started ?e))\n)\n```\n\nThis set of PDDL actions captures the steps required to learn photography by shooting macro, ensuring each step is logically connected to the task and the entity states provided."
        ]
    },
    {
        "task": "Recycle Underpants",
        "action": [
            "Sure, here are the PDDL actions based on the provided task and steps:\n\nTask: Recycle Underpants\n\nSteps:\n- clean_underpants underpants1\n- use_as_garden_ties underpants1\n- make_craft_item underpants3 scissors1\n- use_as_stuffing underpants3\n- wear_underpants underpants1\n- donate_underpants underpants1\n\nDescriptions:\n- Turn the underpants into cleaning rags.\n- Use the underwear as garden ties.\n- Turn quality undies into craft items.\n- Use a bundle of old underwear as stuffing.\n- Children can wear old underwear on the outside of their pants to play superhero.\n- Donate the underpants.\n\nEntity State:\n- {'scissors': {'the clipping': [{'attribute': 'location', 'before': 'attached', 'after': 'cut'}, {'attribute': 'location', 'before': 'attached', 'after': 'removed'}, {'attribute': 'moisture', 'before': 'drier | dry', 'after': 'wetter | moister | moistened'}, {'attribute': 'location', 'before': 'attached', 'after': 'removed'}, {'attribute': 'composition', 'before': 'pure', 'after': 'dipped into rooting hormone'}, {'attribute': 'location', 'before': 'attached', 'after': 'removed'}], 'concept_knowledge': ['[[scissors]] are used to [[cut]]', '[[scissors]] can [[cut that paper]]', '[[cut]] is related to [[scissors]]', '*Something you find in [[the desk]] is [[scissors]]', '[[going to get a haircut]] requires [[scissors]]']}, 'underpants': {'clothing': [{'attribute': 'cleanness', 'before': 'dirty', 'after': 'clean'}], 'concept_knowledge': []}}\n\nPDDL Actions:\n```lisp\n(:action clean_underpants\n  :parameters (?u - underpants)\n  :precondition (and (dirty ?u))\n  :effect (and (clean ?u) (not (dirty ?u)))\n)\n\n(:action use_as_garden_ties\n  :parameters (?u - underpants)\n  :precondition (and (clean ?u))\n  :effect (and (garden_tie ?u))\n)\n\n(:action make_craft_item\n  :parameters (?u - underpants ?s - scissors)\n  :precondition (and (clean ?u) (available ?s))\n  :effect (and (craft_item ?u) (not (available ?s)))\n)\n\n(:action use_as_stuffing\n  :parameters (?u - underpants)\n  :precondition (and (clean ?u))\n  :effect (and (stuffing ?u))\n)\n\n(:action wear_underpants\n  :parameters (?u - underpants)\n  :precondition (and (clean ?u))\n  :effect (and (worn ?u))\n)\n\n(:action donate_underpants\n  :parameters (?u - underpants)\n  :precondition (and (clean ?u))\n  :effect (and (donated ?u) (not (clean ?u)))\n)\n```\n\nExplanation of Actions:\n1. **clean_underpants**: This action cleans the underpants if they are dirty.\n2. **use_as_garden_ties**: This action uses the cleaned underpants as garden ties.\n3. **make_craft_item**: This action uses the cleaned underpants along with scissors to make a craft item.\n4. **use_as_stuffing**: This action uses the cleaned underpants as stuffing material.\n5. **wear_underpants**: This action allows wearing the cleaned underpants.\n6. **donate_underpants**: This action donates the cleaned underpants."
        ]
    },
    {
        "task": "Make Whole Wheat Pastry With Canola",
        "action": [
            "Here are the PDDL actions for the task \"Make Whole Wheat Pastry With Canola\" based on the provided steps, descriptions, and entity states:\n\n```pddl\n(:action place_ingredients\n    :parameters (?w - wheat ?b - mixing_bowl)\n    :precondition (and (location ?w in_separate_packages) (location ?b empty))\n    :effect (and (location ?w in_mixing_bowl) (volume ?b holding_flour_and_salt))\n)\n\n(:action pour_ingredients_into_oil\n    :parameters (?u - user ?b - bottle ?o - oil ?c - container)\n    :precondition (and (location ?o in_bottle) (location ?c on_countertop))\n    :effect (and (location ?o in_container) (volume ?c fuller))\n)\n\n(:action place_pastry_on_sheet\n    :parameters (?p - pastry ?s - sheet)\n    :precondition (and (location ?p in_bowl) (texture ?p smooth))\n    :effect (and (location ?p on_wax_paper) (texture ?p flattened))\n)\n\n(:action remove_from_fridge\n    :parameters (?w - water ?f - faucet)\n    :precondition (and (location ?w in_fridge))\n    :effect (and (location ?w out_of_faucet) (temperature ?w warmer))\n)\n\n(:action press_into_pie_dish\n    :parameters (?m - mixing_bowl ?t - table)\n    :precondition (and (location ?m on_table) (texture ?m smooth))\n    :effect (and (location ?m in_pie_dish) (texture ?m rigid))\n)\n\n(:action create_edge\n    :parameters (?c - canola_oil ?t - table)\n    :precondition (and (location ?c on_table))\n    :effect (and (texture ?c edged) (cleanness ?t cluttered))\n)\n```\n\n### Explanation:\n- **place_ingredients**: Places whole wheat flour and salt into the mixing bowl, changing its state from separate packages to mixed in the bowl.\n- **pour_ingredients_into_oil**: Pours oil from a bottle into a container, affecting the location and volume of the oil.\n- **place_pastry_on_sheet**: Moves the pastry dough from the bowl onto a sheet of wax paper, changing its location and texture.\n- **remove_from_fridge**: Removes water from the fridge, changing its location and temperature.\n- **press_into_pie_dish**: Presses the pastry into a pie dish, altering its location and texture.\n- **create_edge**: Creates an edge on the pastry using a fork, affecting its texture and the table's cleanness."
        ]
    },
    {
        "task": "Freeze Baked Cookies or Biscuits",
        "action": [
            "Here are the PDDL actions for the task \"Freeze Baked Cookies or Biscuits\" based on the provided steps, descriptions, and entity states:\n\n```pddl\n(:action place_in_container; place cookies into a rigid, airtight container\n    :parameters (?p - player ?cookies - cookies ?container - container)\n    :precondition (and (inventory ?p ?cookies) (inventory ?p ?container) (rigid ?container) (airtight ?container))\n    :effect (and (in_container ?cookies ?container) (not (on_plate ?cookies)) (not (on_tray ?cookies)))\n)\n\n(:action separate_using_paper; separate cookies using freezer paper, baking paper, or foil\n    :parameters (?p - player ?cookies - cookies ?paper - paper)\n    :precondition (and (in_container ?cookies) (inventory ?p ?paper))\n    :effect (and (separated ?cookies) (lined ?cookies))\n)\n\n(:action freeze_biscuits; place cookies in the freezer to freeze\n    :parameters (?p - player ?cookies - cookies ?freezer - freezer)\n    :precondition (and (in_container ?cookies) (separated ?cookies) (inventory ?p ?freezer))\n    :effect (and (in_freezer ?cookies) (frozen ?cookies) (hard ?cookies) (cold ?cookies))\n)\n\n(:action thaw; remove cookies from the freezer to thaw\n    :parameters (?p - player ?cookies - cookies ?freezer - freezer)\n    :precondition (and (in_freezer ?cookies) (frozen ?cookies))\n    :effect (and (not (in_freezer ?cookies)) (thawed ?cookies) (warm ?cookies) (soft ?cookies) (chewy ?cookies))\n)\n```\n\n### Explanation:\n\n1. **place_in_container**: This action places the cookies into a rigid, airtight container. The preconditions ensure that the player has both the cookies and the container, and that the container is suitable for storage. The effect is that the cookies are now in the container, and they are no longer on a plate or tray.\n\n2. **separate_using_paper**: This action separates the cookies using paper. The precondition checks that the cookies are in a container and that the player has paper. The effect is that the cookies are now separated and lined.\n\n3. **freeze_biscuits**: This action places the cookies in the freezer to freeze them. The preconditions ensure that the cookies are in a container, separated, and the player has access to a freezer. The effects are that the cookies are in the freezer, frozen, hard, and cold.\n\n4. **thaw**: This action removes the cookies from the freezer to thaw them. The preconditions check that the cookies are in the freezer and frozen. The effects are that the cookies are no longer in the freezer, and they become thawed, warm, soft, and chewy."
        ]
    },
    {
        "task": "Make a Duct Tape Necklace",
        "action": [
            "Here are the PDDL actions for the task \"Make a Duct Tape Necklace,\" following the steps and descriptions provided:\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action make_horizontal_bar ; create a horizontal bar using duct tape\n    :parameters (?npc - player ?tape - duct_tape ?loc - location ?bar - horizontal_bar)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?tape) (rolled ?tape))\n    :effect (and (created ?bar) (not (rolled ?tape)) (unrolled ?tape))\n)\n\n(:action cut_roll ; cut the duct tape roll to a specific length\n    :parameters (?npc - player ?tape - duct_tape ?loc - location ?cut_piece - tape_piece)\n    :precondition (and (at ?npc ?loc) (unrolled ?tape) (inventory ?npc ?tape))\n    :effect (and (inventory ?npc ?cut_piece) (shorter ?tape) (not (unrolled ?tape)))\n)\n\n(:action fold_wreath ; fold the tape into a wreath-like structure\n    :parameters (?npc - player ?cut_piece - tape_piece ?wreath - wreath ?loc - location)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?cut_piece) (status ?wreath in_progress))\n    :effect (and (status ?wreath completed) (folded ?cut_piece) (not (sticky ?cut_piece)))\n)\n\n(:action fold_half_tape ; fold the tape halfway to remove stickiness\n    :parameters (?npc - player ?cut_piece - tape_piece ?loc - location)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?cut_piece) (sticky ?cut_piece))\n    :effect (and (folded ?cut_piece) (not (sticky ?cut_piece)) (smooth ?cut_piece))\n)\n\n(:action tape_ends ; join the ends of the tape to form a closed loop\n    :parameters (?npc - player ?cut_piece - tape_piece ?ends - ends ?loc - location)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?cut_piece) (organization ?ends separate))\n    :effect (and (organization ?ends touching) (form ?ends joined_together))\n)\n\n(:action put_in_machine ; finalize the duct tape necklace by placing it in a machine\n    :parameters (?npc - player ?necklace - duct_tape_necklace ?loc - location)\n    :precondition (and (at ?npc ?loc) (created ?necklace))\n    :effect (and (placed_in_machine ?necklace))\n)\n```\n\n---\n\n### Explanation of Actions:\n1. **make_horizontal_bar**: This action represents unrolling the duct tape to create a horizontal bar as the first step in the process.\n2. **cut_roll**: This action involves cutting the unrolled tape to a specific length, as described in the task.\n3. **fold_wreath**: This action folds the tape into a wreath-like structure, completing the \"wreath\" status.\n4. **fold_half_tape**: This action folds the tape halfway to eliminate stickiness and make it smooth, as per the description.\n5. **tape_ends**: This action joins the ends of the folded tape to form a closed loop, completing the necklace structure.\n6. **put_in_machine**: This final action places the completed duct tape necklace in a machine or finalizes the process.\n\nEach action is designed to align with the task's steps and the entity states provided. If a step seemed unclear or incomplete, it was adapted to fit the logical sequence of making a duct tape necklace."
        ]
    },
    {
        "task": "Get a Headshot in Gears of War",
        "action": [
            "Sure, I'll generate the PDDL actions for the task \"Get a Headshot in Gears of War\" based on the provided steps and descriptions.\n\nTask: Get a Headshot in Gears of War\n\nSteps:\n- shotgun_shot player1 player2\n- shotgun_shot player1\n- pistol_shot player1 player2\n- boomshot_shot weapon1 player1\n\nDescriptions:\n- Sniper \u2014 Simply aim at the head and pull the trigger, unless you're the host, in which case you will need to aim in front of where they're going.\n- Shotgun \u2014 The aim on the shotgun is almost like a rectangle.\n- Pistol \u2014 I'm not sure because I haven't played in a while, but it's either six or seven shots to the head with the standard-issue pistol for a headshot.\n- BoomShot \u2014 BoomShot headshots are possible \u2014 don't let anyone tell you they're not but the chance of one happening is about a million to one.\n\nEntity State:\n-{'weapon': {'weapon': [{'attribute': 'location', 'before': 'in vehicle', 'after': 'on ground'}, {'attribute': 'attention', 'before': 'carelessly disguised | visible', 'after': 'carefully disguised | disguised'}, {'attribute': 'location', 'before': 'absent', 'after': 'on weapon'}, {'attribute': 'decoration', 'before': 'bare', 'after': 'camouflaged'}], 'concept_knowledge': ['[[a weapon]] is for [[killing someone]]', '[[a pistol]] is [[a weapon, that is]]', '[[gun]] is related to [[weapon]]', '[[killing someone]] requires [[a weapon]]', 'You are likely to find [[a weapon]] in [[the police station]]']}, 'player': {'players': [{'attribute': 'knowledge', 'before': 'unselected', 'after': 'selected'}, {'attribute': 'knowledge', 'before': 'unselected', 'after': 'selected'}, {'attribute': 'location', 'before': 'away from wall', 'after': 'against wall'}, {'attribute': 'division', 'before': 'together', 'after': 'separated'}], 'concept_knowledge': ['[[a player]] is part of [[the team]]', '[[Jogador]] is a translation of [[player]]', '[[record]] is related to [[player]]']}}-{'weapon': {'weapon': [{'attribute': 'location', 'before': 'in vehicle', 'after': 'on ground'}, {'attribute': 'attention', 'before': 'carelessly disguised | visible', 'after': 'carefully disguised | disguised'}, {'attribute': 'location', 'before': 'absent', 'after': 'on weapon'}, {'attribute': 'decoration', 'before': 'bare', 'after': 'camouflaged'}], 'concept_knowledge': ['[[a weapon]] is for [[killing someone]]', '[[a pistol]] is [[a weapon, that is]]', '[[gun]] is related to [[weapon]]', '[[killing someone]] requires [[a weapon]]', 'You are likely to find [[a weapon]] in [[the police station]]']}, 'player': {'players': [{'attribute': 'knowledge', 'before': 'unselected', 'after': 'selected'}, {'attribute': 'knowledge', 'before': 'unselected', 'after': 'selected'}, {'attribute': 'location', 'before': 'away from wall', 'after': 'against wall'}, {'attribute': 'division', 'before': 'together', 'after': 'separated'}], 'concept_knowledge': ['[[a player]] is part of [[the team]]', '[[Jogador]] is a translation of [[player]]', '[[record]] is related to [[player]]']}}\n\nPDDL Actions:\n```lisp\n(:action shotgun_shot\n    :parameters (?p1 - player ?p2 - player)\n    :precondition (and (has_weapon ?p1 shotgun) (alive ?p2))\n    :effect (and (damage ?p2 shotgun)))\n\n(:action shotgun_shot_no_target\n    :parameters (?p1 - player)\n    :precondition (and (has_weapon ?p1 shotgun))\n    :effect (and (shot_fired ?p1 shotgun)))\n\n(:action pistol_shot\n    :parameters (?p1 - player ?p2 - player)\n    :precondition (and (has_weapon ?p1 pistol) (alive ?p2))\n    :effect (and (damage ?p2 pistol)))\n\n(:action boomshot_shot\n    :parameters (?w - weapon ?p - player)\n    :precondition (and (has_weapon ?p ?w) (weapon_type ?w boomshot))\n    :effect (and (shot_fired ?p ?w)))\n```\n\nIn these actions:\n- `shotgun_shot` represents a player using a shotgun to shoot at another player.\n- `shotgun_shot_no_target` represents a player firing a shotgun without a specific target.\n- `pistol_shot` represents a player using a pistol to shoot at another player.\n- `boomshot_shot` represents a player using a BoomShot weapon.\n\nEach action includes the necessary preconditions and the effects based on the entity states and descriptions provided."
        ]
    },
    {
        "task": "Prevent a Wick Lamp or Stove from Smoking",
        "action": [
            "Sure, I will generate the PDDL actions based on the provided task and steps. Here are the corresponding PDDL actions:\n\n### PDDL Actions:\n```lisp\n(:action pour_vinegar_into_container\n    :parameters (?v - vinegar ?c - container)\n    :precondition (and (location ?v bottle) (location ?c cabinet))\n    :effect (and (location ?v ?c) (not (location ?v bottle)) (location ?c countertop))\n)\n\n(:action remove_wick\n    :parameters (?w - wick ?l - lamp ?s - stove)\n    :precondition (and (or (location ?w ?l) (location ?w ?s)))\n    :effect (and (location ?w counter) (or (not (location ?w ?l)) (not (location ?w ?s))))\n)\n\n(:action dip_wicks_in_vinegar\n    :parameters (?w - wick ?v - vinegar ?c - container)\n    :precondition (and (location ?w counter) (location ?v ?c))\n    :effect (and (composition ?w wet))\n)\n\n(:action dry_wicks\n    :parameters (?w - wick)\n    :precondition (composition ?w wet)\n    :effect (and (composition ?w dry) (wetness ?w dry))\n)\n\n(:action make_wicks_dry\n    :parameters (?w - wick)\n    :precondition (composition ?w wet)\n    :effect (and (composition ?w dry))\n)\n```\n\n### Descriptions and Entity States:\n1. **pour_vinegar_into_container**: Pour some white vinegar into a small container deep enough for dipping.\n   - **Entity State**:\n     - Vinegar: `location: in bottle` -> `location: in container`\n     - Container: `location: in cabinet` -> `location: on countertop`\n\n2. **remove_wick**: Remove the wick from the lamp or stove, or use wicks yet to be inserted.\n   - **Entity State**:\n     - Wick: `location: on lamp` or `location: on stove` -> `location: on counter`\n\n3. **dip_wicks_in_vinegar**: Dip each wick into the vinegar.\n   - **Entity State**:\n     - Wick: `composition: dry` -> `composition: wet`\n     - Vinegar: `location: in container` -> `location: in wick`\n\n4. **dry_wicks**: Allow to dry thoroughly.\n   - **Entity State**:\n     - Wick: `composition: wet` -> `composition: dry`\n     - Wick: `wetness: wet` -> `wetness: dry`\n\n5. **make_wicks_dry**: Use once dry.\n   - **Entity State**:\n     - Wick: `composition: wet` -> `composition: dry`\n\nThese actions follow the provided steps and ensure that the task of preventing a wick lamp or stove from smoking is achieved by treating the wicks with vinegar and allowing them to dry thoroughly."
        ]
    },
    {
        "task": "Defeat a Thug on Dead Island",
        "action": [
            "To generate PDDL actions for the task \"Defeat a Thug on Dead Island,\" we need to define actions based on the provided steps and entity states. Here are the PDDL actions for each step:\n\n### Step 1: make_horizontal_bar branch_piece\nThis step involves manipulating a branch piece to create a horizontal bar, possibly for use as a weapon or tool.\n\n```pddl\n(:action make_horizontal_bar\n     :parameters (?branch_piece - branch_piece)\n     :precondition (and (at ?branch_piece around_asparagus) (not (wrapped ?branch_piece)))\n     :effect (and (wrapped ?branch_piece) (discarded ?branch_piece))\n)\n```\n\n### Step 2: get_weapon npc weapon\nThis step involves the NPC acquiring a weapon.\n\n```pddl\n(:action get_weapon\n     :parameters (?npc - npc ?weapon - weapon)\n     :precondition (and (at ?weapon in_vehicle) (visible ?weapon))\n     :effect (and (inventory ?npc ?weapon) (not (at ?weapon in_vehicle)) (disguised ?weapon))\n)\n```\n\n### Step 3: check_weapons pistol ammunition\nThis step involves checking the pistol and ammunition to ensure they are ready for use.\n\n```pddl\n(:action check_weapons\n     :parameters (?pistol - pistol ?ammunition - ammunition)\n     :precondition (and (at ?pistol hidden) (in_inventory ?ammunition))\n     :effect (and (equipped ?pistol) (out ?pistol) (on_weapon ?ammunition))\n)\n```\n\n### Step 4: attack_wailmer npc\nThis step involves the NPC attacking a target, presumably the Thug.\n\n```pddl\n(:action attack_thug\n     :parameters (?npc - npc ?thug - thug ?weapon - weapon)\n     :precondition (and (equipped ?weapon) (inventory ?npc ?weapon) (at ?npc ?location) (at ?thug ?location))\n     :effect (and (defeated ?thug) (not (alive ?thug)))\n)\n```\n\n### Additional Notes:\n- The action names and parameters are chosen to reflect the task of defeating a Thug.\n- Preconditions and effects are based on the entity states provided, ensuring logical consistency with the task.\n- The actions ensure that the NPC is equipped and ready to engage in combat, as per the task requirements."
        ]
    },
    {
        "task": "Clean Synthetic Hiking Gear",
        "action": [
            "Here are the PDDL actions for the task \"Clean Synthetic Hiking Gear\" based on the provided steps and descriptions:\n\n```pddl\n(:action read_instructions\n    :parameters (?ins - instructions)\n    :precondition (and (knowledge ?ins unread))\n    :effect (and (knowledge ?ins read))\n)\n\n(:action wash_gore_tex\n    :parameters (?cl - clothing)\n    :precondition (and (cleanness ?cl dirty) (material ?cl gore_tex))\n    :effect (and (cleanness ?cl clean))\n)\n\n(:action check_boots\n    :parameters (?npc - npc ?boots - boots)\n    :precondition (and (worn_by ?boots ?npc) (material ?boots synthetic))\n    :effect (and (inspected ?boots))\n)\n\n(:action clean_sliplargerbund\n    :parameters (?npc - npc ?jacket - sliplargerbund)\n    :precondition (and (worn_by ?jacket ?npc) (material ?jacket synthetic) (contains_down ?jacket))\n    :effect (and (cleanness ?jacket clean))\n)\n\n(:action wash_polar_fleece\n    :parameters (?wm - washing_machine ?pf - polar_fleece)\n    :precondition (and (fullness ?wm empty) (electric_conductivity ?wm off) (material ?pf polar_fleece))\n    :effect (and (fullness ?wm full_with_polar_fleece) (electric_conductivity ?wm on) (cleanness ?pf clean))\n)\n```\n\n### Explanation:\n- **read_instructions**: This action ensures that the instructions are read before proceeding with the cleaning tasks.\n- **wash_gore_tex**: This action washes Gore-Tex clothing, ensuring it is clean.\n- **check_boots**: This action involves checking synthetic boots worn by the NPC.\n- **clean_sliplargerbund**: This action cleans synthetic jackets containing down, ensuring they are handled with care.\n- **wash_polar_fleece**: This action describes washing polar fleece in the washing machine, changing its state from dirty to clean."
        ]
    },
    {
        "task": "Remove Paint from Windows",
        "action": [
            "Sure, let's generate the PDDL actions for the task \"Remove Paint from Windows\" based on the provided steps and descriptions.\n\nTask: Remove Paint from Windows\n\nSteps:\n- clean_cloth cloth1 sponge1\n- wet_window_with_water water\n- position_razor blade1 razor1\n- scrape_window_with_paint window_clean\n- clean_window window\n- remove_small_splatter paint_splatters\n\nDescriptions:\n- You will need a bucket of hot water mixed with dish soap, a clean cloth or sponge, a new safety razor blade, and some glass cleaner.\n- Wet the window with the water and dish soap.\n- Position the razor blade.\n- Using slow, smooth motions, start scraping the paint from the window.\n- Once all of the paint has been scraped away, spritz the window with some glass cleaner and use a clean, dry cloth to buff the windows clean.\n- Remove small paint splatters with chemical solvents.\n\nEntity State:\n- The entity states provided describe various attributes and changes before and after each action.\n\nPDDL Actions:\n\n```lisp\n(:action clean_cloth\n    :parameters (?c - cloth ?s - sponge)\n    :precondition (and (at ?c dry) (at ?s dry))\n    :effect (and (at ?c clean) (at ?s wet))\n)\n\n(:action wet_window_with_water\n    :parameters (?w - window ?water - water)\n    :precondition (and (at ?w dry) (at ?water hot))\n    :effect (and (at ?w wet))\n)\n\n(:action position_razor\n    :parameters (?razor - razor ?blade - blade ?w - window)\n    :precondition (and (at ?razor in_box) (at ?blade in_box) (at ?w wet))\n    :effect (and (at ?razor in_hand) (at ?blade in_hand) (at ?razor in_contact_with_window) (at ?blade in_contact_with_window))\n)\n\n(:action scrape_window_with_paint\n    :parameters (?razor - razor ?w - window)\n    :precondition (and (at ?razor in_contact_with_window) (at ?w wet))\n    :effect (and (at ?razor dirty) (at ?w clean) (at ?w more_transparent))\n)\n\n(:action clean_window\n    :parameters (?w - window ?cleaner - glass_cleaner ?cloth - cloth)\n    :precondition (and (at ?w clean) (at ?cleaner available) (at ?cloth dry))\n    :effect (and (at ?w spritzed) (at ?w buffed) (at ?w more_transparent))\n)\n\n(:action remove_small_splatter\n    :parameters (?splatter - paint_splatter ?solvent - chemical_solvent ?w - window)\n    :precondition (and (at ?splatter on_window) (at ?solvent available) (at ?w clean))\n    :effect (and (at ?splatter removed) (at ?w completely_clean))\n)\n```\n\nThese actions capture the steps described for removing paint from windows, ensuring that the preconditions and effects align with the entity states provided."
        ]
    },
    {
        "task": "Use a Mic in Team Fortress 2",
        "action": [
            "Certainly! Below are the PDDL actions generated for the task \"Use a Mic in Team Fortress 2\" based on the provided steps and entity states.\n\n### PDDL Actions:\n\n```lisp\n(:action make_microphone_connected\n    :parameters (?p - player ?mic - microphone)\n    :precondition (and (not (connected ?mic)) (inventory ?p ?mic))\n    :effect (connected ?mic)\n)\n\n(:action find_panel\n    :parameters (?p - player ?panel - panel)\n    :precondition (and (not (visible ?panel)) (inventory ?p ?panel))\n    :effect (visible ?panel)\n)\n\n(:action check_panel\n    :parameters (?p - player ?panel - panel)\n    :precondition (and (visible ?panel) (not (selected ?panel)) (inventory ?p ?panel))\n    :effect (selected ?panel)\n)\n\n(:action talk_using_microphone\n    :parameters (?p - player ?mic - microphone ?voice - voice)\n    :precondition (and (connected ?mic) (not (heard ?voice)) (inventory ?p ?mic) (inventory ?p ?voice))\n    :effect (heard ?voice)\n)\n\n(:action use_microphone\n    :parameters (?p - player ?voice - voice)\n    :precondition (and (heard ?voice) (not (efficient ?voice)) (inventory ?p ?voice))\n    :effect (efficient ?voice)\n)\n\n(:action advise_teammates\n    :parameters (?p - player ?advice - advice)\n    :precondition (and (not (given ?advice)) (inventory ?p ?advice))\n    :effect (given ?advice)\n)\n```\n\n### Explanation:\n\n- **make_microphone_connected**: This action connects the microphone, transitioning its state from unconnected to connected.\n  \n- **find_panel**: This action makes the panel visible, which is a prerequisite for interacting with it.\n\n- **check_panel**: This action selects the panel, allowing further interaction with its settings.\n\n- **talk_using_microphone**: This action allows the player to use the microphone to make their voice heard, changing the state of the voice from unheard to heard.\n\n- **use_microphone**: This action ensures that the use of the microphone is efficient, transitioning the voice state to efficient.\n\n- **advise_teammates**: This action represents giving advice to teammates, changing the state of advice from withheld to given.\n\nThese actions are designed to reflect the logical sequence and state transitions required to achieve the task of using a microphone in Team Fortress 2."
        ]
    }
]