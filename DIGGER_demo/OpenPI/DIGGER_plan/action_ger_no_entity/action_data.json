[
    {
        "task": "Connect a Wii to HD TV",
        "action": [
            "Here are the generated PDDL actions for the task \"Connect a Wii to HD TV\" based on the steps and descriptions provided:\n\n---\n\n### PDDL Actions:\n\n```lisp\n(:action plug_in_converter_to_tv ; Plug the HDMI converter into the TV's HDMI input\n    :parameters (?converter - device ?tv - tv)\n    :precondition (and (at ?converter ?tv) (has_hdmi_input ?tv) (not (connected ?converter ?tv)))\n    :effect (and (connected ?converter ?tv))\n)\n\n(:action plug_hdmi_into_converter ; Plug the HDMI cord into the HDMI converter\n    :parameters (?hdmi - cable ?converter - device)\n    :precondition (and (at ?hdmi ?converter) (is_hdmi_converter ?converter) (not (connected ?hdmi ?converter)))\n    :effect (and (connected ?hdmi ?converter))\n)\n\n(:action plug_converter_to_wii ; Plug the HDMI converter into the Wii's AV Composite Output\n    :parameters (?converter - device ?wii - console)\n    :precondition (and (at ?converter ?wii) (has_av_composite_output ?wii) (is_hdmi_converter ?converter) (not (connected ?converter ?wii)))\n    :effect (and (connected ?converter ?wii))\n)\n\n(:action plug_hdmi_into_tv ; Connect the HDMI cord from the converter to the TV\n    :parameters (?hdmi - cable ?tv - tv ?converter - device)\n    :precondition (and (connected ?hdmi ?converter) (connected ?converter ?tv) (has_hdmi_input ?tv) (not (connected ?hdmi ?tv)))\n    :effect (and (connected ?hdmi ?tv))\n)\n```\n\n---\n\n### Explanation of Actions:\n\n1. **`plug_in_converter_to_tv`**: This action represents plugging the HDMI converter into the TV's HDMI input. The preconditions ensure that the converter is at the TV's location, the TV has an HDMI input, and the converter is not already connected. The effect establishes the connection between the converter and the TV.\n\n2. **`plug_hdmi_into_converter`**: This action represents plugging the HDMI cord into the HDMI converter. The preconditions ensure that the HDMI cable is at the converter's location, the converter is an HDMI-compatible device, and the HDMI cable is not already connected. The effect establishes the connection between the HDMI cable and the converter.\n\n3. **`plug_converter_to_wii`**: This action represents plugging the HDMI converter into the Wii's AV Composite Output. The preconditions ensure that the converter is at the Wii's location, the Wii has an AV Composite Output, and the converter is HDMI-compatible. The effect establishes the connection between the converter and the Wii.\n\n4. **`plug_hdmi_into_tv`**: This action represents connecting the HDMI cord from the converter to the TV. The preconditions ensure that the HDMI cord is already connected to the converter, the converter is connected to the TV, and the TV has an HDMI input. The effect establishes the connection between the HDMI cord and the TV.\n\n---\n\n### Adjustments Made:\n- The steps provided in the task were restructured to align with the logical sequence of connecting a Wii to an HD TV using an HDMI converter.\n- Irrelevant or redundant steps were omitted or rephrased to match the task descriptions.\n- Preconditions and effects were crafted based on the logical dependencies of the task, ensuring accurate modeling of the process.\n\nLet me know if you need further refinements or additional actions!"
        ]
    },
    {
        "task": "Make Cheese Sauce with Jalape\u00f1o Peppers",
        "action": [
            "Sure, let's generate the PDDL actions based on the task \"Make Cheese Sauce with Jalape\u00f1o Peppers\" and the provided steps and descriptions.\n\nTask: Make Cheese Sauce with Jalape\u00f1o Peppers\n\nSteps:\n- cut velveeta cutting_board\n- set_burner_add_cheese velveeta\n- set_burner_add_cheese velveeta pot\n- add_peppers_and_olives peppers pot\n- serve_cheese_sauce stove_knob\n\nDescriptions:\n- First cut the Velveeta into tiny squares and set aside.\n- Set the burner on a medium to low setting, before that you begin adding the cheese product.\n- Wait until the Velveeta has melted lower the heat somewhat and add in the (Rotel) tomatoes.\n- Add in the Jalapeno peppers, and black olives if desired.\n- Cheese sauce is at its best if served very warm.\n\nPDDL Actions:\n\n```pddl\n(:action cut_velveeta\n    :parameters (?p - player ?velveeta - cheese ?board - cutting_board)\n    :precondition (and (at ?p ?board) (at ?velveeta ?board) (not (cut ?velveeta)))\n    :effect (and (cut ?velveeta) (prepared ?velveeta))\n)\n\n(:action set_burner_add_cheese\n    :parameters (?p - player ?velveeta - cheese ?burner - stove_knob ?pot - pot)\n    :precondition (and (at ?p ?burner) (cut ?velveeta) (at ?velveeta ?p) (at ?pot ?burner))\n    :effect (and (melted ?velveeta) (in ?velveeta ?pot) (burner_on ?burner medium))\n)\n\n(:action add_peppers_and_olives\n    :parameters (?p - player ?peppers - peppers ?pot - pot ?olives - olives)\n    :precondition (and (at ?p ?pot) (melted ?velveeta) (at ?peppers ?p) (at ?olives ?p))\n    :effect (and (in ?peppers ?pot) (in ?olives ?pot))\n)\n\n(:action serve_cheese_sauce\n    :parameters (?p - player ?burner - stove_knob ?pot - pot)\n    :precondition (and (at ?p ?burner) (melted ?velveeta) (in ?peppers ?pot) (in ?olives ?pot) (burner_on ?burner low))\n    :effect (and (served ?cheese_sauce) (burner_off ?burner))\n)\n```\n\nExplanation of the PDDL Actions:\n\n1. **cut_velveeta**:\n   - **Parameters**: The player, the Velveeta cheese, and the cutting board.\n   - **Preconditions**: The player and the Velveeta cheese must be at the cutting board, and the Velveeta cheese must not be cut yet.\n   - **Effects**: The Velveeta cheese is cut and prepared.\n\n2. **set_burner_add_cheese**:\n   - **Parameters**: The player, the Velveeta cheese, the stove knob, and the pot.\n   - **Preconditions**: The player must be at the stove knob, the Velveeta cheese must be cut and in the player's possession, and the pot must be at the burner.\n   - **Effects**: The Velveeta cheese is melted and added to the pot, and the burner is set to medium heat.\n\n3. **add_peppers_and_olives**:\n   - **Parameters**: The player, the Jalapeno peppers, the pot, and the black olives.\n   - **Preconditions**: The player must be at the pot, the Velveeta cheese must be melted, and the peppers and olives must be in the player's possession.\n   - **Effects**: The peppers and olives are added to the pot.\n\n4. **serve_cheese_sauce**:\n   - **Parameters**: The player, the stove knob, and the pot.\n   - **Preconditions**: The player must be at the stove knob, the Velveeta cheese must be melted, the peppers and olives must be in the pot, and the burner must be on low heat.\n   - **Effects**: The cheese sauce is served, and the burner is turned off.\n\nThese actions capture the steps and conditions needed to make cheese sauce with Jalape\u00f1o peppers according to the given task and descriptions."
        ]
    },
    {
        "task": "Board a Small Boat",
        "action": [
            "Sure, let's generate the PDDL actions for the given task \"Board a Small Boat\" based on the provided steps and descriptions.\n\nTask: Board a Small Boat\n\nSteps:\n- choose_boat passenger1 boat1\n- hold_rails passenger1 boat1\n- stabilize_boat passenger1 boat1\n- stabilize_boat passenger1 boat1\n- stabilize_boat passenger1 boat1\n\nDescriptions:\n- Prefer boarding across a solid platform if possible.\n- If you are crossing using a platform, hold on to the rails provided.\n- Avoid plonking one leg in the boat and leaving one on the jetty - this will cause wobbling and you might fall into the water.\n- Once in the boat, always remain in the centre line to move around it and lower yourself to a crouch level so that you reduce your centre of gravity and keep the craft as still as possible.\n- Keep the craft steady as others board.\n\nPDDL Actions:\n\n```lisp\n(:action choose_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and (not (aboard ?p ?b)) (available ?b))\n    :effect (and (aboard ?p ?b) (not (available ?b)))\n)\n\n(:action hold_rails\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and (aboard ?p ?b) (has_rails ?b))\n    :effect (holding_rails ?p ?b)\n)\n\n(:action stabilize_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and (aboard ?p ?b) (holding_rails ?p ?b))\n    :effect (stabilized ?b)\n)\n\n(:action remain_center_line\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and (aboard ?p ?b) (stabilized ?b))\n    :effect (and (in_center_line ?p ?b) (low_center_of_gravity ?p))\n)\n\n(:action keep_craft_steady\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and (aboard ?p ?b) (in_center_line ?p ?b))\n    :effect (craft_steady ?b)\n)\n```\n\nExplanation:\n1. `choose_boat`: The passenger chooses an available boat to board.\n   - Preconditions: The boat must be available and the passenger must not already be aboard.\n   - Effects: The passenger is now aboard the boat and the boat is no longer available.\n\n2. `hold_rails`: The passenger holds onto the rails of the boat.\n   - Preconditions: The passenger must be aboard the boat and the boat must have rails.\n   - Effects: The passenger is holding onto the rails.\n\n3. `stabilize_boat`: The passenger stabilizes the boat by holding onto the rails.\n   - Preconditions: The passenger must be aboard the boat and holding onto the rails.\n   - Effects: The boat is stabilized.\n\n4. `remain_center_line`: The passenger remains in the center line of the boat to keep it stable.\n   - Preconditions: The passenger must be aboard the boat and the boat must be stabilized.\n   - Effects: The passenger remains in the center line and lowers their center of gravity.\n\n5. `keep_craft_steady`: The passenger keeps the craft steady while others board.\n   - Preconditions: The passenger must be aboard the boat and in the center line.\n   - Effects: The craft remains steady.\n\nThese actions should capture the intent and logic of the steps and descriptions provided."
        ]
    },
    {
        "task": "Make Slow Cooker Hot Cocoa",
        "action": [
            "Here are the PDDL actions based on the given task and steps:\n\nTask: Make Slow Cooker Hot Cocoa\n\nSteps:\n- make_cocoa_mixture mixture\n- add_ingredients_to_slow_cooker mixture\n- heat_mixture mixture1 stove1 heat1\n- cook npc kitchen\n\nDescriptions:\n- Make the initial cocoa mixture.\n- Add all the ingredients in a slow cooker.\n- Allow the mixture to heat for 3 hours on a low setting.\n- Serve immediately or keep the slow cooker on a \"Keep Warm\" setting.\n\nPDDL Actions:\n```pddl\n(:action make_cocoa_mixture\n    :parameters (?mixture - mixture ?p - player)\n    :precondition (and (inventory ?p ?mixture) (is_empty ?mixture))\n    :effect (and (not (is_empty ?mixture)) (has_cocoa_mixture ?mixture))\n)\n\n(:action add_ingredients_to_slow_cooker\n    :parameters (?mixture - mixture ?slow_cooker - slow_cooker ?p - player)\n    :precondition (and (has_cocoa_mixture ?mixture) (inventory ?p ?mixture) (at ?p ?slow_cooker) (is_empty ?slow_cooker))\n    :effect (and (not (is_empty ?slow_cooker)) (ingredients_added ?slow_cooker))\n)\n\n(:action heat_mixture\n    :parameters (?slow_cooker - slow_cooker ?stove - stove ?p - player)\n    :precondition (and (ingredients_added ?slow_cooker) (at ?p ?stove) (connected ?slow_cooker ?stove))\n    :effect (and (heating ?slow_cooker))\n)\n\n(:action cook\n    :parameters (?slow_cooker - slow_cooker ?p - player)\n    :precondition (and (heating ?slow_cooker) (at ?p ?slow_cooker))\n    :effect (and (cooked ?slow_cooker))\n)\n\n(:action serve_hot_cocoa\n    :parameters (?slow_cooker - slow_cooker ?cup - cup ?p - player)\n    :precondition (and (cooked ?slow_cooker) (inventory ?p ?cup) (at ?p ?slow_cooker))\n    :effect (and (served ?cup) (not (empty ?cup)))\n)\n\n(:action keep_warm\n    :parameters (?slow_cooker - slow_cooker ?p - player)\n    :precondition (and (cooked ?slow_cooker) (at ?p ?slow_cooker))\n    :effect (and (keeping_warm ?slow_cooker))\n)\n```"
        ]
    },
    {
        "task": "Grow Fairy Moss Indoors",
        "action": [
            "Certainly! Here are the PDDL actions for the task \"Grow Fairy Moss Indoors\":\n\n### PDDL Actions\n\n#### Action: ask_for_moss\n```pddl\n(:action ask_for_moss\n    :parameters (?p - player ?loc - location ?moss - fairy_moss)\n    :precondition (and (at ?p ?loc) (nursery ?loc) (not (inventory ?p ?moss)))\n    :effect (and (inventory ?p ?moss))\n)\n```\n\n#### Action: find_container\n```pddl\n(:action find_container\n    :parameters (?p - player ?container - container)\n    :precondition (and (not (inventory ?p ?container)))\n    :effect (and (inventory ?p ?container))\n)\n```\n\n#### Action: fill_bowl\n```pddl\n(:action fill_bowl\n    :parameters (?p - player ?bowl - container ?water - water)\n    :precondition (and (inventory ?p ?bowl) (not (filled ?bowl)))\n    :effect (and (filled ?bowl))\n)\n```\n\n#### Action: add_fairy_moss\n```pddl\n(:action add_fairy_moss\n    :parameters (?p - player ?moss - fairy_moss ?bowl - container)\n    :precondition (and (inventory ?p ?moss) (inventory ?p ?bowl) (filled ?bowl) (not (contains ?bowl ?moss)))\n    :effect (and (contains ?bowl ?moss))\n)\n```\n\n#### Action: place_suitable_position\n```pddl\n(:action place_suitable_position\n    :parameters (?p - player ?bowl - container ?loc - location)\n    :precondition (and (inventory ?p ?bowl) (suitable_position ?loc))\n    :effect (and (placed ?bowl ?loc) (not (inventory ?p ?bowl)))\n)\n```\n\n#### Action: prune_fairy_moss\n```pddl\n(:action prune_fairy_moss\n    :parameters (?p - player ?moss - fairy_moss ?bowl - container)\n    :precondition (and (contains ?bowl ?moss) (grown ?moss))\n    :effect (and (pruned ?moss))\n)\n```\n\n### Entity States\n\n#### Initial State\n```pddl\n(:init\n    (at player home)\n    (nursery pond_center)\n    (suitable_position sofa)\n)\n```\n\n#### Goal State\n```pddl\n(:goal\n    (and\n        (contains container1 fairy_moss)\n        (placed container1 sofa)\n        (pruned fairy_moss)\n    )\n)\n```\n\nThese actions and states are designed to capture the steps and descriptions provided for growing fairy moss indoors. Each action includes the necessary parameters, preconditions, and effects to ensure the task can be carried out successfully."
        ]
    },
    {
        "task": "Remove Black Skid Marks from Linoleum",
        "action": [
            "Based on the provided task and steps, here are the PDDL actions:\n\nTask: Remove Black Skid Marks from Linoleum\n\nSteps:\n1. obtain_eraser you eraser\n2. kneel_and_rub you eraser linoleum_floor\n3. continue_rubbing you eraser linoleum_floor\n4. wash_floor you linoleum_floor\n\nDescriptions:\n- Obtain a decent sized eraser that you can hold comfortably in your fingers.\n- Kneel down next to the linoleum and use the eraser to rub along the skid mark.\n- Continue rubbing until the black mark lifts.\n- Wash and dry as usual.\n\nPDDL Actions:\n```lisp\n(:action obtain_eraser\n    :parameters (?p - person ?e - eraser ?l - location)\n    :precondition (and (at ?p ?l) (at ?e ?l))\n    :effect (and (inventory ?p ?e) (not (at ?e ?l)))\n)\n\n(:action kneel_and_rub\n    :parameters (?p - person ?e - eraser ?f - linoleum_floor)\n    :precondition (and (inventory ?p ?e) (at ?p ?f) (skid_marks ?f))\n    :effect (and (kneeling ?p ?f) (rubbing ?p ?e ?f))\n)\n\n(:action continue_rubbing\n    :parameters (?p - person ?e - eraser ?f - linoleum_floor)\n    :precondition (and (kneeling ?p ?f) (rubbing ?p ?e ?f) (skid_marks ?f))\n    :effect (and (not (skid_marks ?f)) (clean ?f))\n)\n\n(:action wash_floor\n    :parameters (?p - person ?f - linoleum_floor)\n    :precondition (and (clean ?f))\n    :effect (and (washed ?f) (dry ?f))\n)\n```\n\nExplanation:\n- `obtain_eraser`: This action involves the person obtaining an eraser from a location.\n- `kneel_and_rub`: This action involves the person kneeling next to the linoleum floor and starting to rub the skid marks with the eraser.\n- `continue_rubbing`: This action involves the person continuing to rub the skid marks until they are removed.\n- `wash_floor`: This action involves the person washing and drying the linoleum floor after the skid marks have been removed."
        ]
    },
    {
        "task": "Make a Simple Inside Windshield Cleaner",
        "action": [
            "Here are the PDDL actions based on the provided task and steps:\n\n### PDDL Actions for \"Make a Simple Inside Windshield Cleaner\"\n\n#### Step 1: Purchase a blackboard eraser\n```pddl\n(:action purchase_eraser\n      :parameters (?user - user ?eraser - eraser ?store - location)\n      :precondition (and (at ?user ?store) (available ?eraser ?store))\n      :effect (and (inventory ?user ?eraser) (not (available ?eraser ?store)))\n)\n```\n\n#### Step 2: Attach the blackboard eraser to a spot in the car\n```pddl\n(:action attach_eraser\n      :parameters (?user - user ?eraser - eraser ?spot - location)\n      :precondition (and (inventory ?user ?eraser) (in_car ?spot))\n      :effect (and (attached ?eraser ?spot) (not (inventory ?user ?eraser)))\n)\n```\n\n#### Step 3: Use the eraser to clean the inner side of the windshield\n```pddl\n(:action clean_inner_side_of_vehicle\n      :parameters (?eraser - eraser ?windshield - part)\n      :precondition (and (attached ?eraser ?spot) (in_car ?windshield) (part_of ?windshield vehicle))\n      :effect (clean ?windshield)\n)\n```\n\n#### Step 4: Replace the eraser wicks after use\n```pddl\n(:action replace_wicks\n      :parameters (?user - user ?wick - wick ?eraser - eraser)\n      :precondition (and (inventory ?user ?wick) (attached ?eraser ?spot) (used ?eraser))\n      :effect (and (not (used ?eraser)) (clean ?eraser) (not (inventory ?user ?wick)))\n)\n```\n\n### Descriptions:\n1. **Purchase a blackboard eraser.**\n   - This action allows the user to buy an eraser from a store.\n   \n2. **Keep the blackboard eraser in the glove box or attach it to a spot on or near the car door for easy access.**\n   - This action attaches the purchased eraser to a designated spot in the car for easy access.\n\n3. **Use the eraser to clean the inner side of the windshield.**\n   - This action uses the attached eraser to clean the inner side of the vehicle's windshield.\n\n4. **Replace after use.**\n   - This action replaces the used wicks of the eraser after cleaning.\n\nThese actions should help achieve the task of making a simple inside windshield cleaner by following the described steps and conditions."
        ]
    },
    {
        "task": "Paint Bare Wood",
        "action": [
            "Sure, let's generate the PDDL actions for the task \"Paint Bare Wood\" based on the given steps and descriptions.\n\nTask: Paint Bare Wood\n\nSteps:\n1. acquire_oil_based_painting oil_floor roller_finished\n2. move_painting_branch npc work_station wood\n3. clean_room npc\n4. be_amazed npc\n5. finish-wreath wreath\n\nDescriptions:\n- Acquire oil based paints, which air dry slowly.\n- The under-coat should be thin, and smooth, move your paint brush down the wood, don't paint up or horizontally.\n- Paint the second coat, but be much more careful this time, make sure there are no paint bubbles appearing and smooth out any drips or pools left over from the under-coat.\n- Be the most precise with this.\n- Finished.\n\nPDDL Actions:\n```lisp\n(:action acquire_oil_based_painting\n    :parameters (?p - player ?paint - oil_based_paint ?location - location)\n    :precondition (and (at ?p ?location) (at ?paint ?location))\n    :effect (and (inventory ?p ?paint) (not (at ?paint ?location)))\n)\n\n(:action move_painting_branch\n    :parameters (?p - player ?brush - paint_brush ?loc - location ?wood - wood)\n    :precondition (and (at ?p ?loc) (inventory ?p ?brush) (at ?wood ?loc))\n    :effect (and (undercoat ?wood) (not (inventory ?p ?brush)))\n)\n\n(:action paint_second_coat\n    :parameters (?p - player ?brush - paint_brush ?loc - location ?wood - wood)\n    :precondition (and (at ?p ?loc) (inventory ?p ?brush) (undercoat ?wood))\n    :effect (and (second_coat ?wood) (not (inventory ?p ?brush)))\n)\n\n(:action clean_room\n    :parameters (?p - player ?loc - location)\n    :precondition (at ?p ?loc)\n    :effect (clean ?loc)\n)\n\n(:action be_amazed\n    :parameters (?p - player ?loc - location)\n    :precondition (and (at ?p ?loc) (second_coat ?wood))\n    :effect (amazed ?p)\n)\n\n(:action finish_wreath\n    :parameters (?p - player ?wreath - wreath)\n    :precondition (and (inventory ?p ?wreath) (amazed ?p))\n    :effect (finished ?wreath)\n)\n```\n\nExplanation:\n1. `acquire_oil_based_painting`: This action represents acquiring oil-based paint.\n   - Preconditions: The player and the paint must be at the same location.\n   - Effects: The player will have the paint in their inventory, and the paint will no longer be at the location.\n\n2. `move_painting_branch`: This action represents applying the undercoat using a paint brush.\n   - Preconditions: The player must be at the location with the wood and have a paint brush in their inventory.\n   - Effects: The wood will have an undercoat, and the player will no longer have the brush in their inventory.\n\n3. `paint_second_coat`: This action represents applying the second coat of paint.\n   - Preconditions: The player must be at the location with the wood, have a paint brush in their inventory, and the wood must have an undercoat.\n   - Effects: The wood will have a second coat, and the player will no longer have the brush in their inventory.\n\n4. `clean_room`: This action represents cleaning the room.\n   - Preconditions: The player must be at the location.\n   - Effects: The room will be clean.\n\n5. `be_amazed`: This action represents the player being amazed by the finished paint job.\n   - Preconditions: The player must be at the location, and the wood must have a second coat.\n   - Effects: The player will be amazed.\n\n6. `finish_wreath`: This action represents finishing the wreath.\n   - Preconditions: The player must have the wreath in their inventory and be amazed.\n   - Effects: The wreath will be finished."
        ]
    },
    {
        "task": "Create a Character in Lego Star Wars",
        "action": [
            "Certainly! Based on the task \"Create a Character in Lego Star Wars\" and the provided steps, here are the corresponding PDDL actions:\n\nTask: Create a Character in Lego Star Wars\n\nSteps:\n- start_game game\n- select_character character\n- save_name_and_exit character\n- turn_on_free_game game\n\nDescriptions:\n- When you begin the game, you will start as Princess Leia and Captain Antilles in the Star Wars cantina.\n- Use the up and down arrows to select the part of the character (hat, head, shirt, arms, hands, weapon, belt, and legs) and the left and right arrows to select through a selection of the body part you are on.\n- Press \"triangle\" to name it, and \"O\" to save and exit.\n- Now enter a completed level and turn on free play.\n\nPDDL Actions:\n\n```lisp\n(:action start_game\n    :parameters (?g - game)\n    :precondition (not (started ?g))\n    :effect (started ?g)\n)\n\n(:action select_character\n    :parameters (?c - character)\n    :precondition (and (started ?g) (in_cantina ?c))\n    :effect (selected ?c)\n)\n\n(:action customize_character_part\n    :parameters (?c - character ?part - bodypart ?selection - selection)\n    :precondition (and (selected ?c) (part_of ?part ?c))\n    :effect (customized ?c ?part ?selection)\n)\n\n(:action save_name_and_exit\n    :parameters (?c - character)\n    :precondition (and (selected ?c) (named ?c))\n    :effect (and (saved ?c) (not (selected ?c)))\n)\n\n(:action turn_on_free_game\n    :parameters (?g - game)\n    :precondition (and (started ?g) (completed_level ?g))\n    :effect (free_play ?g)\n)\n```\n\nExplanation:\n1. `start_game`: This action starts the game.\n2. `select_character`: This action selects a character when in the cantina.\n3. `customize_character_part`: This action customizes a part of the character by selecting a specific body part and applying a selection.\n4. `save_name_and_exit`: This action saves the character's name and exits the character customization.\n5. `turn_on_free_game`: This action turns on free play mode after entering a completed level.\n\nThese actions encapsulate the steps and descriptions provided for creating a character in Lego Star Wars."
        ]
    },
    {
        "task": "Spool Knit a Winter Hat",
        "action": [
            "Sure, here are the PDDL actions for the task \"Spool Knit a Winter Hat\":\n\n### PDDL Actions:\n```lisp\n(:action knit_web ; knit a flat web\n      :parameters (?p - player ?web - web)\n      :precondition (and (inventory ?p ?web) (not (knit ?web)))\n      :effect (and (knit ?web))\n   )\n\n(:action sliplargerbeads ; sew the web into a rectangular form\n      :parameters (?p - player ?web - web)\n      :precondition (and (inventory ?p ?web) (knit ?web) (not (sewn ?web)))\n      :effect (and (sewn ?web))\n   )\n\n(:action join_ends ; join the ends of the web\n      :parameters (?p - player ?ends - web)\n      :precondition (and (inventory ?p ?ends) (sewn ?ends) (not (joined ?ends)))\n      :effect (and (joined ?ends))\n   )\n\n(:action wrap_with_tassel ; wrap the top with a tassel\n      :parameters (?p - player ?hat - hat ?tassel - tassel)\n      :precondition (and (inventory ?p ?hat) (joined ?hat) (not (wrapped ?hat)))\n      :effect (and (wrapped ?hat))\n   )\n```\n\n### Descriptions:\n- Knit eighty-four inches of flat web.\n- Begin five inches from the end of the web, turn and sew into a rectangular form five inches wide and eight inches long.\n- Join the five-inch ends, and draw in the top with the needle and a piece of the material from which the cap was made.\n- After securing the top, twist and fold the piece of yarn remaining for a cord and fasten a number of strands of yarn through the loop for a tassel.\n\n### Entity State:\n- `knit`: indicates that the web has been knitted.\n- `sewn`: indicates that the web has been sewn into a rectangular form.\n- `joined`: indicates that the ends of the web have been joined.\n- `wrapped`: indicates that the top of the hat has been wrapped with a tassel.\n\nThese actions should capture the intent and logic of each step in the task of spool knitting a winter hat."
        ]
    },
    {
        "task": "Get on a Bike",
        "action": [
            "Sure, here are the PDDL actions based on the provided task and steps:\n\nTask: Get on a Bike\n\nSteps:\n1. swing-leg-over-bike bike\n2. put_foot_on_pedal you pedals\n3. hold_handbrakes bike\n4. pedal-with-feet you\n5. stop you bike\n\nDescriptions:\n- To get on the bike, swing your non-dominant leg over the shaft of the bike.\n- Put your dominant foot on the pedal.\n- Hold on to the handlebars for support and to keep the bike straight.\n- Keeping your weight center and even, pedal with your feet.\n- Stopping.\n\nPDDL Actions:\n\n(:action swing-leg-over-bike\n      :parameters (?b - bike ?p - person)\n      :precondition (and (not (on-bike ?p)) (standing ?p))\n      :effect (and (on-bike ?p) (not (standing ?p)))\n)\n\n(:action put_foot_on_pedal\n      :parameters (?p - person ?pedal - pedal)\n      :precondition (and (on-bike ?p) (not (foot-on-pedal ?p ?pedal)))\n      :effect (foot-on-pedal ?p ?pedal)\n)\n\n(:action hold_handlebars\n      :parameters (?p - person ?b - bike)\n      :precondition (and (on-bike ?p) (not (holding-handlebars ?p ?b)))\n      :effect (holding-handlebars ?p ?b)\n)\n\n(:action pedal-with-feet\n      :parameters (?p - person)\n      :precondition (and (on-bike ?p) (foot-on-pedal ?p pedal-left) (foot-on-pedal ?p pedal-right) (holding-handlebars ?p bike))\n      :effect (and (moving ?p bike) (not (stationary ?p bike)))\n)\n\n(:action stop\n      :parameters (?p - person ?b - bike)\n      :precondition (and (moving ?p ?b))\n      :effect (and (not (moving ?p ?b)) (stationary ?p ?b))\n)\n\nThese actions capture the sequence of steps required to get on a bike, pedal, and eventually stop. Each action specifies the necessary preconditions and the effects of performing the action."
        ]
    },
    {
        "task": "Change the Oil on a Yamaha Virago XV250",
        "action": [
            "Sure, here are the PDDL actions for the task \"Change the Oil on a Yamaha Virago XV250\":\n\n```pddl\n(:action remove_bung\n    :parameters (?ot - oil_tank ?b - bung ?o - oil)\n    :precondition (and (attached ?b ?ot) (contains ?ot ?o))\n    :effect (and (not (attached ?b ?ot)) (draining ?o ?ot))\n)\n\n(:action remove_oil_cap\n    :parameters (?oc - oil_cap ?b - bottle ?bk - bike ?o - oil)\n    :precondition (and (attached ?oc ?bk) (draining ?o ?bk))\n    :effect (and (not (attached ?oc ?bk)) (draining ?o ?bk) (flowing ?o ?b))\n)\n\n(:action remove_oil_filter\n    :parameters (?of - oil_filter ?b - bottle)\n    :precondition (and (attached ?of ?bk) (flowing ?o ?b))\n    :effect (and (not (attached ?of ?bk)) (collected ?of ?b))\n)\n\n(:action screw_bung\n    :parameters (?b - bung)\n    :precondition (and (not (attached ?b ?ot)) (drained ?o ?ot))\n    :effect (and (attached ?b ?ot))\n)\n\n(:action fill_oil\n    :parameters (?ob - oil_bottle ?fc - faucet)\n    :precondition (and (contains ?ob ?o) (attached ?fc ?ob))\n    :effect (and (filled ?ob ?o))\n)\n\n(:action get_oil\n    :parameters (?npc - player ?o - oil)\n    :precondition (and (not (has ?npc ?o)))\n    :effect (and (has ?npc ?o))\n)\n```\n\n### Descriptions for Each Action:\n1. **remove_bung**: This action removes the bung from the oil tank to allow the oil to drain out.\n2. **remove_oil_cap**: This action removes the oil cap to facilitate the full drainage of oil and allow air to enter, aiding the drainage process.\n3. **remove_oil_filter**: This action removes the oil filter and collects it in a bottle.\n4. **screw_bung**: This action screws the bung back onto the oil tank after the oil has been drained.\n5. **fill_oil**: This action fills the oil back into the bike using an oil bottle connected to a faucet.\n6. **get_oil**: This action involves the player obtaining oil, presumably from a storage or purchase location.\n\nThese actions should accurately reflect the steps required to change the oil on a Yamaha Virago XV250 based on the provided steps and descriptions."
        ]
    },
    {
        "task": "Open a Rusty Bolt",
        "action": [
            "Sure, here are the PDDL actions based on the provided task and steps:\n\nTask: Open a Rusty Bolt\n\nSteps:\n- obtain-fizzy-drink faucet\n- pour-fizzy-drink faucet1\n- wipe_clean towel1\n- dissolve_rust old_bolt1 fizzy_drink1\n- replace-bolt old_bolt1\n\nDescriptions:\n- Obtain some fizzy drink.\n- Pour the fizzy drink over the bolt.\n- Wipe it clean with kitchen towel.\n- The fizzy drink should have dissolved the rust build-up causing the bolt to stick.\n- Replace the rusty bolt.\n\nPDDL Actions:\n```lisp\n(:action obtain-fizzy-drink\n   :parameters (?p - player ?f - faucet)\n   :precondition (and (at ?p ?f) (faucet ?f))\n   :effect (and (inventory ?p fizzy_drink))\n)\n\n(:action pour-fizzy-drink\n   :parameters (?p - player ?b - bolt ?f - faucet)\n   :precondition (and (at ?p ?b) (inventory ?p fizzy_drink) (rusty ?b))\n   :effect (and (not (inventory ?p fizzy_drink)) (fizzy_drink_on ?b))\n)\n\n(:action wipe_clean\n   :parameters (?p - player ?b - bolt ?t - towel)\n   :precondition (and (at ?p ?b) (fizzy_drink_on ?b) (inventory ?p ?t))\n   :effect (and (not (fizzy_drink_on ?b)) (clean ?b))\n)\n\n(:action dissolve_rust\n   :parameters (?p - player ?b - bolt)\n   :precondition (and (at ?p ?b) (clean ?b) (rusty ?b))\n   :effect (and (not (rusty ?b)) (ready_to_replace ?b))\n)\n\n(:action replace-bolt\n   :parameters (?p - player ?b - bolt)\n   :precondition (and (at ?p ?b) (ready_to_replace ?b))\n   :effect (and (not (ready_to_replace ?b)) (replaced ?b))\n)\n```\n\nExplanation:\n1. `obtain-fizzy-drink`: This action allows the player to obtain a fizzy drink from a faucet.\n2. `pour-fizzy-drink`: This action involves pouring the fizzy drink over the rusty bolt.\n3. `wipe_clean`: This action involves wiping the bolt clean with a towel after the fizzy drink has been poured.\n4. `dissolve_rust`: This action represents the fizzy drink dissolving the rust on the bolt.\n5. `replace-bolt`: This action involves replacing the now clean and rust-free bolt.\n\nEach action includes the necessary preconditions and effects to ensure the logical progression of the task."
        ]
    },
    {
        "task": "Evolve Vulpix in Pok\u00e9mon",
        "action": [
            "Sure, here are the PDDL actions for the task \"Evolve Vulpix in Pok\u00e9mon\":\n\n### PDDL Actions:\n\n1. **catch_or_trade_vulpix**:\n```lisp\n(:action catch_or_trade_vulpix\n     :parameters (?p - player ?v - vulpix ?loc - location)\n     :precondition (and (at ?p ?loc) (wild_vulpix ?v ?loc))\n     :effect (and (inventory ?p ?v) (not (wild_vulpix ?v ?loc)))\n  )\n```\n\n2. **find_fire_stone**:\n```lisp\n(:action find_fire_stone\n     :parameters (?p - player ?loc - location ?stone - fire_stone)\n     :precondition (and (at ?p ?loc) (at ?stone ?loc))\n     :effect (and (inventory ?p ?stone) (not (at ?stone ?loc)))\n  )\n```\n\n3. **find_ice_stone**:\n```lisp\n(:action find_ice_stone\n     :parameters (?p - player ?loc - location ?stone - ice_stone)\n     :precondition (and (at ?p ?loc) (at ?stone ?loc))\n     :effect (and (inventory ?p ?stone) (not (at ?stone ?loc)))\n  )\n```\n\n4. **select_bag**:\n```lisp\n(:action select_bag\n     :parameters (?p - player ?bag - bag)\n     :precondition (and (inventory ?p ?bag))\n     :effect (and (bag_selected ?p ?bag))\n  )\n```\n\n5. **use_fire_stone**:\n```lisp\n(:action use_fire_stone\n     :parameters (?p - player ?v - vulpix ?stone - fire_stone)\n     :precondition (and (inventory ?p ?v) (inventory ?p ?stone) (bag_selected ?p ?bag))\n     :effect (and (evolved ?v) (not (inventory ?p ?stone)))\n  )\n```\n\n6. **use_ice_stone**:\n```lisp\n(:action use_ice_stone\n     :parameters (?p - player ?v - vulpix ?stone - ice_stone)\n     :precondition (and (inventory ?p ?v) (inventory ?p ?stone) (bag_selected ?p ?bag))\n     :effect (and (evolved ?v) (not (inventory ?p ?stone)))\n  )\n```\n\n7. **wait_for_evolution**:\n```lisp\n(:action wait_for_evolution\n     :parameters (?p - player ?v - vulpix)\n     :precondition (and (evolved ?v))\n     :effect (and (vulpix_evolved ?v))\n  )\n```\n\nThese actions capture the steps required to evolve a Vulpix in Pok\u00e9mon, including catching or trading for a Vulpix, finding the required evolution stone, selecting the bag, using the stone, and waiting for the evolution to complete."
        ]
    },
    {
        "task": "Get Under the Stage in Dragonball Z Budokai Tenkaichi 2",
        "action": [
            "Sure, here are the PDDL actions based on the provided task and steps:\n\nTask: Get Under the Stage in Dragonball Z Budokai Tenkaichi 2\n\nSteps:\n- choose_vs_duel duel\n- choose_goku player1\n- choose_stage stage1\n- move_to_wall player1 player2 player3\n\nDescriptions:\n- Choose VS Duel, 2 players.\n- Choose Goku as player one, as well as player two.\n- Choose Mountain Road as the stage.\n- Move to opposite ends of the street so that you are both against the Wall that keeps you in the stage.\n\nPDDL Actions:\n\n```lisp\n(:action choose_vs_duel\n    :parameters (?d - duel)\n    :precondition (and (available ?d))\n    :effect (and (chosen ?d) (not (available ?d)))\n)\n\n(:action choose_goku\n    :parameters (?p - player)\n    :precondition (and (available goku))\n    :effect (and (chosen ?p goku) (not (available goku)))\n)\n\n(:action choose_stage\n    :parameters (?s - stage)\n    :precondition (and (available mountain_road))\n    :effect (and (chosen ?s mountain_road) (not (available mountain_road)))\n)\n\n(:action move_to_wall\n    :parameters (?p1 - player ?p2 - player ?p3 - player)\n    :precondition (and (at ?p1 street) (at ?p2 street) (at ?p3 street) (chosen ?p1 goku) (chosen ?p2 goku) (chosen ?p3 goku))\n    :effect (and (at ?p1 wall) (at ?p2 wall) (at ?p3 wall) (not (at ?p1 street)) (not (at ?p2 street)) (not (at ?p3 street)))\n)\n```\n\nThese actions encapsulate the steps and descriptions provided for the task of getting under the stage in Dragonball Z Budokai Tenkaichi 2."
        ]
    },
    {
        "task": "Grow a Rose Bush from Rose Bush Cuttings",
        "action": [
            "Sure, here are the PDDL actions based on the provided task and steps:\n\nTask: Grow a Rose Bush from Rose Bush Cuttings\n\nSteps:\n- prepare_area clipping\n- take_cutting clipping\n- dip_in_hormide npc\n- plant_cutting clipping\n\nDescriptions:\n- Prepare the pot or area in your yard where you plan to plant your clipping.\n- Take a cutting from the rose bush you would like to grow your new bush from.\n- Moisten the part of the clipping that you just scraped and dip it into rooting hormone.\n- Immediately plant the cutting.\n\nPDDL Actions:\n\n```lisp\n(:action prepare_area\n    :parameters (?area - location ?p - player)\n    :precondition (and (at ?p ?area) (not (prepared ?area)))\n    :effect (prepared ?area)\n)\n\n(:action take_cutting\n    :parameters (?cutting - clipping ?bush - rose_bush ?p - player)\n    :precondition (and (at ?p ?bush) (not (has_cutting ?p ?cutting)) (is_part_of ?cutting ?bush))\n    :effect (and (has_cutting ?p ?cutting) (not (is_part_of ?cutting ?bush)))\n)\n\n(:action dip_in_hormide\n    :parameters (?cutting - clipping ?hormide - rooting_hormide ?p - player)\n    :precondition (and (has_cutting ?p ?cutting) (at ?p ?hormide) (not (dipped_in_hormide ?cutting)))\n    :effect (dipped_in_hormide ?cutting)\n)\n\n(:action plant_cutting\n    :parameters (?cutting - clipping ?area - location ?p - player)\n    :precondition (and (has_cutting ?p ?cutting) (prepared ?area) (at ?p ?area) (dipped_in_hormide ?cutting))\n    :effect (and (planted ?cutting ?area) (not (has_cutting ?p ?cutting)))\n)\n```\n\nThese actions should capture the intent and logic of each step described in the task of growing a rose bush from cuttings."
        ]
    },
    {
        "task": "Make a Fairy House in the Woods",
        "action": [
            "Sure, let's generate the PDDL actions for the task of making a fairy house in the woods.\n\nTask: Make a Fairy House in the Woods\n\nSteps:\n1. Find a small area with slightly damp dirt.\n2. Collect many twigs and sticks.\n3. Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n4. Build your exterior walls.\n5. You can use either a leaf or a wide strip of bark.\n6. Decorate.\n\nPDDL Actions:\n\n```lisp\n(:action find_area\n      :parameters (?p - player ?loc - location ?area - area)\n      :precondition (and (at ?p ?loc) (has_slightly_damp_dirt ?area))\n      :effect (and (at ?p ?area))\n)\n\n(:action collect_sticks\n      :parameters (?p - player ?loc - location ?stick - stick)\n      :precondition (and (at ?p ?loc) (has_twigs_and_sticks ?loc))\n      :effect (and (inventory ?p ?stick))\n)\n\n(:action create_formation\n      :parameters (?p - player ?loc - location ?stick - stick ?formation - formation)\n      :precondition (and (at ?p ?loc) (inventory ?p ?stick))\n      :effect (and (at ?formation ?loc) (not (inventory ?p ?stick)))\n)\n\n(:action build_walls\n      :parameters (?p - player ?loc - location ?formation - formation ?wall - wall)\n      :precondition (and (at ?p ?loc) (at ?formation ?loc) (has_leaves_or_bark ?loc))\n      :effect (and (at ?wall ?loc))\n)\n\n(:action use_as_leaves\n      :parameters (?p - player ?loc - location ?leaf - leaf ?wall - wall)\n      :precondition (and (at ?p ?loc) (at ?wall ?loc) (inventory ?p ?leaf))\n      :effect (and (at ?wall_with_leaf ?loc) (not (inventory ?p ?leaf)))\n)\n\n(:action create_decorations\n      :parameters (?p - player ?loc - location ?moss - moss ?decoration - decoration)\n      :precondition (and (at ?p ?loc) (at ?moss ?loc))\n      :effect (and (at ?decoration ?loc))\n)\n```\n\nIn these actions, we have:\n1. `find_area`: Finding a small area with slightly damp dirt.\n2. `collect_sticks`: Collecting twigs and sticks.\n3. `create_formation`: Creating a formation using the sticks.\n4. `build_walls`: Building the exterior walls using leaves or bark.\n5. `use_as_leaves`: Using leaves to decorate the walls.\n6. `create_decorations`: Creating decorations using fairy moss.\n\nThese actions should cover the steps and descriptions provided for making a fairy house in the woods."
        ]
    },
    {
        "task": "Make a Pinwheel Wreath",
        "action": [
            "Sure, let's generate the PDDL actions for the task \"Make a Pinwheel Wreath\" based on the provided steps and descriptions.\n\nTask: Make a Pinwheel Wreath\n\nSteps:\n- select_paper p1\n- create_pinwheels p1\n- find_wreath_base w1\n- create_wreath_base w1\n- finish_wreath wreath\n\nDescriptions:\n- Select suitable paper to make the pinwheels.\n- Make enough pinwheels to create a wreath.\n- Find a suitable base, such as a Styrofoam/cane/cardboard wreath base.\n- If the wreath base lacks a hanger, add some twine or ribbon to create one.\n- Finished.\n\nPDDL Actions:\n\n```lisp\n(:action select_paper\n    :parameters (?p - player ?paper - paper)\n    :precondition (and (inventory ?p ?paper))\n    :effect (selected ?paper)\n)\n\n(:action create_pinwheels\n    :parameters (?p - player ?paper - paper ?pinwheels - pinwheels)\n    :precondition (and (selected ?paper))\n    :effect (and (inventory ?p ?pinwheels) (not (selected ?paper)))\n)\n\n(:action find_wreath_base\n    :parameters (?p - player ?wreath_base - wreath_base)\n    :precondition (and (inventory ?p ?wreath_base))\n    :effect (found ?wreath_base)\n)\n\n(:action create_wreath_base\n    :parameters (?p - player ?wreath_base - wreath_base ?twine_ribbon - twine_ribbon)\n    :precondition (and (found ?wreath_base) (inventory ?p ?twine_ribbon))\n    :effect (and (prepared ?wreath_base) (not (found ?wreath_base)))\n)\n\n(:action finish_wreath\n    :parameters (?p - player ?pinwheels - pinwheels ?wreath_base - wreath_base ?wreath - wreath)\n    :precondition (and (inventory ?p ?pinwheels) (prepared ?wreath_base))\n    :effect (and (inventory ?p ?wreath) (not (inventory ?p ?pinwheels)) (not (prepared ?wreath_base)))\n)\n```\n\nExplanation:\n1. `select_paper` action selects the suitable paper for making pinwheels.\n2. `create_pinwheels` action creates pinwheels from the selected paper.\n3. `find_wreath_base` action finds a suitable base for the wreath.\n4. `create_wreath_base` action prepares the wreath base by adding a hanger if needed.\n5. `finish_wreath` action combines the pinwheels and the prepared wreath base to finish the wreath.\n\nThese actions follow the structure and format provided in the example and align with the task's steps and descriptions."
        ]
    },
    {
        "task": "Be a Spy With Friends",
        "action": [
            "Here are the PDDL actions based on the given task and steps:\n\nTask: Be a Spy With Friends\n\nSteps:\n- set_spy_group co_conspirator1 co\n- talk_in_private npc\n- gather_gear you camera, gather_equipment you binoculars\n- find_victim victim1\n\nDescriptions:\n- Set-up your spy group. You will need a trustworthy 2-5 person group.\n- It's good to have a place to keep your gear when not in use, hold meetings, and just talk in private without worrying about the nosiness of certain people in public places.\n- Get some gear. To be a good spy, you and your friends must have gear that will help with missions.\n- Find your first \"victim.\" The victim is the person you will be watching and spying on.\n\nPDDL Actions:\n```lisp\n(:action set_spy_group ; set up a spy group\n      :parameters (?p - player ?c1 - co_conspirator ?sg - spy_group) \n      :precondition (and (not (in ?p ?sg)) (not (in ?c1 ?sg)))\n      :effect (and (in ?p ?sg) (in ?c1 ?sg))\n   )\n\n(:action talk_in_private ; find a private place to talk and hold meetings\n      :parameters (?p - player ?npc - non_player_character ?sg - spy_group)\n      :precondition (and (in ?p ?sg) (in ?npc ?sg) (not (has_private_place ?sg)))\n      :effect (and (has_private_place ?sg))\n   )\n\n(:action gather_gear ; gather essential spy gear\n      :parameters (?p - player ?g - gear ?sg - spy_group)\n      :precondition (and (in ?p ?sg) (not (has_gear ?sg ?g)))\n      :effect (and (has_gear ?sg ?g))\n   )\n\n(:action gather_equipment ; gather additional spy equipment\n      :parameters (?p - player ?e - equipment ?sg - spy_group)\n      :precondition (and (in ?p ?sg) (not (has_equipment ?sg ?e)))\n      :effect (and (has_equipment ?sg ?e))\n   )\n\n(:action find_victim ; identify the first victim to spy on\n      :parameters (?p - player ?v - victim ?sg - spy_group)\n      :precondition (and (in ?p ?sg) (not (has_victim ?sg ?v)))\n      :effect (and (has_victim ?sg ?v))\n   )\n\n(:action spy_group_is_ready ; check that all prerequisites of the spy group are complete\n      :parameters (?p - player ?sg - spy_group) \n      :precondition (and (not (group_is_ready ?sg)) (has_private_place ?sg) (has_gear ?sg camera) (has_equipment ?sg binoculars) (has_victim ?sg victim1))\n      :effect (and (group_is_ready ?sg))\n   )\n```\n\nIn these actions:\n- `set_spy_group` sets up the spy group with the player and a co-conspirator.\n- `talk_in_private` establishes a private place for the spy group to hold meetings and talk.\n- `gather_gear` and `gather_equipment` gather essential gear and equipment for the spy group.\n- `find_victim` identifies the first victim the spy group will be spying on.\n- `spy_group_is_ready` checks that all prerequisites for the spy group are complete."
        ]
    },
    {
        "task": "Polish a Faucet With a Lemon",
        "action": [
            "Sure, here are the PDDL actions for the task \"Polish a Faucet With a Lemon\":\n\n```pddl\n(:action cut_lemon ; cut a lemon in half\n      :parameters (?npc - npc ?lemon - lemon ?loc - location) \n      :precondition (and (at ?npc ?loc) (inventory ?npc ?lemon) (not (cut ?lemon)))\n      :effect (and (cut ?lemon))\n   )\n(:action squeeze_lemon ; squeeze out the juice from the lemon\n      :parameters (?npc - npc ?lemon - lemon ?juice - juice ?loc - location) \n      :precondition (and (at ?npc ?loc) (cut ?lemon) (not (squeezed ?lemon)) (not (inventory ?npc ?juice)))\n      :effect (and (squeezed ?lemon) (inventory ?npc ?juice))\n   )\n(:action rub_lemon_half ; rub the squeezed lemon half on the faucet\n      :parameters (?npc - npc ?lemon - lemon ?faucet - faucet ?loc - location) \n      :precondition (and (at ?npc ?loc) (squeezed ?lemon) (at ?faucet ?loc))\n      :effect (and (rubbed ?faucet ?lemon))\n   )\n(:action wash_tap_with_lemon_half ; wash the tap with water after rubbing with the lemon half\n      :parameters (?npc - npc ?water - water ?faucet - faucet ?loc - location) \n      :precondition (and (at ?npc ?loc) (rubbed ?faucet ?lemon) (inventory ?npc ?water))\n      :effect (and (clean ?faucet))\n   )\n```\n\n### Explanation:\n1. **cut_lemon**: This action involves cutting a lemon in half. Preconditions ensure the NPC is at the correct location and has the lemon in their inventory. The effect is that the lemon is now cut.\n2. **squeeze_lemon**: This action involves squeezing the juice out of the lemon. Preconditions ensure the lemon is cut and the NPC is at the correct location. The effect is that the lemon is now squeezed and the NPC has the juice in their inventory.\n3. **rub_lemon_half**: This action involves rubbing the squeezed lemon half on the faucet. Preconditions ensure the lemon is squeezed, the NPC is at the correct location, and the faucet is present at the location. The effect is that the faucet has been rubbed with the lemon.\n4. **wash_tap_with_lemon_half**: This action involves washing the tap with water after rubbing with the lemon half. Preconditions ensure the NPC is at the correct location, has water in their inventory, and the faucet has been rubbed with the lemon. The effect is that the faucet is now clean."
        ]
    },
    {
        "task": "Make a Wreath with Clothes Hangers",
        "action": [
            "Certainly! Here are the PDDL actions based on the provided task and steps for making a wreath with clothes hangers:\n\nTask: Make a Wreath with Clothes Hangers\n\nSteps:\n1. unwist-hanger hanger1 pliers1\n2. gather_squares velveeta\n3. push_squares_away npc\n4. slide-squares hanger-1\n5. finish-wreath wreath\n\nDescriptions:\n- Untwist wire hanger and shape into a circle, using pliers as needed.\n- Gently crumple 3\" squares of wax paper or crepe paper and thread hanger through center of each square.\n- When you have threaded enough squares to fill length of hanger, gently push squares away from ends and use pliers to twist ends together.\n- Gently slide squares of paper back toward the joined ends of wire hanger, scrunching paper more for additional fullness.\n- Finished.\n\nPDDL Actions:\n\n```pddl\n(:action untwist_hanger\n    :parameters (?p - player ?hanger - hanger ?pliers - pliers)\n    :precondition (and (inventory ?p ?hanger) (inventory ?p ?pliers) (twisted ?hanger))\n    :effect (and (not (twisted ?hanger)) (circular_shape ?hanger))\n)\n\n(:action gather_squares\n    :parameters (?p - player ?squares - squares)\n    :precondition (and (at ?p ?location) (at ?squares ?location))\n    :effect (and (inventory ?p ?squares))\n)\n\n(:action push_squares_away\n    :parameters (?p - player ?hanger - hanger ?squares - squares)\n    :precondition (and (inventory ?p ?hanger) (inventory ?p ?squares) (threaded ?squares ?hanger))\n    :effect (and (pushed_away ?squares ?hanger))\n)\n\n(:action slide_squares\n    :parameters (?p - player ?hanger - hanger ?squares - squares)\n    :precondition (and (inventory ?p ?hanger) (pushed_away ?squares ?hanger))\n    :effect (and (slid ?squares ?hanger))\n)\n\n(:action finish_wreath\n    :parameters (?p - player ?hanger - hanger ?squares - squares ?wreath - wreath)\n    :precondition (and (inventory ?p ?hanger) (slid ?squares ?hanger) (circular_shape ?hanger))\n    :effect (and (at ?wreath ?p) (not (inventory ?p ?hanger)) (not (inventory ?p ?squares)))\n)\n```\n\nExplanation:\n1. **untwist_hanger**: This action untwists a hanger and shapes it into a circle using pliers.\n2. **gather_squares**: This action gathers the squares of paper needed for the wreath.\n3. **push_squares_away**: This action pushes the threaded squares away from the ends of the hanger.\n4. **slide_squares**: This action slides the squares back towards the joined ends of the hanger, scrunching them for fullness.\n5. **finish_wreath**: This action finishes the wreath by finalizing the shape and arrangement of the squares on the hanger.\n\nThese actions capture the steps and descriptions provided, ensuring each step is represented with appropriate preconditions and effects."
        ]
    },
    {
        "task": "Grow Dwarf Balsam Fir",
        "action": [
            "Certainly! Below are the PDDL actions based on the provided task and steps:\n\n### Task: Grow Dwarf Balsam Fir\n\n#### Step 1: choose_plant fir1 nursery\n(:action choose_plant\n    :parameters (?p - player ?plant - plant ?loc - location)\n    :precondition (and (at ?p ?loc) (available ?plant ?loc) (nursery ?loc))\n    :effect (and (inventory ?p ?plant) (not (available ?plant ?loc)))\n)\n\n#### Step 2: select_container container1 garden_center\n(:action select_container\n    :parameters (?p - player ?container - container ?loc - location)\n    :precondition (and (at ?p ?loc) (available ?container ?loc) (garden_center ?loc) (broad ?container) (rounded ?container))\n    :effect (and (inventory ?p ?container) (not (available ?container ?loc)))\n)\n\n#### Step 3: choose_soil soil1 garden_center\n(:action choose_soil\n    :parameters (?p - player ?soil - soil ?loc - location)\n    :precondition (and (at ?p ?loc) (available ?soil ?loc) (garden_center ?loc))\n    :effect (and (inventory ?p ?soil) (not (available ?soil ?loc)))\n)\n\n#### Step 4: plant_fir fir1 container1\n(:action plant_fir\n    :parameters (?p - player ?plant - plant ?container - container ?soil - soil)\n    :precondition (and (inventory ?p ?plant) (inventory ?p ?container) (inventory ?p ?soil))\n    :effect (and (planted ?plant ?container) (not (inventory ?p ?plant)) (not (inventory ?p ?soil)))\n)\n\n#### Step 5: establish_plant fir1 container1\n(:action establish_plant\n    :parameters (?p - player ?plant - plant ?container - container)\n    :precondition (and (planted ?plant ?container))\n    :effect (and (established ?plant ?container))\n)\n\n#### Step 6: re_pot fir1 container1\n(:action re_pot\n    :parameters (?p - player ?plant - plant ?container - container)\n    :precondition (and (established ?plant ?container))\n    :effect (and (re_potted ?plant ?container))\n)\n\n### Descriptions:\n- Choose the plant from a nursery or garden center.\n- This plant spreads and flattens as it grows, so select a broad sized container, preferably with a rounded shape.\n- Choose the potting soil.\n- Plant the fir in the container.\n- Keep this up until the tree is well established.\n- Re-pot occasionally.\n\n### Entity States:\n- available(?plant, ?loc) - The plant is available at the location.\n- nursery(?loc) - The location is a nursery.\n- garden_center(?loc) - The location is a garden center.\n- broad(?container) - The container is broad.\n- rounded(?container) - The container has a rounded shape.\n- planted(?plant, ?container) - The plant is planted in the container.\n- established(?plant, ?container) - The plant is well established in the container.\n- re_potted(?plant, ?container) - The plant has been re-potted in the container.\n\nThese actions should help in achieving the task of growing a Dwarf Balsam Fir by following the described steps and maintaining the necessary conditions and effects."
        ]
    },
    {
        "task": "Fold Bath Towels for Quick Hanging at Home",
        "action": [
            "Certainly! Based on the given task and steps, here are the corresponding PDDL actions:\n\nTask: Fold Bath Towels for Quick Hanging at Home\n\nSteps:\n- fold-twice towel1\n- fold-half-twice towel1\n- store-item towel1\n- hang-on-rack towel1\n\nDescriptions:\n- Fold the towel in thirds lengthwise.\n- Fold in half, and then in half again.\n- Store the towel in the linen closet.\n- To go from the closet for hanging, simply unfold the final fold and hang on the towel rack.\n\nPDDL Actions:\n```lisp\n(:action fold-twice\n      :parameters (?t - towel ?p - person)\n      :precondition (and (at ?t unfolded) (at ?p home))\n      :effect (and (at ?t folded-twice) (not (at ?t unfolded)))\n   )\n\n(:action fold-half-twice\n      :parameters (?t - towel ?p - person)\n      :precondition (and (at ?t folded-twice) (at ?p home))\n      :effect (and (at ?t folded-half-twice) (not (at ?t folded-twice)))\n   )\n\n(:action store-item\n      :parameters (?t - towel ?p - person ?c - closet)\n      :precondition (and (at ?t folded-half-twice) (at ?p home) (at ?c linen-closet))\n      :effect (and (at ?t stored) (not (at ?t folded-half-twice)) (at ?t ?c))\n   )\n\n(:action hang-on-rack\n      :parameters (?t - towel ?p - person ?r - rack)\n      :precondition (and (at ?t stored) (at ?p home) (at ?r towel-rack))\n      :effect (and (at ?t hanging) (not (at ?t stored)))\n   )\n```\n\nExplanation:\n1. **fold-twice**: This action folds the towel in thirds lengthwise.\n2. **fold-half-twice**: This action folds the towel in half, and then in half again.\n3. **store-item**: This action stores the folded towel in the linen closet.\n4. **hang-on-rack**: This action hangs the towel on the towel rack by unfolding the final fold from the stored state.\n\nThese actions capture the sequence of steps described for folding and storing the towel for quick hanging at home."
        ]
    },
    {
        "task": "Make Seasoned Salt",
        "action": [
            "Certainly! Below are the PDDL actions based on the provided task and steps:\n\nTask: Make Seasoned Salt\n\nSteps:\nStep 1: mix_ingredients mixture\nStep 2: pour-into-container container1\nStep 3: grind-ingredients alice mortar_and_pestle\nStep 4: gotolocation agent container\n\nDescriptions:\n- Mix the ingredients together thoroughly.\n- Pour into an air-tight container with a lid.\n- Grind the ingredients together in a mortar and pestle.\n- Transfer to a storage container as needed.\n\nPDDL Actions:\n\n```lisp\n(:action mix_ingredients\n  :parameters (?p - person ?mixture - mixture ?ingredients - ingredient)\n  :precondition (and (at ?p kitchen) (has ?p ?ingredients))\n  :effect (and (mixed ?mixture) (not (has ?p ?ingredients)))\n)\n\n(:action pour_into_container\n  :parameters (?p - person ?mixture - mixture ?container - container)\n  :precondition (and (at ?p kitchen) (mixed ?mixture) (has ?p ?mixture) (is_container ?container))\n  :effect (and (in ?mixture ?container) (not (has ?p ?mixture)))\n)\n\n(:action grind_ingredients\n  :parameters (?p - person ?ingredients - ingredient ?mortar_and_pestle - tool)\n  :precondition (and (at ?p kitchen) (has ?p ?ingredients) (is_mortar_and_pestle ?mortar_and_pestle))\n  :effect (and (ground ?ingredients) (not (has ?p ?ingredients)))\n)\n\n(:action gotolocation\n  :parameters (?agent - person ?location - location)\n  :precondition (and (at ?agent ?current_location) (connected ?current_location ?location))\n  :effect (and (at ?agent ?location) (not (at ?agent ?current_location)))\n)\n```\n\nExplanation:\n- `mix_ingredients`: This action captures the step of mixing ingredients together.\n- `pour_into_container`: This action represents pouring the mixed ingredients into a container.\n- `grind_ingredients`: This action involves grinding the ingredients using a mortar and pestle.\n- `gotolocation`: This action is a general movement action for the agent to move to a specified location.\n\nThese actions follow the format and structure shown in the example and are tailored to the task of making seasoned salt."
        ]
    },
    {
        "task": "Make a Pancake Mix Container from a Recycled Ketchup Bottle",
        "action": [
            "Sure, let's generate the PDDL actions based on the given task and steps.\n\nTask: Make a Pancake Mix Container from a Recycled Ketchup Bottle\n\nSteps:\n1. scrub_ketchup_bottle ketchup bottle1\n2. place_funnel user1 funnel1 bottle1\n3. pour_into_fridge ketchup_bottle\n4. replace_lid_and_label user1 ketchup_bottle1\n5. place_in_fridge bottle1 refrigerator1\n6. finish-wreath wreath\n\nDescriptions:\n- Scrub the ketchup bottle thoroughly.\n- Place the funnel over the mouth of the bottle.\n- Pour pancake batter through the funnel into the empty ketchup bottle.\n- Replace the lid and label the bottle.\n- Place the bottle in refrigerator.\n- Finished.\n\nPDDL Actions:\n\n```lisp\n(:action scrub_ketchup_bottle\n    :parameters (?b - bottle)\n    :precondition (and (is_empty ?b) (not (is_clean ?b)))\n    :effect (is_clean ?b)\n)\n\n(:action place_funnel\n    :parameters (?u - user ?f - funnel ?b - bottle)\n    :precondition (and (is_clean ?b) (not (has_funnel ?b)))\n    :effect (has_funnel ?b)\n)\n\n(:action pour_pancake_batter\n    :parameters (?u - user ?b - bottle ?f - funnel ?bat - batter)\n    :precondition (and (has_funnel ?b) (is_clean ?b) (has_batter ?u ?bat))\n    :effect (and (has_batter ?b ?bat) (not (has_batter ?u ?bat)))\n)\n\n(:action replace_lid_and_label\n    :parameters (?u - user ?b - bottle)\n    :precondition (and (has_batter ?b ?bat) (not (has_lid ?b)))\n    :effect (and (has_lid ?b) (is_labeled ?b))\n)\n\n(:action place_in_fridge\n    :parameters (?b - bottle ?r - refrigerator)\n    :precondition (and (has_lid ?b) (is_labeled ?b))\n    :effect (in_fridge ?b ?r)\n)\n\n(:action finish_task\n    :parameters (?u - user ?w - wreath)\n    :precondition (and (task_completed ?u))\n    :effect (is_finished ?w)\n)\n```\n\nExplanation:\n1. **scrub_ketchup_bottle**: This action represents scrubbing the ketchup bottle to make it clean.\n2. **place_funnel**: This action represents placing the funnel over the mouth of the bottle.\n3. **pour_pancake_batter**: This action represents pouring pancake batter into the bottle through the funnel.\n4. **replace_lid_and_label**: This action represents replacing the lid and labeling the bottle.\n5. **place_in_fridge**: This action represents placing the bottle in the refrigerator.\n6. **finish_task**: This action represents the completion of the task.\n\nNote: The step \"finish-wreath wreath\" seems irrelevant to the given task, so it was modified to a generic task completion action."
        ]
    },
    {
        "task": "Make a Banana Strawberry Rum Smoothie",
        "action": [
            "Here are the PDDL actions for the task \"Make a Banana Strawberry Rum Smoothie,\" based on the provided steps and descriptions:\n\n---\n\n### PDDL Actions:\n\n#### Action 1: Place Ingredients\n```pddl\n(:action place_ingredients\n    :parameters (?p - player ?b - item ?s - item ?y - item ?bl - blender)\n    :precondition (and (inventory ?p ?b) (inventory ?p ?s) (inventory ?p ?y) (is_blender ?bl) (empty ?bl))\n    :effect (and (in_blender ?bl ?b) (in_blender ?bl ?s) (in_blender ?bl ?y) \n                 (not (inventory ?p ?b)) (not (inventory ?p ?s)) (not (inventory ?p ?y)))\n)\n```\n\n#### Action 2: Blend Into Texture\n```pddl\n(:action blend_into_texture\n    :parameters (?p - player ?bl - blender)\n    :precondition (and (at ?p ?bl) (is_blender ?bl) (in_blender ?bl bananas) \n                       (in_blender ?bl sorbet) (in_blender ?bl yogurt))\n    :effect (and (blended ?bl) (smooth_texture ?bl))\n)\n```\n\n#### Action 3: Add Rum and Blend\n```pddl\n(:action add_rum_and_blend\n    :parameters (?p - player ?r - item ?bl - blender)\n    :precondition (and (inventory ?p ?r) (at ?p ?bl) (is_blender ?bl) (blended ?bl))\n    :effect (and (in_blender ?bl ?r) (not (inventory ?p ?r)) (blended_with_rum ?bl))\n)\n```\n\n#### Action 4: Pour Into Glass\n```pddl\n(:action pour_into_glass\n    :parameters (?p - player ?bl - blender ?g - glass)\n    :precondition (and (at ?p ?g) (at ?p ?bl) (is_blender ?bl) (is_glass ?g) \n                       (blended_with_rum ?bl) (smooth_texture ?bl) (empty ?g))\n    :effect (and (filled ?g smoothie) (empty ?bl))\n)\n```\n\n#### Action 5: Garnish Glass\n```pddl\n(:action garnish_glass\n    :parameters (?p - player ?g - glass ?st - item)\n    :precondition (and (inventory ?p ?st) (at ?p ?g) (is_glass ?g) (filled ?g smoothie))\n    :effect (and (garnished ?g ?st) (not (inventory ?p ?st)))\n)\n```\n\n---\n\n### Explanation:\n\n1. **Action 1: `place_ingredients`**  \n   This action represents placing the main ingredients (bananas, sorbet, yogurt) into the blender. The precondition ensures the player has the ingredients and the blender is empty. The effect moves the ingredients into the blender and removes them from the player's inventory.\n\n2. **Action 2: `blend_into_texture`**  \n   This action blends the ingredients into a smooth texture. The precondition ensures the blender contains the correct ingredients and the player is at the blender. The effect marks the blender as blended and the texture as smooth.\n\n3. **Action 3: `add_rum_and_blend`**  \n   This action adds rum to the blended mixture and blends it again. The precondition ensures the player has rum, the blender is blended, and the player is at the blender. The effect adds rum to the blender and marks the mixture as blended with rum.\n\n4. **Action 4: `pour_into_glass`**  \n   This action pours the smoothie into a glass. The precondition ensures the player is at the glass and blender, the glass is empty, and the blender contains the blended smoothie. The effect fills the glass with the smoothie and empties the blender.\n\n5. **Action 5: `garnish_glass`**  \n   This action garnishes the filled glass with a strawberry. The precondition ensures the player has a strawberry, the glass is filled with the smoothie, and the player is at the glass. The effect garnishes the glass with the strawberry and removes the strawberry from the player's inventory.\n\n---\n\nThese actions follow the PDDL structure and align with the task's steps and descriptions. If there are additional details or refinements needed, let me know!"
        ]
    },
    {
        "task": "Make Your Den Look Like a Home on Animal Jam (Non Members)",
        "action": [
            "Based on the given task and steps, here are the PDDL actions generated:\n\nTask: Make Your Den Look Like a Home on Animal Jam (Non Members)\n\nSteps:\n- get_gems gems\n- buy_stuff stuff\n- build_rooms npc basement\n- create-rooms kids-room\n- make_area area1\n- keep-family-safe kids\n\nDescriptions:\n- Get lots of gems.\n- For a family home you will need quite a lot of stuff.\n- Try to get room shoji screens so you can section things off into smaller rooms.\n- If you can get shoji screens, try making a kids room, a master bedroom, and a living/dining room.\n- Make an outside area.\n- Keep your family safe.\n\nPDDL Actions:\n\n```pddl\n(:action get_gems\n    :parameters (?p - player ?g - gems)\n    :precondition (and (at ?p market))\n    :effect (inventory ?p ?g)\n)\n\n(:action buy_stuff\n    :parameters (?p - player ?s - stuff ?g - gems)\n    :precondition (and (inventory ?p ?g) (at ?p market))\n    :effect (and (inventory ?p ?s) (not (inventory ?p ?g)))\n)\n\n(:action build_rooms\n    :parameters (?p - player ?r - room ?l - location)\n    :precondition (and (inventory ?p ?r) (at ?p ?l))\n    :effect (built ?r ?l)\n)\n\n(:action create_rooms\n    :parameters (?p - player ?r - room ?l - location)\n    :precondition (and (built ?r ?l) (at ?p ?l))\n    :effect (room_created ?r ?l)\n)\n\n(:action make_area\n    :parameters (?p - player ?a - area ?l - location)\n    :precondition (and (at ?p ?l))\n    :effect (area_created ?a ?l)\n)\n\n(:action keep_family_safe\n    :parameters (?p - player ?f - family ?r - room)\n    :precondition (and (at ?p ?r) (at ?f ?r))\n    :effect (safe ?f)\n)\n```\n\nThese actions are designed to reflect the steps and descriptions provided for making your den look like a home on Animal Jam. They capture the necessary preconditions and effects for each step in the process."
        ]
    },
    {
        "task": "Make Taco Filling",
        "action": [
            "Certainly! Here are the PDDL actions for the task \"Make Taco Filling\" based on the provided steps and descriptions:\n\nTask: Make Taco Filling\n\nSteps:\nStep 1: cook npc\nStep 2: drink_water faucet water\nStep 3: add_ingredients_to_sauce canola_oil stove pot\nStep 4: finish-wreath wreath\n\nDescriptions:\n- Brown the meat and the onion in a medium sized frying pan.\n- Drain the excess fat.\n- Add the remaining ingredients (except for the hot sauce) and simmer for fifteen minutes.\n- Finished.\n\nPDDL Actions:\n```lisp\n(:action brown_meat_and_onion\n      :parameters (?npc - player ?meat - item ?onion - item ?pan - item ?stove - location) \n      :precondition (and (at ?npc ?stove) (inventory ?npc ?meat) (inventory ?npc ?onion) (inventory ?npc ?pan) (is_stove ?stove) (is_frying_pan ?pan))\n      :effect (and (browned ?meat) (browned ?onion))\n  )\n\n(:action drain_excess_fat\n      :parameters (?npc - player ?pan - item ?sink - location) \n      :precondition (and (at ?npc ?sink) (inventory ?npc ?pan) (contains_fat ?pan) (is_sink ?sink))\n      :effect (and (not (contains_fat ?pan)))\n  )\n\n(:action add_ingredients_and_simmer\n      :parameters (?npc - player ?pan - item ?stove - location ?ingredients - item) \n      :precondition (and (at ?npc ?stove) (inventory ?npc ?pan) (inventory ?npc ?ingredients) (browned ?meat) (browned ?onion) (is_stove ?stove) (is_frying_pan ?pan) (not (contains_hot_sauce ?ingredients)))\n      :effect (and (simmering ?ingredients))\n  )\n\n(:action finish_taco_filling\n      :parameters (?npc - player ?stove - location ?pan - item) \n      :precondition (and (at ?npc ?stove) (inventory ?npc ?pan) (simmering ?ingredients) (is_stove ?stove) (is_frying_pan ?pan))\n      :effect (and (finished ?taco_filling))\n  )\n```\n\nExplanation:\n- `brown_meat_and_onion` action captures the step of browning the meat and onion.\n- `drain_excess_fat` action captures the step of draining the excess fat from the pan.\n- `add_ingredients_and_simmer` action captures the step of adding the remaining ingredients (except hot sauce) and simmering.\n- `finish_taco_filling` action captures the final step of completing the taco filling.\n\nNote: I modified steps to be more relevant to the task of making taco filling. The irrelevant steps and descriptions were adjusted accordingly."
        ]
    },
    {
        "task": "Make a Bead Ring",
        "action": [
            "Sure, let's generate the PDDL actions for the task \"Make a Bead Ring\" based on the provided steps and descriptions.\n\nTask: Make a Bead Ring\n\nSteps:\n1. Cut a strip of elastic.\n2. Slip two larger beads on either side of the small bead.\n3. Slip a small bead on one tail.\n4. Continue this pattern until you have enough beads to fit around the finger.\n5. Finish the ring by slipping the loose tails through the first small bead you placed on the elastic.\n\nDescriptions:\n- Cut a strip of elastic.\n- Slip two larger beads at either side of the small bead.\n- Slip a small bead on one tail.\n- Continue this pattern until you have enough beads to fit around the finger.\n- Finish the ring by slipping the loose tails through the first small bead you placed on the elastic.\n- Finished.\n\nPDDL Actions:\n```lisp\n(:action cut_strip ; cut a strip of elastic\n      :parameters (?p - player ?elastic - elastic ?strip - strip)\n      :precondition (and (inventory ?p ?elastic))\n      :effect (and (inventory ?p ?strip) (not (inventory ?p ?elastic)))\n)\n\n(:action slip_larger_beads ; slip two larger beads on either side of the small bead\n      :parameters (?p - player ?strip - strip ?bead1 - bead ?bead2 - bead ?small_bead - bead)\n      :precondition (and (inventory ?p ?strip) (inventory ?p ?bead1) (inventory ?p ?bead2) (inventory ?p ?small_bead))\n      :effect (and (on_strip ?strip ?bead1) (on_strip ?strip ?bead2) (on_strip ?strip ?small_bead))\n)\n\n(:action slip_small_bead ; slip a small bead on one tail\n      :parameters (?p - player ?strip - strip ?small_bead - bead)\n      :precondition (and (inventory ?p ?strip) (inventory ?p ?small_bead))\n      :effect (and (on_strip ?strip ?small_bead))\n)\n\n(:action continue_pattern ; continue slipping beads until the ring fits\n      :parameters (?p - player ?strip - strip ?bead - bead)\n      :precondition (and (inventory ?p ?strip) (inventory ?p ?bead))\n      :effect (and (on_strip ?strip ?bead))\n)\n\n(:action finish_ring ; finish the ring by slipping the loose tails through the first small bead\n      :parameters (?p - player ?strip - strip ?small_bead - bead ?ring - ring)\n      :precondition (and (on_strip ?strip ?small_bead))\n      :effect (and (inventory ?p ?ring) (not (inventory ?p ?strip)))\n)\n```\n\nThese actions should help in creating a bead ring as described in the task and steps."
        ]
    },
    {
        "task": "Make Chocolate Hearts for Valentine&#x27;s Day",
        "action": [
            "Sure, here are the PDDL actions for the task \"Make Chocolate Hearts for Valentine's Day\":\n\n### PDDL Actions:\n\n```lisp\n(:action build_ingredients\n    :parameters (?p - player)\n    :precondition (and (at ?p kitchen))\n    :effect (and (has_ingredients ?p mixture) (not (at ?p kitchen)))\n)\n\n(:action melt_chocolate\n    :parameters (?p - player ?c - chocolate ?m - microwave)\n    :precondition (and (has_ingredients ?p mixture) (at ?p kitchen) (at ?c kitchen) (at ?m kitchen))\n    :effect (and (melted ?c) (not (solid ?c)))\n)\n\n(:action pour_chocolate\n    :parameters (?p - player ?c - chocolate ?b - mixing_bowl)\n    :precondition (and (melted ?c) (at ?p kitchen) (at ?b kitchen))\n    :effect (and (chocolate_in_bowl ?c ?b))\n)\n\n(:action freeze_chocolate\n    :parameters (?p - player ?c - chocolate ?b - mixing_bowl ?f - freezer)\n    :precondition (and (chocolate_in_bowl ?c ?b) (at ?p kitchen) (at ?f kitchen))\n    :effect (and (frozen ?c) (not (melted ?c)))\n)\n\n(:action cut_heart_shape\n    :parameters (?p - player ?c - chocolate ?v - velveeta)\n    :precondition (and (frozen ?c) (at ?p kitchen) (has_tool ?p heart_cutter))\n    :effect (and (heart_shaped ?c) (not (frozen ?c)))\n)\n\n(:action box_chocolates\n    :parameters (?p - player ?c - chocolate ?b - box)\n    :precondition (and (heart_shaped ?c) (at ?p kitchen) (at ?b kitchen))\n    :effect (and (boxed ?c ?b) (not (heart_shaped ?c)))\n)\n```\n\n### Explanation:\n\n1. **build_ingredients**: This action assumes that the player assembles all necessary ingredients at the kitchen. \n    - Preconditions: The player is in the kitchen.\n    - Effects: The player has the mixture of ingredients.\n\n2. **melt_chocolate**: This action melts the chocolate using a microwave.\n    - Preconditions: The player has the ingredients, is in the kitchen, and both the chocolate and microwave are in the kitchen.\n    - Effects: The chocolate is melted.\n\n3. **pour_chocolate**: This action pours the melted chocolate into a mixing bowl.\n    - Preconditions: The chocolate is melted, and both the player and the mixing bowl are in the kitchen.\n    - Effects: The chocolate is in the mixing bowl.\n\n4. **freeze_chocolate**: This action freezes the chocolate by placing it in the freezer.\n    - Preconditions: The chocolate is in the mixing bowl, and both the player and the freezer are in the kitchen.\n    - Effects: The chocolate is frozen.\n\n5. **cut_heart_shape**: This action cuts the chocolate into heart shapes using a heart cutter.\n    - Preconditions: The chocolate is frozen, the player is in the kitchen, and the player has a heart cutter tool.\n    - Effects: The chocolate is heart-shaped.\n\n6. **box_chocolates**: This action boxes the heart-shaped chocolates.\n    - Preconditions: The chocolate is heart-shaped, and both the player and the box are in the kitchen.\n    - Effects: The chocolates are boxed.\n\nThese actions should cover the steps required to make chocolate hearts for Valentine's Day based on the provided descriptions and steps."
        ]
    },
    {
        "task": "Make Chinese Macaroni in Just 20 Minutes",
        "action": [
            "Sure, let's generate the PDDL actions for the task \"Make Chinese Macaroni in Just 20 Minutes\" based on the steps and descriptions provided.\n\nTask: Make Chinese Macaroni in Just 20 Minutes\n\nSteps:\n1. boil_water npc kitchen hot_water\n2. add_macaroni npc kitchen hot_water\n3. drain_macaroni npc kitchen\n4. add_oil npc kitchen pan\n5. add_macaroni_to_pan npc kitchen pan\n6. add_sauce_and_spices npc kitchen pan\n7. cook_macaroni npc kitchen pan\n8. serve_macaroni npc kitchen plate\n\nDescriptions:\n- Boil macaroni in hot boiling water with some salt and oil for 10-15 minutes.\n- After the macaroni has boiled, put it under running water for about 15 seconds to prevent overcooking.\n- In another pan, add some oil and toss in the macaroni.\n- Add salt, red chili powder, soy sauce, white vinegar, and ajinomoto.\n- Cook for some seconds.\n- Serve hot with chilled drinks.\n\nPDDL Actions:\n\n```lisp\n(:action boil_water\n    :parameters (?p - player ?l - location ?w - water)\n    :precondition (and (at ?p ?l) (has_stove ?l))\n    :effect (and (boiled ?w) (not (cold ?w)))\n)\n\n(:action add_macaroni\n    :parameters (?p - player ?l - location ?m - macaroni ?w - water)\n    :precondition (and (at ?p ?l) (boiled ?w) (not (cooked ?m)))\n    :effect (cooked ?m)\n)\n\n(:action drain_macaroni\n    :parameters (?p - player ?l - location ?m - macaroni)\n    :precondition (and (at ?p ?l) (cooked ?m))\n    :effect (and (drained ?m) (not (wet ?m)))\n)\n\n(:action add_oil\n    :parameters (?p - player ?l - location ?pan - pan ?oil - oil)\n    :precondition (and (at ?p ?l) (has_pan ?pan ?l))\n    :effect (oiled ?pan)\n)\n\n(:action add_macaroni_to_pan\n    :parameters (?p - player ?l - location ?m - macaroni ?pan - pan)\n    :precondition (and (at ?p ?l) (drained ?m) (oiled ?pan))\n    :effect (in_pan ?m ?pan)\n)\n\n(:action add_sauce_and_spices\n    :parameters (?p - player ?l - location ?pan - pan ?s - sauce ?sp - spices)\n    :precondition (and (at ?p ?l) (in_pan ?m ?pan))\n    :effect (seasoned ?pan)\n)\n\n(:action cook_macaroni\n    :parameters (?p - player ?l - location ?pan - pan)\n    :precondition (and (at ?p ?l) (seasoned ?pan))\n    :effect (cooked ?pan)\n)\n\n(:action serve_macaroni\n    :parameters (?p - player ?l - location ?pan - pan ?plate - plate)\n    :precondition (and (at ?p ?l) (cooked ?pan))\n    :effect (served ?plate)\n)\n```\n\nThis set of PDDL actions should capture the steps and the logic required to make Chinese macaroni in 20 minutes based on the provided descriptions."
        ]
    },
    {
        "task": "Get Wailord in Pok\u00e9mon Emerald",
        "action": [
            "Sure, here are the PDDL actions based on the provided task and steps:\n\nTask: Get Wailord in Pok\u00e9mon Emerald\n\nSteps:\nStep 1: evolution_of_wailord npc\nStep 2: train_wailmer npc\nStep 3: evolve npc\nStep 4: copy-rare-candies wailmer\nStep 5: evolve wailmer\n\nDescriptions:\n- This is the pre-evolution of Wailord.\n- This Wailmer can be pretty annoying to train, so be patient.\n- Train it until it evolves.\n- Go to battle frontier and copy some rare candies.\n- Give the rare candies to a Wailmer and evolve it into a Wailord using them.\n\nPDDL Actions:\n\n(:action catch_wailmer\n    :parameters (?npc - npc ?loc - location ?wailmer - pokemon)\n    :precondition (and (at ?npc ?loc) (has_pokemon ?loc ?wailmer) (not (has ?npc ?wailmer)))\n    :effect (and (has ?npc ?wailmer) (not (has_pokemon ?loc ?wailmer)))\n)\n\n(:action train_wailmer\n    :parameters (?npc - npc ?wailmer - pokemon)\n    :precondition (and (has ?npc ?wailmer) (not (evolved ?wailmer)))\n    :effect (and (trained ?wailmer))\n)\n\n(:action evolve_wailmer\n    :parameters (?npc - npc ?wailmer - pokemon ?wailord - pokemon)\n    :precondition (and (has ?npc ?wailmer) (trained ?wailmer) (not (evolved ?wailmer)))\n    :effect (and (has ?npc ?wailord) (not (has ?npc ?wailmer)) (evolved ?wailmer))\n)\n\n(:action copy_rare_candies\n    :parameters (?npc - npc ?loc - location ?rare_candy - item)\n    :precondition (and (at ?npc ?loc) (has_item ?loc ?rare_candy))\n    :effect (and (inventory ?npc ?rare_candy) (inventory ?npc ?rare_candy))\n)\n\n(:action use_rare_candies\n    :parameters (?npc - npc ?wailmer - pokemon ?rare_candy - item)\n    :precondition (and (has ?npc ?wailmer) (inventory ?npc ?rare_candy) (not (evolved ?wailmer)))\n    :effect (and (evolved ?wailmer) (not (inventory ?npc ?rare_candy)))\n)\n\n(:action evolve_wailmer_with_candies\n    :parameters (?npc - npc ?wailmer - pokemon ?wailord - pokemon ?rare_candy - item)\n    :precondition (and (has ?npc ?wailmer) (evolved ?wailmer) (inventory ?npc ?rare_candy))\n    :effect (and (has ?npc ?wailord) (not (has ?npc ?wailmer)) (not (inventory ?npc ?rare_candy)))\n)\n\nThese actions capture the process of obtaining a Wailord in Pok\u00e9mon Emerald by catching a Wailmer, training it, copying rare candies, and using them to evolve Wailmer into Wailord."
        ]
    },
    {
        "task": "Clean Your Home Efficiently",
        "action": [
            "Sure, here are the PDDL actions for the task \"Clean Your Home Efficiently\" based on the provided steps and descriptions:\n\nTask: Clean Your Home Efficiently\n\nSteps:\n- pickup_items item1 basket1\n- get_dust_room rug1\n- empty_trash basket1 trash_bag1\n- clean_surface tv cleaner1\n- pickup_throw_rugs rug1\n- clean_room npc basement\n\nDescriptions:\n- Pick up and put away stray items and throw trash into waste baskets.\n- Dust, again going through the entire house room by room.\n- Take a large trash bag and go through each room emptying the waste baskets and trash cans.\n- Use a spray cleaner and rags or paper towels to clean any glass surfaces, including the TV screens.\n- First pick up any throw rugs and inside door mats and shake them outside.\n- Enjoy your clean home!\n\nPDDL Actions:\n\n```pddl\n(:action pickup_items\n      :parameters (?it - item ?b - basket ?p - player ?l - location)\n      :precondition (and (at ?it ?l) (at ?p ?l) (at ?b ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)) (in ?it ?b))\n   )\n\n(:action get_dust_room\n      :parameters (?r - rug ?p - player ?l - location)\n      :precondition (and (at ?r ?l) (at ?p ?l))\n      :effect (and (inventory ?p dust_cloth) (not (at ?r ?l)))\n   )\n\n(:action empty_trash\n      :parameters (?b - basket ?t - trash_bag ?p - player ?l - location)\n      :precondition (and (at ?b ?l) (at ?t ?l) (at ?p ?l) (not (full ?t)))\n      :effect (and (full ?t) (empty ?b))\n   )\n\n(:action clean_surface\n      :parameters (?s - surface ?c - cleaner ?p - player ?l - location)\n      :precondition (and (at ?s ?l) (at ?c ?l) (at ?p ?l) (inventory ?p cleaning_rag))\n      :effect (clean ?s)\n   )\n\n(:action pickup_throw_rugs\n      :parameters (?r - rug ?p - player ?l - location)\n      :precondition (and (at ?r ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?r) (not (at ?r ?l)))\n   )\n\n(:action clean_room\n      :parameters (?p - player ?l - location)\n      :precondition (at ?p ?l)\n      :effect (clean ?l)\n   )\n```\n\nIn these PDDL actions:\n- `pickup_items` allows the player to pick up items and put them in a basket.\n- `get_dust_room` allows the player to get a dust cloth and remove a rug from the location.\n- `empty_trash` allows the player to empty a trash basket into a trash bag.\n- `clean_surface` allows the player to clean a surface using a cleaner and a cleaning rag.\n- `pickup_throw_rugs` allows the player to pick up throw rugs.\n- `clean_room` allows the player to clean the entire room.\n\nThese actions address the steps and descriptions provided for the task of cleaning the home efficiently."
        ]
    },
    {
        "task": "Learn Photography by Shooting Macro",
        "action": [
            "Certainly! Here are the PDDL actions for the task \"Learn Photography by Shooting Macro\":\n\nTask: Learn Photography by Shooting Macro\n\nSteps:\n- create_small_studio studio\n- have_appropriate_reflector reflector\n- closeup_lens lens\n- diffuse_light light\n- start_experimenting experiment\n\nDescriptions:\n- Create a very small studio.\n- Have the appropriate sized reflectors.\n- Have a closeup lens.\n- Again, they don't need to be that big, but big enough to diffuse light for your small subject.\n- Start experimenting.\n\nPDDL Actions:\n\n```pddl\n(:action create_small_studio ; create a small studio for macro photography\n      :parameters (?p - person ?s - studio)\n      :precondition (and (not (has_studio ?p ?s)))\n      :effect (and (has_studio ?p ?s))\n)\n\n(:action have_appropriate_reflector ; ensure the appropriate sized reflectors are available\n      :parameters (?p - person ?r - reflector)\n      :precondition (and (has_studio ?p ?s) (not (has_reflector ?p ?r)))\n      :effect (and (has_reflector ?p ?r))\n)\n\n(:action closeup_lens ; ensure a closeup lens is available for macro photography\n      :parameters (?p - person ?l - lens)\n      :precondition (and (has_studio ?p ?s) (not (has_closeup_lens ?p ?l)))\n      :effect (and (has_closeup_lens ?p ?l))\n)\n\n(:action diffuse_light ; diffuse light for the small subject in the studio\n      :parameters (?p - person ?l - light)\n      :precondition (and (has_studio ?p ?s) (has_reflector ?p ?r) (not (has_diffused_light ?p ?l)))\n      :effect (and (has_diffused_light ?p ?l))\n)\n\n(:action start_experimenting ; start experimenting with macro photography\n      :parameters (?p - person ?e - experiment)\n      :precondition (and (has_studio ?p ?s) (has_reflector ?p ?r) (has_closeup_lens ?p ?l) (has_diffused_light ?p ?l))\n      :effect (and (is_experimenting ?p ?e))\n)\n```\n\nThese actions follow the guidelines and structure provided in the example and are tailored to the specific steps and descriptions of the task \"Learn Photography by Shooting Macro\"."
        ]
    },
    {
        "task": "Recycle Underpants",
        "action": [
            "Certainly! Below are the PDDL actions generated based on the provided task and steps:\n\nTask: Recycle Underpants\n\nSteps:\n- clean_underpants underpants1\n- use_as_garden_ties underpants1\n- make_craft_item underpants3 scissors1\n- use_as_stuffing underpants3\n- wear_underpants underpants1\n- donate_underpants underpants1\n\nDescriptions:\n- Turn the underpants into cleaning rags.\n- Use the underwear as garden ties.\n- Turn quality undies into craft items.\n- Use a bundle of old underwear as stuffing.\n- Children can wear old underwear on the outside of their pants to play superhero.\n- Donate the underpants.\n\nPDDL Actions:\n\n(:action clean_underpants\n    :parameters (?u - underpants)\n    :precondition (and (dirty ?u))\n    :effect (and (clean ?u) (not (dirty ?u)))\n)\n\n(:action use_as_garden_ties\n    :parameters (?u - underpants)\n    :precondition (and (clean ?u) (not (damaged ?u)))\n    :effect (and (used_as_garden_ties ?u) (not (clean ?u)))\n)\n\n(:action make_craft_item\n    :parameters (?u - underpants ?s - scissors)\n    :precondition (and (clean ?u) (quality ?u) (has_tool ?s))\n    :effect (and (craft_item ?u) (not (quality ?u)))\n)\n\n(:action use_as_stuffing\n    :parameters (?u - underpants)\n    :precondition (and (bundle ?u) (old ?u))\n    :effect (and (used_as_stuffing ?u) (not (bundle ?u)))\n)\n\n(:action wear_underpants\n    :parameters (?u - underpants ?c - child)\n    :precondition (and (clean ?u) (not (damaged ?u)) (child ?c))\n    :effect (and (wearing ?c ?u) (not (clean ?u)))\n)\n\n(:action donate_underpants\n    :parameters (?u - underpants)\n    :precondition (and (clean ?u) (not (damaged ?u)))\n    :effect (and (donated ?u) (not (clean ?u)))\n)\n\nThese actions capture the intent and logic of each step described in the task of recycling underpants."
        ]
    },
    {
        "task": "Make Whole Wheat Pastry With Canola",
        "action": [
            "Sure! Let's generate the PDDL actions for the given task and steps.\n\nTask: Make Whole Wheat Pastry With Canola\n\nSteps:\n- place-ingredients whole wheat mixing bowl\n- pour_ingredients_into_oil user1 bottle1 oil1 container1\n- place_pastry_on_sheet pastry1 sheet1\n- remove-from-fridge water faucet\n- press_into_pie_dish mixing_bowl table\n- create_edge canola_oil table\n\nDescriptions:\n- Place the whole wheat flour and salt into the mixing bowl.\n- Pour in the oil.\n- Place the pastry onto a sheet of wax paper.\n- Remove from the fridge.\n- Press the pastry into the pie dish.\n- Create an edge with the sides of a fork.\n\nPDDL Actions:\n\n```pddl\n(:action place_ingredients\n    :parameters (?flour - whole_wheat ?bowl - mixing_bowl ?salt - ingredient)\n    :precondition (and (at ?flour ?bowl) (at ?salt ?bowl) (not (ingredients_placed ?bowl)))\n    :effect (ingredients_placed ?bowl)\n)\n\n(:action pour_ingredients_into_oil\n    :parameters (?user - user ?bottle - bottle ?oil - oil ?container - container)\n    :precondition (and (has ?user ?bottle) (contains ?bottle ?oil) (at ?user ?container) (not (oil_poured ?container)))\n    :effect (oil_poured ?container)\n)\n\n(:action place_pastry_on_sheet\n    :parameters (?pastry - pastry ?sheet - sheet)\n    :precondition (and (at ?pastry ?sheet) (not (pastry_on_sheet ?pastry)))\n    :effect (pastry_on_sheet ?pastry)\n)\n\n(:action remove_from_fridge\n    :parameters (?item - water ?location - fridge)\n    :precondition (and (in_fridge ?item ?location) (not (removed_from_fridge ?item)))\n    :effect (removed_from_fridge ?item)\n)\n\n(:action press_into_pie_dish\n    :parameters (?bowl - mixing_bowl ?table - table ?pastry - pastry)\n    :precondition (and (contains ?bowl ?pastry) (at ?bowl ?table) (not (pastry_pressed ?pastry)))\n    :effect (pastry_pressed ?pastry)\n)\n\n(:action create_edge\n    :parameters (?oil - canola_oil ?table - table ?fork - utensil)\n    :precondition (and (at ?oil ?table) (has ?fork ?user) (not (edge_created ?pastry)))\n    :effect (edge_created ?pastry)\n)\n```\n\nThese PDDL actions capture the steps and the logic required to make whole wheat pastry with canola oil, based on the provided descriptions."
        ]
    },
    {
        "task": "Freeze Baked Cookies or Biscuits",
        "action": [
            "Sure! Below are the PDDL actions for the task \"Freeze Baked Cookies or Biscuits\" based on the given steps and descriptions:\n\nTask: Freeze Baked Cookies or Biscuits\n\nSteps:\n- place-in-container cookies\n- separate-using-paper cookies\n- freeze-biscuits cookies\n- thaw cookies\n\nDescriptions:\n- Place the biscuits or cookies into a rigid, airtight container.\n- Separate the biscuits and cookies using freezer paper, baking paper, or foil.\n- Place biscuits in freezer.\n- Thaw.\n\nPDDL Actions:\n```pddl\n(:action place-in-container\n    :parameters (?p - player ?cookies - cookies ?container - container)\n    :precondition (and (inventory ?p ?cookies) (inventory ?p ?container) (airtight ?container))\n    :effect (and (in ?cookies ?container) (not (inventory ?p ?cookies)))\n)\n\n(:action separate-using-paper\n    :parameters (?p - player ?cookies - cookies ?paper - paper ?container - container)\n    :precondition (and (inventory ?p ?paper) (in ?cookies ?container) (or (type ?paper freezer_paper) (type ?paper baking_paper) (type ?paper foil)))\n    :effect (separated ?cookies ?paper)\n)\n\n(:action freeze-biscuits\n    :parameters (?p - player ?cookies - cookies ?freezer - freezer ?container - container)\n    :precondition (and (in ?cookies ?container) (separated ?cookies ?paper) (location ?container ?freezer))\n    :effect (frozen ?cookies)\n)\n\n(:action thaw\n    :parameters (?p - player ?cookies - cookies ?freezer - freezer ?container - container)\n    :precondition (and (frozen ?cookies) (location ?container ?freezer))\n    :effect (and (thawed ?cookies) (not (frozen ?cookies)))\n)\n```\n\nExplanation:\n1. **place-in-container**: This action places the cookies into an airtight container.\n   - Preconditions: The player has the cookies and the container, and the container is airtight.\n   - Effects: The cookies are now in the container, and the player no longer has the cookies in their inventory.\n\n2. **separate-using-paper**: This action separates the cookies using paper.\n   - Preconditions: The player has the paper, the cookies are in a container, and the paper is of an appropriate type (freezer paper, baking paper, or foil).\n   - Effects: The cookies are now separated using the paper.\n\n3. **freeze-biscuits**: This action places the container with cookies into the freezer.\n   - Preconditions: The cookies are in the container and separated with paper, and the container is located in the freezer.\n   - Effects: The cookies are now frozen.\n\n4. **thaw**: This action thaws the frozen cookies.\n   - Preconditions: The cookies are frozen and the container is in the freezer.\n   - Effects: The cookies are now thawed and no longer frozen."
        ]
    },
    {
        "task": "Make a Duct Tape Necklace",
        "action": [
            "Sure, here are the PDDL actions based on the given task and steps to make a duct tape necklace:\n\n```pddl\n(:action make_horizontal_bar\n    :parameters (?npc - npc ?loc - location ?duct_tape - duct_tape ?horizontal_bar - horizontal_bar)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?duct_tape) (piece_length ?duct_tape ?horizontal_bar))\n    :effect (and (inventory ?npc ?horizontal_bar) (not (inventory ?npc ?duct_tape)))\n)\n\n(:action cut_roll\n    :parameters (?npc - npc ?loc - location ?horizontal_bar - horizontal_bar ?cut_piece - cut_piece)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?horizontal_bar) (measured_to_head ?horizontal_bar))\n    :effect (and (inventory ?npc ?cut_piece) (not (inventory ?npc ?horizontal_bar)))\n)\n\n(:action fold_wreath\n    :parameters (?npc - npc ?loc - location ?cut_piece - cut_piece ?wreath - wreath)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?cut_piece) (folded_halfway ?cut_piece))\n    :effect (and (inventory ?npc ?wreath) (not (inventory ?npc ?cut_piece)))\n)\n\n(:action fold_half_tape\n    :parameters (?npc - npc ?loc - location ?wreath - wreath ?half_folded_tape - half_folded_tape)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?wreath) (folded_no_sticky ?wreath))\n    :effect (and (inventory ?npc ?half_folded_tape) (not (inventory ?npc ?wreath)))\n)\n\n(:action tape_ends\n    :parameters (?npc - npc ?loc - location ?half_folded_tape - half_folded_tape ?taped_ends - taped_ends)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?half_folded_tape) (ends_taped ?half_folded_tape))\n    :effect (and (inventory ?npc ?taped_ends) (not (inventory ?npc ?half_folded_tape)))\n)\n\n(:action put_in_machine\n    :parameters (?npc - npc ?loc - location ?taped_ends - taped_ends ?machine - machine)\n    :precondition (and (at ?npc ?loc) (inventory ?npc ?taped_ends) (at ?machine ?loc))\n    :effect (and (in ?taped_ends ?machine) (not (inventory ?npc ?taped_ends)))\n)\n```\n\nExplanation:\n1. `make_horizontal_bar`: This action involves taking a roll of duct tape and making a piece that is a little bigger than your head.\n2. `cut_roll`: This action involves measuring the piece around your head and cutting it off the roll.\n3. `fold_wreath`: This action involves folding the cut piece halfway through the middle.\n4. `fold_half_tape`: This action involves folding the other half so there is no sticky part showing.\n5. `tape_ends`: This action involves taping the ends together.\n6. `put_in_machine`: This action involves putting the final product into a machine, which signifies the completion of the task.\n\nEach PDDL action follows the format and structure provided in the example, with appropriate preconditions and effects based on the task descriptions and steps."
        ]
    },
    {
        "task": "Get a Headshot in Gears of War",
        "action": [
            "Sure! Below are the PDDL actions based on the task \"Get a Headshot in Gears of War\" and the given steps and descriptions.\n\nTask: Get a Headshot in Gears of War\n\nSteps:\n- shotgun_shot player1 player2\n- shotgun_shot player1\n- pistol_shot player1 player2\n- boomshot_shot weapon1 player1\n\nDescriptions:\n- Sniper \u2014 Simply aim at the head and pull the trigger, unless you're the host, in which case you will need to aim in front of where they're going.\n- Shotgun \u2014 The aim on the shotgun is almost like a rectangle.\n- Pistol \u2014 I'm not sure because I haven't played in a while, but it's either six or seven shots to the head with the standard-issue pistol for a headshot.\n- BoomShot \u2014 BoomShot headshots are possible \u2014 don't let anyone tell you they're not but the chance of one happening is about a million to one.\n\nPDDL Actions:\n```lisp\n(:action shotgun_shot\n      :parameters (?p1 - player ?p2 - player)\n      :precondition (and (at ?p1 ?loc1) (at ?p2 ?loc2) (has_weapon ?p1 shotgun))\n      :effect (and (attempt_headshot ?p1 ?p2 shotgun))\n   )\n\n(:action shotgun_shot_self\n      :parameters (?p1 - player)\n      :precondition (and (at ?p1 ?loc1) (has_weapon ?p1 shotgun))\n      :effect (and (attempt_headshot ?p1 ?p1 shotgun))\n   )\n\n(:action pistol_shot\n      :parameters (?p1 - player ?p2 - player)\n      :precondition (and (at ?p1 ?loc1) (at ?p2 ?loc2) (has_weapon ?p1 pistol))\n      :effect (and (attempt_headshot ?p1 ?p2 pistol))\n   )\n\n(:action boomshot_shot\n      :parameters (?w1 - weapon ?p1 - player)\n      :precondition (and (at ?p1 ?loc1) (has_weapon ?p1 boomshot))\n      :effect (and (attempt_headshot ?p1 ?p1 boomshot))\n   )\n\n(:action sniper_shot\n      :parameters (?p1 - player ?p2 - player)\n      :precondition (and (at ?p1 ?loc1) (at ?p2 ?loc2) (has_weapon ?p1 sniper))\n      :effect (and (attempt_headshot ?p1 ?p2 sniper))\n   )\n\n(:action attempt_headshot\n      :parameters (?p1 - player ?p2 - player ?w - weapon)\n      :precondition (and (at ?p1 ?loc1) (at ?p2 ?loc2) (has_weapon ?p1 ?w))\n      :effect (and (headshot ?p1 ?p2 ?w))\n   )\n```\n\nIn this set of actions:\n- `shotgun_shot` represents shooting another player with a shotgun.\n- `shotgun_shot_self` represents shooting oneself with a shotgun.\n- `pistol_shot` represents shooting another player with a pistol.\n- `boomshot_shot` represents shooting oneself with a BoomShot.\n- `sniper_shot` represents shooting another player with a sniper rifle.\n- `attempt_headshot` is a generic action for attempting a headshot with any weapon.\n\nThe `precondition` ensures that the player has the weapon and is at a location, while the `effect` represents the attempt to get a headshot."
        ]
    },
    {
        "task": "Prevent a Wick Lamp or Stove from Smoking",
        "action": [
            "Certainly! Below are the PDDL actions for the task \"Prevent a Wick Lamp or Stove from Smoking\" based on the given steps and descriptions:\n\nTask: Prevent a Wick Lamp or Stove from Smoking\n\nSteps:\n- pour_vinegar_into_container vinegar1 container1\n- remove_wick wick1 lamp1 stove1\n- dip_wicks_in_vinegar wick1 vinegar1 container1\n- dry_wicks wick1\n- make_wicks_dry wick1\n\nDescriptions:\n- Pour some white vinegar into a small container deep enough for dipping.\n- Remove the wick from the lamp or stove, or use wicks yet to be inserted.\n- Dip each wick into the vinegar.\n- Allow to dry thoroughly.\n- Use once dry.\n\nPDDL Actions:\n\n```lisp\n(:action pour_vinegar_into_container\n    :parameters (?v - vinegar ?c - container)\n    :precondition (and (vinegar ?v) (container ?c) (not (contains ?c ?v)))\n    :effect (and (contains ?c ?v))\n)\n\n(:action remove_wick\n    :parameters (?w - wick ?l - lamp ?s - stove)\n    :precondition (and (or (in ?w ?l) (in ?w ?s)))\n    :effect (and (not (in ?w ?l)) (not (in ?w ?s)) (removed ?w))\n)\n\n(:action dip_wicks_in_vinegar\n    :parameters (?w - wick ?v - vinegar ?c - container)\n    :precondition (and (removed ?w) (contains ?c ?v) (vinegar ?v) (container ?c))\n    :effect (and (soaked_in_vinegar ?w))\n)\n\n(:action dry_wicks\n    :parameters (?w - wick)\n    :precondition (and (soaked_in_vinegar ?w))\n    :effect (and (drying ?w))\n)\n\n(:action make_wicks_dry\n    :parameters (?w - wick)\n    :precondition (and (drying ?w))\n    :effect (and (dry ?w) (not (drying ?w)))\n)\n```\n\nHere is a brief explanation of each action:\n\n1. **pour_vinegar_into_container**: This action involves pouring vinegar into a container.\n2. **remove_wick**: This action involves removing the wick from either a lamp or a stove.\n3. **dip_wicks_in_vinegar**: This action involves dipping the removed wick into the vinegar contained in the container.\n4. **dry_wicks**: This action involves the process of drying the wicks after they have been soaked in vinegar.\n5. **make_wicks_dry**: This action involves ensuring the wicks are completely dry and ready to be used again.\n\nThese actions capture the logical flow and intent of the steps needed to prevent a wick lamp or stove from smoking."
        ]
    },
    {
        "task": "Defeat a Thug on Dead Island",
        "action": [
            "Sure! Based on the task and steps provided, I will generate the appropriate PDDL actions.\n\nTask: Defeat a Thug on Dead Island\n\nSteps:\n- make_horizontal_bar branch_piece\n- get_weapon npc weapon\n- check_weapons pistol ammunition\n- attack_thug npc thug weapon\n\nDescriptions:\n- There is no chance in hell you will kill a Thug using just your bear hands and feet.\n- Incendiary Weapons - Grenades or Molotov Cocktails *WARNING* You may need to use a couple of these, so it is recommended that you only use one when a Thugs' health is below 50%.\n- Make sure your guns have enough ammo, and your knives are up to scratch.\n- Attack!\n\nPDDL Actions:\n```pddl\n(:action make_horizontal_bar\n     :parameters (?p - player ?branch - branch_piece)\n     :precondition (and (inventory ?p ?branch))\n     :effect (and (inventory ?p horizontal_bar) (not (inventory ?p ?branch)))\n)\n(:action get_weapon\n     :parameters (?p - player ?loc - location ?weapon - weapon)\n     :precondition (and (at ?p ?loc) (at ?weapon ?loc))\n     :effect (and (inventory ?p ?weapon) (not (at ?weapon ?loc)))\n)\n(:action check_weapons\n     :parameters (?p - player ?gun - gun ?ammo - ammunition)\n     :precondition (and (inventory ?p ?gun) (inventory ?p ?ammo) (loaded ?gun ?ammo))\n     :effect (and (ready_to_use ?gun))\n)\n(:action attack_thug\n     :parameters (?p - player ?thug - thug ?weapon - weapon)\n     :precondition (and (at ?p ?loc) (at ?thug ?loc) (inventory ?p ?weapon) (ready_to_use ?weapon))\n     :effect (and (defeated ?thug) (not (at ?thug ?loc)))\n)\n```\n\nKey Points:\n1. `make_horizontal_bar` action allows the player to craft a horizontal bar from a branch piece.\n2. `get_weapon` action allows the player to pick up a weapon from a specific location.\n3. `check_weapons` action ensures the player checks their gun and ammunition to make sure it is ready to use.\n4. `attack_thug` action allows the player to attack and defeat the thug using a weapon that is ready to use.\n\nThese actions follow the format and structure shown in the example provided."
        ]
    },
    {
        "task": "Clean Synthetic Hiking Gear",
        "action": [
            "Sure, here are the PDDL actions for the task \"Clean Synthetic Hiking Gear\":\n\n(:action read_instructions\n      :parameters (?ins - instructions ?p - person)\n      :precondition (and (at ?ins ?p))\n      :effect (and (read ?ins))\n   )\n\n(:action wash_gore_tex\n      :parameters (?cl - clothing ?p - person ?wm - washing_machine)\n      :precondition (and (read ?ins) (at ?cl ?p) (is_gore_tex ?cl) (at ?wm ?p))\n      :effect (and (clean ?cl))\n   )\n\n(:action check_boots\n      :parameters (?b - boots ?p - person)\n      :precondition (and (at ?b ?p) (is_synthetic ?b))\n      :effect (and (checked ?b))\n   )\n\n(:action clean_sliplargerbund\n      :parameters (?j - jacket ?p - person)\n      :precondition (and (at ?j ?p) (contains_down ?j))\n      :effect (and (clean ?j))\n   )\n\n(:action wash_polar_fleece\n      :parameters (?pf - polar_fleece ?p - person ?wm - washing_machine)\n      :precondition (and (read ?ins) (at ?pf ?p) (at ?wm ?p))\n      :effect (and (clean ?pf))\n   )"
        ]
    },
    {
        "task": "Remove Paint from Windows",
        "action": [
            "Certainly! Below are the PDDL actions for the task \"Remove Paint from Windows\" based on the provided steps and descriptions:\n\n```pddl\n(:action clean_cloth\n      :parameters (?c - cloth ?s - sponge)\n      :precondition (and (at ?c storage) (at ?s storage))\n      :effect (and (clean ?c) (not (dirty ?c)) (not (dirty ?s)))\n   )\n\n(:action wet_window_with_water\n      :parameters (?p - player ?w - window ?water - water)\n      :precondition (and (at ?p ?w) (has_water ?water))\n      :effect (and (wet ?w) (not (dry ?w)))\n   )\n\n(:action position_razor\n      :parameters (?p - player ?r - razor ?w - window)\n      :precondition (and (at ?p ?w) (inventory ?p ?r))\n      :effect (and (positioned ?r ?w))\n   )\n\n(:action scrape_window_with_painting\n      :parameters (?p - player ?r - razor ?w - window)\n      :precondition (and (at ?p ?w) (positioned ?r ?w) (wet ?w))\n      :effect (and (scraped ?w) (not (painted ?w)))\n   )\n\n(:action clean_window\n      :parameters (?p - player ?w - window ?g - glass_cleaner ?c - cloth)\n      :precondition (and (at ?p ?w) (inventory ?p ?g) (clean ?c) (scraped ?w))\n      :effect (and (cleaned ?w) (not (dirty ?w)))\n   )\n\n(:action remove_small_splatter\n      :parameters (?p - player ?ps - paint_splatters ?cs - chemical_solvent ?w - window)\n      :precondition (and (at ?p ?w) (inventory ?p ?cs) (at ?ps ?w))\n      :effect (and (removed ?ps) (not (at ?ps ?w)))\n   )\n```\n\nExplanation of each action:\n\n1. `clean_cloth`: This action involves cleaning a cloth and sponge.\n   - Parameters: `?c` is the cloth, `?s` is the sponge.\n   - Preconditions: Both the cloth and sponge are in the storage.\n   - Effects: The cloth and sponge are clean.\n\n2. `wet_window_with_water`: This action wets the window with water.\n   - Parameters: `?p` is the player, `?w` is the window, `?water` is the water.\n   - Preconditions: The player is at the window location, and there is water available.\n   - Effects: The window becomes wet.\n\n3. `position_razor`: This action positions the razor blade on the window.\n   - Parameters: `?p` is the player, `?r` is the razor, `?w` is the window.\n   - Preconditions: The player is at the window location, and the player has the razor.\n   - Effects: The razor is positioned on the window.\n\n4. `scrape_window_with_painting`: This action scrapes the paint from the window using the razor.\n   - Parameters: `?p` is the player, `?r` is the razor, `?w` is the window.\n   - Preconditions: The player is at the window location, the razor is positioned on the window, and the window is wet.\n   - Effects: The window is scraped, and the paint is removed.\n\n5. `clean_window`: This action cleans the window with glass cleaner and a clean cloth.\n   - Parameters: `?p` is the player, `?w` is the window, `?g` is the glass cleaner, `?c` is the cloth.\n   - Preconditions: The player is at the window location, the player has the glass cleaner, the cloth is clean, and the window is scraped.\n   - Effects: The window becomes clean.\n\n6. `remove_small_splatter`: This action removes small paint splatters with chemical solvents.\n   - Parameters: `?p` is the player, `?ps` is the paint splatters, `?cs` is the chemical solvent, `?w` is the window.\n   - Preconditions: The player is at the window location, the player has the chemical solvent, and the paint splatters are on the window.\n   - Effects: The paint splatters are removed from the window.\n\nThese actions capture the steps and logic required to remove paint from windows, ensuring the necessary conditions and effects are properly defined."
        ]
    },
    {
        "task": "Use a Mic in Team Fortress 2",
        "action": [
            "Sure, let's generate the PDDL actions based on the provided task and steps.\n\nTask: Use a Mic in Team Fortress 2\n\nSteps:\n1. make_microphone_connected mic\n2. find_panel panel\n3. check_panel panel\n4. talk_using_microphone mic voice\n5. use_microphone voice\n6. advise_teammates advice\n\nDescriptions:\n- Make sure that your microphone is working and connected first.\n- Find various panels at the top like \"Multiplayer\", \"Mouse\", \"Audio\", etc.\n- Click on the Voice panel.\n- Start talking with other players using your microphone!\n- Use the microphone to communicate with your team in a more efficient manner and demand that your voice is heard!\n- Advise teammates as well as make game plans to help and support your team.\n\nPDDL Actions:\n\n```lisp\n(:action make_microphone_connected\n    :parameters (?p - player ?mic - microphone)\n    :precondition (and (not (microphone_connected ?p ?mic)) (has_microphone ?p ?mic))\n    :effect (microphone_connected ?p ?mic)\n)\n\n(:action find_panel\n    :parameters (?p - player ?panel - panel)\n    :precondition (and (at ?p ?location) (not (panel_found ?p ?panel)))\n    :effect (panel_found ?p ?panel)\n)\n\n(:action check_panel\n    :parameters (?p - player ?panel - panel)\n    :precondition (and (panel_found ?p ?panel) (not (panel_checked ?p ?panel)))\n    :effect (panel_checked ?p ?panel)\n)\n\n(:action talk_using_microphone\n    :parameters (?p - player ?mic - microphone ?voice - voice)\n    :precondition (and (microphone_connected ?p ?mic) (panel_checked ?p voice_panel) (not (talking ?p ?voice)))\n    :effect (talking ?p ?voice)\n)\n\n(:action use_microphone\n    :parameters (?p - player ?voice - voice)\n    :precondition (and (talking ?p ?voice) (not (using_microphone ?p ?voice)))\n    :effect (using_microphone ?p ?voice)\n)\n\n(:action advise_teammates\n    :parameters (?p - player ?advice - advice)\n    :precondition (and (using_microphone ?p ?voice) (not (advising ?p ?advice)))\n    :effect (advising ?p ?advice)\n)\n```\n\nExplanation:\n1. `make_microphone_connected`: Ensures the microphone is connected.\n2. `find_panel`: Finds the relevant panel (e.g., Voice panel).\n3. `check_panel`: Checks the panel to ensure it's the correct one.\n4. `talk_using_microphone`: Starts talking using the microphone.\n5. `use_microphone`: Uses the microphone to communicate.\n6. `advise_teammates`: Advises teammates using the microphone.\n\nEach action follows the format of defining the action name, parameters, preconditions, and effects, ensuring the logical flow of connecting and using the microphone in Team Fortress 2."
        ]
    }
]