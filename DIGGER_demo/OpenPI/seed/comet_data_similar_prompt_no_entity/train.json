[
    {
        "task": "Connect a Wii to HD TV",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is final.\n- go west npc home market\n- buy_supplies food npc market\n- buy_supplies medicine npc market\n- buy_supplies water npc market\n- check_supplies food water medicine\n- go west npc market weapon_market\n- buy_weapons ammunition npc weapon_market\n- buy_weapons pistol npc weapon_market\n- go east npc weapon_market market\n- buy_supplies heat npc market\n- go east npc market home\n- go north npc home bunker1\n- go north npc bunker1 bunker2\n- check_weapons pistol ammunition\n- check_bunker bunker2 npc\n- outfit_bunker_with_energy_source bunker2 npc heat\n- listen_to_astronomers_predictions npc bunker2\n- enjoylife bunker2 npc\n- connect_through_social_media_with_family bunker2 npc family philly\n- move_away npc philly salt_lake bunker2\n\nDescriptions:\n- Move away from coastal areas. Because the earth is made up of 71% water, there’s a greater likelihood that the comet will hit a body of water. If this does happen, it could mean that giant tsunamis would be created by the initial impact and they would likely destroy our coastal cities. Additionally, there would be an increase in water vapor entering our atmosphere which would cause heavy rain, which could cause landslides and flooding.\n- Purchase enough food, water, medicine, and other supplies. If the comet does hit on land, dust and rock particles flying into our atmosphere will make it too dangerous to go outside for months to years.\n- Don’t believe everything you hear. Early reporting is notoriously inaccurate at times, so wait it out until you hear unified reports.\n- Move into a bunker or fortified structure and outfit it with an energy source. An underground bunker isn’t only the best for the time of impact; it will also protect you from environmental hazards after the comet has hit. When the comet hits, dust, soot, and water will shoot up into our atmosphere, making it cold for months to years.\n- A semi-automatic rifle and a pistol with enough ammunition should be more than enough firepower.\n- Isolation has multiple negative effects on your mental health, so having people with you is a good idea if you want to stay mentally healthy.\n- Limit your generator usage and only use it if necessary. Your generator will be a lifesaver for many things while you are in your bunker. You can use it to produce heat, cook food, and power lights. However, because most generators run on fuel, it’s important that you limit its usage because you will likely have a limited amount of fuel in your bunker. If you aren't in a bunker, a generator may still work, but there's a good chance that the main power grid will be down.\n- Pay attention to astronomers’ predictions on any possible collisions with earth. NASA currently has astronomers that track comets that are flying in our solar system. As a result, there’s a very good chance they will know if there is a large object about to collide with us. By listening to their predictions, you can develop a real sense of how much time you have to prepare.\n- Buy weapons and ammunition for after the impact. You may be more concerned with withstanding the destruction of the comet impact itself, but you also need to be conscious of the possible dangers of other people after the dust settles.\n- Make sure to stock your hide-out with canned food, dried goods, non-perishable foods, and bottled water.\n\nPDDL Actions:\n(:action buy_supplies ; buy supplies and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - market) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?item))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action listen_to_astronomers_predictions ; listen to astronomers predictions on collision with earth\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (has_pc ?p))\n      :effect (and (listen_to_broadcast ?p ?l1))\n   )\n(:action outfit_bunker_with_energy_source ; outfit your bunker with an energy source for heat\n      :parameters (?bk - bunker ?p - player ?es - energy_source) \n      :precondition (and (at ?p ?bk) (find_good_bunker ?bk) (inventory ?es))\n      :effect (and (outfit_bunker_with_heat ?bk))\n   )\n(:action connect_through_social_media_with_family ; let other family members know you are safe\n      :parameters (?bk - bunker ?p - player ?f - player ?c - city) \n      :precondition (and (at ?p ?bk) (has_pc ?p) (enjoylife ?p ?bk) (not(at ?f ?bk)) (in ?p ?c) (not (in ?f ?c)) )\n      :effect (and (family_memebers_know_you_are_safe))\n   )\n   \n\n)\n(:action move_away ; flight from coastal area to inland area \n      :parameters (?p - player ?c1 - city ?c2 - city ?l1 - location) \n      :precondition (and (in ?p ?c1) (coastal ?c1) (inland ?c2) (listen_to_broadcast ?p ?l1))\n      :effect (and (in ?p ?c2) (not (in ?p ?c1)))\n   )\n(:action enjoylife ; after all preparation, enjoy life in a bunker\n      :parameters (?bk - bunker ?p - player ) \n      :precondition (and (at ?p ?bk) (outfit_bunker_with_heat ?bk))\n      :effect (and (enjoylife ?p ?bk))\n   )\n(:action check_weapons ; check enough supplies in the inventory\n      :parameters (?ps - pistol ?am - ammunition) \n      :precondition (and (inventory ?ps) (inventory ?am))\n      :effect (and (enough_weapons))\n   )\n(:action check_supplies ; check enough supplies in the inventory\n      :parameters (?fd - food ?wt - water ?md - medicine) \n      :precondition (and (inventory ?fd) (inventory ?wt) (inventory ?md))\n      :effect (and (enough_supplies))\n   )\n(:action check_bunker ; check if the bunker is good for sheiding\n      :parameters (?bk - bunker ?p - player) \n      :precondition (and (at ?p ?bk) (enough_supplies) (enough_weapons) (has_air_filtration_system ?bk) (has_strong_material ?bk))\n      :effect (and (find_good_bunker ?bk))\n   )\n(:action buy_weapons ; buy weapons and put it in the inventory (after buy_supplies)\n      :parameters (?wp - weapon ?p - player ?l1 - weapon_market) \n      :precondition (and (at ?p ?l1) (at ?wp ?l1) (enough_supplies))\n      :effect (and (inventory ?wp))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Connect a Wii to HD TV\n\nSteps:\n- plug_in_converter_tv npc tv\n- plug_into_converter_tv tv\n- plug_in_converter_tv wii_connected\n- plug_in_converter_tv tv\n\nDescriptions:\n- Plug in your HDMI cord to the cable.\n- Plug it into your TV's HDMI input.\n- Plug it into your wii's AV Composite Output instead of putting in the Composite cord that comes with the Wii.\n- Plug your HDMI cord (assuming you have one) into the converter and your TV.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make Cheese Sauce with Jalapeño Peppers",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is make_a_fire.\n- go west npc camp path\n- go west npc path cliff\n- go up npc cliff clifftop\n- go east npc clifftop bushwood\n- get stick npc bushwood\n- go east npc bushwood clifftop\n- go down npc clifftop cliff\n- go east npc cliff path\n- go east npc path camp\n- sharpen_stick npc stick\n- start_fire npc camp stick\n\nDescriptions:\n- Test the food you eat for poison. If you've never eaten the fruit that you find on the island, test it for poison by rubbing it on a sensitive part of your skin, like your wrist. Wait 45 minutes. If there is no adverse reaction, rub some of the food on your lips. If you form a rash, or there is burning or irritation, then the food is most likely poisonous. Never eat large amounts of any unknown food. Eat a small amount, wait an hour or two to see if you feel sick, then eat the rest of it.\n- Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island.\n\nPDDL Actions:\n(:action start_fire ; start a fire at a location\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (has_fire ?loc))\n  )\n(:action get_shellfish ; catch shellfish from a location that has fish.\n     :parameters (?p - player ?loc - location ?shellfish - shellfish)\n     :precondition (and (at ?p ?loc) (has_shellfish ?loc))\n     :effect (and (inventory ?p ?shellfish) (not (edible ?shellfish)))\n  )\n(:action go ; navigate to an adjacent location\n     :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location)\n     :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n     :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )\n(:action get_tarp ; get tarp for shelter construction\n     :parameters (?p - player ?loc - location ?tarp - tarp)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?tarp))\n  )\n(:action get_stick ; get a stick from bosk\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (at ?stick ?loc))\n     :effect (and (inventory ?p ?stick) (not (sharpened ?stick)))\n  )\n(:action get_leave ; get leaves for shelter construction\n     :parameters (?p - player ?loc - location ?leave - leave)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?leave))\n  )\n(:action sharpen_stick ; sharpen stick to hunt fish or bird or to use it to make a fire\n     :parameters (?p - player ?stick - stick)\n     :precondition (and (inventory ?p ?stick) (not (sharpened ?stick)))\n     :effect (and (inventory ?p ?stick) (sharpened ?stick))\n  )\n(:action get_water ; get water from a location that has a water source like a lake.\n     :parameters (?p - player ?loc - location ?water - water)\n     :precondition (and (at ?p ?loc) (has_water_source ?loc))\n     :effect (and (inventory ?p ?water) (not (treated ?water)))\n  )\n(:action get ; pick up an item and put it in the inventory\n     :parameters (?item - item ?p - player ?l1 - location)\n     :precondition (and (at ?p ?l1) (at ?item ?l1))\n     :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make Cheese Sauce with Jalapeño Peppers\n\nSteps:\n- cut velveeta cutting_board\n- set_burner_add_cheese velveeta\n- set_burner_add_cheese velveeta pot\n- add_peppers_and_olives peppers pot\n- serve_cheese_sauce stove_knob\n\nDescriptions:\n- First cut the Velveeta in to tiny squares and set aside.\n- Set the burner on a medium to low setting, before that you begin adding the cheese product.\n- Wait until the Velveeta has melted lower the heat somewhat and add in the (Rotel) tomatoes.\n- Add in the Jalapeno peppers, and black olives if desired.\n- Cheese sauce is at its best if served very warm.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Board a Small Boat",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is find_water.\n- go east npc shore forest_edge\n- go east npc forest_edge forest\n- go north npc forest river\n- get_water npc river water\n\nDescriptions:\n- Scavenge anything you can. Before you head to shore, it can be a good idea to gather up any supplies or materials near you. There may be useful items floating on the waters surface that will help you survive and await rescue. Try to look for anything you can use before heading to shore.\n\nPDDL Actions:\n(:action go ; navigate to an adjacent location \n        :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n        :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n        :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n    )\n(:action get_water ; get water from a location that has a water source like a lake.\n        :parameters (?p - player ?loc - location ?water - water) \n        :precondition (and (at ?p ?loc) (has_freshwater_source ?loc))\n        :effect (and (inventory ?p ?water) (not (treated ?water)))\n    )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Board a Small Boat\n\nSteps:\n- choose_boat passenger1 boat1\n- hold_rails passenger1 boat1\n- stabilize_boat passenger1 boat1\n- stabilize_boat passenger1 boat1\n- stabilize_boat passenger1 boat1\n\nDescriptions:\n- Prefer boarding across a solid platform if possible.\n- If you are crossing using a platform, hold on to the rails provided.\n- Avoid plonking one leg in the boat and leaving one on the jetty - this will cause wobbling and you might fall into the water.\n- Once in the boat, always remain in the centre line to move around it and lower yourself to a crouch level so that you reduce your centre of gravity and keep the craft as still as possible.\n- Keep the craft steady as others board.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make Slow Cooker Hot Cocoa",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is throw-hotdogs.\n- go east npc kitchen hallway\n- thaw_food items npc\n- lay_masking_tape masking_tape npc hallway\n- throw items npc hallway\n\nDescriptions:\n- Lay down masking tape in parallel strips across the floor as far apart as your projectile is long. The strips should be perpendicular to the direction you will be throwing. If your item is 15-45 cm (6-18 inches) long, lay down about 6-10 strips; lay down fewer if longer and more if shorter.\n- Select a food item to throw. There are a couple of qualifications. First, it must be long, thin, hard, and straight, like a frozen hot dog, for example. Second, it must be a reasonably stiff item. Third, it should be somewhere between 15 and 20 cm (6-8 inches) long; the experiment can be performed otherwise, but read on, and you will see why this size is optimal. There are lots of other items that fit these criteria including Otter Pops, celery, and churros. (If you simply can't come to grips with throwing perfectly good food, see the Tips section for some additional ideas.)\n\nPDDL Actions:\n(:action thaw_food ; thaw food items\n      :parameters (?object - items ?p - player)\n      :precondition (and (inventory ?p ?object) (is_food_item ?object) (frozen ?object))\n      :effect (not (frozen ?object))\n   )\n(:action record_tosses ; record tosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (tosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (tosses_recorded ?object)\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action record_crosses ; record crosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (crosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (crosses_recorded ?object)\n   )\n(:action lay_masking_tape ; lay masking tape\n      :parameters (?object - masking_tape ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?object) (has_ten_strips ?object))\n      :effect (and (not (has_ten_strips ?object)) (has_ten_strips ?l1))\n   )\n(:action throw ; throw food items\n      :parameters (?object - items ?p - player ?l1 - location) \n      :precondition (and \n      (at ?p ?l1)\n      (has_throwing_distance ?l1) \n      (is_clear ?l1) \n      (is_food_item ?object) \n      (is_long ?object) \n      (is_thin ?object) \n      (is_hard ?object) \n      (is_straight ?object) \n      (is_stiff ?object) \n      (has_ten_strips ?l1) \n      (not (frozen ?object))\n      )\n      :effect (thrown_food_items ?l1)\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make Slow Cooker Hot Cocoa\n\nSteps:\n- make_cocoa_mixture mixture\n- add_ingredients_to_slow_cooker mixture\n- heat_mixture mixture1 stove1 heat1\n- cook npc kitchen\n\nDescriptions:\n- Make the initial cocoa mixture.\n- Add all the ingredients in a slow cooker.\n- Allow the mixture to heat for 3 hours on a low setting.\n- Serve immediately or keep the slow cooker on a \"Keep Warm\" setting.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Grow Fairy Moss Indoors",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is eat_fish.\n- go east npc camp path\n- go east npc path riverside\n- go north npc riverside rainforest\n- get_wood npc wood rainforest\n- go south npc rainforest riverside\n- make_spear npc spear wood\n- make_drill npc wood drill\n- catch_fish npc spear fish riverside\n- make_fire npc drill riverside\n- cook_fish npc fish riverside\n- eat_fish npc fish\n\nDescriptions:\n- Build simple hole-in-the-ground traps to catch animals. Dig a hole in the ground and cover it with something like a large leaf. Put a piece of fruit in the middle as bait. When an animal comes to take the fruit, they will fall in the hole and you can kill it, skin it, and cook it to eat it.\n- Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.\n- The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.\n- Make a 4-pronged bamboo spear to fish with. Find a 6-ft (1.8 m) stalk of bamboo and cut 4- 6 in (15.24 cm) slits into 1 end of it with a knife or sharp rock. Weave a piece of vine into the slits to separate the tip of the bamboo into 4 prongs and sharpen them with a knife or a sharp rock.\n- If you don’t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.\n\nPDDL Actions:\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action eat_fish ; eat cooked fish \n      :parameters (?p - player ?fish - fish) \n      :precondition (and (inventory ?p ?fish) (cooked ?fish))\n      :effect (and (not (hungry ?p)))\n   )\n(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )\n(:action make_spear ; make a spear using wood to catch fish or defend against predators\n      :parameters (?p - player ?spear - spear ?wood - wood) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?spear)))\n      :effect (and (inventory ?p ?spear))\n   )\n(:action catch_fish ; catch a fish using spear\n      :parameters (?p - player ?spear - spear ?fish - fish ?loc - location) \n      :precondition (and (at ?p ?loc) (inventory ?p ?spear) (has_fish ?loc) (not (inventory ?p ?fish)))\n      :effect (and (inventory ?p ?fish))\n   )\n(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )\n(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )\n(:action cook_fish ; grill fish using fire\n      :parameters (?p - player ?fish - fish ?loc - location) \n      :precondition (and (inventory ?p ?fish) (at ?p ?loc) (has_fire ?loc) (not (cooked ?fish)))\n      :effect (and (cooked ?fish))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Grow Fairy Moss Indoors\n\nSteps:\n- ask-for-moss pond_center\n- find_container container1\n- fill-bowl water\n- add_fairy_moss fairy_materials pot\n- place-suitable-position sofa\n- prune fairy-moss\n\nDescriptions:\n- Ask for it at a nursery or garden center that specializes in pond plant varieties.\n- Find a suitable container.\n- Fill the bowl with water.\n- Add the fairy moss.\n- Place in a suitable position.\n- Prune.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Remove Black Skid Marks from Linoleum",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is get-papyrus.\n- get shell npc garage\n- go in npc garage work_station\n- flatten_sheet npc work_station sheet\n- polish_sheet npc work_station sheet shell\n- cut_sheet npc garage sheet scissors papyrus\n\nDescriptions:\n- Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours.\n- Polish the papyrus. This step isn't absolutely necessary, but it will make the papyrus look nicer and more finished. Use a shell or smooth piece of ivory. Any type of shell that is smooth and without ridges will do. Rub the shell or ivory over the sheet of paper until it appears to be shinier than it was.\n- Flatten the sheet. The paper may not be completely flat after you remove it from the wooden boards. Put the paper under a stone slab for up to 6 days to make it completely flat.\n\nPDDL Actions:\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action cut_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet ?scissors - scissors ?papyrus - papyrus) \n      :precondition (and (inventory ?p ?scissors) (smooth ?sheet))\n      :effect (inventory ?p ?papyrus)\n   )\n)\n(:action polish_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet ?shell - shell) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?sheet) (inventory ?p ?shell) (very_flat ?sheet))\n      :effect (and (not (inventory ?p ?shell)) (smooth ?sheet))\n   )\n(:action flatten_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?sheet) (flat ?sheet))\n      :effect (and (very_flat ?sheet) (not (smooth ?sheet)))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Remove Black Skid Marks from Linoleum\n\nSteps:\n- obtain_eraser you eraser\n- kneel_and_rub you eraser linoleum_floor\n- rub_with_rubber user1 user2 user3\n- wash_wicks wick1\n\nDescriptions:\n- Obtain a decent sized eraser that you can hold comfortable in your fingers.\n- Kneel down next to the linoleum and use the eraser to rub along the skid mark.\n- Continue rubbing until the black mark lifts.\n- Wash and dry as usual.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make a Simple Inside Windshield Cleaner",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is pick_car_lock.\n- go up npc living_room hallway\n- go east npc hallway bathroom\n- go east npc bathroom bedroom\n- get coathanger npc bedroom\n- go west npc bedroom bathroom\n- go west npc bathroom hallway\n- go down npc hallway living_room\n- go east npc living_room office\n- go east npc office kitchen\n- go down npc kitchen garage\n- go out npc garage car\n- straighten_coathanger npc\n- insert_hanger npc car\n- hook_latch npc car\n- pull_coathanger npc car\n\nDescriptions:\n- Unravel and straighten the coat hanger. You can leave the hooked top section alone, but unwind it from itself at the “neck” and straighten the rest of the hanger out, giving you a long metal tool with a hooked tip.\n- Lift the weather stripping from the bottom of the driver's-side window. Push the end of the hanger in through the soft rubber weather stripping and the bottom of the window. The hanger is now inside the wall of the door.\n- Hook and pull the latch. Hook the hanger around the latch and pull it towards the rear of the car. This should unlock any manually locked car door.\n\nPDDL Actions:\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action pull_coathanger ;  unlock the car\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (locked_car ?loc) (coathanger_inserted ?loc) (inventory ?p straightened_coathanger) (latch_hooked ?loc)) \n      :effect (not (locked_car ?loc))\n   )\n\n)\n(:action hook_latch ;    hook onto car latch  \n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (locked_car ?loc) (coathanger_inserted ?loc) (inventory ?p straightened_coathanger)) \n      :effect (and (latch_hooked ?loc))\n   )\n(:action straighten_coathanger ; straighten coathanger\n      :parameters (?p - player) \n      :precondition (and (inventory ?p coathanger)) \n      :effect (and (not (inventory ?p coathanger)) (inventory ?p straightened_coathanger)) \n   )\n(:action insert_hanger ;    insert hanger \n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (locked_car ?loc) (inventory ?p straightened_coathanger)) \n      :effect (and (coathanger_inserted ?loc))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make a Simple Inside Windshield Cleaner\n\nSteps:\n- purchase_eraser user1 eraser1 store_location\n- attach_eraser user1 eraser1 car_spot1\n- clean_inner_side_of_vehicle eraser windshield_clean\n- replace_wicks user1 wick1\n\nDescriptions:\n- Purchase a blackboard eraser.\n- Keep the blackboard eraser in the glove box or attach it to a spot on or near the car door for easy access.\n- Use the eraser to clean the inner side of the windshield.\n- Replace after use.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Paint Bare Wood",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is get-papyrus.\n- get shell npc garage\n- go in npc garage work_station\n- flatten_sheet npc work_station sheet\n- polish_sheet npc work_station sheet shell\n- cut_sheet npc garage sheet scissors papyrus\n\nDescriptions:\n- Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours.\n- Polish the papyrus. This step isn't absolutely necessary, but it will make the papyrus look nicer and more finished. Use a shell or smooth piece of ivory. Any type of shell that is smooth and without ridges will do. Rub the shell or ivory over the sheet of paper until it appears to be shinier than it was.\n- Flatten the sheet. The paper may not be completely flat after you remove it from the wooden boards. Put the paper under a stone slab for up to 6 days to make it completely flat.\n\nPDDL Actions:\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action cut_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet ?scissors - scissors ?papyrus - papyrus) \n      :precondition (and (inventory ?p ?scissors) (smooth ?sheet))\n      :effect (inventory ?p ?papyrus)\n   )\n)\n(:action polish_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet ?shell - shell) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?sheet) (inventory ?p ?shell) (very_flat ?sheet))\n      :effect (and (not (inventory ?p ?shell)) (smooth ?sheet))\n   )\n(:action flatten_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?sheet) (flat ?sheet))\n      :effect (and (very_flat ?sheet) (not (smooth ?sheet)))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Paint Bare Wood\n\nSteps:\n- acquire_oil_based_painting oil_floor roller_finished\n- move_painting_branch npc work_station wood\n- clean_room npc\n- be_amazed npc\n- finish-wreath wreath\n\nDescriptions:\n- Acquire oil based paints, which air dry slowly.\n- The under-coat should be thin, and smooth, move your paint brush down the wood, don't paint up or horizontally.\n- Paint the second coat, but be much more careful this time, make sure there are no paint bubbles appearing and smooth out any drips or pools left over from the under-coat.\n- Be the most precise with this.\n- Finished.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Create a Character in Lego Star Wars",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is assembling-disguises.\n- go west npc house bus_stop\n- go north npc bus_stop costume_store\n- get_costume npc costume_store costume\n\nDescriptions:\n- Find supplies for each disguise. Each of your disguises should have at least three parts, so make sure you have enough supplies for each of your characters to have a full costume!\n\nPDDL Actions:\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_costume ; get costume from a store.\n      :parameters (?p - player ?loc - location ?costume - costume) \n      :precondition (and (at ?p ?loc) (sells_costume ?loc))\n      :effect (and (inventory ?p ?costume))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Create a Character in Lego Star Wars\n\nSteps:\n- start_game game\n- select_character character\n- save_name_and_exit character\n- turn_on_free_game game\n\nDescriptions:\n- When you begin the game, you will start as Princess Leia and Captain Antilles in the Star Wars cantina.\n- Use the up and down arrows to select the part of the character (hat, head, shirt, arms, hands, weapon, belt, and legs) and the left and right arrows to select through a selection of the body part you are on.\n- Press \"triangle\" to name it, and \"O\" to save and exit.\n- Now enter a completed level and turn on free play.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Spool Knit a Winter Hat",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is boil_water.\n- get pot npc camp\n- go west npc camp path\n- go south npc path oaks\n- log_oak npc oaks pot oak_log\n- get flat_wood npc oaks\n- get oak_log npc oaks\n- go north npc oaks path\n- go north npc path grassland\n- go north npc grassland bush\n- break_branch npc bush branch_piece\n- get_branch npc bush branch\n- get branch_piece npc bush\n- go south npc bush grassland\n- get_water npc grassland water pot\n- get grass npc grassland\n- go south npc grassland path\n- go east npc path camp\n- cluster_grass npc grass grass_tinder\n- stack_log npc oak_log log_stack\n- build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure\n- ignite_wood npc camp flat_wood branch teepee_structure\n- ignite_teepee npc camp flat_wood teepee_structure\n- boil_water npc camp teepee_structure water\n\nDescriptions:\n- Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- Search for a source of fresh water.\n- Melt snow or ice if you can find some. If you find ice or snow on the ground in the woods, collect it so you can melt it down for fresh drinking water. You can place the ice or snow in a container and place it next to a fire to melt it or you can hold the container to use your body heat to melt it.\n- Use dry sticks, branches, or tree bark to serve as your kindling.\n- Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.\n- Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.\n- Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.\n\nPDDL Actions:\n(:action ignite_teepee ; ignite teepe with ignited wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (ignited ?wood))\n      :effect (and (ignited ?teepee))\n   )\n(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )\n(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )\n(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )\n(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )\n(:action boil_water ; boil water using a started fire pit\n      :parameters (?p - player ?loc - location ?teepee - teepee ?water - water)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (ignited ?teepee) (inventory ?p ?water))\n      :effect (and (boiled ?water))\n   )\n)\n(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )\n(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )\n(:action ignite_wood ; ignite wood by plough it to create heat via friction\n      :parameters (?p - player ?loc - location ?wood - wood ?branch - branch ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (inventory ?p ?branch))\n      :effect (and (ignited ?wood))\n   )\n(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )\n(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )\n(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )\n(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Spool Knit a Winter Hat\n\nSteps:\n- knit_web web\n- sliplargerbeads web\n- join_ends ends\n- wrap_with_tassel npc\n\nDescriptions:\n- Knit eighty-four inches of flat web.\n- Begin five inches from the end of the web, turn and sew into a rectangular form five inches wide and eight inches long.\n- Join the five-inch ends, and draw in the top with the needle and a piece of the material from which the cap was made.\n- After securing the top, twist and fold the piece of yarn remaining for a cord and fasten a number of strands of yarn through the loop for a tassel.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Get on a Bike",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is get_feet_out.\n- liedown npc\n- swim npc qs\n\nDescriptions:\n- Get on your back and \"swim.\" If you sink up to your hips or higher, bend backward. The more you spread out your weight, the harder it will be to sink. Float on your back while you slowly and carefully extricate your legs. Once your legs are free you can inch yourself to safety by using your arms to slowly and smoothly propel yourself backward with your arms in a sweeping motion, as if you were swimming. When you get near the edge of the quicksand, you can roll to hard ground.\n- Lay back. Sit down and lean back if your feet are stuck fast. Creating a larger \"footprint\" should free your feet by removing the pressure they create, allowing them to float. When you feel them start to come free, roll to your side away from the quicksand and free of its grip. You'll get dirty, but its the quickest and safest way to free yourself.\n\nPDDL Actions:\n(:action liedown ; player gets on their back\n      :parameters (?p - player)\n      :precondition (not (laying ?p))\n      :effect (laying ?p)\n   )\n(:action swim ; player starts to swim through the sand\n      :parameters (?p - player ?q - quicksand)\n      :precondition (and (laying ?p) (not (tired ?p)) (not (deep ?q)))\n      :effect (and (tired ?p) (not (stuck ?p ?q)))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Get on a Bike\n\nSteps:\n- swing-leg-over-bike bike\n- put_foot_on_pedal you pedals\n- hold_handbrakes bike\n- pedal-with-feet you\n- stop you bike\n\nDescriptions:\n- To get on the bike, swing your non-dominant leg over the shaft of the bike.\n- Put your dominant foot on the pedal.\n- Hold on to the handlebars for support and to keep the bike straight.\n- Keeping your weight center and even, pedal with your feet.\n- Stopping.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Change the Oil on a Yamaha Virago XV250",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is final.\n- go west npc home market\n- buy_supplies food npc market\n- buy_supplies medicine npc market\n- buy_supplies water npc market\n- check_supplies food water medicine\n- go west npc market weapon_market\n- buy_weapons ammunition npc weapon_market\n- buy_weapons pistol npc weapon_market\n- go east npc weapon_market market\n- buy_supplies heat npc market\n- go east npc market home\n- go north npc home bunker1\n- go north npc bunker1 bunker2\n- check_weapons pistol ammunition\n- check_bunker bunker2 npc\n- outfit_bunker_with_energy_source bunker2 npc heat\n- listen_to_astronomers_predictions npc bunker2\n- enjoylife bunker2 npc\n- connect_through_social_media_with_family bunker2 npc family philly\n- move_away npc philly salt_lake bunker2\n\nDescriptions:\n- Move away from coastal areas. Because the earth is made up of 71% water, there’s a greater likelihood that the comet will hit a body of water. If this does happen, it could mean that giant tsunamis would be created by the initial impact and they would likely destroy our coastal cities. Additionally, there would be an increase in water vapor entering our atmosphere which would cause heavy rain, which could cause landslides and flooding.\n- Purchase enough food, water, medicine, and other supplies. If the comet does hit on land, dust and rock particles flying into our atmosphere will make it too dangerous to go outside for months to years.\n- Don’t believe everything you hear. Early reporting is notoriously inaccurate at times, so wait it out until you hear unified reports.\n- Move into a bunker or fortified structure and outfit it with an energy source. An underground bunker isn’t only the best for the time of impact; it will also protect you from environmental hazards after the comet has hit. When the comet hits, dust, soot, and water will shoot up into our atmosphere, making it cold for months to years.\n- A semi-automatic rifle and a pistol with enough ammunition should be more than enough firepower.\n- Isolation has multiple negative effects on your mental health, so having people with you is a good idea if you want to stay mentally healthy.\n- Limit your generator usage and only use it if necessary. Your generator will be a lifesaver for many things while you are in your bunker. You can use it to produce heat, cook food, and power lights. However, because most generators run on fuel, it’s important that you limit its usage because you will likely have a limited amount of fuel in your bunker. If you aren't in a bunker, a generator may still work, but there's a good chance that the main power grid will be down.\n- Pay attention to astronomers’ predictions on any possible collisions with earth. NASA currently has astronomers that track comets that are flying in our solar system. As a result, there’s a very good chance they will know if there is a large object about to collide with us. By listening to their predictions, you can develop a real sense of how much time you have to prepare.\n- Buy weapons and ammunition for after the impact. You may be more concerned with withstanding the destruction of the comet impact itself, but you also need to be conscious of the possible dangers of other people after the dust settles.\n- Make sure to stock your hide-out with canned food, dried goods, non-perishable foods, and bottled water.\n\nPDDL Actions:\n(:action buy_supplies ; buy supplies and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - market) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?item))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action listen_to_astronomers_predictions ; listen to astronomers predictions on collision with earth\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (has_pc ?p))\n      :effect (and (listen_to_broadcast ?p ?l1))\n   )\n(:action outfit_bunker_with_energy_source ; outfit your bunker with an energy source for heat\n      :parameters (?bk - bunker ?p - player ?es - energy_source) \n      :precondition (and (at ?p ?bk) (find_good_bunker ?bk) (inventory ?es))\n      :effect (and (outfit_bunker_with_heat ?bk))\n   )\n(:action connect_through_social_media_with_family ; let other family members know you are safe\n      :parameters (?bk - bunker ?p - player ?f - player ?c - city) \n      :precondition (and (at ?p ?bk) (has_pc ?p) (enjoylife ?p ?bk) (not(at ?f ?bk)) (in ?p ?c) (not (in ?f ?c)) )\n      :effect (and (family_memebers_know_you_are_safe))\n   )\n   \n\n)\n(:action move_away ; flight from coastal area to inland area \n      :parameters (?p - player ?c1 - city ?c2 - city ?l1 - location) \n      :precondition (and (in ?p ?c1) (coastal ?c1) (inland ?c2) (listen_to_broadcast ?p ?l1))\n      :effect (and (in ?p ?c2) (not (in ?p ?c1)))\n   )\n(:action enjoylife ; after all preparation, enjoy life in a bunker\n      :parameters (?bk - bunker ?p - player ) \n      :precondition (and (at ?p ?bk) (outfit_bunker_with_heat ?bk))\n      :effect (and (enjoylife ?p ?bk))\n   )\n(:action check_weapons ; check enough supplies in the inventory\n      :parameters (?ps - pistol ?am - ammunition) \n      :precondition (and (inventory ?ps) (inventory ?am))\n      :effect (and (enough_weapons))\n   )\n(:action check_supplies ; check enough supplies in the inventory\n      :parameters (?fd - food ?wt - water ?md - medicine) \n      :precondition (and (inventory ?fd) (inventory ?wt) (inventory ?md))\n      :effect (and (enough_supplies))\n   )\n(:action check_bunker ; check if the bunker is good for sheiding\n      :parameters (?bk - bunker ?p - player) \n      :precondition (and (at ?p ?bk) (enough_supplies) (enough_weapons) (has_air_filtration_system ?bk) (has_strong_material ?bk))\n      :effect (and (find_good_bunker ?bk))\n   )\n(:action buy_weapons ; buy weapons and put it in the inventory (after buy_supplies)\n      :parameters (?wp - weapon ?p - player ?l1 - weapon_market) \n      :precondition (and (at ?p ?l1) (at ?wp ?l1) (enough_supplies))\n      :effect (and (inventory ?wp))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Change the Oil on a Yamaha Virago XV250\n\nSteps:\n- remove-bung oil_tank bung1 oil1\n- remove-oil-cap oil_cap1 bottle1 bike1 oil1\n- remove-oil-filter oil_filter1 bottle1\n- screw_bung bung1\n- fill-oil oil_bottle faucet\n- get_oil npc oil\n\nDescriptions:\n- Remove the bung to let the oil out to drain.\n- Remove the oil cap to let the oil drain fully and let air in to help drain the old oil out.\n- Remove the oil filter.\n- Screw the bung back on.\n- Fill the oil back up.\n- Recycle the old oil.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Open a Rusty Bolt",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is pick_hard_lock.\n- go east npc living_room office\n- go east npc office kitchen\n- go down npc kitchen garage\n- get file npc garage\n- get allen_key npc garage\n- go up npc garage kitchen\n- go west npc kitchen office\n- get paper_clip npc office\n- go west npc office living_room\n- go up npc living_room hallway\n- go east npc hallway bathroom\n- go east npc bathroom bedroom\n- file_key_into_wrench npc\n- insert_wrench npc bedroom\n- bend_paperclip_into_pick npc\n- insert_pick npc bedroom\n- push_pins_out_of_tumblers npc bedroom\n\nDescriptions:\n- Make your tools. For weak locks, a pair of paper clips should work; tougher locks might require bobby pins, wire clippers, and a pair of pliers. The key is to use metal firm enough for your pick and your tension wrench, the two components of the tool.\n- Insert the pick above the wrench. Use the leg of the pick to find and push each pin up and out of the tumbler. Once all pins have been moved, the lock should open. As previously noted, this skill takes a lot of practice to master, so have plenty of cheap practice locks on hand if you hope to get good at it.\n- The tension wrench is made in an “L” shape and is used to apply tension to the bottom of the lock. You can make this by getting an Allen key and filing it flat.\n\nPDDL Actions:\n(:action insert_pick ; insert pick\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_hard_lock ?loc) (inventory ?p pick) (wrench_in_lock ?loc)) \n      :effect (and (pick_in_lock ?loc))\n   )\n(:action file_key_into_wrench ; make wrench from allen key\n      :parameters (?p - player) \n      :precondition (and (inventory ?p allen_key) (inventory ?p file)) \n      :effect (and (not (inventory ?p allen_key)) (inventory ?p wrench)) \n   )\n(:action push_pins_out_of_tumblers ; pick lock with wrench and pick\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_hard_lock ?loc) (wrench_in_lock ?loc) (pick_in_lock ?loc))\n      :effect (not (has_hard_lock ?loc))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action insert_wrench ; insert wrench \n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_hard_lock ?loc) (inventory ?p wrench)) \n      :effect (and (wrench_in_lock ?loc))\n   )\n(:action bend_paperclip_into_pick  ; bend paperclip into pick \n      :parameters (?p - player) \n      :precondition (and (inventory ?p paper_clip)) \n      :effect (and (not (inventory ?p paper_clip)) (inventory ?p pick)) \n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Open a Rusty Bolt\n\nSteps:\n- obtain-fizzy-drink faucet\n- pour-fizzy-drink faucet1\n- wipe_clean towel1\n- dissolve_rust old_bolt1 fizzy_drink1\n- replace-bolt old_bolt1\n\nDescriptions:\n- Obtain some fizzy drink.\n- Pour the fizzy drink over the bolt.\n- Wipe it clean with kitchen towel.\n- The fizzy drink should have dissolved the rust build-up causing the bolt to stick.\n- Replace the rusty bolt.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Evolve Vulpix in Pokémon",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is make_a_fire.\n- go west npc camp path\n- go west npc path cliff\n- go up npc cliff clifftop\n- go east npc clifftop bushwood\n- get stick npc bushwood\n- go east npc bushwood clifftop\n- go down npc clifftop cliff\n- go east npc cliff path\n- go east npc path camp\n- sharpen_stick npc stick\n- start_fire npc camp stick\n\nDescriptions:\n- Test the food you eat for poison. If you've never eaten the fruit that you find on the island, test it for poison by rubbing it on a sensitive part of your skin, like your wrist. Wait 45 minutes. If there is no adverse reaction, rub some of the food on your lips. If you form a rash, or there is burning or irritation, then the food is most likely poisonous. Never eat large amounts of any unknown food. Eat a small amount, wait an hour or two to see if you feel sick, then eat the rest of it.\n- Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island.\n\nPDDL Actions:\n(:action start_fire ; start a fire at a location\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (has_fire ?loc))\n  )\n(:action get_shellfish ; catch shellfish from a location that has fish.\n     :parameters (?p - player ?loc - location ?shellfish - shellfish)\n     :precondition (and (at ?p ?loc) (has_shellfish ?loc))\n     :effect (and (inventory ?p ?shellfish) (not (edible ?shellfish)))\n  )\n(:action go ; navigate to an adjacent location\n     :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location)\n     :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n     :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )\n(:action get_tarp ; get tarp for shelter construction\n     :parameters (?p - player ?loc - location ?tarp - tarp)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?tarp))\n  )\n(:action get_stick ; get a stick from bosk\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (at ?stick ?loc))\n     :effect (and (inventory ?p ?stick) (not (sharpened ?stick)))\n  )\n(:action get_leave ; get leaves for shelter construction\n     :parameters (?p - player ?loc - location ?leave - leave)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?leave))\n  )\n(:action sharpen_stick ; sharpen stick to hunt fish or bird or to use it to make a fire\n     :parameters (?p - player ?stick - stick)\n     :precondition (and (inventory ?p ?stick) (not (sharpened ?stick)))\n     :effect (and (inventory ?p ?stick) (sharpened ?stick))\n  )\n(:action get_water ; get water from a location that has a water source like a lake.\n     :parameters (?p - player ?loc - location ?water - water)\n     :precondition (and (at ?p ?loc) (has_water_source ?loc))\n     :effect (and (inventory ?p ?water) (not (treated ?water)))\n  )\n(:action get ; pick up an item and put it in the inventory\n     :parameters (?item - item ?p - player ?l1 - location)\n     :precondition (and (at ?p ?l1) (at ?item ?l1))\n     :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Evolve Vulpix in Pokémon\n\nSteps:\n- catch_or_trade vulpix\n- evolve Alolan Vulpix))\n- select_bag bag\n- wait_for_evolution vulpix\n\nDescriptions:\n- ######Catch or trade for a Vulpix.\n- ######Find a fire stone (or Ice Stone in Sun/Moon to evolve Alolan Vulpix).\n- Go to your bag and select the stone required.\n- ######Wait for the evolution animation to pop up.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Get Under the Stage in Dragonball Z Budokai Tenkaichi 2",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is 3-decorate.\n- go south npc bedroom closet\n- get lantern npc closet\n- get balloon npc closet\n- go north npc closet bedroom\n- go west npc bedroom livingroom\n- turn_on_tv npc livingroom\n- hang_lantern npc\n- blow_balloon npc\n\nDescriptions:\n- Put out anime balloons. Draw anime faces on balloons. Alternately, you can call local party supply stores to see if they have any relevant balloons. A third option is to purchase anime balloons online. You can have the balloons filled with helium, or blow them up yourself and place them around.\n- Hang paper lanterns. Buy paper lanterns, in the color of your party theme, at a party supply store or online. You can also make paper lanterns using tissue paper and bendable metal wire.\n- Ideas for main dishes include teriyaki meat or salmon, and stir fry with chicken or beef, noodles, vegetables, and toasted sesame seed sauce.\n\nPDDL Actions:\n(:action hang_lantern\n    :parameters (?p - player)\n    :precondition (and (inventory ?p lantern))\n    :effect (and (hung lantern) (not (inventory ?p lantern)))\n  )\n(:action turn_on_tv\n    :parameters (?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at tv ?l))\n    :effect (on tv)\n  )\n)\n(:action blow_balloon\n    :parameters (?p - player)\n    :precondition (and (inventory ?p balloon))\n    :effect (and (inflated balloon) (not (inventory ?p balloon)))\n  )\n(:action get\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at ?obj ?l))\n    :effect (and (inventory ?p ?obj) (not (at ?obj ?l)))\n  )\n(:action get_beer\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_fridge ?l) (at ?p ?l))\n    :effect (and (inventory ?p beer) (opened beer))\n  )\n(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Get Under the Stage in Dragonball Z Budokai Tenkaichi 2\n\nSteps:\n- choose_vs_duel duel\n- choose_goku player1\n- choose_stage stage1\n- move_to_wall player1 player2 player3\n\nDescriptions:\n- Choose VS Duel, 2 players.\n- Choose Goku as player one, as well as player two.\n- Choose Mountain Road as the stage.\n- Move to opposite ends of the street so that you are both against the Wall that keeps you in the stage.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Grow a Rose Bush from Rose Bush Cuttings",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is throw-hotdogs.\n- go east npc kitchen hallway\n- thaw_food items npc\n- lay_masking_tape masking_tape npc hallway\n- throw items npc hallway\n\nDescriptions:\n- Lay down masking tape in parallel strips across the floor as far apart as your projectile is long. The strips should be perpendicular to the direction you will be throwing. If your item is 15-45 cm (6-18 inches) long, lay down about 6-10 strips; lay down fewer if longer and more if shorter.\n- Select a food item to throw. There are a couple of qualifications. First, it must be long, thin, hard, and straight, like a frozen hot dog, for example. Second, it must be a reasonably stiff item. Third, it should be somewhere between 15 and 20 cm (6-8 inches) long; the experiment can be performed otherwise, but read on, and you will see why this size is optimal. There are lots of other items that fit these criteria including Otter Pops, celery, and churros. (If you simply can't come to grips with throwing perfectly good food, see the Tips section for some additional ideas.)\n\nPDDL Actions:\n(:action thaw_food ; thaw food items\n      :parameters (?object - items ?p - player)\n      :precondition (and (inventory ?p ?object) (is_food_item ?object) (frozen ?object))\n      :effect (not (frozen ?object))\n   )\n(:action record_tosses ; record tosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (tosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (tosses_recorded ?object)\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action record_crosses ; record crosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (crosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (crosses_recorded ?object)\n   )\n(:action lay_masking_tape ; lay masking tape\n      :parameters (?object - masking_tape ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?object) (has_ten_strips ?object))\n      :effect (and (not (has_ten_strips ?object)) (has_ten_strips ?l1))\n   )\n(:action throw ; throw food items\n      :parameters (?object - items ?p - player ?l1 - location) \n      :precondition (and \n      (at ?p ?l1)\n      (has_throwing_distance ?l1) \n      (is_clear ?l1) \n      (is_food_item ?object) \n      (is_long ?object) \n      (is_thin ?object) \n      (is_hard ?object) \n      (is_straight ?object) \n      (is_stiff ?object) \n      (has_ten_strips ?l1) \n      (not (frozen ?object))\n      )\n      :effect (thrown_food_items ?l1)\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Grow a Rose Bush from Rose Bush Cuttings\n\nSteps:\n- prepare_area clipping\n- take_cutting clipping\n- dip_in_hormide npc\n- plant_cutting clipping\n\nDescriptions:\n- Prepare the pot or area in your yard where you plan to plant your clipping.\n- Take a cutting from the rose bush you would like to grow your new bush from.\n- Moisten the part of the clipping that you just scraped and dip it into rooting hormone.\n- Immediately plant the cutting.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make a Fairy House in the Woods",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is boil_water.\n- get pot npc camp\n- go west npc camp path\n- go south npc path oaks\n- log_oak npc oaks pot oak_log\n- get flat_wood npc oaks\n- get oak_log npc oaks\n- go north npc oaks path\n- go north npc path grassland\n- go north npc grassland bush\n- break_branch npc bush branch_piece\n- get_branch npc bush branch\n- get branch_piece npc bush\n- go south npc bush grassland\n- get_water npc grassland water pot\n- get grass npc grassland\n- go south npc grassland path\n- go east npc path camp\n- cluster_grass npc grass grass_tinder\n- stack_log npc oak_log log_stack\n- build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure\n- ignite_wood npc camp flat_wood branch teepee_structure\n- ignite_teepee npc camp flat_wood teepee_structure\n- boil_water npc camp teepee_structure water\n\nDescriptions:\n- Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- Search for a source of fresh water.\n- Melt snow or ice if you can find some. If you find ice or snow on the ground in the woods, collect it so you can melt it down for fresh drinking water. You can place the ice or snow in a container and place it next to a fire to melt it or you can hold the container to use your body heat to melt it.\n- Use dry sticks, branches, or tree bark to serve as your kindling.\n- Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.\n- Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.\n- Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.\n\nPDDL Actions:\n(:action ignite_teepee ; ignite teepe with ignited wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (ignited ?wood))\n      :effect (and (ignited ?teepee))\n   )\n(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )\n(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )\n(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )\n(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )\n(:action boil_water ; boil water using a started fire pit\n      :parameters (?p - player ?loc - location ?teepee - teepee ?water - water)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (ignited ?teepee) (inventory ?p ?water))\n      :effect (and (boiled ?water))\n   )\n)\n(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )\n(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )\n(:action ignite_wood ; ignite wood by plough it to create heat via friction\n      :parameters (?p - player ?loc - location ?wood - wood ?branch - branch ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (inventory ?p ?branch))\n      :effect (and (ignited ?wood))\n   )\n(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )\n(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )\n(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )\n(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make a Fairy House in the Woods\n\nSteps:\n- find_area area1 garden_center\n- collect_sticks stick1\n- create_formation stick1\n- build_walls npc basement\n- use_as_leaves npc path\n- create_decorations fairy_moss\n\nDescriptions:\n- Find a small area with slightly damp dirt.\n- Collect many twigs and sticks.\n- Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n- Build your exterior walls.\n- You can use either a leaf or a wide strip of bark.\n- Decorate.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make a Pinwheel Wreath",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is make_papyrus.\n- cut_stalks npc knife papyrus_plant papyrus_stalks\n- cut_strips npc papyrus_strips papyrus_stalks knife\n- soak_strips npc water papyrus_strips\n- roll_strips npc rolling_pin papyrus_strips\n- weave_strips npc papyrus_strips\n- bundle_strips npc papyrus_strips wooden_boards linen_sheets\n- cut_sheet npc papyrus_strips knife papyrus\n\nDescriptions:\n- Cut the stalks. About 12 inches (30 cm) of papyrus plant will make a large piece of paper that will be nearly 24 inches (61 cm) in length. Cut off as many stalks as you will need to make the amount of paper you want. The cuts must be diagonally made. Then, cut the tips of the papyrus. You will not use the tips, which are the thinner, grass-like end of the plant.\n- Weave the strips together. Lay the strips on the cloth. Get a dry sheet of linen cloth or felt. Then, begin to weave them together. You want to create 2 layers of strips, with the top layer strips being perpendicular to the bottom layer strips. It should resemble a placemat. The strips should slightly overlap one another to prevent the papyrus from falling apart later.\n- Roll the excess water and sugar out of the plant. Grab a rolling pin and use it to roll the strips flat. The rolling pin should be squeezing the water out of them and flattening the strips into sheets.\n- Cut the paper. The sheet may be larger than you want when it is finished. Use a razor, scissors, or paper cutter to cut the papyrus into smaller sheets. Measure the sizes you are cutting so you will have multiple sheets of the same size.\n- Cut up the inner portion into strips. Use the knife you used to cut off the outer portion to cut the inner layers of the papyrus plant (pith) into thin strips. Hold the plant in your hand and cut towards you vertically. Make sure that all of the strips have the same size and thickness.\n- Place the bundle between 2 wooden boards. Make sure that the wooden boards are somewhat heavy. The pressure is necessary to flatten the papyrus strips together. Once the strips have been placed between the boards, press them together. Lay the sandwiched papyrus sheet on a flat surface and allow the wooden boards to flatten the sheet using gravity.\n\nPDDL Actions:\n(:action roll_strips; roll the excess water and sugar out of the strips to dry them\n    :parameters (?p - player ?rolling_pin - rolling_pin ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?rolling_pin) (inventory ?p ?papyrus_strips) (soaked ?papyrus_strips))\n    :effect (dried ?papyrus_strips)\n  )\n(:action soak_strips; place papyrus strips in water and let them soak\n    :parameters (?p - player ?water - water ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?water) (inventory ?p ?papyrus_strips))\n    :effect (soaked ?papyrus_strips)\n  )\n(:action weave_strips; weave the dried papyrus strips into a lattice\n    :parameters (?p - player ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?papyrus_strips) (dried ?papyrus_strips))\n    :effect (woven ?papyrus_strips)\n  )\n(:action bundle_strips; bundle the woven strips between linen sheets and wooden boards\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?wooden_boards - wooden_boards ?linen_sheets - linen_sheets)\n    :precondition (and (inventory ?p ?papyrus_strips) (woven ?papyrus_strips) (inventory ?p ?wooden_boards) (inventory ?p ?linen_sheets))\n    :effect (finished ?papyrus_strips)\n  )\n(:action cut_sheet; the finished sheet is cut to size to complete the papyrus\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?knife - knife ?papyrus - papyrus)\n    :precondition (and (inventory ?p ?papyrus_strips) (finished ?papyrus_strips) (inventory ?p ?knife))\n    :effect (and (inventory ?p ?papyrus) (not (inventory ?p ?papyrus_strips)))\n  )\n)\n(:action cut_stalks; cut papyrus plant into stalks\n    :parameters (?p - player ?knife - knife ?papyrus_plant - papyrus_plant ?papyrus_stalks - papyrus_stalks)\n    :precondition (and (inventory ?p ?knife) (inventory ?p ?papyrus_plant))\n    :effect (and (inventory ?p ?papyrus_stalks) (not (inventory ?p ?papyrus_plant)))\n  )\n(:action cut_strips; cut papyrus stalks into strips\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?papyrus_stalks - papyrus_stalks ?knife - knife)\n    :precondition (and (inventory ?p ?knife) (inventory ?p ?papyrus_stalks))\n    :effect (and (inventory ?p ?papyrus_strips) (not (inventory ?p ?papyrus_stalks)))\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make a Pinwheel Wreath\n\nSteps:\n- select-papyrus p1\n- create_wreath p1\n- find_wreath_base w1\n- create_wreath_base w1\n- finish-wreath wreath\n\nDescriptions:\n- Select suitable paper to make the pinwheels.\n- Make enough pinwheels to create a wreath.\n- Find a suitable base, such as a Styrofoam/cane/cardboard wreath base.\n- If the wreath base lacks a hanger, add some twine or ribbon to create one.\n- Finished.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Be a Spy With Friends",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is ready_sc.\n- gather_info npc ss\n- create_secret npc ss\n- create_name npc ss\n- set_meeting_location npc ss\n- set_dress_code npc ss\n- secret_society_is_ready npc ss\n\nDescriptions:\n- Create a secret or a secret mission. A secret society must have something to protect.\n- An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.\n- Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were.\n- Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.\n- Think of a name. You and your closest friend should discuss what your secret society should be called.\n\nPDDL Actions:\n(:action create_name ; create name for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_name ?sc)))\n      :effect (and (has_name ?sc))\n   )\n(:action create_secret ; create secret for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_secret ?sc)))\n      :effect (and (has_secret ?sc) (knows_secret ?p ?sc))\n   )\n(:action set_meeting_location ; determine a regular secret meeting location for the society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_location ?sc)))\n      :effect (and (has_location ?sc))\n   )\n(:action secret_society_is_ready ; check that all prequisites of the secret society are complete\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (not (society_is_ready ?sc)) (has_name ?sc) (has_dress_code ?sc) (has_location ?sc) (has_info ?p) (has_secret ?sc))\n      :effect (and (society_is_ready ?sc))\n   )\n(:action set_dress_code ; determines the dress code for the secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_dress_code ?sc)))\n      :effect (and (has_dress_code ?sc))\n   )\n(:action gather_info ; read books to gather information on how to create a secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (has_info ?p)))\n      :effect (and (has_info ?p))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Be a Spy With Friends\n\nSteps:\n- set_spy_group co_conspirator1 co\n- talk_in_private npc\n- gather_gear you camera, gather_equipment you binoculars\n- find_victim victim1\n\nDescriptions:\n- Set-up your spy group You will need a trustworthy 2-5 person group.\n- It's good to have a place to keep your gear when not in use, hold meetings, and just talk in private without worrying about the nosiness of certain people in public places.\n- Get some gear To be a good spy, you and your friends must have gear that will help with missions.\n- Find your first \"victim\" The victim is the person you will be watching and spying on.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Polish a Faucet With a Lemon",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is drink_water.\n- get container npc camp\n- go east npc camp path\n- go east npc path riverside\n- collect_water npc container water riverside\n- go north npc riverside rainforest\n- get_wood npc wood rainforest\n- make_drill npc wood drill\n- make_fire npc drill rainforest\n- filter_water npc water\n- boil_water npc water rainforest\n- drink_water npc water\n\nDescriptions:\n- Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.\n- The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.\n- If you don’t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.\n- Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container.\n\nPDDL Actions:\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action collect_water ; use container to collect water from a location that has water\n      :parameters (?p - player ?container - container ?water - water ?loc - location) \n      :precondition (and (at ?p ?loc) (has_water ?loc) (inventory ?p ?container) (not (inventory ?p ?water)))\n      :effect (and (inventory ?p ?water) (not (filtered ?water)) (not (boiled ?water)))\n   )\n(:action boil_water ; boil water to kill any bacteria\n      :parameters (?p - player ?water - water ?loc - location) \n      :precondition (and (inventory ?p ?water) (at ?p ?loc) (filtered ?water) (not (boiled ?water)) (has_fire ?loc))\n      :effect (and (boiled ?water))\n   )\n(:action get_foliage ; get foliage from a location that has trees\n      :parameters (?p - player ?foliage - foliage ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?foliage)))\n      :effect (and (inventory ?p ?foliage))\n   )\n(:action filter_water ; filter water to remove any particles\n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (not (filtered ?water)))\n      :effect (and (filtered ?water))\n   )\n(:action drink_water ; drink boiled water \n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (boiled ?water))\n      :effect (and (not (thirsty ?p)))\n   )\n(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )\n(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )\n(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Polish a Faucet With a Lemon\n\nSteps:\n- cut_lemon npc\n- squeeze-lemon water\n- rub_lemon_half faucet1\n- wash_tap_with_lemon_half water faucet\n\nDescriptions:\n- ######Cut a lemon in half.\n- ######Squeeze out the juice.\n- ######Take the squeezed out lemon half and rub vigorously over the faucets.\n- ######Wash the tap after scouring with the lemon half.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make a Wreath with Clothes Hangers",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is build_teepee.\n- go west npc camp path\n- go north npc path grassland\n- go north npc grassland bush\n- break_branch npc bush branch_piece\n- get branch_piece npc bush\n- go south npc bush grassland\n- get grass npc grassland\n- go south npc grassland path\n- go south npc path oaks\n- log_oak npc oaks grass oak_log\n- get oak_log npc oaks\n- go north npc oaks path\n- go east npc path camp\n- cluster_grass npc grass grass_tinder\n- stack_log npc oak_log log_stack\n- build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure\n\nDescriptions:\n- Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.\n- Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.\n- Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.\n- Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.\n\nPDDL Actions:\n(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )\n(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )\n(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )\n(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )\n(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )\n(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )\n(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )\n(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )\n(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )\n(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make a Wreath with Clothes Hangers\n\nSteps:\n- unwist-hanger hanger1 pliers1\n- gather_squares velveeta\n- push_squares_away npc\n- slide-squares hanger-1\n- finish-wreath wreath\n\nDescriptions:\n- Untwist wire hanger and shape into a circle, using pliers as needed.\n- Gently crumple 3\" squares of wax paper or crepe paper and thread hanger through center of each square.\n- When you have threaded enough squares to fill length of hanger, gently push squares away from ends and use pliers to twist ends together.\n- Gently slide squares of paper back toward the joined ends of wire hanger, scrunching paper more for additional fullness.\n- Finished.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Grow Dwarf Balsam Fir",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is build_shelter.\n- go west npc camp path\n- go west npc path cliff\n- go up npc cliff waterfall\n- go east npc waterfall mountain\n- get branch npc mountain\n- go east npc mountain west_plain\n- insert_beam branch tree npc west_plain beam\n- go east npc west_plain east_plain\n- get branches npc east_plain\n- get leaves npc east_plain\n- get twigs npc east_plain\n- go west npc east_plain west_plain\n- lean_branches branches npc west_plain beam frame\n- clear_spider leaves npc\n- layer twigs leaves npc west_plain frame shelter\n\nDescriptions:\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- In the event that you have no containers and no way to purify water, you can dig a deep hole, let it fill with groundwater, and wait for the particles to settle at the bottom and the water is clear before you drink it. You should only do this if you have no other option.\n- Place the other end of the branch into the split of the other tree. Form a horizontal frame with the main branch by inserting the other end in the split of a nearby tree. Make sure the branch is firmly held in place by shaking it a little.\n- Insert 1 end of the branch into the split of 1 of the trees. Where the tree splits and forms a “V” shape, place 1 end of the branch to hold it up as a support beam. If the tree doesn't have a split, use a log that ends in a “V” shape and lean it against a tree so the branch is supported by the tree.\n\nPDDL Actions:\n(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )\n(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )\n(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )\n(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)\n(:action drop ; drop down an item and remove it from the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?item) (not (at ?item ?l1)))\n      :effect (and (not (inventory ?p ?item)) (at ?item ?l1))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action lean_branches ; Lean branches against the main branch to form the structure of your shelter.\n      :parameters (?branches - branches ?p - player ?l1 - location ?beam - beam ?frame - frame) \n      :precondition (and (at ?p ?l1) (inventory ?p ?branches) (at ?beam ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?branches)) (at ?frame ?l1))\n   )\n(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )\n(:action clear_spider ; clear off any critters or spiders that may be on the branch or leaves\n      :parameters (?item - item ?p - player) \n      :precondition (and (inventory ?p ?item) (has_bug ?item))\n      :effect (and (not (has_bug ?item)) (inventory ?p ?item))\n   )\n(:action insert_beam ; insert end(s) of the branch into the split(s) of the tree(s)\n      :parameters (?b - branch ?t - tree ?p - player ?l1 - location ?beam - beam) \n      :precondition (and (at ?p ?l1) (dry ?l1) (flat ?l1) (at ?t ?l1) (has_split_in_trunk ?t) (inventory ?p ?b) (not (has_bug ?b)) (long ?b) (thick ?b) )\n      :effect (and (at ?p ?l1) (not (inventory ?p ?b)) (at ?beam ?l1))\n   )\n(:action layer ; Lay twigs and leaves\n      :parameters (?twigs - twigs ?leaves - leaves ?p - player ?l1 - location ?frame - frame ?shelter - shelter) \n      :precondition (and (at ?p ?l1) (inventory ?p ?twigs) (inventory ?p ?leaves) (not (has_bug ?leaves)) (at ?frame ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?twigs)) (not (inventory ?p ?leaves)) (at ?shelter ?l1))\n   )\n(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Grow Dwarf Balsam Fir\n\nSteps:\n- choose_plant fir1 nursery\n- select_container container1 garden_center\n- choose_soil soil1 garden_center\n- plant_fir fir1 container1\n- establish_plant fir1 container1\n- re_pot fir1 container1\n\nDescriptions:\n- Choose the plant from a nursery or garden center.\n- This plant spreads and flattens as it grows, so select a broad sized container, preferably with a rounded shape.\n- Choose the potting soil.\n- Plant the fir in the container.\n- Keep this up until the tree is well established.\n- Re-pot occasionally.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Fold Bath Towels for Quick Hanging at Home",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is collect-water.\n- go up npc basement kitchen\n- get bottles kitchen npc\n- go up npc kitchen bedroom\n- go in npc bedroom bathroom\n- drop bottles bathroom npc\n- fill bottles bathroom npc\n- put_in_stopper bathtub bathroom npc\n- get purification_tablets bathroom npc\n- purify bottles bathroom npc\n- fill bathtub bathroom npc\n\nDescriptions:\n- Shelter in place and wait for the initial chaos to subside. If all of the electronics suddenly stop working, the immediate loss of electricity will cause a lot of sudden confusion and chaos. If you aren’t home, wait 30-45 minutes for all of the abrupt danger to pass. Then, go home if you’re within a few miles or kilometers. If you’re already home, stay there and do not go outside.\n- Eat anything in your fridge first to minimize food shortages. For the first 1-2 days, eat whatever is in your fridge and hasn’t gone bad immediately. Save the dry stuff for later when you may really need it. The odds are low society will completely collapse and you’ll go without help for super long, but it’s still better to go through everything that’s going to go bad anyway.\n\nPDDL Actions:\n(:action drop\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (inventory ?p ?it) (at ?p ?l))\n      :effect (and (not (inventory ?p ?it)) (at ?it ?l))\n   )\n(:action fill\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (can_be_filled ?it) (at ?p ?l) (at ?it ?l))\n      :effect (full ?it)\n   )\n(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action purify\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l) (full ?it) (inventory ?p purification_tablets) (not (sealed ?it)))\n      :effect (and (purified ?it) (not (inventory ?p purification_tablets)))\n   )\n(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )\n(:action put_in_stopper\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (has_stopper ?it) (not (full ?it)) (at ?it ?l) (at ?p ?l))\n      :effect (can_be_filled ?it)\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Fold Bath Towels for Quick Hanging at Home\n\nSteps:\n- fold-twice towel1\n- fold-half-twice towel1\n- store-item towel1\n- hang-on-rack towel1\n\nDescriptions:\n- Fold the towel in thirds lengthwise.\n- Fold in half, and then in half again.\n- Store the towel in the linen closet.\n- To go from the closet for hanging, simply unfold the final fold and hang on the towel rack.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make Seasoned Salt",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is stay_sheltered_with_food.\n- make_plan npc home\n- walk north npc home garage\n- get car npc garage\n- get_in_car npc garage car\n- drive east npc garage highway\n- drive down npc highway mall\n- drive east npc mall homedepot\n- get concrete npc homedepot\n- walk west npc homedepot mall\n- drive north npc mall wholefoods\n- get_food canned_food npc wholefoods\n- walk south npc wholefoods mall\n- drive up npc mall highway\n- drive west npc highway garage\n- drive south npc garage home\n- drive in npc home basement\n- reinforce npc basement concrete\n- stay_in_shelter npc basement canned_food\n\nDescriptions:\n- Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food — you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival.\n- Stock up on non-perishable food. Non-perishables can last several years, whether it's in storage or in sustaining you after an attack. Choose items that contain a lot of carbohydrates, so you get more caloric bang for your buck, and store them in a cool, dry place.\n\nPDDL Actions:\n(:action reinforce\n      :parameters (?p - player ?l1 - location ?obj - item) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj) (is_construction_material ?obj))\n      :effect (and (reinforced ?l1) )\n  )\n(:action walk\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_food\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (is_supermarket ?l1) (is_nonperishable ?obj) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n   )\n(:action make_plan\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_home ?l1))\n      :effect (and (has_plan ?p))\n   )\n(:action get_medicine\n      :parameters (?obj -item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_pharmacy ?l1) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n  )\n(:action get\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (not (is_supermarket ?l1)))\n      :effect (and (inventory ?p ?obj))\n   )\n(:action drive\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (driving ?p) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_in_car\n      :parameters (?p - player ?l1 - location ?obj - item)\n      :precondition (and (at ?p ?l1) (inventory ?p ?obj) (is_car ?obj))\n      :effect (and (driving ?p) (inventory ?p ?obj))\n  )\n\n)\n(:action stay_in_shelter\n      :parameters (?p - player ?l1 - location ?obj1 - item ) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj1) (is_nonperishable ?obj1) (reinforced ?l1) (is_underground ?l1))\n      :effect (and (sheltered ?p) )\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make Seasoned Salt\n\nSteps:\n- mix_ingredients mixture\n- pour-into-container container1\n- dip_sand npc\n- grind-ingredients alice mortar_and_pestle\n- gotolocation agent container\n\nDescriptions:\n- Mix the ingredients together thoroughly.\n- Pour into an air-tight container with a lid.\n- It goes well in dips, salad dressings, soups and on sandwiches.\n- Grind the ingredients together in a mortar and pestle.\n- Transfer to a storage container as needed.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make a Pancake Mix Container from a Recycled Ketchup Bottle",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is 1-cook-food.\n- go west npc bedroom livingroom\n- go west npc livingroom kitchen\n- cook npc kitchen clams\n- cook npc kitchen soup\n- cook npc kitchen stirfry\n- cook npc kitchen sushi\n- cook npc kitchen teriyaki\n- go east npc kitchen livingroom\n- drop teriyaki npc livingroom\n- drop stirfry npc livingroom\n- drop soup npc livingroom\n- drop sushi npc livingroom\n- drop clams npc livingroom\n\nDescriptions:\n- Serve beverages. There are various Japanese-themed drinks you can serve at your party. If it’s a kid’s party, you’ll of course want to stick to non-alcoholic options. If it’s an adult party, you may want to include both alcoholic and non-alcoholic beverage choices.\n\nPDDL Actions:\n(:action cook\n    :parameters (?p - player ?l - location ?f - food)\n    :precondition (and (has_kitchen ?l) (at ?p ?l))\n    :effect (inventory ?p ?f)\n  )\n(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )\n(:action drop\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (inventory ?p ?obj))\n    :effect (and (at ?obj ?l) (not (inventory ?p ?obj)))\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make a Pancake Mix Container from a Recycled Ketchup Bottle\n\nSteps:\n- scrub_ketchup_bottle ketchup bottle1\n- place_funnel user1 funnel1 bottle1\n- pour_into_fridge ketchup_bottle\n- replace_lid_and_label user1 ketchup_bottle1\n- place_in_fridge bottle1 refrigerator1\n- finish-wreath wreath\n\nDescriptions:\n- Scrub the ketchup bottle thoroughly.\n- Place the funnel over the mouth of the bottle.\n- Pour pancake batter through the funnel into the empty ketchup bottle.\n- Replace the lid and label the bottle.\n- Place the bottle in refrigerator.\n- Finished.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make a Banana Strawberry Rum Smoothie",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is 2-serve-drinks.\n- get_beer npc bedroom\n- get phone npc bedroom\n- go west npc bedroom livingroom\n- go west npc livingroom kitchen\n- go north npc kitchen cupboard\n- get teabag npc cupboard\n- get soda npc cupboard\n- go south npc cupboard kitchen\n- brew npc kitchen\n- get soymilk npc kitchen\n- go east npc kitchen livingroom\n- buy_sake npc\n- serve npc tea livingroom\n- drop soymilk npc livingroom\n- drop soda npc livingroom\n- drop sake npc livingroom\n- serve npc beer livingroom\n\nDescriptions:\n- Serve beverages. There are various Japanese-themed drinks you can serve at your party. If it’s a kid’s party, you’ll of course want to stick to non-alcoholic options. If it’s an adult party, you may want to include both alcoholic and non-alcoholic beverage choices.\n- Cut Rice Krispie treats into circles. Attach chewy fruit snacks and Swedish fish to them with Laffy Taffy. Wrap a Fruit Roll-Up around each circle.\n\nPDDL Actions:\n(:action buy_sake\n    :parameters (?p - player)\n    :precondition (and (inventory ?p phone) (inventory ?p money))\n    :effect (and (inventory ?p sake) (not (inventory ?p money)))\n  )\n(:action get\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at ?obj ?l))\n    :effect (and (inventory ?p ?obj) (not (at ?obj ?l)))\n  )\n(:action get_beer\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_fridge ?l) (at ?p ?l))\n    :effect (and (inventory ?p beer) (opened beer))\n  )\n(:action brew\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_kitchen ?l) (at ?p ?l) (inventory ?p teabag))\n    :effect (and (inventory ?p tea) (not (inventory ?p teabag)) (opened tea))\n  )\n(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )\n(:action drop\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (inventory ?p ?obj))\n    :effect (and (at ?obj ?l) (not (inventory ?p ?obj)))\n  )\n(:action serve\n    :parameters (?p - player ?d - drink ?l - location)\n    :precondition (and (inventory ?p ?d) (opened ?d) (at ?p ?l))\n    :effect (and (not (inventory ?p ?d)) (at ?d ?l))\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make a Banana Strawberry Rum Smoothie\n\nSteps:\n- place-ingredients bananas sorbet yogurt blender-1\n- blend_into_texture blender\n- add-rum-and-blend rum blender\n- pour-into-glass blender-1 glass-filled\n- garnish-glass glass-1\n\nDescriptions:\n- Place the yogurt, bananas, and sorbet in a blender.\n- Blend the mixture until it's smooth in texture.\n- Pour the rum in and quickly blend again.\n- Pour the smoothie into chilled glasses.\n- Garnish each glass with a strawberry.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make Your Den Look Like a Home on Animal Jam (Non Members)",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is collect-water.\n- go up npc basement kitchen\n- get bottles kitchen npc\n- go up npc kitchen bedroom\n- go in npc bedroom bathroom\n- drop bottles bathroom npc\n- fill bottles bathroom npc\n- put_in_stopper bathtub bathroom npc\n- get purification_tablets bathroom npc\n- purify bottles bathroom npc\n- fill bathtub bathroom npc\n\nDescriptions:\n- Shelter in place and wait for the initial chaos to subside. If all of the electronics suddenly stop working, the immediate loss of electricity will cause a lot of sudden confusion and chaos. If you aren’t home, wait 30-45 minutes for all of the abrupt danger to pass. Then, go home if you’re within a few miles or kilometers. If you’re already home, stay there and do not go outside.\n- Eat anything in your fridge first to minimize food shortages. For the first 1-2 days, eat whatever is in your fridge and hasn’t gone bad immediately. Save the dry stuff for later when you may really need it. The odds are low society will completely collapse and you’ll go without help for super long, but it’s still better to go through everything that’s going to go bad anyway.\n\nPDDL Actions:\n(:action drop\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (inventory ?p ?it) (at ?p ?l))\n      :effect (and (not (inventory ?p ?it)) (at ?it ?l))\n   )\n(:action fill\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (can_be_filled ?it) (at ?p ?l) (at ?it ?l))\n      :effect (full ?it)\n   )\n(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action purify\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l) (full ?it) (inventory ?p purification_tablets) (not (sealed ?it)))\n      :effect (and (purified ?it) (not (inventory ?p purification_tablets)))\n   )\n(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )\n(:action put_in_stopper\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (has_stopper ?it) (not (full ?it)) (at ?it ?l) (at ?p ?l))\n      :effect (can_be_filled ?it)\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make Your Den Look Like a Home on Animal Jam (Non Members)\n\nSteps:\n- get_gems gems\n- buy_stuff stuff\n- build_rooms npc basement\n- create-rooms kids-room\n- make_area area1\n- keep-family-safe kids\n\nDescriptions:\n- Get lots of gems.\n- for a family home you will need quite a lot of stuff.\n- Try to get room shoji screens so you can section things off into smaller rooms.\n- If you can get shoji screens, try making a kids room, a master bedroom, and a living/dining room.\n- Make an outside area.\n- Keep your family safe.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make Taco Filling",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is stay_sheltered_with_food.\n- make_plan npc home\n- walk north npc home garage\n- get car npc garage\n- get_in_car npc garage car\n- drive east npc garage highway\n- drive down npc highway mall\n- drive east npc mall homedepot\n- get concrete npc homedepot\n- walk west npc homedepot mall\n- drive north npc mall wholefoods\n- get_food canned_food npc wholefoods\n- walk south npc wholefoods mall\n- drive up npc mall highway\n- drive west npc highway garage\n- drive south npc garage home\n- drive in npc home basement\n- reinforce npc basement concrete\n- stay_in_shelter npc basement canned_food\n\nDescriptions:\n- Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food — you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival.\n- Stock up on non-perishable food. Non-perishables can last several years, whether it's in storage or in sustaining you after an attack. Choose items that contain a lot of carbohydrates, so you get more caloric bang for your buck, and store them in a cool, dry place.\n\nPDDL Actions:\n(:action reinforce\n      :parameters (?p - player ?l1 - location ?obj - item) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj) (is_construction_material ?obj))\n      :effect (and (reinforced ?l1) )\n  )\n(:action walk\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_food\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (is_supermarket ?l1) (is_nonperishable ?obj) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n   )\n(:action make_plan\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_home ?l1))\n      :effect (and (has_plan ?p))\n   )\n(:action get_medicine\n      :parameters (?obj -item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_pharmacy ?l1) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n  )\n(:action get\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (not (is_supermarket ?l1)))\n      :effect (and (inventory ?p ?obj))\n   )\n(:action drive\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (driving ?p) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_in_car\n      :parameters (?p - player ?l1 - location ?obj - item)\n      :precondition (and (at ?p ?l1) (inventory ?p ?obj) (is_car ?obj))\n      :effect (and (driving ?p) (inventory ?p ?obj))\n  )\n\n)\n(:action stay_in_shelter\n      :parameters (?p - player ?l1 - location ?obj1 - item ) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj1) (is_nonperishable ?obj1) (reinforced ?l1) (is_underground ?l1))\n      :effect (and (sheltered ?p) )\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make Taco Filling\n\nSteps:\n- cook npc\n- drink_water faucet water\n- add_ingredients_to_sauce canola_oil stove pot\n- finish-wreath wreath\n\nDescriptions:\n- Brown the meat and the onion in a medium sized frying pan.\n- Drain the excess fat.\n- Add the remaining ingredients (except for the hot sauce) and simmer for fifteen minutes.\n- Finished.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make a Bead Ring",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is build_teepee.\n- go west npc camp path\n- go north npc path grassland\n- go north npc grassland bush\n- break_branch npc bush branch_piece\n- get branch_piece npc bush\n- go south npc bush grassland\n- get grass npc grassland\n- go south npc grassland path\n- go south npc path oaks\n- log_oak npc oaks grass oak_log\n- get oak_log npc oaks\n- go north npc oaks path\n- go east npc path camp\n- cluster_grass npc grass grass_tinder\n- stack_log npc oak_log log_stack\n- build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure\n\nDescriptions:\n- Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.\n- Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.\n- Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.\n- Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.\n\nPDDL Actions:\n(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )\n(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )\n(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )\n(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )\n(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )\n(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )\n(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )\n(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )\n(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )\n(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make a Bead Ring\n\nSteps:\n- cut_strips elastic1\n- sliplargerbeads bead1\n- sliplargerbeads bead1\n- sliplargerbeads bead1\n- finish_ring npc\n- finish-wreath wreath\n\nDescriptions:\n- Cut a strip of elastic.\n- Slip two larger beads at either side of the small bead.\n- Slip a small bead on one tail.\n- Continue this pattern until you have enough beads to fit around the finger.\n- Finish the ring by slipping the loose tails through the first small bead you placed on the elastic.\n- Finished.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make Chocolate Hearts for Valentine&#x27;s Day",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is 3-decorate.\n- go south npc bedroom closet\n- get lantern npc closet\n- get balloon npc closet\n- go north npc closet bedroom\n- go west npc bedroom livingroom\n- turn_on_tv npc livingroom\n- hang_lantern npc\n- blow_balloon npc\n\nDescriptions:\n- Put out anime balloons. Draw anime faces on balloons. Alternately, you can call local party supply stores to see if they have any relevant balloons. A third option is to purchase anime balloons online. You can have the balloons filled with helium, or blow them up yourself and place them around.\n- Hang paper lanterns. Buy paper lanterns, in the color of your party theme, at a party supply store or online. You can also make paper lanterns using tissue paper and bendable metal wire.\n- Ideas for main dishes include teriyaki meat or salmon, and stir fry with chicken or beef, noodles, vegetables, and toasted sesame seed sauce.\n\nPDDL Actions:\n(:action hang_lantern\n    :parameters (?p - player)\n    :precondition (and (inventory ?p lantern))\n    :effect (and (hung lantern) (not (inventory ?p lantern)))\n  )\n(:action turn_on_tv\n    :parameters (?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at tv ?l))\n    :effect (on tv)\n  )\n)\n(:action blow_balloon\n    :parameters (?p - player)\n    :precondition (and (inventory ?p balloon))\n    :effect (and (inflated balloon) (not (inventory ?p balloon)))\n  )\n(:action get\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at ?obj ?l))\n    :effect (and (inventory ?p ?obj) (not (at ?obj ?l)))\n  )\n(:action get_beer\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_fridge ?l) (at ?p ?l))\n    :effect (and (inventory ?p beer) (opened beer))\n  )\n(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make Chocolate Hearts for Valentine&#x27;s Day\n\nSteps:\n- build_ingredients mixture\n- melt-chocolate chocolate microwave\n- pour-chocolate chocolate mixing_bowl\n- freeze-chocolate chocolate\n- cut_heart_shape velveeta\n- box-chocolates chocolate\n\nDescriptions:\n- Assemble the ingredients needed.\n- Melt the chocolate bars in the microwave until you have no lumps left after stirring.\n- Pour the melted chocolate into the heart shaped molds.\n- Put the chocolate into the freezer until hardened.\n- Leave them out for one minute and pop out of molds, Or, cut heart shapes in the tray.\n- Enjoy then and there, or box them up and give away!\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make Chinese Macaroni in Just 20 Minutes",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is 1-cook-food.\n- go west npc bedroom livingroom\n- go west npc livingroom kitchen\n- cook npc kitchen clams\n- cook npc kitchen soup\n- cook npc kitchen stirfry\n- cook npc kitchen sushi\n- cook npc kitchen teriyaki\n- go east npc kitchen livingroom\n- drop teriyaki npc livingroom\n- drop stirfry npc livingroom\n- drop soup npc livingroom\n- drop sushi npc livingroom\n- drop clams npc livingroom\n\nDescriptions:\n- Serve beverages. There are various Japanese-themed drinks you can serve at your party. If it’s a kid’s party, you’ll of course want to stick to non-alcoholic options. If it’s an adult party, you may want to include both alcoholic and non-alcoholic beverage choices.\n\nPDDL Actions:\n(:action cook\n    :parameters (?p - player ?l - location ?f - food)\n    :precondition (and (has_kitchen ?l) (at ?p ?l))\n    :effect (inventory ?p ?f)\n  )\n(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )\n(:action drop\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (inventory ?p ?obj))\n    :effect (and (at ?obj ?l) (not (inventory ?p ?obj)))\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make Chinese Macaroni in Just 20 Minutes\n\nSteps:\n- boil_water macaroni hot water\n- boiled_water macaroni water\n- add-oil macaroni1 pan1\n- add-chill_sauce vinegar_and_cheese hot sauce\n- cook npc kitchen\n- cook npc kitchen stirfry\n\nDescriptions:\n- Boil macaroni in hot boiling water with some salt and oil for 10-15 minutes.\n- After the macaroni has boiled put under running water for about 15 seconds to prevent over cooking.\n- In another pan add some oil and toss in the macaroni.\n- Add salt, red chilli powder ,soy sauce,white vinegar and ajino moto.\n- Cook for some seconds.\n- Serve hot with chilled drinks.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Get Wailord in Pokémon Emerald",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is build_shelter.\n- go west npc camp path\n- go west npc path cliff\n- go up npc cliff waterfall\n- go east npc waterfall mountain\n- get branch npc mountain\n- go east npc mountain west_plain\n- insert_beam branch tree npc west_plain beam\n- go east npc west_plain east_plain\n- get branches npc east_plain\n- get leaves npc east_plain\n- get twigs npc east_plain\n- go west npc east_plain west_plain\n- lean_branches branches npc west_plain beam frame\n- clear_spider leaves npc\n- layer twigs leaves npc west_plain frame shelter\n\nDescriptions:\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- In the event that you have no containers and no way to purify water, you can dig a deep hole, let it fill with groundwater, and wait for the particles to settle at the bottom and the water is clear before you drink it. You should only do this if you have no other option.\n- Place the other end of the branch into the split of the other tree. Form a horizontal frame with the main branch by inserting the other end in the split of a nearby tree. Make sure the branch is firmly held in place by shaking it a little.\n- Insert 1 end of the branch into the split of 1 of the trees. Where the tree splits and forms a “V” shape, place 1 end of the branch to hold it up as a support beam. If the tree doesn't have a split, use a log that ends in a “V” shape and lean it against a tree so the branch is supported by the tree.\n\nPDDL Actions:\n(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )\n(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )\n(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )\n(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)\n(:action drop ; drop down an item and remove it from the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?item) (not (at ?item ?l1)))\n      :effect (and (not (inventory ?p ?item)) (at ?item ?l1))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action lean_branches ; Lean branches against the main branch to form the structure of your shelter.\n      :parameters (?branches - branches ?p - player ?l1 - location ?beam - beam ?frame - frame) \n      :precondition (and (at ?p ?l1) (inventory ?p ?branches) (at ?beam ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?branches)) (at ?frame ?l1))\n   )\n(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )\n(:action clear_spider ; clear off any critters or spiders that may be on the branch or leaves\n      :parameters (?item - item ?p - player) \n      :precondition (and (inventory ?p ?item) (has_bug ?item))\n      :effect (and (not (has_bug ?item)) (inventory ?p ?item))\n   )\n(:action insert_beam ; insert end(s) of the branch into the split(s) of the tree(s)\n      :parameters (?b - branch ?t - tree ?p - player ?l1 - location ?beam - beam) \n      :precondition (and (at ?p ?l1) (dry ?l1) (flat ?l1) (at ?t ?l1) (has_split_in_trunk ?t) (inventory ?p ?b) (not (has_bug ?b)) (long ?b) (thick ?b) )\n      :effect (and (at ?p ?l1) (not (inventory ?p ?b)) (at ?beam ?l1))\n   )\n(:action layer ; Lay twigs and leaves\n      :parameters (?twigs - twigs ?leaves - leaves ?p - player ?l1 - location ?frame - frame ?shelter - shelter) \n      :precondition (and (at ?p ?l1) (inventory ?p ?twigs) (inventory ?p ?leaves) (not (has_bug ?leaves)) (at ?frame ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?twigs)) (not (inventory ?p ?leaves)) (at ?shelter ?l1))\n   )\n(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Get Wailord in Pokémon Emerald\n\nSteps:\n- evolution_of_wailord npc\n- train_wailmer npc\n- evolve npc\n- copy-rare-candies wailmer\n- evolve wailmer\n\nDescriptions:\n- This is the pre-evolution of Wailord.\n- This Wailmer can be pretty annoying to train, so be patient.\n- Train it until it evolves.\n- Go to battle frontier and copy some rare candies.\n- Give the rare candies to a Wailmer and evolve it into a Wailord using them.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Clean Your Home Efficiently",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is collect-water.\n- go up npc basement kitchen\n- get bottles kitchen npc\n- go up npc kitchen bedroom\n- go in npc bedroom bathroom\n- drop bottles bathroom npc\n- fill bottles bathroom npc\n- put_in_stopper bathtub bathroom npc\n- get purification_tablets bathroom npc\n- purify bottles bathroom npc\n- fill bathtub bathroom npc\n\nDescriptions:\n- Shelter in place and wait for the initial chaos to subside. If all of the electronics suddenly stop working, the immediate loss of electricity will cause a lot of sudden confusion and chaos. If you aren’t home, wait 30-45 minutes for all of the abrupt danger to pass. Then, go home if you’re within a few miles or kilometers. If you’re already home, stay there and do not go outside.\n- Eat anything in your fridge first to minimize food shortages. For the first 1-2 days, eat whatever is in your fridge and hasn’t gone bad immediately. Save the dry stuff for later when you may really need it. The odds are low society will completely collapse and you’ll go without help for super long, but it’s still better to go through everything that’s going to go bad anyway.\n\nPDDL Actions:\n(:action drop\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (inventory ?p ?it) (at ?p ?l))\n      :effect (and (not (inventory ?p ?it)) (at ?it ?l))\n   )\n(:action fill\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (can_be_filled ?it) (at ?p ?l) (at ?it ?l))\n      :effect (full ?it)\n   )\n(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action purify\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l) (full ?it) (inventory ?p purification_tablets) (not (sealed ?it)))\n      :effect (and (purified ?it) (not (inventory ?p purification_tablets)))\n   )\n(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )\n(:action put_in_stopper\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (has_stopper ?it) (not (full ?it)) (at ?it ?l) (at ?p ?l))\n      :effect (can_be_filled ?it)\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Clean Your Home Efficiently\n\nSteps:\n- pickup_items item1 basket1\n- get_dust_room rug1\n- empty_trash basket1 trash_bag1\n- clean_surface tv cleaner1\n- pickup_throw_rugs rug1\n- clean_room npc basement\n\nDescriptions:\n- ######Pick up and put away stray items and throw trash into waste baskets.\n- ######Dust, again going through the entire house room by room.\n- ######Take a large trash bag and go through each room emptying the waste baskets and trash cans.\n- ######Use a spray cleaner and rags or paper towels to clean any glass surfaces, including the TV screens.\n- First pick up any throw rugs and inside door mats and shake them outside.\n- ######Enjoy your clean home!\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Learn Photography by Shooting Macro",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is create_cult.\n- gather_info npc ss\n- set_dress_code npc ss\n- set_meeting_location npc ss\n- create_name npc ss\n- create_secret npc ss\n- secret_society_is_ready npc ss\n- initiate_new_member npc adrian ss\n- initiate_new_member adrian lara ss\n- initiate_new_member adrian liam ss\n- teach_new_member_secret npc adrian ss\n- teach_new_member_secret adrian lara ss\n- teach_new_member_secret adrian liam ss\n- check_if_cult adrian lara liam npc ss\n\nDescriptions:\n- Create a secret or a secret mission. A secret society must have something to protect.\n- Conduct a proper initiation for you and your closest friend. This should be done before you initiate others. That way, you are sure to come up with a good idea. The initiation is one of the most important parts of the society. It has to be something neither of you would do normally. Candle-lighting sets a serious and official tone, which is always good. Secret names are fun to have.\n- An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.\n- Initiate well to do people in the society. In a school, initiate the most brilliant and enthusiastic students that seem like clique-material, and they will motivate and inspire others. But you don't want to have too many members. The more members, the less secret it is. Five to ten should be good.\n- Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were.\n- Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.\n- Think of a name. You and your closest friend should discuss what your secret society should be called.\n\nPDDL Actions:\n(:action create_name ; create name for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_name ?sc)))\n      :effect (and (has_name ?sc))\n   )\n(:action create_secret ; create secret for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_secret ?sc)))\n      :effect (and (has_secret ?sc) (knows_secret ?p ?sc))\n   )\n(:action set_meeting_location ; determine a regular secret meeting location for the society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_location ?sc)))\n      :effect (and (has_location ?sc))\n   )\n(:action secret_society_is_ready ; check that all prequisites of the secret society are complete\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (not (society_is_ready ?sc)) (has_name ?sc) (has_dress_code ?sc) (has_location ?sc) (has_info ?p) (has_secret ?sc))\n      :effect (and (society_is_ready ?sc))\n   )\n(:action initiate_new_member ; add a new member to secret society\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (in ?p1 ?sc) (is_trusted ?p2 ?sc) (friends ?p1 ?p2) (not (in ?p2 ?sc)))\n      :effect (and (in ?p2 ?sc))\n   )\n(:action teach_new_member_secret ; once a new member becomes trustworthy, teach them the secret\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (in ?p1 ?sc) (in ?p2 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (knows_secret ?p1 ?sc) (not (knows_secret ?p2 ?sc)))\n      :effect (and (knows_secret ?p2 ?sc))\n   )\n(:action check_if_cult ; check if the group is large enough for a cult\n      :parameters (?p1 - player ?p2 - player ?p3 - player ?p4 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (not (equals ?p1 ?p2)) (not (equals ?p1 ?p3)) (not (equals ?p1 ?p4)) (not (equals ?p2 ?p3)) (not (equals ?p2 ?p4)) (not (equals ?p3 ?p4)) (in ?p1 ?sc) (in ?p2 ?sc) (in ?p3 ?sc) (in ?p4 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (is_trusted ?p3 ?sc) (is_trusted ?p4 ?sc) (knows_secret ?p1 ?sc) (knows_secret ?p2 ?sc) (knows_secret ?p3 ?sc) (knows_secret ?p4 ?sc))\n      :effect (and (is_cult ?sc))\n   )\n)\n(:action set_dress_code ; determines the dress code for the secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_dress_code ?sc)))\n      :effect (and (has_dress_code ?sc))\n   )\n(:action gather_info ; read books to gather information on how to create a secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (has_info ?p)))\n      :effect (and (has_info ?p))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Learn Photography by Shooting Macro\n\nSteps:\n- create_small_studio studio\n- have_appropriate_reflector reflector\n- closeup_lens lens\n- diffuse_light light\n- start_experimenting experiment\n\nDescriptions:\n- Create a very small studio.\n- Have the appropriate sized reflectors.\n- Have a closeup lens.\n- Again, they don't need to be that big, but big enough to diffuse light for your small subject.\n- Start experimenting.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Recycle Underpants",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is assembling-disguises.\n- go west npc house bus_stop\n- go north npc bus_stop costume_store\n- get_costume npc costume_store costume\n\nDescriptions:\n- Find supplies for each disguise. Each of your disguises should have at least three parts, so make sure you have enough supplies for each of your characters to have a full costume!\n\nPDDL Actions:\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_costume ; get costume from a store.\n      :parameters (?p - player ?loc - location ?costume - costume) \n      :precondition (and (at ?p ?loc) (sells_costume ?loc))\n      :effect (and (inventory ?p ?costume))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Recycle Underpants\n\nSteps:\n- clean_underpants underpants1\n- use_as_garden_ties underpants1\n- make_craft_item underpants3 scissors1\n- use_as_stuffing underpants3\n- wear_underpants underpants1\n- donate_underpants underpants1\n\nDescriptions:\n- Turn the underpants into cleaning rags.\n- Use the underwear as garden ties.\n- Turn quality undies into craft items.\n- Use a bundle of old underwear as stuffing.\n- Children can wear old underwear on the outside of their pants to play superhero.\n- Donate the underpants.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make Whole Wheat Pastry With Canola",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is be-amazed.\n- record_crosses paper npc hallway\n- record_tosses paper npc hallway\n- divide_crosses paper npc\n- calculate_pi paper npc\n- be_amazed npc\n\nDescriptions:\n- Get into position and THROW YOUR FOOD! Throw just one item at a time. Once it is at rest, observe whether or not it is crossing one of the lines. If it is, put a tick under \"Crosses\" and a tick under \"Tosses.\" If it isn't, just put a tick under \"Tosses.\" When you’ve run out of hot dogs, pick them up and re-use them, making sure to throw from the same position. Repeat this as many times as you like. You should start seeing some interesting results by around 100 to 200 throws. (This doesn't take as long as it sounds.)\n- When you’re done, divide the number of crosses by 2 and divide the number of tosses by that. For example, if you threw 300 times, and it crossed 191 times, you would calculate 300/(191/2). And, to your amazement, you will now have an approximation for pi!\n\nPDDL Actions:\n(:action be_amazed ; divide tosses\n      :parameters (?p - player)\n      :precondition (and (calculated_pi ?p) (not (amazed ?p)))\n      :effect (amazed ?p)\n   )\n\n)\n(:action divide_crosses ; divide crosses\n      :parameters (?object - paper ?p - player)\n      :precondition (and (inventory ?p ?object) (crosses_recorded ?object) (not (crosses_divided ?object)))\n      :effect (crosses_divided ?object)\n   )\n(:action record_tosses ; record tosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (tosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (tosses_recorded ?object)\n   )\n(:action record_crosses ; record crosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (crosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (crosses_recorded ?object)\n   )\n(:action calculate_pi ; divide tosses\n      :parameters (?object - paper ?p - player)\n      :precondition (and (inventory ?p ?object) (crosses_recorded ?object) (tosses_recorded ?object) (crosses_divided ?object) (not (calculated_pi ?p)))\n      :effect (calculated_pi ?p)\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make Whole Wheat Pastry With Canola\n\nSteps:\n- place-ingredients whole wheat mixing bowl\n- pour_ingredients_into_oil user1 bottle1 oil1 container1\n- place_pastry_on_sheet pastry1 sheet1\n- remove-from-fridge water faucet\n- press_into_pie_dish mixing_bowl table\n- create_edge canola_oil table\n\nDescriptions:\n- Place the whole wheat flour and salt into the mixing bowl.\n- Pour in the oil.\n- Place the pastry onto a sheet of wax paper.\n- Remove from the fridge.\n- Press the pastry into the pie dish.\n- Create an edge with the sides of a fork.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Freeze Baked Cookies or Biscuits",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is make_papyrus.\n- cut_stalks npc knife papyrus_plant papyrus_stalks\n- cut_strips npc papyrus_strips papyrus_stalks knife\n- soak_strips npc water papyrus_strips\n- roll_strips npc rolling_pin papyrus_strips\n- weave_strips npc papyrus_strips\n- bundle_strips npc papyrus_strips wooden_boards linen_sheets\n- cut_sheet npc papyrus_strips knife papyrus\n\nDescriptions:\n- Cut the stalks. About 12 inches (30 cm) of papyrus plant will make a large piece of paper that will be nearly 24 inches (61 cm) in length. Cut off as many stalks as you will need to make the amount of paper you want. The cuts must be diagonally made. Then, cut the tips of the papyrus. You will not use the tips, which are the thinner, grass-like end of the plant.\n- Weave the strips together. Lay the strips on the cloth. Get a dry sheet of linen cloth or felt. Then, begin to weave them together. You want to create 2 layers of strips, with the top layer strips being perpendicular to the bottom layer strips. It should resemble a placemat. The strips should slightly overlap one another to prevent the papyrus from falling apart later.\n- Roll the excess water and sugar out of the plant. Grab a rolling pin and use it to roll the strips flat. The rolling pin should be squeezing the water out of them and flattening the strips into sheets.\n- Cut the paper. The sheet may be larger than you want when it is finished. Use a razor, scissors, or paper cutter to cut the papyrus into smaller sheets. Measure the sizes you are cutting so you will have multiple sheets of the same size.\n- Cut up the inner portion into strips. Use the knife you used to cut off the outer portion to cut the inner layers of the papyrus plant (pith) into thin strips. Hold the plant in your hand and cut towards you vertically. Make sure that all of the strips have the same size and thickness.\n- Place the bundle between 2 wooden boards. Make sure that the wooden boards are somewhat heavy. The pressure is necessary to flatten the papyrus strips together. Once the strips have been placed between the boards, press them together. Lay the sandwiched papyrus sheet on a flat surface and allow the wooden boards to flatten the sheet using gravity.\n\nPDDL Actions:\n(:action roll_strips; roll the excess water and sugar out of the strips to dry them\n    :parameters (?p - player ?rolling_pin - rolling_pin ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?rolling_pin) (inventory ?p ?papyrus_strips) (soaked ?papyrus_strips))\n    :effect (dried ?papyrus_strips)\n  )\n(:action soak_strips; place papyrus strips in water and let them soak\n    :parameters (?p - player ?water - water ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?water) (inventory ?p ?papyrus_strips))\n    :effect (soaked ?papyrus_strips)\n  )\n(:action weave_strips; weave the dried papyrus strips into a lattice\n    :parameters (?p - player ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?papyrus_strips) (dried ?papyrus_strips))\n    :effect (woven ?papyrus_strips)\n  )\n(:action bundle_strips; bundle the woven strips between linen sheets and wooden boards\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?wooden_boards - wooden_boards ?linen_sheets - linen_sheets)\n    :precondition (and (inventory ?p ?papyrus_strips) (woven ?papyrus_strips) (inventory ?p ?wooden_boards) (inventory ?p ?linen_sheets))\n    :effect (finished ?papyrus_strips)\n  )\n(:action cut_sheet; the finished sheet is cut to size to complete the papyrus\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?knife - knife ?papyrus - papyrus)\n    :precondition (and (inventory ?p ?papyrus_strips) (finished ?papyrus_strips) (inventory ?p ?knife))\n    :effect (and (inventory ?p ?papyrus) (not (inventory ?p ?papyrus_strips)))\n  )\n)\n(:action cut_stalks; cut papyrus plant into stalks\n    :parameters (?p - player ?knife - knife ?papyrus_plant - papyrus_plant ?papyrus_stalks - papyrus_stalks)\n    :precondition (and (inventory ?p ?knife) (inventory ?p ?papyrus_plant))\n    :effect (and (inventory ?p ?papyrus_stalks) (not (inventory ?p ?papyrus_plant)))\n  )\n(:action cut_strips; cut papyrus stalks into strips\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?papyrus_stalks - papyrus_stalks ?knife - knife)\n    :precondition (and (inventory ?p ?knife) (inventory ?p ?papyrus_stalks))\n    :effect (and (inventory ?p ?papyrus_strips) (not (inventory ?p ?papyrus_stalks)))\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Freeze Baked Cookies or Biscuits\n\nSteps:\n- place-in-container cookies\n- separate-using-paper cookies\n- free-biscuits cookies\n- thaw cookies\n\nDescriptions:\n- Place the biscuits or cookies into a rigid, airtight container.\n- Separate the biscuits and cookies using freezer paper, baking paper, or foil.\n- Place biscuits in freezer.\n- Thaw.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Make a Duct Tape Necklace",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is boil_water.\n- get pot npc camp\n- go west npc camp path\n- go south npc path oaks\n- log_oak npc oaks pot oak_log\n- get flat_wood npc oaks\n- get oak_log npc oaks\n- go north npc oaks path\n- go north npc path grassland\n- go north npc grassland bush\n- break_branch npc bush branch_piece\n- get_branch npc bush branch\n- get branch_piece npc bush\n- go south npc bush grassland\n- get_water npc grassland water pot\n- get grass npc grassland\n- go south npc grassland path\n- go east npc path camp\n- cluster_grass npc grass grass_tinder\n- stack_log npc oak_log log_stack\n- build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure\n- ignite_wood npc camp flat_wood branch teepee_structure\n- ignite_teepee npc camp flat_wood teepee_structure\n- boil_water npc camp teepee_structure water\n\nDescriptions:\n- Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- Search for a source of fresh water.\n- Melt snow or ice if you can find some. If you find ice or snow on the ground in the woods, collect it so you can melt it down for fresh drinking water. You can place the ice or snow in a container and place it next to a fire to melt it or you can hold the container to use your body heat to melt it.\n- Use dry sticks, branches, or tree bark to serve as your kindling.\n- Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.\n- Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.\n- Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.\n\nPDDL Actions:\n(:action ignite_teepee ; ignite teepe with ignited wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (ignited ?wood))\n      :effect (and (ignited ?teepee))\n   )\n(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )\n(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )\n(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )\n(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )\n(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )\n(:action boil_water ; boil water using a started fire pit\n      :parameters (?p - player ?loc - location ?teepee - teepee ?water - water)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (ignited ?teepee) (inventory ?p ?water))\n      :effect (and (boiled ?water))\n   )\n)\n(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )\n(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )\n(:action ignite_wood ; ignite wood by plough it to create heat via friction\n      :parameters (?p - player ?loc - location ?wood - wood ?branch - branch ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (inventory ?p ?branch))\n      :effect (and (ignited ?wood))\n   )\n(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )\n(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )\n(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )\n(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Make a Duct Tape Necklace\n\nSteps:\n- make_horizontal_bar npc\n- cut_roll npc\n- fold-wreath wreath-1\n- fold-half-tape tape1\n- tape-ends ends\n- put_in_machine npc\n\nDescriptions:\n- Take one roll of duct tape and make a piece about a little bigger than your head.\n- Measure it around your head, and cut it off the roll.\n- Fold it halfway through the middle, like shown.\n- Fold the other half so there is no sticky part showing.\n- Tape the ends together.\n- And you are done!\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Get a Headshot in Gears of War",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is final.\n- go west npc home market\n- buy_supplies food npc market\n- buy_supplies medicine npc market\n- buy_supplies water npc market\n- check_supplies food water medicine\n- go west npc market weapon_market\n- buy_weapons ammunition npc weapon_market\n- buy_weapons pistol npc weapon_market\n- go east npc weapon_market market\n- buy_supplies heat npc market\n- go east npc market home\n- go north npc home bunker1\n- go north npc bunker1 bunker2\n- check_weapons pistol ammunition\n- check_bunker bunker2 npc\n- outfit_bunker_with_energy_source bunker2 npc heat\n- listen_to_astronomers_predictions npc bunker2\n- enjoylife bunker2 npc\n- connect_through_social_media_with_family bunker2 npc family philly\n- move_away npc philly salt_lake bunker2\n\nDescriptions:\n- Move away from coastal areas. Because the earth is made up of 71% water, there’s a greater likelihood that the comet will hit a body of water. If this does happen, it could mean that giant tsunamis would be created by the initial impact and they would likely destroy our coastal cities. Additionally, there would be an increase in water vapor entering our atmosphere which would cause heavy rain, which could cause landslides and flooding.\n- Purchase enough food, water, medicine, and other supplies. If the comet does hit on land, dust and rock particles flying into our atmosphere will make it too dangerous to go outside for months to years.\n- Don’t believe everything you hear. Early reporting is notoriously inaccurate at times, so wait it out until you hear unified reports.\n- Move into a bunker or fortified structure and outfit it with an energy source. An underground bunker isn’t only the best for the time of impact; it will also protect you from environmental hazards after the comet has hit. When the comet hits, dust, soot, and water will shoot up into our atmosphere, making it cold for months to years.\n- A semi-automatic rifle and a pistol with enough ammunition should be more than enough firepower.\n- Isolation has multiple negative effects on your mental health, so having people with you is a good idea if you want to stay mentally healthy.\n- Limit your generator usage and only use it if necessary. Your generator will be a lifesaver for many things while you are in your bunker. You can use it to produce heat, cook food, and power lights. However, because most generators run on fuel, it’s important that you limit its usage because you will likely have a limited amount of fuel in your bunker. If you aren't in a bunker, a generator may still work, but there's a good chance that the main power grid will be down.\n- Pay attention to astronomers’ predictions on any possible collisions with earth. NASA currently has astronomers that track comets that are flying in our solar system. As a result, there’s a very good chance they will know if there is a large object about to collide with us. By listening to their predictions, you can develop a real sense of how much time you have to prepare.\n- Buy weapons and ammunition for after the impact. You may be more concerned with withstanding the destruction of the comet impact itself, but you also need to be conscious of the possible dangers of other people after the dust settles.\n- Make sure to stock your hide-out with canned food, dried goods, non-perishable foods, and bottled water.\n\nPDDL Actions:\n(:action buy_supplies ; buy supplies and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - market) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?item))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action listen_to_astronomers_predictions ; listen to astronomers predictions on collision with earth\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (has_pc ?p))\n      :effect (and (listen_to_broadcast ?p ?l1))\n   )\n(:action outfit_bunker_with_energy_source ; outfit your bunker with an energy source for heat\n      :parameters (?bk - bunker ?p - player ?es - energy_source) \n      :precondition (and (at ?p ?bk) (find_good_bunker ?bk) (inventory ?es))\n      :effect (and (outfit_bunker_with_heat ?bk))\n   )\n(:action connect_through_social_media_with_family ; let other family members know you are safe\n      :parameters (?bk - bunker ?p - player ?f - player ?c - city) \n      :precondition (and (at ?p ?bk) (has_pc ?p) (enjoylife ?p ?bk) (not(at ?f ?bk)) (in ?p ?c) (not (in ?f ?c)) )\n      :effect (and (family_memebers_know_you_are_safe))\n   )\n   \n\n)\n(:action move_away ; flight from coastal area to inland area \n      :parameters (?p - player ?c1 - city ?c2 - city ?l1 - location) \n      :precondition (and (in ?p ?c1) (coastal ?c1) (inland ?c2) (listen_to_broadcast ?p ?l1))\n      :effect (and (in ?p ?c2) (not (in ?p ?c1)))\n   )\n(:action enjoylife ; after all preparation, enjoy life in a bunker\n      :parameters (?bk - bunker ?p - player ) \n      :precondition (and (at ?p ?bk) (outfit_bunker_with_heat ?bk))\n      :effect (and (enjoylife ?p ?bk))\n   )\n(:action check_weapons ; check enough supplies in the inventory\n      :parameters (?ps - pistol ?am - ammunition) \n      :precondition (and (inventory ?ps) (inventory ?am))\n      :effect (and (enough_weapons))\n   )\n(:action check_supplies ; check enough supplies in the inventory\n      :parameters (?fd - food ?wt - water ?md - medicine) \n      :precondition (and (inventory ?fd) (inventory ?wt) (inventory ?md))\n      :effect (and (enough_supplies))\n   )\n(:action check_bunker ; check if the bunker is good for sheiding\n      :parameters (?bk - bunker ?p - player) \n      :precondition (and (at ?p ?bk) (enough_supplies) (enough_weapons) (has_air_filtration_system ?bk) (has_strong_material ?bk))\n      :effect (and (find_good_bunker ?bk))\n   )\n(:action buy_weapons ; buy weapons and put it in the inventory (after buy_supplies)\n      :parameters (?wp - weapon ?p - player ?l1 - weapon_market) \n      :precondition (and (at ?p ?l1) (at ?wp ?l1) (enough_supplies))\n      :effect (and (inventory ?wp))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Get a Headshot in Gears of War\n\nSteps:\n- shotgun_shot player1 player2\n- shotgun_shot player1\n- pistol_shot player1 player2\n- boomshot_shot weapon1 player1\n\nDescriptions:\n- Sniper — Simply aim at the head and pull the trigger, unless you're the host, in which case you will need to aim in front of where they're going.\n- Shotgun — The aim on the shotgun is almost like a rectangle.\n- Pistol — I'm not sure because I haven't played in a while, but it's either six or seven shots to the head with the standard-issue pistol for a headshot.\n- BoomShot — BoomShot headshots are possible — don't let anyone tell you they're not but the chance of one happening is about a million to one.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Prevent a Wick Lamp or Stove from Smoking",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is remove_players.\n- gather_info npc ss\n- set_dress_code npc ss\n- set_meeting_location npc ss\n- create_name npc ss\n- create_secret npc ss\n- secret_society_is_ready npc ss\n- initiate_new_member npc adrian ss\n- initiate_new_member npc chris ss\n- initiate_new_member npc lara ss\n- teach_new_member_secret npc adrian ss\n- teach_new_member_secret adrian chris ss\n- teach_new_member_secret adrian lara ss\n- remove_member anish ss\n- check_if_cult adrian chris lara npc ss\n\nDescriptions:\n- Create a secret or a secret mission. A secret society must have something to protect.\n- Conduct a proper initiation for you and your closest friend. This should be done before you initiate others. That way, you are sure to come up with a good idea. The initiation is one of the most important parts of the society. It has to be something neither of you would do normally. Candle-lighting sets a serious and official tone, which is always good. Secret names are fun to have.\n- An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.\n- Initiate well to do people in the society. In a school, initiate the most brilliant and enthusiastic students that seem like clique-material, and they will motivate and inspire others. But you don't want to have too many members. The more members, the less secret it is. Five to ten should be good.\n- There needs to be a way to get rid of someone if they become bad for the group or start talking—like blabbing the society's secret. If they do, pretend like that was never the secret, but immediately create a new secret. Put this in the rules.\n- Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were.\n- Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.\n- Think of a name. You and your closest friend should discuss what your secret society should be called.\n\nPDDL Actions:\n(:action create_name ; create name for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_name ?sc)))\n      :effect (and (has_name ?sc))\n   )\n(:action create_secret ; create secret for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_secret ?sc)))\n      :effect (and (has_secret ?sc) (knows_secret ?p ?sc))\n   )\n(:action set_meeting_location ; determine a regular secret meeting location for the society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_location ?sc)))\n      :effect (and (has_location ?sc))\n   )\n(:action secret_society_is_ready ; check that all prequisites of the secret society are complete\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (not (society_is_ready ?sc)) (has_name ?sc) (has_dress_code ?sc) (has_location ?sc) (has_info ?p) (has_secret ?sc))\n      :effect (and (society_is_ready ?sc))\n   )\n(:action initiate_new_member ; add a new member to secret society\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (in ?p1 ?sc) (is_trusted ?p2 ?sc) (friends ?p1 ?p2) (not (in ?p2 ?sc)))\n      :effect (and (in ?p2 ?sc))\n   )\n(:action remove_member ; remove an existing society member due to untrustworthiness\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (is_trusted ?p ?sc)))\n      :effect (and (not (in ?p ?sc)))\n   )\n(:action teach_new_member_secret ; once a new member becomes trustworthy, teach them the secret\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (in ?p1 ?sc) (in ?p2 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (knows_secret ?p1 ?sc) (not (knows_secret ?p2 ?sc)))\n      :effect (and (knows_secret ?p2 ?sc))\n   )\n(:action check_if_cult ; check if the group is large enough for a cult\n      :parameters (?p1 - player ?p2 - player ?p3 - player ?p4 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (not (equals ?p1 ?p2)) (not (equals ?p1 ?p3)) (not (equals ?p1 ?p4)) (not (equals ?p2 ?p3)) (not (equals ?p2 ?p4)) (not (equals ?p3 ?p4)) (in ?p1 ?sc) (in ?p2 ?sc) (in ?p3 ?sc) (in ?p4 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (is_trusted ?p3 ?sc) (is_trusted ?p4 ?sc) (knows_secret ?p1 ?sc) (knows_secret ?p2 ?sc) (knows_secret ?p3 ?sc) (knows_secret ?p4 ?sc))\n      :effect (and (is_cult ?sc))\n   )\n)\n(:action set_dress_code ; determines the dress code for the secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_dress_code ?sc)))\n      :effect (and (has_dress_code ?sc))\n   )\n(:action gather_info ; read books to gather information on how to create a secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (has_info ?p)))\n      :effect (and (has_info ?p))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Prevent a Wick Lamp or Stove from Smoking\n\nSteps:\n- pour_vinegar_into_container vinegar1 container1\n- remove_wick wick1 lamp1 stove1\n- dip_wicks_in_vinegar wick1 vinegar1 container1\n- dry_wicks wick1\n- make_wicks_dry wick1\n\nDescriptions:\n- Pour some white vinegar into a small container deep enough for dipping.\n- Remove the wick from the lamp or stove, or use wicks yet to be inserted.\n- Dip each wick into the vinegar.\n- Allow to dry thoroughly.\n- Use once dry.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Defeat a Thug on Dead Island",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is hunt_animal_for_food.\n- get stick2 npc camp\n- sharpen_stick npc stick2\n- go north npc camp beach\n- get_shellfish npc beach shellfish\n- catch_fish npc beach fish stick2\n- go south npc beach camp\n- go west npc camp path\n- hunt_insect npc path insect\n- go west npc path cliff\n- go up npc cliff clifftop\n- start_fire npc clifftop stick2\n- cook npc clifftop shellfish\n- hunt_bird npc clifftop bird stick2\n\nDescriptions:\n- Test the food you eat for poison. If you've never eaten the fruit that you find on the island, test it for poison by rubbing it on a sensitive part of your skin, like your wrist. Wait 45 minutes. If there is no adverse reaction, rub some of the food on your lips. If you form a rash, or there is burning or irritation, then the food is most likely poisonous. Never eat large amounts of any unknown food. Eat a small amount, wait an hour or two to see if you feel sick, then eat the rest of it.\n- Heating the water above 185° F (85° C) for three minutes will kill all pathogens in your water.\n- Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island.\n\nPDDL Actions:\n(:action start_fire ; start a fire at a location\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (has_fire ?loc))\n  )\n(:action get_shellfish ; catch shellfish from a location that has fish.\n     :parameters (?p - player ?loc - location ?shellfish - shellfish)\n     :precondition (and (at ?p ?loc) (has_shellfish ?loc))\n     :effect (and (inventory ?p ?shellfish) (not (edible ?shellfish)))\n  )\n(:action go ; navigate to an adjacent location\n     :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location)\n     :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n     :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )\n(:action get_tarp ; get tarp for shelter construction\n     :parameters (?p - player ?loc - location ?tarp - tarp)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?tarp))\n  )\n(:action catch_fish ; catch fish from a location that has fish.\n     :parameters (?p - player ?loc - location ?fish - fish ?stick - stick)\n     :precondition (and (at ?p ?loc) (has_fish ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (inventory ?p ?fish) (edible ?fish))\n  )\n(:action cook ; cook to make animal edible\n     :parameters (?p - player ?loc - location ?animal - animal)\n     :precondition (and (at ?p ?loc) (inventory ?p ?animal) (has_fire ?loc))\n     :effect (and (inventory ?p ?animal) (edible ?animal))\n  )\n(:action get_stick ; get a stick from bosk\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (at ?stick ?loc))\n     :effect (and (inventory ?p ?stick) (not (sharpened ?stick)))\n  )\n(:action get_leave ; get leaves for shelter construction\n     :parameters (?p - player ?loc - location ?leave - leave)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?leave))\n  )\n(:action hunt_bird ; catch a bird from a location that has birds.\n     :parameters (?p - player ?loc - location ?bird - bird ?stick - stick)\n     :precondition (and (at ?p ?loc) (has_bird ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (inventory ?p ?bird) (edible ?bird))\n  )\n(:action sharpen_stick ; sharpen stick to hunt fish or bird or to use it to make a fire\n     :parameters (?p - player ?stick - stick)\n     :precondition (and (inventory ?p ?stick) (not (sharpened ?stick)))\n     :effect (and (inventory ?p ?stick) (sharpened ?stick))\n  )\n(:action hunt_insect ; catch an insect from a location that has insects.\n     :parameters (?p - player ?loc - location ?insect - insect)\n     :precondition (and (at ?p ?loc) (has_insect ?loc))\n     :effect (and (inventory ?p ?insect) (edible ?insect))\n  )\n(:action get_water ; get water from a location that has a water source like a lake.\n     :parameters (?p - player ?loc - location ?water - water)\n     :precondition (and (at ?p ?loc) (has_water_source ?loc))\n     :effect (and (inventory ?p ?water) (not (treated ?water)))\n  )\n(:action get ; pick up an item and put it in the inventory\n     :parameters (?item - item ?p - player ?l1 - location)\n     :precondition (and (at ?p ?l1) (at ?item ?l1))\n     :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n  )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Defeat a Thug on Dead Island\n\nSteps:\n- make_horizontal_bar branch_piece\n- get_weapon npc weapon\n- check_weapons pistol ammunition\n- attack_wailmer npc\n\nDescriptions:\n- There is no chance in hell you will kill a Thug using just your bear hands and feet.\n- Incendiary Weapons - Grenades or Molotov Cocktails *WARNING* You may need to use a couple of these, so it is recommended that you only use one when a Thugs' health is below 50%.\n- Make sure your guns have enough ammo, and your knives are up to scratch.\n- Attack!\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Clean Synthetic Hiking Gear",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is move_to_bunker.\n- go west npc home market\n- buy_supplies food npc market\n- buy_supplies medicine npc market\n- buy_supplies water npc market\n- check_supplies food water medicine\n- go west npc market weapon_market\n- buy_weapons ammunition npc weapon_market\n- buy_weapons pistol npc weapon_market\n- go east npc weapon_market market\n- buy_supplies heat npc market\n- go east npc market home\n- go north npc home bunker1\n- go north npc bunker1 bunker2\n- check_weapons pistol ammunition\n- check_bunker bunker2 npc\n- outfit_bunker_with_energy_source bunker2 npc heat\n\nDescriptions:\n- Purchase enough food, water, medicine, and other supplies. If the comet does hit on land, dust and rock particles flying into our atmosphere will make it too dangerous to go outside for months to years.\n- Move into a bunker or fortified structure and outfit it with an energy source. An underground bunker isn’t only the best for the time of impact; it will also protect you from environmental hazards after the comet has hit. When the comet hits, dust, soot, and water will shoot up into our atmosphere, making it cold for months to years.\n- A semi-automatic rifle and a pistol with enough ammunition should be more than enough firepower.\n- Limit your generator usage and only use it if necessary. Your generator will be a lifesaver for many things while you are in your bunker. You can use it to produce heat, cook food, and power lights. However, because most generators run on fuel, it’s important that you limit its usage because you will likely have a limited amount of fuel in your bunker. If you aren't in a bunker, a generator may still work, but there's a good chance that the main power grid will be down.\n- Buy weapons and ammunition for after the impact. You may be more concerned with withstanding the destruction of the comet impact itself, but you also need to be conscious of the possible dangers of other people after the dust settles.\n- Make sure to stock your hide-out with canned food, dried goods, non-perishable foods, and bottled water.\n\nPDDL Actions:\n(:action buy_supplies ; buy supplies and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - market) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?item))\n   )\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action outfit_bunker_with_energy_source ; outfit your bunker with an energy source for heat\n      :parameters (?bk - bunker ?p - player ?es - energy_source) \n      :precondition (and (at ?p ?bk) (find_good_bunker ?bk) (inventory ?es))\n      :effect (and (outfit_bunker_with_heat ?bk))\n   )\n(:action check_weapons ; check enough supplies in the inventory\n      :parameters (?ps - pistol ?am - ammunition) \n      :precondition (and (inventory ?ps) (inventory ?am))\n      :effect (and (enough_weapons))\n   )\n(:action check_supplies ; check enough supplies in the inventory\n      :parameters (?fd - food ?wt - water ?md - medicine) \n      :precondition (and (inventory ?fd) (inventory ?wt) (inventory ?md))\n      :effect (and (enough_supplies))\n   )\n(:action check_bunker ; check if the bunker is good for sheiding\n      :parameters (?bk - bunker ?p - player) \n      :precondition (and (at ?p ?bk) (enough_supplies) (enough_weapons) (has_air_filtration_system ?bk) (has_strong_material ?bk))\n      :effect (and (find_good_bunker ?bk))\n   )\n(:action buy_weapons ; buy weapons and put it in the inventory (after buy_supplies)\n      :parameters (?wp - weapon ?p - player ?l1 - weapon_market) \n      :precondition (and (at ?p ?l1) (at ?wp ?l1) (enough_supplies))\n      :effect (and (inventory ?wp))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Clean Synthetic Hiking Gear\n\nSteps:\n- read_instructions instructions\n- wash_gore_Tex clothing\n- check_boots npc\n- clean_sliplargerbund npc\n- wash_polar_fleece washing_machine\n\nDescriptions:\n- Read all of the instructions first.\n- Wash Gore-Tex and other breathable, waterproof synthetic outer shell clothing following the instructions on the label.\n- Be careful with synthetic boots.\n- Take care cleaning synthetic jackets containing down.\n- Wash polar fleece (microfleece or micrafleece) in the washing machine.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Remove Paint from Windows",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is fill-inventory.\n- go south npc parkinglot pond\n- get_water npc pond water\n- go north npc pond parkinglot\n- go north npc parkinglot park\n- go east npc park store\n- get npc store bandage\n- go west npc store park\n- go west npc park car\n- go west npc car brickhouse\n- loot_shelter npc brickhouse food\n\nDescriptions:\n- Learn basic first-aid to treat minor injuries. Injuries are unfortunately inevitable, and they can range from minor to serious. Develop at least a basic knowledge of first aid to treat the injuries you or a partner may encounter. When searching for supplies, take any first aid gear you may find and build a basic first aid kit.\n- Purify any water you drink that isn’t from a sealed bottle. A waterborne illness can be life-threatening in a survival situation. If need to use any unbottled water for drinking, always purify it first. The most common method is boiling the water for 1 minute to kill any pathogens. Then filter out larger objects by pouring the water through a fine net or cloth.\n\nPDDL Actions:\n(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )\n(:action barter_food_for_healing ; get food in exchange for healing.\n      :parameters (?p - player ?p_inj - player ?water - water ?bandage - bandage ?food - food ?l -location) \n      :precondition (and (inventory ?p ?water) (inventory ?p ?bandage) (is_injured ?p_inj) (at ?p ?l) (at ?p_inj ?l))\n      :effect (and (not (is_injured ?p_inj)) (gettable ?food)  )\n   )\n\n   \n)\n(:action gofish \n      :parameters (?p - player ?l - location ?fp - fishingpole ?f - fish)\n      :precondition (and (at ?p ?l) (inventory ?p ?fp) (haslake ?l) (at ?f ?l))\n      :effect (and (gettable ?f) )\n   )\n(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action get\n      :parameters (?p - player ?l - location ?i - item)\n      :precondition (and (at ?p ?l) (at ?i ?l) (gettable ?i))\n      :effect (and (not (at ?i ?l)) (inventory ?p ?i))\n   )\n(:action loot_shelter ; steal food from location that is occupied.\n      :parameters (?p - player ?loc - location ?food - food) \n      :precondition (and (at ?food ?loc) (at ?p ?loc) (is_occupied ?loc))\n      :effect (and (inventory ?p ?food) (not (at ?food ?loc)))\n   )\n(:action break_car_window ; steal food from car.\n      :parameters (?p - player ?car - car ?rock - rock ?item - item) \n      :precondition (and (at ?p ?car) (inventory ?p ?rock) (has_windows ?car) (at ?item ?car))\n      :effect (and (gettable ?item) (not (inventory ?p ?rock)) (not (has_windows ?car)))\n   )\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Remove Paint from Windows\n\nSteps:\n- clean_cloth cloth1 sponge1\n- wet_window_with_water water\n- position-raazor blade1 razor1\n- scrash_window_with_painting window_clean\n- clean_window window\n- remove-small-splatter paint_splatters\n\nDescriptions:\n- You will need a bucket of hot water mixed with dish soap, a clean cloth or sponge, a new safety razor blade and some glass cleaner.\n- Wet the window with the water and dish soap.\n- Position the razor blade.\n- Using slow, smooth motions, start scraping the paint from the window.\n- Once all of the paint has been scraped away, spritz the window with some glass cleaner and use a clean, dry cloth to buff the windows clean.\n- Remove small paint splatters with chemical solvents.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    },
    {
        "task": "Use a Mic in Team Fortress 2",
        "prompt": "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is hacking2_2.\n- get npc applications knowing_target\n- get npc hostnames knowing_target\n- get npc ip knowing_target\n- get npc network knowing_target\n- get npc settings knowing_target\n- get npc snmp_and_dns knowing_target\n- get npc usernames knowing_target\n- enumeration npc info knowing_target usernames hostnames network ip settings applications snmp_and_dns\n- got_all_info npc info knowing_target next testing_target\n- check_email_server npc server_checked knowing_target info\n- ping npc ping_succeed knowing_target info\n- go next npc knowing_target testing_target\n- reached_the_remote_system npc testing_target next running_port_scan ping_succeed server_checked\n- go next npc testing_target running_port_scan\n- get npc network_scanner running_port_scan\n- run_port_scan npc running_port_scan next finding_path network_scanner\n- go next npc running_port_scan finding_path\n- get npc tcp_udp_ports finding_path\n- found_path_in_system npc finding_path next cracking_password tcp_udp_ports\n- go next npc finding_path cracking_password\n- crack_password_by_brute_force npc cracking_password password\n- gain_access_with_password npc cracking_password next getting_superuser_privileges password\n- go next npc cracking_password getting_superuser_privileges\n- get npc memory_layout getting_superuser_privileges\n- create_buffer_overflow npc memory_layout\n- take_control_of_system npc getting_superuser_privileges next creating_back_door memory_layout\n- go next npc getting_superuser_privileges creating_back_door\n- get npc malware creating_back_door\n- install_malware npc malware creating_back_door\n- bypass_standard_authentication_system npc creating_back_door next covering_tracks malware\n- go next npc creating_back_door covering_tracks\n- create_fewest_file npc covering_tracks track\n- delete_additional_users npc covering_tracks track\n- hardcode_password npc covering_tracks track\n- make_no_change_to_website npc covering_tracks track\n- not_let_administrator_know npc covering_tracks track\n- track_covered npc covering_tracks next end_hacking track\n- go next npc covering_tracks end_hacking\n\nDescriptions:\n- Know your target. The process of gathering information about your target is known as enumeration. The goal is to establish an active connection with the target and find vulnerabilities that can be used to further exploit the system. There are a variety of tools and techniques that can help with the enumeration process. Enumeration can be performed on a variety of internet protocols including, NetBIOS, SNMP, NTP, LDAP, SMTP, DNS, and Windows and Linux systems.\n- Create a backdoor. Once you have gained full control over a machine, it's a good idea to make sure you can come back again. To create a backdoor, you need to install a piece of malware on an important system service, such as the SSH server. This will allow you to bypass the standard authentication system.\n- Find a path or open port in the system. Common ports such as FTP (21) and HTTP (80) are often well protected, and possibly only vulnerable to exploits yet to be discovered.\n- Don't make any changes to the website.\n- Run a scan of the ports. You can use a network scanner to run a port scan. This will show you the ports that are open on the machine, the OS, and can even tell you what type of firewall or router they are using so you can plan a course of action.\n- If you patched a server like SSHD, make sure it has your secret password hard-coded.\n- Don't create more files than you need.\n- If someone tries to log in with this password, the server should let them in, but shouldn't contain any crucial information.\n- Do not create any additional users. Act as quickly as possible.\n- The email may contain an attachment that installs spyware or a keylogger. It may also contain a link to a false business website (made by the hacker) that looks authentic. The user is then asked to input their personal information, which the hacker then gains access to. To avoid these scams, don't open emails you don't trust. Always check that a website is secure (includes \"HTTPS\" in the URL). Log in to business sites directly instead of clicking links in an email.\n- Cover your tracks. Don't let the administrator know that the system is compromised.\n- Buffer Overflow: If you know the memory layout of a system, you can feed it input the buffer cannot store. You can overwrite the code stored in the memory with your code and take control of the system.\n- ARP Spoofing: In this technique, a hacker uses an app on his smartphone to create a fake Wi-Fi access point that anyone in a public location can sign into. Hackers can give it a name that looks like it belongs to the local establishment. People sign into it thinking they are signing into public Wi-Fi. The app then logs all data transmitted over the internet by the people signed into it. If they sign in to an account using a username and password over an unencrypted connection, the app will store that data and give the hacker access. To avoid becoming a victim of this heist, avoid using public Wi-Fi. If you must use public Wi-Fi, check with the owner of an establishment to make sure you are signing in to the correct internet access point. Check that your connection is encrypted by looking for a padlock in the URL. You can also use a VPN.\n- Phishing: In this technique, a hacker sends a fake email to a user that appears to be from a person or company the user trusts.\n\nPDDL Actions:\n(:action create_buffer_overflow\n      :parameters (?p - player ?memory_layout - memory_layout)\n      :precondition (and (inventory ?p ?memory_layout) )\n      :effect (is_root_user ?p)\n   )\n(:action track_covered\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?track - track)\n      :precondition (and (not (administrator_know_compromised ?p)) (not (create_more_file_than_need ?p)) (not (additional_users ?p)) (hardcoded_secret_password ?p) (website_unchanged ?p) (blocked ?l1 ?dir ?l2) (at ?track ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) )\n   ); ; onward to end\n\n\n  ; NEW ----------------------------------------------------\n(:action make_no_change_to_website\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (website_unchanged ?p)\n   )\n(:action run_port_scan\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?network_scanner - network_scanner)\n      :precondition (and (at ?p ?l1) (not (port_scanned ?p)) (blocked ?l1 ?dir ?l2) (inventory ?p ?network_scanner))\n      :effect (and (port_scanned ?p) (not (blocked ?l1 ?dir ?l2)))\n   ); onward to step 5\n(:action ping;\n      :parameters (?p - player ?ping_succeed - ping_succeed ?l1 - location ?info - all_information)\n      :precondition (and (not (inventory ?p ?ping_succeed)) (at ?p ?l1) (collected_all_info ?p));\n      :effect (inventory ?p ?ping_succeed)\n   )\n(:action got_all_info ; onward to step 3 \n      :parameters (?p - player ?info - all_information ?l1 - location ?dir - direction ?l2 - location)\n      :precondition (and (collected_all_info ?p) (at ?p ?l1) (at ?info ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2))\n   )\n(:action reached_the_remote_system;\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?ping_succeed - ping_succeed ?server_checked - server_checked)\n      :precondition (and (at ?p ?l1) (inventory ?p ?server_checked) (inventory ?p ?ping_succeed) (blocked ?l1 ?dir ?l2) (at ?ping_succeed ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2)) \n   ); onward to step 4\n(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )\n(:action gain_access_with_password\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?password - password)\n      :precondition (and (password_cracked ?p) (blocked ?l1 ?dir ?l2) (at ?password ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) (not (password_cracked ?p)))\n   ); ; onward to step 7\n(:action get ; get a item\n      :parameters (?p - player ?t - item ?l - location)\n      :precondition (and (not (inventory ?p ?t)) (at ?t ?l) (at ?p ?l)) ; \n      :effect (inventory ?p ?t)\n   )\n(:action crack_password_by_brute_force\n      :parameters (?p - player ?l1 - location ?password - password)\n      :precondition (and (at ?p ?l1) (at ?password ?l1) )\n      :effect (password_cracked ?p)\n   )\n(:action hardcode_password\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (hardcoded_secret_password ?p)\n   )\n(:action create_fewest_file\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (not (create_more_file_than_need ?p))\n   )\n(:action bypass_standard_authentication_system\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?malware - malware)\n      :precondition (and (malware_installed ?p) (blocked ?l1 ?dir ?l2) (at ?malware ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) (not (malware_installed ?p)))\n   ); ; onward to step 9\n(:action check_email_server;\n      :parameters (?p - player ?server_checked - server_checked ?l1 - location ?info - all_information)\n      :precondition (and (not (inventory ?p ?server_checked)) (at ?p ?l1) (collected_all_info ?p)); \n      :effect (inventory ?p ?server_checked)\n   )\n(:action not_let_administrator_know\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (not (administrator_know_compromised ?p))\n   )\n(:action delete_additional_users\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (not (additional_users ?p))\n   )\n(:action found_path_in_system\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?TCP_UDP_ports - TCP_UDP_ports)\n      :precondition (and (at ?p ?l1) (blocked ?l1 ?dir ?l2) (inventory ?p ?TCP_UDP_ports) (at ?TCP_UDP_ports ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)))\n   ); onward to step 6\n(:action install_malware\n      :parameters (?p - player ?malware - malware ?l1 - location)\n      :precondition (and (inventory ?p ?malware) (at ?malware ?l1) (at ?p ?l1))\n      :effect (malware_installed ?p)\n   )\n(:action enumeration;\n      :parameters (?p - player ?info - all_information ?l - location ?usernames - usernames ?hostnames - hostnames ?network - network ?IP - IP ?settings - settings ?applications - applications ?SNMP_and_DNS - SNMP_and_DNS)\n      :precondition (and (not (inventory ?p ?info)) (at ?info ?l) (at ?p ?l) (inventory ?p ?usernames) (inventory ?p ?hostnames) (inventory ?p ?network) (inventory ?p ?IP) (inventory ?p ?settings) (inventory ?p ?applications) (inventory ?p ?SNMP_and_DNS)) ; \n      :effect (collected_all_info ?p)\n   )\n(:action take_control_of_system\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?memory_layout - memory_layout)\n      :precondition (and (is_root_user ?p) (blocked ?l1 ?dir ?l2) (at ?memory_layout ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) (not (is_root_user ?p)))\n   ); ; onward to step 8\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: Use a Mic in Team Fortress 2\n\nSteps:\n- make_microphone_connected mic\n- find_panel panel\n- check_panel panel\n- talk_using_microphone mic voice\n- use_microphone voice\n- advise_teammates advice\n\nDescriptions:\n- Make sure that your microphone is working and connected first.\n- Find various panels at the top like \"Multiplayer\", \"Mouse\", \"Audio\", etc.\n- Click on the Voice panel.\n- Start talking with other players using your microphone!\n- Use the microphone to communicate with your team in a more efficient manner and demand that your voice is heard!\n- Advise teammates as well as make game plans to help and support your team.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
    }
]