[
    "Sure, let's generate the PDDL actions for the given task \"boil_water\" based on the provided steps, descriptions, and entity states.\n\nTask: boil_water\n\nSteps:\n1. Gather dry tinder and kindling.\n2. Create a campfire.\n3. Collect fresh water.\n4. Boil the water.\n\nDescriptions:\n- Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.\n- Use dry sticks, branches, or tree bark to serve as your kindling.\n- Search for a source of fresh water.\n- Melt snow or ice if you can find some. If you find ice or snow on the ground in the woods, collect it so you can melt it down for fresh drinking water. You can place the ice or snow in a container and place it next to a fire to melt it or you can hold the container to use your body heat to melt it.\n\nEntity State:\n- water: {'boiling pot': [{'attribute': 'temperature', 'before': 'cold', 'after': 'hot'}, {'attribute': 'fullness', 'before': 'empty', 'after': 'full'}, {'attribute': 'location', 'before': 'in pipes', 'after': 'out of faucet'}]}\n- campfire: {'fire stone': [{'attribute': 'step', 'before': 'unfound', 'after': 'found'}, {'attribute': 'availability', 'before': 'on ground', 'after': 'in inventory'}]}\n- grass tinder: {'tin': [{'attribute': 'volume', 'before': 'full', 'after': 'empty'}, {'attribute': 'volume', 'before': 'full', 'after': 'empty'}]}\n- wood: {'bare wood': [{'attribute': 'moisture', 'before': 'dry', 'after': 'wet'}, {'attribute': 'texture', 'before': 'smooth', 'after': 'tacky'}, {'attribute': 'location', 'before': 'absent', 'after': 'present'}, {'attribute': 'moisture', 'before': 'dry', 'after': 'wet'}, {'attribute': 'color', 'before': 'brown', 'after': 'white'}, {'attribute': 'weight', 'before': 'lighter', 'after': 'heavier'}, {'attribute': 'moisture', 'before': 'dry', 'after': 'wet'}, {'attribute': 'texture', 'before': 'smooth', 'after': 'sticky'}, {'attribute': 'moisture', 'before': 'dry', 'after': 'wet'}]}\n\nPDDL Actions:\n\n```lisp\n;; Action 1: Gather tinder\n(:action gather_tinder\n    :parameters (?t - tinder)\n    :precondition (and (not (collected ?t)) (dry ?t))\n    :effect (collected ?t)\n)\n\n;; Action 2: Gather kindling\n(:action gather_kindling\n    :parameters (?k - kindling)\n    :precondition (and (not (collected ?k)) (dry ?k))\n    :effect (collected ?k)\n)\n\n;; Action 3: Create campfire\n(:action create_campfire\n    :parameters (?t - tinder ?k - kindling)\n    :precondition (and (collected ?t) (collected ?k))\n    :effect (campfire_created)\n)\n\n;; Action 4: Collect water\n(:action collect_water\n    :parameters (?w - water)\n    :precondition (and (not (collected ?w)) (fresh ?w))\n    :effect (collected ?w)\n)\n\n;; Action 5: Boil water\n(:action boil_water\n    :parameters (?w - water ?c - campfire)\n    :precondition (and (collected ?w) (campfire_created))\n    :effect (and (boiled ?w) (temperature ?w hot))\n)\n```\n\nExplanation:\n1. **gather_tinder**: This action gathers dry tinder materials.\n2. **gather_kindling**: This action gathers dry kindling materials.\n3. **create_campfire**: This action creates a campfire using the collected tinder and kindling.\n4. **collect_water**: This action collects fresh water.\n5. **boil_water**: This action boils the collected water using the created campfire.\n\nThese actions align with the task of boiling water, ensuring each step is logically connected and the required preconditions and effects are clearly defined.",
    "To generate PDDL actions for the task \"collect_fuel,\" we will follow the provided instructions and create actions based on the given descriptions and entity states. Since the steps were not explicitly listed, I'll derive them from the descriptions and entity states provided.\n\n### Task: collect_fuel\n\n#### Steps (Inferred from Descriptions):\n1. Find tinder (small, dry material).\n2. Gather kindling (small twigs and branches).\n\n### PDDL Actions\n\n#### Action 1: Find Tinder\n\n```pddl\n(:action find_tinder\n    :parameters (?t - tinder)\n    :precondition (not (found_tinder ?t))\n    :effect (found_tinder ?t)\n)\n```\n\n- **Parameters**: `?t - tinder` represents the tinder material.\n- **Preconditions**: The tinder has not been found yet `(not (found_tinder ?t))`.\n- **Effects**: Marks the tinder as found `(found_tinder ?t)`.\n\n#### Action 2: Gather Kindling\n\n```pddl\n(:action gather_kindling\n    :parameters (?k - kindling)\n    :precondition (not (gathered_kindling ?k))\n    :effect (gathered_kindling ?k)\n)\n```\n\n- **Parameters**: `?k - kindling` represents the kindling material.\n- **Preconditions**: The kindling has not been gathered yet `(not (gathered_kindling ?k))`.\n- **Effects**: Marks the kindling as gathered `(gathered_kindling ?k)`.\n\n### Notes:\n- The actions focus on the key elements of collecting fuel: finding tinder and gathering kindling.\n- The entity states provided do not directly impact the actions since they describe unrelated aspects such as the sound in the camp or the decoration of a helmet. Therefore, they are not included in the PDDL actions.\n- If additional steps or relevant details are provided, further actions can be created or modified accordingly.",
    "To generate PDDL actions for the task \"find_tinder\" based on the provided descriptions and entity states, we need to first understand the task and relevant steps. The task involves creating a snare to catch small game, which is a part of survival skills often related to finding or preparing tinder. However, since the task is specifically about finding tinder, we will focus on relevant actions that could involve gathering or preparing materials, such as grass tinder. Let's generate the PDDL actions:\n\n### PDDL Actions for Task: find_tinder\n\n#### Action 1: collect_grass_tinder\n```lisp\n(:action collect_grass_tinder\n    :parameters (?g - grass_tinder ?t - tin)\n    :precondition (and (not (collected ?g)) (volume_full ?t))\n    :effect (and (collected ?g) (volume_empty ?t))\n)\n```\n- **Parameters**: `?g` represents grass tinder, and `?t` represents a tin.\n- **Preconditions**: The grass tinder has not been collected, and the tin is full.\n- **Effects**: The grass tinder is collected, and the tin becomes empty.\n\n#### Action 2: prepare_snare\n```lisp\n(:action prepare_snare\n    :parameters (?s - string ?w - wire)\n    :precondition (or (available ?s) (available ?w))\n    :effect (snare_ready)\n)\n```\n- **Parameters**: `?s` represents string, and `?w` represents wire.\n- **Preconditions**: Either string or wire is available.\n- **Effects**: The snare is ready for use.\n\n#### Action 3: set_snare\n```lisp\n(:action set_snare\n    :parameters (?n - npc ?s - snare)\n    :precondition (and (snare_ready) (visible ?n))\n    :effect (and (set ?s) (invisible ?n))\n)\n```\n- **Parameters**: `?n` represents an NPC, and `?s` represents a snare.\n- **Preconditions**: The snare is ready, and the NPC is visible.\n- **Effects**: The snare is set, and the NPC becomes invisible.\n\n### Notes:\n- The task \"find_tinder\" involves collecting grass tinder, which is reflected in the action `collect_grass_tinder`.\n- The preparation and setting of a snare are included as they relate to survival tasks, but they are adapted to fit the focus on tinder collection.\n- The entity states provided are used to define preconditions and effects, ensuring that the actions reflect changes in the environment or object states.\n\nThese actions capture the logical steps involved in the task, ensuring that each step is relevant to the overall goal of finding and preparing tinder.",
    "To generate PDDL actions for the task \"start_fire,\" we need to focus on the relevant steps that contribute to the task of starting a fire. Based on the provided descriptions and entity states, we will create actions related to gathering tinder, kindling, and other necessary components for starting a fire. Let's generate the PDDL actions:\n\n### PDDL Actions for \"start_fire\"\n\n1. **Action: gather_tinder**\n   - **Parameters:** (?t - tinder)\n   - **Preconditions:** (not (collected ?t))\n   - **Effects:** (collected ?t)\n\n```lisp\n(:action gather_tinder\n    :parameters (?t - tinder)\n    :precondition (not (collected ?t))\n    :effect (collected ?t)\n)\n```\n\n2. **Action: gather_kindling**\n   - **Parameters:** (?k - kindling)\n   - **Preconditions:** (not (collected ?k))\n   - **Effects:** (collected ?k)\n\n```lisp\n(:action gather_kindling\n    :parameters (?k - kindling)\n    :precondition (not (collected ?k))\n    :effect (collected ?k)\n)\n```\n\n3. **Action: prepare_fire_pit**\n   - **Parameters:** (?f - fire_pit)\n   - **Preconditions:** (not (prepared ?f))\n   - **Effects:** (prepared ?f)\n\n```lisp\n(:action prepare_fire_pit\n    :parameters (?f - fire_pit)\n    :precondition (not (prepared ?f))\n    :effect (prepared ?f)\n)\n```\n\n4. **Action: ignite_fire**\n   - **Parameters:** (?t - tinder ?k - kindling ?f - fire_pit)\n   - **Preconditions:** \n     - (collected ?t)\n     - (collected ?k)\n     - (prepared ?f)\n     - (not (lit ?f))\n   - **Effects:** (lit ?f)\n\n```lisp\n(:action ignite_fire\n    :parameters (?t - tinder ?k - kindling ?f - fire_pit)\n    :precondition (and\n                    (collected ?t)\n                    (collected ?k)\n                    (prepared ?f)\n                    (not (lit ?f))\n                  )\n    :effect (lit ?f)\n)\n```\n\n### Explanation:\n- **gather_tinder**: This action represents the collection of small, dry materials that can be used as tinder. The precondition checks if the tinder is not already collected, and the effect marks it as collected.\n- **gather_kindling**: Similar to gathering tinder, this action involves collecting small twigs and branches to be used as kindling.\n- **prepare_fire_pit**: Prepares a fire pit where the fire will be started. The precondition ensures the fire pit is not already prepared, and the effect sets it as prepared.\n- **ignite_fire**: This action combines the collected tinder and kindling to ignite the fire in the prepared fire pit. It checks that all necessary components are collected and the fire pit is prepared before lighting the fire.\n\nThese actions focus on the essential steps for starting a fire based on the provided descriptions and entity states.",
    "Based on the provided task description and entity states, I will generate PDDL actions relevant to the task of building a teepee. Here are the PDDL actions based on the steps and descriptions:\n\n### PDDL Actions:\n\n#### Action 1: Build a Snare\n```lisp\n(:action build_snare\n    :parameters (?s - string ?w - wire ?l - loop)\n    :precondition (and\n                    (available ?s)\n                    (available ?w)\n                    (not (snare_built ?l))\n                  )\n    :effect (snare_built ?l)\n)\n```\n*Preconditions*: A piece of string or wire is available.  \n*Effects*: A snare is built.\n\n#### Action 2: Collect Tinder\n```lisp\n(:action collect_tinder\n    :parameters (?t - tinder_material)\n    :precondition (and\n                    (dry ?t)\n                    (not (collected ?t))\n                  )\n    :effect (collected ?t)\n)\n```\n*Preconditions*: The tinder material is dry and not yet collected.  \n*Effects*: The tinder material is collected.\n\n#### Action 3: Gather Kindling\n```lisp\n(:action gather_kindling\n    :parameters (?k - twig ?b - branch)\n    :precondition (and\n                    (small ?k)\n                    (small ?b)\n                    (not (gathered ?k))\n                    (not (gathered ?b))\n                  )\n    :effect (and\n              (gathered ?k)\n              (gathered ?b)\n            )\n)\n```\n*Preconditions*: Small twigs and branches are available and not yet gathered.  \n*Effects*: The twigs and branches are gathered as kindling.\n\n#### Action 4: Avoid Large Animals\n```lisp\n(:action avoid_large_animals\n    :parameters (?a - animal)\n    :precondition (and\n                    (large ?a)\n                    (not (hunted ?a))\n                  )\n    :effect (safe_from ?a)\n)\n```\n*Preconditions*: The animal is large and not hunted.  \n*Effects*: The agent is safe from the large animal.\n\nThese actions are designed to align with the task of building a teepee and the descriptions provided. If any adjustments are needed to better match the task's requirements, feel free to let me know!"
]