[
    "To generate PDDL actions for the task \"build_raft,\" we need to consider the steps and descriptions provided. However, since no specific steps are outlined, I'll assume a general procedure for building a raft and create PDDL actions based on that. Here are the actions:\n\n### PDDL Actions for \"build_raft\"\n\n#### Step 1: Gather Driftwood\n```lisp\n(:action gather_driftwood\n    :parameters (?p - person ?d - driftwood ?b - beach)\n    :precondition (and\n                    (at ?p ?b)\n                    (available ?d ?b)\n                    (not (collected ?d)))\n    :effect (and\n              (collected ?d)\n              (has ?p ?d))\n)\n```\n\n#### Step 2: Assemble Raft\n```lisp\n(:action assemble_raft\n    :parameters (?p - person ?d - driftwood ?r - raft ?b - beach)\n    :precondition (and\n                    (at ?p ?b)\n                    (has ?p ?d)\n                    (not (assembled ?r)))\n    :effect (and\n              (assembled ?r)\n              (not (has ?p ?d))\n              (raft-available ?r))\n)\n```\n\n#### Step 3: Create Rescue Signal\n```lisp\n(:action create_rescue_signal\n    :parameters (?p - person ?s - signal ?b - beach)\n    :precondition (and\n                    (at ?p ?b)\n                    (not (created ?s)))\n    :effect (and\n              (created ?s)\n              (signal-visible ?s))\n)\n```\n\n#### Step 4: Launch Raft\n```lisp\n(:action launch_raft\n    :parameters (?p - person ?r - raft ?b - beach)\n    :precondition (and\n                    (at ?p ?b)\n                    (assembled ?r)\n                    (raft-available ?r))\n    :effect (and\n              (in-water ?r)\n              (not (raft-available ?r))\n              (on-raft ?p ?r))\n)\n```\n\n### Descriptions & Entity States Considered:\n- **Driftwood** is available on the beach and can be collected.\n- **Raft** is assembled from driftwood and can be launched into the water.\n- **Rescue Signal** is created on the beach to aid rescuers.\n\nThese actions represent a simplified version of the process of building and using a raft, incorporating the need to gather materials, assemble the structure, create a signal for rescue, and finally launch the raft. Adjustments can be made based on further details or specific steps if provided.",
    "Given the provided task and steps, I will generate PDDL actions for creating a shelter. \n\nTask: create_shelter\n\nSteps:\n1. Find a suitable location.\n2. Gather materials (e.g., branches, leaves).\n3. Construct the shelter frame.\n4. Cover the frame with leaves and other materials.\n\nDescriptions:\n- Find a suitable location for the shelter.\n- Collect various materials like branches and leaves.\n- Use the materials to build the frame of the shelter.\n- Cover the frame with leaves and other materials to complete the shelter.\n\nEntity State:\n- {'pencil': {'pen': [{'attribute': 'location', 'before': 'on counter', 'after': 'in hand'}], 'concept_knowledge': ['You can use [[a pencil]] to [[write something on paper]]', '[[writing]] is related to [[pencil]]', 'You are likely to find [[a pencil]] in [[a pencil-case]]', '[[A pencil]] can [[mark a paper]]', '[[a pencil]] is [[made from graphite]]', '[[L\u00e1pis]] is a translation of [[pencil]]']}, 'agent': {'game character': [{'attribute': 'location', 'before': 'further out', 'after': 'in'}, {'attribute': 'location', 'before': 'out', 'after': 'hidden'}, {'attribute': 'focus', 'before': 'pulling out pistol', 'after': 'investigating'}, {'attribute': 'focus', 'before': 'investigating routes', 'after': 'waiting'}, {'attribute': 'location', 'before': 'in hiding spot', 'after': 'now at bomb'}, {'attribute': 'focus', 'before': 'hiding', 'after': 'defusing'}], 'concept_knowledge': ['[[agent]] is related to [[secret]]']}}\n\nPDDL Actions:\n\n```lisp\n(define (domain create_shelter)\n\n  ;; Action 1: Find a suitable location\n  (:action find_location\n    :parameters (?loc - location)\n    :precondition (not (selected_location ?loc))\n    :effect (selected_location ?loc)\n  )\n\n  ;; Action 2: Gather materials\n  (:action gather_materials\n    :parameters (?m - material)\n    :precondition (and (selected_location ?loc) (not (collected ?m)))\n    :effect (collected ?m)\n  )\n\n  ;; Action 3: Construct shelter frame\n  (:action construct_frame\n    :parameters (?s - shelter ?m - material)\n    :precondition (and (selected_location ?loc) (collected ?m) (not (frame_constructed ?s)))\n    :effect (frame_constructed ?s)\n  )\n\n  ;; Action 4: Cover frame with materials\n  (:action cover_frame\n    :parameters (?s - shelter ?m - material)\n    :precondition (and (frame_constructed ?s) (collected ?m) (not (covered ?s)))\n    :effect (covered ?s)\n  )\n\n)\n```\n\nExplanation:\n1. **find_location**: This action finds a suitable location for the shelter. The precondition ensures that the location is not already selected, and the effect marks the location as selected.\n2. **gather_materials**: This action gathers materials needed for the shelter. The precondition checks that a location has been selected and the material is not already collected. The effect marks the material as collected.\n3. **construct_frame**: This action constructs the frame of the shelter. The precondition ensures that the location is selected, materials are collected, and the frame is not already constructed. The effect marks the frame as constructed.\n4. **cover_frame**: This action covers the frame with the collected materials. The precondition checks that the frame is constructed, materials are collected, and the shelter is not yet covered. The effect marks the shelter as covered.\n\nThese actions represent the steps necessary to create a shelter, with appropriate conditions and effects to ensure the logical sequence of actions."
]