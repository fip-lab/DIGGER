[
    "To generate PDDL actions for the task \"collect-water,\" we need to consider the steps and descriptions provided, even though some steps may not directly relate to the task of collecting water. I'll focus on generating actions that are relevant to the task and align with the entity states provided. Since no specific steps are given, I'll assume some logical steps for collecting water based on the provided entity states and descriptions.\n\n### PDDL Actions for Collecting Water\n\n#### Action 1: Wait for Chaos to Subside\nThis action addresses the initial chaos and ensures safety before proceeding with water collection.\n\n```lisp\n(:action wait_for_chaos_to_subside\n    :parameters (?agent - person)\n    :precondition (and\n                    (chaos ?agent)\n                    (not (safe ?agent)))\n    :effect (safe ?agent)\n)\n```\n\n#### Action 2: Collect Water from Faucet\nThis action involves collecting water from a faucet, assuming the water is still running.\n\n```lisp\n(:action collect_water_from_faucet\n    :parameters (?faucet - faucet ?container - container)\n    :precondition (and\n                    (location ?container on_counter_top)\n                    (location ?faucet under_faucet)\n                    (empty ?container)\n                    (water_flowing ?faucet))\n    :effect (and\n              (full ?container)\n              (not (empty ?container)))\n)\n```\n\n#### Action 3: Use Bathtub to Store Water\nThis action involves using the bathtub to store water, which could be a large reservoir in case of water shortages.\n\n```lisp\n(:action use_bathtub_to_store_water\n    :parameters (?bathtub - bathtub ?water_source - water)\n    :precondition (and\n                    (empty ?bathtub)\n                    (water_available ?water_source))\n    :effect (and\n              (full ?bathtub)\n              (not (empty ?bathtub)))\n)\n```\n\n#### Action 4: Eat Perishable Food First\nThis action ensures that perishable food is consumed first to minimize waste during the crisis.\n\n```lisp\n(:action eat_perishable_food_first\n    :parameters (?food - food ?storage - refrigerator)\n    :precondition (and\n                    (in_refrigerator ?food ?storage)\n                    (perishable ?food))\n    :effect (and\n              (consumed ?food)\n              (not (in_refrigerator ?food ?storage)))\n)\n```\n\n### Explanation\n- **Action 1**: This action is about ensuring safety before taking any further steps, which is crucial in a chaotic situation.\n- **Action 2**: Collects water from a faucet into a container, assuming the faucet is still operational.\n- **Action 3**: Uses the bathtub as a large container to store water for future use.\n- **Action 4**: Focuses on consuming perishable food items first, aligning with the description provided.\n\nThese actions are designed to align with the task of collecting water while considering the context of a crisis situation as described.",
    "Given the task \"turn-on-radio\" and the descriptions provided, we need to generate PDDL actions that reflect the steps necessary to turn on a radio, especially in the context of an EMP event. The entity states provided do not directly relate to the task, so we will focus on the descriptions to create relevant actions.\n\n### PDDL Actions for \"turn-on-radio\"\n\n1. **Action Name:** turn_on_radio\n   - **Parameters:** (?r - radio ?p - person)\n   - **Preconditions:** \n     - (radio_functional ?r)\n     - (not (radio_on ?r))\n   - **Effects:** \n     - (radio_on ?r)\n     - (gathering_information ?p)\n\n2. **Action Name:** tune_radio\n   - **Parameters:** (?r - radio ?s - signal ?p - person)\n   - **Preconditions:** \n     - (radio_on ?r)\n     - (signal_available ?s)\n     - (not (tuned_in ?r ?s))\n   - **Effects:** \n     - (tuned_in ?r ?s)\n     - (receiving_information ?p)\n\n3. **Action Name:** keep_radio_on\n   - **Parameters:** (?r - radio ?p - person)\n   - **Preconditions:** \n     - (radio_on ?r)\n     - (gathering_information ?p)\n   - **Effects:** \n     - (continuously_receiving ?p)\n\n### Explanation\n\n- **turn_on_radio:** This action represents the initial step of turning on the radio. The precondition checks if the radio is functional and not already on. The effect is that the radio is turned on, and the person starts gathering information.\n\n- **tune_radio:** This action involves tuning the radio to a specific signal. It requires the radio to be on and a signal to be available. The result is that the radio is tuned in, and the person receives information.\n\n- **keep_radio_on:** This action ensures the radio remains on to continuously receive information. It assumes the radio is already on and the person is gathering information. The effect is the person continues to receive information.\n\nThese actions capture the essence of using a radio to gather information in a scenario where an EMP might disrupt other electronics. The focus is on ensuring the radio is used effectively to receive crucial information.",
    "Based on the provided task and steps, here are the PDDL actions for the task \"get-home\":\n\n### Task: get-home\n\n### Descriptions:\n- If you\u2019re outside during a nuclear blast, cover your mouth and nose with a cloth or mask to avoid breathing in toxic particles.\n\n### Entity State:\n- {'npc': {'helmet': [{'attribute': 'decoration', 'before': 'bare | plain', 'after': 'camouflaged'}, {'attribute': 'visibility', 'before': 'visible', 'after': 'invisible'}], 'concept_knowledge': []}}\n\n### PDDL Actions:\n\n#### Action 1: cover_mouth_and_nose\n```lisp\n(:action cover_mouth_and_nose\n    :parameters (?npc - character ?cloth - item)\n    :precondition (and\n                    (location ?npc outside)\n                    (availability ?cloth in_hand)\n                    (safety_level ?npc unprotected))\n    :effect (and\n             (safety_level ?npc protected)\n             (status ?cloth in_use))\n  )\n```\n\n#### Action 2: find_shelter\n```lisp\n(:action find_shelter\n    :parameters (?npc - character ?shelter - place)\n    :precondition (and\n                    (location ?npc outside)\n                    (safety_level ?npc protected)\n                    (knowledge ?npc shelter_location))\n    :effect (and\n             (location ?npc ?shelter)\n             (safety_level ?npc more_protected))\n  )\n```\n\n#### Action 3: travel_to_home\n```lisp\n(:action travel_to_home\n    :parameters (?npc - character ?home - place)\n    :precondition (and\n                    (location ?npc ?shelter)\n                    (safety_level ?npc more_protected)\n                    (knowledge ?npc home_location))\n    :effect (and\n             (location ?npc ?home)\n             (safety_level ?npc safe))\n  )\n```\n\n#### Action 4: enter_home\n```lisp\n(:action enter_home\n    :parameters (?npc - character ?home - place)\n    :precondition (and\n                    (location ?npc ?home)\n                    (safety_level ?npc safe)\n                    (status ?home door_open))\n    :effect (and\n             (location ?npc inside_home)\n             (status ?home door_closed))\n  )\n```\n\n### Summary:\nThe actions defined above guide the character (npc) through a series of steps to get home safely during a nuclear blast. The character covers their mouth and nose, finds shelter, travels to home, and finally enters home, ensuring safety at each step.",
    "Based on the provided task and entity states, here are the PDDL actions for the task \"prepare-for-attack\":\n\n### PDDL Actions:\n\n#### Action 1: Place Drop Cloth\n```lisp\n(:action place_drop_cloth\n    :parameters (?b - basement ?dc - drop_cloth)\n    :precondition (and\n                    (not (drop_cloth_present ?b ?dc))\n                    (drop_cloth_uncovered ?b ?dc))\n    :effect (and \n            (drop_cloth_present ?b ?dc)\n            (drop_cloth_covered ?b ?dc))\n)\n```\n\n#### Action 2: Remove Drop Cloth\n```lisp\n(:action remove_drop_cloth\n    :parameters (?b - basement ?dc - drop_cloth)\n    :precondition (and\n                    (drop_cloth_present ?b ?dc)\n                    (drop_cloth_covered ?b ?dc))\n    :effect (and \n            (not (drop_cloth_present ?b ?dc))\n            (drop_cloth_removed ?b ?dc))\n)\n```\n\n#### Action 3: Camouflage Helmet\n```lisp\n(:action camouflage_helmet\n    :parameters (?n - npc ?h - helmet)\n    :precondition (and\n                    (helmet_bare ?n ?h)\n                    (helmet_visible ?n ?h))\n    :effect (and \n            (helmet_camouflaged ?n ?h)\n            (helmet_invisible ?n ?h))\n)\n```\n\n### Explanation:\n1. **Place Drop Cloth**: This action involves placing a drop cloth in the basement, changing its state from absent to present, and uncovered to covered.\n\n2. **Remove Drop Cloth**: This action involves removing the drop cloth from the basement, changing its state from present to removed.\n\n3. **Camouflage Helmet**: This action involves camouflaging the helmet of an NPC, changing its state from bare and visible to camouflaged and invisible.\n\nThese actions have been generated by considering the entity states and descriptions provided, aligning with the task of preparing for an attack."
]