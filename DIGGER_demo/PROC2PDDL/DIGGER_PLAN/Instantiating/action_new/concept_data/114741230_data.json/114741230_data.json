[
    "(:action initiate\n    :parameters (?entity - entity ?resource - resource)\n    :precondition (and\n                    (available ?entity)\n                    (not (initiated ?entity))\n                    (not (full ?resource)))\n    :effect (and\n              (initiated ?entity)\n              (increase (member_count ?resource) 1))",
    "(:action set ; Set a property for a society\n  :parameters (?npc - person ?ss - society ?property - property_type)\n  :precondition (and\n                  (initiated ?npc)\n                  (member ?npc)\n                  (not (property_set ?ss ?property)))\n  :effect (property_set ?ss ?property))",
    "(:action create\n    ; Create a new entity or attribute within a society\n    :parameters (?npc - person ?ss - society ?entity - entity_type)\n    :precondition (and\n                    (initiated ?npc)\n                    (member ?npc ?ss)\n                    (not (created ?ss ?entity)))\n    :effect (created ?ss ?entity)\n)",
    "(:action teach ; Teach a member a new concept or task\n    :parameters (?teacher - person ?student - person ?concept - concept)\n    :precondition (and\n                    (initiated ?student)\n                    (member ?student)\n                    (not (knowledge ?student ?concept)))\n    :effect (knowledge ?student ?concept)\n)",
    "(:action read ; Perform a reading task and update the reading status\n  :parameters (?agent - entity ?resource - resource_type)\n  :precondition (and \n                 (initiated ?agent)\n                 (member ?agent)\n                 (not (read_status ?resource)))\n  :effect (read_status ?resource)\n)"
]