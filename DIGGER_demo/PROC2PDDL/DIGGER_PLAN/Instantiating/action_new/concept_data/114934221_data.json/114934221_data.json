[
    "(:action defend\n  :parameters (?entity - agent ?threat - object ?location - location ?vessel - object)\n  :precondition (and\n                  (at ?entity ?vessel)\n                  (threat-present ?threat ?location)\n                  (aware-of-threat ?entity)\n                  (vessel_location ?vessel in_open_water)\n                 )\n  :effect (and\n           (defending ?entity ?vessel)\n           (not (threat-attacking ?entity))",
    "(:action attack\n  ;; Attack a target and update the status\n  :parameters (?attacker - entity ?target - entity ?location - location)\n  :precondition (and \n                  (engaged ?attacker ?target ?location)\n                  (threat_present ?target ?location)\n                )\n  :effect (and \n            (threat_retreating ?target ?location)\n            (not (attacking ?target ?attacker))",
    "(:action attack_ship\n    :parameters (?agent - person ?ship - vehicle)\n    :precondition (and\n                   (on_board ?agent ?ship)\n                   (not (damaged ?ship))\n                  )\n    :effect (damaged ?ship)\n)",
    "(:action make ; Create or transform a state of an entity\n    :parameters (?actor - agent ?target - object)\n    :precondition (and\n                   (available ?actor)\n                   (not (transformed ?target))\n                  )\n    :effect (and\n             (transformed ?target)\n             (not (original_state ?target))",
    "(:action block ; Block an entity to alter its state or deter its action\n :parameters (?entity - object ?obstacle - object ?zone - area)\n :precondition (and\n                (object_location ?obstacle in_zone ?zone)\n                (object_location ?entity in_different_zone ?zone)\n                (not (object_deterred ?entity))\n               )\n :effect (and\n          (object_location ?entity in_zone ?zone)\n          (object_deterred ?entity)\n         )",
    "(:action take\n  :parameters (?npc - agent ?target - entity ?tool - object)\n  :precondition (and\n                  (near ?target ?npc)\n                  (has_tool ?npc ?tool)\n                  (not (handled ?npc ?target))\n                 )\n  :effect (and\n           (handled ?npc ?target)\n           (target_condition ?target modified)\n          )"
]