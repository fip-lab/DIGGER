[
    "(:action get_shelter\n    :parameters (?npc - npc ?building - building ?basement - basement)\n    :precondition (and\n                    (strong_building ?building)\n                    (has_basement ?building ?basement)\n                    (safe_location ?building))\n    :effect (and\n              (in_shelter ?npc ?building)\n              (protected ?npc)\n              (hidden ?npc))",
    "(:action clean_house\n    :parameters (?cleaner - person ?house - building)\n    :precondition (and\n                    (assigned_cleaner ?cleaner ?house)\n                    (dirty ?house))\n    :effect (and\n              (clean ?house)\n              (satisfied ?cleaner))",
    "(:action get ; Obtain or prepare a resource and update its state\n    :parameters (?entity - object ?resource - object)\n    :precondition (and\n                    (not (obtained ?entity ?resource))\n                    (available ?resource))\n    :effect (and\n              (obtained ?entity ?resource)\n              (processed ?resource ?entity))",
    "(:action clean ; Clean a resource and update its status\n  :parameters (?entity - object)\n  :precondition (and \n                  (messy ?entity)\n                  (dusty ?entity))\n  :effect (and \n            (not (messy ?entity))",
    "(:action cover\n    :parameters (?entity - object ?material - material)\n    :precondition (and\n                    (in_location ?material ?entity)\n                    (not (covered ?entity)))\n    :effect (and\n              (covered ?entity)\n              (secure ?entity))",
    "(:action camouflage ; Camouflage an item and update the entity's state\n  :parameters (?npc - entity ?item - object ?location - place)\n  :precondition (and\n                  (at ?npc ?location)\n                  (usable ?item)\n                  (not (camouflaged ?item))\n                  (not (hidden ?npc)))\n  :effect (and\n            (camouflaged ?item)\n            (hidden ?npc))",
    "(:action drink ; Drink a liquid and update hydration status\n    :parameters (?npc - character ?liquid - object)\n    :precondition (and (purified ?liquid) (not (hydrated ?npc)))\n    :effect (hydrated ?npc)\n)",
    "(:action learn ; Learn a skill or complete a learning task\n    :parameters (?npc - character ?item - object)\n    :precondition (has ?npc ?item)\n    :effect (learned ?npc ?item)\n)",
    "(:action build ; Build or create an item using available resources\n  :parameters (?npc - character ?resource - object ?item - object)\n  :precondition (and\n    (has_skill ?npc) ; Represents the necessary skill or knowledge\n    (has_resource ?resource) ; Represents the availability of necessary materials\n    (not (built ?item)) ; Ensures the item hasn't been built yet\n  )\n  :effect (and\n    (built ?item) ; Represents the completion of the building task\n    (not (has_resource ?resource))"
]