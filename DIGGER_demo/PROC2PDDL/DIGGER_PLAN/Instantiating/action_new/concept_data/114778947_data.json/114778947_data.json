[
    "(:action push\n    :parameters (?agent - entity ?target - object ?tool - resource)\n    :precondition (and\n        (has_tool ?agent ?tool)\n        (locked ?target)\n        (intact_state ?target)\n    )\n    :effect (and\n        (tool_applied ?tool ?target)\n        (not (intact_state ?target))",
    "(:action hook_latch\n        :parameters (?npc - agent ?car - vehicle ?hanger - tool)\n        :precondition (and\n          (hanger_inside_door ?hanger ?car)\n          (has_tool ?npc ?hanger)\n          (locked ?car)\n        )\n        :effect (and\n          (unlocked ?car)\n          (not (locked ?car))",
    "(:action hook ; Universal action to hook and manipulate objects\n  :parameters (?npc - agent ?item - object ?tool - tool)\n  :precondition (and\n    (has_tool ?npc ?tool)\n    (not (manipulated ?item))  ; Abstract precondition to ensure item is not already manipulated\n  )\n  :effect (and\n    (manipulated ?item)  ; Abstract effect to indicate the item has been manipulated\n  )\n)",
    "(:action straighten ; Straighten an object to modify its state\n  :parameters (?npc - agent ?object - tool)\n  :precondition (and\n    (has_tool ?npc ?object)\n    (not (straight ?object))\n    (modifiable ?object)\n  )\n  :effect (and\n    (straight ?object)\n    (not (hooked ?object))",
    "(:action SlideIntoSideOfDoor\n    :parameters (?u - user ?c - creditcard ?l - lock)\n    :precondition (and\n            (userHasCreditCard ?u ?c)\n            (lockInDoor ?l)\n            (creditCardInHand ?u ?c)\n            (doorLocked ?l)\n            )\n    :effect (and\n                (creditCardInDoorFrame ?c ?l)\n                (not (creditCardInHand ?u ?c))"
]