[
    "(:action perform_task ; Perform a task involving resource interaction\n  :parameters (?person - agent ?resource - object ?tool - object)\n  :precondition (and\n                  (at ?person ?resource)\n                  (or (and (not (salt_water ?resource)) (not (hydrated ?person))) ; For drinking tasks\n                      (has_tool ?person ?tool)) ; For carving tasks\n                )\n  :effect (and\n            (or (and (hydrated ?person) (not (thirsty ?person))",
    "(:action carve\n  :parameters (?person - agent ?material - object ?tool - tool)\n  :precondition (and\n    (at ?person ?material)\n    (at ?tool ?material)\n    (not (carved ?material))\n  )\n  :effect (and\n    (carved ?material)\n    (material_textured ?material tacky)\n    (tool_used ?tool)\n  )",
    "(:action check\n    ; Check a resource and update task status\n    :parameters (?agent - agent ?resource - resource ?item - object)\n    :precondition (and\n                    (at ?agent ?resource)\n                    (not (checked ?agent ?item))\n                  )\n    :effect (checked ?agent ?item)\n)",
    "(:action cook ; Prepare a food item using a tool\n  :parameters (?npc - person ?food - food ?tool - tool)\n  :precondition (and\n    (caught ?npc ?food)\n    (at ?food ?tool)\n    (not (cooked ?food))\n  )\n  :effect (and\n    (cooked ?food)\n  )",
    "(:action serve ; Serve an item and update its status\n  :parameters (?item - object ?container - container ?location - location)\n  :precondition (and\n    (prepared ?item)\n    (at ?container ?location)\n    (not (served ?item))\n  )\n  :effect (and\n    (in ?item ?container)\n    (served ?item)\n  )"
]