[
    "```lisp\n['(:action replace\n    :parameters (?actor - agent ?location - place ?item - thing)\n    :precondition (and (at ?actor ?location) (not (desired_state ?item)))\n    :effect (and (desired_state ?item) (not (undesired_state ?item))))\n\n(:action lay\n    :parameters (?npc - agent ?item - object ?location - place)\n    :precondition (and\n                    (ready ?item)\n                    (at ?item ?location)\n                    (position ?item ?initial_state))\n    :effect (and\n              (position ?item ?final_state)\n              (not (position ?item ?initial_state))))\n\n(:action dip_strips\n    :parameters (?npc - agent ?s - strip)\n    :precondition (and\n                    (dry ?s)\n                    (laid_out ?s))\n    :effect (and\n              (wet ?s)\n              (soaked ?s)\n              (not (dry ?s))))\n\n(:action dip\n    :parameters (?agent - agent ?item - object)\n    :precondition (and (dry ?item) (laid_out ?item))\n    :effect (and (wet ?item) (soaked ?item) (not (dry ?item))))\n\n(:action cut_stalks\n    :parameters (?npc - agent ?p - papyrus)\n    :precondition (and (has ?npc ?p) (not (stalks_cut ?p)))\n    :effect (stalks_cut ?p))\n\n(:action peel_papyrus_strips\n    :parameters (?npc - agent ?p - papyrus)\n    :precondition (and (stalks_cut ?p) (not (strips_peeled ?p)))\n    :effect (strips_peeled ?p))\n\n(:action cut\n    :parameters (?npc - agent ?item - object ?state_before - predicate ?state_after - predicate)\n    :precondition (and (has ?npc ?item) (not (?state_after ?item)) (?state_before ?item))\n    :effect (?state_after ?item))\n\n(:action peel\n    :parameters (?npc - agent ?item - object)\n    :precondition (and \n      (available ?npc) \n      (or \n        (and (papyrus ?item) (stalks_cut ?item) (not (peeled ?item)))\n        (and (papyrus ?item) (not (polished ?item)) (has-tool ?npc ?shell))))\n    :effect (and \n      (or \n        (peeled ?item)\n        (polished ?item))))\n\n(:action flatten\n    :parameters (?npc - agent ?ws - work_station ?item - object)\n    :precondition (and (not (flattened ?item)) (at ?npc ?ws) (has-tool ?ws))\n    :effect (flattened ?item))\n\n(:action laid\n    :parameters (?npc - agent ?item - object)\n    :precondition (and\n                    (dry ?item)\n                    (on_ground ?item))\n    :effect (and\n              (laid_out ?item)\n              (not (on_ground ?item))))\n]\n```"
]