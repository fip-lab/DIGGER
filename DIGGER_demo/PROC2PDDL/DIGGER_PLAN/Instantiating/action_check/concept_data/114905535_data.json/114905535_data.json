[
    "```lisp\n[\n  (:action create ; Create a structure or perform a transformation\n    :parameters (?npc - agent ?location - place ?resource - object)\n    :precondition (and \n                  (at ?npc ?location)\n                  (available ?resource)\n                  (not (structure_exists ?location))\n                  (can_perform ?npc))\n    :effect (and \n            (structure_exists ?location)\n            (not (available ?resource))\n    )\n  ),\n\n  (:action transform_state\n    :parameters (?entity - agent ?target - object ?location - place ?task - task_type)\n    :precondition (and \n                    (available ?entity)\n                    (not (completed ?task ?entity ?target))\n                    (can_perform ?entity ?task)\n                    (at ?entity ?location))\n    :effect (and \n            (completed ?task ?entity ?target)\n            (at ?entity ?new_location)\n    )\n  ),\n\n  (:action get ; Get a resource and update possession status\n    :parameters (?actor - agent ?source - place ?resource - item)\n    :precondition (and\n                    (at ?actor ?source)\n                    (contains ?source ?resource)\n                    (accessible ?resource))\n    :effect (and\n              (have ?actor ?resource)\n              (not (contains ?source ?resource))\n    )\n  ),\n\n  (:action transform\n    :parameters (?agent - agent ?entity - object ?location - place ?state1 - state ?state2 - state ?container - container)\n    :precondition (and\n                    (at ?agent ?location)\n                    (state1 ?entity)\n                    (holding ?agent ?entity))\n    :effect (and\n              (not (state1 ?entity))\n              (state2 ?entity)\n    )\n  ),\n\n  (:action put ; Put an item into a container or create a shelter\n    :parameters (?agent - agent ?item - object ?location - place ?container - container)\n    :precondition (and\n                    (at ?agent ?location)\n                    (holding ?agent ?item)\n                    (or\n                        (not (in ?item ?container))\n                        (and (available ?item) (not (shelter_exists ?location)))\n                    ))\n    :effect (and\n              (or\n                (and (in ?item ?container) (not (holding ?agent ?item)))\n                (shelter_exists ?location)\n              )\n    )\n  )\n]\n```"
]