[
    "```lisp\n[\n  (:action breathe\n    :parameters (?entity - agent)\n    :precondition (and (calm ?entity) (lungs_empty ?entity))\n    :effect (and (buoyant ?entity) (lungs_full ?entity) (not (lungs_empty ?entity)))\n  ),\n  (:action free\n    :parameters (?entity - object ?state - state)\n    :precondition (and (stuck ?entity ?state) (pressure ?entity))\n    :effect (and (not (stuck ?entity ?state)))\n  ),\n  (:action stay\n    :parameters (?n - agent ?s - object ?q - quicksand_area)\n    :precondition (and \n        (or (onBack ?n) (calm ?n) (stuck ?n ?q))\n        (or (inContact ?n ?q) (hasGuide ?n ?s))\n        (or (emptyLungs ?n) (underPressure ?n)))\n    :effect (and \n        (or (stable ?n) (buoyant ?n)))\n  ),\n  (:action identify_quicksand\n    :parameters (?q - quicksand_area)\n    :precondition (and (unidentified ?q))\n    :effect (and (identified ?q) (not (unidentified ?q)))\n  ),\n  (:action identify\n    :parameters (?entity - object)\n    :precondition (and (unidentified ?entity))\n    :effect (and (identified ?entity) (not (unidentified ?entity)))\n  ),\n  (:action mark\n    :parameters (?agent - agent ?target - object ?resource - object)\n    :precondition (and (identified ?target) (available ?resource))\n    :effect (and (marked ?target ?resource) (not (available ?resource)))\n  ),\n  (:action create\n    :parameters (?creator - agent ?entity - object ?condition - condition)\n    :precondition (and (marked ?condition ?creator) (undefined ?entity))\n    :effect (and (defined ?entity) (satisfies ?entity ?condition) (not (undefined ?entity)))\n  ),\n  (:action guide\n    :parameters (?area - location ?entity - agent ?hazard - condition)\n    :precondition (and (identified ?area ?hazard) (unaware ?entity))\n    :effect (and (aware ?entity) (avoiding ?entity ?area) (not (unaware ?entity)))\n  )\n]\n```"
]