[
    "(:action poke ; Poke an entity and update its status\n  :parameters (?agent - agent ?entity - object ?tool1 - tool ?tool2 - tool)\n  :precondition (and \n                 (available ?agent)\n                 (not (poked ?entity))\n                 (or (and (coconut_drain ?entity)\n                          (tool1_location ?tool1 in_hand)\n                          (tool2_location ?tool2 in_hand))\n                     (and (at ?entity kitchen)\n                          (at ?agent kitchen)\n                          (at ?tool1 kitchen))))\n  :effect (and \n           (poked ?entity)\n           (or (hole_in_coconut ?entity)\n               (not (at ?tool1 kitchen))))\n)",
    "To merge the provided actions into a single universal action, we need to maintain generality, simplicity, logical consistency, and clear state changes. Here's the merged action:\n\n### Merged Action: drain\n\n```pddl\n(:action drain\n  :parameters (?actor - agent ?source - object ?target - container)\n  :precondition (and\n                  (at ?actor kitchen)\n                  (or\n                    (and (coconut_location ?source upside_down) (glass_empty ?target))\n                    (and (broken ?source) (at ?target kitchen))\n                    (eye_poked ?source)\n                  )\n                  (not (checked ?actor ?source))\n                 )\n  :effect (and\n            (or\n              (glass_full ?target)\n              (drained ?source)\n              (screwdriver_removed ?source)\n            )\n            (checked ?actor ?source)\n           )\n)\n```\n\n### Explanation\n\n- **Generality**: The action is abstract enough to be adapted to various tasks related to draining, poking, and removing items, as long as they involve an actor, a source object, and a target container.\n- **State Change**: The action describes the state change by updating the status of the source object (e.g., drained, screwdriver removed) and the target container (e.g., glass full).\n- **Core Logic**: The preconditions ensure the actor is in the right location (kitchen) and the source object meets one of the conditions (upside down coconut, broken coconut, poked eye). The effects update the state of the source and target appropriately.\n- **Avoid Redundancy**: Similar effects (e.g., drained coconut, screwdriver removed) are merged to simplify the action.\n- **Logical Consistency**: The preconditions and effects are logical and consistent across different contexts, ensuring the action can be applied to multiple tasks.\n\nBy merging the actions into this single universal action, we achieve a simplified and efficient representation that maintains logical consistency and general applicability.",
    "To merge the given actions into a single, universal PDDL action named `wrap`, we need to abstract the parameters and ensure that the resulting action captures the essence of the tasks while maintaining logical consistency. Here's how you can achieve that:\n\n### Merged Action: `wrap`\n\n```lisp\n(:action wrap\n    :parameters (?agent - person ?tool - object ?item - object ?state - state)\n    :precondition (and \n                    (in_hand ?tool)\n                    (valid_state ?item ?state)\n                    (not (wrapped ?item ?tool))\n                   )\n    :effect (and \n              (wrapped ?item ?tool)\n              (updated_state ?item new_state)\n              (not (valid_state ?item ?state))\n            )\n)\n```\n\n### Explanation\n\n1. **Generality:**\n   - The parameters are abstracted to `?agent`, `?tool`, `?item`, and `?state` to maximize applicability across different tasks. This allows the action to be adapted for various contexts, such as wrapping coconuts or positioning tools.\n\n2. **State Change:**\n   - The preconditions ensure that the required state for the task is valid and the item is not already wrapped. The effects capture the transition to the new state and mark the item as wrapped.\n\n3. **Simplicity:**\n   - By abstracting common elements such as handling tools and items, the action avoids redundancy and unnecessary complexity. The precondition `(valid_state ?item ?state)` and the effect `(updated_state ?item new_state)` are placeholders for specific conditions relevant to each task.\n\n4. **Logical Consistency:**\n   - The action maintains logical consistency by ensuring that preconditions and effects are compatible and reasonable across different scenarios. The concept of a `valid_state` and `new_state` allows for flexibility in defining what conditions need to be met and what changes occur as a result of the action.\n\nThis merged action `wrap` is versatile and can be employed in various contexts where an item needs to be manipulated or transformed using a tool, meeting the criteria of the original task descriptions.",
    "The objective is to merge the given PDDL actions into a single universal action called \"break\" that captures the core logic of preconditions and effects while maintaining generality, state changes, and logical consistency. Here is the resulting merged action:\n\n```lisp\n(:action break\n    :parameters (?agent - person ?item - object ?tool - object ?surface - object ?state - state)\n    :precondition (and \n                    (available ?agent)\n                    (at ?agent ?state)\n                    (at ?item ?state)\n                    (or\n                        (and (wrapped ?item ?tool) (cooled ?item))\n                        (and (intact ?item) (hard_surface ?surface))\n                        (and (poked ?item) (at ?tool ?state))\n                    ))\n    :effect (and \n              (broken ?item) \n              (not (intact ?item))\n              (not (wrapped ?item ?tool))\n              (not (at ?item ?state))\n              (or\n                  (wrapped ?item ?tool)\n                  (towel_location ?tool dirtier)\n              ))\n)\n```\n\n### Explanation:\n1. **Generality**: The parameters are abstract (e.g., `?agent`, `?item`, `?tool`, `?surface`, `?state`) to ensure the action can apply to a variety of tasks.\n2. **State Change**: The preconditions and effects reflect the state changes required to break an item, accounting for different scenarios (e.g., using a tool, a hard surface, or a specific state).\n3. **Core Logic**: The core logic of preconditions and effects is retained, ensuring that the necessary conditions are met before performing the action and that the effects properly describe the state change.\n4. **Avoid Redundancy**: Similar effects (e.g., breaking an item) are merged to avoid redundancy, ensuring simplicity and efficiency.\n5. **Logical Consistency**: The action maintains logical consistency across different contexts, ensuring preconditions and effects are reasonable and clear.\n\nThis merged action \"break\" is adaptable to various tasks involving breaking objects, capturing the necessary conditions and effects while maintaining simplicity and consistency.",
    "To merge the given actions into a single universal action, we need to ensure it maintains generality, clear state change, simplicity, and logical consistency. Here\u2019s the combined action based on the guidelines provided:\n\n### Action name after merge: acquire\n\n### Action sets that need to be merged:\n\n**Original Actions:**\n\n1. **acquire-screwdriver**\n```PDDL\n(:action acquire-screwdriver\n  :parameters (?p - person ?s - screwdriver)\n  :precondition (and\n                  (not (in_hand ?s))\n                  (in_toolbox ?s)\n                 )\n  :effect (and\n            (in_hand ?s)\n            (not (in_toolbox ?s))\n          )\n)\n```\n\n2. **position-screwdriver-on-coconut**\n```PDDL\n(:action position-screwdriver-on-coconut\n  :parameters (?p - person ?s - screwdriver ?c - coconut)\n  :precondition (and\n                  (in_hand ?s)\n                  (not (positioned ?s ?c))\n                 )\n  :effect (and\n            (positioned ?s ?c)\n            (not (in_hand ?s))\n          )\n)\n```\n\n### Merged Action:\n\n```PDDL\n(:action acquire\n  :parameters (?p - person ?item - object ?location - location)\n  :precondition (and\n                  (not (in_hand ?item))\n                  (at ?item ?location)\n                 )\n  :effect (and\n            (in_hand ?item)\n            (not (at ?item ?location))\n          )\n)\n```\n\n### Explanation:\n\n- **Generality**: The merged action uses abstract parameters `?item` and `?location` to apply to various items and locations, not just screwdrivers and toolboxes.\n- **State Change**: The precondition checks if the item is not already in hand and is at a specified location. The effect moves the item to the hand and updates its location status.\n- **Simplicity**: The action is simplified by focusing on the core logic of acquiring an item from a location and avoiding redundancy.\n- **Logical Consistency**: The preconditions and effects are logically consistent, ensuring the item is either in hand or at a location, not both.\n\nThis merged action can be adapted for a variety of tasks involving acquiring different items from different locations."
]