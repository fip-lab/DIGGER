[
    "Based on the provided guidelines and examples, we can merge the actions related to cooking tasks into a single universal action. This merged action will be general enough to cover various cooking-related tasks, ensuring simplicity and logical consistency.\n\nMerged Action:\n```\n(:action cook\n  ; Cook a meal in a location and update the state of the location and the agent\n  :parameters (?agent - person ?location - place ?meal - food)\n  :precondition (and\n    (at ?agent ?location)\n    (clean ?location)\n    (not (cooked ?agent ?meal))\n  )\n  :effect (and\n    (cooked ?agent ?meal)\n    (messy ?location)\n  )\n)\n```\n\nExplanation:\n1. **Generality**: The merged action uses abstract parameters (`?agent`, `?location`, `?meal`) to represent the person, place, and food respectively. This ensures the action can be adapted to various cooking contexts.\n2. **State Change**: The preconditions ensure that the agent is at the location and the location is clean before cooking. The effects reflect that the meal is cooked, and the location becomes messy afterward.\n3. **Simplicity**: The action avoids redundancy by capturing the essential elements of cooking in a single, efficient action.\n4. **Logical Consistency**: The preconditions and effects are logically consistent, ensuring the action can be applied in different contexts without losing its core logic.\n\nThis merged action provides a clear, adaptable template for cooking-related tasks, ensuring it can be easily integrated into various scenarios requiring state changes related to cooking."
]