{
    "create": [
        "(:action create-shelter\n    :parameters (?n - npc ?b - beach ?t - tinder)\n    :precondition (and \n                    (not (shelter_created ?b))\n                    (tinder_volume_full ?t)\n                   )\n    :effect (and\n              (shelter_created ?b)\n              (tinder_volume_empty ?t)\n            )\n)\n```\n- **Action Name**: create-shelter\n- **Parameters**: `?n` (npc), `?b` (beach), `?t` (tinder)\n- **Preconditions**: No shelter is created on the beach, tinder is full.\n- **Effects**: Shelter is created on the beach, tinder volume becomes empty.\n\n#### Action 2: swim\n```lisp\n",
        "(:action create_shelter\n    :parameters (?npc - character ?location - place ?tinder - object)\n    :precondition (and\n                    (at ?npc ?location)\n                    (available ?tinder)\n                    (not (shelter_exists ?location)))\n    :effect (and\n              (shelter_exists ?location)\n              (not (available ?tinder)))\n)\n```\n\n#### Step 4: swim\n**Action Name**: swim  \n**Parameters**: (?npc - character)  \n**Preconditions**:  \n- (at ?npc ?shore)  \n- (can_swim ?npc)  \n\n**Effects**:  \n- (at ?npc ?water)  \n\n```lisp\n"
    ],
    "swim": [
        "(:action swim\n    :parameters (?npc - character)\n    :precondition (and\n                    (at ?npc ?shore)\n                    (can_swim ?npc))\n    :effect (at ?npc ?water)\n)\n```\n\nThese PDDL actions capture the steps involved in making a smoke signal, considering the context and logical flow of actions. Adjustments were made to ensure relevance and consistency with the task."
    ],
    "get": [
        "(:action get_water\n    :parameters (?npc - npc ?r - river ?w - water)\n    :precondition (and\n                    (at ?npc ?r)\n                    (contains ?r ?w)\n                    (liquid ?w))\n    :effect (and\n              (have ?npc ?w)\n              (not (contains ?r ?w)))\n)\n```\n\n### Explanation:\n\n- **Action Name:** `get_water`\n  - The action is named \"get_water\" to reflect the step of obtaining water from the river.\n\n- **Parameters:**\n  - `?npc - npc`: The non-player character (NPC) involved in the action.\n  - `?r - river`: The river from which the water is being gathered.\n  - `?w - water`: The water that is being collected.\n\n- **Preconditions:**\n  - `(at ?npc ?r)`: The NPC must be at the river to perform the action.\n  - `(contains ?r ?w)`: The river must contain water.\n  - `(liquid ?w)`: The water must be in liquid form, suitable for collection.\n\n- **Effects:**\n  - `(have ?npc ?w)`: After the action, the NPC will have the water.\n  - `(not (contains ?r ?w))`: The water is no longer in the river, indicating it has been collected.\n\nThis PDDL action captures the essential elements of the task and step, ensuring the NPC can gather water from the river under the specified conditions."
    ],
    "wet": [
        "(:action wet_tinder\n    :parameters (?npc - character ?tinder - object)\n    :precondition (and\n                    (at ?npc ?location)\n                    (dry ?tinder))\n    :effect (and\n              (not (dry ?tinder))\n              (wet ?tinder))\n)\n```\n\n#### Step 2: putobjectinreceptacle\n**Action Name**: put_pencil_in_receptacle  \n**Parameters**: (?agent - agent ?pencil - object ?receptacle - container)  \n**Preconditions**:  \n- (at ?agent ?location)  \n- (holding ?agent ?pencil)  \n\n**Effects**:  \n- (in ?pencil ?receptacle)  \n- (not (holding ?agent ?pencil))  \n\n```lisp\n"
    ],
    "put": [
        "(:action put_pencil_in_receptacle\n    :parameters (?agent - agent ?pencil - object ?receptacle - container)\n    :precondition (and\n                    (at ?agent ?location)\n                    (holding ?agent ?pencil))\n    :effect (and\n              (in ?pencil ?receptacle)\n              (not (holding ?agent ?pencil)))\n)\n```\n\n#### Step 3: create_shelter\n**Action Name**: create_shelter  \n**Parameters**: (?npc - character ?location - place ?tinder - object)  \n**Preconditions**:  \n- (at ?npc ?location)  \n- (available ?tinder)  \n- (not (shelter_exists ?location))  \n\n**Effects**:  \n- (shelter_exists ?location)  \n- (not (available ?tinder))  \n\n```lisp\n"
    ]
}