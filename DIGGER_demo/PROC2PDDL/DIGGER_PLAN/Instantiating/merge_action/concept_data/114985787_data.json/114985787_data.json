{
    "make": [
        "(:action make_splash\n    :parameters (?npc - npc ?p - path ?ol - oak_log ?b - branch)\n    :precondition (and (at ?npc ?p) (present ?ol) (present ?b))\n    :effect (and (wet ?ol) (wet ?b))\n)\n\n;; Action 2: Drink water\n",
        "(:action build_shelter\n    :parameters (?npc - npc ?c - camp ?ts - teepee_structure)\n    :precondition (and (at ?npc ?c) (chosen ?ts))\n    :effect (and (built ?ts) (noisier ?c))\n)\n\n;; Action 4: Place branch\n"
    ],
    "eat": [
        "(:action drink_water\n    :parameters (?npc - npc)\n    :precondition (and (not (has_container ?npc)) (clear_water_available))\n    :effect (hydrated ?npc)\n)\n\n;; Action 3: Build shelter\n",
        "(:action eat_fruit\n    :parameters (?npc - agent ?fruit - food)\n    :precondition (and\n      (location ?npc ?bush)\n      (edible_fruit ?fruit)\n      (grows_on ?fruit ?bush)\n      (not (toxic ?fruit))\n    )\n    :effect (and\n      (consumed ?npc ?fruit)\n      (not (location ?fruit ?bush))\n    )\n)\n```\n\nExplanation:\n1. **get_water**\n   - **Parameters**: The action involves an agent (`?npc`) and a resource (`?water`).\n   - **Preconditions**: The agent must be at a location (`?source`) that is a source of water.\n   - **Effect**: The agent will have the water, and the water will no longer be at the source location.\n\n2. **eat_fruit**\n   - **Parameters**: The action involves an agent (`?npc`) and a food item (`?fruit`).\n   - **Preconditions**: The agent must be at a location (`?bush`) where the edible fruit grows. The fruit must be identifiable as edible and not toxic.\n   - **Effect**: The agent consumes the fruit, and the fruit is no longer at the bush.\n\nThese actions capture the intent and logic of the steps provided, ensuring that the necessary conditions are met before performing the actions and specifying the resulting changes after the actions are completed.",
        "(:action eat_mushroom\n    :parameters (?npc - npc ?mushroom - mushroom)\n    :precondition (and\n                    (identified ?mushroom)\n                    (safe_to_eat ?mushroom)\n                  )\n    :effect (ate ?npc ?mushroom)\n)\n\nThese actions capture the necessary steps and conditions for building a snare and related tasks as described."
    ],
    "place": [
        "(:action place_branch\n    :parameters (?npc - npc ?wp - west_plain ?bp - branch_piece)\n    :precondition (and (at ?npc ?wp) (present ?bp))\n    :effect (and (placed ?bp ?wp) (created ?wp))\n)\n```\n\n### Explanation of Actions:\n\n1. **make_splash**:\n   - **Parameters**: The NPC, path, oak log, and branch involved.\n   - **Preconditions**: The NPC must be at the path, and the oak log and branch must be present.\n   - **Effects**: The oak log and branch become wet.\n\n2. **drink_water**:\n   - **Parameters**: The NPC involved.\n   - **Preconditions**: The NPC does not have a container and clear water is available.\n   - **Effects**: The NPC becomes hydrated.\n\n3. **build_shelter**:\n   - **Parameters**: The NPC, camp, and teepee structure involved.\n   - **Preconditions**: The NPC must be at the camp, and the teepee structure must be chosen.\n   - **Effects**: The teepee structure is built, and the camp becomes noisier.\n\n4. **place_branch**:\n   - **Parameters**: The NPC, west plain, and branch piece involved.\n   - **Preconditions**: The NPC must be at the west plain, and the branch piece must be present.\n   - **Effects**: The branch piece is placed at the west plain, and the west plain is created.\n\nThese actions capture the intent and logic of the steps provided to build a shelter, ensuring the necessary preconditions and effects are defined based on the entity states.",
        "(:action wrap_snare\n    :parameters (?snare - snare)\n    :precondition (and\n                    (collected ?snare)\n                    (not (wrapped ?snare))\n                  )\n    :effect (wrapped ?snare)\n)\n\n;; Action 3: Discard snare\n"
    ],
    "get": [
        "(:action get_water\n    :parameters (?npc - agent ?water - resource)\n    :precondition (and\n      (location ?npc ?source)\n      (source_of ?source water)\n    )\n    :effect (and\n      (has ?npc ?water)\n      (not (location ?water ?source))\n    )\n)\n\n",
        "(:action get_snare\n    :parameters (?npc - npc ?snare - snare)\n    :precondition (and\n                    (not (collected ?snare))\n                    (visible ?npc)\n                  )\n    :effect (and\n              (collected ?snare)\n              (not (visible ?npc))\n            )\n)\n\n;; Action 2: Wrap snare\n"
    ],
    "discard": [
        "(:action discard_snare\n    :parameters (?snare - snare)\n    :precondition (wrapped ?snare)\n    :effect (discarded ?snare)\n)\n\n;; Action 4: Camouflage helmet\n"
    ],
    "camouflage": [
        "(:action camouflage_helmet\n    :parameters (?npc - npc)\n    :precondition (and\n                    (visible ?npc)\n                    (not (camouflaged ?npc))\n                  )\n    :effect (and\n              (camouflaged ?npc)\n              (not (visible ?npc))\n            )\n)\n\n;; Action 5: Search for mushrooms\n",
        "(:action identify_mushrooms\n    :parameters (?npc - npc ?mushroom - mushroom)\n    :precondition (and\n                    (found_mushrooms ?npc)\n                    (not (identified ?mushroom))\n                  )\n    :effect (identified ?mushroom)\n)\n\n;; Action 7: Eat mushroom\n"
    ],
    "search": [
        "(:action search_mushrooms\n    :parameters (?npc - npc)\n    :precondition (and\n                    (trained ?npc)\n                    (not (found_mushrooms ?npc))\n                  )\n    :effect (found_mushrooms ?npc)\n)\n\n;; Action 6: Identify mushrooms\n"
    ]
}