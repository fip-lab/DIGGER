[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:create\n\n\nAction sets that need to be merged:\n(:action create_raft\n    :parameters (?n - npc ?b - beach ?r - raft_draft)\n    :precondition (and\n                    (at ?n ?b)\n                    (raft_draft_available ?r))\n    :effect (and\n              (raft_created ?r)\n              (not (raft_draft_available ?r))\n              (raft_present ?r ?b))\n)\n\n;; Action 2: Create Rescue Signal\n\n(:action create_rescue_signal\n    :parameters (?n - npc ?b - beach)\n    :precondition (at ?n ?b)\n    :effect (rescue_signal_created ?b)\n)\n```\n\nExplanation:\n1. **create_raft**: This action involves an NPC creating a raft draft on the beach. The preconditions ensure that the NPC is at the beach and that the raft draft is available. The effects indicate that the raft is created and is present at the beach, and the raft draft is no longer available.\n\n2. **create_rescue_signal**: This action involves an NPC creating a rescue signal on the beach. The precondition ensures that the NPC is at the beach. The effect indicates that a rescue signal has been created at the beach.\n\nThese actions capture the intent and logic of the steps and descriptions provided, ensuring that the NPC can create a raft and a rescue signal at the beach.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:put\n\n\nAction sets that need to be merged:\n(:action put_object_in_receptacle\n    :parameters (?a - agent ?p - pencil)\n    :precondition (and\n                    (location ?p on_counter)\n                    (location ?a further_out)\n                  )\n    :effect (and\n             (location ?p in_hand)\n             (location ?a in)\n            )\n)\n```\n\n### Explanation\n\n- **Action Name**: The action is named `put_object_in_receptacle`, which reflects the step of placing an object (pencil) into a receptacle (agent's hand).\n  \n- **Parameters**: The parameters include `?a` for the agent and `?p` for the pencil.\n\n- **Preconditions**: \n  - The pencil must be located `on_counter` before it can be picked up.\n  - The agent must be `further_out` before moving to `in`.\n\n- **Effects**: \n  - The pencil's location changes to `in_hand` once the action is completed.\n  - The agent's location changes to `in`, indicating the agent has moved closer or into a position to perform the action.\n\nThis PDDL action captures the essence of the step provided and aligns with the entity states described. If there are additional steps or tasks related to creating a shelter, more PDDL actions would be needed to cover those aspects.\nThe actions after the merger are:"
]