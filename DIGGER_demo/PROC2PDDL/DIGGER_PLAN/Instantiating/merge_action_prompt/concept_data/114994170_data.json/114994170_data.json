[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:fill\n\n\nAction sets that need to be merged:\n(:action fill_bathtub\n    :parameters (?bathtub - bathtub ?bathroom - bathroom ?npc - npc)\n    :precondition (and\n                    (in_bathroom ?bathtub ?bathroom)\n                    (empty ?bathtub))\n    :effect (and\n              (full ?bathtub)\n              (not (empty ?bathtub)))\n)\n\n;; Action 2: Get water from the bathtub\n\n(:action cover_mouth_nose\n    :parameters (?npc - character ?cloth - item ?location - place)\n    :precondition (and\n                    (location ?npc ?location)\n                    (outside ?location)\n                    (cloth ?cloth available))\n    :effect (and\n             (mouth_nose_covered ?npc)\n             (cloth ?cloth used))\n)\n```\n\nExplanation:\n- The action `cover_mouth_nose` is designed to capture the intent of covering the mouth and nose with a cloth or mask during a nuclear blast.\n- Parameters include the character (`?npc`), the item used to cover the mouth and nose (`?cloth`), and the location (`?location`).\n- Preconditions ensure that the character is outside and that the cloth is available.\n- The effect of the action is that the character's mouth and nose are covered, and the cloth is marked as used.\n\nNote: The step `close_mixture npc` appears to be irrelevant to the task description and entity state provided, so it has been modified to be relevant to the task of getting home safely during a nuclear blast.\n(:action put_in_cage\n    :parameters (?n - npc ?l - location)\n    :precondition (and\n                    (npc-at-location ?n ?l)\n                    (cage-available ?l)\n                    (not (npc-in-cage ?n)))\n    :effect (and\n              (npc-in-cage ?n)\n              (not (npc-at-location ?n ?l)))\n)\n```\n\n**Explanation:**\n- **Action Name:** `put_in_cage` - This action represents placing the NPC into a cage.\n- **Parameters:** `?n` is the NPC, and `?l` is the location, which in this case is the basement.\n- **Preconditions:** \n  - `(npc-at-location ?n ?l)`: The NPC must be at the specified location (basement).\n  - `(cage-available ?l)`: There must be a cage available at the location.\n  - `(not (npc-in-cage ?n))`: The NPC must not already be in a cage.\n- **Effects:** \n  - `(npc-in-cage ?n)`: The NPC is now in the cage.\n  - `(not (npc-at-location ?n ?l))`: The NPC is no longer freely at the location, implying it is now contained within the cage.\n\nThis PDDL action captures the intent of securing the NPC in the basement as part of the preparation for an attack.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:get\n\n\nAction sets that need to be merged:\n(:action get_water\n    :parameters (?npc - npc ?water - water ?bathtub - bathtub)\n    :precondition (and\n                    (full ?bathtub)\n                    (located ?npc ?bathtub))\n    :effect (and\n              (has_water ?npc ?water)\n              (not (full ?bathtub)))\n)\n```\n\n### Descriptions:\n- Shelter in place and wait for the initial chaos to subside. If all of the electronics suddenly stop working, the immediate loss of electricity will cause a lot of sudden confusion and chaos. If you aren\u2019t home, wait 30-45 minutes for all of the abrupt danger to pass. Then, go home if you\u2019re within a few miles or kilometers. If you\u2019re already home, stay there and do not go outside.\n- Eat anything in your fridge first to minimize food shortages. For the first 1-2 days, eat whatever is in your fridge and hasn\u2019t gone bad immediately. Save the dry stuff for later when you may really need it. The odds are low society will completely collapse and you\u2019ll go without help for super long, but it\u2019s still better to go through everything that\u2019s going to go bad anyway.\n\n### Entity State:\n- bathtub: \n  - Before: empty\n  - After: full\n- npc:\n  - Before: located at bathtub\n  - After: has water\n\nThese actions reflect the steps provided for the task \"collect-water\". The preconditions and effects are based on the entity states before and after each action.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:check\n\n\nAction sets that need to be merged:\n(:action check_radio\n    :parameters (?npc - agent)\n    :precondition (and\n                    (radio_status off)\n                    (not (knows_radio_functionality ?npc))\n                   )\n    :effect (and\n             (radio_status on)\n             (knows_radio_functionality ?npc)\n            )\n)\n```\n\n**Explanation**:  \n- **Parameters**: This action involves an agent (?npc) who will check the radio.\n- **Preconditions**: The radio must be off, and the agent does not know the radio's functionality.\n- **Effects**: The radio is turned on, and the agent learns about the radio's functionality.\n\n#### Action 2: check_batteries\n\n```lisp\n\n(:action check_batteries\n    :parameters (?npc - agent ?location - place)\n    :precondition (and\n                    (batteries_status unknown)\n                    (location ?npc ?location)\n                   )\n    :effect (and\n             (batteries_status checked)\n             (has_batteries ?npc)\n            )\n)\n```\n\n**Explanation**:  \n- **Parameters**: This action involves an agent (?npc) and a location (?location), which in this context is the basement.\n- **Preconditions**: The status of the batteries is unknown, and the agent is at the location (basement).\n- **Effects**: The batteries' status is checked, and the agent confirms having batteries.\n\nThese actions are designed to align with the task's goal of turning on the radio and ensuring it functions properly, considering the context provided.\nThe actions after the merger are:"
]