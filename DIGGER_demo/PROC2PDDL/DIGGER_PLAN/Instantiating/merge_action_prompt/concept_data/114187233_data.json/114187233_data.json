[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:peel\n\n\nAction sets that need to be merged:\n(:action peel_coconut\n    :parameters (?c - coconut ?k - knife ?b - cutting_board)\n    :precondition (and\n      (on ?c ?b)\n      (sharp ?k)\n    )\n    :effect (and\n      (exposed_shell ?c)\n      (not (covered ?c))\n    )\n)\n\n\n(:action peel-coconut\n    :parameters (?p - person ?c - coconut ?k - tool)\n    :precondition (and\n                    (wrapped ?c)\n                    (knife ?k)\n                  )\n    :effect (and\n              (peeled ?c)\n              (not (wrapped ?c))\n            )\n  )\n\n  ;; Action to drain the coconut over a rack\n  \n(:action peel_casing\n    :parameters (?c - coconut ?k - knife)\n    :precondition (and (has_casing ?c) (sharp ?k))\n    :effect (and (exposed_shell ?c) (not (has_casing ?c)))\n)\n\n\n(:action drain_coconut\n    :parameters (?c - coconut ?g - glass)\n    :precondition (and (exposed_shell ?c) (empty ?g))\n    :effect (and (drained ?c) (full ?g))\n)\n\n\n(:action drain-coconut\n    :parameters (?p - person ?c - coconut ?r - rack)\n    :precondition (and\n                    (peeled ?c)\n                    (not (drained ?c))\n                  )\n    :effect (drained ?c)\n  )\n\n  ;; Action to break the coconut with a hammer\n  \n(:action remove_meat\n    :parameters (?c - coconut ?k - knife)\n    :precondition (and (broken ?c) (sharp ?k))\n    :effect (and (meat_extracted ?c) (empty_shell ?c))\n)\n```\n\nThese actions should capture the steps necessary to get coconut meat using the provided steps and descriptions.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:wrap\n\n\nAction sets that need to be merged:\n(:action wrap-coconut\n    :parameters (?p - person ?c - coconut ?t - towel)\n    :precondition (and\n                    (not (wrapped ?c))\n                    (clean ?t)\n                  )\n    :effect (and\n              (wrapped ?c)\n              (not (clean ?t))\n              (dirty ?t)\n            )\n  )\n\n  ;; Action to peel the coconut using a knife\n  \n(:action wrap_coconut\n    :parameters (?c - coconut ?t - towel)\n    :precondition (and (drained ?c) (clean ?t))\n    :effect (and (wrapped ?c ?t) (not (clean ?t)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:break\n\n\nAction sets that need to be merged:\n(:action break-coconut\n    :parameters (?p - person ?c - coconut ?h - tool)\n    :precondition (and\n                    (wrapped ?c)\n                    (hammer ?h)\n                    (not (broken ?c))\n                  )\n    :effect (and\n              (broken ?c)\n              (not (wrapped ?c))\n            )\n  )\n)\n```\n\n### Explanation:\n1. **wrap-coconut**:\n   - **Action Name**: wrap-coconut\n   - **Parameters**: ?p (person), ?c (coconut), ?t (towel)\n   - **Preconditions**: The coconut is not wrapped, and the towel is clean.\n   - **Effects**: The coconut becomes wrapped, and the towel becomes dirty.\n\n2. **peel-coconut**:\n   - **Action Name**: peel-coconut\n   - **Parameters**: ?p (person), ?c (coconut), ?k (tool)\n   - **Preconditions**: The coconut is wrapped, and a knife is available.\n   - **Effects**: The coconut becomes peeled, and it is no longer wrapped.\n\n3. **drain-coconut**:\n   - **Action Name**: drain-coconut\n   - **Parameters**: ?p (person), ?c (coconut), ?r (rack)\n   - **Preconditions**: The coconut is peeled and not drained.\n   - **Effects**: The coconut becomes drained.\n\n4. **break-coconut**:\n   - **Action Name**: break-coconut\n   - **Parameters**: ?p (person), ?c (coconut), ?h (tool)\n   - **Preconditions**: The coconut is wrapped, and a hammer is available.\n   - **Effects**: The coconut becomes broken, and it is no longer wrapped.\n\nThese actions should help achieve the goal of getting coconut meat without using an oven, following the steps and descriptions provided.\n(:action break_coconut\n    :parameters (?c - coconut ?t - towel ?h - hammer)\n    :precondition (and (wrapped ?c ?t) (in_hand ?h))\n    :effect (and (broken ?c) (not (wrapped ?c ?t)))\n)\n\n\nThe actions after the merger are:"
]