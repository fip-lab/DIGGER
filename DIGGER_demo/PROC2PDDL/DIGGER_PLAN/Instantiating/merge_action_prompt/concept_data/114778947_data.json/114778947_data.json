[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:push\n\n\nAction sets that need to be merged:\n(:action push_hanger\n    :parameters (?npc - agent ?car - vehicle ?hanger - tool)\n    :precondition (and\n      (has_tool ?npc ?hanger)\n      (locked ?car)\n      (intact_weather_stripping ?car)\n    )\n    :effect (and\n      (hanger_inside_door ?hanger ?car)\n      (not (intact_weather_stripping ?car))\n    )\n  )\n\n;;; Action 2: Hook Latch with Hanger\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:hook\n\n\nAction sets that need to be merged:\n(:action hook_latch\n    :parameters (?npc - agent ?car - vehicle ?hanger - tool)\n    :precondition (and\n      (hanger_inside_door ?hanger ?car)\n      (has_tool ?npc ?hanger)\n      (locked ?car)\n    )\n    :effect (and\n      (unlocked ?car)\n      (not (locked ?car))\n    )\n  )\n\n;;; Action 3: Straighten Coat Hanger\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:straighten\n\n\nAction sets that need to be merged:\n(:action straighten_coathanger\n    :parameters (?npc - agent ?hanger - tool)\n    :precondition (and\n      (has_tool ?npc ?hanger)\n      (hooked ?hanger)\n    )\n    :effect (and\n      (straight ?hanger)\n      (not (hooked ?hanger))\n    )\n  )\n```\n\n### Descriptions:\n1. **Push Hanger into Car**: Lift the weather stripping from the bottom of the driver's-side window. Push the end of the hanger in through the soft rubber weather stripping and the bottom of the window. The hanger is now inside the wall of the door.\n\n2. **Hook Latch with Hanger**: Hook and pull the latch. Hook the hanger around the latch and pull it towards the rear of the car. This should unlock any manually locked car door.\n\n3. **Straighten Coat Hanger**: Unravel and straighten the coat hanger. You can leave the hooked top section alone, but unwind it from itself at the \u201cneck\u201d and straighten the rest of the hanger out, giving you a long metal tool with a hooked tip.\n\n### Entity State:\n- **Car**:\n  - **Vehicle**:\n    - **Attribute: Location**: Before: in garage, After: in forest\n    - **Attribute: Visibility**: Before: visible, After: invisible\n    - **Attribute: Vehicle**: Before: uncovered, After: netted with camouflage\n  - **Concept Knowledge**:\n    - [[drive]] is related to [[car]]\n    - You are likely to find [[a car]] in [[the city]]\n    - [[A car]] can [[go fast]]\n    - [[a car]] has [[seats]]\n    - [[A tire]] is part of [[a car]]\n    - [[A volvo]] is a type of [[car]]\n    - [[my car]] is [[red]]\n\n- **NPC**:\n  - **Helmet**:\n    - **Attribute: Decoration**: Before: bare | plain, After: camouflaged\n    - **Attribute: Visibility**: Before: visible, After: invisible\n  - **Concept Knowledge**: []\n\nThese PDDL actions capture the intent and logic of each step described in the task.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:SlideIntoSideOfDoor\n\n\nAction sets that need to be merged:\n(:action SlideIntoSideOfDoor\n    :parameters (?u - user ?c - creditcard ?l - lock)\n    :precondition (and\n            (userHasCreditCard ?u ?c)\n            (lockInDoor ?l)\n            (creditCardInHand ?u ?c)\n            (doorLocked ?l)\n            )\n    :effect (and\n                (creditCardInDoorFrame ?c ?l)\n                (not (creditCardInHand ?u ?c))\n                (doorUnlocked ?l)\n                (not (doorLocked ?l))\n                )\n)\n```\n\n### Explanation\n\n- **Action Name**: `SlideIntoSideOfDoor` - Named after the action of sliding the credit card into the side of the door.\n  \n- **Parameters**: \n  - `?u - user`: The person performing the action.\n  - `?c - creditcard`: The credit card used to unlock the door.\n  - `?l - lock`: The lock on the door being manipulated.\n\n- **Preconditions**:\n  - `(userHasCreditCard ?u ?c)`: The user must have the credit card.\n  - `(lockInDoor ?l)`: The lock must be part of the door.\n  - `(creditCardInHand ?u ?c)`: The user must have the credit card in hand.\n  - `(doorLocked ?l)`: The door must be locked.\n\n- **Effects**:\n  - `(creditCardInDoorFrame ?c ?l)`: The credit card is now in the door frame.\n  - `(not (creditCardInHand ?u ?c))`: The user no longer holds the credit card.\n  - `(doorUnlocked ?l)`: The door becomes unlocked.\n  - `(not (doorLocked ?l))`: The door is no longer locked.\n\nThis PDDL action captures the essence of using a credit card to unlock a door by sliding it into the side of the door, reflecting both the preconditions and effects as described in the task.\nThe actions after the merger are:"
]