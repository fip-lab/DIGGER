[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:poke\n\n\nAction sets that need to be merged:\n(:action poke-coconut\n    :parameters (?c - coconut ?s - screwdriver ?m - mallet)\n    :precondition (and\n                    (coconut_drain ?c)\n                    (screwdriver_location ?s in_hand)\n                    (mallet_location ?m in_hand)\n                    (not (coconut_poked ?c))\n                   )\n    :effect (and\n              (coconut_poked ?c)\n              (hole_in_coconut ?c)\n            )\n  )\n\n\n(:action poke_coconut\n    :parameters (?npc - agent ?coconut - ingredient ?screwdriver - tool)\n    :precondition (and (at ?coconut kitchen) (at ?npc kitchen) (at ?screwdriver kitchen))\n    :effect (and (poked ?coconut) (not (at ?screwdriver kitchen)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:drain\n\n\nAction sets that need to be merged:\n(:action drain-coconut\n    :parameters (?c - coconut ?g - glass)\n    :precondition (and\n                    (coconut_location ?c upside_down)\n                    (glass_empty ?g)\n                   )\n    :effect (and\n              (glass_full ?g)\n              (coconut_drain ?c)\n            )\n  )\n\n\n(:action drain_coconut\n    :parameters (?npc - agent ?coconut - ingredient ?rack - container)\n    :precondition (and (broken ?coconut) (at ?npc kitchen) (at ?rack kitchen))\n    :effect (and (drained ?coconut) (at ?coconut ?rack))\n)\n\n\n(:action remove-screwdriver\n    :parameters (?p - person ?s - screwdriver ?c - coconut)\n    :precondition (and\n                    (eye_poked ?c)\n                    (not (screwdriver_removed ?s))\n                   )\n    :effect (screwdriver_removed ?s)\n)\n```\n\n### Explanation\n- **acquire-screwdriver**: This action represents picking up the screwdriver from the toolbox. The precondition checks if the screwdriver is not in hand and is in the toolbox. The effect is that the screwdriver is now in hand and not in the toolbox.\n- **position-screwdriver**: This action involves positioning the screwdriver on the coconut. The precondition ensures the screwdriver is in hand and not yet positioned. The effect is that the screwdriver is now positioned on the coconut.\n- **poke-eye**: This action uses a mallet to poke the eye of the coconut. The precondition checks that the screwdriver is positioned and the mallet is in hand. The effect is that the coconut's eye is poked, and the screwdriver is removed.\n- **remove-screwdriver**: This action removes the screwdriver after poking the coconut's eye. The precondition requires that the eye has been poked, and the effect is that the screwdriver is removed.\n\nThese actions capture the logical steps and states involved in the task of poking a hole in a coconut using a screwdriver and a mallet.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:wrap\n\n\nAction sets that need to be merged:\n(:action wrap_and_cool_coconut\n       :parameters (?c - coconut ?t - towel)\n       :precondition (and (heated ?c) (clean ?t))\n       :effect (and (wrapped ?c ?t) (cooled ?c) (not (heated ?c)))\n   )\n   ```\n   - **Description:** Remove the coconut and wrap it in a towel to cool.\n   - **Preconditions:** The coconut is heated, and the towel is clean.\n   - **Effects:** The coconut is wrapped in the towel and cooled.\n\n4. **Action: break_coconut_with_hammer**\n   ```lisp\n   \n(:action wrap-coconut\n    :parameters (?c - coconut ?t - towel)\n    :precondition (and\n                    (coconut_poked ?c)\n                    (towel_location ?t clean)\n                   )\n    :effect (and\n              (coconut_wrapped ?c)\n              (towel_location ?t dirty)\n            )\n  )\n\n\n(:action position-screwdriver\n    :parameters (?p - person ?s - screwdriver ?c - coconut)\n    :precondition (and\n                    (in_hand ?s)\n                    (not (screwdriver_positioned ?s))\n                    (coconut_has_eye ?c)\n                   )\n    :effect (screwdriver_positioned ?s)\n)\n\n;; Action to poke the eye of the coconut using a mallet\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:break\n\n\nAction sets that need to be merged:\n(:action break_coconut_with_hammer\n       :parameters (?c - coconut ?t - towel)\n       :precondition (and (wrapped ?c ?t) (cooled ?c))\n       :effect (and (broken ?c) (not (wrapped ?c ?t)))\n   )\n   ```\n   - **Description:** Whack the wrapped coconut with a hammer.\n   - **Preconditions:** The coconut is wrapped in a towel and cooled.\n   - **Effects:** The coconut is broken and no longer wrapped.\n\n5. **Action: break_coconut_on_surface**\n   ```lisp\n   \n(:action break_coconut_on_surface\n       :parameters (?c - coconut ?s - surface)\n       :precondition (and (intact ?c) (hard_surface ?s))\n       :effect (and (broken ?c) (not (intact ?c)))\n   )\n   ```\n   - **Description:** Strike the coconut against a concrete surface.\n   - **Preconditions:** The coconut is intact, and the surface is hard.\n   - **Effects:** The coconut is broken and no longer intact.\n\nThese actions are designed to capture the logical sequence and state changes involved in removing fiber from coconut meat. Adjustments were made to ensure each action follows logically from the descriptions and entity states provided.\n(:action break_coconut\n    :parameters (?npc - agent ?coconut - ingredient)\n    :precondition (and (at ?coconut kitchen) (at ?npc kitchen))\n    :effect (and (broken ?coconut) (not (at ?coconut kitchen)))\n)\n\n\n(:action break_coconut_wrapped\n    :parameters (?npc - agent ?coconut - ingredient ?towel - tool)\n    :precondition (and (poked ?coconut) (at ?npc kitchen) (at ?towel kitchen))\n    :effect (and (broken ?coconut) (wrapped ?coconut ?towel))\n)\n```\n\n### Descriptions and Entity States Considerations:\n- **Break Coconut**: The NPC breaks the coconut using a solid surface or hammer.\n- **Drain Coconut**: The NPC turns the coconut upside down over a rack to drain the liquid.\n- **Poke Coconut**: The NPC uses a screwdriver to poke a hole in the coconut's \"eye\".\n- **Break Coconut Wrapped**: The NPC wraps the coconut in a towel and breaks it further to free the meat.\n\nThese actions follow the steps provided and ensure the conditions and effects are consistent with the task of freeing the meat from the coconut.\n(:action break-coconut\n    :parameters (?c - coconut ?m - mallet ?t - towel)\n    :precondition (and\n                    (coconut_wrapped ?c)\n                    (mallet_location ?m in_hand)\n                    (towel_location ?t dirty)\n                   )\n    :effect (and\n              (coconut_broken ?c)\n              (towel_location ?t dirtier)\n            )\n  )\n```\n\n### Explanation:\n\n1. **drain-coconut**:\n   - **Parameters**: `?c` for coconut, `?g` for glass.\n   - **Preconditions**: The coconut is upside down and the glass is empty.\n   - **Effects**: The glass is now full and the coconut is drained.\n\n2. **poke-coconut**:\n   - **Parameters**: `?c` for coconut, `?s` for screwdriver, `?m` for mallet.\n   - **Preconditions**: The coconut is drained, the screwdriver and mallet are in hand, and the coconut is not yet poked.\n   - **Effects**: The coconut is poked and has a hole.\n\n3. **wrap-coconut**:\n   - **Parameters**: `?c` for coconut, `?t` for towel.\n   - **Preconditions**: The coconut is poked and the towel is clean.\n   - **Effects**: The coconut is wrapped and the towel becomes dirty.\n\n4. **break-coconut**:\n   - **Parameters**: `?c` for coconut, `?m` for mallet, `?t` for towel.\n   - **Preconditions**: The coconut is wrapped, the mallet is in hand, and the towel is dirty.\n   - **Effects**: The coconut is broken and the towel becomes dirtier.\n\nThis set of actions captures the sequence of steps required to hit a coconut with a mallet, ensuring all necessary conditions and effects are accounted for.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:acquire\n\n\nAction sets that need to be merged:\n(:action acquire-screwdriver\n    :parameters (?p - person ?s - screwdriver)\n    :precondition (and\n                    (not (in_hand ?s))\n                    (in_toolbox ?s)\n                   )\n    :effect (and\n              (in_hand ?s)\n              (not (in_toolbox ?s))\n            )\n)\n\n;; Action to position the screwdriver on the coconut\n\nThe actions after the merger are:"
]