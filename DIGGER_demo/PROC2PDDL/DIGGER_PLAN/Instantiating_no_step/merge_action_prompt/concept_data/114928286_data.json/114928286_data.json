[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:collect\n\n\nAction sets that need to be merged:\n(:action collect_wood\n    :parameters (?a - agent ?w - material ?s - location)\n    :precondition (and\n      (at ?w storage)\n      (in ?a main_area)\n    )\n    :effect (and\n      (collected ?w)\n      (not (at ?w storage))\n    )\n  )\n\n  ;; Action 2: Gather nails from the toolbox\n  \nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:gather\n\n\nAction sets that need to be merged:\n(:action gather_nails\n    :parameters (?a - agent ?n - material ?t - location)\n    :precondition (and\n      (at ?n toolbox)\n      (in ?a main_area)\n    )\n    :effect (and\n      (collected ?n)\n      (not (at ?n toolbox))\n    )\n  )\n\n  ;; Action 3: Obtain paint from the shed\n  \n(:action obtain_paint\n    :parameters (?a - agent ?p - material ?sh - location)\n    :precondition (and\n      (at ?p shed)\n      (in ?a main_area)\n    )\n    :effect (and\n      (collected ?p)\n      (not (at ?p shed))\n    )\n  )\n\n  ;; Action 4: Retrieve tools from the workshop\n  \n(:action retrieve_tools\n    :parameters (?a - agent ?t - material ?w - location)\n    :precondition (and\n      (at ?t workshop)\n      (in ?a main_area)\n    )\n    :effect (and\n      (collected ?t)\n      (not (at ?t workshop))\n    )\n  )\n)\n```\n\nThis PDDL domain definition includes actions for collecting wood, gathering nails, obtaining paint, and retrieving tools, based on the hypothetical task and steps provided. Each action includes the necessary parameters, preconditions, and effects to reflect the described entity states and steps.\n(:action select-food-item\n    :parameters (?f - food ?p - player)\n    :precondition (and (long ?f) (thin ?f) (hard ?f) (straight ?f) (stiff ?f) (between-15-and-20-cm ?f) (unselected ?p))\n    :effect (and (selected ?f) (selected ?p) (not (unselected ?p)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:lay\n\n\nAction sets that need to be merged:\n(:action lay-down-masking-tape\n    :parameters (?t - tape ?p - player)\n    :precondition (and (rolled ?t) (onRoll ?t) (selected ?p))\n    :effect (and (unrolled ?t) (inPieces ?t) (not (rolled ?t)) (not (onRoll ?t)))\n)\n```\n\nExplanation:\n\n1. **select-food-item**:\n   - **Parameters**: ?f (food item), ?p (player)\n   - **Preconditions**: The food item must be long, thin, hard, straight, stiff, and between 15 and 20 cm. The player must be unselected.\n   - **Effects**: The food item and player are selected, and the player is no longer unselected.\n\n2. **lay-down-masking-tape**:\n   - **Parameters**: ?t (tape), ?p (player)\n   - **Preconditions**: The tape must be rolled and on the roll. The player must be selected.\n   - **Effects**: The tape is unrolled and in pieces, and it is no longer rolled or on the roll.\n\nThese actions capture the essential steps and conditions for selecting a food item and preparing the floor with masking tape for the task of throwing hotdogs.\nThe actions after the merger are:"
]