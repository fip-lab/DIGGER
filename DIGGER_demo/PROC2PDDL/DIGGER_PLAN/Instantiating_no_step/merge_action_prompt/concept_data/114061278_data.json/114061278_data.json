[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:drain\n\n\nAction sets that need to be merged:\n(:action drain_coconut\n    :parameters (?c - coconut ?g - glass)\n    :precondition (and (contains_liquid ?c) (empty ?g))\n    :effect (and (not (contains_liquid ?c)) (contains_liquid ?g))\n)\n\n\n(:action drain-coconut\n    :parameters (?c - coconut ?g - glass)\n    :precondition (and\n                    (coconut_location ?c in_container)\n                    (coconut_condition ?c whole)\n                    (coconut_temperature ?c warm)\n                   )\n    :effect (and\n              (coconut_location ?c in_glass)\n              (coconut_condition ?c drained)\n              (coconut_temperature ?c room_temperature)\n              (not (coconut_location ?c in_container))\n            )\n  )\n\n\n(:action remove-screwdriver\n    :parameters (?p - person ?s - screwdriver ?c - coconut)\n    :precondition (and\n                    (in_hand ?s ?p)\n                    (hole_bored ?c)\n                   )\n    :effect (and\n              (not (screwdriver_positioned ?s ?c))\n              (hole_widened ?c)\n            )\n)\n```\n\nExplanation:\n1. **obtain-screwdriver**: This action involves obtaining the screwdriver from the toolbox. The preconditions ensure the screwdriver is in the toolbox and not in hand, and the effect is that the screwdriver is now in hand.\n2. **position-screwdriver**: This action positions the screwdriver on one of the coconut's eyes. The precondition ensures the screwdriver is in hand and not already positioned, and the effect is that the screwdriver is positioned on the coconut.\n3. **bore-hole**: This action involves using the mallet to bore a hole through the coconut's eye. The preconditions ensure the screwdriver is in hand and positioned on the coconut, the mallet is in hand, and the hole is not yet bored. The effect is that the hole is bored.\n4. **remove-screwdriver**: This action removes the screwdriver, widening the hole. The preconditions ensure the screwdriver is in hand and the hole is bored, and the effect is that the screwdriver is no longer positioned on the coconut, and the hole is widened.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:poke\n\n\nAction sets that need to be merged:\n(:action poke_coconut_eye\n    :parameters (?c - coconut ?s - screwdriver ?m - mallet)\n    :precondition (and (drained ?c) (in_hand ?s) (in_hand ?m))\n    :effect (and (hole_in_eye ?c) (not (intact ?c)))\n)\n\n\n(:action poke-hole-in-coconut\n    :parameters (?c - coconut ?s - screwdriver ?m - mallet)\n    :precondition (and\n                    (coconut_location ?c in_glass)\n                    (coconut_condition ?c drained)\n                    (coconut_temperature ?c room_temperature)\n                    (tool_location ?s in_hand)\n                    (tool_location ?m in_hand)\n                   )\n    :effect (and\n              (coconut_condition ?c hole_poked)\n              (coconut_location ?c in_hand)\n              (not (coconut_location ?c in_glass))\n            )\n  )\n\n\n(:action poke_hole_in_coconut\n    :parameters (?c - coconut ?s - screwdriver ?m - mallet)\n    :precondition (and (intact ?c) (in_hand ?s) (in_hand ?m))\n    :effect (and (has_hole ?c) (not (intact ?c)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:break\n\n\nAction sets that need to be merged:\n(:action break_coconut_with_hammer\n    :parameters (?c - coconut ?h - hammer ?t - towel)\n    :precondition (and (hole_in_eye ?c) (wrapped ?c ?t) (in_hand ?h))\n    :effect (and (broken ?c) (not (wrapped ?c ?t)))\n)\n\n\n(:action break-coconut\n    :parameters (?coconut - coconut ?concrete_surface - surface)\n    :precondition (and (cooled ?coconut) (at ?coconut kitchen) (at ?concrete_surface kitchen))\n    :effect (and (broken ?coconut) (not (at ?coconut kitchen)))\n)\n```\n\n### Explanation:\n1. **poke-hole**: This action describes poking a hole in the coconut using a screwdriver and a mallet.\n2. **drain-coconut**: This action describes turning the coconut upside down over a glass to drain the liquid.\n3. **wrap-coconut**: This action describes wrapping the coconut in a towel.\n4. **cool-coconut**: This action describes allowing the coconut to cool while wrapped in a towel.\n5. **break-coconut**: This action describes striking the coconut against a concrete surface until it breaks apart.\n(:action cool_coconut\n    :parameters (?c - coconut ?t - towel)\n    :precondition (and (broken ?c) (in_towel ?c ?t))\n    :effect (and (cooled ?c) (not (hot ?c)))\n)\n```\n\n### Explanation:\n\n1. **drain_coconut**: This action represents turning the coconut upside down to drain it. Preconditions include the coconut being filled with liquid and the glass being empty. The effect is that the coconut is drained and the glass is filled.\n\n2. **poke_coconut_eye**: This action involves poking a hole in the coconut's \"eye\" using a screwdriver and mallet. The precondition is that the coconut is drained, and the screwdriver and mallet are in hand. The effect is that there is a hole in the coconut's eye.\n\n3. **break_coconut_with_hammer**: This action represents breaking the coconut using a hammer while it is wrapped in a towel. The precondition includes the coconut having a hole in the eye and being wrapped. The effect is that the coconut is broken.\n\n4. **strike_coconut_on_surface**: This action is an alternative to breaking the coconut with a hammer, using a hard surface instead. The precondition is that the coconut has a hole in the eye and is on a surface. The effect is that the coconut is broken.\n\n5. **cool_coconut**: This action involves cooling the coconut wrapped in a towel. The precondition is that the coconut is broken and in a towel. The effect is that the coconut is cooled.\n\nThese actions collectively describe the process of preparing the coconut for removing the fiber from its meat, based on the steps and descriptions provided.\n(:action cool-coconut\n    :parameters (?coconut - coconut ?towel - cloth)\n    :precondition (and (wrapped ?coconut ?towel) (at ?coconut kitchen))\n    :effect (and (cooled ?coconut) (not (wrapped ?coconut ?towel)) (at ?towel kitchen))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:strike\n\n\nAction sets that need to be merged:\n(:action strike_coconut_on_surface\n    :parameters (?c - coconut ?s - surface)\n    :precondition (and (hole_in_eye ?c) (on_surface ?c ?s) (not (broken ?c)))\n    :effect (and (broken ?c))\n)\n\n\n(:action bore-hole\n    :parameters (?p - person ?s - screwdriver ?m - mallet ?c - coconut)\n    :precondition (and\n                    (in_hand ?s ?p)\n                    (screwdriver_positioned ?s ?c)\n                    (in_hand ?m ?p)\n                    (not (hole_bored ?c))\n                   )\n    :effect (hole_bored ?c)\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:wrap\n\n\nAction sets that need to be merged:\n(:action wrap-coconut-in-towel\n    :parameters (?c - coconut ?t - towel)\n    :precondition (and\n                    (coconut_location ?c in_oven)\n                    (coconut_condition ?c hole_poked)\n                    (coconut_temperature ?c hot)\n                    (towel_location ?t in_hand)\n                   )\n    :effect (and\n              (coconut_location ?c wrapped_in_towel)\n              (coconut_temperature ?c cooled)\n              (not (coconut_location ?c in_oven))\n            )\n  )\n```\n\nThese actions correspond to the steps and descriptions provided, ensuring that the necessary preconditions and effects are captured accurately.\n(:action wrap_coconut_in_towel\n    :parameters (?c - coconut ?t - towel)\n    :precondition (and (has_hole ?c) (clean ?t))\n    :effect (and (wrapped ?c ?t) (not (clean ?t)))\n)\n```\n\nThese actions capture the essence of each step involved in the task of wrapping the coconut in a towel, ensuring that the necessary preconditions and effects align with the provided entity states.\n(:action position-screwdriver\n    :parameters (?p - person ?s - screwdriver ?c - coconut)\n    :precondition (and\n                    (in_hand ?s ?p)\n                    (not (screwdriver_positioned ?s ?c))\n                   )\n    :effect (screwdriver_positioned ?s ?c)\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:obtain\n\n\nAction sets that need to be merged:\n(:action obtain-screwdriver\n    :parameters (?p - person ?s - screwdriver ?t - toolbox)\n    :precondition (and\n                    (in_toolbox ?s ?t)\n                    (not (in_hand ?s ?p))\n                   )\n    :effect (and\n              (in_hand ?s ?p)\n              (not (in_toolbox ?s ?t))\n            )\n)\n\n\nThe actions after the merger are:"
]