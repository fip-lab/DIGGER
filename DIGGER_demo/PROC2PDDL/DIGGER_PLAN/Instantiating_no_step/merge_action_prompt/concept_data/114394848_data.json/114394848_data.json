[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:secure\n\n\nAction sets that need to be merged:\n(:action secure_machine\n    :parameters (?m - machine)\n    :precondition (and\n                    (machine ?m)\n                    (not (secured ?m)))\n    :effect (secured ?m)\n)\n\n;; Action 2: Set up virtual machines\n\n(:action get_authorization\n    :parameters (?t - target)\n    :precondition (and\n                    (target ?t)\n                    (not (authorized ?t)))\n    :effect (authorized ?t)\n)\n\n;; Action 4: Set up laboratory\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:learn\n\n\nAction sets that need to be merged:\n(:action learn_internet_html\n    :parameters (?p - person)\n    :precondition (and\n                    (not (knows-internet-html ?p))\n                    (has-access-to-computer ?p))\n    :effect (knows-internet-html ?p)\n)\n```\n\n#### Action 2: Acquire Unix System\n```lisp\n\n(:action learn_unix\n    :parameters (?p - person)\n    :precondition (and\n                    (has-unix-system ?p)\n                    (not (knows-unix ?p)))\n    :effect (knows-unix ?p)\n)\n```\n\n#### Action 4: Understand Hacking\n```lisp\n\n(:action learn_programming\n    :parameters (?p - person)\n    :precondition (and\n                    (not (knows-programming ?p))\n                    (has-access-to-computer ?p))\n    :effect (knows-programming ?p)\n)\n```\n\n#### Action 6: Understand Ethics of Hacking\n```lisp\n\n(:action acquire_unix_system\n    :parameters (?p - person ?s - system)\n    :precondition (and\n                    (not (has-unix-system ?p))\n                    (open-source ?s)\n                    (unix-based ?s))\n    :effect (has-unix-system ?p)\n)\n```\n\n#### Action 3: Learn Unix\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:understand\n\n\nAction sets that need to be merged:\n(:action understand_hacking\n    :parameters (?p - person)\n    :precondition (not (understands-hacking ?p))\n    :effect (understands-hacking ?p)\n)\n```\n\n#### Action 5: Learn Programming\n```lisp\n\n(:action understand_ethics_of_hacking\n    :parameters (?p - person)\n    :precondition (not (understands-ethics-hacking ?p))\n    :effect (understands-ethics-hacking ?p)\n)\n```\n\nThese actions reflect the steps involved in the task \"hacking1_1\" based on the descriptions provided. Each action has been structured to include parameters, preconditions, and effects, capturing the learning and acquisition processes necessary for hacking skills, as well as understanding the ethical implications.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:setup\n\n\nAction sets that need to be merged:\n(:action setup_virtual_machines\n    :parameters (?vm - virtual_machine)\n    :precondition (and\n                    (secured ?m)\n                    (not (setup ?vm)))\n    :effect (setup ?vm)\n)\n\n;; Action 3: Get authorization to attack target\n\n(:action setup_laboratory\n    :parameters (?l - laboratory)\n    :precondition (and\n                    (secured ?m)\n                    (not (setup ?l)))\n    :effect (setup ?l)\n)\n```\n\n### Descriptions:\n- Secure your machine first. To hack, you must need a system to practice your great hacking skills. However, make sure you have the authorization to attack your target. You can either attack your network, ask for written permission, or set up your laboratory with virtual machines. Attacking a system without permission, no matter its content is illegal and will get you in trouble.\n\n### Entity State:\n- `npc`: {'helmet': [{'attribute': 'decoration', 'before': 'bare | plain', 'after': 'camouflaged'}, {'attribute': 'visibility', 'before': 'visible', 'after': 'invisible'}], 'concept_knowledge': []}\n- `malware`: {'pliers': [{'attribute': 'location', 'before': 'in drawer | on table', 'after': 'on table | in hand'}, {'attribute': 'openness', 'before': 'open', 'after': 'closed'}, {'attribute': 'location', 'before': 'on table', 'after': 'in hand'}, {'attribute': 'position', 'before': 'open', 'after': 'gripped'}], 'concept_knowledge': []}\n- `creating back door`: {'fridge door': [{'attribute': 'electric conductivity', 'before': 'off', 'after': 'on'}, {'attribute': 'openness', 'before': 'open', 'after': 'closed'}], 'concept_knowledge': []}\n- `getting superuser privileges`: {'co-conspirators': [{'attribute': 'knowledge', 'before': 'unenlisted', 'after': 'enlisted'}, {'attribute': 'forming', 'before': 'unformed', 'after': 'now formed'}], 'concept_knowledge': []}\n- `knowing target`: {'weapon': [{'attribute': 'location', 'before': 'in vehicle', 'after': 'on ground'}, {'attribute': 'attention', 'before': 'carelessly disguised | visible', 'after': 'carefully disguised | disguised'}, {'attribute': 'location', 'before': 'absent', 'after': 'on weapon'}, {'attribute': 'decoration', 'before': 'bare', 'after': 'camouflaged'}], 'concept_knowledge': []}\n- `next`: {'cheese': [{'attribute': 'location', 'before': 'to the side', 'after': 'in the pot'}, {'attribute': 'openness', 'before': 'closed', 'after': 'open'}], 'concept_knowledge': ['[[next]] is related to [[after]]']}\n```\nThe actions after the merger are:"
]