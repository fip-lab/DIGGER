[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:gather\n\n\nAction sets that need to be merged:\n(:action gather_tinder\n    :parameters (?t - tinder)\n    :precondition (not (collected ?t))\n    :effect (collected ?t)\n)\n```\n\n2. **Action: gather_kindling**\n   - **Parameters:** (?k - kindling)\n   - **Preconditions:** (not (collected ?k))\n   - **Effects:** (collected ?k)\n\n```lisp\n\n(:action gather_kindling\n    :parameters (?k - twig ?b - branch)\n    :precondition (and\n                    (small ?k)\n                    (small ?b)\n                    (not (gathered ?k))\n                    (not (gathered ?b))\n                  )\n    :effect (and\n              (gathered ?k)\n              (gathered ?b)\n            )\n)\n```\n*Preconditions*: Small twigs and branches are available and not yet gathered.  \n*Effects*: The twigs and branches are gathered as kindling.\n\n#### Action 4: Avoid Large Animals\n```lisp\n\n(:action find_tinder\n    :parameters (?t - tinder)\n    :precondition (not (found_tinder ?t))\n    :effect (found_tinder ?t)\n)\n```\n\n- **Parameters**: `?t - tinder` represents the tinder material.\n- **Preconditions**: The tinder has not been found yet `(not (found_tinder ?t))`.\n- **Effects**: Marks the tinder as found `(found_tinder ?t)`.\n\n#### Action 2: Gather Kindling\n\n```pddl\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:prepare\n\n\nAction sets that need to be merged:\n(:action create_campfire\n    :parameters (?t - tinder ?k - kindling)\n    :precondition (and (collected ?t) (collected ?k))\n    :effect (campfire_created)\n)\n\n;; Action 4: Collect water\n\n(:action prepare_snare\n    :parameters (?s - string ?w - wire)\n    :precondition (or (available ?s) (available ?w))\n    :effect (snare_ready)\n)\n```\n- **Parameters**: `?s` represents string, and `?w` represents wire.\n- **Preconditions**: Either string or wire is available.\n- **Effects**: The snare is ready for use.\n\n#### Action 3: set_snare\n```lisp\n\n(:action prepare_fire_pit\n    :parameters (?f - fire_pit)\n    :precondition (not (prepared ?f))\n    :effect (prepared ?f)\n)\n```\n\n4. **Action: ignite_fire**\n   - **Parameters:** (?t - tinder ?k - kindling ?f - fire_pit)\n   - **Preconditions:** \n     - (collected ?t)\n     - (collected ?k)\n     - (prepared ?f)\n     - (not (lit ?f))\n   - **Effects:** (lit ?f)\n\n```lisp\n\n(:action build_snare\n    :parameters (?s - string ?w - wire ?l - loop)\n    :precondition (and\n                    (available ?s)\n                    (available ?w)\n                    (not (snare_built ?l))\n                  )\n    :effect (snare_built ?l)\n)\n```\n*Preconditions*: A piece of string or wire is available.  \n*Effects*: A snare is built.\n\n#### Action 2: Collect Tinder\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:collect\n\n\nAction sets that need to be merged:\n(:action collect_water\n    :parameters (?w - water)\n    :precondition (and (not (collected ?w)) (fresh ?w))\n    :effect (collected ?w)\n)\n\n;; Action 5: Boil water\n\n(:action collect_grass_tinder\n    :parameters (?g - grass_tinder ?t - tin)\n    :precondition (and (not (collected ?g)) (volume_full ?t))\n    :effect (and (collected ?g) (volume_empty ?t))\n)\n```\n- **Parameters**: `?g` represents grass tinder, and `?t` represents a tin.\n- **Preconditions**: The grass tinder has not been collected, and the tin is full.\n- **Effects**: The grass tinder is collected, and the tin becomes empty.\n\n#### Action 2: prepare_snare\n```lisp\n\n(:action collect_tinder\n    :parameters (?t - tinder_material)\n    :precondition (and\n                    (dry ?t)\n                    (not (collected ?t))\n                  )\n    :effect (collected ?t)\n)\n```\n*Preconditions*: The tinder material is dry and not yet collected.  \n*Effects*: The tinder material is collected.\n\n#### Action 3: Gather Kindling\n```lisp\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:boil\n\n\nAction sets that need to be merged:\n(:action boil_water\n    :parameters (?w - water ?c - campfire)\n    :precondition (and (collected ?w) (campfire_created))\n    :effect (and (boiled ?w) (temperature ?w hot))\n)\n```\n\nExplanation:\n1. **gather_tinder**: This action gathers dry tinder materials.\n2. **gather_kindling**: This action gathers dry kindling materials.\n3. **create_campfire**: This action creates a campfire using the collected tinder and kindling.\n4. **collect_water**: This action collects fresh water.\n5. **boil_water**: This action boils the collected water using the created campfire.\n\nThese actions align with the task of boiling water, ensuring each step is logically connected and the required preconditions and effects are clearly defined.\n(:action ignite_fire\n    :parameters (?t - tinder ?k - kindling ?f - fire_pit)\n    :precondition (and\n                    (collected ?t)\n                    (collected ?k)\n                    (prepared ?f)\n                    (not (lit ?f))\n                  )\n    :effect (lit ?f)\n)\n```\n\n### Explanation:\n- **gather_tinder**: This action represents the collection of small, dry materials that can be used as tinder. The precondition checks if the tinder is not already collected, and the effect marks it as collected.\n- **gather_kindling**: Similar to gathering tinder, this action involves collecting small twigs and branches to be used as kindling.\n- **prepare_fire_pit**: Prepares a fire pit where the fire will be started. The precondition ensures the fire pit is not already prepared, and the effect sets it as prepared.\n- **ignite_fire**: This action combines the collected tinder and kindling to ignite the fire in the prepared fire pit. It checks that all necessary components are collected and the fire pit is prepared before lighting the fire.\n\nThese actions focus on the essential steps for starting a fire based on the provided descriptions and entity states.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:set\n\n\nAction sets that need to be merged:\n(:action set_snare\n    :parameters (?n - npc ?s - snare)\n    :precondition (and (snare_ready) (visible ?n))\n    :effect (and (set ?s) (invisible ?n))\n)\n```\n- **Parameters**: `?n` represents an NPC, and `?s` represents a snare.\n- **Preconditions**: The snare is ready, and the NPC is visible.\n- **Effects**: The snare is set, and the NPC becomes invisible.\n\n### Notes:\n- The task \"find_tinder\" involves collecting grass tinder, which is reflected in the action `collect_grass_tinder`.\n- The preparation and setting of a snare are included as they relate to survival tasks, but they are adapted to fit the focus on tinder collection.\n- The entity states provided are used to define preconditions and effects, ensuring that the actions reflect changes in the environment or object states.\n\nThese actions capture the logical steps involved in the task, ensuring that each step is relevant to the overall goal of finding and preparing tinder.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:avoid\n\n\nAction sets that need to be merged:\n(:action avoid_large_animals\n    :parameters (?a - animal)\n    :precondition (and\n                    (large ?a)\n                    (not (hunted ?a))\n                  )\n    :effect (safe_from ?a)\n)\n```\n*Preconditions*: The animal is large and not hunted.  \n*Effects*: The agent is safe from the large animal.\n\nThese actions are designed to align with the task of building a teepee and the descriptions provided. If any adjustments are needed to better match the task's requirements, feel free to let me know!\nThe actions after the merger are:"
]