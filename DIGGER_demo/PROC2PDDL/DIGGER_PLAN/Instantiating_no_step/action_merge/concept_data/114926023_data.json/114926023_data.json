[
    "(:action gather ; Gather resources and update their status\n  :parameters (?p - person ?item - object ?loc - location)\n  :precondition (and \n                  (at ?p ?loc)\n                  (available ?item ?loc)\n                  (not (collected ?item)))\n  :effect (and\n            (collected ?item)\n            (has ?p ?item)\n            (selected_location ?loc))\n)",
    "To merge the given PDDL actions into a single, universal \"assemble\" action while adhering to the guidelines specified, we need to create an action that captures the core logic and state changes of the provided actions. The merged action should be abstract enough to cover the various assembling tasks, such as constructing a raft, creating a rescue signal, and constructing a frame. Here is how the merged action could look:\n\n```lisp\n(:action assemble\n    ; Universal action to assemble or construct a resource and update its status\n    :parameters (?p - person ?resource - object ?location - place ?material - material)\n    :precondition (and\n                    (at ?p ?location)\n                    (has_material ?p ?material)\n                    (not (assembled ?resource)))\n    :effect (and\n              (assembled ?resource)\n              (not (has_material ?p ?material))\n              (resource_ready ?resource))\n)\n```\n\n### Explanation:\n\n1. **Generality**:\n   - The parameters are abstract (`?p - person`, `?resource - object`, `?location - place`, `?material - material`) to cover a variety of assembling tasks, such as assembling a raft, creating a signal, or constructing a frame.\n   \n2. **State Change**:\n   - Preconditions ensure the person is at the correct location and has the necessary material. The effect reflects the transformation: the resource is assembled, material is consumed, and the resource is marked as ready.\n\n3. **Core Logic**:\n   - Retains the essence of needing a person at a location with a material to assemble a resource, which is common across the provided actions.\n\n4. **Avoid Redundancy**:\n   - Similar effects are merged (e.g., transitioning from `not assembled` to `assembled` and making the resource ready).\n\n5. **Logical Consistency**:\n   - The action maintains consistent logic, ensuring it can be applied to various contexts where assembling is required, with reasonable preconditions and effects.\n\nThis merged action should be flexible enough to accommodate the tasks specified by the original actions, with a more abstract and generalized approach.",
    "To merge the actions into a single universal action called \"cover,\" we need to ensure that the action is adaptable to a variety of tasks, maintains logical consistency, and avoids redundancy. Here is the merged action:\n\n```pddl\n(:action cover ; Cover an entity using a specified resource\n  :parameters (?entity - object ?resource - object)\n  :precondition (and (constructed ?entity) (collected ?resource) (not (covered ?entity)))\n  :effect (covered ?entity)\n)\n```\n\n### Explanation:\n\n1. **Generality**: \n   - The action is named \"cover\" to broadly represent the task of covering or completing an entity with some resource, making it applicable to various contexts beyond just shelter construction.\n   - The parameters `?entity` and `?resource` are abstract, allowing the action to be used for different types of entities and resources.\n\n2. **State Change**:\n   - The precondition `(constructed ?entity)` ensures the entity is ready for covering, similar to the frame being constructed in the original actions.\n   - `(collected ?resource)` ensures the necessary resource is available for the task.\n   - The effect `(covered ?entity)` indicates the successful completion of the task.\n\n3. **Simplicity**:\n   - By merging similar actions, redundancy is reduced. The focus is on the essential elements needed to perform the covering task.\n   - Unnecessary complexity is removed by focusing on the key preconditions and effects.\n\n4. **Logical Consistency**:\n   - The preconditions and effects maintain a logical sequence: an entity must be constructed and resources collected before it can be covered.\n   - This ensures that the action can be reasonably applied in different scenarios without requiring additional conditions.\n\nBy following these guidelines, the merged action \"cover\" can be adapted to various tasks, maintaining clarity and simplicity while effectively transforming the entity's state toward the goal.",
    "Considering the guidelines and the given tasks, the merged action \"launch\" should be designed to encompass a broad range of activities related to launching or initiating a task. This should apply to entities such as rafts, signals, or any other object that may need to be launched or set in motion.\n\nHere is the merged action:\n\n```lisp\n(:action launch ; Launch or initiate a task with an entity\n    :parameters (?actor - person ?entity - object ?location - place)\n    :precondition (and\n                    (at ?actor ?location)\n                    (assembled ?entity)\n                    (available ?entity))\n    :effect (and\n              (in-use ?entity)\n              (not (available ?entity))\n              (engaged ?actor ?entity))\n)\n```\n\n### Explanation:\n\n- **Generality**: The action uses abstract parameters (`?actor`, `?entity`, `?location`) to ensure it can apply to various tasks beyond just launching a raft.\n- **State Change**: The preconditions and effects clearly reflect the transition of the entity from being available and assembled to being in use and engaged by the actor.\n- **Simplicity**: The action avoids redundancy by combining similar effects and removing unnecessary complexity.\n- **Logical Consistency**: The preconditions and effects are logically consistent across different contexts, making the action adaptable while maintaining clear and reasonable logic.\n\n### Sample Use Cases:\n\n1. **Launching a Raft**:\n   ```lisp\n   (:action launch\n       :parameters (?p - person ?r - raft ?b - beach)\n       :precondition (and\n                       (at ?p ?b)\n                       (assembled ?r)\n                       (available ?r))\n       :effect (and\n                 (in-use ?r)\n                 (not (available ?r))\n                 (engaged ?p ?r))\n   )\n   ```\n\n2. **Creating a Rescue Signal**:\n   ```lisp\n   (:action launch\n       :parameters (?p - person ?s - signal ?b - beach)\n       :precondition (and\n                       (at ?p ?b)\n                       (assembled ?s)\n                       (available ?s))\n       :effect (and\n                 (in-use ?s)\n                 (not (available ?s))\n                 (engaged ?p ?s))\n   )\n   ```\n\n3. **Using Driftwood to Build Something**:\n   ```lisp\n   (:action launch\n       :parameters (?p - person ?d - driftwood ?b - beach)\n       :precondition (and\n                       (at ?p ?b)\n                       (assembled ?d)\n                       (available ?d))\n       :effect (and\n                 (in-use ?d)\n                 (not (available ?d))\n                 (engaged ?p ?d))\n   )\n   ```\n\nThis merged action \"launch\" can now be used flexibly in various scenarios involving initiating or setting entities into use, maintaining a clear and consistent structure."
]