[
    "```pddl\n(:action find ; Find a resource and update its status\n  :parameters (?p - person ?item - object ?location - place)\n  :precondition (and \n                  (at ?p ?location)\n                  (or \n                    (at ?item river)\n                    (at ?item base_of_leaves)\n                    (at ?item cave)\n                    (at ?item hollowed_tree)\n                    (at ?item undercut_bank)\n                    (not (location ?item present))\n                    (has_supplies ?p ?item)\n                    (not (rationed ?item))))\n  :effect (and \n            (found ?p ?item)\n            (location ?item present)\n            (rationed ?item)\n            (increased_duration ?item))\n)\n```\n\n### Explanation:\n1. **Generality**: The merged action `find` is designed to be highly adaptable by using abstract parameters `?p` (person), `?item` (object), and `?location` (place), making it applicable to various tasks involving finding, collecting, or rationing resources.\n2. **State Change**: The action's preconditions and effects describe changes in the state of the entity. The preconditions ensure the entity is at the correct location and that the resource has not already been found, located, or rationed. The effects transform the entity's state by marking the resource as found, updating its location, and indicating it has been rationed.\n3. **Simplicity**: The merged action avoids redundancy by combining similar effects into a single, efficient action. This reduces the complexity while maintaining the core logic of the original actions.\n4. **Logical Consistency**: The preconditions and effects are logically consistent, ensuring that the action can be applied in different contexts without losing its meaning or functionality.\n\nThis merged action can now be used to handle multiple scenarios involving finding, collecting, and rationing resources within a single, unified framework.",
    "(:action collect\n  ; Collect an item/resource and update the state of the container\n  :parameters (?p - person ?item - object ?c - container)\n  :precondition (and\n                  (found ?p ?item)\n                  (empty ?c))\n  :effect (and\n            (full ?c)\n            (not (empty ?c)))\n)\n\n(:action prepare\n  ; Prepare an item/resource by transforming its state\n  :parameters (?p - person ?item - object ?c - container)\n  :precondition (and\n                  (found ?p ?item)\n                  (not (boiled ?item))\n                  (full ?c))\n  :effect (boiled ?item)\n)",
    "To merge the given actions into a single universal action named \"boil,\" we need to capture the essence of boiling water while considering the necessary preconditions and effects of each individual action. Here's how the merged action would look:\n\n```lisp\n(:action boil ; Boil a resource by preparing and heating\n:parameters (?p - person ?resource - resource ?container - container ?heat-source - resource)\n:precondition (and\n                (full ?container)\n                (cold ?resource)\n                (not (heated ?resource))\n                (wood_location ?heat-source present)\n                (fire_pit_arranged ?p)\n                (wood_moisture ?heat-source dry)\n                (lit ?heat-source)\n              )\n:effect (and\n          (hot ?resource)\n          (heated ?resource)\n          (fire_started ?p)\n          (not (cold ?resource))\n        )\n)\n```\n\n### Explanation:\n\n1. **Generality**: \n   - The parameters are kept abstract, using `?resource` and `?heat-source` to cover various contexts where boiling might occur (e.g., water, other liquids).\n   - The action name \"boil\" is chosen to reflect the general task of preparing and heating a resource.\n\n2. **State Change**:\n   - The preconditions and effects reflect the transformation from a cold to a hot state of the resource, indicating the completion of boiling.\n\n3. **Core Logic**:\n   - The core logic of checking preconditions like the presence of full containers, cold status of the resource, and readiness of the heat source is maintained.\n   - The logic for starting a fire is incorporated, ensuring that the heating can occur.\n\n4. **Avoid Redundancy**:\n   - Preconditions and effects are merged logically to avoid redundancy, focusing on the necessary steps to achieve the goal (hot and heated resource).\n\n5. **Logical Consistency**:\n   - All conditions and effects are kept consistent with the original actions, ensuring that the logical flow of the task is preserved.\n\nThis merged action should be applicable to various scenarios involving boiling or heating processes, capturing the essential steps required to achieve the desired state change.",
    "To merge the given actions for filtering water and cleaning fish into a single universal action named \"filter,\" we need to generalize the parameters and ensure the preconditions and effects cover a variety of scenarios. Below is the merged action:\n\n### Merged Action: filter\n\n```lisp\n(:action filter\n    ; Filter a resource and update its state to clean or filtered\n    :parameters (?entity - object ?resource - object ?tool - object)\n    :precondition (and\n                    (or (hot ?resource) (heated ?resource) (caught ?entity))\n                    (or (has_filter ?entity ?tool) (not (cleaned ?entity)))\n                   )\n    :effect (and\n              (or (filtered ?resource) (cleaned ?entity))\n              (clean ?resource)\n            )\n)\n```\n\n### Explanation:\n\n1. **Generality:**\n   - The parameters `?entity`, `?resource`, and `?tool` are abstract enough to be applicable in various contexts. \n   - `?entity` can be any object, allowing for flexibility in what is being filtered or cleaned.\n   - `?resource` is any object that can be filtered or cleaned, such as water or fish.\n   - `?tool` is an abstract parameter for any tool used in the process, like a filter.\n\n2. **State Change:**\n   - The preconditions include checks for the required state of the resources, such as being hot, heated, or caught.\n   - The effects ensure the state change is clearly reflected, such as marking the resource as filtered or the entity as cleaned.\n\n3. **Simplicity:**\n   - The merged action avoids redundancy by combining similar effects and using logical OR conditions to cover different scenarios.\n   - This approach removes unnecessary complexity while maintaining the core logic.\n\n4. **Logical Consistency:**\n   - The preconditions and effects are consistent with the logical flow of filtering or cleaning processes.\n   - The action ensures that the necessary conditions are met before performing the state change.\n\nBy following the guidelines and ensuring abstract parameters, clear state changes, simplicity, and logical consistency, the merged action \"filter\" is adaptable to various tasks involving filtering or cleaning resources.",
    "To merge the given PDDL actions into a single, universal action while adhering to the guidelines provided, we focus on abstracting the parameters and combining the preconditions and effects in a way that maintains logical consistency and simplicity. Here's the merged action:\n\n```pddl\n(:action hunt\n  ; Hunt for resources and update the status of resource acquisition\n  :parameters (?agent - entity ?location - place ?resource - resource)\n  :precondition (and\n    (at ?agent ?location)\n    (or\n      (and (not (acquired ?agent ?resource)) (has_resource ?location ?resource))\n      (and (not (acquired ?agent ?resource)) (not (acquired ?resource)))\n    )\n  )\n  :effect (and\n    (acquired ?agent ?resource)\n    (decreased_availability ?location ?resource)\n  )\n)\n```\n\n### Explanation of Merged Action\n\n- **Generality**: The action is designed to be general, with abstract parameters such as `?agent`, `?location`, and `?resource`, allowing it to apply to a variety of tasks where an entity acquires resources or catches something from a location. This abstraction supports different contexts like hunting, fishing, or gathering.\n\n- **State Change**: The precondition checks if the agent is at the location and whether the resource is available or not yet acquired. The effects reflect the acquisition of the resource and the decrease in its availability at the location, indicating a change in state.\n\n- **Core Logic**: The action retains the core logic of checking if the resource is available and not yet acquired by the agent. The effects ensure the resource is marked as acquired by the agent and its availability is decreased, retaining the essence of the individual actions.\n\n- **Avoid Redundancy**: By using common predicates such as `acquired`, `has_resource`, and `decreased_availability`, the action avoids redundancy and combines the similar effects of the original actions into a single, efficient action.\n\n- **Logical Consistency**: The action maintains logical consistency across different tasks by ensuring the preconditions and effects are reasonable and applicable in various contexts where resources are managed or hunted.\n\nThis merged action can be used in scenarios that involve resource acquisition, ensuring a consistent and efficient approach to capturing state changes in a variety of tasks.",
    "Based on your guidelines and the example actions you provided, we can merge the actions into a universal \"cook\" action, abstracting parameters to make the action adaptable to multiple tasks involving food preparation and resource management. Here is the merged action:\n\n```pddl\n(:action cook\n    :parameters (?p - person ?item - object ?resource - resource)\n    :precondition (and\n                    (available ?p)\n                    (not (prepared ?item))\n                    (resource_ready ?resource)\n                   )\n    :effect (prepared ?item)\n)\n```\n\nExplanation:\n\n1. **Generality**: The action uses abstract parameters (?p - person, ?item - object, ?resource - resource) to adapt to various tasks, such as cooking food, heating water, or arranging materials.\n\n2. **State Change**: The preconditions ensure that the person is available, the item is not already prepared, and the necessary resource (e.g., fire, heated water) is ready. The effect is that the item becomes prepared.\n\n3. **Core Logic**: The merged action retains the core logic of preconditions and effects without unnecessary complexity.\n\n4. **Avoid Redundancy**: Similar effects from different actions (like cooking fish, heating water, etc.) are merged to avoid redundancy and ensure simplicity.\n\n5. **Logical Consistency**: The action maintains reasonable preconditions and effects across different contexts, ensuring logical consistency.\n\nThis merged action \"cook\" can be applied to multiple scenarios where an entity (person) uses a resource to prepare an item, making it adaptable to various tasks while ensuring clarity and efficiency."
]