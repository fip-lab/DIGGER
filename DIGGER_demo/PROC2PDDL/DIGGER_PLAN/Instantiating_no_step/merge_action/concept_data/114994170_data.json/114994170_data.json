{
    "wait": [
        "(:action wait_for_chaos_to_subside\n    :parameters (?agent - person)\n    :precondition (and\n                    (chaos ?agent)\n                    (not (safe ?agent)))\n    :effect (safe ?agent)\n)\n```\n\n#### Action 2: Collect Water from Faucet\nThis action involves collecting water from a faucet, assuming the water is still running.\n\n```lisp\n"
    ],
    "collect": [
        "(:action collect_water_from_faucet\n    :parameters (?faucet - faucet ?container - container)\n    :precondition (and\n                    (location ?container on_counter_top)\n                    (location ?faucet under_faucet)\n                    (empty ?container)\n                    (water_flowing ?faucet))\n    :effect (and\n              (full ?container)\n              (not (empty ?container)))\n)\n```\n\n#### Action 3: Use Bathtub to Store Water\nThis action involves using the bathtub to store water, which could be a large reservoir in case of water shortages.\n\n```lisp\n"
    ],
    "use": [
        "(:action use_bathtub_to_store_water\n    :parameters (?bathtub - bathtub ?water_source - water)\n    :precondition (and\n                    (empty ?bathtub)\n                    (water_available ?water_source))\n    :effect (and\n              (full ?bathtub)\n              (not (empty ?bathtub)))\n)\n```\n\n#### Action 4: Eat Perishable Food First\nThis action ensures that perishable food is consumed first to minimize waste during the crisis.\n\n```lisp\n"
    ],
    "eat": [
        "(:action eat_perishable_food_first\n    :parameters (?food - food ?storage - refrigerator)\n    :precondition (and\n                    (in_refrigerator ?food ?storage)\n                    (perishable ?food))\n    :effect (and\n              (consumed ?food)\n              (not (in_refrigerator ?food ?storage)))\n)\n```\n\n### Explanation\n- **Action 1**: This action is about ensuring safety before taking any further steps, which is crucial in a chaotic situation.\n- **Action 2**: Collects water from a faucet into a container, assuming the faucet is still operational.\n- **Action 3**: Uses the bathtub as a large container to store water for future use.\n- **Action 4**: Focuses on consuming perishable food items first, aligning with the description provided.\n\nThese actions are designed to align with the task of collecting water while considering the context of a crisis situation as described."
    ],
    "cover": [
        "(:action cover_mouth_and_nose\n    :parameters (?npc - character ?cloth - item)\n    :precondition (and\n                    (location ?npc outside)\n                    (availability ?cloth in_hand)\n                    (safety_level ?npc unprotected))\n    :effect (and\n             (safety_level ?npc protected)\n             (status ?cloth in_use))\n  )\n```\n\n#### Action 2: find_shelter\n```lisp\n",
        "(:action place_drop_cloth\n    :parameters (?b - basement ?dc - drop_cloth)\n    :precondition (and\n                    (not (drop_cloth_present ?b ?dc))\n                    (drop_cloth_uncovered ?b ?dc))\n    :effect (and \n            (drop_cloth_present ?b ?dc)\n            (drop_cloth_covered ?b ?dc))\n)\n```\n\n#### Action 2: Remove Drop Cloth\n```lisp\n"
    ],
    "find": [
        "(:action find_shelter\n    :parameters (?npc - character ?shelter - place)\n    :precondition (and\n                    (location ?npc outside)\n                    (safety_level ?npc protected)\n                    (knowledge ?npc shelter_location))\n    :effect (and\n             (location ?npc ?shelter)\n             (safety_level ?npc more_protected))\n  )\n```\n\n#### Action 3: travel_to_home\n```lisp\n"
    ],
    "travel": [
        "(:action travel_to_home\n    :parameters (?npc - character ?home - place)\n    :precondition (and\n                    (location ?npc ?shelter)\n                    (safety_level ?npc more_protected)\n                    (knowledge ?npc home_location))\n    :effect (and\n             (location ?npc ?home)\n             (safety_level ?npc safe))\n  )\n```\n\n#### Action 4: enter_home\n```lisp\n",
        "(:action enter_home\n    :parameters (?npc - character ?home - place)\n    :precondition (and\n                    (location ?npc ?home)\n                    (safety_level ?npc safe)\n                    (status ?home door_open))\n    :effect (and\n             (location ?npc inside_home)\n             (status ?home door_closed))\n  )\n```\n\n### Summary:\nThe actions defined above guide the character (npc) through a series of steps to get home safely during a nuclear blast. The character covers their mouth and nose, finds shelter, travels to home, and finally enters home, ensuring safety at each step."
    ],
    "remove": [
        "(:action remove_drop_cloth\n    :parameters (?b - basement ?dc - drop_cloth)\n    :precondition (and\n                    (drop_cloth_present ?b ?dc)\n                    (drop_cloth_covered ?b ?dc))\n    :effect (and \n            (not (drop_cloth_present ?b ?dc))\n            (drop_cloth_removed ?b ?dc))\n)\n```\n\n#### Action 3: Camouflage Helmet\n```lisp\n"
    ],
    "camouflage": [
        "(:action camouflage_helmet\n    :parameters (?n - npc ?h - helmet)\n    :precondition (and\n                    (helmet_bare ?n ?h)\n                    (helmet_visible ?n ?h))\n    :effect (and \n            (helmet_camouflaged ?n ?h)\n            (helmet_invisible ?n ?h))\n)\n```\n\n### Explanation:\n1. **Place Drop Cloth**: This action involves placing a drop cloth in the basement, changing its state from absent to present, and uncovered to covered.\n\n2. **Remove Drop Cloth**: This action involves removing the drop cloth from the basement, changing its state from present to removed.\n\n3. **Camouflage Helmet**: This action involves camouflaging the helmet of an NPC, changing its state from bare and visible to camouflaged and invisible.\n\nThese actions have been generated by considering the entity states and descriptions provided, aligning with the task of preparing for an attack."
    ]
}