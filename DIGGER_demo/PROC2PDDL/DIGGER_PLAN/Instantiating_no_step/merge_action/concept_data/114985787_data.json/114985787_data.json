{
    "insert": [
        "(:action insert_branch_into_tree_split\n    :parameters (?b - branch ?t - tree)\n    :precondition (and\n                    (found_branch ?b)\n                    (tree_has_split ?t)\n                    (not (branch_inserted ?b ?t))\n                  )\n    :effect (branch_inserted ?b ?t)\n)\n```\n\n#### Step 2: Dig a deep hole for water collection.\nThis step seems more related to survival rather than building a shelter. However, if we consider it as part of the shelter-building process (perhaps as a water source near the shelter), we can include it.\n\n```lisp\n",
        "(:action place_branch_in_other_tree\n    :parameters (?b - branch ?t1 - tree ?t2 - tree)\n    :precondition (and\n                    (branch_inserted ?b ?t1)\n                    (tree_has_split ?t2)\n                    (not (horizontal_frame_formed ?b ?t1 ?t2))\n                  )\n    :effect (horizontal_frame_formed ?b ?t1 ?t2)\n)\n```\n\n### Notes:\n- **Conditions and Effects**: The preconditions and effects are designed to reflect the logical sequence of actions (e.g., a branch must be found before it can be inserted).\n- **Entities and Parameters**: Parameters such as `?b - branch` and `?t - tree` are used to represent the objects involved in the actions.\n- **Irrelevant Steps**: Step 2 was adjusted to fit the context of building a shelter by considering it as a water source setup near the shelter.\n\nThese actions capture the sequence and logic needed to build a basic shelter using branches and trees, as described in the task.",
        "(:action set_snare\n    :parameters (?p - person ?s - snare ?l - location)\n    :precondition (and\n                    (assembled ?s)\n                    (strategic_location ?l)\n                    (not (set ?s))\n                  )\n    :effect (set ?s)\n)\n```\nExplanation:\n1. **look_for_mushrooms**: This action involves a person looking for mushrooms in a dark and damp location. The precondition checks if the person is trained and the location is suitable. The effect is that the mushroom is collected.\n2. **collect_materials**: This action involves a person collecting necessary materials. The precondition checks if the material is available and not yet collected. The effect is that the material is collected.\n3. **assemble_snare**: This action involves assembling the snare. The precondition checks if the snare materials are collected and not yet assembled. The effect is that the snare is assembled.\n4. **set_snare**: This action involves setting the snare in a strategic location. The precondition checks if the snare is assembled and the location is strategic. The effect is that the snare is set.\n\nThese actions follow the structure and format provided in the example and are tailored to the task of building a snare."
    ],
    "dig": [
        "(:action dig_hole_for_water\n    :parameters (?h - hole)\n    :precondition (not (hole_dug ?h))\n    :effect (hole_dug ?h)\n)\n```\n\n#### Step 3: Find a branch 10 feet long and 3\u20136 inches thick.\n```lisp\n",
        "(:action assemble_snare\n    :parameters (?p - person ?s - snare)\n    :precondition (and\n                    (collected ?s)\n                    (not (assembled ?s))\n                  )\n    :effect (assembled ?s)\n)\n\n"
    ],
    "find": [
        "(:action find_suitable_branch\n    :parameters (?b - branch)\n    :precondition (and\n                    (not (found_branch ?b))\n                    (branch_suitable ?b)\n                  )\n    :effect (found_branch ?b)\n)\n```\n\n#### Step 4: Place the other end of the branch into the split of the other tree.\n```lisp\n"
    ],
    "search": [
        "(:action search_for_water\n    :parameters (?agent - person ?location - place)\n    :precondition (and\n      (at ?agent ?location)\n      (not (found_water ?agent))\n    )\n    :effect (found_water ?agent)\n)\n```\n\n#### Action 2: pick_edible_berries\n```lisp\n",
        "(:action look_for_mushrooms\n    :parameters (?p - person ?m - mushroom ?l - location)\n    :precondition (and\n                    (trained ?p)\n                    (dark_damp ?l)\n                    (not (collected ?m))\n                  )\n    :effect (collected ?m)\n)\n\n"
    ],
    "pick": [
        "(:action pick_edible_berries\n    :parameters (?agent - person ?bush - plant ?berry - food)\n    :precondition (and\n      (at ?agent ?bush)\n      (identifiable ?bush)\n      (has_berries ?bush ?berry)\n      (edible ?berry)\n    )\n    :effect (and\n      (picked ?agent ?berry)\n      (not (has_berries ?bush ?berry))\n    )\n)\n```\n\n### Explanation:\n- **search_for_water**: This action involves an agent searching for a water source. The precondition checks if the agent is at a location and has not yet found water. The effect is that the agent finds water.\n  \n- **pick_edible_berries**: This action involves picking berries from a bush. The preconditions ensure the agent is at the bush, the bush is identifiable, it has berries, and those berries are edible. The effect is that the agent picks the berries, and the bush no longer has those berries.\n\nThese actions are designed to represent the logical steps necessary for the task \"eat_plants\" based on the provided descriptions."
    ],
    "collect": [
        "(:action collect_materials\n    :parameters (?p - person ?m - material)\n    :precondition (and\n                    (available ?m)\n                    (not (collected ?m))\n                  )\n    :effect (collected ?m)\n)\n\n"
    ]
}