{
    "make": [
        "(:action make_solar_still\n    :parameters (?hole - location ?container - container ?plastic_sheet - plastic_sheet ?stone - object ?leaves - object)\n    :precondition (and\n                    (at ?hole)\n                    (empty ?container)\n                    (available ?plastic_sheet)\n                    (available ?stone)\n                    (available ?leaves))\n    :effect (and\n              (solar_still ?hole ?container ?plastic_sheet ?stone ?leaves)\n              (not (empty ?container))\n              (not (available ?plastic_sheet))\n              (not (available ?stone))\n              (not (available ?leaves))\n              (collecting_water ?container))\n  )\n\n  ;; Action 2: Collect water from natural containers\n  ",
        "(:action build_shelter\n    :parameters (?s - stick ?p - pole)\n    :precondition (and\n                    (collected ?s)\n                    (center_pole ?p)\n                    (not (shelter_built))\n                  )\n    :effect (and\n              (shelter_built)\n              (sticks_placed ?s ?p)\n            )\n)\n```\n\n#### Action 2: collect_water\n- **Parameters:** (?c - container ?j - jungle)\n- **Preconditions:** \n  - (natural_container ?c)\n  - (in_jungle ?j)\n  - (not (water_collected ?c))\n- **Effects:**\n  - (water_collected ?c)\n\n```lisp\n"
    ],
    "collect": [
        "(:action collect_water_natural_container\n    :parameters (?container - container ?location - location)\n    :precondition (and\n                    (at ?location)\n                    (natural_container ?container)\n                    (empty ?container))\n    :effect (and\n              (collected_water ?container)\n              (not (empty ?container)))\n  )\n\n  ;; Action 3: Boil water from streams\n  ",
        "(:action collect_rainwater\n    :parameters (?container - container ?location - location)\n    :precondition (and\n                    (at ?location)\n                    (rain)\n                    (empty ?container))\n    :effect (and\n              (collected_rainwater ?container)\n              (not (empty ?container)))\n  )\n)\n\n(define (problem drink_water_task)\n  (:domain drink_water)\n  (:objects\n    hole1 - location\n    container1 container2 - container\n    plastic_sheet1 - plastic_sheet\n    stone1 - object\n    leaves1 - object\n    water_source1 - water_source\n    fire_source1 - fire_source\n    fabric1 - fabric\n    location1 - location\n  )\n  (:init\n    (at hole1)\n    (empty container1)\n    (empty container2)\n    (available plastic_sheet1)\n    (available stone1)\n    (available leaves1)\n    (running_stream water_source1)\n    (available fire_source1)\n    (available fabric1)\n    (rain)\n    (natural_container container2)\n  )\n  (:goal\n    (and\n      (collected_water container1)\n      (collected_water container2)\n    )\n  )\n)\n```\n\n### Explanation:\n1. **make_solar_still**: This action sets up a solar still using a hole, container, plastic sheet, stone, and leaves.\n2. **collect_water_natural_container**: This action collects water from natural containers like a coconut shell or piece of wood.\n3. **boil_water**: This action boils water from streams using a fire source and a fabric filter.\n4. **collect_rainwater**: This action collects rainwater using a container.\n\nThese actions cover the steps and descriptions provided in the task \"drink_water.\"",
        "(:action collect_water\n    :parameters (?c - container ?j - jungle)\n    :precondition (and\n                    (natural_container ?c)\n                    (in_jungle ?j)\n                    (not (water_collected ?c))\n                  )\n    :effect (water_collected ?c)\n)\n```\n\n#### Action 3: navigate_to_landmark\n- **Parameters:** (?l - landmark ?f - footpath)\n- **Preconditions:** \n  - (lost_on_foot)\n  - (remember_landmark ?l)\n  - (not (at_landmark ?l))\n- **Effects:**\n  - (at_landmark ?l)\n  - (found_footpath ?f)\n\n```lisp\n",
        "(:action collect_condensation\n    :parameters (?p - plastic_sheet ?c - container)\n    :precondition (and\n                    (plastic_sheet_set ?p)\n                    (not (condensation_collected ?c))\n                  )\n    :effect (condensation_collected ?c)\n)\n```\n\n#### Action 7: cover_shelter\n- **Parameters:** (?l - leaf ?s - shelter)\n- **Preconditions:** \n  - (large_leaf ?l)\n  - (shelter_built ?s)\n  - (not (shelter_covered ?s))\n- **Effects:**\n  - (shelter_covered ?s)\n\n```lisp\n"
    ],
    "boil": [
        "(:action boil_water\n    :parameters (?water_source - water_source ?fire_source - fire_source ?fabric - fabric ?container - container)\n    :precondition (and\n                    (at ?water_source)\n                    (running_stream ?water_source)\n                    (available ?fire_source)\n                    (available ?fabric)\n                    (empty ?container))\n    :effect (and\n              (filtered_water ?container)\n              (not (empty ?container))\n              (not (available ?fabric)))\n  )\n\n  ;; Action 4: Collect rainwater\n  "
    ],
    "navigate": [
        "(:action navigate_to_landmark\n    :parameters (?l - landmark ?f - footpath)\n    :precondition (and\n                    (lost_on_foot)\n                    (remember_landmark ?l)\n                    (not (at_landmark ?l))\n                  )\n    :effect (and\n              (at_landmark ?l)\n              (found_footpath ?f)\n            )\n)\n```\n\n#### Action 4: purify_water\n- **Parameters:** (?w - water ?f - fire)\n- **Preconditions:** \n  - (water_collected ?w)\n  - (fire_started ?f)\n  - (not (water_purified ?w))\n- **Effects:**\n  - (water_purified ?w)\n\n```lisp\n"
    ],
    "purify": [
        "(:action purify_water\n    :parameters (?w - water ?f - fire)\n    :precondition (and\n                    (water_collected ?w)\n                    (fire_started ?f)\n                    (not (water_purified ?w))\n                  )\n    :effect (water_purified ?w)\n)\n```\n\n#### Action 5: craft_spear\n- **Parameters:** (?b - bamboo ?v - vine)\n- **Preconditions:** \n  - (bamboo_found ?b)\n  - (vine_found ?v)\n  - (not (spear_crafted))\n- **Effects:**\n  - (spear_crafted)\n\n```lisp\n"
    ],
    "cover": [
        "(:action cover_shelter\n    :parameters (?l - leaf ?s - shelter)\n    :precondition (and\n                    (large_leaf ?l)\n                    (shelter_built ?s)\n                    (not (shelter_covered ?s))\n                  )\n    :effect (shelter_covered ?s)\n)\n```\n\nThese actions capture the necessary steps and conditions for completing the task \"safe_in_cave,\" based on the provided descriptions and entity states."
    ],
    "craft": [
        "(:action craft_spear\n    :parameters (?b - bamboo ?v - vine)\n    :precondition (and\n                    (bamboo_found ?b)\n                    (vine_found ?v)\n                    (not (spear_crafted))\n                  )\n    :effect (spear_crafted)\n)\n```\n\n#### Action 6: collect_condensation\n- **Parameters:** (?p - plastic_sheet ?c - container)\n- **Preconditions:** \n  - (plastic_sheet_set ?p)\n  - (not (condensation_collected ?c))\n- **Effects:**\n  - (condensation_collected ?c)\n\n```lisp\n"
    ]
}