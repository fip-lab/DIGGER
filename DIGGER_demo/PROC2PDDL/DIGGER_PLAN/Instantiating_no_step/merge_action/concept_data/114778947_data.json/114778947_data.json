{
    "lift": [
        "(:action lift_weather_stripping\n  :parameters (?w - weather_stripping ?d - door)\n  :precondition (and\n    (attached ?w ?d)\n    (not (lifted ?w))\n  )\n  :effect (and\n    (lifted ?w)\n    (not (attached ?w ?d))\n  )\n)\n\n;;; Action 3: Insert Hanger into Door\n"
    ],
    "insert": [
        "(:action insert_hanger_into_door\n  :parameters (?h - hanger ?w - weather_stripping ?d - door)\n  :precondition (and\n    (straight ?h)\n    (lifted ?w)\n    (not (inside ?h ?d))\n  )\n  :effect (and\n    (inside ?h ?d)\n    (not (outside ?h ?d))\n  )\n)\n\n;;; Action 4: Hook and Pull Latch\n"
    ],
    "hook": [
        "(:action hook_and_pull_latch\n  :parameters (?h - hanger ?l - latch ?d - door)\n  :precondition (and\n    (inside ?h ?d)\n    (not (unlocked ?d))\n  )\n  :effect (and\n    (unlocked ?d)\n    (not (locked ?d))\n  )\n)\n```\n\n### Entity States:\n- Car: \n  - Vehicle:\n    - Location: before: in garage, after: in forest\n    - Visibility: before: visible, after: invisible\n    - Vehicle: before: uncovered, after: netted with camouflage\n  - Concept Knowledge:\n    - [[drive]] is related to [[car]]\n    - You are likely to find [[a car]] in [[the city]]\n    - [[A car]] can [[go fast]]\n    - [[a car]] has [[seats]]\n    - [[A tire]] is part of [[a car]]\n    - [[A volvo]] is a type of [[car]]\n    - [[my car]] is [[red]]\n- NPC:\n  - Helmet:\n    - Decoration: before: bare | plain, after: camouflaged\n    - Visibility: before: visible, after: invisible\n  - Concept Knowledge: []\n\nThese actions should adequately capture the steps and descriptions provided for the task of picking a car lock using a coat hanger."
    ],
    "unravel": [
        "(:action unravel_and_straighten_hanger\n  :parameters (?h - hanger)\n  :precondition (and\n    (not (straight ?h))\n    (hooked ?h)\n  )\n  :effect (and\n    (straight ?h)\n    (not (hooked ?h))\n  )\n)\n\n;;; Action 2: Lift Weather Stripping\n"
    ],
    "SlideCreditCardToUnlock": [
        "(:action SlideCreditCardToUnlock\n    :parameters (?a - agent ?cc - creditcard ?d - door ?l - lock)\n    :precondition (and\n            (atLocation ?a ?d)\n            (holds ?a ?cc)\n            (locked ?l ?d)\n            (isCreditCard ?cc)\n            (isDoor ?d)\n            (isLock ?l)\n            (lockAttachedToDoor ?l ?d)\n            )\n    :effect (and\n            (not (locked ?l ?d))\n            (unlocked ?l ?d)\n            (not (holds ?a ?cc))\n            (inReceptacle ?cc ?d)\n            )\n)\n```\n\n### Explanation\n\n- **Action Name**: `SlideCreditCardToUnlock` - This action represents the process of sliding a credit card to unlock a door.\n  \n- **Parameters**: \n  - `?a` - agent (the person performing the action).\n  - `?cc` - credit card (the object used to unlock the door).\n  - `?d` - door (the object being unlocked).\n  - `?l` - lock (the lock mechanism on the door).\n\n- **Preconditions**: \n  - The agent is at the location of the door.\n  - The agent is holding the credit card.\n  - The door is locked.\n  - The credit card is identified as a credit card.\n  - The door is identified as a door.\n  - The lock is identified as a lock.\n  - The lock is attached to the door.\n\n- **Effects**: \n  - The door is no longer locked.\n  - The door becomes unlocked.\n  - The agent no longer holds the credit card.\n  - The credit card is now considered to be in the receptacle of the door (between the door frame and the lock).\n\nThis action captures the essence of the task described, ensuring that all relevant conditions are met before the action can be executed and detailing the resulting state changes once the action is performed."
    ]
}