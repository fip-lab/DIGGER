{
    "find": [
        "(:action find_water_source\n    :parameters (?p - person ?w - water)\n    :precondition (and\n                    (at ?p ?location)\n                    (or\n                      (at ?w river)\n                      (at ?w base_of_leaves)\n                      (at ?w cave)\n                      (at ?w hollowed_tree)\n                      (at ?w undercut_bank)))\n    :effect (found ?p ?w)\n)\n\n;; Action 2: Collect water\n",
        "(:action gather-stones\n    :parameters (?p - person ?s - stone)\n    :precondition (not (stone_location ?s present))\n    :effect (stone_location ?s present)\n)\n\n",
        "(:action ration_supplies\n    :parameters (?p - person ?s - supplies)\n    :precondition (and\n                    (has_supplies ?p ?s)\n                    (not (rationed ?s)))\n    :effect (and\n              (rationed ?s)\n              (increased_duration ?s))\n)\n```\n\n#### Action 2: Hunt_For_Food\nThis action is about hunting for food, such as fish or small animals, which are available on or around the island.\n\n```pddl\n"
    ],
    "collect": [
        "(:action collect_water\n    :parameters (?p - person ?w - water ?c - container)\n    :precondition (and\n                    (found ?p ?w)\n                    (empty ?c))\n    :effect (and\n              (full ?c)\n              (not (empty ?c)))\n)\n\n;; Action 3: Boil water\n"
    ],
    "boil": [
        "(:action boil_water\n    :parameters (?p - person ?w - water ?pot - boiling_pot)\n    :precondition (and\n                    (full ?pot)\n                    (cold ?w))\n    :effect (and\n              (hot ?w)\n              (not (cold ?w)))\n)\n\n;; Action 4: Filter water\n",
        "(:action heat_water\n    :parameters (?water - resource ?fire - resource)\n    :precondition (and\n      (not (heated ?water))\n      (lit ?fire)\n    )\n    :effect (and\n      (heated ?water)\n    )\n)\n\n;; Action 2: Hunt for fish\n",
        "(:action ignite-wood\n    :parameters (?p - person ?w - wood)\n    :precondition (and\n                    (wood_location ?w present)\n                    (fire_pit_arranged ?p)\n                    (wood_moisture ?w dry)\n                   )\n    :effect (fire_started ?p)\n)\n```\n\nThese actions correspond to the steps needed to start a fire, ensuring that the preconditions and effects match the described entity states and the logical flow of the task."
    ],
    "filter": [
        "(:action filter_water\n    :parameters (?p - person ?w - water ?filter - filter)\n    :precondition (and\n                    (hot ?w)\n                    (has_filter ?p ?filter))\n    :effect (and\n              (filtered ?w)\n              (clean ?w))\n)\n```\n\nThese actions take into account the necessary steps to clean water, including finding a water source, collecting water, boiling it, and filtering it. The preconditions and effects are defined based on the entity states provided.",
        "(:action clean_fish\n    :parameters (?fish - food ?water - resource)\n    :precondition (and\n      (caught ?fish)\n      (heated ?water)\n      (not (cleaned ?fish))\n    )\n    :effect (and\n      (cleaned ?fish)\n    )\n)\n\n;; Action 4: Cook fish\n"
    ],
    "hunt": [
        "(:action hunt_fish\n    :parameters (?person - agent ?location - place)\n    :precondition (and\n      (at ?person ?location)\n      (not (caught ?fish))\n    )\n    :effect (and\n      (caught ?fish)\n    )\n)\n\n;; Action 3: Clean fish\n",
        "(:action hunt_for_food\n    :parameters (?p - person ?h - habitat)\n    :precondition (and\n                    (at ?p ?h)\n                    (habitat_has_food ?h)\n                    (not (has_food ?p)))\n    :effect (and\n              (has_food ?p)\n              (decreased_food_in_habitat ?h))\n)\n```\n\n### Explanation of Actions\n\n- **Ration_Supplies**: This action ensures that the supplies are rationed. Preconditions include having supplies and the supplies not being rationed already. The effect is that the supplies are rationed, and their duration is increased.\n\n- **Hunt_For_Food**: This action allows a person to hunt for food in a habitat that has food. The precondition checks that the person is at a habitat with food, and they do not currently have food. The effect is that the person gains food, and the food availability in the habitat decreases.\n\nThese actions are designed to reflect the essential survival tactics needed to escape from an island, focusing on managing resources and acquiring food."
    ],
    "cook": [
        "(:action cook_fish\n    :parameters (?fish - food ?fire - resource)\n    :precondition (and\n      (cleaned ?fish)\n      (lit ?fire)\n      (not (cooked ?fish))\n    )\n    :effect (and\n      (cooked ?fish)\n    )\n)\n```\n\nExplanation:\n1. **heat_water**: This action heats the water using fire. Preconditions check that the water is not already heated and that the fire is lit. The effect is that the water becomes heated.\n2. **hunt_fish**: This action involves hunting for fish. Preconditions check that the person is at the location and that the fish is not already caught. The effect is that the fish becomes caught.\n3. **clean_fish**: This action cleans the fish using heated water. Preconditions check that the fish is caught, the water is heated, and the fish is not already cleaned. The effect is that the fish becomes cleaned.\n4. **cook_fish**: This action cooks the cleaned fish over a fire. Preconditions check that the fish is cleaned, the fire is lit, and the fish is not already cooked. The effect is that the fish becomes cooked.",
        "(:action arrange-wood-stones\n    :parameters (?p - person ?w - wood ?s - stone)\n    :precondition (and\n                    (wood_location ?w present)\n                    (stone_location ?s present)\n                   )\n    :effect (fire_pit_arranged ?p)\n)\n\n"
    ]
}