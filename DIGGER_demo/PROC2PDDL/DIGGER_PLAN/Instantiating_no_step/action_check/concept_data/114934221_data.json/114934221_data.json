[
    "```lisp\n[\n  (:action approach ; Approach a target and update entity location\n    :parameters (?entity - agent ?location1 - place ?location2 - place ?target - object)\n    :precondition (and\n                    (at ?entity ?location1)\n                    (at ?target ?location2)\n                    (location-clear ?location2))\n    :effect (and\n              (at ?entity ?location2)\n              (not (at ?entity ?location1)))),\n  (:action board ; Board an entity and update its status\n    :parameters (?entity - person ?transport - vehicle)\n    :precondition (and \n                   (at ?entity ?transport)\n                   (ready ?transport))\n    :effect (and \n             (on-board ?entity ?transport)\n             (not (at ?entity ?transport)))),\n  (:action hold ; Hold onto an item or support for stability\n    :parameters (?p - person ?s - support)\n    :precondition (and (near ?p ?s) (not (holding ?p ?s)))\n    :effect (holding ?p ?s)),\n  (:action secure ; Secure a component and update its status\n    :parameters (?entity - object ?location - place)\n    :precondition (and (at ?entity ?location) (not (secured ?entity)))\n    :effect (secured ?entity)),\n  (:action stabilize ; Stabilize an entity and update its status\n    :parameters (?entity - object ?stabilizer - person ?context - object)\n    :precondition (and\n                    (legs-secured ?stabilizer)\n                    (holding-rail ?stabilizer)\n                    (in-context ?stabilizer ?context))\n    :effect (and\n              (stable ?entity)\n              (centered ?stabilizer)\n              (crouched ?stabilizer))),\n  (:action use\n    :parameters (?a - agent ?item - object)\n    :precondition (and\n                    (available ?a)\n                    (not (used ?a ?item)))\n    :effect (and\n             (used ?a ?item)\n             (knows_how_to_use ?a ?item))),\n  (:action hit\n    ; Perform an action on a target and change its state\n    :parameters (?actor - agent ?target - entity)\n    :precondition (and\n                    (not (state_changed ?target))\n                    (knows_how_to_act ?actor))\n    :effect (and\n             (state_changed ?target)\n             (not (negative_state ?target)))),\n  (:action monitor ; Monitor a target and update knowledge status\n    :parameters (?agent - agent ?target - object)\n    :precondition (and\n                    (not (knows_location ?agent ?target)))\n    :effect (knows_location ?agent ?target)),\n  (:action avoid ; Avoid an obstacle or threat and update state\n    :parameters (?agent - agent ?obstacle - entity)\n    :precondition (and (blocking ?agent ?obstacle))\n    :effect (not (blocking ?agent ?obstacle))),\n  (:action prepare_defenses\n    :parameters (?a - agent ?s - shark)\n    :precondition (and\n                    (knows_shark_location ?a)\n                    (not (defenses_prepared ?a)))\n    :effect (defenses_prepared ?a)),\n  (:action prepare ; Prepare for an event or situation\n    :parameters (?entity - agent ?target - object)\n    :precondition (and\n                    (knows_target_location ?entity ?target)\n                    (not (prepared ?entity ?target)))\n    :effect (prepared ?entity ?target)),\n  (:action engage\n    :parameters (?agent - agent ?task - object)\n    :precondition (and\n                    (prepared ?agent)\n                    (knows_task_method ?agent ?task))\n    :effect (engaged_in_task ?agent ?task)),\n  (:action maintain\n    ; Maintain a state or condition and update task status\n    :parameters (?agent - agent ?target - entity)\n    :precondition (and \n                    (active ?agent) \n                    (not (maintained ?agent ?target)))\n    :effect (and \n              (maintained ?agent ?target)\n              (knows_attack_method ?agent)\n              (defending_position ?agent))),\n  (:action manage_entity_state\n    ; Manage the state of an entity, ensuring stability and presence\n    :parameters (?actor - person ?entity - object)\n    :precondition (and (stable ?entity) (not (managed ?actor ?entity)))\n    :effect (managed ?actor ?entity))\n]\n```"
]