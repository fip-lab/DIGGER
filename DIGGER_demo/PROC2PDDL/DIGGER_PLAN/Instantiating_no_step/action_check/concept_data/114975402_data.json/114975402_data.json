[
    "```pddl\n[\n  \"(:action find_supplies ; Find supplies and update the person's inventory\n    :parameters (?p - person ?s - supply)\n    :precondition (and (not (has-supply ?p ?s)))\n    :effect (has-supply ?p ?s)\n  )\",\n  \n  \"(:action find_clean_clothing ; Find clean clothing and update the person's inventory\n    :parameters (?p - person ?c - clothing)\n    :precondition (and (not (has-clothing ?p ?c)))\n    :effect (has-clothing ?p ?c)\n  )\",\n  \n  \"(:action find ; Find an item and update the person's inventory\n    :parameters (?p - person ?item - object)\n    :precondition (and (not (has-item ?p ?item)))\n    :effect (has-item ?p ?item)\n  )\",\n  \n  \"(:action clean ; Clean an item if the person has the supply\n    :parameters (?p - person ?item - object)\n    :precondition (and (has-supply ?p ?item) (dirty ?item))\n    :effect (and (not (dirty ?item)))\n  )\",\n  \n  \"(:action camouflage ; Camouflage an item by transforming its state\n    :parameters (?p - person ?item - object)\n    :precondition (and (has-supply ?p ?item) (not (camouflaged ?item)))\n    :effect (and (not (bare ?item)) (camouflaged ?item))\n  )\",\n  \n  \"(:action make ; Create or modify an element to achieve a desired state\n    :parameters (?p - person ?item - object ?state - state)\n    :precondition (and (has-supply ?p ?item) (not (in-state ?item ?state)))\n    :effect (and (not (in-state ?item (opposite ?state))) (in-state ?item ?state))\n  )\"\n]\n```"
]