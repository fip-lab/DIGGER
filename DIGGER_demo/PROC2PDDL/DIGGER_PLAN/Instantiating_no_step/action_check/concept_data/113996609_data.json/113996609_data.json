[
    "```lisp\n(:action find\n  ; Find a resource and update its status\n  :parameters (?p - person ?item - object ?location - place)\n  :precondition (and \n                  (at ?p ?location)\n                  (or \n                    (at ?item river)\n                    (at ?item base_of_leaves)\n                    (at ?item cave)\n                    (at ?item hollowed_tree)\n                    (at ?item undercut_bank))\n                  (not (location ?item present))\n                  (has_supplies ?p ?item)\n                  (not (rationed ?item)))\n  :effect (and \n            (found ?p ?item)\n            (location ?item present)\n            (rationed ?item)\n            (increased_duration ?item)))\n\n(:action collect\n  ; Collect an item/resource and update the state of the container\n  :parameters (?p - person ?item - object ?c - container)\n  :precondition (and\n                  (found ?p ?item)\n                  (empty ?c))\n  :effect (and\n            (full ?c)\n            (not (empty ?c))))\n\n(:action prepare\n  ; Prepare an item/resource by transforming its state\n  :parameters (?p - person ?item - object ?c - container)\n  :precondition (and\n                  (found ?p ?item)\n                  (not (boiled ?item))\n                  (full ?c))\n  :effect (boiled ?item))\n\n(:action boil\n  ; Boil a resource by preparing and heating\n  :parameters (?p - person ?resource - object ?container - container ?heat-source - object)\n  :precondition (and\n                  (full ?container)\n                  (cold ?resource)\n                  (not (heated ?resource))\n                  (wood_location ?heat-source present)\n                  (fire_pit_arranged ?p)\n                  (wood_moisture ?heat-source dry)\n                  (lit ?heat-source))\n  :effect (and\n            (hot ?resource)\n            (heated ?resource)\n            (fire_started ?p)\n            (not (cold ?resource))))\n\n(:action filter\n  ; Filter a resource and update its state to clean or filtered\n  :parameters (?entity - object ?resource - object ?tool - object)\n  :precondition (and\n                  (or (hot ?resource) (heated ?resource) (caught ?entity))\n                  (or (has_filter ?entity ?tool) (not (cleaned ?entity))))\n  :effect (and\n            (or (filtered ?resource) (cleaned ?entity))))\n\n(:action hunt\n  ; Hunt for resources and update the status of resource acquisition\n  :parameters (?agent - person ?location - place ?resource - object)\n  :precondition (and\n                  (at ?agent ?location)\n                  (or\n                    (and (not (acquired ?agent ?resource)) (has_resource ?location ?resource))\n                    (and (not (acquired ?agent ?resource)) (not (acquired ?resource)))))\n  :effect (and\n            (acquired ?agent ?resource)\n            (decreased_availability ?location ?resource)))\n\n(:action cook\n  ; Cook an item using a resource\n  :parameters (?p - person ?item - object ?resource - object)\n  :precondition (and\n                  (available ?p)\n                  (not (prepared ?item))\n                  (resource_ready ?resource))\n  :effect (prepared ?item))\n```"
]