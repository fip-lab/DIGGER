[
    "```lisp\n[\n  '(:action forage ; Forage a resource and update its status\n    :parameters (?resource - entity ?location - location)\n    :precondition (and \n                    (at_location ?resource ?location)\n                    (known_resource ?resource)\n                    (accessible ?location))\n    :effect (and \n              (collected ?resource)\n              (not (at_location ?resource ?location))))',\n\n  '(:action build\n    :parameters (?builder - agent ?tool - object ?location - location ?material1 - object ?material2 - object)\n    :precondition (and\n                    (available ?builder)\n                    (in_sunlight ?location)\n                    (has ?builder ?tool)\n                    (has ?builder ?material1)\n                    (has ?builder ?material2))\n    :effect (and\n              (built ?builder ?location)\n              (created ?location ?material1 ?material2 ?tool)))',\n\n  '(:action filter\n    ; Abstract action to filter a resource using a specified method\n    :parameters (?resource - entity ?method - tool)\n    :precondition (and (contaminated ?resource) (type ?method filter))\n    :effect (and (not (contaminated ?resource))))',\n\n  '(:action start_fire\n    :parameters (?f - fire ?w - water)\n    :precondition (and (not (lit ?f)) (filtered ?w))\n    :effect (and (lit ?f) (boiling ?w)))',\n\n  '(:action start ; Initialize or activate a process or entity\n    :parameters (?entity - entity ?resource - entity)\n    :precondition (and (not (activated ?entity)) (prepared ?resource))\n    :effect (and (activated ?entity) (utilized ?resource)))',\n\n  '(:action collect\n    ; Collect resources and update their status\n    :parameters (?collector - agent ?source - entity ?destination - location)\n    :precondition (and (available ?collector) (resource_available ?source))\n    :effect (and (resource_collected ?destination) (not (resource_available ?source))))',\n\n  '(:action bend ; Perform a state-changing action on a resource and update its status\n    :parameters (?entity - entity ?resource - entity ?additional - object)\n    :precondition (and (resource_collected ?entity) (ready ?additional))\n    :effect (and (resource_processed ?resource) (not (resource_collected ?entity))))'\n]\n```"
]