[
    "```lisp\n[\n(:action drain\n    :parameters (?entity - object ?container - object ?tool - object ?person - agent)\n    :precondition (and\n        (or (coconut ?entity) (other_container ?entity))\n        (contains_liquid ?entity)\n        (empty ?container)\n        (in_hand ?tool ?person)\n        (hole_bored ?entity)\n    )\n    :effect (and\n        (not (contains_liquid ?entity))\n        (contains_liquid ?container)\n    )\n),\n\n(:action poke\n  :parameters (?c - coconut ?s - tool ?m - tool)\n  :precondition (and \n                 (coconut_condition ?c intact)\n                 (tool_location ?s in_hand)\n                 (tool_location ?m in_hand)\n                )\n  :effect (and \n           (coconut_condition ?c hole_poked)\n           (not (coconut_condition ?c intact))\n  )\n),\n\n(:action break\n  :parameters (?coconut - coconut ?tool - object ?surface - surface ?towel - cloth)\n  :precondition (and \n                (or (hole_in_eye ?coconut) (cooled ?coconut))\n                (or (wrapped ?coconut ?towel) (at ?coconut ?surface))\n                (or (in_hand ?tool) (at ?tool ?surface))\n                (not (broken ?coconut)))\n  :effect (and \n          (broken ?coconut)\n          (not (wrapped ?coconut ?towel))\n  )\n),\n\n(:action strike\n    ; Strike an item using a tool or against a surface to modify its state\n    :parameters (?p - person ?i - item ?t - tool ?s - surface)\n    :precondition (and \n                   (in_hand ?t ?p)\n                   (on_surface ?i ?s)\n                   (not (modified ?i))\n                  )\n    :effect (and \n             (modified ?i)\n             (not (intact ?i))\n    )\n),\n\n(:action wrap\n  ; Wrap an item with another item to change its state\n  :parameters (?wrapper - object ?wrappee - object)\n  :precondition (and \n                  (in_hand ?wrapper) \n                  (appropriate_state ?wrappee)\n                  (not (wrapped ?wrappee ?wrapper))\n                )\n  :effect (and \n            (wrapped ?wrappee ?wrapper) \n            (not (appropriate_state ?wrappee))\n  )\n),\n\n(:action wrap\n  :parameters (?t - towel ?c - coconut)\n  :precondition (and \n                  (in_hand ?t) \n                  (coconut_location ?c in_oven)\n                  (coconut_condition ?c hole_poked)\n                  (coconut_temperature ?c hot)\n                  (not (wrapped ?c ?t))\n                )\n  :effect (and \n            (wrapped ?c ?t) \n            (not (coconut_location ?c in_oven))\n  )\n),\n\n(:action wrap\n  :parameters (?wp - wrapping_paper ?g - gift)\n  :precondition (and \n                  (in_hand ?wp) \n                  (gift_unwrapped ?g)\n                  (not (wrapped ?g ?wp))\n                )\n  :effect (and \n            (wrapped ?g ?wp) \n            (not (gift_unwrapped ?g))\n  )\n),\n\n(:action obtain \n:parameters (?p - person ?item - object ?container - container)\n:precondition (and \n                (in_container ?item ?container)\n                (not (in_hand ?item ?p))\n              )\n:effect (and\n          (in_hand ?item ?p)\n          (not (in_container ?item ?container))\n)\n)\n]\n```"
]