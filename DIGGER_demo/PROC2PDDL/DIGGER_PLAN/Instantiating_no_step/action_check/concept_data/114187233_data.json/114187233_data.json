[
    "```lisp\n[\n  (:action shave ; Shave or remove the outer layer of an item\n   :parameters (?actor - agent ?item - object ?tool - tool ?surface - surface)\n   :precondition (and \n     (on ?item ?surface)\n     (has_outer_layer ?item)\n     (sharp ?tool)\n     (not (layer_removed ?item))\n   )\n   :effect (and\n     (layer_removed ?item)\n     (not (has_outer_layer ?item))\n   )\n  )\n  \n  (:action slice\n   :parameters (?item - object ?tool - tool ?surface - surface)\n   :precondition (and \n     (has_outer_layer ?item) \n     (sharp ?tool) \n     (on ?item ?surface)\n   )\n   :effect (and \n     (exposed_inner_layer ?item) \n     (not (has_outer_layer ?item))\n   )\n  )\n  \n  (:action turn ; Turn an item to modify its state\n   :parameters (?item - object ?container - object)\n   :precondition (and\n     (exposed ?item)\n     (not (turned ?item))\n   )\n   :effect (and\n     (turned ?item)\n     (in_process ?item ?container)\n   )\n  )\n  \n  (:action drain\n   :parameters (?c - container ?g - receptacle)\n   :precondition (and\n     (ready_to_drain ?c)\n     (empty ?g)\n     (not (drained ?c))\n   )\n   :effect (and\n     (drained ?c)\n     (not (empty ?g))\n   )\n  )\n  \n  (:action wrap ; Wrap an item using a cover and update their states\n   :parameters (?item - object ?cover - object)\n   :precondition (and\n     (clean ?cover)\n     (not (wrapped ?item))\n     (drained ?item)\n   )\n   :effect (and\n     (wrapped ?item ?cover)\n     (dirty ?cover)\n     (heavier ?cover)\n   )\n  )\n  \n  (:action break\n   :parameters (?c - coconut ?tool - tool ?container - object ?t - towel)\n   :precondition (and\n     (wrapped ?c ?t)\n     (not (broken ?c))\n   )\n   :effect (and\n     (broken ?c)\n     (open ?c)\n     (dirty ?t)\n     (contains ?container ?c)\n   )\n  )\n  \n  (:action whack ; Whack an entity to change its state\n   :parameters (?entity - object ?tool - tool ?wrapper - object)\n   :precondition (and \n     (wrapped ?entity ?wrapper) \n     (has_tool ?tool)\n   )\n   :effect (and \n     (cracked ?entity) \n     (not (wrapped ?entity ?wrapper))\n   )\n  )\n  \n  (:action separate\n   :parameters (?c - coconut ?k - knife ?h - hammer ?t - towel ?g - glass)\n   :precondition (and \n     (cracked ?c) \n     (sharp ?k) \n     (has_water ?c) \n     (cooled ?c) \n     (wrapped ?c ?t) \n     (drained ?c)\n   )\n   :effect (and \n     (meat_separated ?c) \n     (shell_empty ?c) \n     (not (has_water ?c))\n   )\n  )\n]\n```"
]