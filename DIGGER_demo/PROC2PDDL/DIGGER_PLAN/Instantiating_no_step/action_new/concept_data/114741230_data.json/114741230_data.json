[
    "(:action conduct\n    :parameters (?p1 - person ?p2 - person)\n    :precondition (and\n                    (not (initiated ?p1))\n                    (not (initiated ?p2))\n                    (not (seen_together ?p1 ?p2)))\n    :effect (and\n              (initiated ?p1)\n              (initiated ?p2)\n              (seen_together ?p1 ?p2))",
    "(:action meet\n    :parameters (?p - entity ?l - location)\n    :precondition (and\n                    (initiated ?p)\n                    (not (engaged_in_meeting ?p ?l)))\n    :effect (engaged_in_meeting ?p ?l)\n)",
    "(:action remove ; Remove an entity from a context based on specific conditions\n  :parameters (?entity - object ?context - context_type)\n  :precondition (and\n                  (part_of ?entity ?context)\n                  (undesirable ?entity ?context))\n  :effect (not (part_of ?entity ?context))",
    "(:action set ; Set a configuration or initiate a setting\n  :parameters (?x - entity ?y - context)\n  :precondition (and\n                  (not (setting ?y)))\n  :effect (setting ?x ?y)\n)",
    "(:action initiate ; Initiate a person or persons into a group and update the state accordingly\n  :parameters (?p1 - person ?p2 - person ?c - group ?n - number)\n  :precondition (and\n                  (or (initiated ?p1) (not (initiated ?p1)))\n                  (or (initiated ?p2) (not (initiated ?p2)))\n                  (or (not (member ?p1)) (not (member ?p2)))\n                  (or (brilliant ?p1) (enthusiastic ?p1))\n                  (or (brilliant ?p2) (enthusiastic ?p2))\n                  (or (not (founders-initiated ?c)) (founders-initiated ?c))\n                  (or (not (in-group ?p1 ?c)) (not (in-group ?p2 ?c)))\n                  (or (meeting-place-set ?p1 ?c) (meeting-place-set ?p2 ?c))\n                  (member-count ?c ?n)\n                  (< ?n 10))\n  :effect (and\n            (or (member ?p1) (member ?p2))",
    "(:action think ;  Consider an idea and establish a new identity or mission\n  :parameters (?entity - object ?n - name)\n  :precondition (and\n                  (initiated ?entity)\n                  (not (named ?entity)))\n  :effect (named ?entity ?n))",
    "(:action create\n  ; Create a resource or task and update the state\n  :parameters (?creator - actor ?entity - entity_type)\n  :precondition (and \n                  (initiated ?creator)\n                  (not (created ?entity)))\n  :effect (created ?entity)\n)",
    "(:action read ; Read an item and update status\n :parameters (?actor - agent ?item - object)\n :precondition (and\n                (initiated ?actor)\n                (not (read ?actor ?item)))\n :effect (read ?actor ?item))",
    "(:action establish_dress_code\n    :parameters (?c - cult ?d - dress_code)\n    :precondition (and\n                    (founders-initiated ?c)\n                    (not (dress-code-set ?c)))\n    :effect (dress-code-set ?c ?d)\n)",
    "(:action initiate_new_members\n    :parameters (?c - cult ?m - member)\n    :precondition (and\n                    (founders-initiated ?c)\n                    (not (member-initiated ?c ?m)))\n    :effect (member-initiated ?c ?m)\n)",
    "(:action establish ; Establish a certain state within an organization\n    :parameters (?c - organization ?x - entity)\n    :precondition (and\n                    (founders-initiated ?c)\n                    (not (established ?c ?x)))\n    :effect (established ?c ?x)\n)"
]