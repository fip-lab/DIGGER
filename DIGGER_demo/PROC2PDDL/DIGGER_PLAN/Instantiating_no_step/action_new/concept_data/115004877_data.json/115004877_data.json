[
    "(:action transform ; General action to transform an entity's state\n    :parameters (?entity - object ?resource - object ?tool - object)\n    :precondition (and (available ?entity) (required_for ?task ?resource ?entity) (not (transformed ?entity)))\n    :effect (and (transformed ?entity) (used ?resource ?tool))",
    "(:action transform\n    :parameters (?linen - linen ?papyrus - papyrus ?drying_tool - tool)\n    :precondition (and (wet ?linen) (covering ?papyrus ?linen) (not (transformed ?linen)))\n    :effect (and (transformed ?linen) (used ?papyrus ?drying_tool))",
    "(:action transform\n    :parameters (?papyrus - papyrus ?shell - shell ?ivory - ivory)\n    :precondition (and (not (polished ?papyrus)) (smooth ?shell ?ivory) (not (transformed ?papyrus)))\n    :effect (and (transformed ?papyrus) (used ?shell ?ivory))",
    "(:action transform\n    :parameters (?sheet - sheet ?stone_slab - slab ?flattening_tool - tool)\n    :precondition (and (not (flat ?sheet)) (available ?stone_slab) (not (transformed ?sheet)))\n    :effect (and (transformed ?sheet) (used ?stone_slab ?flattening_tool))",
    "(:action lay\n  :parameters (?item - object ?destination - location)\n  :precondition (and\n                  (not (on ?item ?destination))\n                  (not (in ?item ?destination))\n                )\n  :effect (and\n            (on ?item ?destination)\n            (in ?item ?destination)\n          )",
    "(:action dip\n  ; Dip an item into a mixture or liquid and update its state\n  :parameters (?item - object ?mixture - substance)\n  :precondition (and\n                  (not (dipped ?item ?mixture))\n                  (suitable_for_dipping ?item)\n                )\n  :effect (dipped ?item ?mixture)\n)",
    "(:action peel ;  Perform a transformation on a resource, such as peeling, polishing, or flattening\n  :parameters (?entity - object ?tool1 - object ?tool2 - object)\n  :precondition (and (obtained ?entity) (not (transformed ?entity)) (smooth ?tool1) (smooth ?tool2))\n  :effect (and (transformed ?entity) (not (outer-layer-intact ?entity))",
    "(:action cut-stalks\n    :parameters (?p - papyrus)\n    :precondition (and (inner-part-exposed ?p) (stalks-intact ?p))\n    :effect (and (not (stalks-intact ?p))",
    "(:action cut ; Universal action to cut an item and update its state\n    :parameters (?cutter - agent ?item - object ?part - object-part)\n    :precondition (and (can-cut ?cutter ?item) (part-intact ?item ?part))\n    :effect (and (not (part-intact ?item ?part))",
    "(:action flatten-sheet\n    :parameters (?s - sheet ?slab - stone-slab)\n    :precondition (and (not (flat ?s)) (available ?slab))\n    :effect (and (flat ?s) (not (available ?slab))",
    "(:action replace-wet-linen-sheets\n    :parameters (?linen - linen ?dry-linen - linen ?rack - rack)\n    :precondition (and (wet ?linen) (available ?dry-linen) (in ?linen ?rack))\n    :effect (and (not (wet ?linen))",
    "(:action flatten\n    :parameters (?item1 - object ?item2 - object ?resource - resource)\n    :precondition (and (not (flat ?item1)) (available ?resource))\n    :effect (and (flat ?item1) (not (available ?resource))"
]