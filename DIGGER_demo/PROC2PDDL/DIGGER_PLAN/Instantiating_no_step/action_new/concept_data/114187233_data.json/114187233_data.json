[
    "(:action shave ; Shave or remove the outer layer of an item\n  :parameters (?actor - agent ?item - object ?tool - tool ?surface - surface)\n  :precondition (and \n    (on ?item ?surface)\n    (has_outer_layer ?item)\n    (sharp ?tool)\n    (not (layer_removed ?item))\n  )\n  :effect (and\n    (layer_removed ?item)\n    (not (has_outer_layer ?item))",
    "(:action slice\n    :parameters (?item - object ?tool - tool ?surface - surface)\n    :precondition (and (has_outer_layer ?item) (sharp ?tool) (on ?item ?surface))\n    :effect (and (exposed_inner_layer ?item) (not (has_outer_layer ?item))",
    "(:action turn ; Turn an item to modify its state\n :parameters (?item - object ?container - object)\n :precondition (and\n   (exposed ?item)\n   (not (turned ?item))\n )\n :effect (and\n   (turned ?item)\n   (in_process ?item ?container)\n )",
    "(:action drain\n    :parameters (?c - container ?g - receptacle)\n    :precondition (and\n        (ready_to_drain ?c)\n        (empty ?g)\n        (not (drained ?c))\n    )\n    :effect (and\n        (drained ?c)\n        (not (empty ?g))",
    "(:action wrap ; Wrap an item using a cover and update their states\n    :parameters (?item - object ?cover - object)\n    :precondition (and\n                     (clean ?cover)\n                     (not (wrapped ?item))\n                     (drained ?item) ; Assuming that the item needs to be in a certain state like 'drained' before wrapping\n                   )\n    :effect (and\n              (wrapped ?item ?cover)\n              (dirty ?cover)\n              (heavier ?cover) ; Assuming that the cover becomes heavier after wrapping\n            )\n)",
    "(:action break\n    :parameters (?c - coconut ?tool - tool ?container - object ?t - towel)\n    :precondition (and\n                    (wrapped ?c)\n                    (not (broken ?c))\n                   )\n    :effect (and\n              (broken ?c)\n              (open ?c)\n              (dirty ?t)\n              (contains ?container ?c)\n            )",
    "(:action whack ; Whack an entity to change its state\n    :parameters (?entity - object ?tool - tool ?wrapper - object)\n    :precondition (and (wrapped ?entity ?wrapper) (has_tool ?tool))\n    :effect (and (cracked ?entity) (not (wrapped ?entity ?wrapper))",
    "(:action separate\n  :parameters (?c - coconut ?k - knife ?h - hammer ?t - towel ?g - glass)\n  :precondition (and \n    (cracked ?c) \n    (sharp ?k) \n    (has_water ?c) \n    (cooled ?c) \n    (wrapped ?c ?t) \n    (drained ?c ?g)\n  )\n  :effect (and \n    (meat_separated ?c) \n    (shell_empty ?c) \n    (not (has_water ?c))"
]