[
    "(:action gather ; Gather resources and update their status\n    :parameters (?x - resource)\n    :precondition (and (available ?x) (not (gathered ?x)))\n    :effect (gathered ?x)\n)",
    "(:action prepare\n  :parameters (?entity - object ?resource1 - object ?resource2 - object ?status - status)\n  :precondition (and\n                  (or (collected ?resource1) (available ?resource1))\n                  (or (collected ?resource2) (available ?resource2))\n                  (not (?status ?entity))\n                )\n  :effect (and\n            (?status ?entity)\n            (not (available ?resource1))",
    "(:action collect ; Collect a resource and update its status\n  :parameters (?collector - agent ?item - collectable ?container - container)\n  :precondition (and \n                  (not (collected ?item))\n                  (or (fresh ?item) (dry ?item))\n                  (or (not (volume_full ?container)) (and (exists (?t - tin) (volume_full ?t))))\n                )\n  :effect (and \n            (collected ?item)\n            (when (volume_full ?container) (volume_empty ?container))",
    "(:action boil\n    :parameters (?entity - object ?resource - object ?tool - object)\n    :precondition (and\n                    (collected ?resource)\n                    (prepared ?tool)\n                    (not (processed ?entity))\n                  )\n    :effect (and\n              (processed ?entity)\n              (state ?entity transformed)\n            )",
    "(:action set ; Set a tool or resource and modify its state\n    :parameters (?agent - entity ?resource - object)\n    :precondition (and (ready ?resource) (visible ?agent))\n    :effect (and (set ?resource) (invisible ?agent))",
    "(:action avoid ; Avoid a potentially hazardous entity\n  :parameters (?agent - entity ?hazard - entity)\n  :precondition (and (hazardous ?hazard) (not (encountered ?agent ?hazard)))\n  :effect (safe_from ?agent ?hazard)\n)"
]