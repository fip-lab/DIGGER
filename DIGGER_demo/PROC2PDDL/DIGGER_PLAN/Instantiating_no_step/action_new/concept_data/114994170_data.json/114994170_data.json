[
    "(:action wait\n    ; Wait for a condition to change or for a resource to become available\n    :parameters (?agent - person ?context - situation)\n    :precondition (and\n                    (requires_patience ?context)\n                    (not (resolved ?context)))\n    :effect (resolved ?context)\n)",
    "(:action collect ; Collect a resource and update its state\n  :parameters (?collector - agent ?source - source ?receptacle - container)\n  :precondition (and\n                  (location ?receptacle at_collection_point)\n                  (location ?source in_collection_point)\n                  (empty ?receptacle)\n                  (resource_available ?source))\n  :effect (and\n            (full ?receptacle)\n            (not (empty ?receptacle))",
    "(:action use\n    ; Use a resource and update its status\n    :parameters (?agent - agent ?resource - resource ?context - context)\n    :precondition (and\n                    (available ?agent)\n                    (usable ?resource ?context)\n                    (not (in_use ?resource)))\n    :effect (and\n              (in_use ?resource)\n              (not (available ?agent ?resource))",
    "(:action eat_perishable_food_first\n    :parameters (?food - food ?storage - refrigerator)\n    :precondition (and\n                    (in_refrigerator ?food ?storage)\n                    (perishable ?food))\n    :effect (and\n              (consumed ?food)\n              (not (in_refrigerator ?food ?storage))",
    "(:action eat ; Consume a food item, prioritizing perishables\n    :parameters (?entity - person ?food - food ?storage - storage_location)\n    :precondition (and\n                    (in_storage ?food ?storage)\n                    (available ?entity)\n                    (perishable ?food))\n    :effect (and\n              (consumed ?food)\n              (not (in_storage ?food ?storage))",
    "(:action cover ; Cover an object to change its state\n    :parameters (?entity - object ?covering - item)\n    :precondition (and\n                    (not (covered ?entity ?covering))\n                    (availability ?covering available))\n    :effect (and\n             (covered ?entity ?covering)\n             (availability ?covering in_use))",
    "(:action find\n    ; Find a location and update the entity's state\n    :parameters (?npc - character ?location - place)\n    :precondition (and\n                   (location ?npc outside) \n                   (safety_level ?npc protected)\n                   (knowledge ?npc location))\n    :effect (and\n             (location ?npc ?location)\n             (safety_level ?npc more_protected))",
    "(:action travel ; Generic travel action to move a character to a location and ensure entry\n    :parameters (?npc - character ?start - place ?destination - place ?entry_status - status)\n    :precondition (and\n                    (location ?npc ?start)\n                    (safety_level ?npc more_protected)\n                    (knowledge ?npc destination_location)\n                    (or (and (status ?destination door_open)\n                             (location ?npc ?destination))\n                        (and (not (status ?destination door_open))\n                             (location ?npc ?shelter))))\n    :effect (and\n             (location ?npc ?destination)\n             (safety_level ?npc safe)\n             (status ?destination ?entry_status))",
    "(:action remove ; Remove an object and update state\n:parameters (?agent - entity ?item - object)\n:precondition (and (present ?item) (covered ?agent ?item))\n:effect (and \n        (not (present ?item))",
    "(:action camouflage\n    :parameters (?entity - object ?target - object)\n    :precondition (and \n                    (visible ?entity ?target)\n                    (bare ?entity ?target))\n    :effect (and \n            (camouflaged ?entity ?target)\n            (invisible ?entity ?target))"
]