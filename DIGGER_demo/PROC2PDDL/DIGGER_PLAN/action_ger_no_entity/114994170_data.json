[
    "To generate the PDDL actions for the task \"collect-water\" based on the given steps and descriptions, let's break down each step and create the corresponding PDDL actions.\n\nTask: collect-water\n\nSteps:\n- fill bathtub bathroom npc\n- get_water npc water\n\nDescriptions:\n- Shelter in place and wait for the initial chaos to subside. If all of the electronics suddenly stop working, the immediate loss of electricity will cause a lot of sudden confusion and chaos. If you aren\u2019t home, wait 30-45 minutes for all of the abrupt danger to pass. Then, go home if you\u2019re within a few miles or kilometers. If you\u2019re already home, stay there and do not go outside.\n- Eat anything in your fridge first to minimize food shortages. For the first 1-2 days, eat whatever is in your fridge and hasn\u2019t gone bad immediately. Save the dry stuff for later when you may really need it. The odds are low society will completely collapse and you\u2019ll go without help for super long, but it\u2019s still better to go through everything that\u2019s going to go bad anyway.\n\nPDDL Actions:\n\n1. **fill_bathtub**\n```pddl\n(:action fill_bathtub\n    :parameters (?bathtub - bathtub ?bathroom - bathroom ?npc - npc)\n    :precondition (and\n                    (located ?bathtub ?bathroom)\n                    (present ?npc ?bathroom)\n                    (empty ?bathtub))\n    :effect (and\n              (filled ?bathtub)\n              (not (empty ?bathtub)))\n)\n```\n\n2. **get_water**\n```pddl\n(:action get_water\n    :parameters (?npc - npc ?water - water ?bathtub - bathtub)\n    :precondition (and\n                    (filled ?bathtub)\n                    (present ?npc ?bathtub))\n    :effect (and\n              (has_water ?npc ?water)\n              (decreased_water ?bathtub))\n)\n```\n\nExplanation:\n- **fill_bathtub**: This action involves filling the bathtub with water. The preconditions ensure that the bathtub is located in the bathroom, the npc is present in the bathroom, and the bathtub is empty. The effect is that the bathtub becomes filled with water.\n- **get_water**: This action involves the npc getting water from the filled bathtub. The preconditions ensure that the bathtub is filled with water and the npc is present at the bathtub. The effect is that the npc now has water, and the water level in the bathtub decreases.\n\nThese actions are relevant to the task \"collect-water\" and align with the given steps. The descriptions provided are not directly related to the specific actions but give context to the situation.",
    "Certainly! Below are the PDDL actions generated based on the provided task and steps.\n\nTask: turn-on-radio\n\nSteps:\n- check_radio npc\n- check_batteries npc basement\n\nDescriptions:\n- Turn your radio on immediately to get as much information as possible. Most electronics are going to stop functioning as soon as the EMP goes off. However, depending on the type of EMP, there is a good chance that radios will continue to work\u2014at least for a short while. Turn the radio on and tune in to any news source with a decent signal. Keep it on as long as possible and pay attention while you take the next steps to ensure that you get as much information as you can.\n- Your vehicle may still work if it\u2019s older or it doesn\u2019t rely on a dedicated electrical signal outside of the battery to keep the engine going, which is the case for many vehicles.\n\nPDDL Actions:\n\n```lisp\n;; Check if the radio is functional\n(:action check_radio\n    :parameters (?npc - agent ?radio - device)\n    :precondition (and\n                    (not (checked_radio ?npc))\n                   )\n    :effect (checked_radio ?npc)\n  )\n\n;; Check if the radio has batteries\n(:action check_batteries\n    :parameters (?npc - agent ?radio - device ?location - place)\n    :precondition (and\n                    (checked_radio ?npc)\n                    (at ?npc ?location)\n                    (radio_location ?radio ?location)\n                    (not (checked_batteries ?npc))\n                   )\n    :effect (checked_batteries ?npc)\n  )\n\n;; Turn on the radio\n(:action turn_on_radio\n    :parameters (?npc - agent ?radio - device)\n    :precondition (and\n                    (checked_batteries ?npc)\n                    (radio_functional ?radio)\n                    (not (radio_on ?radio))\n                   )\n    :effect (and\n             (radio_on ?radio)\n             (tuned_in ?npc)\n            )\n  )\n```\n\nExplanation:\n- The `check_radio` action allows the NPC to check if the radio is functional.\n- The `check_batteries` action allows the NPC to check if the radio has batteries, given that the NPC is in the basement and has already checked the radio.\n- The `turn_on_radio` action allows the NPC to turn on the radio if it is functional and has batteries, which results in the NPC being tuned in to the radio.\n\nThese actions follow the format and structure of the example provided and are tailored to the given task and steps.",
    "Sure, let's generate the PDDL actions for the task \"get-home\" based on the given steps and descriptions.\n\nTask: get-home\n\nSteps:\n1. close_mixture npc\n\nDescriptions:\n- If you\u2019re outside during a nuclear blast, cover your mouth and nose with a cloth or mask to avoid breathing in toxic particles.\n\nEntity State:\n- npc: an agent representing a non-player character.\n- cloth: an item representing a piece of cloth.\n- mask: an item representing a mask.\n- location: the current location of the npc, either outside or inside.\n- condition: the readiness or state of the npc, either exposed or protected.\n\nPDDL Actions:\n\n(:action cover_mouth_and_nose\n    :parameters (?npc - agent ?c - cloth ?m - mask ?loc - place)\n    :precondition (and\n                    (location ?npc outside)\n                    (condition ?npc exposed)\n                    (availability ?c in_inventory)\n                    (availability ?m in_inventory))\n    :effect (and\n             (condition ?npc protected)\n             (availability ?c used)\n             (availability ?m used))\n  )\n\nExplanation:\n- The action \"cover_mouth_and_nose\" describes the step where the npc covers their mouth and nose with a cloth or mask to avoid breathing in toxic particles during a nuclear blast.\n- The parameters include the npc, the cloth, the mask, and the location.\n- The preconditions check that the npc is outside and exposed, and that both the cloth and mask are available in the inventory.\n- The effects update the npc's condition to protected and mark the cloth and mask as used.\n\nThis PDDL action captures the intent and logic of the given step and description.",
    "To generate the PDDL actions for the given task \"prepare-for-attack\" based on the provided step and description, we will follow the example format and structure. Here is the PDDL action for the step:\n\n### Task: prepare-for-attack\n\n#### Step 1: put_in_cage npc basement\n\n**Descriptions:**\n- You can drive it if you absolutely have to, but it\u2019s safer to stay off of the roads if you can.\n\n**PDDL Action:**\n\n```lisp\n(:action put_in_cage\n    :parameters (?n - npc ?b - location)\n    :precondition (and\n                    (npc-free ?n)\n                    (location ?b)\n                    (not (npc-in-cage ?n ?b)))\n    :effect (and\n              (npc-in-cage ?n ?b)\n              (not (npc-free ?n)))\n)\n```\n\n### Explanation:\n\n- **Action Name:** `put_in_cage` - This action involves placing an NPC into a cage located in the basement.\n- **Parameters:** `?n` represents the NPC, and `?b` represents the location (basement).\n- **Preconditions:** The NPC must be free (not already in a cage), and the basement location must exist.\n- **Effects:** Once the action is completed, the NPC is now in a cage in the basement, and the NPC is no longer free.\n\nThis action captures the intent of the step by ensuring the NPC is securely placed in a designated location, which is a preparatory step for an attack scenario."
]