[
    "Here are the PDDL actions for the task \"collect-water\" based on the provided steps and descriptions:\n\n```lisp\n;; Action 1: Fill the bathtub with water\n(:action fill_bathtub\n    :parameters (?bathtub - bathtub ?room - room ?npc - npc)\n    :precondition (and\n                    (located ?bathtub ?room)\n                    (empty ?bathtub)\n                    (present ?npc ?room))\n    :effect (and\n              (filled ?bathtub)\n              (not (empty ?bathtub)))\n)\n\n;; Action 2: Collect water using a container\n(:action get_water\n    :parameters (?npc - npc ?water - water)\n    :precondition (and\n                    (filled ?bathtub)\n                    (has_container ?npc))\n    :effect (collected ?water)\n)\n```\n\n**Explanation:**\n\n- **fill_bathtub**: This action represents the step where the bathtub in the bathroom is filled with water. The preconditions ensure that the bathtub is located in the specified room and is empty before the action, and the NPC is present. The effect is that the bathtub is now filled with water.\n\n- **get_water**: This action involves the NPC collecting water. The precondition checks if the bathtub is filled and the NPC has a container to collect the water. The effect is that water is collected.\n\nThese actions are aligned with the task of collecting water and are consistent with the provided steps.",
    "Here are the PDDL actions generated for the task \"turn-on-radio\" based on the provided steps and descriptions:\n\n```lisp\n;; Check the radio status\n(:action check_radio\n    :parameters (?n - npc)\n    :precondition (and\n                    (radio_status off)\n                    (not (npc_knows_radio_status ?n))\n                   )\n    :effect (and\n             (npc_knows_radio_status ?n)\n             (radio_status checked)\n            )\n)\n\n;; Check the batteries in the basement\n(:action check_batteries\n    :parameters (?n - npc ?b - location)\n    :precondition (and\n                    (location ?b basement)\n                    (battery_status unknown)\n                    (not (npc_knows_battery_status ?n))\n                   )\n    :effect (and\n             (npc_knows_battery_status ?n)\n             (battery_status checked)\n            )\n)\n```\n\n### Explanation:\n\n1. **Action: check_radio**\n   - **Parameters:** Involves an NPC (`?n`) who will check the radio.\n   - **Preconditions:** The radio must be off, and the NPC does not yet know the radio's status.\n   - **Effects:** After the action, the NPC knows the radio's status, and the radio is marked as checked.\n\n2. **Action: check_batteries**\n   - **Parameters:** Involves an NPC (`?n`) and the location (`?b`) where the batteries are checked, specifically the basement.\n   - **Preconditions:** The location must be the basement, the battery status is unknown, and the NPC does not know the battery status.\n   - **Effects:** After the action, the NPC knows the battery status, and the batteries are marked as checked.\n\nThese actions are designed to align with the task of turning on the radio and ensuring it operates correctly by checking its status and the batteries.",
    "Sure, let's create the PDDL actions for the task \"get-home\" based on the provided step and description.\n\nTask: get-home\n\nSteps:\n- close_mixture npc\n\nDescriptions:\n- If you\u2019re outside during a nuclear blast, cover your mouth and nose with a cloth or mask to avoid breathing in toxic particles.\n\nPDDL Actions:\n\n```lisp\n;; Action: close_mixture\n(:action close_mixture\n    :parameters (?npc - person ?cloth - item ?outside - location)\n    :precondition (and\n                    (location ?npc ?outside)\n                    (condition ?outside nuclear_blast)\n                    (availability ?cloth in_inventory))\n    :effect (and\n             (protection ?npc from_toxic_particles)\n             (usage ?cloth covering_mouth_nose))\n)\n```\n\nExplanation:\n- **Action Name**: close_mixture\n- **Parameters**: \n  - `?npc` - the non-player character (person)\n  - `?cloth` - the item used to cover the mouth and nose\n  - `?outside` - the location where the NPC is currently\n- **Preconditions**:\n  - The NPC is outside (`location ?npc ?outside`)\n  - There is a nuclear blast occurring (`condition ?outside nuclear_blast`)\n  - The cloth is available in the NPC's inventory (`availability ?cloth in_inventory`)\n- **Effects**:\n  - The NPC is protected from toxic particles (`protection ?npc from_toxic_particles`)\n  - The cloth is being used to cover the mouth and nose (`usage ?cloth covering_mouth_nose`)\n\nThis action captures the intent of the provided step and description, ensuring the NPC takes protective measures during a nuclear blast.",
    "To generate PDDL actions for the task \"prepare-for-attack\" based on the provided steps and descriptions, we need to analyze the step and create an appropriate action. Here's the PDDL action for the given step:\n\n### PDDL Action for \"prepare-for-attack\" Task\n\n#### Step: put_in_cage npc basement\n\n**Descriptions:**\n- You can drive it if you absolutely have to, but it\u2019s safer to stay off of the roads if you can.\n\n**Action:**\n\n```pddl\n(:action put_in_cage\n    :parameters (?npc - character ?cage - location)\n    :precondition (and\n                    (character-free ?npc)\n                    (location ?cage)\n                    (not (character-in-cage ?npc ?cage)))\n    :effect (and\n              (not (character-free ?npc))\n              (character-in-cage ?npc ?cage))\n)\n```\n\n### Explanation:\n\n- **Action Name:** `put_in_cage` - This action represents the step of placing a non-player character (NPC) into a cage, which is located in the basement.\n  \n- **Parameters:** \n  - `?npc` - Represents the non-player character that needs to be caged.\n  - `?cage` - Represents the location where the NPC will be placed, in this case, the basement.\n\n- **Preconditions:** \n  - `(character-free ?npc)` - The NPC must be free before being placed in the cage.\n  - `(location ?cage)` - The cage must be a valid location.\n  - `(not (character-in-cage ?npc ?cage))` - The NPC is not already in the cage.\n\n- **Effects:** \n  - `(not (character-free ?npc))` - The NPC is no longer free after being placed in the cage.\n  - `(character-in-cage ?npc ?cage)` - The NPC is now in the cage located in the basement.\n\nThis action captures the essence of the step described, ensuring that the NPC is securely placed in the cage as part of preparing for an attack."
]