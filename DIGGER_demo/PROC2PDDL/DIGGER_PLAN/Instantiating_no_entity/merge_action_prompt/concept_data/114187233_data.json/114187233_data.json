[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:peel\n\n\nAction sets that need to be merged:\n(:action peel_coconut\n    :parameters (?c - coconut ?k - knife)\n    :precondition (and (has_outer_casing ?c) (sharp ?k))\n    :effect (and (exposed_shell ?c) (not (has_outer_casing ?c)))\n)\n\n\n(:action peel-coconut\n    :parameters (?npc - person ?c - coconut ?k - knife)\n    :precondition (and\n                    (wrapped ?c ?t)\n                    (not (peeled ?c))\n                    (knife_sharp ?k)\n                   )\n    :effect (peeled ?c)\n)\n\n;; Action to drain the coconut\n\n(:action drain_coconut\n    :parameters (?c - coconut ?g - glass)\n    :precondition (and (exposed_shell ?c) (empty ?g))\n    :effect (and (drained ?c) (filled ?g) (not (empty ?g)))\n)\n\n\n(:action drain-coconut\n    :parameters (?npc - person ?c - coconut ?r - rack)\n    :precondition (and\n                    (peeled ?c)\n                    (not (drained ?c))\n                   )\n    :effect (drained ?c)\n)\n\n;; Action to open the coconut after wrapping it\n\n(:action remove_coconut_meat\n    :parameters (?c - coconut ?k - knife)\n    :precondition (and (broken ?c) (sharp ?k))\n    :effect (and (meat_separated ?c) (not (broken ?c)))\n)\n```\n\nThis set of PDDL actions captures the steps and descriptions provided for the task \"get_coconut_meat_with_oven.\" Each action includes parameters, preconditions, and effects that reflect the logic and intent of the corresponding step.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:wrap\n\n\nAction sets that need to be merged:\n(:action wrap-coconut\n    :parameters (?c - coconut ?t - towel)\n    :precondition (and\n                    (not (wrapped ?c ?t))\n                    (coconut_intact ?c)\n                   )\n    :effect (wrapped ?c ?t)\n)\n\n;; Action to peel the coconut using a knife\n\n(:action wrap_coconut\n    :parameters (?c - coconut ?t - towel)\n    :precondition (and (drained ?c) (clean ?t))\n    :effect (and (wrapped ?c ?t) (not (clean ?t)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:smash\n\n\nAction sets that need to be merged:\n(:action smash-coconut\n    :parameters (?npc - person ?c - coconut ?h - hammer)\n    :precondition (and\n                    (wrapped ?c ?t)\n                    (drained ?c)\n                    (not (smashed ?c))\n                   )\n    :effect (smashed ?c)\n)\n```\n\n### Explanation:\n\n1. **wrap-coconut**: This action wraps the coconut in a towel, ensuring that bits do not fly when smashed.\n   - **Preconditions**: The coconut is intact and not yet wrapped.\n   - **Effects**: The coconut becomes wrapped in the towel.\n\n2. **peel-coconut**: This action involves peeling off the outer casing of the coconut with a knife.\n   - **Preconditions**: The coconut is wrapped, the knife is sharp, and the coconut is not yet peeled.\n   - **Effects**: The coconut becomes peeled.\n\n3. **drain-coconut**: This action drains the liquid from the coconut by placing it upside down on a rack.\n   - **Preconditions**: The coconut is peeled and not yet drained.\n   - **Effects**: The coconut becomes drained.\n\n4. **smash-coconut**: This action breaks open the coconut using a hammer while it is still wrapped.\n   - **Preconditions**: The coconut is wrapped, drained, and not yet smashed.\n   - **Effects**: The coconut becomes smashed, making the meat accessible.\n(:action break_coconut\n    :parameters (?c - coconut ?t - towel ?h - hammer)\n    :precondition (and (wrapped ?c ?t) (heavy ?h))\n    :effect (and (broken ?c) (not (wrapped ?c ?t)))\n)\n\n\nThe actions after the merger are:"
]