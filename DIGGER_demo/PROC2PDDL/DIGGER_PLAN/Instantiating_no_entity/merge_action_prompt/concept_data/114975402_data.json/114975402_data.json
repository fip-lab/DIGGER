[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:get\n\n\nAction sets that need to be merged:\n(:action get_costume\n    :parameters (?npc - character ?c - costume)\n    :precondition (and\n                    (not (costume-complete ?npc ?c))\n                    (has-supplies ?c part1)\n                    (has-supplies ?c part2)\n                    (has-supplies ?c part3))\n    :effect (costume-complete ?npc ?c)\n)\n```\n\n### Explanation:\n\n- **Action Name**: `get_costume` - This action represents the process of assembling a full costume for a character.\n\n- **Parameters**: \n  - `?npc` - Represents the non-player character (NPC) who will wear the costume.\n  - `?c` - Represents the costume that needs to be assembled.\n\n- **Preconditions**: \n  - The costume is not yet complete for the NPC (`not (costume-complete ?npc ?c)`).\n  - The necessary supplies for the costume are available (`has-supplies ?c part1`, `has-supplies ?c part2`, `has-supplies ?c part3`), ensuring that the costume has at least three parts as required.\n\n- **Effects**: \n  - Once the action is performed, the costume is marked as complete for the NPC (`costume-complete ?npc ?c`).\n\nThis action encapsulates the task of gathering and assembling the necessary parts of a costume for a character, ensuring that the costume is complete according to the description provided.\nThe actions after the merger are:"
]