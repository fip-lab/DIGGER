[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:fill\n\n\nAction sets that need to be merged:\n(:action fill_bathtub\n    :parameters (?bathtub - bathtub ?bathroom - bathroom ?npc - npc)\n    :precondition (and\n                    (located ?bathtub ?bathroom)\n                    (present ?npc ?bathroom)\n                    (empty ?bathtub))\n    :effect (and\n              (filled ?bathtub)\n              (not (empty ?bathtub)))\n)\n```\n\n2. **get_water**\n```pddl\n\n(:action cover_mouth_and_nose\n    :parameters (?npc - agent ?c - cloth ?m - mask ?loc - place)\n    :precondition (and\n                    (location ?npc outside)\n                    (condition ?npc exposed)\n                    (availability ?c in_inventory)\n                    (availability ?m in_inventory))\n    :effect (and\n             (condition ?npc protected)\n             (availability ?c used)\n             (availability ?m used))\n  )\n\nExplanation:\n- The action \"cover_mouth_and_nose\" describes the step where the npc covers their mouth and nose with a cloth or mask to avoid breathing in toxic particles during a nuclear blast.\n- The parameters include the npc, the cloth, the mask, and the location.\n- The preconditions check that the npc is outside and exposed, and that both the cloth and mask are available in the inventory.\n- The effects update the npc's condition to protected and mark the cloth and mask as used.\n\nThis PDDL action captures the intent and logic of the given step and description.\n(:action put_in_cage\n    :parameters (?n - npc ?b - location)\n    :precondition (and\n                    (npc-free ?n)\n                    (location ?b)\n                    (not (npc-in-cage ?n ?b)))\n    :effect (and\n              (npc-in-cage ?n ?b)\n              (not (npc-free ?n)))\n)\n```\n\n### Explanation:\n\n- **Action Name:** `put_in_cage` - This action involves placing an NPC into a cage located in the basement.\n- **Parameters:** `?n` represents the NPC, and `?b` represents the location (basement).\n- **Preconditions:** The NPC must be free (not already in a cage), and the basement location must exist.\n- **Effects:** Once the action is completed, the NPC is now in a cage in the basement, and the NPC is no longer free.\n\nThis action captures the intent of the step by ensuring the NPC is securely placed in a designated location, which is a preparatory step for an attack scenario.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:get\n\n\nAction sets that need to be merged:\n(:action get_water\n    :parameters (?npc - npc ?water - water ?bathtub - bathtub)\n    :precondition (and\n                    (filled ?bathtub)\n                    (present ?npc ?bathtub))\n    :effect (and\n              (has_water ?npc ?water)\n              (decreased_water ?bathtub))\n)\n```\n\nExplanation:\n- **fill_bathtub**: This action involves filling the bathtub with water. The preconditions ensure that the bathtub is located in the bathroom, the npc is present in the bathroom, and the bathtub is empty. The effect is that the bathtub becomes filled with water.\n- **get_water**: This action involves the npc getting water from the filled bathtub. The preconditions ensure that the bathtub is filled with water and the npc is present at the bathtub. The effect is that the npc now has water, and the water level in the bathtub decreases.\n\nThese actions are relevant to the task \"collect-water\" and align with the given steps. The descriptions provided are not directly related to the specific actions but give context to the situation.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:check\n\n\nAction sets that need to be merged:\n(:action check_radio\n    :parameters (?npc - agent ?radio - device)\n    :precondition (and\n                    (not (checked_radio ?npc))\n                   )\n    :effect (checked_radio ?npc)\n  )\n\n;; Check if the radio has batteries\n\n(:action check_batteries\n    :parameters (?npc - agent ?radio - device ?location - place)\n    :precondition (and\n                    (checked_radio ?npc)\n                    (at ?npc ?location)\n                    (radio_location ?radio ?location)\n                    (not (checked_batteries ?npc))\n                   )\n    :effect (checked_batteries ?npc)\n  )\n\n;; Turn on the radio\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:turn\n\n\nAction sets that need to be merged:\n(:action turn_on_radio\n    :parameters (?npc - agent ?radio - device)\n    :precondition (and\n                    (checked_batteries ?npc)\n                    (radio_functional ?radio)\n                    (not (radio_on ?radio))\n                   )\n    :effect (and\n             (radio_on ?radio)\n             (tuned_in ?npc)\n            )\n  )\n```\n\nExplanation:\n- The `check_radio` action allows the NPC to check if the radio is functional.\n- The `check_batteries` action allows the NPC to check if the radio has batteries, given that the NPC is in the basement and has already checked the radio.\n- The `turn_on_radio` action allows the NPC to turn on the radio if it is functional and has batteries, which results in the NPC being tuned in to the radio.\n\nThese actions follow the format and structure of the example provided and are tailored to the given task and steps.\nThe actions after the merger are:"
]