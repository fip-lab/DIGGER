[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:poke\n\n\nAction sets that need to be merged:\n(:action poke-coconut\n    :parameters (?npc - person ?c - coconut ?s - screwdriver ?m - mallet)\n    :precondition (and\n                    (drained ?c)\n                    (not (hole_poked ?c))\n                  )\n    :effect (hole_poked ?c)\n)\n\n;; Wrap the coconut in a towel\n\n(:action poke_coconut\n    :parameters (?c - coconut ?s - screwdriver ?m - mallet)\n    :precondition (and (drained ?c) (available ?s) (available ?m))\n    :effect (and (hole_in_eye ?c) (not (intact ?c)))\n)\n\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:drain\n\n\nAction sets that need to be merged:\n(:action drain-coconut\n    :parameters (?npc - person ?c - coconut ?r - rack)\n    :precondition (and\n                    (at ?c ?r)\n                    (not (drained ?c))\n                  )\n    :effect (drained ?c)\n)\n\n;; Poke a hole in the coconut\n\n(:action drain_coconut\n    :parameters (?c - coconut ?g - glass)\n    :precondition (and (full ?c) (empty ?g) (upside_down ?c))\n    :effect (and (drained ?c) (full ?g) (not (full ?c)))\n)\n\n\n(:action remove-screwdriver\n    :parameters (?p - person ?s - screwdriver ?c - coconut)\n    :precondition (and\n                    (screwdriver_inserted ?s ?c)\n                    (coconut_eye_poked ?c)\n                   )\n    :effect (and\n              (not (screwdriver_inserted ?s ?c))\n              (coconut_eye_widened ?c)\n            )\n)\n```\n\n### Explanation:\n1. **position-screwdriver**: This action involves positioning the screwdriver on one of the coconut's eyes. The precondition checks that the screwdriver is not already positioned and that the coconut has eyes. The effect sets the screwdriver as positioned on the coconut.\n\n2. **bore-hole**: This action uses the mallet to bore a hole through the coconut's eye using the positioned screwdriver. The precondition requires the screwdriver to be positioned and the coconut eye not yet poked. The effect indicates the coconut eye is poked and the screwdriver is inserted.\n\n3. **remove-screwdriver**: This action involves wiggling out the screwdriver to widen the hole. The precondition checks that the screwdriver is inserted and the coconut eye is poked. The effect shows the screwdriver is removed, and the hole is widened.\n\nThese actions capture the sequence and logic described in the task and description.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:break\n\n\nAction sets that need to be merged:\n(:action break_coconut\n    :parameters (?c - coconut ?t - towel)\n    :precondition (and (wrapped ?c ?t) (cooled ?c))\n    :effect (and (broken ?c) (not (whole ?c)))\n)\n```\n\n### Explanation:\n\n1. **drain_coconut**: This action involves turning the coconut upside down over a glass to drain its liquid. Preconditions include the coconut being full and the glass being empty. The effect is the coconut becomes drained, and the glass becomes full.\n\n2. **poke_coconut**: This action involves using a screwdriver and mallet to poke a hole in the coconut's \"eye.\" Preconditions are that the coconut is drained and the tools are available. The effect is creating a hole in the coconut.\n\n3. **wrap_coconut_in_towel**: This action involves wrapping the coconut in a towel to cool it down. Preconditions include having a hole in the coconut and an available towel. The effect is that the coconut is wrapped.\n\n4. **break_coconut**: This action involves breaking the coconut while it is wrapped in a towel. Preconditions include the coconut being wrapped and cooled. The effect is that the coconut becomes broken.\n(:action break_coconut_wrapped\n    :parameters (?c - coconut ?t - towel)\n    :precondition (and (hole_in_eye ?c) (wrapped ?c ?t))\n    :effect (and (broken ?c) (not (wrapped ?c ?t)))\n)\n```\n\nNote: The steps and actions have been slightly modified to ensure they are relevant and logically consistent with the task of removing fiber from coconut meat. The provided steps and descriptions have been used to generate the most appropriate PDDL actions.\n(:action break_wrapped_coconut\n    :parameters (?npc - agent ?coconut - object ?towel - object)\n    :precondition (and (at ?npc kitchen) (wrapped ?coconut ?towel))\n    :effect (and (meat_exposed ?coconut) (not (wrapped ?coconut ?towel)))\n)\n```\n\n### Descriptions:\n\n1. **break_coconut**:\n    - This action represents the NPC breaking the coconut, which is a necessary step to access the meat inside.\n    - Preconditions: The NPC and the coconut must be in the kitchen, and the coconut must be intact.\n    - Effects: The coconut is broken.\n\n2. **drain_coconut**:\n    - This action involves draining the coconut by turning it upside down over a glass and allowing the liquid to drain out.\n    - Preconditions: The NPC, coconut, rack, and glass must be in the kitchen, and the coconut must be broken.\n    - Effects: The coconut is drained, and the liquid is now in the glass.\n\n3. **poke_coconut**:\n    - This action involves poking a hole in the coconut using a screwdriver to facilitate draining.\n    - Preconditions: The NPC, coconut, and screwdriver must be in the kitchen, and the coconut must be intact.\n    - Effects: A hole is made in the coconut.\n\n4. **wrap_coconut**:\n    - This action involves wrapping the broken coconut in a towel to cool it down.\n    - Preconditions: The NPC, coconut, and towel must be in the kitchen, and the coconut must be broken.\n    - Effects: The coconut is wrapped in a towel.\n\n5. **break_wrapped_coconut**:\n    - This action represents the NPC breaking the wrapped coconut to expose the meat inside.\n    - Preconditions: The NPC and the wrapped coconut must be in the kitchen.\n    - Effects: The coconut meat is exposed, and the coconut is no longer wrapped.\n\nThese actions accurately capture the steps involved in freeing the meat from a coconut based on the provided descriptions.\n(:action break-coconut\n    :parameters (?npc - person ?c - coconut ?m - mallet ?t - towel)\n    :precondition (and\n                    (wrapped ?c)\n                    (not (broken ?c))\n                  )\n    :effect (broken ?c)\n)\n```\n\nThese actions should capture the steps and logic necessary to complete the task of hitting a coconut with a mallet.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:wrap\n\n\nAction sets that need to be merged:\n(:action wrap_coconut\n    :parameters (?npc - agent ?coconut - object ?towel - object)\n    :precondition (and (at ?npc kitchen) (at ?coconut kitchen) (at ?towel kitchen) (broken ?coconut))\n    :effect (and (wrapped ?coconut ?towel))\n)\n\n\n(:action wrap_coconut_in_towel\n    :parameters (?c - coconut ?t - towel)\n    :precondition (and (hole_in_eye ?c) (available ?t))\n    :effect (and (wrapped ?c ?t) (not (unwrapped ?c)))\n)\n\n\n(:action wrap-coconut-towel\n    :parameters (?npc - person ?c - coconut ?t - towel)\n    :precondition (and\n                    (hole_poked ?c)\n                    (not (wrapped ?c))\n                  )\n    :effect (wrapped ?c)\n)\n\n;; Break the wrapped coconut with a mallet\n\n(:action position-screwdriver\n    :parameters (?p - person ?s - screwdriver ?c - coconut)\n    :precondition (and\n                    (not (screwdriver_positioned ?s ?c))\n                    (coconut_has_eyes ?c)\n                   )\n    :effect (screwdriver_positioned ?s ?c)\n)\n\n;; \u4f7f\u7528\u9524\u5b50\u5728\u6930\u5b50\u4e0a\u6253\u5b54\u7684\u52a8\u4f5c\n\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:bore\n\n\nAction sets that need to be merged:\n(:action bore-hole\n    :parameters (?p - person ?s - screwdriver ?m - mallet ?c - coconut)\n    :precondition (and\n                    (screwdriver_positioned ?s ?c)\n                    (not (coconut_eye_poked ?c))\n                   )\n    :effect (and\n              (coconut_eye_poked ?c)\n              (screwdriver_inserted ?s ?c)\n            )\n)\n\n;; \u79fb\u9664\u87ba\u4e1d\u5200\u4ee5\u6269\u5927\u5b54\u7684\u52a8\u4f5c\n\nThe actions after the merger are:"
]