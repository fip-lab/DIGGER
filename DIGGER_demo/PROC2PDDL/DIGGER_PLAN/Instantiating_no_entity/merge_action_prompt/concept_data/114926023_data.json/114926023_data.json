[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:create\n\n\nAction sets that need to be merged:\n(:action create_raft\n    :parameters (?npc - agent ?location - place ?raft_draft - object)\n    :precondition (and\n                    (at ?npc ?location)\n                    (has-materials ?npc ?raft_draft)\n                    (location-type ?location beach))\n    :effect (and\n              (raft-built ?raft_draft)\n              (not (has-materials ?npc ?raft_draft))\n             )\n)\n\n;; Action 2: create_rescue_signal\n\n(:action create_rescue_signal\n    :parameters (?npc - agent ?location - place)\n    :precondition (and\n                    (at ?npc ?location)\n                    (location-type ?location beach)\n                    (has-materials ?npc signal-materials))\n    :effect (and\n              (signal-created ?location)\n              (not (has-materials ?npc signal-materials))\n             )\n)\n```\n\n### Explanation:\n\n- **create_raft**: This action involves an agent (npc) creating a raft at a specific location (beach) using materials (raft_draft). The preconditions ensure the npc is at the beach and has the necessary materials. The effect is the raft being built, and the materials no longer being available.\n\n- **create_rescue_signal**: This action allows the npc to create a rescue signal at the beach location. The preconditions check that the npc is at the beach and has the necessary materials for the signal. The effect is the signal being created and the materials being used up.\n\nThese actions are designed to reflect the task of building a raft and potentially creating a rescue signal, aligning with the provided description.\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:put\n\n\nAction sets that need to be merged:\n(:action put_object_in_receptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n                    (holding ?a ?o)\n                    (empty ?r)\n                  )\n    :effect (and\n              (not (holding ?a ?o))\n              (in_receptacle ?o ?r)\n              (filled ?r)\n            )\n)\n```\n\n### Explanation:\n\n- **Action Name**: `put_object_in_receptacle` - This action describes placing an object into a receptacle, which could be part of organizing materials for a shelter.\n- **Parameters**: \n  - `?a` - agent, representing the individual performing the action.\n  - `?o` - object, representing the item being placed in the receptacle.\n  - `?r` - receptacle, representing the container or location where the object is placed.\n- **Preconditions**: \n  - `(holding ?a ?o)` - The agent must be holding the object.\n  - `(empty ?r)` - The receptacle must be empty to receive the object.\n- **Effects**: \n  - `(not (holding ?a ?o))` - The agent is no longer holding the object after placing it.\n  - `(in_receptacle ?o ?r)` - The object is now in the receptacle.\n  - `(filled ?r)` - The receptacle is now filled with the object.\n\nThis action captures the intent of organizing or preparing materials, which can be a preliminary step in creating a shelter. If there were more steps or detailed descriptions, additional actions could be generated to cover other aspects of shelter creation.\nThe actions after the merger are:"
]