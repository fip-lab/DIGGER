[
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:hunt\n\n\nAction sets that need to be merged:\n(:action hunt_for_food\n    :parameters (?npc - agent ?location - location)\n    :precondition (and\n      (at ?npc ?location)\n      (not (has_food ?npc))\n    )\n    :effect (and\n      (has_food ?npc)\n    )\n)\n\n;; Action 2: Carve groove\n\n(:action test_food_for_poison\n    :parameters (?npc - agent ?food - item)\n    :precondition (and\n      (has_food ?npc)\n      (not (tested ?food))\n    )\n    :effect (and\n      (tested ?food)\n      (safe_to_eat ?food)\n    )\n)\n```\n\nExplanation:\n1. **hunt_for_food**: This action represents the NPC hunting for food in a specified location.\n   - **Parameters**: `?npc` (the NPC hunting), `?location` (the location where the hunt takes place).\n   - **Preconditions**: The NPC must be at the location and must not already have food.\n   - **Effects**: The NPC obtains food.\n\n2. **carve_groove**: This action represents a person carving a groove in wood using a rock.\n   - **Parameters**: `?person` (the person carving), `?wood` (the wood being carved), `?rock` (the tool used for carving).\n   - **Preconditions**: The wood and rock must be at the same location, and the wood must not already be carved.\n   - **Effects**: The wood is carved.\n\n3. **test_food_for_poison**: This action represents testing food for poison.\n   - **Parameters**: `?npc` (the NPC testing the food), `?food` (the food being tested).\n   - **Preconditions**: The NPC must have the food, and the food must not have been tested yet.\n   - **Effects**: The food is tested and marked as safe to eat if it passes the test.\n\nThese actions capture the intent and logic of the provided steps and descriptions for the task \"hunt_animal_for_food\".\nThe actions after the merger are:",
    "\nYou're a professional AI, and you're able to combine multiple PDDL actions into one universal action. The merged action should:\n\nObjective:\nCombine multiple PDDL actions into a single universal action that is adaptable to a variety of tasks, capable of capturing and transforming the entity's state. The merged action should:\n\nGenerality: Use abstract parameters to adapt to a variety of tasks, avoiding being limited to specific types of actions.\nState Change: Each action must clearly describe the state change, gradually transforming the entity's state until the goal state is reached.\nCore Logic: Retain the core logic of preconditions and effects without unnecessary complexity.\nAvoid Redundancy: Merge actions with similar effects to ensure simplicity and efficiency.\nLogical Consistency: The merged action should maintain reasonable preconditions and effects in different contexts.\n\nGuidelines:\nGenerality: The merged action should apply to multiple tasks, especially those involving checking, modifying, or creating. Ensure the use of abstract parameters to increase applicability.\nState Change: The preconditions and effects of each action should clearly reflect the change in state. Through a series of actions, progressively transform the entity's state until the goal state is reached.\nSimplicity: Avoid redundancy and ensure the merged action is simple and efficient by removing unnecessary complexity.\nLogical Consistency: Each action should maintain consistent logic across different tasks, ensuring that the preconditions and effects are clear and reasonable.\n\nExamples of actions you are given:\n\nAction name after merge: check\n\nAction sets that need to be merged:\n\"(:action check_bestseller_list ;  Check the bestseller list for book recommendations\n  :parameters (? npc - person ? book - book) \n\n:precondition (and (available ? npc) (not (checked_list ? npc ? book)))\n\n:effect (and (checked_list ? npc ? book))\n)\n\n\n\n\n\n\"\n\n(:action listen_to_member_secret ;  assign a member to keep track of loans and listen to their suggestions\n\n:parameters (? leader - player ? member - player ? bc - book_club)\n\n:precondition (and (in ? leader ? bc) (in ? member ? bc) (not (loan_tracker ? member ? bc)))\n      :effect (loan_tracker ? member ? bc))\n\n\n\nThe actions after the merger are:\n(:action check ;  Check a resource and update task status\n:parameters (? npc - person ? item - object)\n:precondition (and (available ? npc) (not (checked ? npc ? item)))\n:effect (checked ? npc ? item))\n\n\nHere are our tasks\n\nAction name after merge:carve\n\n\nAction sets that need to be merged:\n(:action carve_groove\n    :parameters (?person - agent ?wood - material ?rock - tool)\n    :precondition (and\n      (at ?wood ?location)\n      (at ?rock ?location)\n      (not (carved ?wood))\n    )\n    :effect (and\n      (carved ?wood)\n    )\n)\n\n;; Action 3: Test food for poison\n\nThe actions after the merger are:"
]