[
    "```lisp\n(:action drink ; Consume a liquid to achieve a desired state\n  :parameters (?p - person ?liquid - liquid)\n  :precondition (and \n                 (at ?p ?liquid)\n                 (consumable ?liquid)\n                 (not (spoiled ?liquid)))\n  :effect (and \n           (hydrated ?p)\n           (not (at ?p ?liquid))))\n\n(:action carve ; Carve a material using a tool and update the material's state\n  :parameters (?p - person ?m - material ?t - tool)\n  :precondition (and\n                 (has_tool ?p ?t)\n                 (has_material ?p ?m)\n                 (not (carved ?m))\n                 (material_intact ?m))\n  :effect (and\n           (carved ?m)\n           (material_condition ?m grooved)\n           (not (has_material ?p ?m))))\n\n(:action hunt\n  :parameters (?p - person ?r - resource ?l - location)\n  :precondition (and\n                 (at ?p ?l)\n                 (available ?r ?l)\n                 (not (obtained ?p ?r)))\n  :effect (and\n           (obtained ?p ?r)\n           (not (available ?r ?l))))\n\n(:action prepare ; Prepare an item using a tool and resources\n  :parameters (?agent - agent ?item - object ?tool - tool ?resource - resource ?container - container)\n  :precondition (and\n                 (available ?agent)\n                 (at ?item ?agent)\n                 (at ?tool ?agent)\n                 (at ?item ?container)\n                 (at ?resource ?container)\n                 (not (prepared ?item))\n                 (or (caught ?item) (prepared ?item))\n                 (or (heated ?resource) (prepared ?item)))\n  :effect (and\n           (prepared ?item)\n           (cooked ?item)))\n\n(:action heat ; Heat a resource and update its status\n  :parameters (?resource - resource ?source - source ?task - task)\n  :precondition (and \n                 (at ?resource ?source)\n                 (not (heated ?resource))\n                 (task_requires_heating ?task ?resource)\n                 (not (task_completed ?task)))\n  :effect (and\n           (heated ?resource)\n           (task_completed ?task)))\n\n(:action serve ; Serve an item to a location\n  :parameters (?item - object ?container - container ?location - location)\n  :precondition (and\n                 (prepared ?item)\n                 (at ?container ?location))\n  :effect (and\n           (in ?item ?container)\n           (served ?item)))\n\n(:action start ; Initiate a process or task involving resource transformation\n  :parameters (?p - person ?resource - object ?tool - tool)\n  :precondition (and\n                 (person_has ?p ?tool)\n                 (resource_condition ?resource initial)\n                 (not (process_started ?resource)))\n  :effect (and\n           (process_started ?resource)\n           (resource_condition ?resource processed)))\n\n(:action get ; Retrieve a resource and update its status\n  :parameters (?p - person ?item - object)\n  :precondition (and\n                 (at ?p island)\n                 (available ?item))\n  :effect (and\n           (has ?p ?item)\n           (not (available ?item))))\n```"
]