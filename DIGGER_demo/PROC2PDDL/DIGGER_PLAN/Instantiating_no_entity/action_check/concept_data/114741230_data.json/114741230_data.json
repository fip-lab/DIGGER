[
    "```lisp\n['(:action initiate ;  Initiate a process or membership and update status\n  :parameters (?npc - person ?entity - entity)\n  :precondition (and \n                  (not (initiated ?npc ?entity))\n                  (closest-friend ?npc)\n                  (not (formed ?entity)))\n  :effect (and \n            (initiated ?npc ?entity)\n            (formed ?entity)))',\n '(:action initiate_new_member\n  :parameters (?npc - person ?ss - secret_society)\n  :precondition (and\n                  (not (member-initiated ?npc ?ss))\n                  (closest-friend ?npc)\n                  (not (society-formed ?ss)))\n  :effect (and\n            (member-initiated ?npc ?ss)\n            (society-formed ?ss)))',\n '(:action set\n  :parameters (?npc - person ?ss - secret_society ?attribute - attribute)\n  :precondition (and\n                  (society-formed ?ss)\n                  (not (set ?ss ?attribute)))\n  :effect (set ?ss ?attribute))',\n '(:action create ; Create an entity or attribute within a context\n  :parameters (?npc - person ?item - entity ?context - context)\n  :precondition (and\n                  (initiated ?npc ?item)\n                  (belongs-to ?item ?context)\n                  (not (created ?item ?context)))\n  :effect (created ?item ?context))',\n '(:action teach\n  ; Teach a member and update their knowledge or status in an organization\n  :parameters (?teacher - person ?student - person ?org - organization ?info - information)\n  :precondition (and\n                  (member-initiated ?student ?org)\n                  (not (knows ?student ?info ?org))\n                  (can-teach ?teacher ?info ?org))\n  :effect (knows ?student ?info ?org))',\n '(:action read ;  Read information from a resource and update status\n  :parameters (?npc - person ?resource - entity)\n  :precondition (and (available ?npc) (not (info-read ?npc ?resource)))\n  :effect (info-read ?npc ?resource))']\n```"
]