[
    "```lisp\n(:action gather\n  :parameters (?npc - agent ?item - resource ?location - place)\n  :precondition (and\n    (at ?npc ?location)\n    (or (and (not (gathered ?item)) (resource_type ?item branch))\n        (and (not (collected ?item)) (resource_type ?item tinder))\n        (and (not (collected ?item)) (resource_type ?item kindling))\n        (and (found_water_source ?location) (not (has_water ?npc)) (resource_type ?item water)))\n  )\n  :effect (and\n    (or (gathered ?item) (collected ?item))\n  )\n)\n\n(:action prop\n  :parameters (?entity - resource ?structure - structure)\n  :precondition (and \n                (gathered ?entity)\n                (not (propped_up ?entity ?structure))\n              )\n  :effect (propped_up ?entity ?structure)\n)\n\n(:action build\n  :parameters (?actor - agent ?location - place ?structure - object ?resource - resource)\n  :precondition (and\n                  (available ?actor)\n                  (not (built ?location ?structure))\n                  (or (searched ?location)\n                      (forall (?part - part) (propped_up ?part ?resource)))\n                  (or (not (shelter_built ?location))\n                      (fire_started ?location))\n                )\n  :effect (and\n            (built ?location ?structure)\n            (or (shelter_formed ?resource)\n                (shelter_built ?location)\n                (built_teepee ?structure)\n                (cooked_meal ?actor))\n  )\n)\n\n(:action search\n  :parameters (?actor - agent ?target - object)\n  :precondition (and\n    (at ?actor ?target)\n    (not (found ?target))\n  )\n  :effect (and\n    (found ?target)\n  )\n)\n\n(:action start\n  :parameters (?actor - agent ?process - process ?resource1 - resource ?resource2 - resource ?resource3 - resource)\n  :precondition (and\n                  (available ?actor)\n                  (collected ?resource1)\n                  (collected ?resource2)\n                  (built ?resource3)\n                  (not (process_started ?process))\n                )\n  :effect (process_started ?process)\n)\n```"
]