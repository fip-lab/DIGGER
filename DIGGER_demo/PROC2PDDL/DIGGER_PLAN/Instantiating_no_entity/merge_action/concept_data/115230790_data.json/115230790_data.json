{
    "move": [
        "(:action move_away\n    :parameters (?npc - npc ?from - location ?to - location ?bunker - bunker)\n    :precondition (and\n                    (at_location ?npc ?from)\n                    (safe ?to))\n    :effect (and\n              (at_location ?npc ?to)\n              (in_bunker ?npc ?bunker))\n)\n\n"
    ],
    "check": [
        "(:action listen_to_astronomers\n    :parameters (?npc - npc ?home - home)\n    :precondition (at_home ?npc ?home)\n    :effect (informed ?npc)\n)\n\n",
        "(:action check_supplies\n    :parameters (?food - food ?npc - npc)\n    :precondition (and\n                    (stocked ?food)\n                    (informed ?npc))\n    :effect (checked ?food)\n)\n\n",
        "(:action check_bunker\n    :parameters (?bunker - bunker ?npc - npc)\n    :precondition (and\n                    (has_bunker ?npc ?bunker)\n                    (prepared ?bunker))\n    :effect (checked ?bunker)\n)\n\n",
        "(:action check_weapons\n    :parameters (?pistol - weapon ?ammunition - ammunition)\n    :precondition (and\n                    (has_weapon ?npc ?pistol)\n                    (has_ammunition ?npc ?ammunition))\n    :effect (checked ?pistol)\n)\n```\n\nThese actions should capture the intent and logic of each step described for the task."
    ],
    "wait": [
        "(:action wait_for_reports\n    :parameters (?npc - npc)\n    :precondition (and\n                    (early_reports ?npc))\n    :effect (and\n              (unified_reports ?npc)\n              (not (early_reports ?npc)))\n)\n\n",
        "(:action stay_in_isolation\n    :parameters (?bunker - bunker ?npc - npc)\n    :precondition (in_bunker ?npc ?bunker)\n    :effect (isolated ?npc)\n)\n\n"
    ],
    "buy": [
        "(:action buy_weapons\n    :parameters (?npc - npc ?weapon - weapon)\n    :precondition (and\n                    (needs_weapon ?npc)\n                    (available ?weapon))\n    :effect (has_weapon ?npc ?weapon)\n)\n\n",
        "(:action buy_supplies\n    :parameters (?food - food ?npc - npc ?market - market)\n    :precondition (and\n                    (needs_supplies ?npc)\n                    (available ?food ?market))\n    :effect (has_supplies ?npc ?food)\n)\n\n"
    ],
    "outfit": [
        "(:action outfit_bunker_with_energy_source\n    :parameters (?bunker - bunker ?npc - npc ?heat - heat)\n    :precondition (and\n                    (in_bunker ?npc ?bunker)\n                    (has_energy_source ?npc))\n    :effect (and\n              (outfitted ?bunker ?heat)\n              (prepared ?bunker))\n)\n\n"
    ]
}