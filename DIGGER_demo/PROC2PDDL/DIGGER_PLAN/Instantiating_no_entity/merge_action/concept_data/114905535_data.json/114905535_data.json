{
    "gather": [
        "(:action gather-materials\n    :parameters (?p - person ?l - location ?m - material)\n    :precondition (and\n                    (at ?p ?l)\n                    (material_available ?l ?m)\n                    (not (material_collected ?p ?m))\n                   )\n    :effect (and\n              (material_collected ?p ?m)\n              (not (material_available ?l ?m))\n            )\n)\n```\n\n#### Action 2: create-shelter\n```lisp\n",
        "(:action gather_dry_material\n    :parameters (?agent - agent ?material - material)\n    :precondition (and (at ?agent forest) (dry ?material))\n    :effect (and (collected ?material) (not (at ?material forest)))\n)\n```\n\n3. Create Shelter\n```pddl\n",
        "(:action get_water\n    :parameters (?n - npc ?r - river ?w - water)\n    :precondition (and\n                    (at ?n ?r)\n                    (water_available ?r))\n    :effect (and\n              (has_water ?n ?w)\n              (not (water_available ?r))\n             )\n  )\n```\n\nExplanation:\n- Action Name: get_water\n- Parameters: ?n - npc, ?r - river, ?w - water\n- Preconditions: The npc should be at the river, and water should be available in the river.\n- Effects: The npc will have water, and the river will no longer have water available.\n\nThis action captures the intent of gathering water from the river, considering the preconditions and effects based on the descriptions provided."
    ],
    "create": [
        "(:action create-shelter\n    :parameters (?p - person ?l - location)\n    :precondition (and\n                    (at ?p ?l)\n                    (material_collected ?p tinder)\n                    (not (shelter_built ?l))\n                   )\n    :effect (shelter_built ?l)\n)\n```\n\n#### Action 3: start-fire\n```lisp\n",
        "(:action create_shelter\n    :parameters (?npc - npc ?location - location ?tinder - tinder)\n    :precondition (and (at ?npc ?location) (collected ?tinder))\n    :effect (and (shelter_created ?location) (not (collected ?tinder)))\n)\n```\n\n4. Swim (This step also seems irrelevant to making a smoke signal. Let's modify it to be relevant.)\n```pddl\n"
    ],
    "start": [
        "(:action start-fire\n    :parameters (?p - person ?m - material)\n    :precondition (and\n                    (material_collected ?p ?m)\n                    (shelter_built beach)\n                    (not (fire_started beach))\n                   )\n    :effect (fire_started beach)\n)\n```\n\n### Explanation:\n- **gather-materials**: This action involves collecting necessary materials like tinder from a location.\n- **create-shelter**: Building a shelter is essential for safety and is a prerequisite for starting a fire in this scenario.\n- **start-fire**: The final step involves using the collected materials to start a fire, assuming the shelter is built and materials are collected.\n\nThese actions are designed to reflect the logical sequence needed to build a fire while considering the importance of shelter as described.",
        "(:action start_fire\n    :parameters (?npc - npc ?tinder - tinder)\n    :precondition (and (at ?npc shelter) (dry ?tinder))\n    :effect (and (fire_started ?shelter) (not (dry ?tinder)))\n)\n```\n\nThe modified steps now align better with the task of making a smoke signal. The PDDL actions reflect the necessary conditions and effects for each action."
    ],
    "wet": [
        "(:action wet_tinder\n    :parameters (?npc - npc ?tinder - tinder)\n    :precondition (and (at ?npc water-source) (dry ?tinder))\n    :effect (and (wet ?tinder) (not (dry ?tinder)))\n)\n```\n\n2. Put Object in Receptacle (This step seems irrelevant to making a smoke signal. Let's modify it to be relevant.)\n```pddl\n"
    ]
}