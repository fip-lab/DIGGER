{
    "drink": [
        "(:action drink_water\n    :parameters (?p - person ?w - water)\n    :precondition (and\n                    (at ?p ?w)\n                    (not (salt_water ?w))\n                    (clean ?w))\n    :effect (and\n              (hydrated ?p)\n              (not (at ?p ?w))\n             )\n  )\n\n"
    ],
    "carve": [
        "(:action carve_groove\n    :parameters (?p - person ?w - wood ?r - rock)\n    :precondition (and\n                    (has_tool ?p ?r)\n                    (has_material ?p ?w)\n                    (at ?p island))\n    :effect (and\n              (groove_carved ?w)\n              (not (has_material ?p ?w))\n             )\n  )\n\n",
        "(:action carve-groove\n    :parameters (?p - person ?w - wood ?r - rock)\n    :precondition (and\n                    (person_has ?p ?r)\n                    (wood_intact ?w)\n                    (not (groove_carved ?w))\n                   )\n    :effect (and\n              (groove_carved ?w)\n              (wood_condition ?w grooved)\n            )\n  )\n\n;; Action to start a fire using grooved wood and a friction tool (e.g., stick)\n"
    ],
    "hunt": [
        "(:action check_water\n    :parameters (?n - npc ?r - river ?w - water)\n    :precondition (and\n                    (at ?n ?r)\n                    (source_of ?r ?w))\n    :effect (and\n              (checked ?w)\n              (clean ?w)\n             )\n  )\n```\n\nExplanation:\n- **drink_water**: This action ensures that the person drinks only clean water and not salt water. It hydrates the person and removes the person from the water source.\n- **carve_groove**: This action involves the person carving a groove in the wood using a rock. The rock must be sharp, and the action results in the wood having a groove and the rock losing its sharpness.\n- **check_water**: This action involves an NPC checking the water in the river. The water must be sourced from the river, and the action results in the water being marked as checked and clean.",
        "(:action hunt_fish\n    :parameters (?npc - agent ?fish - animal ?water - location)\n    :precondition (and\n      (at ?npc ?water)\n      (in ?fish ?water)\n      (not (caught ?fish))\n    )\n    :effect (and\n      (caught ?fish)\n      (not (in ?fish ?water))\n      (at ?fish ?npc)\n    )\n  )\n\n##### Step 2: Prepare fish for cooking\n",
        "(:action hunt_for_food\n    :parameters (?p - person ?f - food)\n    :precondition (at ?p island)\n    :effect (and\n              (has_food ?p ?f)\n             )\n  )\n```\n\nExplanation:\n1. **get_water**: This action allows an NPC to obtain water if it is available on the island. Preconditions ensure the NPC is on the island and the water is available. The effect is that the NPC now has the water, and it is no longer available (assumed to be limited supply).\n\n2. **carve_groove**: This action involves a person using a rock to carve a groove into a piece of wood. Preconditions ensure the person has both the rock and the wood and is on the island. The effect is that the wood now has a groove, and the material (wood) is used up.\n\n3. **ration_supplies**: This action is about rationing the water supplies. Preconditions ensure that the person has the water and is on the island. The effect is that the water is now rationed.\n\n4. **hunt_for_food**: This action allows the person to hunt for food on the island. Preconditions ensure the person is on the island. The effect is that the person now has food. \n\nThese actions align with the provided steps and descriptions, ensuring the logic and intent of the task \"escape_island\" are captured effectively."
    ],
    "prepare": [
        "(:action prepare_fish\n    :parameters (?person - agent ?fish - animal ?rock - tool)\n    :precondition (and\n      (caught ?fish)\n      (at ?fish ?person)\n      (at ?rock ?person)\n      (not (prepared ?fish))\n    )\n    :effect (and\n      (prepared ?fish)\n    )\n  )\n\n##### Step 3: Heat water\n",
        "(:action cook_fish\n    :parameters (?fish - animal ?water - resource ?pot - container)\n    :precondition (and\n      (prepared ?fish)\n      (heated ?water)\n      (at ?fish ?pot)\n      (at ?water ?pot)\n      (not (cooked ?fish))\n    )\n    :effect (and\n      (cooked ?fish)\n    )\n  )\n\n##### Step 5: Serve cooked fish\n"
    ],
    "heat": [
        "(:action heat_water\n    :parameters (?water - resource ?fire - source)\n    :precondition (and\n      (at ?water ?fire)\n      (not (heated ?water))\n    )\n    :effect (and\n      (heated ?water)\n    )\n  )\n\n##### Step 4: Cook fish in heated water\n"
    ],
    "serve": [
        "(:action serve_fish\n    :parameters (?fish - animal ?plate - container ?dining_table - location)\n    :precondition (and\n      (cooked ?fish)\n      (at ?plate ?dining_table)\n    )\n    :effect (and\n      (in ?fish ?plate)\n      (served ?fish)\n    )\n  )\n\nThese actions capture the intent and logic of catching and cooking fish, following the steps and descriptions provided."
    ],
    "start": [
        "(:action start-fire\n    :parameters (?p - person ?w - wood ?f - friction_tool)\n    :precondition (and\n                    (groove_carved ?w)\n                    (person_has ?p ?f)\n                    (wood_condition ?w grooved)\n                    (not (fire_started))\n                   )\n    :effect (and\n              (fire_started)\n              (wood_condition ?w used_for_fire)\n            )\n  )\n```\n\n### Explanation:\n\n1. **Action: carve-groove**\n   - **Parameters**: `?p` (person), `?w` (wood), `?r` (rock)\n   - **Preconditions**:\n     - The person must have the rock (`person_has ?p ?r`).\n     - The wood must be intact and not yet carved (`wood_intact ?w`, `not (groove_carved ?w)`).\n   - **Effects**:\n     - A groove is carved into the wood (`groove_carved ?w`).\n     - The condition of the wood changes to grooved (`wood_condition ?w grooved`).\n\n2. **Action: start-fire**\n   - **Parameters**: `?p` (person), `?w` (wood), `?f` (friction_tool)\n   - **Preconditions**:\n     - The wood must have a groove (`groove_carved ?w`).\n     - The person must have a friction tool (`person_has ?p ?f`).\n     - The fire has not yet been started (`not (fire_started)`).\n   - **Effects**:\n     - A fire is started (`fire_started`).\n     - The wood is used for fire (`wood_condition ?w used_for_fire`).\n\nThese actions are designed to logically progress from carving a groove in the wood to starting a fire, aligning with the task's objective."
    ],
    "get": [
        "(:action get_water\n    :parameters (?npc - person ?w - water)\n    :precondition (and\n                    (at ?npc island)\n                    (water-available ?w))\n    :effect (and\n              (has_water ?npc ?w)\n              (not (water-available ?w))\n             )\n  )\n\n",
        "(:action ration_supplies\n    :parameters (?p - person ?w - water)\n    :precondition (and\n                    (has_water ?p ?w)\n                    (at ?p island))\n    :effect (and\n              (rationed ?w)\n             )\n  )\n\n"
    ]
}