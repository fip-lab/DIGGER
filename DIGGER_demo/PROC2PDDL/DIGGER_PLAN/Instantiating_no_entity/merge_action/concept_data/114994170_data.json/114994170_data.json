{
    "fill": [
        "(:action fill_bathtub\n    :parameters (?bathtub - bathtub ?bathroom - bathroom ?npc - npc)\n    :precondition (and\n                    (located ?bathtub ?bathroom)\n                    (present ?npc ?bathroom)\n                    (empty ?bathtub))\n    :effect (and\n              (filled ?bathtub)\n              (not (empty ?bathtub)))\n)\n```\n\n2. **get_water**\n```pddl\n",
        "(:action cover_mouth_and_nose\n    :parameters (?npc - agent ?c - cloth ?m - mask ?loc - place)\n    :precondition (and\n                    (location ?npc outside)\n                    (condition ?npc exposed)\n                    (availability ?c in_inventory)\n                    (availability ?m in_inventory))\n    :effect (and\n             (condition ?npc protected)\n             (availability ?c used)\n             (availability ?m used))\n  )\n\nExplanation:\n- The action \"cover_mouth_and_nose\" describes the step where the npc covers their mouth and nose with a cloth or mask to avoid breathing in toxic particles during a nuclear blast.\n- The parameters include the npc, the cloth, the mask, and the location.\n- The preconditions check that the npc is outside and exposed, and that both the cloth and mask are available in the inventory.\n- The effects update the npc's condition to protected and mark the cloth and mask as used.\n\nThis PDDL action captures the intent and logic of the given step and description.",
        "(:action put_in_cage\n    :parameters (?n - npc ?b - location)\n    :precondition (and\n                    (npc-free ?n)\n                    (location ?b)\n                    (not (npc-in-cage ?n ?b)))\n    :effect (and\n              (npc-in-cage ?n ?b)\n              (not (npc-free ?n)))\n)\n```\n\n### Explanation:\n\n- **Action Name:** `put_in_cage` - This action involves placing an NPC into a cage located in the basement.\n- **Parameters:** `?n` represents the NPC, and `?b` represents the location (basement).\n- **Preconditions:** The NPC must be free (not already in a cage), and the basement location must exist.\n- **Effects:** Once the action is completed, the NPC is now in a cage in the basement, and the NPC is no longer free.\n\nThis action captures the intent of the step by ensuring the NPC is securely placed in a designated location, which is a preparatory step for an attack scenario."
    ],
    "get": [
        "(:action get_water\n    :parameters (?npc - npc ?water - water ?bathtub - bathtub)\n    :precondition (and\n                    (filled ?bathtub)\n                    (present ?npc ?bathtub))\n    :effect (and\n              (has_water ?npc ?water)\n              (decreased_water ?bathtub))\n)\n```\n\nExplanation:\n- **fill_bathtub**: This action involves filling the bathtub with water. The preconditions ensure that the bathtub is located in the bathroom, the npc is present in the bathroom, and the bathtub is empty. The effect is that the bathtub becomes filled with water.\n- **get_water**: This action involves the npc getting water from the filled bathtub. The preconditions ensure that the bathtub is filled with water and the npc is present at the bathtub. The effect is that the npc now has water, and the water level in the bathtub decreases.\n\nThese actions are relevant to the task \"collect-water\" and align with the given steps. The descriptions provided are not directly related to the specific actions but give context to the situation."
    ],
    "check": [
        "(:action check_radio\n    :parameters (?npc - agent ?radio - device)\n    :precondition (and\n                    (not (checked_radio ?npc))\n                   )\n    :effect (checked_radio ?npc)\n  )\n\n;; Check if the radio has batteries\n",
        "(:action check_batteries\n    :parameters (?npc - agent ?radio - device ?location - place)\n    :precondition (and\n                    (checked_radio ?npc)\n                    (at ?npc ?location)\n                    (radio_location ?radio ?location)\n                    (not (checked_batteries ?npc))\n                   )\n    :effect (checked_batteries ?npc)\n  )\n\n;; Turn on the radio\n"
    ],
    "turn": [
        "(:action turn_on_radio\n    :parameters (?npc - agent ?radio - device)\n    :precondition (and\n                    (checked_batteries ?npc)\n                    (radio_functional ?radio)\n                    (not (radio_on ?radio))\n                   )\n    :effect (and\n             (radio_on ?radio)\n             (tuned_in ?npc)\n            )\n  )\n```\n\nExplanation:\n- The `check_radio` action allows the NPC to check if the radio is functional.\n- The `check_batteries` action allows the NPC to check if the radio has batteries, given that the NPC is in the basement and has already checked the radio.\n- The `turn_on_radio` action allows the NPC to turn on the radio if it is functional and has batteries, which results in the NPC being tuned in to the radio.\n\nThese actions follow the format and structure of the example provided and are tailored to the given task and steps."
    ]
}