[
    "(:action push ; Push an item into a designated place and update the state accordingly\n  :parameters (?npc - person ?item - object ?location - place)\n  :precondition (and\n    (has_item ?npc ?item)\n    (locked ?location)\n  )\n  :effect (and\n    (item_in_location ?item ?location)\n    (not (has_item ?npc ?item))",
    "(:action hook_latch\n    :parameters (?npc - person ?car - car)\n    :precondition (and\n      (hanger_in_car ?car)\n      (locked ?car)\n    )\n    :effect (and\n      (unlocked ?car)\n      (not (locked ?car))",
    "(:action straighten_coat_hanger\n    :parameters (?npc - person ?hanger - hanger)\n    :precondition (and\n      (bent ?hanger)\n    )\n    :effect (and\n      (not (bent ?hanger))",
    "(:action hook ;  Perform a hooking-related task and update the state of the entity\n    :parameters (?npc - person ?item - object ?target - object)\n    :precondition (and\n      (or \n        (and (hanger_in_car ?target) (locked ?target))\n        (bent ?item))\n    )\n    :effect (and\n      (or \n        (and (unlocked ?target) (not (locked ?target))",
    "(:action straighten ; Prepare an item for a specific task\n    :parameters (?npc - person ?item - object ?target - target_entity)\n    :precondition (and \n        (has ?npc ?item)\n        (locked ?target)\n        (not (prepared ?npc ?item ?target))\n    )\n    :effect (and\n        (prepared ?npc ?item ?target)\n        (not (has ?npc ?item))",
    "(:action SlideCardIntoDoor ; Slide a card into a door lock and update the state\n  :parameters (?u - user ?c - card ?l - lock)\n  :precondition (and\n    (atLocation ?u ?l)\n    (holds ?u ?c)\n    (isCard ?c)\n    (isLock ?l)\n    (doorLocked ?l)\n  )\n  :effect (and\n    (not (doorLocked ?l))"
]