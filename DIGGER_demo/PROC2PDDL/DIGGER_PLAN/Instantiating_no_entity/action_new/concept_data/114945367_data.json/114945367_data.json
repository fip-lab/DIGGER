[
    "(:action gather ; Gather various resources and update their status\n  :parameters (?npc - agent ?item - resource ?location - place)\n  :precondition (and\n    (at ?npc ?location)\n    (or (and (not (gathered ?item)) (resource_type ?item branch))\n        (and (not (collected ?item)) (resource_type ?item tinder))\n        (and (not (collected ?item)) (resource_type ?item kindling))\n        (and (found_water_source ?location) (not (has_water ?npc)) (resource_type ?item water)))\n  )\n  :effect (and\n    (or (gathered ?item) (collected ?item))",
    "(:action prop ; Prop an entity and update structure status\n  :parameters (?entity - object ?structure - structure)\n  :precondition (and \n                  (gathered ?entity)\n                  (not (propped_up ?entity ?structure))\n                )\n  :effect (propped_up ?entity ?structure)\n)",
    "(:action build\n    :parameters (?actor - entity ?location - place ?structure - object ?resource - resource)\n    :precondition (and\n                    (available ?actor)\n                    (not (built ?location ?structure))\n                    (or (searched ?location)\n                        (forall (?part - part) (propped_up ?part ?resource)))\n                    (or (not (shelter_built ?location))\n                        (fire_started ?location))\n                  )\n    :effect (and\n              (built ?location ?structure)\n              (or (shelter_formed ?resource)\n                  (shelter_built ?location)\n                  (built_teepee ?structure)\n                  (cooked_meal ?actor))",
    "(:action search ; Generalized search action to find and update the status of a resource or area\n  :parameters (?actor - agent ?target - object)\n  :precondition (and\n    (at ?actor ?target) ; The actor must be present at the target location or associated with the target\n    (not (found ?target)) ; The target must not have been found or explored yet\n  )\n  :effect (and\n    (found ?target) ; Updates the status to indicate the target has been found or explored\n  )\n)",
    "(:action start\n  :parameters (?actor - agent ?process - process ?resource1 - resource ?resource2 - resource ?resource3 - resource)\n  :precondition (and\n                  (available ?actor)\n                  (collected ?resource1)\n                  (collected ?resource2)\n                  (built ?resource3)\n                  (not (process_started ?process))\n                )\n  :effect (process_started ?process)\n)"
]