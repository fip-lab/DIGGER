[
    "(:action breathe ; Breathe to stabilize and change state in various scenarios\n:parameters (?entity - agent ?condition - state)\n:precondition (and (inCondition ?entity ?condition) (calm ?entity))\n:effect (and (stabilized ?entity) (not (negativeState ?entity))",
    "(:action free ; Free an entity from a constraint and update its status\n  :parameters (?entity - entity ?constraint - constraint)\n  :precondition (and (constrained ?entity ?constraint) (capable ?entity) (not (free ?entity ?constraint)))\n  :effect (and (free ?entity ?constraint) (not (constrained ?entity ?constraint))",
    "(:action stay_safe\n    :parameters (?npc - person ?tool - tool ?hazardous_area - area)\n    :precondition (and (inArea ?npc ?hazardous_area) (calm ?npc) (hasTool ?npc ?tool))\n    :effect (and (onFirmGround ?npc) (not (inArea ?npc ?hazardous_area))",
    "(:action identify ; Identify a resource and update its status\n :parameters (?entity - object ?location - location)\n :precondition (and (at ?entity ?location) (not (identified ?entity)))\n :effect (and (identified ?entity) (not (unidentified ?entity))",
    "(:action mark ; Mark an entity and update its status\n  :parameters (?agent - agent ?entity - entity ?marker - marker)\n  :precondition (and (identified ?entity) (at ?marker ?entity) (not (marked ?entity)))\n  :effect (and (marked ?entity) (visible ?marker) (not (unmarked ?entity))",
    "(:action create ; Create a new state or transform an existing entity\n  :parameters (?entity - object ?attribute - attribute)\n  :precondition (and (identified ?entity) (not (has_attribute ?entity ?attribute)))\n  :effect (and (has_attribute ?entity ?attribute) (created ?entity))",
    "(:action inform ;  Inform an entity about a resource and update their awareness status\n  :parameters (?entity - agent ?resource - object)\n  :precondition (and (identified ?resource) (marked ?resource) (safe ?entity) (not (informed ?entity)))\n  :effect (and (informed ?entity) (aware ?entity ?resource))"
]