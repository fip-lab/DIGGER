[
    "(:action replace\n  ; Replace an old item with a new one and update the status\n  :parameters (?npc - person ?old_item - object ?new_item - object ?ws - work_station)\n  \n  :precondition (and (at ?npc ?ws) \n                     (not (replaced ?old_item))\n                     (not (obtained ?new_item))\n                     (available ?new_item))\n  \n  :effect (and (replaced ?old_item)\n               (obtained ?new_item))",
    "(:action lay ; Lay an item and update the workstation status\n    :parameters (?npc - agent ?ws - work_station ?item - object)\n    :precondition (and\n                    (first-half-vertical ?ws)\n                    (not (laid ?item))\n                  )\n    :effect (and\n              (second-half-horizontal ?ws)\n              (laid ?item)\n            )",
    "(:action dip\n    ; Dip an item into a substance and update its state\n    :parameters (?npc - agent ?item - object ?substance - substance)\n    :precondition (and\n                    (available ?npc)\n                    (not (soaked ?item))\n                    (contains ?item ?substance)\n                  )\n    :effect (and\n              (soaked ?item)\n              (flat ?item)\n              ; Add additional effects as necessary based on the context\n            )\n)",
    "(:action cut\n  :parameters (?agent - agent ?material - object)\n  :precondition (and (obtained ?material) (not (processed ?material)))\n  :effect (processed ?material)\n)",
    "(:action process_papyrus\n    :parameters (?agent - agent ?p - papyrus)\n    :precondition (and (obtained ?p) (stalks-cut ?p) (not (peeled ?p)) (not (polished ?p)))\n    :effect (and (peeled ?p) (polished ?p))",
    "(:action flatten\n    :parameters (?agent - agent ?location - place ?item - object)\n    :precondition (and (at ?agent ?location) (not (flattened ?item)))\n    :effect (flattened ?item)\n)",
    "(:action laid\n  :parameters (?npc - agent ?item - object)\n  :precondition (and \n                  (hard-flat-surface ?surface)\n                  (not (laid ?item))\n                )\n  :effect (and \n            (laid ?item)\n            (not (overlapping ?item))"
]