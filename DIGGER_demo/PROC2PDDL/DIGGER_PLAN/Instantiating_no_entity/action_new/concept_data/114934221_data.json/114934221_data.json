[
    "(:action defend\n  :parameters (?n - npc ?s - shark ?d - location ?sh - ship)\n  :precondition (and\n                  (at ?n ?d)\n                  (at ?s ?d)\n                  (aware-of ?n ?s)\n                  (ship_status ?sh safe)\n                 )\n  :effect (and\n           (shark_location ?s deterred)\n           (shark-retreated ?s)\n           (not (threatened ?n ?s))",
    "(:action attack ; Generalized attack action on a target in a location\n    :parameters (?attacker - agent ?target - object ?location - location)\n    :precondition (and\n                    (at ?attacker ?location)\n                    (at ?target ?location)\n                    (not (defended ?target))\n                   )\n    :effect (and\n              (attacked ?target)\n              (not (defended ?target))",
    "(:action board\n    :parameters (?n - npc ?sh - ship ?d - deep_sea ?s - shark)\n    :precondition (and\n                    (at ?n ?d)\n                    (threatened ?n ?s)\n                    (shark-retreated ?s))\n    :effect (and\n              (at ?n ?sh)\n              (not (at ?n ?d))",
    "(:action make_horizontal_bar\n    :parameters (?npc - agent ?spear_gun - weapon)\n    :precondition (and\n                    (has_weapon ?npc ?spear_gun)\n                    (weapon_ready ?spear_gun)\n                   )\n    :effect (and\n             (weapon_position ?spear_gun horizontal)\n             (ready_to_attack ?npc)\n            )",
    "(:action make ; Universal action to make or prepare a resource\n    :parameters (?npc - agent ?item - object ?state - state)\n    :precondition (and\n                    (has_resource ?npc ?item)\n                    (resource_ready ?item)\n                   )\n    :effect (and\n             (resource_state ?item ?state)\n             (ready ?npc)\n            )",
    "(:action block ; Block an entity or path to prevent access or progress\n    :parameters (?agent - entity ?target - object ?tool - resource)\n    :precondition (and\n                    (has_tool ?agent ?tool)\n                    (not (blocked ?target))\n                   )\n    :effect (and\n             (blocked ?target)\n             (alert ?target)\n            )",
    "(:action take ; Take an object and update its status\n  :parameters (?agent - entity ?target - entity ?obj - object)\n  :precondition (and \n                 (not (engaged ?agent ?target))\n                 (visible ?obj ?target)\n                )\n  :effect (and\n           (engaged ?agent ?target)\n           (targeted ?obj ?target)\n          )"
]