[
    {
        "step": [
            "Put out anime balloons. Draw anime faces on balloons. Alternately, you can call local party supply stores to see if they have any relevant balloons. A third option is to purchase anime balloons online. You can have the balloons filled with helium, or blow them up yourself and place them around.",
            "Hang paper lanterns. Buy paper lanterns, in the color of your party theme, at a party supply store or online. You can also make paper lanterns using tissue paper and bendable metal wire.",
            "Ideas for main dishes include teriyaki meat or salmon, and stir fry with chicken or beef, noodles, vegetables, and toasted sesame seed sauce."
        ],
        "task": "3-decorate",
        "goal_state": "putobjectinreceptacle agent1 scissors1",
        "steps": "```pddl\n(decorate agent1 scissors1)\n```",
        "similar_task": [
            {
                "task": "assembling-disguises",
                "step": [
                    "Find supplies for each disguise. Each of your disguises should have at least three parts, so make sure you have enough supplies for each of your characters to have a full costume!"
                ],
                "steps_predictions": [
                    "get_costume npc costume"
                ],
                "domain_file": [
                    "```lisp\n(:action get_costume\n    :parameters (?npc - npc ?c - costume)\n    :precondition (not (has-costume ?npc ?c))\n    :effect (has-costume ?npc ?c)\n)\n\n(:action get\n    :parameters (?entity - entity ?item - item)\n    :precondition (and (available ?entity) (not (has ?entity ?item)))\n    :effect (has ?entity ?item)\n)\n\n(:action clean_clothing\n    :parameters (?c - clothing)\n    :precondition (clothing-dirty ?c)\n    :effect (not (clothing-dirty ?c))\n)\n\n(:action decorate_helmet\n    :parameters (?h - helmet)\n    :precondition (helmet-plain ?h)\n    :effect (not (helmet-plain ?h))\n)\n\n(:action decorate\n    :parameters (?npc - entity ?item - object)\n    :precondition (and \n        (decoratable ?item) \n        (possesses ?npc ?item) \n        (not (decorated ?item))\n    )\n    :effect (and \n        (not (plain ?item))\n        (decorated ?item)\n    )\n)\n\n(:action make\n    :parameters (?npc - entity ?item - object ?state1 - state ?state2 - state)\n    :precondition (and \n        (has ?npc ?item) \n        (?state1 ?item) \n        (not (?state2 ?item))\n    )\n    :effect (and \n        (not (?state1 ?item)) \n        (?state2 ?item)\n    )\n)\n\n(:action make_helmet_invisible\n    :parameters (?npc - npc ?h - helmet)\n    :precondition (and \n        (has ?npc ?h) \n        (helmet-visible ?h) \n        (not (helmet-invisible ?h))\n    )\n    :effect (and \n        (not (helmet-visible ?h)) \n        (helmet-invisible ?h)\n    )\n)\n\n(:action make_clothing_clean\n    :parameters (?npc - npc ?c - clothing)\n    :precondition (and \n        (has ?npc ?c) \n        (dirty ?c) \n        (not (clean ?c))\n    )\n    :effect (and \n        (not (dirty ?c)) \n        (clean ?c)\n    )\n)\n\n(:action make_helmet_camouflaged\n    :parameters (?npc - npc ?h - helmet)\n    :precondition (and \n        (has ?npc ?h) \n        (plain ?h) \n        (not (camouflaged ?h))\n    )\n    :effect (and \n        (not (plain ?h)) \n        (camouflaged ?h)\n    )\n)\n```"
                ],
                "similar_entity": {
                    "costume": {
                        "clothing": [
                            {
                                "attribute": "cleanness",
                                "before": "dirty",
                                "after": "clean"
                            }
                        ],
                        "concept_knowledge": []
                    },
                    "npc": {
                        "helmet": [
                            {
                                "attribute": "decoration",
                                "before": "bare | plain",
                                "after": "camouflaged"
                            },
                            {
                                "attribute": "visibility",
                                "before": "visible",
                                "after": "invisible"
                            }
                        ],
                        "concept_knowledge": []
                    }
                }
            }
        ]
    },
    {
        "step": [
            "",
            "Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:"
        ],
        "task": "prepare_meat",
        "goal_state": " ((inventory animal) (cooked animal))",
        "steps": "```pddl\n(perform_task(person food tool))\n(cook(character food tool))\n```",
        "similar_task": [
            {
                "task": "catch_cook_fish",
                "step": [
                    "Heating the water above 185° F (85° C) for three minutes will kill all pathogens in your water.",
                    "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
                ],
                "steps_predictions": [
                    "hunt_path npc path",
                    "carve_groove person wood rock"
                ],
                "domain_file": [
                    "[\n  '(:action perform_task ; Perform a task involving resource interaction\\n  :parameters (?person - agent ?resource - object ?tool - tool)\\n  :precondition (and\\n                  (at ?person ?resource)\\n                  (or (and (not (salt_water ?resource)) (not (hydrated ?person))) ; For drinking tasks\\n                      (has_tool ?person ?tool)) ; For carving tasks\\n                )\\n  :effect (and\\n            (or (and (hydrated ?person) (not (thirsty ?person)))\\n                (tool_used ?tool)\\n            )\\n          )\\n)',\n\n  '(:action carve\\n  :parameters (?person - agent ?material - object ?tool - tool)\\n  :precondition (and\\n    (at ?person ?material)\\n    (at ?tool ?material)\\n    (not (carved ?material))\\n  )\\n  :effect (and\\n    (carved ?material)\\n    (material_textured ?material tacky)\\n    (tool_used ?tool)\\n  )\\n)',\n\n  '(:action check\\n    ; Check a resource and update task status\\n    :parameters (?agent - agent ?resource - object ?item - object)\\n    :precondition (and\\n                    (at ?agent ?resource)\\n                    (not (checked ?agent ?item))\\n                  )\\n    :effect (checked ?agent ?item)\\n)',\n\n  '(:action cook ; Prepare a food item using a tool\\n  :parameters (?npc - agent ?food - object ?tool - tool)\\n  :precondition (and\\n    (caught ?npc ?food)\\n    (at ?food ?tool)\\n    (not (cooked ?food))\\n  )\\n  :effect (and\\n    (cooked ?food)\\n  )\\n)',\n\n  '(:action serve ; Serve an item and update its status\\n  :parameters (?item - object ?container - container ?location - location)\\n  :precondition (and\\n    (prepared ?item)\\n    (at ?container ?location)\\n    (not (served ?item))\\n  )\\n  :effect (and\\n    (in ?item ?container)\\n    (served ?item)\\n  )\\n)'\n]"
                ],
                "similar_entity": {
                    "rock": {
                        "stone": [
                            {
                                "attribute": "choice",
                                "before": "unchosen | unselected",
                                "after": "selected"
                            },
                            {
                                "attribute": "knowledge",
                                "before": "unselected",
                                "after": "selected"
                            }
                        ],
                        "concept_knowledge": [
                            "[[rock]] is a type of [[music]]",
                            "[[stone]] is related to [[rock]]",
                            "You are likely to find [[a rock]] in [[a mountain]]",
                            "[[a rock]] can be [[heavy]]"
                        ]
                    },
                    "person": {
                        "person": [
                            {
                                "attribute": "volume",
                                "before": "silent",
                                "after": "talking"
                            },
                            {
                                "attribute": "stability",
                                "before": "unsupported",
                                "after": "supported"
                            }
                        ],
                        "concept_knowledge": [
                            "[[person]] is related to [[human]]",
                            "[[A person]] can [[cross a street]]",
                            "[[a person]] wants [[a headache]]",
                            "[[A slave]] is [[a person]]",
                            "[[a person]] doesn't want to [[be diseased]]",
                            "[[a person]] is part of [[society]]"
                        ]
                    },
                    "npc": {
                        "helmet": [
                            {
                                "attribute": "decoration",
                                "before": "bare | plain",
                                "after": "camouflaged"
                            },
                            {
                                "attribute": "visibility",
                                "before": "visible",
                                "after": "invisible"
                            }
                        ],
                        "concept_knowledge": []
                    },
                    "wood": {
                        "bare wood": [
                            {
                                "attribute": "moisture",
                                "before": "dry",
                                "after": "wet"
                            },
                            {
                                "attribute": "texture",
                                "before": "smooth",
                                "after": "tacky"
                            },
                            {
                                "attribute": "location",
                                "before": "absent",
                                "after": "present"
                            },
                            {
                                "attribute": "moisture",
                                "before": "dry",
                                "after": "wet"
                            },
                            {
                                "attribute": "color",
                                "before": "brown",
                                "after": "white"
                            },
                            {
                                "attribute": "weight",
                                "before": "lighter",
                                "after": "heavier"
                            },
                            {
                                "attribute": "moisture",
                                "before": "dry",
                                "after": "wet"
                            },
                            {
                                "attribute": "texture",
                                "before": "smooth",
                                "after": "sticky"
                            },
                            {
                                "attribute": "moisture",
                                "before": "dry",
                                "after": "wet"
                            }
                        ],
                        "concept_knowledge": [
                            "[[wood]] is related to [[tree]]",
                            "You can use [[wood]] to [[fence in a property]]",
                            "[[Wood]] can [[burn]]",
                            "[[wood]] is [[a material]]",
                            "[[Wood]] can be [[carved]]",
                            "You are likely to find [[wood]] in [[a tree]]"
                        ]
                    },
                    "path": {
                        "routes": [
                            {
                                "attribute": "coverage",
                                "before": "uncovered",
                                "after": "covered"
                            },
                            {
                                "attribute": "appearance",
                                "before": "uncovered",
                                "after": "covered"
                            },
                            {
                                "attribute": "knowledge",
                                "before": "uninvestigated",
                                "after": "investigated"
                            }
                        ],
                        "concept_knowledge": [
                            "[[road]] is related to [[path]]"
                        ]
                    }
                }
            }
        ]
    },
    {
        "step": [
            "The tension wrench is made in an “L” shape and is used to apply tension to the bottom of the lock. You can make this by getting an Allen key and filing it flat.",
            "Make your tools. For weak locks, a pair of paper clips should work; tougher locks might require bobby pins, wire clippers, and a pair of pliers. The key is to use metal firm enough for your pick and your tension wrench, the two components of the tool.",
            "Insert the pick above the wrench. Use the leg of the pick to find and push each pin up and out of the tumbler. Once all pins have been moved, the lock should open. As previously noted, this skill takes a lot of practice to master, so have plenty of cheap practice locks on hand if you hope to get good at it."
        ],
        "task": "pick_hard_lock",
        "goal_state": "pick_hard_lock keychain npc basement",
        "steps": "```\nSlideIntoSideOfDoor(agent creditcard lock)\n```",
        "similar_task": [
            {
                "task": "pick_easy_lock",
                "step": [
                    "Put the credit card into the side of the door. Slide the long end of a credit card in between the door frame and the locking side of the door, just above where the lock enters the frame."
                ],
                "steps_predictions": [
                    "slide_into_side_of_door user1 creditcard1 lock1"
                ],
                "domain_file": [
                    "[\n  '(:action push\\n    :parameters (?agent - agent ?target - object ?tool - tool)\\n    :precondition (and\\n        (has_tool ?agent ?tool)\\n        (locked ?target)\\n        (intact_state ?target)\\n    )\\n    :effect (and\\n        (tool_applied ?tool ?target)\\n        (not (intact_state ?target))\\n    )\\n)',\n  \n  '(:action hook_latch\\n    :parameters (?agent - agent ?car - vehicle ?tool - tool)\\n    :precondition (and\\n        (hanger_inside_door ?tool ?car)\\n        (has_tool ?agent ?tool)\\n        (locked ?car)\\n    )\\n    :effect (and\\n        (unlocked ?car)\\n        (not (locked ?car))\\n    )\\n)',\n  \n  '(:action hook\\n    :parameters (?agent - agent ?item - object ?tool - tool)\\n    :precondition (and\\n        (has_tool ?agent ?tool)\\n        (not (manipulated ?item))\\n    )\\n    :effect (and\\n        (manipulated ?item)\\n    )\\n)',\n  \n  '(:action straighten\\n    :parameters (?agent - agent ?object - tool)\\n    :precondition (and\\n        (has_tool ?agent ?object)\\n        (not (straight ?object))\\n        (modifiable ?object)\\n    )\\n    :effect (and\\n        (straight ?object)\\n        (not (hooked ?object))\\n    )\\n)',\n  \n  '(:action SlideIntoSideOfDoor\\n    :parameters (?agent - user ?creditcard - tool ?lock - object)\\n    :precondition (and\\n        (userHasCreditCard ?agent ?creditcard)\\n        (lockInDoor ?lock)\\n        (creditCardInHand ?agent ?creditcard)\\n        (doorLocked ?lock)\\n    )\\n    :effect (and\\n        (creditCardInDoorFrame ?creditcard ?lock)\\n        (not (creditCardInHand ?agent ?creditcard))\\n    )\\n)'\n]"
                ],
                "similar_entity": {
                    "lock": {
                        "cutting board": [
                            {
                                "attribute": "cleanness",
                                "before": "clean",
                                "after": "dirty"
                            },
                            {
                                "attribute": "moisture",
                                "before": "dry",
                                "after": "wet"
                            },
                            {
                                "attribute": "location",
                                "before": "in the knife block | in the drawer",
                                "after": "on the cutting board | cutting the velveeta"
                            }
                        ],
                        "concept_knowledge": [
                            "You are likely to find [[a lock]] in [[a door]]",
                            "[[غَلَقَ]] is a translation of [[lock]]",
                            "[[a lock]] is used for [[securing a door]]",
                            "[[safe]] is related to [[lock]]"
                        ]
                    },
                    "creditcard": {
                        "bank account": [
                            {
                                "attribute": "fullness",
                                "before": "more full",
                                "after": "more empty"
                            },
                            {
                                "attribute": "location",
                                "before": "in customer's hand",
                                "after": "in cashier's hand"
                            }
                        ],
                        "concept_knowledge": []
                    },
                    "user": {
                        "players": [
                            {
                                "attribute": "knowledge",
                                "before": "unselected",
                                "after": "selected"
                            },
                            {
                                "attribute": "knowledge",
                                "before": "unselected",
                                "after": "selected"
                            },
                            {
                                "attribute": "location",
                                "before": "away from wall",
                                "after": "against wall"
                            },
                            {
                                "attribute": "division",
                                "before": "together",
                                "after": "separated"
                            }
                        ],
                        "concept_knowledge": []
                    }
                }
            }
        ]
    },
    {
        "step": [
            "Polish the papyrus. This step isn't absolutely necessary, but it will make the papyrus look nicer and more finished. Use a shell or smooth piece of ivory. Any type of shell that is smooth and without ridges will do. Rub the shell or ivory over the sheet of paper until it appears to be shinier than it was.",
            "Flatten the sheet. The paper may not be completely flat after you remove it from the wooden boards. Put the paper under a stone slab for up to 6 days to make it completely flat.",
            "Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours."
        ],
        "task": "finishing_papyrus",
        "goal_state": "put_papyrus_in_order papyrus1",
        "steps": "```pddl\n(cut_stalks npc finishing_papyrus)\n(peel_papyrus_strips npc finishing_papyrus)\n(flatten npc ws finishing_papyrus)\n```",
        "similar_task": [
            {
                "task": "get-papyrus",
                "step": [
                    "Polish the papyrus. This step isn't absolutely necessary, but it will make the papyrus look nicer and more finished. Use a shell or smooth piece of ivory. Any type of shell that is smooth and without ridges will do. Rub the shell or ivory over the sheet of paper until it appears to be shinier than it was.",
                    "Flatten the sheet. The paper may not be completely flat after you remove it from the wooden boards. Put the paper under a stone slab for up to 6 days to make it completely flat.",
                    "Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours."
                ],
                "steps_predictions": [
                    "polish_papyrus npc papyrus",
                    "flatten_sheet npc work_station sheet",
                    "replace_sheet npc work_station papyrus"
                ],
                "domain_file": [
                    "```lisp\n['(:action replace\n    :parameters (?actor - agent ?location - place ?item - thing)\n    :precondition (and (at ?actor ?location) (not (desired_state ?item)))\n    :effect (and (desired_state ?item) (not (undesired_state ?item))))\n\n(:action lay\n    :parameters (?npc - agent ?item - object ?location - place)\n    :precondition (and\n                    (ready ?item)\n                    (at ?item ?location)\n                    (position ?item ?initial_state))\n    :effect (and\n              (position ?item ?final_state)\n              (not (position ?item ?initial_state))))\n\n(:action dip_strips\n    :parameters (?npc - agent ?s - strip)\n    :precondition (and\n                    (dry ?s)\n                    (laid_out ?s))\n    :effect (and\n              (wet ?s)\n              (soaked ?s)\n              (not (dry ?s))))\n\n(:action dip\n    :parameters (?agent - agent ?item - object)\n    :precondition (and (dry ?item) (laid_out ?item))\n    :effect (and (wet ?item) (soaked ?item) (not (dry ?item))))\n\n(:action cut_stalks\n    :parameters (?npc - agent ?p - papyrus)\n    :precondition (and (has ?npc ?p) (not (stalks_cut ?p)))\n    :effect (stalks_cut ?p))\n\n(:action peel_papyrus_strips\n    :parameters (?npc - agent ?p - papyrus)\n    :precondition (and (stalks_cut ?p) (not (strips_peeled ?p)))\n    :effect (strips_peeled ?p))\n\n(:action cut\n    :parameters (?npc - agent ?item - object ?state_before - predicate ?state_after - predicate)\n    :precondition (and (has ?npc ?item) (not (?state_after ?item)) (?state_before ?item))\n    :effect (?state_after ?item))\n\n(:action peel\n    :parameters (?npc - agent ?item - object)\n    :precondition (and \n      (available ?npc) \n      (or \n        (and (papyrus ?item) (stalks_cut ?item) (not (peeled ?item)))\n        (and (papyrus ?item) (not (polished ?item)) (has-tool ?npc ?shell))))\n    :effect (and \n      (or \n        (peeled ?item)\n        (polished ?item))))\n\n(:action flatten\n    :parameters (?npc - agent ?ws - work_station ?item - object)\n    :precondition (and (not (flattened ?item)) (at ?npc ?ws) (has-tool ?ws))\n    :effect (flattened ?item))\n\n(:action laid\n    :parameters (?npc - agent ?item - object)\n    :precondition (and\n                    (dry ?item)\n                    (on_ground ?item))\n    :effect (and\n              (laid_out ?item)\n              (not (on_ground ?item))))\n]\n```"
                ],
                "similar_entity": {
                    "papyrus": {
                        "sponge": [
                            {
                                "attribute": "moisture",
                                "before": "dry",
                                "after": "wet"
                            },
                            {
                                "attribute": "location",
                                "before": "on ground",
                                "after": "in bucket"
                            },
                            {
                                "attribute": "wetness",
                                "before": "dry | clean",
                                "after": "wet | dirty | dirtier"
                            },
                            {
                                "attribute": "cleanness",
                                "before": "clean",
                                "after": "dirty"
                            }
                        ],
                        "concept_knowledge": []
                    },
                    "sheet": {
                        "paper": [
                            {
                                "attribute": "texture",
                                "before": "flat | straight",
                                "after": "crumpled"
                            },
                            {
                                "attribute": "shape",
                                "before": "whole",
                                "after": "pierced with hanger"
                            },
                            {
                                "attribute": "orientation",
                                "before": "bunched on hanger",
                                "after": "spread out on hanger"
                            },
                            {
                                "attribute": "shape",
                                "before": "straighter",
                                "after": "scruched"
                            }
                        ],
                        "concept_knowledge": [
                            "[[paper]] is related to [[sheet]]",
                            "[[sheet]] is for [[covering bed]]",
                            "You are likely to find [[a sheet]] in [[a linen closet]]",
                            "[[Lençol]] is a translation of [[sheet]]"
                        ]
                    },
                    "work station": {
                        "kids room": [
                            {
                                "attribute": "availability",
                                "before": "unmade | non-existent",
                                "after": "created"
                            }
                        ],
                        "concept_knowledge": []
                    },
                    "npc": {
                        "helmet": [
                            {
                                "attribute": "decoration",
                                "before": "bare | plain",
                                "after": "camouflaged"
                            },
                            {
                                "attribute": "visibility",
                                "before": "visible",
                                "after": "invisible"
                            }
                        ],
                        "concept_knowledge": []
                    }
                }
            }
        ]
    },
    {
        "step": [
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods."
        ],
        "task": "gather_kindling",
        "goal_state": " ((inventory agent grass_tinder))",
        "steps": "```pddl\n1. collect(agent grass_tinder)\n2. search(agent area)\n3. collect(agent twigs)\n4. collect(agent branches)\n5. place_sticks_in_formation(agent)\n```",
        "similar_task": [
            {
                "task": "start_a_fire",
                "step": [
                    "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
                    "Use dry sticks, branches, or tree bark to serve as your kindling.",
                    "Avoid using too much energy. It may be difficult for you to find adequate food and water if you're lost in the woods. Try not to sweat or use too much energy by doing things like running around and screaming for help if you're by yourself. Conserve as much energy as you can for doing things like building shelter, fire, and searching for water.",
                    "Search for a dry, flat area between 2 trees with splits in their trunks. Look around the area to find a relatively flat area with a tree that has a trunk that splits about 3–5 feet (0.91–1.52 m) off of the ground. If possible, try to find 2 trees that have a split in their trunks about 3–5 feet (0.91–1.52 m) off of the ground and are about 10 feet (3.0 m) apart from each other.",
                    "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
                ],
                "steps_predictions": [
                    "start_fire npc camp teepee_structure",
                    "cook npc camp teepee_structure campfire",
                    "build_shelter npc camp teepee_structure",
                    "search_area area2",
                    "build_teepee npc camp teepee_structure"
                ],
                "domain_file": [
                    "```lisp\n['(:action collect\n  ; Collect an item and prepare it for use\n  :parameters (?agent - agent ?item - object)\n  :precondition (and (available ?agent) (not (collected ?item)))\n  :effect (and (collected ?item) (prepared ?item))',\n\n '(:action place_sticks_in_formation\n  :parameters (?s - stick)\n  :precondition (bundled ?s)\n  :effect (in_formation ?s))',\n\n '(:action build_shelter\n  :parameters (?component - object)\n  :precondition (available ?component)\n  :effect (part_of_shelter ?component))',\n\n '(:action place\n  :parameters (?entity - object ?location - place)\n  :precondition (and (prepared ?entity) (not (placed ?entity ?location)))\n  :effect (placed ?entity ?location))',\n\n '(:action build\n  ; Universal build action\n  :parameters (?npc - agent ?location - place ?structure - structure ?materials - set)\n  :precondition (and\n                  (available ?npc)\n                  (has_materials ?npc ?materials)\n                  (not (built ?structure))\n                )\n  :effect (built ?structure))',\n\n '(:action gather\n  :parameters (?npc - agent ?resource - resource ?area - area)\n  :precondition (and\n    (available ?resource)\n    (selected_area ?area)\n    (not (has ?npc ?resource))\n  )\n  :effect (and\n    (collected ?resource)\n    (has ?npc ?resource)))',\n\n '(:action search\n  ; Search and gather resources or information\n  :parameters (?agent - agent ?target - object)\n  :precondition (and (not (searched ?agent ?target)))\n  :effect (searched ?agent ?target))',\n\n '(:action start\n  :parameters (?npc - agent ?location - place ?structure - object ?resource - object ?task - task)\n  :precondition (and \n    (available ?npc)\n    (in ?npc ?location)\n    (built ?structure ?location)\n    (has ?npc ?resource)\n    (not (started ?task ?location))\n  )\n  :effect (started ?task ?location))']\n```"
                ],
                "similar_entity": {
                    "camp": {
                        "room": [
                            {
                                "attribute": "sound",
                                "before": "quiet",
                                "after": "noisier"
                            }
                        ],
                        "concept_knowledge": [
                            "[[camp]] is related to [[tent]]",
                            "[[Camp de réfugiés]] is a translation of [[camp]]"
                        ]
                    },
                    "area": {
                        "area": [
                            {
                                "attribute": "knowledge",
                                "before": "unselected",
                                "after": "selected"
                            }
                        ],
                        "concept_knowledge": [
                            "[[garden]] is related to [[area]]"
                        ]
                    },
                    "npc": {
                        "helmet": [
                            {
                                "attribute": "decoration",
                                "before": "bare | plain",
                                "after": "camouflaged"
                            },
                            {
                                "attribute": "visibility",
                                "before": "visible",
                                "after": "invisible"
                            }
                        ],
                        "concept_knowledge": []
                    },
                    "campfire": {
                        "fire stone": [
                            {
                                "attribute": "step",
                                "before": "unfound",
                                "after": "found"
                            },
                            {
                                "attribute": "availability",
                                "before": "on ground",
                                "after": "in inventory"
                            }
                        ],
                        "concept_knowledge": [
                            "[[Feu de camp]] is a translation of [[campfire]]"
                        ]
                    },
                    "teepee structure": {
                        "wreath base": [
                            {
                                "attribute": "step",
                                "before": "unknown",
                                "after": "chosen"
                            }
                        ],
                        "concept_knowledge": []
                    }
                }
            }
        ]
    },
    {
        "step": [
            "Weave the strips together. Lay the strips on the cloth. Get a dry sheet of linen cloth or felt. Then, begin to weave them together. You want to create 2 layers of strips, with the top layer strips being perpendicular to the bottom layer strips. It should resemble a placemat. The strips should slightly overlap one another to prevent the papyrus from falling apart later.",
            "Cut the paper. The sheet may be larger than you want when it is finished. Use a razor, scissors, or paper cutter to cut the papyrus into smaller sheets. Measure the sizes you are cutting so you will have multiple sheets of the same size.",
            "Roll the excess water and sugar out of the plant. Grab a rolling pin and use it to roll the strips flat. The rolling pin should be squeezing the water out of them and flattening the strips into sheets.",
            "Cut up the inner portion into strips. Use the knife you used to cut off the outer portion to cut the inner layers of the papyrus plant (pith) into thin strips. Hold the plant in your hand and cut towards you vertically. Make sure that all of the strips have the same size and thickness.",
            "Cut the stalks. About 12 inches (30 cm) of papyrus plant will make a large piece of paper that will be nearly 24 inches (61 cm) in length. Cut off as many stalks as you will need to make the amount of paper you want. The cuts must be diagonally made. Then, cut the tips of the papyrus. You will not use the tips, which are the thinner, grass-like end of the plant.",
            "Place the bundle between 2 wooden boards. Make sure that the wooden boards are somewhat heavy. The pressure is necessary to flatten the papyrus strips together. Once the strips have been placed between the boards, press them together. Lay the sandwiched papyrus sheet on a flat surface and allow the wooden boards to flatten the sheet using gravity."
        ],
        "task": "make_papyrus",
        "goal_state": "make_papyrus papyrus",
        "steps": "```pddl\n(buy_papyrus npc papyrus)\n(make npc resource river)\n```",
        "similar_task": [
            {
                "task": "get_papyrus_plant",
                "step": [
                    "Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however.",
                    "You can also make the paper out of wide grasses, like river reeds."
                ],
                "steps_predictions": [
                    "buy_papyrus npc papyrus",
                    "make_river_reeds npc papyrus riverside"
                ],
                "domain_file": [
                    "```lisp\n(:action collect\n    :parameters (?item - object ?l - location)\n    :precondition (and\n      (at ?item ?l)\n      (not (collected ?item))\n    )\n    :effect (and\n      (collected ?item)\n      (not (at ?item ?l))\n    )\n)\n\n(:action buy_papyrus\n    :parameters (?npc - agent ?p - papyrus)\n    :precondition (and \n      (not (obtained ?p)) \n      (not (knowledge ?p))\n    )\n    :effect (and \n      (obtained ?p) \n      (knowledge ?p)\n    )\n)\n\n(:action buy\n    :parameters (?npc - agent ?item - object)\n    :precondition (and \n      (not (obtained ?item)) \n      (not (knowledge ?item))\n    )\n    :effect (and \n      (obtained ?item) \n      (knowledge ?item)\n    )\n)\n\n(:action make\n    :parameters (?npc - agent ?resource - object ?location - place)\n    :precondition (and \n      (obtained ?resource) \n      (not (knowledge ?location)) \n      (not (made ?resource))\n    )\n    :effect (and \n      (knowledge ?location) \n      (made ?resource)\n    )\n)\n```"
                ],
                "similar_entity": {
                    "papyrus": {
                        "sponge": [
                            {
                                "attribute": "moisture",
                                "before": "dry",
                                "after": "wet"
                            },
                            {
                                "attribute": "location",
                                "before": "on ground",
                                "after": "in bucket"
                            },
                            {
                                "attribute": "wetness",
                                "before": "dry | clean",
                                "after": "wet | dirty | dirtier"
                            },
                            {
                                "attribute": "cleanness",
                                "before": "clean",
                                "after": "dirty"
                            }
                        ],
                        "concept_knowledge": []
                    },
                    "riverside": {
                        "area": [
                            {
                                "attribute": "knowledge",
                                "before": "unselected",
                                "after": "selected"
                            }
                        ],
                        "concept_knowledge": []
                    },
                    "npc": {
                        "helmet": [
                            {
                                "attribute": "decoration",
                                "before": "bare | plain",
                                "after": "camouflaged"
                            },
                            {
                                "attribute": "visibility",
                                "before": "visible",
                                "after": "invisible"
                            }
                        ],
                        "concept_knowledge": []
                    }
                }
            }
        ]
    },
    {
        "step": [
            "Make sure to stock your hide-out with canned food, dried goods, non-perishable foods, and bottled water.",
            "Move into a bunker or fortified structure and outfit it with an energy source. An underground bunker isn’t only the best for the time of impact; it will also protect you from environmental hazards after the comet has hit. When the comet hits, dust, soot, and water will shoot up into our atmosphere, making it cold for months to years.",
            "Buy weapons and ammunition for after the impact. You may be more concerned with withstanding the destruction of the comet impact itself, but you also need to be conscious of the possible dangers of other people after the dust settles.",
            "Purchase enough food, water, medicine, and other supplies. If the comet does hit on land, dust and rock particles flying into our atmosphere will make it too dangerous to go outside for months to years.",
            "Limit your generator usage and only use it if necessary. Your generator will be a lifesaver for many things while you are in your bunker. You can use it to produce heat, cook food, and power lights. However, because most generators run on fuel, it’s important that you limit its usage because you will likely have a limited amount of fuel in your bunker. If you aren't in a bunker, a generator may still work, but there's a good chance that the main power grid will be down.",
            "A semi-automatic rifle and a pistol with enough ammunition should be more than enough firepower."
        ],
        "task": "move_to_bunker",
        "goal_state": "gotolocation agent bunker2 npc",
        "steps": "```pddl\nget_shelter(npc bunker2 basement)\n```",
        "similar_task": [
            {
                "task": "find-shelter",
                "step": [
                    "Find a strong, brick building with a basement for shelter. These buildings types can withstand the most damage and remain standing. Look especially for a building with a basement. This provides added protection and a hiding place if you have to stay out of sight. Search your area for suitable buildings like these and move into one as soon as possible."
                ],
                "steps_predictions": [
                    "get_shelter npc brickhouse basement"
                ],
                "domain_file": [
                    "[\n  '(:action get_shelter\\n    :parameters (?npc - person ?building - building ?basement - basement)\\n    :precondition (and\\n                    (strong_building ?building)\\n                    (has_basement ?building ?basement)\\n                    (safe_location ?building))\\n    :effect (and\\n              (in_shelter ?npc ?building)\\n              (protected ?npc)\\n              (hidden ?npc)))',\n\n  '(:action clean_house\\n    :parameters (?cleaner - person ?house - building)\\n    :precondition (and\\n                    (assigned_cleaner ?cleaner ?house)\\n                    (dirty ?house))\\n    :effect (and\\n              (clean ?house)\\n              (satisfied ?cleaner)))',\n\n  '(:action get\\n    :parameters (?entity - object ?resource - object)\\n    :precondition (and\\n                    (not (obtained ?entity ?resource))\\n                    (available ?resource))\\n    :effect (and\\n              (obtained ?entity ?resource)\\n              (processed ?resource ?entity)))',\n\n  '(:action clean\\n  :parameters (?entity - object)\\n  :precondition (and \\n                  (messy ?entity)\\n                  (dusty ?entity))\\n  :effect (and \\n            (not (messy ?entity))\\n            (not (dusty ?entity))))',\n\n  '(:action cover\\n    :parameters (?entity - object ?material - material)\\n    :precondition (and\\n                    (in_location ?material ?entity)\\n                    (not (covered ?entity)))\\n    :effect (and\\n              (covered ?entity)\\n              (secure ?entity)))',\n\n  '(:action camouflage\\n  :parameters (?npc - person ?item - object ?location - place)\\n  :precondition (and\\n                  (at ?npc ?location)\\n                  (usable ?item)\\n                  (not (camouflaged ?item))\\n                  (not (hidden ?npc)))\\n  :effect (and\\n            (camouflaged ?item)\\n            (hidden ?npc)))',\n\n  '(:action drink\\n    :parameters (?npc - person ?liquid - object)\\n    :precondition (and (purified ?liquid) (not (hydrated ?npc)))\\n    :effect (hydrated ?npc))',\n\n  '(:action learn\\n    :parameters (?npc - person ?item - object)\\n    :precondition (has ?npc ?item)\\n    :effect (learned ?npc ?item))',\n\n  '(:action build\\n  :parameters (?npc - person ?resource - object ?item - object)\\n  :precondition (and\\n    (has_skill ?npc)\\n    (has_resource ?resource)\\n    (not (built ?item)))\\n  :effect (and\\n    (built ?item)\\n    (not (has_resource ?resource))))'\n]"
                ],
                "similar_entity": {
                    "brickhouse": {
                        "house": [
                            {
                                "attribute": "messiness",
                                "before": "messy",
                                "after": "clean"
                            },
                            {
                                "attribute": "messiness",
                                "before": "dusty",
                                "after": "clean"
                            },
                            {
                                "attribute": "cleanness",
                                "before": "dusty | clean",
                                "after": "dusted | dusty"
                            },
                            {
                                "attribute": "cleanness",
                                "before": "dirty",
                                "after": "clean"
                            }
                        ],
                        "concept_knowledge": []
                    },
                    "basement": {
                        "drop cloth": [
                            {
                                "attribute": "availability",
                                "before": "absent",
                                "after": "present"
                            },
                            {
                                "attribute": "coverage",
                                "before": "uncovered",
                                "after": "covered"
                            },
                            {
                                "attribute": "location",
                                "before": "present",
                                "after": "removed"
                            }
                        ],
                        "concept_knowledge": [
                            "*Something you find in [[the basement]] is [[the furnace]]",
                            "[[cellar]] is related to [[basement]]",
                            "[[a house]] has [[a basement]]",
                            "[[A basement]] is [[a room under a house]]",
                            "[[Something you find downstairs]] is the [[basement]]"
                        ]
                    },
                    "npc": {
                        "helmet": [
                            {
                                "attribute": "decoration",
                                "before": "bare | plain",
                                "after": "camouflaged"
                            },
                            {
                                "attribute": "visibility",
                                "before": "visible",
                                "after": "invisible"
                            }
                        ],
                        "concept_knowledge": []
                    }
                }
            }
        ]
    },
    {
        "step": [
            "An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.",
            "Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.",
            "Think of a name. You and your closest friend should discuss what your secret society should be called.",
            "Create a secret or a secret mission. A secret society must have something to protect.",
            "Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were."
        ],
        "task": "ready_sc",
        "goal_state": " ((not (in anish ss)))",
        "steps": "```pddl\n(check agent electricity ready_sc)\n(get agent electricity socket)\n```",
        "similar_task": [
            {
                "task": "collect-water",
                "step": [
                    "Shelter in place and wait for the initial chaos to subside. If all of the electronics suddenly stop working, the immediate loss of electricity will cause a lot of sudden confusion and chaos. If you aren’t home, wait 30-45 minutes for all of the abrupt danger to pass. Then, go home if you’re within a few miles or kilometers. If you’re already home, stay there and do not go outside.",
                    "Eat anything in your fridge first to minimize food shortages. For the first 1-2 days, eat whatever is in your fridge and hasn’t gone bad immediately. Save the dry stuff for later when you may really need it. The odds are low society will completely collapse and you’ll go without help for super long, but it’s still better to go through everything that’s going to go bad anyway."
                ],
                "steps_predictions": [
                    "fill bathtub bathroom npc",
                    "get_water npc water"
                ],
                "domain_file": [
                    "```lisp\n(:action fill\n    :parameters (?entity - object ?npc - person ?location - place)\n    :precondition (and\n                    (at_location ?entity ?location)\n                    (not (filled ?entity))\n                    (available ?npc))\n    :effect (and\n              (filled ?entity)\n              (not (empty ?entity))))\n\n(:action get\n    :parameters (?agent - object ?resource - object ?location - place)\n    :precondition (and (at_location ?agent ?location) (available ?resource ?location))\n    :effect (and (possess ?agent ?resource) (not (available ?resource ?location))))\n\n(:action check\n    :parameters (?agent - object ?resource - object ?context - context)\n    :precondition (and\n                    (available ?agent)\n                    (not (checked ?agent ?resource))\n                    (in_context ?agent ?context))\n    :effect (and\n             (checked ?agent ?resource)\n             (updated_status ?resource)\n             (learned_functionality ?agent ?resource)))\n```"
                ],
                "similar_entity": {
                    "bathtub": {
                        "the towels": [
                            {
                                "attribute": "size",
                                "before": "larger | wider",
                                "after": "smaller | narrower"
                            },
                            {
                                "attribute": "shape",
                                "before": "straight | flat",
                                "after": "folded | now folded"
                            },
                            {
                                "attribute": "power",
                                "before": "relaxed",
                                "after": "being used"
                            },
                            {
                                "attribute": "emptiness",
                                "before": "empty",
                                "after": "holding towel"
                            },
                            {
                                "attribute": "size",
                                "before": "thinner | longer",
                                "after": "thicker | shorter"
                            },
                            {
                                "attribute": "height",
                                "before": "low",
                                "after": "higher"
                            },
                            {
                                "attribute": "location",
                                "before": "laundry room | outside | out",
                                "after": "in linen closet | in closet"
                            },
                            {
                                "attribute": "emptiness",
                                "before": "empty",
                                "after": "full"
                            },
                            {
                                "attribute": "location",
                                "before": "in closet",
                                "after": "on rack | on towel rack"
                            },
                            {
                                "attribute": "shape",
                                "before": "folded",
                                "after": "hanging | unfolded"
                            },
                            {
                                "attribute": "openness",
                                "before": "closed",
                                "after": "opened"
                            },
                            {
                                "attribute": "emptiness",
                                "before": "empty",
                                "after": "full"
                            }
                        ],
                        "concept_knowledge": [
                            "[[A bathtub]] is for [[bathing]]",
                            "Something you need to do before you [[have a bath]] is [[a bathtub]]"
                        ]
                    },
                    "bathroom": {
                        "sink": [
                            {
                                "attribute": "volume",
                                "before": "empty",
                                "after": "full of macaroni"
                            },
                            {
                                "attribute": "location",
                                "before": "on counter top",
                                "after": "under faucet"
                            },
                            {
                                "attribute": "cleanness",
                                "before": "clean | cleaner",
                                "after": "dirty | dirtier"
                            },
                            {
                                "attribute": "wetness",
                                "before": "drier",
                                "after": "wetter"
                            }
                        ],
                        "concept_knowledge": [
                            "You are likely to find [[a toilet]] in [[a bathroom]]",
                            "[[a bathroom]] is [[room]]",
                            "[[a bathroom]] is used for [[taking a bath]]"
                        ]
                    },
                    "water": {
                        "boiling pot": [
                            {
                                "attribute": "temperature",
                                "before": "cold",
                                "after": "hote"
                            },
                            {
                                "attribute": "fullness",
                                "before": "emptier",
                                "after": "fuller"
                            },
                            {
                                "attribute": "location",
                                "before": "in pipes",
                                "after": "out of faucet"
                            }
                        ],
                        "concept_knowledge": [
                            "You are likely to find [[a fish]] in [[water]].",
                            "[[river]] is related to [[water]]",
                            "[[rain]] is [[water]]",
                            "You can use [[water]] to [[drink]]",
                            "[[Water]] is [[liquid]]"
                        ]
                    },
                    "npc": {
                        "helmet": [
                            {
                                "attribute": "decoration",
                                "before": "bare | plain",
                                "after": "camouflaged"
                            },
                            {
                                "attribute": "visibility",
                                "before": "visible",
                                "after": "invisible"
                            }
                        ],
                        "concept_knowledge": []
                    }
                }
            }
        ]
    },
    {
        "step": [
            "Loot supplies if you have no other choice. Unfortunately, people sometimes have to do desperate things to survive. If you come across supplies or stores that no one is watching or look abandoned, then take everything you need. This might be ethically wrong, but you and your family have to survive.",
            "Purify any water you drink that isn’t from a sealed bottle. A waterborne illness can be life-threatening in a survival situation. If need to use any unbottled water for drinking, always purify it first. The most common method is boiling the water for 1 minute to kill any pathogens. Then filter out larger objects by pouring the water through a fine net or cloth.",
            "Eat as healthy as you can. This isn’t always possible and you have to survive on whatever food you can find. But if at all possible, keep your health up with nutritious food. A steady supply of vitamins, minerals, antioxidants, and fatty acids will help keep your immune system up and fight off sickness."
        ],
        "task": "heal-old-man",
        "goal_state": " ((not (is_injured old_man)))",
        "steps": "```\nwrap(papyrus supply wrapper)\nwrap(finishing_papyrus supply wrapper)\n```",
        "similar_task": [
            {
                "task": "get_coconut_juice",
                "step": [
                    "Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef’s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.",
                    "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it."
                ],
                "steps_predictions": [
                    "peel npc",
                    "drain npc rack"
                ],
                "domain_file": [
                    "```pddl\n[\n  '(:action process_coconut\n    :parameters (?p - person ?c - coconut ?t - tool ?r - rack ?g - glass)\n    :precondition (and \n                    (available ?p)\n                    (on ?c ?r)\n                    (not (drained ?c))\n                    (or (wrapped ?c) (has_casing ?c) (broken ?c))\n                    (or (knife ?t) (sharp ?t) (tool ?t))\n                    (empty ?g)\n                  )\n    :effect (and \n              (peeled ?c)\n              (not (wrapped ?c))\n            )\n  )',\n  '(:action wrap\n    :parameters (?p - person ?item - object ?wrapper - object)\n    :precondition (and\n                    (not (wrapped ?item))\n                    (clean ?wrapper)\n                  )\n    :effect (and\n              (wrapped ?item)\n              (not (clean ?wrapper))\n            )\n  )',\n  '(:action break\n    :parameters (?p - person ?obj - object ?tool - tool)\n    :precondition (and \n                    (not (broken ?obj))\n                    (in_hand ?tool)\n                  )\n    :effect (and \n              (broken ?obj)\n              (not (wrapped ?obj))\n            )\n  )'\n]\n```"
                ],
                "similar_entity": {
                    "rack": {
                        "the towels": [
                            {
                                "attribute": "size",
                                "before": "larger | wider",
                                "after": "smaller | narrower"
                            },
                            {
                                "attribute": "shape",
                                "before": "straight | flat",
                                "after": "folded | now folded"
                            },
                            {
                                "attribute": "power",
                                "before": "relaxed",
                                "after": "being used"
                            },
                            {
                                "attribute": "emptiness",
                                "before": "empty",
                                "after": "holding towel"
                            },
                            {
                                "attribute": "size",
                                "before": "thinner | longer",
                                "after": "thicker | shorter"
                            },
                            {
                                "attribute": "height",
                                "before": "low",
                                "after": "higher"
                            },
                            {
                                "attribute": "location",
                                "before": "laundry room | outside | out",
                                "after": "in linen closet | in closet"
                            },
                            {
                                "attribute": "emptiness",
                                "before": "empty",
                                "after": "full"
                            },
                            {
                                "attribute": "location",
                                "before": "in closet",
                                "after": "on rack | on towel rack"
                            },
                            {
                                "attribute": "shape",
                                "before": "folded",
                                "after": "hanging | unfolded"
                            },
                            {
                                "attribute": "openness",
                                "before": "closed",
                                "after": "opened"
                            },
                            {
                                "attribute": "emptiness",
                                "before": "empty",
                                "after": "full"
                            }
                        ],
                        "concept_knowledge": []
                    },
                    "npc": {
                        "helmet": [
                            {
                                "attribute": "decoration",
                                "before": "bare | plain",
                                "after": "camouflaged"
                            },
                            {
                                "attribute": "visibility",
                                "before": "visible",
                                "after": "invisible"
                            }
                        ],
                        "concept_knowledge": []
                    }
                }
            }
        ]
    }
]