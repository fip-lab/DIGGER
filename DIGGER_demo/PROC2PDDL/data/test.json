[
    {
        "task": "3-decorate",
        "step": [
            "go south npc bedroom closet",
            "get lantern npc closet",
            "get balloon npc closet",
            "go north npc closet bedroom",
            "go west npc bedroom livingroom",
            "turn_on_tv npc livingroom",
            "hang_lantern npc",
            "blow_balloon npc"
        ],
        "desc": [
            "Put out anime balloons. Draw anime faces on balloons. Alternately, you can call local party supply stores to see if they have any relevant balloons. A third option is to purchase anime balloons online. You can have the balloons filled with helium, or blow them up yourself and place them around.",
            "Hang paper lanterns. Buy paper lanterns, in the color of your party theme, at a party supply store or online. You can also make paper lanterns using tissue paper and bendable metal wire.",
            "Ideas for main dishes include teriyaki meat or salmon, and stir fry with chicken or beef, noodles, vegetables, and toasted sesame seed sauce."
        ],
        "action": [
            "(:action get_beer\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_fridge ?l) (at ?p ?l))\n    :effect (and (inventory ?p beer) (opened beer))\n  )",
            "(:action hang_lantern\n    :parameters (?p - player)\n    :precondition (and (inventory ?p lantern))\n    :effect (and (hung lantern) (not (inventory ?p lantern)))\n  )",
            "(:action blow_balloon\n    :parameters (?p - player)\n    :precondition (and (inventory ?p balloon))\n    :effect (and (inflated balloon) (not (inventory ?p balloon)))\n  )",
            "(:action turn_on_tv\n    :parameters (?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at tv ?l))\n    :effect (on tv)\n  )\n)",
            "(:action get\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at ?obj ?l))\n    :effect (and (inventory ?p ?obj) (not (at ?obj ?l)))\n  )",
            "(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )"
        ],
        "goal_state": "((on tv) (inflated balloon) (hung lantern))"
    },
    {
        "task": "prepare_meat",
        "step": [
            "go north npc beach root_of_tree",
            "go north npc root_of_tree jungle",
            "go east npc jungle hills",
            "get sharp_stone npc hills",
            "go west npc hills jungle",
            "hunt_animal npc jungle sharp_stone animal",
            "prepare_animal npc jungle sharp_stone animal"
        ],
        "desc": [
            "",
            "Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:"
        ],
        "action": [
            "(:action hunt_animal ; hunt animals with a sharp stone.\n      :parameters (?p - player ?loc - location ?s - sharp_stone ?a - animal) \n      :precondition (and (at ?p ?loc) (at ?a ?loc) (inventory ?p ?s))\n      :effect (and (inventory ?p ?a) (not (treated ?a)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action prepare_animal ; prepare animals with a sharp stone before eating it.\n      :parameters (?p - player ?loc - location ?s - sharp_stone ?a - animal) \n      :precondition (and (at ?p ?loc) (inventory ?p ?s) (inventory ?p ?a))\n      :effect (and (treated ?a))\n   )"
        ],
        "goal_state": "((inventory npc animal) (treated animal))"
    },
    {
        "task": "pick_hard_lock",
        "step": [
            "go east npc living_room office",
            "go east npc office kitchen",
            "go down npc kitchen garage",
            "get file npc garage",
            "get allen_key npc garage",
            "go up npc garage kitchen",
            "go west npc kitchen office",
            "get paper_clip npc office",
            "go west npc office living_room",
            "go up npc living_room hallway",
            "go east npc hallway bathroom",
            "go east npc bathroom bedroom",
            "file_key_into_wrench npc",
            "insert_wrench npc bedroom",
            "bend_paperclip_into_pick npc",
            "insert_pick npc bedroom",
            "push_pins_out_of_tumblers npc bedroom"
        ],
        "desc": [
            "The tension wrench is made in an “L” shape and is used to apply tension to the bottom of the lock. You can make this by getting an Allen key and filing it flat.",
            "Make your tools. For weak locks, a pair of paper clips should work; tougher locks might require bobby pins, wire clippers, and a pair of pliers. The key is to use metal firm enough for your pick and your tension wrench, the two components of the tool.",
            "Insert the pick above the wrench. Use the leg of the pick to find and push each pin up and out of the tumbler. Once all pins have been moved, the lock should open. As previously noted, this skill takes a lot of practice to master, so have plenty of cheap practice locks on hand if you hope to get good at it."
        ],
        "action": [
            "(:action bend_paperclip_into_pick  ; bend paperclip into pick \n      :parameters (?p - player) \n      :precondition (and (inventory ?p paper_clip)) \n      :effect (and (not (inventory ?p paper_clip)) (inventory ?p pick)) \n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action push_pins_out_of_tumblers ; pick lock with wrench and pick\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_hard_lock ?loc) (wrench_in_lock ?loc) (pick_in_lock ?loc))\n      :effect (not (has_hard_lock ?loc))\n   )",
            "(:action file_key_into_wrench ; make wrench from allen key\n      :parameters (?p - player) \n      :precondition (and (inventory ?p allen_key) (inventory ?p file)) \n      :effect (and (not (inventory ?p allen_key)) (inventory ?p wrench)) \n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action insert_wrench ; insert wrench \n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_hard_lock ?loc) (inventory ?p wrench)) \n      :effect (and (wrench_in_lock ?loc))\n   )",
            "(:action insert_pick ; insert pick\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_hard_lock ?loc) (inventory ?p pick) (wrench_in_lock ?loc)) \n      :effect (and (pick_in_lock ?loc))\n   )"
        ],
        "goal_state": "((not (has_hard_lock bedroom)))"
    },
    {
        "task": "finishing_papyrus",
        "step": [
            "go north npc kitchen cabinet",
            "get roller npc cabinet",
            "go south npc cabinet kitchen",
            "get scissors npc kitchen",
            "get papyrus npc kitchen",
            "go south npc kitchen living_room",
            "get smooth_stone npc living_room",
            "polish_papyrus npc papyrus",
            "cut_paprus npc papyrus scissors",
            "flatten_papyrus npc papyrus roller"
        ],
        "desc": [
            "Polish the papyrus. This step isn't absolutely necessary, but it will make the papyrus look nicer and more finished. Use a shell or smooth piece of ivory. Any type of shell that is smooth and without ridges will do. Rub the shell or ivory over the sheet of paper until it appears to be shinier than it was.",
            "Flatten the sheet. The paper may not be completely flat after you remove it from the wooden boards. Put the paper under a stone slab for up to 6 days to make it completely flat.",
            "Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours."
        ],
        "action": [
            "(:action polish_papyrus ; Use a stone to polish the papyrus.\n      :parameters (?p - player ?pap - papyrus) \n      :precondition (and (inventory ?p ?pap) (inventory ?p smooth_stone))\n      :effect  (polished ?pap)\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action flatten_papyrus ; Use a roller to make the papyrus flat.\n      :parameters (?p - player ?pap - papyrus ?r - roller) \n      :precondition (and (inventory ?p ?pap) (inventory ?p ?r))\n      :effect  (flattened ?pap)\n   )"
        ],
        "goal_state": "((cut papyrus) (polished papyrus) (flattened papyrus))"
    },
    {
        "task": "gather_kindling",
        "step": [
            "go west npc camp path",
            "go north npc path grassland",
            "go north npc grassland bush",
            "break_branch npc bush branch_piece",
            "get branch_piece npc bush"
        ],
        "desc": [
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods."
        ],
        "action": [
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )",
            "(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )"
        ],
        "goal_state": "((inventory npc branch_piece))"
    },
    {
        "task": "make_papyrus",
        "step": [
            "cut_stalks npc knife papyrus_plant papyrus_stalks",
            "cut_strips npc papyrus_strips papyrus_stalks knife",
            "soak_strips npc water papyrus_strips",
            "roll_strips npc rolling_pin papyrus_strips",
            "weave_strips npc papyrus_strips",
            "bundle_strips npc papyrus_strips wooden_boards linen_sheets",
            "cut_sheet npc papyrus_strips knife papyrus"
        ],
        "desc": [
            "Weave the strips together. Lay the strips on the cloth. Get a dry sheet of linen cloth or felt. Then, begin to weave them together. You want to create 2 layers of strips, with the top layer strips being perpendicular to the bottom layer strips. It should resemble a placemat. The strips should slightly overlap one another to prevent the papyrus from falling apart later.",
            "Cut the paper. The sheet may be larger than you want when it is finished. Use a razor, scissors, or paper cutter to cut the papyrus into smaller sheets. Measure the sizes you are cutting so you will have multiple sheets of the same size.",
            "Roll the excess water and sugar out of the plant. Grab a rolling pin and use it to roll the strips flat. The rolling pin should be squeezing the water out of them and flattening the strips into sheets.",
            "Cut up the inner portion into strips. Use the knife you used to cut off the outer portion to cut the inner layers of the papyrus plant (pith) into thin strips. Hold the plant in your hand and cut towards you vertically. Make sure that all of the strips have the same size and thickness.",
            "Cut the stalks. About 12 inches (30 cm) of papyrus plant will make a large piece of paper that will be nearly 24 inches (61 cm) in length. Cut off as many stalks as you will need to make the amount of paper you want. The cuts must be diagonally made. Then, cut the tips of the papyrus. You will not use the tips, which are the thinner, grass-like end of the plant.",
            "Place the bundle between 2 wooden boards. Make sure that the wooden boards are somewhat heavy. The pressure is necessary to flatten the papyrus strips together. Once the strips have been placed between the boards, press them together. Lay the sandwiched papyrus sheet on a flat surface and allow the wooden boards to flatten the sheet using gravity."
        ],
        "action": [
            "(:action cut_sheet; the finished sheet is cut to size to complete the papyrus\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?knife - knife ?papyrus - papyrus)\n    :precondition (and (inventory ?p ?papyrus_strips) (finished ?papyrus_strips) (inventory ?p ?knife))\n    :effect (and (inventory ?p ?papyrus) (not (inventory ?p ?papyrus_strips)))\n  )\n)",
            "(:action weave_strips; weave the dried papyrus strips into a lattice\n    :parameters (?p - player ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?papyrus_strips) (dried ?papyrus_strips))\n    :effect (woven ?papyrus_strips)\n  )",
            "(:action bundle_strips; bundle the woven strips between linen sheets and wooden boards\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?wooden_boards - wooden_boards ?linen_sheets - linen_sheets)\n    :precondition (and (inventory ?p ?papyrus_strips) (woven ?papyrus_strips) (inventory ?p ?wooden_boards) (inventory ?p ?linen_sheets))\n    :effect (finished ?papyrus_strips)\n  )",
            "(:action soak_strips; place papyrus strips in water and let them soak\n    :parameters (?p - player ?water - water ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?water) (inventory ?p ?papyrus_strips))\n    :effect (soaked ?papyrus_strips)\n  )",
            "(:action cut_stalks; cut papyrus plant into stalks\n    :parameters (?p - player ?knife - knife ?papyrus_plant - papyrus_plant ?papyrus_stalks - papyrus_stalks)\n    :precondition (and (inventory ?p ?knife) (inventory ?p ?papyrus_plant))\n    :effect (and (inventory ?p ?papyrus_stalks) (not (inventory ?p ?papyrus_plant)))\n  )",
            "(:action cut_strips; cut papyrus stalks into strips\n    :parameters (?p - player ?papyrus_strips - papyrus_strips ?papyrus_stalks - papyrus_stalks ?knife - knife)\n    :precondition (and (inventory ?p ?knife) (inventory ?p ?papyrus_stalks))\n    :effect (and (inventory ?p ?papyrus_strips) (not (inventory ?p ?papyrus_stalks)))\n  )",
            "(:action roll_strips; roll the excess water and sugar out of the strips to dry them\n    :parameters (?p - player ?rolling_pin - rolling_pin ?papyrus_strips - papyrus_strips)\n    :precondition (and (inventory ?p ?rolling_pin) (inventory ?p ?papyrus_strips) (soaked ?papyrus_strips))\n    :effect (dried ?papyrus_strips)\n  )"
        ],
        "goal_state": "((inventory npc papyrus))"
    },
    {
        "task": "move_to_bunker",
        "step": [
            "go west npc home market",
            "buy_supplies food npc market",
            "buy_supplies medicine npc market",
            "buy_supplies water npc market",
            "check_supplies food water medicine",
            "go west npc market weapon_market",
            "buy_weapons ammunition npc weapon_market",
            "buy_weapons pistol npc weapon_market",
            "go east npc weapon_market market",
            "buy_supplies heat npc market",
            "go east npc market home",
            "go north npc home bunker1",
            "go north npc bunker1 bunker2",
            "check_weapons pistol ammunition",
            "check_bunker bunker2 npc",
            "outfit_bunker_with_energy_source bunker2 npc heat"
        ],
        "desc": [
            "Make sure to stock your hide-out with canned food, dried goods, non-perishable foods, and bottled water.",
            "Move into a bunker or fortified structure and outfit it with an energy source. An underground bunker isn’t only the best for the time of impact; it will also protect you from environmental hazards after the comet has hit. When the comet hits, dust, soot, and water will shoot up into our atmosphere, making it cold for months to years.",
            "Buy weapons and ammunition for after the impact. You may be more concerned with withstanding the destruction of the comet impact itself, but you also need to be conscious of the possible dangers of other people after the dust settles.",
            "Purchase enough food, water, medicine, and other supplies. If the comet does hit on land, dust and rock particles flying into our atmosphere will make it too dangerous to go outside for months to years.",
            "Limit your generator usage and only use it if necessary. Your generator will be a lifesaver for many things while you are in your bunker. You can use it to produce heat, cook food, and power lights. However, because most generators run on fuel, it’s important that you limit its usage because you will likely have a limited amount of fuel in your bunker. If you aren't in a bunker, a generator may still work, but there's a good chance that the main power grid will be down.",
            "A semi-automatic rifle and a pistol with enough ammunition should be more than enough firepower."
        ],
        "action": [
            "(:action buy_supplies ; buy supplies and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - market) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?item))\n   )",
            "(:action check_weapons ; check enough supplies in the inventory\n      :parameters (?ps - pistol ?am - ammunition) \n      :precondition (and (inventory ?ps) (inventory ?am))\n      :effect (and (enough_weapons))\n   )",
            "(:action buy_weapons ; buy weapons and put it in the inventory (after buy_supplies)\n      :parameters (?wp - weapon ?p - player ?l1 - weapon_market) \n      :precondition (and (at ?p ?l1) (at ?wp ?l1) (enough_supplies))\n      :effect (and (inventory ?wp))\n   )",
            "(:action check_bunker ; check if the bunker is good for sheiding\n      :parameters (?bk - bunker ?p - player) \n      :precondition (and (at ?p ?bk) (enough_supplies) (enough_weapons) (has_air_filtration_system ?bk) (has_strong_material ?bk))\n      :effect (and (find_good_bunker ?bk))\n   )",
            "(:action outfit_bunker_with_energy_source ; outfit your bunker with an energy source for heat\n      :parameters (?bk - bunker ?p - player ?es - energy_source) \n      :precondition (and (at ?p ?bk) (find_good_bunker ?bk) (inventory ?es))\n      :effect (and (outfit_bunker_with_heat ?bk))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action check_supplies ; check enough supplies in the inventory\n      :parameters (?fd - food ?wt - water ?md - medicine) \n      :precondition (and (inventory ?fd) (inventory ?wt) (inventory ?md))\n      :effect (and (enough_supplies))\n   )"
        ],
        "goal_state": "((outfit_bunker_with_heat bunker2) (enough_weapons) (enough_supplies))"
    },
    {
        "task": "ready_sc",
        "step": [
            "gather_info npc ss",
            "create_secret npc ss",
            "create_name npc ss",
            "set_meeting_location npc ss",
            "set_dress_code npc ss",
            "secret_society_is_ready npc ss"
        ],
        "desc": [
            "An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.",
            "Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.",
            "Think of a name. You and your closest friend should discuss what your secret society should be called.",
            "Create a secret or a secret mission. A secret society must have something to protect.",
            "Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were."
        ],
        "action": [
            "(:action set_meeting_location ; determine a regular secret meeting location for the society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_location ?sc)))\n      :effect (and (has_location ?sc))\n   )",
            "(:action gather_info ; read books to gather information on how to create a secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (has_info ?p)))\n      :effect (and (has_info ?p))\n   )",
            "(:action create_secret ; create secret for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_secret ?sc)))\n      :effect (and (has_secret ?sc) (knows_secret ?p ?sc))\n   )",
            "(:action set_dress_code ; determines the dress code for the secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_dress_code ?sc)))\n      :effect (and (has_dress_code ?sc))\n   )",
            "(:action create_name ; create name for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_name ?sc)))\n      :effect (and (has_name ?sc))\n   )",
            "(:action secret_society_is_ready ; check that all prequisites of the secret society are complete\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (not (society_is_ready ?sc)) (has_name ?sc) (has_dress_code ?sc) (has_location ?sc) (has_info ?p) (has_secret ?sc))\n      :effect (and (society_is_ready ?sc))\n   )"
        ],
        "goal_state": "((society_is_ready ss))"
    },
    {
        "task": "heal-old-man",
        "step": [
            "go north npc parkinglot park",
            "go south npc park church",
            "get npc church pot",
            "go north npc church park",
            "collect_rain_water npc park pot water",
            "go east npc park store",
            "get npc store bandage",
            "boil_water npc brickhouse water pot",
            "clean_others_wound npc old_man water bandage"
        ],
        "desc": [
            "Loot supplies if you have no other choice. Unfortunately, people sometimes have to do desperate things to survive. If you come across supplies or stores that no one is watching or look abandoned, then take everything you need. This might be ethically wrong, but you and your family have to survive.",
            "Purify any water you drink that isn’t from a sealed bottle. A waterborne illness can be life-threatening in a survival situation. If need to use any unbottled water for drinking, always purify it first. The most common method is boiling the water for 1 minute to kill any pathogens. Then filter out larger objects by pouring the water through a fine net or cloth.",
            "Eat as healthy as you can. This isn’t always possible and you have to survive on whatever food you can find. But if at all possible, keep your health up with nutritious food. A steady supply of vitamins, minerals, antioxidants, and fatty acids will help keep your immune system up and fight off sickness."
        ],
        "action": [
            "(:action gofish \n      :parameters (?p - player ?l - location ?fp - fishingpole ?f - fish)\n      :precondition (and (at ?p ?l) (inventory ?p ?fp) (haslake ?l) (at ?f ?l))\n      :effect (and (gettable ?f) )\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action boil_water ; boil water that has not been treated.\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot) \n      :precondition (and (inventory ?p ?water) (inventory ?p ?pot) (not (treated ?water)))\n      :effect (and (treated ?water))\n   )",
            "(:action get\n      :parameters (?p - player ?l - location ?i - item)\n      :precondition (and (at ?p ?l) (at ?i ?l) (gettable ?i))\n      :effect (and (not (at ?i ?l)) (inventory ?p ?i))\n   )",
            "(:action clean_others_wound ; heal injury.\n      :parameters (?p - player ?p_inj - player ?water - water ?bandage - bandage) \n      :precondition (and (inventory ?p ?water) (treated ?water) (inventory ?p ?bandage) (is_injured ?p_inj))\n      :effect (and (not (is_injured ?p_inj)) (not (inventory ?p ?water)) (not (inventory ?p ?bandage)) )\n   )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action barter_food_for_healing ; get food in exchange for healing.\n      :parameters (?p - player ?p_inj - player ?water - water ?bandage - bandage ?food - food ?l -location) \n      :precondition (and (inventory ?p ?water) (inventory ?p ?bandage) (is_injured ?p_inj) (at ?p ?l) (at ?p_inj ?l))\n      :effect (and (not (is_injured ?p_inj)) (gettable ?food)  )\n   )\n\n   \n)",
            "(:action break_car_window ; steal food from car.\n      :parameters (?p - player ?car - car ?rock - rock ?item - item) \n      :precondition (and (at ?p ?car) (inventory ?p ?rock) (has_windows ?car) (at ?item ?car))\n      :effect (and (gettable ?item) (not (inventory ?p ?rock)) (not (has_windows ?car)))\n   )",
            "(:action collect_rain_water ; collect rain water to be treated.\n      :parameters (?p - player ?loc - location ?pot - pot ?water - water) \n      :precondition (and (inventory ?p ?pot) (at ?p ?loc) (outdoors ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )"
        ],
        "goal_state": "((not (is_injured old_man)))"
    }
]