[
    {
        "task": "pick_car_lock",
        "step": [
            "go up npc living_room hallway",
            "go east npc hallway bathroom",
            "go east npc bathroom bedroom",
            "get coathanger npc bedroom",
            "go west npc bedroom bathroom",
            "go west npc bathroom hallway",
            "go down npc hallway living_room",
            "go east npc living_room office",
            "go east npc office kitchen",
            "go down npc kitchen garage",
            "go out npc garage car",
            "straighten_coathanger npc",
            "insert_hanger npc car",
            "hook_latch npc car",
            "pull_coathanger npc car"
        ],
        "desc": [
            "Lift the weather stripping from the bottom of the driver's-side window. Push the end of the hanger in through the soft rubber weather stripping and the bottom of the window. The hanger is now inside the wall of the door.",
            "Hook and pull the latch. Hook the hanger around the latch and pull it towards the rear of the car. This should unlock any manually locked car door.",
            "Unravel and straighten the coat hanger. You can leave the hooked top section alone, but unwind it from itself at the “neck” and straighten the rest of the hanger out, giving you a long metal tool with a hooked tip."
        ],
        "action": [
            "(:action hook_latch ;    hook onto car latch  \n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (locked_car ?loc) (coathanger_inserted ?loc) (inventory ?p straightened_coathanger)) \n      :effect (and (latch_hooked ?loc))\n   )",
            "(:action insert_hanger ;    insert hanger \n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (locked_car ?loc) (inventory ?p straightened_coathanger)) \n      :effect (and (coathanger_inserted ?loc))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action straighten_coathanger ; straighten coathanger\n      :parameters (?p - player) \n      :precondition (and (inventory ?p coathanger)) \n      :effect (and (not (inventory ?p coathanger)) (inventory ?p straightened_coathanger)) \n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action pull_coathanger ;  unlock the car\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (locked_car ?loc) (coathanger_inserted ?loc) (inventory ?p straightened_coathanger) (latch_hooked ?loc)) \n      :effect (not (locked_car ?loc))\n   )\n\n)"
        ],
        "goal_state": "((not (locked_car car)))"
    },
    {
        "task": "safe_in_cave",
        "step": [
            "go east npc camp path",
            "go east npc path riverside",
            "go north npc riverside rainforest",
            "get_wood npc wood rainforest",
            "get_foliage npc foliage rainforest",
            "go east npc rainforest cave",
            "make_drill npc wood drill",
            "build_shelter npc wood foliage cave",
            "make_fire npc drill cave",
            "make_spear npc spear wood",
            "survive npc spear cave"
        ],
        "desc": [
            "Place shorter sticks and branches against the sides of the center pole. Line the length of the middle stick with branches going outward towards the ground at a 45-degree angle. The more sticks you can find to place along the sides, the easier it will be to cover your shelter.",
            "If you don’t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.",
            "Think about where you came from if you got lost on foot. Orient yourself using any landmarks you remember, such as a hill in the distance or a river. Get back to a point you remember to find the trail again or head back in the direction of a village that you came from.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "Make a 4-pronged bamboo spear to fish with. Find a 6-ft (1.8 m) stalk of bamboo and cut 4- 6 in (15.24 cm) slits into 1 end of it with a knife or sharp rock. Weave a piece of vine into the slits to separate the tip of the bamboo into 4 prongs and sharpen them with a knife or a sharp rock.",
            "The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.",
            "Cover the sides with leaves and foliage to cover the lean-to shelter. Find large leaves and lay them over top of the frame you built. Cover the shelter as well as you can to protect you from the elements and keep animals out."
        ],
        "action": [
            "(:action survive ; live safely in the shelter with weapon and fire on\n      :parameters (?p - player ?spear - spear ?loc - location) \n      :precondition (and (at ?p ?loc) (has_shelter ?loc) (has_fire ?loc) (inventory ?p ?spear) (not (safe ?p ?loc)))\n      :effect (and (safe ?p ?loc))\n   )\n)",
            "(:action build_shelter ; build a shelter using wood and foliage\n      :parameters (?p - player ?wood - wood ?foliage - foliage ?loc - location) \n      :precondition (and (at ?p ?loc) (inventory ?p ?wood) (inventory ?p ?foliage) (not (has_shelter ?loc)))\n      :effect (and (has_shelter ?loc))\n   )",
            "(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )",
            "(:action make_spear ; make a spear using wood to catch fish or defend against predators\n      :parameters (?p - player ?spear - spear ?wood - wood) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?spear)))\n      :effect (and (inventory ?p ?spear))\n   )",
            "(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )",
            "(:action get_foliage ; get foliage from a location that has trees\n      :parameters (?p - player ?foliage - foliage ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?foliage)))\n      :effect (and (inventory ?p ?foliage))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ],
        "goal_state": "((safe npc cave))"
    },
    {
        "task": "get_papyrus_plant",
        "step": [
            "travel npc home river",
            "search_location npc river",
            "pluck_river_reeds npc papyrus_plant river",
            "travel npc river home"
        ],
        "desc": [
            "Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however.",
            "You can also make the paper out of wide grasses, like river reeds."
        ],
        "action": [
            "(:action search_location; search location\n    :parameters (?p - player ?l - location)\n    :precondition (at ?p ?l)\n    :effect (searched ?l)\n  )",
            "(:action pluck_river_reeds; obtain the papyrus plant\n    :parameters (?p - player ?papyrus_plant - papyrus_plant ?l - location)\n    :precondition (and (searched ?l) (at ?papyrus_plant ?l) (at ?p ?l))\n    :effect (inventory ?p ?papyrus_plant)\n  )",
            "(:action travel ; travel from one location to another\n    :parameters (?p - player ?l1 - location ?l2 - location)\n    :precondition (at ?p ?l1)\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )"
        ],
        "goal_state": "((at npc home) (inventory npc papyrus_plant))"
    },
    {
        "task": "eat_fish",
        "step": [
            "go east npc camp path",
            "go east npc path riverside",
            "go north npc riverside rainforest",
            "get_wood npc wood rainforest",
            "go south npc rainforest riverside",
            "make_spear npc spear wood",
            "make_drill npc wood drill",
            "catch_fish npc spear fish riverside",
            "make_fire npc drill riverside",
            "cook_fish npc fish riverside",
            "eat_fish npc fish"
        ],
        "desc": [
            "If you don’t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "Make a 4-pronged bamboo spear to fish with. Find a 6-ft (1.8 m) stalk of bamboo and cut 4- 6 in (15.24 cm) slits into 1 end of it with a knife or sharp rock. Weave a piece of vine into the slits to separate the tip of the bamboo into 4 prongs and sharpen them with a knife or a sharp rock.",
            "The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.",
            "Build simple hole-in-the-ground traps to catch animals. Dig a hole in the ground and cover it with something like a large leaf. Put a piece of fruit in the middle as bait. When an animal comes to take the fruit, they will fall in the hole and you can kill it, skin it, and cook it to eat it."
        ],
        "action": [
            "(:action cook_fish ; grill fish using fire\n      :parameters (?p - player ?fish - fish ?loc - location) \n      :precondition (and (inventory ?p ?fish) (at ?p ?loc) (has_fire ?loc) (not (cooked ?fish)))\n      :effect (and (cooked ?fish))\n   )",
            "(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )",
            "(:action make_spear ; make a spear using wood to catch fish or defend against predators\n      :parameters (?p - player ?spear - spear ?wood - wood) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?spear)))\n      :effect (and (inventory ?p ?spear))\n   )",
            "(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )",
            "(:action eat_fish ; eat cooked fish \n      :parameters (?p - player ?fish - fish) \n      :precondition (and (inventory ?p ?fish) (cooked ?fish))\n      :effect (and (not (hungry ?p)))\n   )",
            "(:action catch_fish ; catch a fish using spear\n      :parameters (?p - player ?spear - spear ?fish - fish ?loc - location) \n      :precondition (and (at ?p ?loc) (inventory ?p ?spear) (has_fish ?loc) (not (inventory ?p ?fish)))\n      :effect (and (inventory ?p ?fish))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ],
        "goal_state": "((not (hungry npc)))"
    },
    {
        "task": "hunger",
        "step": [
            "go east npc basecamp jungle",
            "pick_fruit npc jungle",
            "eat_fruit npc"
        ],
        "desc": [
            "Look for fruits and plants that you recognize and are safe to eat. Jungles are full of tropical fruits and edible plants if you know what to look for. Don’t try eating any plants that you don’t recognize because they could be poisonous.",
            "Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container."
        ],
        "action": [
            "(:action pick_fruit\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (has_fruit ?loc))\n      :effect (inventory ?p fruit)\n   )",
            "(:action eat_fruit\n      :parameters (?p - player)\n      :precondition (and (is hungry ?p) (inventory ?p fruit))\n      :effect (and (not (inventory ?p fruit)) (not (is hungry ?p)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ],
        "goal_state": "((not (is hungry npc)))"
    },
    {
        "task": "defend_position",
        "step": [
            "splash_swim in npc open_sea shallow_sea shark",
            "defend npc shark"
        ],
        "desc": [
            "Do not take your eyes off the shark.",
            "Sharks have several different attack methods. Sometimes they swim right up and charge, sometimes they circle for a while before lunging, and sometimes they sneak up from behind for a surprise attack. To be able to defend against the shark, you must know where it is, so make every effort to watch the animal, even as you are working out your escape."
        ],
        "action": [
            "(:action defend ; defend yourself\n      :parameters (?p - player ?s - shark) \n      :precondition (and (attacked ?p ?s))\n      :effect (and (not (attacked ?p ?s)) (wounded ?p) (defending ?p))\n   )",
            "(:action splash_swim ; swim with loud sounds - you don't get to monitor the shark!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)) (attacked ?p ?s))\n   )",
            "(:action swim ; swim normally till you reach safety!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (attacked ?p ?s)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)))\n   )"
        ],
        "goal_state": "((defending npc))"
    },
    {
        "task": "poke_eyes",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver"
        ],
        "desc": [
            "Poke a hole in the “eye” of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or “eyes” at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it’s bored through the shell), remove it by wiggling it out, widening the new hole in the process."
        ],
        "action": [
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )"
        ],
        "goal_state": "((has_eyes_poked coconut))"
    },
    {
        "task": "clean_water",
        "step": [
            "go west person beach ocean",
            "get rock person ocean",
            "go east person ocean beach",
            "get tinder person beach",
            "go east person beach jungle",
            "chop_wood person jungle wood",
            "go east person jungle river",
            "carve_groove person wood rock",
            "get_water person river water",
            "light_fire person wood beach tinder fire",
            "clean_water person beach water fire",
            "drink_water person water"
        ],
        "desc": [
            "Do not drink salt water from the ocean because it will dehydrate you.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island.",
            "Check for water at the base of leaves or cacti, inside of caves, hollowed trees, or undercut banks."
        ],
        "action": [
            "(:action carve_groove ; create a grove in wood to light flint.\n      :parameters (?p - player ?wood - wood ?rock - rock) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?rock) (not (groove ?wood)))\n      :effect (and (groove ?wood))\n   )",
            "(:action light_fire ; light a fire\n      :parameters (?p - player ?wood - wood ?loc - location ?tinder - tinder ?fire - fire) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?tinder) (can_light_fire ?loc) (groove ?wood))\n      :effect (and (at ?fire ?loc) (not (inventory ?wood)) (not (groove ?wood)))\n   )",
            "(:action drink_water ; drink water\n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (treated ?water))\n      :effect (and (drank ?water))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action clean_water ; boil water to clean it\n      :parameters (?p - player ?loc - location ?water - water ?fire - fire) \n      :precondition (and (inventory ?p ?water) (at ?fire ?loc))\n      :effect (and (treated ?water))\n   )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action chop_wood ; chop down wood from a nearby tree.\n      :parameters (?p - player ?loc - location ?wood - wood) \n      :precondition (and (at ?p ?loc) (has_wood ?loc))\n      :effect (and (inventory ?p ?wood) (not (groove ?wood)))\n   )"
        ],
        "goal_state": "((drank water))"
    },
    {
        "task": "create_cult",
        "step": [
            "gather_info npc ss",
            "set_dress_code npc ss",
            "set_meeting_location npc ss",
            "create_name npc ss",
            "create_secret npc ss",
            "secret_society_is_ready npc ss",
            "initiate_new_member npc adrian ss",
            "initiate_new_member adrian lara ss",
            "initiate_new_member adrian liam ss",
            "teach_new_member_secret npc adrian ss",
            "teach_new_member_secret adrian lara ss",
            "teach_new_member_secret adrian liam ss",
            "check_if_cult adrian lara liam npc ss"
        ],
        "desc": [
            "Conduct a proper initiation for you and your closest friend. This should be done before you initiate others. That way, you are sure to come up with a good idea. The initiation is one of the most important parts of the society. It has to be something neither of you would do normally. Candle-lighting sets a serious and official tone, which is always good. Secret names are fun to have.",
            "An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.",
            "Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.",
            "Initiate well to do people in the society. In a school, initiate the most brilliant and enthusiastic students that seem like clique-material, and they will motivate and inspire others. But you don't want to have too many members. The more members, the less secret it is. Five to ten should be good.",
            "Think of a name. You and your closest friend should discuss what your secret society should be called.",
            "Create a secret or a secret mission. A secret society must have something to protect.",
            "Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were."
        ],
        "action": [
            "(:action set_meeting_location ; determine a regular secret meeting location for the society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_location ?sc)))\n      :effect (and (has_location ?sc))\n   )",
            "(:action gather_info ; read books to gather information on how to create a secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (has_info ?p)))\n      :effect (and (has_info ?p))\n   )",
            "(:action create_secret ; create secret for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_secret ?sc)))\n      :effect (and (has_secret ?sc) (knows_secret ?p ?sc))\n   )",
            "(:action check_if_cult ; check if the group is large enough for a cult\n      :parameters (?p1 - player ?p2 - player ?p3 - player ?p4 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (not (equals ?p1 ?p2)) (not (equals ?p1 ?p3)) (not (equals ?p1 ?p4)) (not (equals ?p2 ?p3)) (not (equals ?p2 ?p4)) (not (equals ?p3 ?p4)) (in ?p1 ?sc) (in ?p2 ?sc) (in ?p3 ?sc) (in ?p4 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (is_trusted ?p3 ?sc) (is_trusted ?p4 ?sc) (knows_secret ?p1 ?sc) (knows_secret ?p2 ?sc) (knows_secret ?p3 ?sc) (knows_secret ?p4 ?sc))\n      :effect (and (is_cult ?sc))\n   )\n)",
            "(:action initiate_new_member ; add a new member to secret society\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (in ?p1 ?sc) (is_trusted ?p2 ?sc) (friends ?p1 ?p2) (not (in ?p2 ?sc)))\n      :effect (and (in ?p2 ?sc))\n   )",
            "(:action teach_new_member_secret ; once a new member becomes trustworthy, teach them the secret\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (in ?p1 ?sc) (in ?p2 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (knows_secret ?p1 ?sc) (not (knows_secret ?p2 ?sc)))\n      :effect (and (knows_secret ?p2 ?sc))\n   )",
            "(:action set_dress_code ; determines the dress code for the secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_dress_code ?sc)))\n      :effect (and (has_dress_code ?sc))\n   )",
            "(:action create_name ; create name for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_name ?sc)))\n      :effect (and (has_name ?sc))\n   )",
            "(:action secret_society_is_ready ; check that all prequisites of the secret society are complete\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (not (society_is_ready ?sc)) (has_name ?sc) (has_dress_code ?sc) (has_location ?sc) (has_info ?p) (has_secret ?sc))\n      :effect (and (society_is_ready ?sc))\n   )"
        ],
        "goal_state": "((is_cult ss))"
    },
    {
        "task": "board_ship",
        "step": [
            "splash_swim out npc open_sea deep_sea shark",
            "spot_ship npc deep_sea ship",
            "onboard npc ship deep_sea"
        ],
        "desc": [
            "Sharks have several different attack methods. Sometimes they swim right up and charge, sometimes they circle for a while before lunging, and sometimes they sneak up from behind for a surprise attack. To be able to defend against the shark, you must know where it is, so make every effort to watch the animal, even as you are working out your escape.",
            "Hit the shark in the face and gills.Your best bet, if attacked, is to make the shark see you as a strong, credible threat. Usually, a hard blow to the shark's gills, eyes or snout (end of its nose) will cause it to retreat."
        ],
        "action": [
            "(:action onboard ; get on to the ship\n      :parameters (?p - player ?shp - ship ?loc - location) \n      :precondition (and (at ?p ?loc) (at ?shp ?loc) (visible ?shp))\n      :effect (and (on ?p ?shp))\n   )",
            "(:action spot_ship ; spot ships that are nearby\n      :parameters (?p - player ?loc - location ?shp - ship) \n      :precondition (and (at ?p ?loc) (at ?shp ?loc))\n      :effect (and (visible ?shp))\n   )",
            "(:action splash_swim ; swim with loud sounds - you don't get to monitor the shark!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)) (attacked ?p ?s))\n   )",
            "(:action swim ; swim normally till you reach safety!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (attacked ?p ?s)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)))\n   )"
        ],
        "goal_state": "((on npc ship))"
    },
    {
        "task": "eat_plants",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff waterfall",
            "get_water npc waterfall water",
            "go east npc waterfall mountain",
            "get flowers npc mountain",
            "wash flowers npc water",
            "eat flowers npc"
        ],
        "desc": [
            "Search for a source of fresh water.",
            "Pick wild edible berries to eat. If you happen to come by an identifiable berry bush, definitely take advantage. Never consume any berries that you cannot positively identify as many are toxic. To be safe, stick to eating berries that you recognize like blackberries, raspberries, and wild strawberries."
        ],
        "action": [
            "(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )",
            "(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ],
        "goal_state": "((not (hungry npc)))"
    },
    {
        "task": "create_shelter",
        "step": [
            "go north npc beach root_of_tree",
            "go up npc root_of_tree top_of_tree",
            "get leaves npc top_of_tree",
            "go down npc top_of_tree root_of_tree",
            "go north npc root_of_tree jungle",
            "get small_sticks npc jungle",
            "get log npc jungle",
            "go south npc jungle root_of_tree",
            "build_wall npc root_of_tree small_sticks wall",
            "build_roof npc root_of_tree log roof",
            "build_bed npc root_of_tree leaves bed",
            "complete_shelter npc root_of_tree roof wall bed shelter"
        ],
        "desc": [
            ""
        ],
        "action": [
            "(:action build_roof ; build roof with log.\n      :parameters (?p - player ?loc - location ?i - log ?r - roof) \n      :precondition (and (at ?p ?loc) (inventory ?p ?i) (not (at ?r ?loc)))\n      :effect (and (at ?r ?loc) (not (inventory ?p ?i)))\n   )",
            "(:action complete_shelter ; complete shelter with roof, wall and bed.\n      :parameters (?p - player ?loc - location ?r - roof ?w - wall ?b - bed ?s - shelter) \n      :precondition (and (at ?p ?loc) (at ?b ?loc) (at ?r ?loc) (at ?w ?loc) (at ?b ?loc))\n      :effect (and (at ?s ?loc))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action build_wall ; build wall with small sticks.\n      :parameters (?p - player ?loc - location ?i - small_sticks ?w - wall) \n      :precondition (and (at ?p ?loc) (inventory ?p ?i) (not (at ?w ?loc)))\n      :effect (and (at ?w ?loc) (not (inventory ?p ?i)))\n   )",
            "(:action build_bed ; build bed with leaves.\n      :parameters (?p - player ?loc - location ?i - leaves ?b - bed) \n      :precondition (and (at ?p ?loc) (inventory ?p ?i) (not (at ?b ?loc)))\n      :effect (and (at ?b ?loc) (not (inventory ?p ?i)))\n   )"
        ],
        "goal_state": "((at shelter root_of_tree))"
    },
    {
        "task": "build_raft",
        "step": [
            "go north npc beach root_of_tree",
            "go north npc root_of_tree jungle",
            "go east npc jungle hills",
            "get vines npc hills",
            "go west npc hills jungle",
            "get log npc jungle",
            "go south npc jungle root_of_tree",
            "go south npc root_of_tree beach",
            "build_raft npc log vines raft_draft",
            "test_raft npc beach raft_draft raft_finished"
        ],
        "desc": [
            "Create a rescue signal. If you hope to be rescued, it's a good idea to leave rescuers with a signal. The signal you create will help search parties find your location and get you home more quickly than you would otherwise. You might try making some of these rescue signals to make you more visible:"
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action test_raft ; test a raft before riding it.\n      :parameters (?p - player ?loc - location ?rd - raft_draft ?rf - raft_finished) \n      :precondition (and (at ?p ?loc) (haswater ?loc) (inventory ?p ?rd))\n      :effect (and (inventory ?p ?rf))\n   )\n\n\n\n)",
            "(:action build_raft ; build a raft.\n      :parameters (?p - player ?l - log ?v - vines ?r - raft_draft) \n      :precondition (and (inventory ?p ?l) (inventory ?p ?v))\n      :effect (and (inventory ?p ?r))\n   )"
        ],
        "goal_state": "((inventory npc raft_finished))"
    },
    {
        "task": "get-home",
        "step": [
            "wait npc",
            "go east npc work backroads",
            "go south npc backroads school",
            "get kids school npc",
            "go west npc school home",
            "go down npc home basement",
            "drop kids basement npc"
        ],
        "desc": [
            "If you’re outside during a nuclear blast, cover your mouth and nose with a cloth or mask to avoid breathing in toxic particles."
        ],
        "action": [
            "(:action drop\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (inventory ?p ?it) (at ?p ?l))\n      :effect (and (not (inventory ?p ?it)) (at ?it ?l))\n   )",
            "(:action wait\n      :parameters (?p - player)\n      :precondition (not (at ?p home))\n      :effect (and (not (blocked work east backroads)) (not (blocked school north backroads)) \n              (not (blocked school west home)) (not (blocked home east school)))\n   )",
            "(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ],
        "goal_state": "((at npc basement) (at kids basement))"
    },
    {
        "task": "build_a_shelter",
        "step": [
            "go west npc camp path",
            "build_shelter npc path twigs_leaves long_branch propped_branches"
        ],
        "desc": [
            "Lean branches against the main branch to form the structure of your shelter. Gather a bunch of branches that are long enough to be propped up against the main branch of your shelter. Think about forming ribs with the branches. Try to keep them as close together as you can."
        ],
        "action": [
            "(:action build_shelter ; built shelter\n      :parameters (?p - player ?loc - location ?twigs_leaves - twigs_leaves ?long_branch - long_branch ?propped_branches - propped_branches)\n      :precondition (and (at ?p ?loc) (has_twigs_leaves ?loc) (has_branches ?loc) (has_branches ?loc))\n      :effect (and (has_shelter ?p))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ],
        "goal_state": "((has_shelter npc))"
    },
    {
        "task": "drink_water",
        "step": [
            "get container npc camp",
            "go east npc camp path",
            "go east npc path riverside",
            "collect_water npc container water riverside",
            "go north npc riverside rainforest",
            "get_wood npc wood rainforest",
            "make_drill npc wood drill",
            "make_fire npc drill rainforest",
            "filter_water npc water",
            "boil_water npc water rainforest",
            "drink_water npc water"
        ],
        "desc": [
            "The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.",
            "If you don’t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.",
            "Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick."
        ],
        "action": [
            "(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )",
            "(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action boil_water ; boil water to kill any bacteria\n      :parameters (?p - player ?water - water ?loc - location) \n      :precondition (and (inventory ?p ?water) (at ?p ?loc) (filtered ?water) (not (boiled ?water)) (has_fire ?loc))\n      :effect (and (boiled ?water))\n   )",
            "(:action collect_water ; use container to collect water from a location that has water\n      :parameters (?p - player ?container - container ?water - water ?loc - location) \n      :precondition (and (at ?p ?loc) (has_water ?loc) (inventory ?p ?container) (not (inventory ?p ?water)))\n      :effect (and (inventory ?p ?water) (not (filtered ?water)) (not (boiled ?water)))\n   )",
            "(:action get_foliage ; get foliage from a location that has trees\n      :parameters (?p - player ?foliage - foliage ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?foliage)))\n      :effect (and (inventory ?p ?foliage))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action filter_water ; filter water to remove any particles\n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (not (filtered ?water)))\n      :effect (and (filtered ?water))\n   )",
            "(:action drink_water ; drink boiled water \n      :parameters (?p - player ?water - water) \n      :precondition (and (inventory ?p ?water) (boiled ?water))\n      :effect (and (not (thirsty ?p)))\n   )"
        ],
        "goal_state": "((not (thirsty npc)))"
    },
    {
        "task": "find_tinder",
        "step": [
            "go west npc camp path",
            "go north npc path grassland",
            "get grass npc grassland",
            "cluster_grass npc grass grass_tinder"
        ],
        "desc": [
            "Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods."
        ],
        "action": [
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )"
        ],
        "goal_state": "((inventory npc grass_tinder))"
    },
    {
        "task": "assembling-disguises",
        "step": [
            "go west npc house bus_stop",
            "go north npc bus_stop costume_store",
            "get_costume npc costume_store costume"
        ],
        "desc": [
            "Find supplies for each disguise. Each of your disguises should have at least three parts, so make sure you have enough supplies for each of your characters to have a full costume!"
        ],
        "action": [
            "(:action get_costume ; get costume from a store.\n      :parameters (?p - player ?loc - location ?costume - costume) \n      :precondition (and (at ?p ?loc) (sells_costume ?loc))\n      :effect (and (inventory ?p ?costume))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ],
        "goal_state": "((inventory npc costume))"
    },
    {
        "task": "start_a_fire",
        "step": [
            "go west npc camp path",
            "get_dry_materials npc path dry_materials",
            "get_twigs_leaves npc path twigs_leaves",
            "get_logs npc path logs",
            "build_teepee npc path dry_materials twigs_leaves teepee",
            "start_fire npc path teepee logs"
        ],
        "desc": [
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Use dry sticks, branches, or tree bark to serve as your kindling.",
            "Avoid using too much energy. It may be difficult for you to find adequate food and water if you're lost in the woods. Try not to sweat or use too much energy by doing things like running around and screaming for help if you're by yourself. Conserve as much energy as you can for doing things like building shelter, fire, and searching for water.",
            "Search for a dry, flat area between 2 trees with splits in their trunks. Look around the area to find a relatively flat area with a tree that has a trunk that splits about 3–5 feet (0.91–1.52 m) off of the ground. If possible, try to find 2 trees that have a split in their trunks about 3–5 feet (0.91–1.52 m) off of the ground and are about 10 feet (3.0 m) apart from each other.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action get_twigs_leaves ; get twigs and leaves\n      :parameters (?p - player ?loc - location ?twigs_leaves - twigs_leaves)\n      :precondition (and (at ?p ?loc) (has_twigs_leaves ?loc))\n      :effect (and (inventory ?p ?twigs_leaves))\n   )",
            "(:action build_teepee ; build teepee structure\n      :parameters (?p - player ?loc - location ?dry_materials - dry_materials ?twigs_leaves - twigs_leaves ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (inventory ?p ?dry_materials) (inventory ?p ?twigs_leaves))\n      :effect (and (inventory ?p ?teepee))\n   )",
            "(:action get_logs ; get logs\n      :parameters (?p - player ?loc - location ?logs - logs)\n      :precondition (and (at ?p ?loc) (has_logs ?loc))\n      :effect (and (inventory ?p ?logs))\n   )",
            "(:action start_fire ; start_fire\n      :parameters (?p - player ?loc - location ?teepee - teepee ?logs - logs)\n      :precondition (and (at ?p ?loc) (inventory ?p ?teepee) (inventory ?p ?logs))\n      :effect (and (has_fire ?p))\n   )\n)",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_dry_materials ; get dry materials\n      :parameters (?p - player ?loc - location ?dry_materials - dry_materials)\n      :precondition (and (at ?p ?loc) (has_dry_materials ?loc))\n      :effect (and (inventory ?p ?dry_materials))\n   )"
        ],
        "goal_state": "((has_fire ?p))"
    },
    {
        "task": "avoid_quicksand",
        "step": [
            "research npc l1",
            "go north npc home l1",
            "research npc l2",
            "go east npc l1 l2",
            "go east npc l2 l3"
        ],
        "desc": [],
        "action": [
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) (aware ?p ?l1))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action research\n      :parameters (?p - player ?l - location)\n      :precondition (not (at ?p ?l))\n      :effect (aware ?p ?l)\n   )"
        ],
        "goal_state": "((not (stuck npc qsand)) (at npc l3))"
    },
    {
        "task": "hacking2_1",
        "step": [
            "get npc white_permission securing_machine",
            "machine_secured npc white_permission securing_machine next knowing_target",
            "go next npc securing_machine knowing_target"
        ],
        "desc": [
            "Secure your machine first. To hack, you must need a system to practice your great hacking skills. However, make sure you have the authorization to attack your target. You can either attack your network, ask for written permission, or set up your laboratory with virtual machines. Attacking a system without permission, no matter its content is illegal and will get you in trouble."
        ],
        "action": [
            "(:action machine_secured ; onward to step2\n      :parameters (?p - player ?permission - permission ?l1 - location ?dir - direction ?l2 - location)\n      :precondition (and (inventory ?p ?permission) (at ?p ?l1) (at ?permission ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2))\n   )",
            "(:action get ; get a item\n      :parameters (?p - player ?t - item ?l - location)\n      :precondition (and (not (inventory ?p ?t)) (at ?t ?l) (at ?p ?l)) ; \n      :effect (inventory ?p ?t)\n   )"
        ],
        "goal_state": "((at npc knowing_target))"
    },
    {
        "task": "free_the_meat_from_coconut",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "get towel",
            "flip coconut glass glass_filled",
            "wrap coconut glass_filled coconut_wrapped towel",
            "get mallet",
            "hit coconut_wrapped mallet coconut_broken",
            "free coconut_meat screwdriver coconut_broken"
        ],
        "desc": [
            "Alternatively, strike the coconut against a concrete surface. If you don’t have a hammer or mallet, you can use a solid surface like a porch or possibly a concrete countertop. Try to strike the coconut’s equator against the corner of this surface, using it as a makeshift wedge. Repeatedly strike the coconut all around its equator until the coconut breaks apart.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Poke a hole in the “eye” of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or “eyes” at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it’s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step."
        ],
        "action": [
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action wrap ; wrap the coconut\n      :parameters (?c - coconut ?cow - container_with_water ?cw - coconut_wrapped ?t - towel) \n      :precondition (and (inventory ?c) (inventory ?t) (inventory ?cow))\n      :effect (and (not (inventory ?c)) (inventory ?cw))\n   )",
            "(:action hit ; hit the wrapped coconut with a mallet\n      :parameters (?cw - coconut_wrapped ?m - mallet ?cb - coconut_broken) \n      :precondition (and (inventory ?m) (inventory ?cw))\n      :effect (and (not (inventory ?cw)) (inventory ?cb))\n   )",
            "(:action free ; run a knife between the shell and the meat to free it\n      :parameters (?cm - coconut_meat ?t - tool ?cb - coconut_broken) \n      :precondition (and (inventory ?t) (inventory ?cb))\n      :effect (and (not (inventory ?cb)) (inventory ?cm))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )"
        ],
        "goal_state": "((inventory coconut_meat))"
    },
    {
        "task": "find_water",
        "step": [
            "go east npc shore forest_edge",
            "go east npc forest_edge forest",
            "go north npc forest river",
            "get_water npc river water"
        ],
        "desc": [
            "Scavenge anything you can. Before you head to shore, it can be a good idea to gather up any supplies or materials near you. There may be useful items floating on the waters surface that will help you survive and await rescue. Try to look for anything you can use before heading to shore."
        ],
        "action": [
            "(:action go ; navigate to an adjacent location \n        :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n        :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n        :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n    )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n        :parameters (?p - player ?loc - location ?water - water) \n        :precondition (and (at ?p ?loc) (has_freshwater_source ?loc))\n        :effect (and (inventory ?p ?water) (not (treated ?water)))\n    )"
        ],
        "goal_state": "((inventory npc water) ;todo: put the goal condition here)"
    },
    {
        "task": "get_coconut_meat_with_oven",
        "step": [
            "go west npc counter fridge",
            "get coconut npc fridge",
            "go east npc fridge counter",
            "go north npc counter rack",
            "get knife npc rack",
            "get towel npc rack",
            "pierce npc",
            "drain npc rack",
            "go south npc rack counter",
            "get bag npc counter",
            "go south npc counter oven",
            "turn_on_oven npc",
            "burn_item npc",
            "turn_off_oven npc",
            "go north npc oven counter",
            "wrap_coconut npc bag",
            "smash_with_hands npc",
            "drop towel npc counter",
            "unwrap_coconut npc bag",
            "separate npc bag",
            "peel npc"
        ],
        "desc": [
            "Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef’s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Wrap the mature coconut in a kitchen towel. Place the coconut in the center of the towel, and gather the corners of the towel together to form a pouch. This will keep coconut bits from flying when you go to smash it with a hammer.",
            "Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.",
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step.",
            "Use a knife to separate the meat from the shell. Remove the coconut pieces from the towel. Take each piece, and wedge a knife between the shell and the white meat of the coconut to carefully separate the two. Then, use the knife (or a vegetable peeler) or remove the fibrous layer that might still be clinging to the outside of the meat."
        ],
        "action": [
            "(:action turn_off_oven\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (on oven))\n      :effect (not (on oven))\n   )",
            "(:action drop\n      :parameters (?i - item ?p - player ?l - location)\n      :precondition (and (at ?p ?l) (inventory ?p ?i))\n      :effect (and (at ?i ?l) (not (inventory ?p ?i)))\n   )",
            "(:action drain\n      :parameters (?p - player ?l - location)\n      :precondition (and (inventory ?p coconut) (pierced coconut) (not(smashed coconut)) (not(burnt coconut)) (at glass ?l) (at ?p ?l))\n      :effect (and (inventory ?p coconut_juice) (empty coconut))\n   )",
            "(:action burn_item\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (on oven) (inventory ?p coconut) (empty coconut) (not(burnt coconut)) (not(smashed coconut)))\n      :effect (burnt coconut)\n   )",
            "(:action separate\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (inventory ?p knife) (not (wrapped coconut)) (smashed coconut) (at towel counter) (at ?p counter))\n      :effect (and (not (inventory ?p coconut)) (inventory ?p coconut_shell) (inventory ?p coconut_meat))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action unwrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (wrapped coconut) (wrapped_with coconut ?w))\n      :effect (and (not (wrapped coconut)) (not(wrapped_with coconut ?w)) (inventory ?p ?w))\n   )",
            "(:action smash_with_hands\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (wrapped_with coconut bag) (not(smashed coconut)) (not(on oven)) (burnt coconut) (at ?p counter))\n      :effect (smashed coconut)\n   )",
            "(:action pierce ; pierce the coconut\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (not(pierced coconut)) (inventory ?p knife))\n      :effect (pierced coconut)\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action turn_on_oven\n      :parameters (?p - player)\n      :precondition (and (at ?p oven) (not (on oven)))\n      :effect (on oven)\n   )",
            "(:action wrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (not(wrapped coconut)) (not(smashed coconut)) (inventory ?p ?w))\n      :effect (and (wrapped coconut) (wrapped_with coconut ?w) (not(inventory ?p ?w)))\n   )",
            "(:action peel\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut_meat) (inventory ?p knife) (not(peeled coconut_meat)) (at towel counter) (at ?p counter))\n      :effect (peeled coconut_meat)\n   )"
        ],
        "goal_state": "((inventory npc coconut_meat) (peeled coconut_meat) (burnt coconut))"
    },
    {
        "task": "start_fire",
        "step": [
            "go east person beach jungle",
            "chop_wood person jungle wood)    8,9,14\n",
            "go west person jungle beach",
            "get tinder person beach",
            "go west person beach ocean",
            "get rock person ocean",
            "carve_groove person wood rock)   9\n",
            "light_fire person wood beach tinder fire)   9,12,3\n"
        ],
        "desc": [
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action carve_groove ; create a grove in wood to light flint.\n      :parameters (?p - player ?wood - wood ?rock - rock) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?rock) (not (groove ?wood)))\n      :effect (and (groove ?wood))\n   )",
            "(:action light_fire ; light a fire\n      :parameters (?p - player ?wood - wood ?loc - location ?tinder - tinder ?fire - fire) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?tinder) (can_light_fire ?loc) (groove ?wood))\n      :effect (and (at ?fire ?loc) (not (inventory ?wood)) (not (groove ?wood)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action chop_wood ; chop down wood from a nearby tree.\n      :parameters (?p - player ?loc - location ?wood - wood) \n      :precondition (and (at ?p ?loc) (has_wood ?loc))\n      :effect (and (inventory ?p ?wood) (not (groove ?wood)))\n   )"
        ],
        "goal_state": "((at fire beach))"
    },
    {
        "task": "fill_the_glass",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "flip coconut glass glass_filled"
        ],
        "desc": [
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Poke a hole in the “eye” of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or “eyes” at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it’s bored through the shell), remove it by wiggling it out, widening the new hole in the process."
        ],
        "action": [
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )",
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )"
        ],
        "goal_state": "((inventory glass_filled))"
    },
    {
        "task": "ultimate_win",
        "step": [
            "splash_swim out npc open_sea deep_sea shark",
            "get spear npc deep_sea",
            "spot_ship npc deep_sea ship",
            "defend npc shark",
            "attack_vulnerable npc shark spear eye deep_sea ship",
            "onboard npc ship deep_sea",
            "medicare npc ship"
        ],
        "desc": [
            "If you have a spear gun or pole, use it! A sharp object is a good way to inflict enough pain to scare away the shark. Aim for the head, specifically the eyes or the gills.",
            "Hit the shark in the face and gills.Your best bet, if attacked, is to make the shark see you as a strong, credible threat. Usually, a hard blow to the shark's gills, eyes or snout (end of its nose) will cause it to retreat.",
            "Sharks have several different attack methods. Sometimes they swim right up and charge, sometimes they circle for a while before lunging, and sometimes they sneak up from behind for a surprise attack. To be able to defend against the shark, you must know where it is, so make every effort to watch the animal, even as you are working out your escape.",
            "Do not block the shark's path. If you are standing between the shark and the open ocean, move away.",
            "Do not take your eyes off the shark."
        ],
        "action": [
            "(:action attack_vulnerable ; attack shark on its eyes / gill / snout\n      :parameters (?p - player ?s - shark ?tool - item ?pt - part ?loc - location ?sh - ship) \n      :precondition (and (at ?p ?loc) (at ?s ?loc) (inventory ?p ?tool) (vulnerable ?pt) (sharp ?tool) (not (on ?p ?sh)))\n      :effect (and (fleed ?s) (not (attacked ?p ?s)))\n   )",
            "(:action onboard ; get on to the ship\n      :parameters (?p - player ?shp - ship ?loc - location) \n      :precondition (and (at ?p ?loc) (at ?shp ?loc) (visible ?shp))\n      :effect (and (on ?p ?shp))\n   )",
            "(:action spot_ship ; spot ships that are nearby\n      :parameters (?p - player ?loc - location ?shp - ship) \n      :precondition (and (at ?p ?loc) (at ?shp ?loc))\n      :effect (and (visible ?shp))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action defend ; defend yourself\n      :parameters (?p - player ?s - shark) \n      :precondition (and (attacked ?p ?s))\n      :effect (and (not (attacked ?p ?s)) (wounded ?p) (defending ?p))\n   )",
            "(:action splash_swim ; swim with loud sounds - you don't get to monitor the shark!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)) (attacked ?p ?s))\n   )",
            "(:action medicare ; get help from medicare, to deal with your wounds\n      :parameters (?p - player ?sh - ship)\n      :precondition (and (on ?p ?sh) (wounded ?p))\n      :effect (and (not (wounded ?p)))\n   )",
            "(:action swim ; swim normally till you reach safety!\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location ?s - shark) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (attacked ?p ?s)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)) (at ?s ?l2) (not (visible ?s)))\n   )"
        ],
        "goal_state": "((on npc ship) (fleed shark) (defending npc) (not (wounded npc)))"
    },
    {
        "task": "get-strips",
        "step": [
            "get scissors npc garage",
            "go west npc garage nursery",
            "get plant npc nursery",
            "cut_plant npc scissors plant stalk",
            "peel_stalk npc stalk",
            "cut_stalk_into_strips npc scissors stalk strip"
        ],
        "desc": [
            "Peel away the outer layer of the papyrus plant. Only the inner part of the plant is used for the paper. You will need to remove the outer green part of the plant. Use a sharp knife and slice down the length of the plant until the entire outer layer is removed. The inside of the plant should be a white or slightly greenish color.",
            "Cut the stalks. About 12 inches (30 cm) of papyrus plant will make a large piece of paper that will be nearly 24 inches (61 cm) in length. Cut off as many stalks as you will need to make the amount of paper you want. The cuts must be diagonally made. Then, cut the tips of the papyrus. You will not use the tips, which are the thinner, grass-like end of the plant.",
            "Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however."
        ],
        "action": [
            "(:action peel_stalk ; \n      :parameters (?p - player ?stalk - stalk) \n      :precondition (and (not (peeled ?stalk)) (inventory ?p ?stalk))\n      :effect (peeled ?stalk)\n   )",
            "(:action cut_plant ;\n      :parameters (?p - player ?scissors - scissors ?plant - plant ?stalk - stalk) \n      :precondition  (and (inventory ?p ?scissors) (inventory ?p ?plant))\n      :effect (and (inventory ?p ?stalk) (not (inventory ?p ?plant)) (not (peeled ?stalk)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action cut_stalk_into_strips ; \n      :parameters (?p - player ?scissors - scissors ?stalk - stalk ?strip - strip) \n      :precondition (and (inventory ?p ?stalk) (inventory ?p ?scissors) (peeled ?stalk))\n      :effect (and (inventory ?p ?strip) (not (inventory ?p ?stalk)) (not (clean ?strip)))\n   )"
        ],
        "goal_state": "((inventory npc strip))"
    },
    {
        "task": "escape_island",
        "step": [
            "go east person beach jungle",
            "go east person jungle river",
            "find_other_survivors river survivor person",
            "go west person river jungle",
            "chop_wood person jungle wood",
            "get vines person jungle",
            "go west person jungle beach",
            "build_raft beach vines person wood"
        ],
        "desc": [
            "Ration all of your supplies. Do not waste anything, even if you have an overabundance of it. Store away your excess food and water and stick to strict rationing. The body requires 32 ounces of water a day and 200-1500 calories of food for an average person.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action find_other_survivors ; find other survivors on the deserted island \n      :parameters (?loc - location ?survivor - survivor ?p - player) \n      :precondition (and (at ?survivor ?loc) (at ?p ?loc))\n      :effect (and (has_friend ?p))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action chop_wood ; chop down wood from a nearby tree.\n      :parameters (?p - player ?loc - location ?wood - wood) \n      :precondition (and (at ?p ?loc) (has_wood ?loc))\n      :effect (and (inventory ?p ?wood) (not (groove ?wood)))\n   )",
            "(:action build_raft ; build a raft to escape the deserted island \n      :parameters (?loc - location ?vines - vines ?p - player ?wood - wood) \n      :precondition (and (at ?p ?loc) (at_ocean ?loc) (inventory ?p ?wood) (inventory ?p ?vines) (has_friend ?p))\n      :effect (and (has_escaped ?p))\n   )"
        ],
        "goal_state": "((has_escaped person))"
    },
    {
        "task": "hit_coconut_with_mallet",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "get towel",
            "flip coconut glass glass_filled",
            "wrap coconut glass_filled coconut_wrapped towel",
            "get mallet",
            "hit coconut_wrapped mallet coconut_broken"
        ],
        "desc": [
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Poke a hole in the “eye” of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or “eyes” at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it’s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step."
        ],
        "action": [
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action wrap ; wrap the coconut\n      :parameters (?c - coconut ?cow - container_with_water ?cw - coconut_wrapped ?t - towel) \n      :precondition (and (inventory ?c) (inventory ?t) (inventory ?cow))\n      :effect (and (not (inventory ?c)) (inventory ?cw))\n   )",
            "(:action hit ; hit the wrapped coconut with a mallet\n      :parameters (?cw - coconut_wrapped ?m - mallet ?cb - coconut_broken) \n      :precondition (and (inventory ?m) (inventory ?cw))\n      :effect (and (not (inventory ?cw)) (inventory ?cb))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )"
        ],
        "goal_state": "((inventory coconut_broken))"
    },
    {
        "task": "collect-water",
        "step": [
            "go up npc basement kitchen",
            "get bottles kitchen npc",
            "go up npc kitchen bedroom",
            "go in npc bedroom bathroom",
            "drop bottles bathroom npc",
            "fill bottles bathroom npc",
            "put_in_stopper bathtub bathroom npc",
            "get purification_tablets bathroom npc",
            "purify bottles bathroom npc",
            "fill bathtub bathroom npc"
        ],
        "desc": [
            "Shelter in place and wait for the initial chaos to subside. If all of the electronics suddenly stop working, the immediate loss of electricity will cause a lot of sudden confusion and chaos. If you aren’t home, wait 30-45 minutes for all of the abrupt danger to pass. Then, go home if you’re within a few miles or kilometers. If you’re already home, stay there and do not go outside.",
            "Eat anything in your fridge first to minimize food shortages. For the first 1-2 days, eat whatever is in your fridge and hasn’t gone bad immediately. Save the dry stuff for later when you may really need it. The odds are low society will completely collapse and you’ll go without help for super long, but it’s still better to go through everything that’s going to go bad anyway."
        ],
        "action": [
            "(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )",
            "(:action put_in_stopper\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (has_stopper ?it) (not (full ?it)) (at ?it ?l) (at ?p ?l))\n      :effect (can_be_filled ?it)\n   )",
            "(:action purify\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l) (full ?it) (inventory ?p purification_tablets) (not (sealed ?it)))\n      :effect (and (purified ?it) (not (inventory ?p purification_tablets)))\n   )",
            "(:action drop\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (inventory ?p ?it) (at ?p ?l))\n      :effect (and (not (inventory ?p ?it)) (at ?it ?l))\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action fill\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (can_be_filled ?it) (at ?p ?l) (at ?it ?l))\n      :effect (full ?it)\n   )"
        ],
        "goal_state": "((full bathtub) (purified bottles) (sealed bottles))"
    },
    {
        "task": "process-strips",
        "step": [
            "get wooden_board npc garage",
            "go in npc garage work_station",
            "soak_strips npc work_station strip",
            "dry_out_strips npc strip",
            "weave_strips_into_sheet npc work_station strip sheet",
            "press_sheet npc work_station wooden_board sheet"
        ],
        "desc": [
            "Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours.",
            "Lay the second half of the strips out. Once the first half off the strips have been laid out vertically, begin laying out the second half of the strips. Lay the strips out horizontally and on top of the vertical ones.",
            "Lay the papyrus plant strips on a hard, flat surface. The pattern doesn't matter at this point as you will be rearranging them later. Just lay them out on a hard, flat surface and make sure they don't overlap.",
            "Dip the strips into the glue and water mixture. Dip each strip individually. Try to keep the strips as flat as possible when dipping them. Make sure the strips are fully soaked with the mixture."
        ],
        "action": [
            "(:action press_sheet ; \n      :parameters (?p - player ?loc - location ?wooden_board - wooden_board ?sheet - sheet) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?wooden_board) (inventory ?p ?sheet))\n      :effect (and (flat ?sheet) (not (very_flat ?sheet)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action weave_strips_into_sheet ; \n      :parameters (?p - player ?loc - location ?strip - strip ?sheet - sheet) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?strip) (dry ?strip))\n      :effect (and (inventory ?p ?sheet) (not (inventory ?p ?strip)) (not (flat ?sheet)))\n   )",
            "(:action dry_out_strips ; \n      :parameters (?p - player ?strip - strip) \n      :precondition (and (inventory ?p ?strip) (clean ?strip))\n      :effect (dry ?strip)\n   )",
            "(:action soak_strips ; \n      :parameters (?p - player ?loc - location ?strip - strip) \n      :precondition (and (at ?p ?loc) (has_water ?loc) (inventory ?p ?strip))\n      :effect (and (clean ?strip) (not (dry ?strip)))\n   )"
        ],
        "goal_state": "((inventory npc sheet) (flat sheet))"
    },
    {
        "task": "make_smoke_signal",
        "step": [
            "go east npc shore forest_edge",
            "go east npc forest_edge forest",
            "gather_tinder npc forest tinder",
            "go west npc forest forest_edge",
            "go west npc forest_edge shore",
            "wet_tinder npc shore tinder",
            "build_campfire npc forest tinder campfire",
            "make_smoke_signal npc forest campfire tinder"
        ],
        "desc": [
            "You can float in water by laying on your back and keeping your lungs full.",
            "",
            "Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:",
            "You can also try a swim-float-swim technique, where you swim and then roll and float on your back."
        ],
        "action": [
            "(:action build_campfire\n        :parameters (?p -player ?loc - location ?tinder - tinder ?campfire - campfire)\n        :precondition (and (at ?p ?loc) (inventory ?p ?tinder))\n        :effect (and (at ?campfire ?loc) (not (inventory ?p ?tinder)))\n    )",
            "(:action gather_tinder\n        :parameters (?p - player ?loc - location ?tinder - tinder)\n        :precondition (and (at ?p ?loc) (has_tinder ?loc))\n        :effect (and (inventory ?p ?tinder))\n    )",
            "(:action wet_tinder\n        :parameters (?p - player ?loc - location ?tinder - tinder)\n        :precondition (and (at ?p ?loc)(has_water ?loc)(inventory ?p ?tinder))\n        :effect (and (wet ?tinder))\n    )",
            "(:action make_smoke_signal\n        :parameters (?p - player ?loc - location ?campfire - campfire ?tinder - tinder)\n        :precondition (and (at ?p ?loc)(at ?campfire ?loc)(inventory ?p ?tinder)(wet ?tinder))\n        :effect (and (signaling ?campfire)(not (wet ?tinder))(not (inventory ?p ?tinder)))\n    )\n    \n    \n    \n    \n    \n)",
            "(:action go ; navigate to an adjacent location \n        :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n        :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n        :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n    )"
        ],
        "goal_state": "(;todo: put the goal condition here (signaling campfire))"
    },
    {
        "task": "find-shelter",
        "step": [
            "go north npc parkinglot park",
            "go west npc park car",
            "go north npc car stonehouse",
            "find_shelter npc stonehouse"
        ],
        "desc": [
            "Find a strong, brick building with a basement for shelter. These buildings types can withstand the most damage and remain standing. Look especially for a building with a basement. This provides added protection and a hiding place if you have to stay out of sight. Search your area for suitable buildings like these and move into one as soon as possible."
        ],
        "action": [
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action gofish \n      :parameters (?p - player ?l - location ?fp - fishingpole ?f - fish)\n      :precondition (and (at ?p ?l) (inventory ?p ?fp) (haslake ?l) (at ?f ?l))\n      :effect (and (gettable ?f) )\n   )",
            "(:action find_shelter \n      :parameters (?p - player ?l - location)\n      :precondition (and (at ?p ?l) (has_basement ?l) (not (is_occupied ?l)) )\n      :effect (and (in_shelter ?p))\n   )"
        ],
        "goal_state": "((in_shelter npc))"
    },
    {
        "task": "get_essential_items",
        "step": [
            "make_plan npc home",
            "walk north npc home garage",
            "get car npc garage",
            "get_in_car npc garage car",
            "drive east npc garage highway",
            "drive down npc highway mall",
            "drive east npc mall homedepot",
            "get wood npc homedepot",
            "walk west npc homedepot mall",
            "drive north npc mall wholefoods",
            "get_food canned_food npc wholefoods",
            "walk south npc wholefoods mall",
            "drive south npc mall pharmacy",
            "get medical_supplies npc pharmacy"
        ],
        "desc": [
            "Stock up on non-perishable food. Non-perishables can last several years, whether it's in storage or in sustaining you after an attack. Choose items that contain a lot of carbohydrates, so you get more caloric bang for your buck, and store them in a cool, dry place.",
            "Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food — you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival."
        ],
        "action": [
            "(:action make_plan\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_home ?l1))\n      :effect (and (has_plan ?p))\n   )",
            "(:action get_medicine\n      :parameters (?obj -item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_pharmacy ?l1) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n  )",
            "(:action get\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (not (is_supermarket ?l1)))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action walk\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action drive\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (driving ?p) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_in_car\n      :parameters (?p - player ?l1 - location ?obj - item)\n      :precondition (and (at ?p ?l1) (inventory ?p ?obj) (is_car ?obj))\n      :effect (and (driving ?p) (inventory ?p ?obj))\n  )\n\n)",
            "(:action get_food\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (is_supermarket ?l1) (is_nonperishable ?obj) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n   )"
        ],
        "goal_state": "((inventory npc medical_supplies) (inventory npc wood) (inventory npc canned_food))"
    },
    {
        "task": "reinforce_basement",
        "step": [
            "walk north npc home garage",
            "get car npc garage",
            "get_in_car npc garage car",
            "drive east npc garage highway",
            "drive down npc highway mall",
            "drive east npc mall homedepot",
            "get concrete npc homedepot",
            "walk west npc homedepot mall",
            "drive up npc mall highway",
            "drive west npc highway garage",
            "drive south npc garage home",
            "make_plan npc home",
            "drive in npc home basement",
            "reinforce npc basement concrete"
        ],
        "desc": [
            "Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food — you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival."
        ],
        "action": [
            "(:action make_plan\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_home ?l1))\n      :effect (and (has_plan ?p))\n   )",
            "(:action stay_in_shelter\n      :parameters (?p - player ?l1 - location ?obj1 - item ) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj1) (is_nonperishable ?obj1) (reinforced ?l1) (is_underground ?l1))\n      :effect (and (sheltered ?p) )\n  )",
            "(:action get_medicine\n      :parameters (?obj -item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_pharmacy ?l1) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n  )",
            "(:action reinforce\n      :parameters (?p - player ?l1 - location ?obj - item) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj) (is_construction_material ?obj))\n      :effect (and (reinforced ?l1) )\n  )",
            "(:action get\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (not (is_supermarket ?l1)))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action walk\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action drive\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (driving ?p) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_in_car\n      :parameters (?p - player ?l1 - location ?obj - item)\n      :precondition (and (at ?p ?l1) (inventory ?p ?obj) (is_car ?obj))\n      :effect (and (driving ?p) (inventory ?p ?obj))\n  )\n\n)",
            "(:action get_food\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (is_supermarket ?l1) (is_nonperishable ?obj) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n   )"
        ],
        "goal_state": "((reinforced basement))"
    },
    {
        "task": "hacking1_1",
        "step": [
            "learn npc s_unix",
            "learn npc s_search",
            "learn npc s_py",
            "learn npc s_php",
            "learn npc s_html",
            "learn npc s_cpp",
            "learn npc s_asb",
            "understand npc c_hacking",
            "understand npc c_ethics",
            "learn_unix npc s_unix",
            "learn_internet npc s_html s_search",
            "learn_programming npc s_cpp s_php s_py s_bash s_asb",
            "learn_concepts npc c_hacking c_ethics",
            "become_skilled npc rookie next skilled",
            "go next npc rookie skilled"
        ],
        "desc": [
            "Learn how to use the internet and HTML. If you are going to hack, you'll need to know how to use the internet. Not just how to use a web browser, but also how to use advanced search engine techniques. You will also need to know how to create internet content using HTML. Learning HTML will also teach you some good mental habits that will help you with learning to program.",
            "Get an open-sourced Unix-based system and learn to use it. There is a wide family of operating systems that are based on Unix, including Linux. The vast majority of web servers on the internet are Unix-based. So you'll need to learn Unix if you want to hack the internet.",
            "Understand what hacking is. Broadly speaking, hacking refers to a variety of techniques that are used to compromise or gain access to a digital system. This can be a computer, mobile phone or tablet, or an entire network. Hacking involves a variety of specialized skills. Some are very technical. Others are more psychological. There are lots of different types of hackers that are motivated by a variety of different reasons.",
            "Learn how to program. Learning a programming language might take time, so you need to be patient. Focus on learning to think like a programmer instead of learning individual languages. Focus on similar concepts in all programming languages.",
            "Understand the ethics of hacking. Despite the ways hackers are depicted in popular culture, hacking is neither good nor bad. It can be used for either. Hackers are simply people who are skilled in technology who like to solve problems and overcome limitations. You can use your skills as a hacker to find solutions to problems, or you can use your skills to create problems and engage in illegal activity."
        ],
        "action": [
            "(:action understand ; understand some concept\n      :parameters (?p - player ?c1 - concept)\n      :precondition (not (know ?p ?c1))\n      :effect (know ?p ?c1)\n   )",
            "(:action got_all_info ; onward to step 3 \n      :parameters (?p - player ?info - all_information ?l1 - location ?dir - direction ?l2 - location)\n      :precondition (and (collected_all_info ?p) (at ?p ?l1) (at ?info ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2))\n   )",
            "(:action learn_unix\n      :parameters (\n          ?p    - player\n          ?u    - unix\n      )\n      :precondition (and \n          (learned ?p ?u))\n      :effect (know_unix ?p)\n  )",
            "(:action become_skilled\n          :parameters (\n              ?p      - player\n              ?l1     - location \n              ?dir    - direction \n              ?l2     - location)\n          :precondition (and \n              (know_programming ?p)\n              (know_hacking     ?p)\n              (know_ethics      ?p)\n              (know_internet    ?p)\n              (know_unix        ?p))\n          :effect (not (blocked ?l1 ?dir ?l2))\n  )\n  ; -----------------------------------------------------------------------\n\n)",
            "(:action learn_internet\n      :parameters (\n          ?p      - player\n          ?html   - html \n          ?search - search\n      )\n      :precondition (and \n          (learned ?p ?html)\n          (learned ?p ?search))\n      :effect (know_internet ?p)\n  )",
            "(:action learn_concepts\n      :parameters (\n          ?p  - player\n          ?hk - hacking\n          ?et - ethics\n      )\n      :precondition (and \n          (know ?p ?hk)\n          (know ?p ?et))\n      :effect (and (know_hacking ?p) (know_ethics ?p))\n  )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action learn_programming\n      :parameters (\n          ?p    - player\n          ?cp   - cpp\n          ?php  - php\n          ?py   - py\n          ?bash - bash\n          ?asb  - assembly\n      )\n      :precondition (and \n          (learned ?p ?cp)\n          (learned ?p ?php)\n          (learned ?p ?py)\n          (learned ?p ?asb))\n      :effect (know_programming ?p)\n  )",
            "(:action learn ; learn a skill\n      :parameters (?p - player ?k1 - skill)\n      :precondition (not (learned ?p ?k1))\n      :effect (learned ?p ?k1)\n   )"
        ],
        "goal_state": "((learned npc s_cpp))"
    },
    {
        "task": "turn-on-radio",
        "step": [
            "go up npc kitchen bedroom",
            "get batteries bedroom npc",
            "go down npc bedroom kitchen",
            "go down npc kitchen basement",
            "put_batteries_in npc basement radio",
            "turn_on_radio npc basement radio"
        ],
        "desc": [
            "Turn your radio on immediately to get as much information as possible. Most electronics are going to stop functioning as soon as the EMP goes off. However, depending on the type of EMP, there is a good chance that radios will continue to work—at least for a short while. Turn the radio on and tune in to any news source with a decent signal. Keep it on as long as possible and pay attention while you take the next steps to ensure that you get as much information as you can.",
            "Your vehicle may still work if it’s older or it doesn’t rely on a dedicated electrical signal outside of the battery to keep the engine going, which is the case for many vehicles."
        ],
        "action": [
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action put_batteries_in ; pick up an item and put it in the inventory\n      :parameters (?p - player ?l1 - location ?radio - radio) \n      :precondition (and (at ?p ?l1) (inventory ?p batteries) (not (has_batteries ?radio)))\n      :effect (has_batteries ?radio)\n   )",
            "(:action turn_on_radio ; turn on the radio\n      :parameters (?p - player ?loc - location ?radio - radio) \n      :precondition (and (at ?p ?loc) (at ?radio ?loc) (has_batteries ?radio))\n      :effect (on ?radio)\n   )",
            "(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )"
        ],
        "goal_state": "((on radio))"
    },
    {
        "task": "preparing_papyrus",
        "step": [
            "get scissors npc kitchen",
            "cut_stalks npc papyrus_tree kitchen papyrus_stalks",
            "papyrus_strips npc papyrus_tree kitchen papyrus_stalks papyrus_strips"
        ],
        "desc": [
            "Peel away the outer layer of the papyrus plant. Only the inner part of the plant is used for the paper. You will need to remove the outer green part of the plant. Use a sharp knife and slice down the length of the plant until the entire outer layer is removed. The inside of the plant should be a white or slightly greenish color.",
            "Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however."
        ],
        "action": [
            "(:action cut_stalks ; cut stalks\n      :parameters (?p - player ?tree - papyrus_tree ?l1 - location ?s - papyrus_stalks) \n      :precondition (and  (at ?p ?l1) (at ?tree ?l1) (inventory ?p scissors))\n      :effect (and (inventory ?p ?s))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action place_strips_between_boards ; place papyrus strips between two wooden boards\n      :parameters (?p - player) \n      :precondition (and (inventory ?p wooden_boards) (inventory ?p papyrus_strips) (strips_woven))\n      :effect (and (strips_between_boards ?item))\n   )",
            "(:action papyrus_strips ; cut strips from stalks\n      :parameters (?p - player ?tree - papyrus_tree ?l1 - location ?pst - papyrus_stalks ?strip - papyrus_strips) \n      :precondition (and  (at ?p ?l1) (at ?tree ?l1) (inventory ?p scissors) (inventory ?p ?pst))\n      :effect (and (inventory ?p ?strip) (not (inventory ?p ?pst)))\n   )"
        ],
        "goal_state": "((inventory npc papyrus_strips))"
    },
    {
        "task": "get_coconut_meat_without_oven",
        "step": [
            "go west npc counter fridge",
            "get coconut npc fridge",
            "go east npc fridge counter",
            "get mallet npc counter",
            "go north npc counter rack",
            "get knife npc rack",
            "get towel npc rack",
            "pierce npc",
            "drain npc rack",
            "go south npc rack counter",
            "wrap_coconut npc towel",
            "smash_with_mallet npc",
            "unwrap_coconut npc towel",
            "drop towel npc counter",
            "separate npc bag",
            "peel npc"
        ],
        "desc": [
            "Wrap the mature coconut in a kitchen towel. Place the coconut in the center of the towel, and gather the corners of the towel together to form a pouch. This will keep coconut bits from flying when you go to smash it with a hammer.",
            "Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef’s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel."
        ],
        "action": [
            "(:action smash_with_mallet\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (inventory ?p mallet) (wrapped_with coconut towel) (empty coconut) (not(burnt coconut)) (not(smashed coconut)) (at ?p counter))\n      :effect (smashed coconut)\n   )\n)",
            "(:action drop\n      :parameters (?i - item ?p - player ?l - location)\n      :precondition (and (at ?p ?l) (inventory ?p ?i))\n      :effect (and (at ?i ?l) (not (inventory ?p ?i)))\n   )",
            "(:action drain\n      :parameters (?p - player ?l - location)\n      :precondition (and (inventory ?p coconut) (pierced coconut) (not(smashed coconut)) (not(burnt coconut)) (at glass ?l) (at ?p ?l))\n      :effect (and (inventory ?p coconut_juice) (empty coconut))\n   )",
            "(:action separate\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (inventory ?p knife) (not (wrapped coconut)) (smashed coconut) (at towel counter) (at ?p counter))\n      :effect (and (not (inventory ?p coconut)) (inventory ?p coconut_shell) (inventory ?p coconut_meat))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action unwrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (wrapped coconut) (wrapped_with coconut ?w))\n      :effect (and (not (wrapped coconut)) (not(wrapped_with coconut ?w)) (inventory ?p ?w))\n   )",
            "(:action pierce ; pierce the coconut\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (not(pierced coconut)) (inventory ?p knife))\n      :effect (pierced coconut)\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action wrap_coconut\n      :parameters (?p - player ?w - wrappable)\n      :precondition (and (inventory ?p coconut) (not(wrapped coconut)) (not(smashed coconut)) (inventory ?p ?w))\n      :effect (and (wrapped coconut) (wrapped_with coconut ?w) (not(inventory ?p ?w)))\n   )",
            "(:action peel\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut_meat) (inventory ?p knife) (not(peeled coconut_meat)) (at towel counter) (at ?p counter))\n      :effect (peeled coconut_meat)\n   )"
        ],
        "goal_state": "((inventory npc coconut_meat) (peeled coconut_meat) (not (burnt coconut)))"
    },
    {
        "task": "get_coconut_juice",
        "step": [
            "go west npc counter fridge",
            "get coconut npc fridge",
            "go east npc fridge counter",
            "go north npc counter rack",
            "get knife npc rack",
            "pierce npc",
            "drain npc rack"
        ],
        "desc": [
            "Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef’s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.",
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it."
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action drain\n      :parameters (?p - player ?l - location)\n      :precondition (and (inventory ?p coconut) (pierced coconut) (not(smashed coconut)) (not(burnt coconut)) (at glass ?l) (at ?p ?l))\n      :effect (and (inventory ?p coconut_juice) (empty coconut))\n   )",
            "(:action pierce ; pierce the coconut\n      :parameters (?p - player)\n      :precondition (and (inventory ?p coconut) (not(pierced coconut)) (inventory ?p knife))\n      :effect (pierced coconut)\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ],
        "goal_state": "((inventory npc coconut_juice))"
    },
    {
        "task": "get_out_deep",
        "step": [
            "liedown npc",
            "breathe npc",
            "get stick npc here",
            "usestick npc stick qsand"
        ],
        "desc": [
            "Breathe deeply. Not only will deep breathing help you remain calm, it will also make you more buoyant. Keep as much air in your lungs as possible. It is impossible to \"go under\" if your lungs are full of air.",
            "Lay back. Sit down and lean back if your feet are stuck fast. Creating a larger \"footprint\" should free your feet by removing the pressure they create, allowing them to float. When you feel them start to come free, roll to your side away from the quicksand and free of its grip. You'll get dirty, but its the quickest and safest way to free yourself.",
            "Stay flat on your back with your arms and legs fully touching the quicksand and use the pole as a guide. Inch sideways along the pole to firm ground."
        ],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?i - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?i ?l1))\n      :effect (and (inventory ?p ?i) (not (at ?i ?l1)))\n   )",
            "(:action liedown ; player gets on their back\n      :parameters (?p - player)\n      :precondition (not (laying ?p))\n      :effect (laying ?p)\n   )",
            "(:action usestick ; player uses the stick to help get out of sand\n      :parameters (?p - player ?s - stick ?q - quicksand)\n      :precondition (and (inventory ?p ?s) (laying ?p) (calm ?p))\n      :effect (and (not (stuck ?p ?q)) (not (inventory ?p ?s)))\n   )",
            "(:action breathe ; breathe in to fill your lungs with air\n      :parameters (?p - player)\n      :precondition (not (calm ?p))\n      :effect (calm ?p)\n   )"
        ],
        "goal_state": "((not (stuck npc qsand)))"
    },
    {
        "task": "final",
        "step": [
            "go west npc home market",
            "buy_supplies food npc market",
            "buy_supplies medicine npc market",
            "buy_supplies water npc market",
            "check_supplies food water medicine",
            "go west npc market weapon_market",
            "buy_weapons ammunition npc weapon_market",
            "buy_weapons pistol npc weapon_market",
            "go east npc weapon_market market",
            "buy_supplies heat npc market",
            "go east npc market home",
            "go north npc home bunker1",
            "go north npc bunker1 bunker2",
            "check_weapons pistol ammunition",
            "check_bunker bunker2 npc",
            "outfit_bunker_with_energy_source bunker2 npc heat",
            "listen_to_astronomers_predictions npc bunker2",
            "enjoylife bunker2 npc",
            "connect_through_social_media_with_family bunker2 npc family philly",
            "move_away npc philly salt_lake bunker2"
        ],
        "desc": [
            "Make sure to stock your hide-out with canned food, dried goods, non-perishable foods, and bottled water.",
            "Don’t believe everything you hear. Early reporting is notoriously inaccurate at times, so wait it out until you hear unified reports.",
            "Move into a bunker or fortified structure and outfit it with an energy source. An underground bunker isn’t only the best for the time of impact; it will also protect you from environmental hazards after the comet has hit. When the comet hits, dust, soot, and water will shoot up into our atmosphere, making it cold for months to years.",
            "Isolation has multiple negative effects on your mental health, so having people with you is a good idea if you want to stay mentally healthy.",
            "Buy weapons and ammunition for after the impact. You may be more concerned with withstanding the destruction of the comet impact itself, but you also need to be conscious of the possible dangers of other people after the dust settles.",
            "Purchase enough food, water, medicine, and other supplies. If the comet does hit on land, dust and rock particles flying into our atmosphere will make it too dangerous to go outside for months to years.",
            "Pay attention to astronomers’ predictions on any possible collisions with earth. NASA currently has astronomers that track comets that are flying in our solar system. As a result, there’s a very good chance they will know if there is a large object about to collide with us. By listening to their predictions, you can develop a real sense of how much time you have to prepare.",
            "Limit your generator usage and only use it if necessary. Your generator will be a lifesaver for many things while you are in your bunker. You can use it to produce heat, cook food, and power lights. However, because most generators run on fuel, it’s important that you limit its usage because you will likely have a limited amount of fuel in your bunker. If you aren't in a bunker, a generator may still work, but there's a good chance that the main power grid will be down.",
            "Move away from coastal areas. Because the earth is made up of 71% water, there’s a greater likelihood that the comet will hit a body of water. If this does happen, it could mean that giant tsunamis would be created by the initial impact and they would likely destroy our coastal cities. Additionally, there would be an increase in water vapor entering our atmosphere which would cause heavy rain, which could cause landslides and flooding.",
            "A semi-automatic rifle and a pistol with enough ammunition should be more than enough firepower."
        ],
        "action": [
            "(:action buy_supplies ; buy supplies and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - market) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?item))\n   )",
            "(:action listen_to_astronomers_predictions ; listen to astronomers predictions on collision with earth\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (has_pc ?p))\n      :effect (and (listen_to_broadcast ?p ?l1))\n   )",
            "(:action check_weapons ; check enough supplies in the inventory\n      :parameters (?ps - pistol ?am - ammunition) \n      :precondition (and (inventory ?ps) (inventory ?am))\n      :effect (and (enough_weapons))\n   )",
            "(:action buy_weapons ; buy weapons and put it in the inventory (after buy_supplies)\n      :parameters (?wp - weapon ?p - player ?l1 - weapon_market) \n      :precondition (and (at ?p ?l1) (at ?wp ?l1) (enough_supplies))\n      :effect (and (inventory ?wp))\n   )",
            "(:action connect_through_social_media_with_family ; let other family members know you are safe\n      :parameters (?bk - bunker ?p - player ?f - player ?c - city) \n      :precondition (and (at ?p ?bk) (has_pc ?p) (enjoylife ?p ?bk) (not(at ?f ?bk)) (in ?p ?c) (not (in ?f ?c)) )\n      :effect (and (family_memebers_know_you_are_safe))\n   )\n   \n\n)",
            "(:action check_bunker ; check if the bunker is good for sheiding\n      :parameters (?bk - bunker ?p - player) \n      :precondition (and (at ?p ?bk) (enough_supplies) (enough_weapons) (has_air_filtration_system ?bk) (has_strong_material ?bk))\n      :effect (and (find_good_bunker ?bk))\n   )",
            "(:action move_away ; flight from coastal area to inland area \n      :parameters (?p - player ?c1 - city ?c2 - city ?l1 - location) \n      :precondition (and (in ?p ?c1) (coastal ?c1) (inland ?c2) (listen_to_broadcast ?p ?l1))\n      :effect (and (in ?p ?c2) (not (in ?p ?c1)))\n   )",
            "(:action enjoylife ; after all preparation, enjoy life in a bunker\n      :parameters (?bk - bunker ?p - player ) \n      :precondition (and (at ?p ?bk) (outfit_bunker_with_heat ?bk))\n      :effect (and (enjoylife ?p ?bk))\n   )",
            "(:action outfit_bunker_with_energy_source ; outfit your bunker with an energy source for heat\n      :parameters (?bk - bunker ?p - player ?es - energy_source) \n      :precondition (and (at ?p ?bk) (find_good_bunker ?bk) (inventory ?es))\n      :effect (and (outfit_bunker_with_heat ?bk))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action check_supplies ; check enough supplies in the inventory\n      :parameters (?fd - food ?wt - water ?md - medicine) \n      :precondition (and (inventory ?fd) (inventory ?wt) (inventory ?md))\n      :effect (and (enough_supplies))\n   )"
        ],
        "goal_state": "((in npc Salt_Lake) (enjoylife npc bunker2) (family_memebers_know_you_are_safe))"
    },
    {
        "task": "get-papyrus",
        "step": [
            "get shell npc garage",
            "go in npc garage work_station",
            "flatten_sheet npc work_station sheet",
            "polish_sheet npc work_station sheet shell",
            "cut_sheet npc garage sheet scissors papyrus"
        ],
        "desc": [
            "Polish the papyrus. This step isn't absolutely necessary, but it will make the papyrus look nicer and more finished. Use a shell or smooth piece of ivory. Any type of shell that is smooth and without ridges will do. Rub the shell or ivory over the sheet of paper until it appears to be shinier than it was.",
            "Flatten the sheet. The paper may not be completely flat after you remove it from the wooden boards. Put the paper under a stone slab for up to 6 days to make it completely flat.",
            "Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours."
        ],
        "action": [
            "(:action polish_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet ?shell - shell) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?sheet) (inventory ?p ?shell) (very_flat ?sheet))\n      :effect (and (not (inventory ?p ?shell)) (smooth ?sheet))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action cut_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet ?scissors - scissors ?papyrus - papyrus) \n      :precondition (and (inventory ?p ?scissors) (smooth ?sheet))\n      :effect (inventory ?p ?papyrus)\n   )\n)",
            "(:action flatten_sheet ; \n      :parameters (?p - player ?loc - location ?sheet - sheet) \n      :precondition (and (at ?p ?loc) (has_hard_surface ?loc) (inventory ?p ?sheet) (flat ?sheet))\n      :effect (and (very_flat ?sheet) (not (smooth ?sheet)))\n   )"
        ],
        "goal_state": "((inventory npc papyrus))"
    },
    {
        "task": "build_snare",
        "step": [
            "go west npc camp path",
            "get wire npc path",
            "go west npc path cliff",
            "go up npc cliff waterfall",
            "go east npc waterfall mountain",
            "get branch npc mountain",
            "go west npc mountain waterfall",
            "go west npc waterfall footpath",
            "make_snare wire npc snare",
            "make_horizontal_bar branch npc bar",
            "hang_snare snare bar npc footpath"
        ],
        "desc": [
            "Look for edible mushrooms in the woods, if you are trained. Look for wild mushrooms near dark and damp areas or on dying trees in the woods. But be very careful because if you eat the wrong mushroom, you could become extremely ill and potentially die. If you're not sure about whether or not a mushroom is safe to eat, don't eat it!"
        ],
        "action": [
            "(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )",
            "(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )"
        ],
        "goal_state": "((hanged snare) (at snare footpath))"
    },
    {
        "task": "build_shelter",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff waterfall",
            "go east npc waterfall mountain",
            "get branch npc mountain",
            "go east npc mountain west_plain",
            "insert_beam branch tree npc west_plain beam",
            "go east npc west_plain east_plain",
            "get branches npc east_plain",
            "get leaves npc east_plain",
            "get twigs npc east_plain",
            "go west npc east_plain west_plain",
            "lean_branches branches npc west_plain beam frame",
            "clear_spider leaves npc",
            "layer twigs leaves npc west_plain frame shelter"
        ],
        "desc": [
            "Insert 1 end of the branch into the split of 1 of the trees. Where the tree splits and forms a “V” shape, place 1 end of the branch to hold it up as a support beam. If the tree doesn't have a split, use a log that ends in a “V” shape and lean it against a tree so the branch is supported by the tree.",
            "In the event that you have no containers and no way to purify water, you can dig a deep hole, let it fill with groundwater, and wait for the particles to settle at the bottom and the water is clear before you drink it. You should only do this if you have no other option.",
            "Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.",
            "Place the other end of the branch into the split of the other tree. Form a horizontal frame with the main branch by inserting the other end in the split of a nearby tree. Make sure the branch is firmly held in place by shaking it a little."
        ],
        "action": [
            "(:action insert_beam ; insert end(s) of the branch into the split(s) of the tree(s)\n      :parameters (?b - branch ?t - tree ?p - player ?l1 - location ?beam - beam) \n      :precondition (and (at ?p ?l1) (dry ?l1) (flat ?l1) (at ?t ?l1) (has_split_in_trunk ?t) (inventory ?p ?b) (not (has_bug ?b)) (long ?b) (thick ?b) )\n      :effect (and (at ?p ?l1) (not (inventory ?p ?b)) (at ?beam ?l1))\n   )",
            "(:action lean_branches ; Lean branches against the main branch to form the structure of your shelter.\n      :parameters (?branches - branches ?p - player ?l1 - location ?beam - beam ?frame - frame) \n      :precondition (and (at ?p ?l1) (inventory ?p ?branches) (at ?beam ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?branches)) (at ?frame ?l1))\n   )",
            "(:action make_snare ; Take a piece of wire and make a large circle\n      :parameters (?w - wire ?p - player ?s - snare) \n      :precondition (and (inventory ?p ?w))\n      :effect (and (not (inventory ?p ?w)) (inventory ?p ?s) (not (hanged ?s)))\n   )",
            "(:action clear_spider ; clear off any critters or spiders that may be on the branch or leaves\n      :parameters (?item - item ?p - player) \n      :precondition (and (inventory ?p ?item) (has_bug ?item))\n      :effect (and (not (has_bug ?item)) (inventory ?p ?item))\n   )",
            "(:action layer ; Lay twigs and leaves\n      :parameters (?twigs - twigs ?leaves - leaves ?p - player ?l1 - location ?frame - frame ?shelter - shelter) \n      :precondition (and (at ?p ?l1) (inventory ?p ?twigs) (inventory ?p ?leaves) (not (has_bug ?leaves)) (at ?frame ?l1))\n      :effect (and (at ?p ?l1) (not (inventory ?p ?twigs)) (not (inventory ?p ?leaves)) (at ?shelter ?l1))\n   )",
            "(:action eat ; Eat anything you find edible\n      :parameters (?i - item ?p - player) \n      :precondition (and (hungry ?p) (inventory ?p ?i) (not (unwashed ?i)) (edible ?i))\n      :effect (and (not (inventory ?p ?i)) (not (hungry ?p)))\n   )",
            "(:action wash ; Wash off plants that you find.\n      :parameters (?i - item ?p - player ?water - water) \n      :precondition (and (inventory ?p ?i) (inventory ?p ?water) (unwashed ?i))\n      :effect (and (inventory ?p ?i) (not (unwashed ?i)))\n   )",
            "(:action hang_snare ; Hang the circle of the snare over a path\n      :parameters (?s - snare ?bar - bar ?p - player ?l - location) \n      :precondition (and (inventory ?p ?s) (inventory ?p ?bar) (not (hanged ?s)) (at ?p ?l) (made_by_animal ?l))\n      :effect (and (hanged ?s) (at ?s ?l))\n   )\n\n)",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action drop ; drop down an item and remove it from the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?item) (not (at ?item ?l1)))\n      :effect (and (not (inventory ?p ?item)) (at ?item ?l1))\n   )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action make_horizontal_bar ; Make a horizontal bar with a branch to hang your snare\n      :parameters (?b - branch ?p - player ?bar - bar) \n      :precondition (and (inventory ?p ?b))\n      :effect (and (not (inventory ?p ?b)) (inventory ?p ?bar))\n   )"
        ],
        "goal_state": "((at shelter west_plain) (at npc west_plain))"
    },
    {
        "task": "prepare-for-attack",
        "step": [
            "get phone bedroom npc",
            "get ipad bedroom npc",
            "go down npc bedroom kitchen",
            "get aluminum_foil kitchen npc",
            "get laptop kitchen npc",
            "go down npc kitchen basement",
            "get trashcan basement npc",
            "get trashlid basement npc",
            "get nintendo_switch basement npc",
            "create_cage npc basement",
            "put_in_cage npc basement phone",
            "put_in_cage npc basement nintendo_switch",
            "put_in_cage npc basement laptop",
            "put_in_cage npc basement ipad",
            "close_cage npc basement"
        ],
        "desc": [
            "You can drive it if you absolutely have to, but it’s safer to stay off of the roads if you can."
        ],
        "action": [
            "(:action get\n      :parameters (?it - item ?l - location ?p - player)\n      :precondition (and (at ?it ?l) (at ?p ?l))\n      :effect (and (inventory ?p ?it) (not (at ?it ?l)))\n   )",
            "(:action close_cage ; Close the farraday cage\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at farraday_cage ?loc) (inventory ?p trashlid))\n      :effect (cage_closed farraday_cage)\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action put_in_cage ; put item in the farraday cage\n      :parameters (?p - player ?loc - location ?it - item)\n      :precondition (and (at farraday_cage ?loc) (inventory ?p ?it))\n      :effect (and (in_cage ?it) (not (inventory ?p ?it))  (not (cage_closed farraday_cage)))\n   )\n\n)",
            "(:action create_cage ; create a farraday cage\n      :parameters (?p - player ?loc - location)\n      :precondition (and (inventory ?p trashcan) (inventory ?p aluminum_foil))\n      :effect (and (at farraday_cage ?loc) (not (inventory ?p trashcan)) (not (inventory ?p aluminum_foil)))\n   )"
        ],
        "goal_state": "((in_cage phone) (in_cage ipad) (in_cage laptop) (in_cage nintendo_switch) (cage_closed farraday_cage))"
    },
    {
        "task": "make_fire",
        "step": [
            "go east npc camp path",
            "go east npc path riverside",
            "go north npc riverside rainforest",
            "get_wood npc wood rainforest",
            "go south npc rainforest riverside",
            "make_drill npc wood drill",
            "make_fire npc drill riverside"
        ],
        "desc": [
            "The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.",
            "If you don’t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick."
        ],
        "action": [
            "(:action make_fire ; make fire at a location\n      :parameters (?p - player ?drill - drill ?loc - location) \n      :precondition (and (inventory ?p ?drill) (at ?p ?loc) (not (has_fire ?loc)))\n      :effect (and (has_fire ?loc))\n   )",
            "(:action make_drill ; make a drill using wood to create fire\n      :parameters (?p - player ?wood - wood ?drill - drill) \n      :precondition (and (inventory ?p ?wood) (not (inventory ?p ?drill)))\n      :effect (and (inventory ?p ?drill))\n   )",
            "(:action get_wood ; get wood from a location that has trees\n      :parameters (?p - player ?wood - wood ?loc - location) \n      :precondition (and (at ?p ?loc) (has_tree ?loc) (not (inventory ?p ?wood)))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ],
        "goal_state": "((has_fire riverside))"
    },
    {
        "task": "collect_water",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff waterfall",
            "get_water npc waterfall water"
        ],
        "desc": [
            "Search for a source of fresh water."
        ],
        "action": [
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)) (not (strained ?water)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ],
        "goal_state": "((inventory npc water))"
    },
    {
        "task": "remove_players",
        "step": [
            "gather_info npc ss",
            "set_dress_code npc ss",
            "set_meeting_location npc ss",
            "create_name npc ss",
            "create_secret npc ss",
            "secret_society_is_ready npc ss",
            "initiate_new_member npc adrian ss",
            "initiate_new_member npc chris ss",
            "initiate_new_member npc lara ss",
            "teach_new_member_secret npc adrian ss",
            "teach_new_member_secret adrian chris ss",
            "teach_new_member_secret adrian lara ss",
            "remove_member anish ss",
            "check_if_cult adrian chris lara npc ss"
        ],
        "desc": [
            "Conduct a proper initiation for you and your closest friend. This should be done before you initiate others. That way, you are sure to come up with a good idea. The initiation is one of the most important parts of the society. It has to be something neither of you would do normally. Candle-lighting sets a serious and official tone, which is always good. Secret names are fun to have.",
            "An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.",
            "There needs to be a way to get rid of someone if they become bad for the group or start talking—like blabbing the society's secret. If they do, pretend like that was never the secret, but immediately create a new secret. Put this in the rules.",
            "Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.",
            "Initiate well to do people in the society. In a school, initiate the most brilliant and enthusiastic students that seem like clique-material, and they will motivate and inspire others. But you don't want to have too many members. The more members, the less secret it is. Five to ten should be good.",
            "Think of a name. You and your closest friend should discuss what your secret society should be called.",
            "Create a secret or a secret mission. A secret society must have something to protect.",
            "Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were."
        ],
        "action": [
            "(:action set_meeting_location ; determine a regular secret meeting location for the society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_location ?sc)))\n      :effect (and (has_location ?sc))\n   )",
            "(:action gather_info ; read books to gather information on how to create a secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (has_info ?p)))\n      :effect (and (has_info ?p))\n   )",
            "(:action create_secret ; create secret for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_secret ?sc)))\n      :effect (and (has_secret ?sc) (knows_secret ?p ?sc))\n   )",
            "(:action check_if_cult ; check if the group is large enough for a cult\n      :parameters (?p1 - player ?p2 - player ?p3 - player ?p4 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (not (equals ?p1 ?p2)) (not (equals ?p1 ?p3)) (not (equals ?p1 ?p4)) (not (equals ?p2 ?p3)) (not (equals ?p2 ?p4)) (not (equals ?p3 ?p4)) (in ?p1 ?sc) (in ?p2 ?sc) (in ?p3 ?sc) (in ?p4 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (is_trusted ?p3 ?sc) (is_trusted ?p4 ?sc) (knows_secret ?p1 ?sc) (knows_secret ?p2 ?sc) (knows_secret ?p3 ?sc) (knows_secret ?p4 ?sc))\n      :effect (and (is_cult ?sc))\n   )\n)",
            "(:action initiate_new_member ; add a new member to secret society\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (society_is_ready ?sc) (in ?p1 ?sc) (is_trusted ?p2 ?sc) (friends ?p1 ?p2) (not (in ?p2 ?sc)))\n      :effect (and (in ?p2 ?sc))\n   )",
            "(:action teach_new_member_secret ; once a new member becomes trustworthy, teach them the secret\n      :parameters (?p1 - player ?p2 - player ?sc - secret_society)\n      :precondition (and (in ?p1 ?sc) (in ?p2 ?sc) (is_trusted ?p1 ?sc) (is_trusted ?p2 ?sc) (knows_secret ?p1 ?sc) (not (knows_secret ?p2 ?sc)))\n      :effect (and (knows_secret ?p2 ?sc))\n   )",
            "(:action set_dress_code ; determines the dress code for the secret society\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (has_info ?p) (not (has_dress_code ?sc)))\n      :effect (and (has_dress_code ?sc))\n   )",
            "(:action create_name ; create name for a secret society\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (has_info ?p) (in ?p ?sc) (not (has_name ?sc)))\n      :effect (and (has_name ?sc))\n   )",
            "(:action remove_member ; remove an existing society member due to untrustworthiness\n      :parameters (?p - player ?sc - secret_society)\n      :precondition (and (in ?p ?sc) (not (is_trusted ?p ?sc)))\n      :effect (and (not (in ?p ?sc)))\n   )",
            "(:action secret_society_is_ready ; check that all prequisites of the secret society are complete\n      :parameters (?p - player ?sc - secret_society) \n      :precondition (and (not (society_is_ready ?sc)) (has_name ?sc) (has_dress_code ?sc) (has_location ?sc) (has_info ?p) (has_secret ?sc))\n      :effect (and (society_is_ready ?sc))\n   )"
        ],
        "goal_state": "((not (in anish ss)) (is_cult ss))"
    },
    {
        "task": "build_fire",
        "step": [
            "go east npc shore forest_edge",
            "go east npc forest_edge forest",
            "gather_tinder npc forest tinder",
            "get softwood npc forest",
            "build_campfire npc forest tinder campfire",
            "get hardwood_stick npc forest",
            "light_campfire npc forest softwood hardwood_stick campfire"
        ],
        "desc": [
            "Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:",
            "You can also try a swim-float-swim technique, where you swim and then roll and float on your back."
        ],
        "action": [
            "(:action build_campfire\n        :parameters (?p -player ?loc - location ?tinder - tinder ?campfire - campfire)\n        :precondition (and (at ?p ?loc) (inventory ?p ?tinder))\n        :effect (and (at ?campfire ?loc) (not (inventory ?p ?tinder)))\n    )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n        :parameters (?p - player ?loc - location ?water - water) \n        :precondition (and (at ?p ?loc) (has_freshwater_source ?loc))\n        :effect (and (inventory ?p ?water) (not (treated ?water)))\n    )",
            "(:action light_campfire\n        :parameters (?p -player ?loc - location ?softwood - softwood ?hardwood - hardwood_stick ?campfire - campfire)\n        :precondition (and (at ?p ?loc) (at ?campfire ?loc) (not (lit ?campfire)) (inventory ?p ?softwood) (inventory ?p ?hardwood))\n        :effect (and (lit ?campfire))\n    )",
            "(:action gather_tinder\n        :parameters (?p - player ?loc - location ?tinder - tinder)\n        :precondition (and (at ?p ?loc) (has_tinder ?loc))\n        :effect (and (inventory ?p ?tinder))\n    )",
            "(:action get ; pick up an item and put it in the inventory\n        :parameters (?item - item ?p - player ?l1 - location) \n        :precondition (and (at ?p ?l1) (at ?item ?l1))\n        :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n    )",
            "(:action go ; navigate to an adjacent location \n        :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n        :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n        :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n    )"
        ],
        "goal_state": "((lit campfire))"
    },
    {
        "task": "collect_fuel",
        "step": [
            "get axe npc camp",
            "go west npc camp path",
            "go south npc path oaks",
            "log_oak npc oaks axe oak_log",
            "get oak_log npc oaks",
            "stack_log npc oak_log log_stack"
        ],
        "desc": [
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )",
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )"
        ],
        "goal_state": "((inventory npc log_stack))"
    },
    {
        "task": "boil_water",
        "step": [
            "get pot npc camp",
            "go west npc camp path",
            "go south npc path oaks",
            "log_oak npc oaks pot oak_log",
            "get flat_wood npc oaks",
            "get oak_log npc oaks",
            "go north npc oaks path",
            "go north npc path grassland",
            "go north npc grassland bush",
            "break_branch npc bush branch_piece",
            "get_branch npc bush branch",
            "get branch_piece npc bush",
            "go south npc bush grassland",
            "get_water npc grassland water pot",
            "get grass npc grassland",
            "go south npc grassland path",
            "go east npc path camp",
            "cluster_grass npc grass grass_tinder",
            "stack_log npc oak_log log_stack",
            "build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure",
            "ignite_wood npc camp flat_wood branch teepee_structure",
            "ignite_teepee npc camp flat_wood teepee_structure",
            "boil_water npc camp teepee_structure water"
        ],
        "desc": [
            "Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.",
            "Search for a source of fresh water.",
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.",
            "Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.",
            "Use dry sticks, branches, or tree bark to serve as your kindling.",
            "Melt snow or ice if you can find some. If you find ice or snow on the ground in the woods, collect it so you can melt it down for fresh drinking water. You can place the ice or snow in a container and place it next to a fire to melt it or you can hold the container to use your body heat to melt it.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )",
            "(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )",
            "(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action ignite_teepee ; ignite teepe with ignited wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (ignited ?wood))\n      :effect (and (ignited ?teepee))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )",
            "(:action boil_water ; boil water using a started fire pit\n      :parameters (?p - player ?loc - location ?teepee - teepee ?water - water)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (ignited ?teepee) (inventory ?p ?water))\n      :effect (and (boiled ?water))\n   )\n)",
            "(:action ignite_wood ; ignite wood by plough it to create heat via friction\n      :parameters (?p - player ?loc - location ?wood - wood ?branch - branch ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (inventory ?p ?branch))\n      :effect (and (ignited ?wood))\n   )",
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )"
        ],
        "goal_state": "((inventory npc water) (boiled water))"
    },
    {
        "task": "build_teepee",
        "step": [
            "go west npc camp path",
            "go north npc path grassland",
            "go north npc grassland bush",
            "break_branch npc bush branch_piece",
            "get branch_piece npc bush",
            "go south npc bush grassland",
            "get grass npc grassland",
            "go south npc grassland path",
            "go south npc path oaks",
            "log_oak npc oaks grass oak_log",
            "get oak_log npc oaks",
            "go north npc oaks path",
            "go east npc path camp",
            "cluster_grass npc grass grass_tinder",
            "stack_log npc oak_log log_stack",
            "build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure"
        ],
        "desc": [
            "Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.",
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )",
            "(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )",
            "(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )",
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )"
        ],
        "goal_state": "((at teepee_structure camp))"
    },
    {
        "task": "pick_easy_lock",
        "step": [
            "go east npc living_room office",
            "go east npc office kitchen",
            "get credit_card npc kitchen",
            "go west npc kitchen office",
            "go west npc office living_room",
            "go up npc living_room hallway",
            "go east npc hallway bathroom",
            "go east npc bathroom bedroom",
            "pick_lock_with_card npc bedroom"
        ],
        "desc": [
            "Put the credit card into the side of the door. Slide the long end of a credit card in between the door frame and the locking side of the door, just above where the lock enters the frame."
        ],
        "action": [
            "(:action pick_lock_with_card ; pick lock\n      :parameters (?p - player ?loc - location) \n      :precondition (and (at ?p ?loc) (has_easy_lock ?loc) (inventory ?p credit_card)) \n      :effect (not (has_easy_lock ?loc))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ],
        "goal_state": "((not (has_easy_lock bedroom)))"
    },
    {
        "task": "listen_to_astronomers_predictions_and_move",
        "step": [
            "listen_to_astronomers_predictions npc home",
            "move_away npc philly salt_lake home"
        ],
        "desc": [
            "Move away from coastal areas. Because the earth is made up of 71% water, there’s a greater likelihood that the comet will hit a body of water. If this does happen, it could mean that giant tsunamis would be created by the initial impact and they would likely destroy our coastal cities. Additionally, there would be an increase in water vapor entering our atmosphere which would cause heavy rain, which could cause landslides and flooding.",
            "Pay attention to astronomers’ predictions on any possible collisions with earth. NASA currently has astronomers that track comets that are flying in our solar system. As a result, there’s a very good chance they will know if there is a large object about to collide with us. By listening to their predictions, you can develop a real sense of how much time you have to prepare."
        ],
        "action": [
            "(:action move_away ; flight from coastal area to inland area \n      :parameters (?p - player ?c1 - city ?c2 - city ?l1 - location) \n      :precondition (and (in ?p ?c1) (coastal ?c1) (inland ?c2) (listen_to_broadcast ?p ?l1))\n      :effect (and (in ?p ?c2) (not (in ?p ?c1)))\n   )",
            "(:action listen_to_astronomers_predictions ; listen to astronomers predictions on collision with earth\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (has_pc ?p))\n      :effect (and (listen_to_broadcast ?p ?l1))\n   )"
        ],
        "goal_state": "((listen_to_broadcast npc home) (in npc Salt_Lake))"
    },
    {
        "task": "1-cook-food",
        "step": [
            "go west npc bedroom livingroom",
            "go west npc livingroom kitchen",
            "cook npc kitchen clams",
            "cook npc kitchen soup",
            "cook npc kitchen stirfry",
            "cook npc kitchen sushi",
            "cook npc kitchen teriyaki",
            "go east npc kitchen livingroom",
            "drop teriyaki npc livingroom",
            "drop stirfry npc livingroom",
            "drop soup npc livingroom",
            "drop sushi npc livingroom",
            "drop clams npc livingroom"
        ],
        "desc": [
            "Serve beverages. There are various Japanese-themed drinks you can serve at your party. If it’s a kid’s party, you’ll of course want to stick to non-alcoholic options. If it’s an adult party, you may want to include both alcoholic and non-alcoholic beverage choices."
        ],
        "action": [
            "(:action cook\n    :parameters (?p - player ?l - location ?f - food)\n    :precondition (and (has_kitchen ?l) (at ?p ?l))\n    :effect (inventory ?p ?f)\n  )",
            "(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action drop\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (inventory ?p ?obj))\n    :effect (and (at ?obj ?l) (not (inventory ?p ?obj)))\n  )"
        ],
        "goal_state": "((at stirfry livingroom) (at sushi livingroom) (at soup livingroom) (at clams livingroom) (at teriyaki livingroom))"
    },
    {
        "task": "remove_fibre_from_coconut_meat",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "get towel",
            "flip coconut glass glass_filled",
            "wrap coconut glass_filled coconut_wrapped towel",
            "get mallet",
            "hit coconut_wrapped mallet coconut_broken",
            "free coconut_meat screwdriver coconut_broken",
            "get peeler",
            "remove_fiber coconut_meat peeler coconut_meat_peeled"
        ],
        "desc": [
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Poke a hole in the “eye” of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or “eyes” at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it’s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.",
            "Alternatively, strike the coconut against a concrete surface. If you don’t have a hammer or mallet, you can use a solid surface like a porch or possibly a concrete countertop. Try to strike the coconut’s equator against the corner of this surface, using it as a makeshift wedge. Repeatedly strike the coconut all around its equator until the coconut breaks apart.",
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step."
        ],
        "action": [
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action wrap ; wrap the coconut\n      :parameters (?c - coconut ?cow - container_with_water ?cw - coconut_wrapped ?t - towel) \n      :precondition (and (inventory ?c) (inventory ?t) (inventory ?cow))\n      :effect (and (not (inventory ?c)) (inventory ?cw))\n   )",
            "(:action hit ; hit the wrapped coconut with a mallet\n      :parameters (?cw - coconut_wrapped ?m - mallet ?cb - coconut_broken) \n      :precondition (and (inventory ?m) (inventory ?cw))\n      :effect (and (not (inventory ?cw)) (inventory ?cb))\n   )",
            "(:action free ; run a knife between the shell and the meat to free it\n      :parameters (?cm - coconut_meat ?t - tool ?cb - coconut_broken) \n      :precondition (and (inventory ?t) (inventory ?cb))\n      :effect (and (not (inventory ?cb)) (inventory ?cm))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )",
            "(:action remove_fiber ; remove the fiber from the meat\n      :parameters (?cm - coconut_meat ?p - peeler ?cp - coconut_meat_peeled) \n      :precondition (and (inventory ?p) (inventory ?cm))\n      :effect (and (not (inventory ?cm)) (inventory ?cp))\n   )\n)",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )"
        ],
        "goal_state": "((inventory coconut_meat_peeled))"
    },
    {
        "task": "throw-hotdogs",
        "step": [
            "go east npc kitchen hallway",
            "thaw_food items npc",
            "lay_masking_tape masking_tape npc hallway",
            "throw items npc hallway"
        ],
        "desc": [
            "Select a food item to throw. There are a couple of qualifications. First, it must be long, thin, hard, and straight, like a frozen hot dog, for example. Second, it must be a reasonably stiff item. Third, it should be somewhere between 15 and 20 cm (6-8 inches) long; the experiment can be performed otherwise, but read on, and you will see why this size is optimal. There are lots of other items that fit these criteria including Otter Pops, celery, and churros. (If you simply can't come to grips with throwing perfectly good food, see the Tips section for some additional ideas.)",
            "Lay down masking tape in parallel strips across the floor as far apart as your projectile is long. The strips should be perpendicular to the direction you will be throwing. If your item is 15-45 cm (6-18 inches) long, lay down about 6-10 strips; lay down fewer if longer and more if shorter."
        ],
        "action": [
            "(:action lay_masking_tape ; lay masking tape\n      :parameters (?object - masking_tape ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (inventory ?p ?object) (has_ten_strips ?object))\n      :effect (and (not (has_ten_strips ?object)) (has_ten_strips ?l1))\n   )",
            "(:action throw ; throw food items\n      :parameters (?object - items ?p - player ?l1 - location) \n      :precondition (and \n      (at ?p ?l1)\n      (has_throwing_distance ?l1) \n      (is_clear ?l1) \n      (is_food_item ?object) \n      (is_long ?object) \n      (is_thin ?object) \n      (is_hard ?object) \n      (is_straight ?object) \n      (is_stiff ?object) \n      (has_ten_strips ?l1) \n      (not (frozen ?object))\n      )\n      :effect (thrown_food_items ?l1)\n   )",
            "(:action record_tosses ; record tosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (tosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (tosses_recorded ?object)\n   )",
            "(:action thaw_food ; thaw food items\n      :parameters (?object - items ?p - player)\n      :precondition (and (inventory ?p ?object) (is_food_item ?object) (frozen ?object))\n      :effect (not (frozen ?object))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action record_crosses ; record crosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (crosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (crosses_recorded ?object)\n   )"
        ],
        "goal_state": "((thrown_food_items hallway))"
    },
    {
        "task": "get-materials",
        "step": [
            "go north npc foyer hallway",
            "go west npc hallway kitchen",
            "get items npc kitchen",
            "go east npc kitchen hallway",
            "go east npc hallway study",
            "get pen npc study",
            "get paper npc study",
            "thaw_food items npc"
        ],
        "desc": [],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?object - object ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?object ?l1) (is_gettable ?object))\n      :effect (and (inventory ?p ?object) (not (at ?object ?l1)))\n   )",
            "(:action thaw_food ; thaw food items\n      :parameters (?object - items ?p - player)\n      :precondition (and (inventory ?p ?object) (is_food_item ?object) (frozen ?object))\n      :effect (not (frozen ?object))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )"
        ],
        "goal_state": "((inventory npc paper) (inventory npc pen) (inventory npc items) (not (frozen items)))"
    },
    {
        "task": "dehydration",
        "step": [
            "go west npc basecamp bamboo_forrest",
            "get_bamboo_container npc bamboo_forrest",
            "go east npc bamboo_forrest basecamp",
            "get stone npc basecamp",
            "go east npc basecamp jungle",
            "get wood npc jungle",
            "collect_rain_water npc jungle",
            "create_fire npc jungle",
            "treat_water npc jungle",
            "drink_water npc"
        ],
        "desc": [
            "Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "Collect rainfall from leaves and bamboo stalks. Look for large leaves that collect rainfall and bend them into a funnel to pour the water into a bottle or straight into your mouth. Bend bamboo stalks to let the water that collects in the compartments flow out into a container or break the bamboo compartment off at the line that goes across the stalk to use it as a water bottle.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water."
        ],
        "action": [
            "(:action create_fire\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (inventory ?p stone) (inventory ?p wood))\n      :effect (and (at fire ?loc) (not (inventory ?p stone)) (not (inventory ?p wood)))\n   )",
            "(:action treat_water\n      :parameters (?p - player ?loc - location)\n      :precondition (and (inventory ?p water) (not (treated water)) (at fire ?loc))\n      :effect (and (treated water))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_bamboo_container; get a bamboo container using surrounding bamboo\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (has_bamboo ?loc))\n      :effect (inventory ?p bamboo_container)\n   )",
            "(:action collect_rain_water\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (inventory ?p bamboo_container) (has_rainfall ?loc))\n      :effect (and (inventory ?p water) (not (treated water)))\n   )",
            "(:action drink_water\n      :parameters (?p - player)\n      :precondition (and (inventory ?p water) (treated water))\n      :effect (not (is dehydrated ?p))\n   )"
        ],
        "goal_state": "((not (is dehydrated npc)))"
    },
    {
        "task": "get_materials",
        "step": [
            "get knife npc home",
            "get linen_sheets npc home",
            "get rolling_pin npc home",
            "get water npc home",
            "get wooden_boards npc home"
        ],
        "desc": [],
        "action": [
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l - location)\n      :precondition (and (at ?p ?l) (at ?item ?l) (not (not_gettable ?item)))\n      :effect (and (inventory ?p ?item))\n  )"
        ],
        "goal_state": "((inventory npc knife) (inventory npc rolling_pin) (inventory npc water) (inventory npc wooden_boards) (inventory npc linen_sheets))"
    },
    {
        "task": "catch_cook_fish",
        "step": [
            "go west person beach ocean",
            "get rock person ocean",
            "go east person ocean beach",
            "get tinder person beach",
            "go east person beach jungle",
            "chop_wood person jungle wood",
            "get vines person jungle",
            "carve_groove person wood rock",
            "make_weapon rock person wood vines spear",
            "light_fire person wood beach tinder fire",
            "hunt_fish person river spear fish",
            "cook_fish person fish fire beach"
        ],
        "desc": [
            "Heating the water above 185° F (85° C) for three minutes will kill all pathogens in your water.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island."
        ],
        "action": [
            "(:action carve_groove ; create a grove in wood to light flint.\n      :parameters (?p - player ?wood - wood ?rock - rock) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?rock) (not (groove ?wood)))\n      :effect (and (groove ?wood))\n   )",
            "(:action light_fire ; light a fire\n      :parameters (?p - player ?wood - wood ?loc - location ?tinder - tinder ?fire - fire) \n      :precondition (and (inventory ?p ?wood) (inventory ?p ?tinder) (can_light_fire ?loc) (groove ?wood))\n      :effect (and (at ?fire ?loc) (not (inventory ?wood)) (not (groove ?wood)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action cook_fish ; cook fish \n      :parameters (?p - player ?fish - fish ?fire - fire ?loc - location) \n      :precondition (and (inventory ?p ?fish) (at ?fire ?loc))\n      :effect (and (cooked ?fish))\n   )   \n)",
            "(:action make_weapon ; create a spear to hunt fish \n      :parameters (?rock - rock ?p - player ?wood - wood ?vines - vines ?spear - spear) \n      :precondition (and (inventory ?p ?rock) (inventory ?p ?vines) (inventory ?p ?wood))\n      :effect (and (inventory ?p ?spear))\n   )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action hunt_fish ; catch fish with spear\n      :parameters (?p - player ?loc - location ?spear - spear ?fish - fish) \n      :precondition (and (inventory ?p ?spear) (has_fish ?loc))\n      :effect (and (inventory ?p ?fish))\n   )",
            "(:action chop_wood ; chop down wood from a nearby tree.\n      :parameters (?p - player ?loc - location ?wood - wood) \n      :precondition (and (at ?p ?loc) (has_wood ?loc))\n      :effect (and (inventory ?p ?wood) (not (groove ?wood)))\n   )"
        ],
        "goal_state": "((cooked fish))"
    },
    {
        "task": "start_fire",
        "step": [
            "go west npc camp path",
            "go north npc path grassland",
            "go north npc grassland bush",
            "break_branch npc bush branch_piece",
            "get_branch npc bush branch",
            "get branch_piece npc bush",
            "go south npc bush grassland",
            "get grass npc grassland",
            "go south npc grassland path",
            "go south npc path oaks",
            "log_oak npc oaks branch oak_log",
            "get flat_wood npc oaks",
            "get oak_log npc oaks",
            "go north npc oaks path",
            "go east npc path camp",
            "cluster_grass npc grass grass_tinder",
            "stack_log npc oak_log log_stack",
            "build_teepee npc camp grass_tinder branch_piece log_stack teepee_structure",
            "ignite_wood npc camp flat_wood branch teepee_structure",
            "ignite_teepee npc camp flat_wood teepee_structure"
        ],
        "desc": [
            "Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.",
            "Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.",
            "Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.",
            "Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.",
            "Use dry sticks, branches, or tree bark to serve as your kindling.",
            "Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder."
        ],
        "action": [
            "(:action build_teepee ; build a teepee structure with tinder, kindling, and fuel logs\n      :parameters (?p - player ?loc - location ?tinder - tinder ?kindling - kindling ?fuel_logs - fuel ?teepee - teepee)\n      :precondition (and (inventory ?p ?tinder) (inventory ?p ?kindling) (inventory ?p ?fuel_logs) (has_dry_even_area ?loc) (at ?p ?loc))\n      :effect (and (at ?teepee ?loc) (not (inventory ?p ?tinder)) (not (inventory ?p ?kindling)) (not (inventory ?p ?fuel_logs)))\n   )",
            "(:action get_grass ; gather grass that is not dry at the first time\n      :parameters (?p - player ?loc - location ?grass - grass)\n      :precondition (and (at ?p ?loc) (at ?grass ?loc))\n      :effect (and (inventory ?p ?grass) (not (dry ?grass)))\n   )",
            "(:action get_branch ; gather a solid branch to start fire\n      :parameters (?p - player ?loc - location ?branch - branch)\n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (inventory ?p ?branch))\n   )",
            "(:action break_branch ; break larger branches into smaller pieces\n      :parameters (?p - player ?loc - location ?branch_piece - kindling) \n      :precondition (and (at ?p ?loc) (has_large_dry_branch ?loc))\n      :effect (and (at ?branch_piece ?loc))\n   )",
            "(:action get_pot ; retrieve a pot to hold water\n      :parameters (?p - player ?loc - location ?pot - pot)\n      :precondition (and (at ?p ?loc) (at ?pot ?loc))\n      :effect (and (inventory ?p ?pot))\n   )",
            "(:action get_water ; retrieve some natural but possibly contaminated water\n      :parameters (?p - player ?loc - location ?water - water ?pot - pot)\n      :precondition (and (at ?p ?loc) (has_pond ?loc) (inventory ?p ?pot))\n      :effect (and (inventory ?p ?water))\n   )",
            "(:action get_wood ; gather a flat piece of solid wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood)\n      :precondition (and (at ?p ?loc) (at ?wood ?loc))\n      :effect (and (inventory ?p ?wood))\n   )",
            "(:action log_oak ; log oak trees\n      :parameters (?p - player ?loc - location ?axe - item ?oak_log - log) \n      :precondition (and (at ?p ?loc) (has_dry_oak ?loc) (inventory ?p ?axe))\n      :effect (and (at ?oak_log ?loc) (dry ?oak_log))\n   )",
            "(:action cluster_grass ; cluster gatherd dry grass to make tinder\n      :parameters (?p - player ?dry_grass - grass ?grass_tinder - tinder) \n      :precondition (and (inventory ?p ?dry_grass))\n      :effect (and (inventory ?p ?grass_tinder) (not (inventory ?p ?dry_grass)))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action ignite_teepee ; ignite teepe with ignited wood to start fire\n      :parameters (?p - player ?loc - location ?wood - wood ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (ignited ?wood))\n      :effect (and (ignited ?teepee))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action stack_log ; stack dry logs to make enough fuel \n      :parameters (?p - player ?oak_log - log ?log_stack - fuel) \n      :precondition (and (inventory ?p ?oak_log))\n      :effect (and (inventory ?p ?log_stack) (not (inventory ?p ?oak_log)))\n   )",
            "(:action ignite_wood ; ignite wood by plough it to create heat via friction\n      :parameters (?p - player ?loc - location ?wood - wood ?branch - branch ?teepee - teepee)\n      :precondition (and (at ?p ?loc) (at ?teepee ?loc) (inventory ?p ?wood) (inventory ?p ?branch))\n      :effect (and (ignited ?wood))\n   )",
            "(:action get_log ; log oak trees\n      :parameters (?p - player ?loc - location ?oak_log - log) \n      :precondition (and (at ?p ?loc) (at ?oak_log ?loc) (dry ?oak_log))\n      :effect (and (inventory ?p ?oak_log))\n   )"
        ],
        "goal_state": "((ignited teepee_structure))"
    },
    {
        "task": "fill-inventory",
        "step": [
            "go south npc parkinglot pond",
            "get_water npc pond water",
            "go north npc pond parkinglot",
            "go north npc parkinglot park",
            "go east npc park store",
            "get npc store bandage",
            "go west npc store park",
            "go west npc park car",
            "go west npc car brickhouse",
            "loot_shelter npc brickhouse food"
        ],
        "desc": [
            "Purify any water you drink that isn’t from a sealed bottle. A waterborne illness can be life-threatening in a survival situation. If need to use any unbottled water for drinking, always purify it first. The most common method is boiling the water for 1 minute to kill any pathogens. Then filter out larger objects by pouring the water through a fine net or cloth.",
            "Learn basic first-aid to treat minor injuries. Injuries are unfortunately inevitable, and they can range from minor to serious. Develop at least a basic knowledge of first aid to treat the injuries you or a partner may encounter. When searching for supplies, take any first aid gear you may find and build a basic first aid kit."
        ],
        "action": [
            "(:action gofish \n      :parameters (?p - player ?l - location ?fp - fishingpole ?f - fish)\n      :precondition (and (at ?p ?l) (inventory ?p ?fp) (haslake ?l) (at ?f ?l))\n      :effect (and (gettable ?f) )\n   )",
            "(:action go\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get\n      :parameters (?p - player ?l - location ?i - item)\n      :precondition (and (at ?p ?l) (at ?i ?l) (gettable ?i))\n      :effect (and (not (at ?i ?l)) (inventory ?p ?i))\n   )",
            "(:action loot_shelter ; steal food from location that is occupied.\n      :parameters (?p - player ?loc - location ?food - food) \n      :precondition (and (at ?food ?loc) (at ?p ?loc) (is_occupied ?loc))\n      :effect (and (inventory ?p ?food) (not (at ?food ?loc)))\n   )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n      :parameters (?p - player ?loc - location ?water - water) \n      :precondition (and (at ?p ?loc) (has_water_source ?loc))\n      :effect (and (inventory ?p ?water) (not (treated ?water)))\n   )",
            "(:action barter_food_for_healing ; get food in exchange for healing.\n      :parameters (?p - player ?p_inj - player ?water - water ?bandage - bandage ?food - food ?l -location) \n      :precondition (and (inventory ?p ?water) (inventory ?p ?bandage) (is_injured ?p_inj) (at ?p ?l) (at ?p_inj ?l))\n      :effect (and (not (is_injured ?p_inj)) (gettable ?food)  )\n   )\n\n   \n)",
            "(:action break_car_window ; steal food from car.\n      :parameters (?p - player ?car - car ?rock - rock ?item - item) \n      :precondition (and (at ?p ?car) (inventory ?p ?rock) (has_windows ?car) (at ?item ?car))\n      :effect (and (gettable ?item) (not (inventory ?p ?rock)) (not (has_windows ?car)))\n   )"
        ],
        "goal_state": "((inventory npc water) (inventory npc food) (inventory npc bandage))"
    },
    {
        "task": "wrap_the_coconut_in_towel",
        "step": [
            "get screwdriver",
            "get coconut",
            "poke coconut screwdriver",
            "get glass",
            "get towel",
            "flip coconut glass glass_filled",
            "wrap coconut glass_filled coconut_wrapped towel"
        ],
        "desc": [
            "Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.",
            "Poke a hole in the “eye” of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or “eyes” at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it’s bored through the shell), remove it by wiggling it out, widening the new hole in the process.",
            "Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step."
        ],
        "action": [
            "(:action flip ; turn the coconut upside down\n      :parameters (?c - coconut ?co - container_without_water ?cow - container_with_water) \n      :precondition (and (inventory ?co) (inventory ?c) (has_eyes_poked ?c))\n      :effect (and (not (inventory ?co)) (inventory ?cow))\n   )",
            "(:action wrap ; wrap the coconut\n      :parameters (?c - coconut ?cow - container_with_water ?cw - coconut_wrapped ?t - towel) \n      :precondition (and (inventory ?c) (inventory ?t) (inventory ?cow))\n      :effect (and (not (inventory ?c)) (inventory ?cw))\n   )",
            "(:action hit ; hit the wrapped coconut with a mallet\n      :parameters (?cw - coconut_wrapped ?m - mallet ?cb - coconut_broken) \n      :precondition (and (inventory ?m) (inventory ?cw))\n      :effect (and (not (inventory ?cw)) (inventory ?cb))\n   )",
            "(:action get ; pick up a item and put it in the inventory\n      :parameters (?item - item) \n      :precondition (and (not (is_item_container_with_water ?item)) (not (is_item_wrapped_coconut ?item)) (not (is_item_broken_coconut ?item)) (not (is_item_coconut_meat_peeled ?item)) (not (is_item_coconut_meat ?item)) (not (inventory ?item)))\n      :effect (and (inventory ?item))\n   )",
            "(:action poke ; poke a hole in the top of the coconut\n      :parameters (?c - coconut ?tool - tool) \n      :precondition (and (inventory ?tool) (inventory ?c) (not (has_eyes_poked ?c)))\n      :effect (and (has_eyes_poked ?c))\n   )"
        ],
        "goal_state": "((inventory coconut_wrapped))"
    },
    {
        "task": "hunt_animal_for_food",
        "step": [
            "get stick2 npc camp",
            "sharpen_stick npc stick2",
            "go north npc camp beach",
            "get_shellfish npc beach shellfish",
            "catch_fish npc beach fish stick2",
            "go south npc beach camp",
            "go west npc camp path",
            "hunt_insect npc path insect",
            "go west npc path cliff",
            "go up npc cliff clifftop",
            "start_fire npc clifftop stick2",
            "cook npc clifftop shellfish",
            "hunt_bird npc clifftop bird stick2"
        ],
        "desc": [
            "Heating the water above 185° F (85° C) for three minutes will kill all pathogens in your water.",
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island.",
            "Test the food you eat for poison. If you've never eaten the fruit that you find on the island, test it for poison by rubbing it on a sensitive part of your skin, like your wrist. Wait 45 minutes. If there is no adverse reaction, rub some of the food on your lips. If you form a rash, or there is burning or irritation, then the food is most likely poisonous. Never eat large amounts of any unknown food. Eat a small amount, wait an hour or two to see if you feel sick, then eat the rest of it."
        ],
        "action": [
            "(:action cook ; cook to make animal edible\n     :parameters (?p - player ?loc - location ?animal - animal)\n     :precondition (and (at ?p ?loc) (inventory ?p ?animal) (has_fire ?loc))\n     :effect (and (inventory ?p ?animal) (edible ?animal))\n  )",
            "(:action hunt_insect ; catch an insect from a location that has insects.\n     :parameters (?p - player ?loc - location ?insect - insect)\n     :precondition (and (at ?p ?loc) (has_insect ?loc))\n     :effect (and (inventory ?p ?insect) (edible ?insect))\n  )",
            "(:action start_fire ; start a fire at a location\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (has_fire ?loc))\n  )",
            "(:action get_leave ; get leaves for shelter construction\n     :parameters (?p - player ?loc - location ?leave - leave)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?leave))\n  )",
            "(:action hunt_bird ; catch a bird from a location that has birds.\n     :parameters (?p - player ?loc - location ?bird - bird ?stick - stick)\n     :precondition (and (at ?p ?loc) (has_bird ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (inventory ?p ?bird) (edible ?bird))\n  )",
            "(:action get_shellfish ; catch shellfish from a location that has fish.\n     :parameters (?p - player ?loc - location ?shellfish - shellfish)\n     :precondition (and (at ?p ?loc) (has_shellfish ?loc))\n     :effect (and (inventory ?p ?shellfish) (not (edible ?shellfish)))\n  )",
            "(:action get_stick ; get a stick from bosk\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (at ?stick ?loc))\n     :effect (and (inventory ?p ?stick) (not (sharpened ?stick)))\n  )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n     :parameters (?p - player ?loc - location ?water - water)\n     :precondition (and (at ?p ?loc) (has_water_source ?loc))\n     :effect (and (inventory ?p ?water) (not (treated ?water)))\n  )",
            "(:action go ; navigate to an adjacent location\n     :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location)\n     :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n     :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action sharpen_stick ; sharpen stick to hunt fish or bird or to use it to make a fire\n     :parameters (?p - player ?stick - stick)\n     :precondition (and (inventory ?p ?stick) (not (sharpened ?stick)))\n     :effect (and (inventory ?p ?stick) (sharpened ?stick))\n  )",
            "(:action get_tarp ; get tarp for shelter construction\n     :parameters (?p - player ?loc - location ?tarp - tarp)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?tarp))\n  )",
            "(:action get ; pick up an item and put it in the inventory\n     :parameters (?item - item ?p - player ?l1 - location)\n     :precondition (and (at ?p ?l1) (at ?item ?l1))\n     :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n  )",
            "(:action catch_fish ; catch fish from a location that has fish.\n     :parameters (?p - player ?loc - location ?fish - fish ?stick - stick)\n     :precondition (and (at ?p ?loc) (has_fish ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (inventory ?p ?fish) (edible ?fish))\n  )"
        ],
        "goal_state": "((inventory npc fish) (edible fish) (inventory npc bird) (edible bird) (inventory npc insect) (edible insect) (inventory npc shellfish) (edible shellfish))"
    }
]