[
    {
        "task": "2-serve-drinks",
        "step": [
            "get_beer npc bedroom",
            "get phone npc bedroom",
            "go west npc bedroom livingroom",
            "go west npc livingroom kitchen",
            "go north npc kitchen cupboard",
            "get teabag npc cupboard",
            "get soda npc cupboard",
            "go south npc cupboard kitchen",
            "brew npc kitchen",
            "get soymilk npc kitchen",
            "go east npc kitchen livingroom",
            "buy_sake npc",
            "serve npc tea livingroom",
            "drop soymilk npc livingroom",
            "drop soda npc livingroom",
            "drop sake npc livingroom",
            "serve npc beer livingroom"
        ],
        "desc": [
            "Cut Rice Krispie treats into circles. Attach chewy fruit snacks and Swedish fish to them with Laffy Taffy. Wrap a Fruit Roll-Up around each circle.",
            "Serve beverages. There are various Japanese-themed drinks you can serve at your party. If it’s a kid’s party, you’ll of course want to stick to non-alcoholic options. If it’s an adult party, you may want to include both alcoholic and non-alcoholic beverage choices."
        ],
        "action": [
            "(:action get_beer\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_fridge ?l) (at ?p ?l))\n    :effect (and (inventory ?p beer) (opened beer))\n  )",
            "(:action serve\n    :parameters (?p - player ?d - drink ?l - location)\n    :precondition (and (inventory ?p ?d) (opened ?d) (at ?p ?l))\n    :effect (and (not (inventory ?p ?d)) (at ?d ?l))\n  )",
            "(:action buy_sake\n    :parameters (?p - player)\n    :precondition (and (inventory ?p phone) (inventory ?p money))\n    :effect (and (inventory ?p sake) (not (inventory ?p money)))\n  )",
            "(:action brew\n    :parameters (?p - player ?l - location)\n    :precondition (and (has_kitchen ?l) (at ?p ?l) (inventory ?p teabag))\n    :effect (and (inventory ?p tea) (not (inventory ?p teabag)) (opened tea))\n  )",
            "(:action get\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (at ?obj ?l))\n    :effect (and (inventory ?p ?obj) (not (at ?obj ?l)))\n  )",
            "(:action go\n    :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n    :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n    :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action drop\n    :parameters (?obj - item ?p - player ?l - location)\n    :precondition (and (at ?p ?l) (inventory ?p ?obj))\n    :effect (and (at ?obj ?l) (not (inventory ?p ?obj)))\n  )"
        ],
        "goal_state": "((at soymilk livingroom) (at soda livingroom) (at sake livingroom) (at tea livingroom) (at beer livingroom))"
    },
    {
        "task": "stay_sheltered_with_food",
        "step": [
            "make_plan npc home",
            "walk north npc home garage",
            "get car npc garage",
            "get_in_car npc garage car",
            "drive east npc garage highway",
            "drive down npc highway mall",
            "drive east npc mall homedepot",
            "get concrete npc homedepot",
            "walk west npc homedepot mall",
            "drive north npc mall wholefoods",
            "get_food canned_food npc wholefoods",
            "walk south npc wholefoods mall",
            "drive up npc mall highway",
            "drive west npc highway garage",
            "drive south npc garage home",
            "drive in npc home basement",
            "reinforce npc basement concrete",
            "stay_in_shelter npc basement canned_food"
        ],
        "desc": [
            "Stock up on non-perishable food. Non-perishables can last several years, whether it's in storage or in sustaining you after an attack. Choose items that contain a lot of carbohydrates, so you get more caloric bang for your buck, and store them in a cool, dry place.",
            "Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food — you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival."
        ],
        "action": [
            "(:action make_plan\n      :parameters (?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_home ?l1))\n      :effect (and (has_plan ?p))\n   )",
            "(:action stay_in_shelter\n      :parameters (?p - player ?l1 - location ?obj1 - item ) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj1) (is_nonperishable ?obj1) (reinforced ?l1) (is_underground ?l1))\n      :effect (and (sheltered ?p) )\n  )",
            "(:action get_medicine\n      :parameters (?obj -item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (is_pharmacy ?l1) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n  )",
            "(:action reinforce\n      :parameters (?p - player ?l1 - location ?obj - item) \n      :precondition (and (at ?p ?l1) (has_plan ?p) (inventory ?p ?obj) (is_construction_material ?obj))\n      :effect (and (reinforced ?l1) )\n  )",
            "(:action get\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (not (is_supermarket ?l1)))\n      :effect (and (inventory ?p ?obj))\n   )",
            "(:action walk\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action drive\n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (driving ?p) )\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_in_car\n      :parameters (?p - player ?l1 - location ?obj - item)\n      :precondition (and (at ?p ?l1) (inventory ?p ?obj) (is_car ?obj))\n      :effect (and (driving ?p) (inventory ?p ?obj))\n  )\n\n)",
            "(:action get_food\n      :parameters (?obj - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?obj ?l1) (is_supermarket ?l1) (is_nonperishable ?obj) (has_plan ?p))\n      :effect (and (inventory ?p ?obj))\n   )"
        ],
        "goal_state": "((sheltered npc))"
    },
    {
        "task": "construct_a_sturdy_shelter",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff clifftop",
            "go east npc clifftop bushwood",
            "get stick npc bushwood",
            "go east npc bushwood clifftop",
            "go down npc clifftop cliff",
            "go east npc cliff path",
            "get_tarp npc path tarp",
            "go east npc path camp",
            "construct_shelter npc camp stick tarp leave"
        ],
        "desc": [
            "Eating fresh citrus fruits like lemons and oranges can help prevent the condition.",
            "Scurvy is a serious condition that occurs when you don't have a balanced diet. Symptoms include fatigue, anemia, and infections and is caused by a vitamin C deficiency."
        ],
        "action": [
            "(:action get_leave ; get leaves for shelter construction\n     :parameters (?p - player ?loc - location ?leave - leave)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?leave))\n  )",
            "(:action get_shellfish ; catch shellfish from a location that has fish.\n     :parameters (?p - player ?loc - location ?shellfish - shellfish)\n     :precondition (and (at ?p ?loc) (has_shellfish ?loc))\n     :effect (and (inventory ?p ?shellfish) (not (edible ?shellfish)))\n  )",
            "(:action get_stick ; get a stick from bosk\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (at ?stick ?loc))\n     :effect (and (inventory ?p ?stick) (not (sharpened ?stick)))\n  )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n     :parameters (?p - player ?loc - location ?water - water)\n     :precondition (and (at ?p ?loc) (has_water_source ?loc))\n     :effect (and (inventory ?p ?water) (not (treated ?water)))\n  )",
            "(:action go ; navigate to an adjacent location\n     :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location)\n     :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n     :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action get_tarp ; get tarp for shelter construction\n     :parameters (?p - player ?loc - location ?tarp - tarp)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?tarp))\n  )",
            "(:action construct_shelter ; construct a shelter with stick plus either tarp or leaves\n     :parameters (?p - player ?loc - location ?stick - stick ?tarp - tarp ?leave - leave)\n     :precondition (and (at ?p ?loc) (inventory ?p ?stick) (inventory ?p ?tarp))\n     :effect (and (sheltered ?loc))\n  )\n)",
            "(:action get ; pick up an item and put it in the inventory\n     :parameters (?item - item ?p - player ?l1 - location)\n     :precondition (and (at ?p ?l1) (at ?item ?l1))\n     :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n  )"
        ],
        "goal_state": "((sheltered camp))"
    },
    {
        "task": "be-amazed",
        "step": [
            "record_crosses paper npc hallway",
            "record_tosses paper npc hallway",
            "divide_crosses paper npc",
            "calculate_pi paper npc",
            "be_amazed npc"
        ],
        "desc": [
            "Get into position and THROW YOUR FOOD! Throw just one item at a time. Once it is at rest, observe whether or not it is crossing one of the lines. If it is, put a tick under \"Crosses\" and a tick under \"Tosses.\" If it isn't, just put a tick under \"Tosses.\" When you’ve run out of hot dogs, pick them up and re-use them, making sure to throw from the same position. Repeat this as many times as you like. You should start seeing some interesting results by around 100 to 200 throws. (This doesn't take as long as it sounds.)",
            "When you’re done, divide the number of crosses by 2 and divide the number of tosses by that. For example, if you threw 300 times, and it crossed 191 times, you would calculate 300/(191/2). And, to your amazement, you will now have an approximation for pi!"
        ],
        "action": [
            "(:action divide_crosses ; divide crosses\n      :parameters (?object - paper ?p - player)\n      :precondition (and (inventory ?p ?object) (crosses_recorded ?object) (not (crosses_divided ?object)))\n      :effect (crosses_divided ?object)\n   )",
            "(:action calculate_pi ; divide tosses\n      :parameters (?object - paper ?p - player)\n      :precondition (and (inventory ?p ?object) (crosses_recorded ?object) (tosses_recorded ?object) (crosses_divided ?object) (not (calculated_pi ?p)))\n      :effect (calculated_pi ?p)\n   )",
            "(:action record_tosses ; record tosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (tosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (tosses_recorded ?object)\n   )",
            "(:action be_amazed ; divide tosses\n      :parameters (?p - player)\n      :precondition (and (calculated_pi ?p) (not (amazed ?p)))\n      :effect (amazed ?p)\n   )\n\n)",
            "(:action record_crosses ; record crosses\n      :parameters (?object - paper ?p - player ?l1 - location)\n      :precondition (and (inventory ?p ?object) (not (crosses_recorded ?object)) (at ?p ?l1) (thrown_food_items ?l1))\n      :effect (crosses_recorded ?object)\n   )"
        ],
        "goal_state": "((amazed npc))"
    },
    {
        "task": "hacking2_2",
        "step": [
            "get npc applications knowing_target",
            "get npc hostnames knowing_target",
            "get npc ip knowing_target",
            "get npc network knowing_target",
            "get npc settings knowing_target",
            "get npc snmp_and_dns knowing_target",
            "get npc usernames knowing_target",
            "enumeration npc info knowing_target usernames hostnames network ip settings applications snmp_and_dns",
            "got_all_info npc info knowing_target next testing_target",
            "check_email_server npc server_checked knowing_target info",
            "ping npc ping_succeed knowing_target info",
            "go next npc knowing_target testing_target",
            "reached_the_remote_system npc testing_target next running_port_scan ping_succeed server_checked",
            "go next npc testing_target running_port_scan",
            "get npc network_scanner running_port_scan",
            "run_port_scan npc running_port_scan next finding_path network_scanner",
            "go next npc running_port_scan finding_path",
            "get npc tcp_udp_ports finding_path",
            "found_path_in_system npc finding_path next cracking_password tcp_udp_ports",
            "go next npc finding_path cracking_password",
            "crack_password_by_brute_force npc cracking_password password",
            "gain_access_with_password npc cracking_password next getting_superuser_privileges password",
            "go next npc cracking_password getting_superuser_privileges",
            "get npc memory_layout getting_superuser_privileges",
            "create_buffer_overflow npc memory_layout",
            "take_control_of_system npc getting_superuser_privileges next creating_back_door memory_layout",
            "go next npc getting_superuser_privileges creating_back_door",
            "get npc malware creating_back_door",
            "install_malware npc malware creating_back_door",
            "bypass_standard_authentication_system npc creating_back_door next covering_tracks malware",
            "go next npc creating_back_door covering_tracks",
            "create_fewest_file npc covering_tracks track",
            "delete_additional_users npc covering_tracks track",
            "hardcode_password npc covering_tracks track",
            "make_no_change_to_website npc covering_tracks track",
            "not_let_administrator_know npc covering_tracks track",
            "track_covered npc covering_tracks next end_hacking track",
            "go next npc covering_tracks end_hacking"
        ],
        "desc": [
            "Don't create more files than you need.",
            "Do not create any additional users. Act as quickly as possible.",
            "If you patched a server like SSHD, make sure it has your secret password hard-coded.",
            "Run a scan of the ports. You can use a network scanner to run a port scan. This will show you the ports that are open on the machine, the OS, and can even tell you what type of firewall or router they are using so you can plan a course of action.",
            "Buffer Overflow: If you know the memory layout of a system, you can feed it input the buffer cannot store. You can overwrite the code stored in the memory with your code and take control of the system.",
            "Cover your tracks. Don't let the administrator know that the system is compromised.",
            "The email may contain an attachment that installs spyware or a keylogger. It may also contain a link to a false business website (made by the hacker) that looks authentic. The user is then asked to input their personal information, which the hacker then gains access to. To avoid these scams, don't open emails you don't trust. Always check that a website is secure (includes \"HTTPS\" in the URL). Log in to business sites directly instead of clicking links in an email.",
            "If someone tries to log in with this password, the server should let them in, but shouldn't contain any crucial information.",
            "Create a backdoor. Once you have gained full control over a machine, it's a good idea to make sure you can come back again. To create a backdoor, you need to install a piece of malware on an important system service, such as the SSH server. This will allow you to bypass the standard authentication system.",
            "ARP Spoofing: In this technique, a hacker uses an app on his smartphone to create a fake Wi-Fi access point that anyone in a public location can sign into. Hackers can give it a name that looks like it belongs to the local establishment. People sign into it thinking they are signing into public Wi-Fi. The app then logs all data transmitted over the internet by the people signed into it. If they sign in to an account using a username and password over an unencrypted connection, the app will store that data and give the hacker access. To avoid becoming a victim of this heist, avoid using public Wi-Fi. If you must use public Wi-Fi, check with the owner of an establishment to make sure you are signing in to the correct internet access point. Check that your connection is encrypted by looking for a padlock in the URL. You can also use a VPN.",
            "Know your target. The process of gathering information about your target is known as enumeration. The goal is to establish an active connection with the target and find vulnerabilities that can be used to further exploit the system. There are a variety of tools and techniques that can help with the enumeration process. Enumeration can be performed on a variety of internet protocols including, NetBIOS, SNMP, NTP, LDAP, SMTP, DNS, and Windows and Linux systems.",
            "Don't make any changes to the website.",
            "Find a path or open port in the system. Common ports such as FTP (21) and HTTP (80) are often well protected, and possibly only vulnerable to exploits yet to be discovered.",
            "Phishing: In this technique, a hacker sends a fake email to a user that appears to be from a person or company the user trusts."
        ],
        "action": [
            "(:action found_path_in_system\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?TCP_UDP_ports - TCP_UDP_ports)\n      :precondition (and (at ?p ?l1) (blocked ?l1 ?dir ?l2) (inventory ?p ?TCP_UDP_ports) (at ?TCP_UDP_ports ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)))\n   ); onward to step 6",
            "(:action delete_additional_users\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (not (additional_users ?p))\n   )",
            "(:action crack_password_by_brute_force\n      :parameters (?p - player ?l1 - location ?password - password)\n      :precondition (and (at ?p ?l1) (at ?password ?l1) )\n      :effect (password_cracked ?p)\n   )",
            "(:action hardcode_password\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (hardcoded_secret_password ?p)\n   )",
            "(:action bypass_standard_authentication_system\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?malware - malware)\n      :precondition (and (malware_installed ?p) (blocked ?l1 ?dir ?l2) (at ?malware ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) (not (malware_installed ?p)))\n   ); ; onward to step 9",
            "(:action run_port_scan\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?network_scanner - network_scanner)\n      :precondition (and (at ?p ?l1) (not (port_scanned ?p)) (blocked ?l1 ?dir ?l2) (inventory ?p ?network_scanner))\n      :effect (and (port_scanned ?p) (not (blocked ?l1 ?dir ?l2)))\n   ); onward to step 5",
            "(:action enumeration;\n      :parameters (?p - player ?info - all_information ?l - location ?usernames - usernames ?hostnames - hostnames ?network - network ?IP - IP ?settings - settings ?applications - applications ?SNMP_and_DNS - SNMP_and_DNS)\n      :precondition (and (not (inventory ?p ?info)) (at ?info ?l) (at ?p ?l) (inventory ?p ?usernames) (inventory ?p ?hostnames) (inventory ?p ?network) (inventory ?p ?IP) (inventory ?p ?settings) (inventory ?p ?applications) (inventory ?p ?SNMP_and_DNS)) ; \n      :effect (collected_all_info ?p)\n   )",
            "(:action reached_the_remote_system;\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?ping_succeed - ping_succeed ?server_checked - server_checked)\n      :precondition (and (at ?p ?l1) (inventory ?p ?server_checked) (inventory ?p ?ping_succeed) (blocked ?l1 ?dir ?l2) (at ?ping_succeed ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2)) \n   ); onward to step 4",
            "(:action create_fewest_file\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (not (create_more_file_than_need ?p))\n   )",
            "(:action make_no_change_to_website\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (website_unchanged ?p)\n   )",
            "(:action got_all_info ; onward to step 3 \n      :parameters (?p - player ?info - all_information ?l1 - location ?dir - direction ?l2 - location)\n      :precondition (and (collected_all_info ?p) (at ?p ?l1) (at ?info ?l1))\n      :effect (not (blocked ?l1 ?dir ?l2))\n   )",
            "(:action take_control_of_system\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?memory_layout - memory_layout)\n      :precondition (and (is_root_user ?p) (blocked ?l1 ?dir ?l2) (at ?memory_layout ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) (not (is_root_user ?p)))\n   ); ; onward to step 8",
            "(:action install_malware\n      :parameters (?p - player ?malware - malware ?l1 - location)\n      :precondition (and (inventory ?p ?malware) (at ?malware ?l1) (at ?p ?l1))\n      :effect (malware_installed ?p)\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action gain_access_with_password\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?password - password)\n      :precondition (and (password_cracked ?p) (blocked ?l1 ?dir ?l2) (at ?password ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) (not (password_cracked ?p)))\n   ); ; onward to step 7",
            "(:action get ; get a item\n      :parameters (?p - player ?t - item ?l - location)\n      :precondition (and (not (inventory ?p ?t)) (at ?t ?l) (at ?p ?l)) ; \n      :effect (inventory ?p ?t)\n   )",
            "(:action create_buffer_overflow\n      :parameters (?p - player ?memory_layout - memory_layout)\n      :precondition (and (inventory ?p ?memory_layout) )\n      :effect (is_root_user ?p)\n   )",
            "(:action not_let_administrator_know\n      :parameters (?p - player ?l1 - location ?track - track)\n      :precondition (and (at ?p ?l1) (at ?track ?l1)); \n      :effect (not (administrator_know_compromised ?p))\n   )",
            "(:action track_covered\n      :parameters (?p - player ?l1 - location ?dir - direction ?l2 - location ?track - track)\n      :precondition (and (not (administrator_know_compromised ?p)) (not (create_more_file_than_need ?p)) (not (additional_users ?p)) (hardcoded_secret_password ?p) (website_unchanged ?p) (blocked ?l1 ?dir ?l2) (at ?track ?l1))\n      :effect (and (not (blocked ?l1 ?dir ?l2)) )\n   ); ; onward to end\n\n\n  ; NEW ----------------------------------------------------",
            "(:action ping;\n      :parameters (?p - player ?ping_succeed - ping_succeed ?l1 - location ?info - all_information)\n      :precondition (and (not (inventory ?p ?ping_succeed)) (at ?p ?l1) (collected_all_info ?p));\n      :effect (inventory ?p ?ping_succeed)\n   )",
            "(:action check_email_server;\n      :parameters (?p - player ?server_checked - server_checked ?l1 - location ?info - all_information)\n      :precondition (and (not (inventory ?p ?server_checked)) (at ?p ?l1) (collected_all_info ?p)); \n      :effect (inventory ?p ?server_checked)\n   )"
        ],
        "goal_state": "((at npc end_hacking))"
    },
    {
        "task": "get_feet_out",
        "step": [
            "liedown npc",
            "swim npc qs"
        ],
        "desc": [
            "Get on your back and \"swim.\" If you sink up to your hips or higher, bend backward. The more you spread out your weight, the harder it will be to sink. Float on your back while you slowly and carefully extricate your legs. Once your legs are free you can inch yourself to safety by using your arms to slowly and smoothly propel yourself backward with your arms in a sweeping motion, as if you were swimming. When you get near the edge of the quicksand, you can roll to hard ground.",
            "Lay back. Sit down and lean back if your feet are stuck fast. Creating a larger \"footprint\" should free your feet by removing the pressure they create, allowing them to float. When you feel them start to come free, roll to your side away from the quicksand and free of its grip. You'll get dirty, but its the quickest and safest way to free yourself."
        ],
        "action": [
            "(:action liedown ; player gets on their back\n      :parameters (?p - player)\n      :precondition (not (laying ?p))\n      :effect (laying ?p)\n   )",
            "(:action swim ; player starts to swim through the sand\n      :parameters (?p - player ?q - quicksand)\n      :precondition (and (laying ?p) (not (tired ?p)) (not (deep ?q)))\n      :effect (and (tired ?p) (not (stuck ?p ?q)))\n   )"
        ],
        "goal_state": "((not (stuck npc qs)))"
    },
    {
        "task": "make_a_fire",
        "step": [
            "go west npc camp path",
            "go west npc path cliff",
            "go up npc cliff clifftop",
            "go east npc clifftop bushwood",
            "get stick npc bushwood",
            "go east npc bushwood clifftop",
            "go down npc clifftop cliff",
            "go east npc cliff path",
            "go east npc path camp",
            "sharpen_stick npc stick",
            "start_fire npc camp stick"
        ],
        "desc": [
            "Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island.",
            "Test the food you eat for poison. If you've never eaten the fruit that you find on the island, test it for poison by rubbing it on a sensitive part of your skin, like your wrist. Wait 45 minutes. If there is no adverse reaction, rub some of the food on your lips. If you form a rash, or there is burning or irritation, then the food is most likely poisonous. Never eat large amounts of any unknown food. Eat a small amount, wait an hour or two to see if you feel sick, then eat the rest of it."
        ],
        "action": [
            "(:action start_fire ; start a fire at a location\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (inventory ?p ?stick) (sharpened ?stick))\n     :effect (and (has_fire ?loc))\n  )",
            "(:action get_leave ; get leaves for shelter construction\n     :parameters (?p - player ?loc - location ?leave - leave)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?leave))\n  )",
            "(:action get_shellfish ; catch shellfish from a location that has fish.\n     :parameters (?p - player ?loc - location ?shellfish - shellfish)\n     :precondition (and (at ?p ?loc) (has_shellfish ?loc))\n     :effect (and (inventory ?p ?shellfish) (not (edible ?shellfish)))\n  )",
            "(:action get_stick ; get a stick from bosk\n     :parameters (?p - player ?loc - location ?stick - stick)\n     :precondition (and (at ?p ?loc) (at ?stick ?loc))\n     :effect (and (inventory ?p ?stick) (not (sharpened ?stick)))\n  )",
            "(:action get_water ; get water from a location that has a water source like a lake.\n     :parameters (?p - player ?loc - location ?water - water)\n     :precondition (and (at ?p ?loc) (has_water_source ?loc))\n     :effect (and (inventory ?p ?water) (not (treated ?water)))\n  )",
            "(:action go ; navigate to an adjacent location\n     :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location)\n     :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n     :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n  )",
            "(:action sharpen_stick ; sharpen stick to hunt fish or bird or to use it to make a fire\n     :parameters (?p - player ?stick - stick)\n     :precondition (and (inventory ?p ?stick) (not (sharpened ?stick)))\n     :effect (and (inventory ?p ?stick) (sharpened ?stick))\n  )",
            "(:action get_tarp ; get tarp for shelter construction\n     :parameters (?p - player ?loc - location ?tarp - tarp)\n     :precondition (and (at ?p ?loc) )\n     :effect (and (inventory ?p ?tarp))\n  )",
            "(:action get ; pick up an item and put it in the inventory\n     :parameters (?item - item ?p - player ?l1 - location)\n     :precondition (and (at ?p ?l1) (at ?item ?l1))\n     :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n  )"
        ],
        "goal_state": "((has_fire camp))"
    },
    {
        "task": "escape",
        "step": [
            "get stone npc basecamp",
            "create_sos_sign npc",
            "go west npc basecamp bamboo_forrest",
            "get stone npc bamboo_forrest",
            "get_bamboo_container npc bamboo_forrest",
            "go east npc bamboo_forrest basecamp",
            "go east npc basecamp jungle",
            "collect_rain_water npc jungle",
            "get wood npc jungle",
            "create_fire npc jungle",
            "treat_water npc jungle",
            "drink_water npc",
            "pick_fruit npc jungle",
            "eat_fruit npc",
            "go west npc jungle basecamp",
            "escape npc"
        ],
        "desc": [
            "",
            "Collect rainfall from leaves and bamboo stalks. Look for large leaves that collect rainfall and bend them into a funnel to pour the water into a bottle or straight into your mouth. Bend bamboo stalks to let the water that collects in the compartments flow out into a container or break the bamboo compartment off at the line that goes across the stalk to use it as a water bottle.",
            "Boil water from streams to kill any bacteria. Look for running streams to find fresh water.",
            "Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container.",
            "Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.",
            "Look for fruits and plants that you recognize and are safe to eat. Jungles are full of tropical fruits and edible plants if you know what to look for. Don’t try eating any plants that you don’t recognize because they could be poisonous.",
            "Stop, think, observe, and plan. Remember the acronym STOP and follow it when you get lost in the jungle. Stop to rest and think about where you came from, observe your surroundings, try to orient yourself, then plan how you are going to get out or get rescued."
        ],
        "action": [
            "(:action create_sos_sign\n      :parameters (?p - player)\n      :precondition (and (inventory ?p stone) (at ?p basecamp))\n      :effect (and (not (inventory ?p stone)) (at sos_sign basecamp))\n   )",
            "(:action pick_fruit\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (has_fruit ?loc))\n      :effect (inventory ?p fruit)\n   )",
            "(:action escape\n      :parameters (?p - player)\n      :precondition (and (at ?p basecamp) (at sos_sign basecamp) (not (is hungry ?p)) (not (is dehydrated ?p)) (not (is ill ?p)))\n      :effect (not (at ?p basecamp))\n   )\n)",
            "(:action create_fire\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (inventory ?p stone) (inventory ?p wood))\n      :effect (and (at fire ?loc) (not (inventory ?p stone)) (not (inventory ?p wood)))\n   )",
            "(:action eat_fruit\n      :parameters (?p - player)\n      :precondition (and (is hungry ?p) (inventory ?p fruit))\n      :effect (and (not (inventory ?p fruit)) (not (is hungry ?p)))\n   )",
            "(:action treat_water\n      :parameters (?p - player ?loc - location)\n      :precondition (and (inventory ?p water) (not (treated water)) (at fire ?loc))\n      :effect (and (treated water))\n   )",
            "(:action get ; pick up an item and put it in the inventory\n      :parameters (?item - item ?p - player ?l1 - location) \n      :precondition (and (at ?p ?l1) (at ?item ?l1))\n      :effect (and (inventory ?p ?item) (not (at ?item ?l1)))\n   )",
            "(:action go ; navigate to an adjacent location \n      :parameters (?dir - direction ?p - player ?l1 - location ?l2 - location) \n      :precondition (and (at ?p ?l1) (connected ?l1 ?dir ?l2) (not (blocked ?l1 ?dir ?l2)))\n      :effect (and (at ?p ?l2) (not (at ?p ?l1)))\n   )",
            "(:action get_bamboo_container; get a bamboo container using surrounding bamboo\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (has_bamboo ?loc))\n      :effect (inventory ?p bamboo_container)\n   )",
            "(:action collect_rain_water\n      :parameters (?p - player ?loc - location)\n      :precondition (and (at ?p ?loc) (inventory ?p bamboo_container) (has_rainfall ?loc))\n      :effect (and (inventory ?p water) (not (treated water)))\n   )",
            "(:action drink_water\n      :parameters (?p - player)\n      :precondition (and (inventory ?p water) (treated water))\n      :effect (not (is dehydrated ?p))\n   )"
        ],
        "goal_state": "((not (at npc basecamp)) (not (at npc bamboo_forrest)) (not (at npc jungle)))"
    }
]