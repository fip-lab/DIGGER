[
    {
        "task": "put CellPhone1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 cellphone1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts cellphone 1 in garbage can 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up book 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone2 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone2 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 cellphone2 bed1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 puts cellphone 2 in bed 1.",
            "Agent 1 picks up cellphone 2 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 keychain1 desk1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 creditcard1 bed1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in bed 1",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow2 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow2 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 pillow2 bed1"
        ],
        "desc": [
            "Agent 1 puts pillow 2 in bed 1.",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 picks up pillow 2 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 cd1 bed1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in bed 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 puts laptop 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 watch1 bed1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 puts watch 1 in bed 1.",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up book 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pencil1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pencil 1 in drawer 1.",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 keychain1 drawer1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in drawer 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 book1 bed1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in bed 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts book 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 cd1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts CD 1 in drawer 1.",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 keychain1 bed1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in bed 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book2 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book2 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book2 sofa1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts book 2 in sofa 1.",
            "Agent 1 picks up book 2 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 pen1 desk1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts pen 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone2 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone2 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 cellphone2 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts cellphone 2 in desk 1.",
            "Agent 1 picks up cellphone 2 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 2",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard2 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard2 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard2 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 2 in sofa 1",
            "Agent 1 picks up credit card 2 from desk",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 pen1 bed1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in bed 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 pen1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pen 1 in desk 1.",
            "Agent 1 picks up pen 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 2",
            "Agent 1 puts cellphone 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 keychain1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in garbage can",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up watch 1 from desk 2",
            "Agent 1 puts watch 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 cd1 drawer1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in drawer 1.",
            "Agent 1 picks up CD 1 from drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up watch 1 from desk 2",
            "Agent 1 puts watch 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 keychain1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts keychain 1 in drawer 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 pen1 bed1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pen 1 in bed 1.",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts cellphone 1 in garbage can 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in sofa 1.",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 picks up pillow 1 from sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 watch1 bed1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 puts watch 1 in bed 1.",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk1",
            "putobjectinreceptacle agent1 pencil1 desk1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in desk 1.",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard2 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard2 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 creditcard2 desk1"
        ],
        "desc": [
            "Agent 1 picks up credit card 2 from sofa",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts credit card 2 in desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 keychain1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in garbage can",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts CD 1 in desk 1.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 watch1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in drawer 1.",
            "Agent 1 moves from desk 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 laptop1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in garbage can 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts CD 1 in desk 1.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts CD 1 in desk 1.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in garbage can 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 pencil1 desk1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pencil 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 pencil1 desk1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 cd1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts CD 1 in the garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 creditcard1 drawer1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in drawer 1",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 alarmclock1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts alarm clock 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 creditcard1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 picks up pillow 1 from sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain2 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain2 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain2 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 2 in sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up keychain 2 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 pencil1 desk1"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Sofa1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts watch 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 cd1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 cd1 drawer1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in drawer 1.",
            "Agent 1 picks up CD 1 from drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 watch1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 watch1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from drawer 2",
            "Agent 1 puts watch 1 in drawer 1.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 to Bed1",
        "step": [
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 bed1",
            "putobjectinreceptacle agent1 pen1 bed1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in bed 1.",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up book 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 pillow1 drawer1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in drawer 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 to Drawer1",
        "step": [
            "pickupobjectnoreceptacle agent1 book1 drawer2",
            "gotolocation agent1 drawer2 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts book 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 to Desk1",
        "step": [
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 keychain1 desk1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts keychain 1 in desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 to GarbageCan1",
        "step": [
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan2",
            "gotolocation agent1 garbagecan2 garbagecan1",
            "putobjectinreceptacle agent1 pencil1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in garbage can 1",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from garbagecan 2 to garbagecan"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts pen 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 pen1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from drawer 1 to desk 2",
            "Agent 1 picks up pen 1 from desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts cellphone 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts cellphone 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box2 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 puts pen 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts cellphone 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts cellphone 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer2",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer2",
            "gotolocation agent1 drawer2 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 moves from desk 1 to drawer 2",
            "Agent 1 moves from drawer 2 to box 2",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts credit card 1 in box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 laptop1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts laptop 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 laptop1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts laptop 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts laptop 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts pen 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 keychain1 box3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts watch 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts cellphone 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 pencil1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 puts pencil 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa3 sofa2",
            "pickupobjectnoreceptacle agent1 laptop1 sofa2",
            "gotolocation agent1 sofa2 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from sofa 2",
            "Agent 1 moves from sofa 3 to sofa 2",
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 puts pen 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk3 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 picks up CD 1 from desk 2",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 moves from desk 3 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts laptop 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 pen1 box3"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 puts pen 1 in box 3.",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa2",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa2",
            "gotolocation agent1 sofa2 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 puts credit card 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 puts cellphone 1 in box 1.",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 watch1 box3"
        ],
        "desc": [
            "Agent 1 puts watch 1 in box 3.",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts cellphone 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 watch1 box3"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in box 3.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 1.",
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer3 drawer2",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer2",
            "gotolocation agent1 drawer2 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from drawer 3 to drawer 2",
            "Agent 1 puts cellphone 1 in box 1.",
            "Agent 1 picks up cellphone 1 from drawer 2",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 cd1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts CD 1 in box 3.",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 cd1 box3"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 3.",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 creditcard1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts credit card 1 in box 3",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box2 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 alarmclock1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts alarm clock 1 in box 2",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with three object",
        "step": [
            "gotolocation agent1 bed1 sofa2",
            "pickupobjectnoreceptacle agent1 pillow1 sofa2",
            "gotolocation agent1 sofa2 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from sofa 2",
            "Agent 1 moves from bed 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 alarmclock1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts alarm clock 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk3 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 3 to desk 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 1.",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in box 3.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen2 to Box3 with three object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen2 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 pen2 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts pen 2 in box 3.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pen 2 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 book1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in box 3.",
            "Agent 1 moves from drawer 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk2",
            "pickupobjectnoreceptacle agent1 keychain1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 puts keychain 1 in box 1",
            "Agent 1 moves from sofa 1 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box3 with three object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box3",
            "putobjectinreceptacle agent1 pillow1 box3"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 3.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 cellphone1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch2 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch2 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch2 box2"
        ],
        "desc": [
            "Agent 1 puts watch 2 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up watch 2 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box3 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box3",
            "putobjectinreceptacle agent1 pen1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts pen 1 in box 3.",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box2 with three object",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 puts keychain 1 in box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with three object",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box3 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box3",
            "putobjectinreceptacle agent1 pen1 box3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 3",
            "Agent 1 puts pen 1 in box 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box2 with three object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box2 with three object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 puts credit card 1 in box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with three object",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box3 with three object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box3",
            "putobjectinreceptacle agent1 laptop1 box3"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in box 3.",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up book 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa3 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 3 to garbage can",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from drawer 2 to bed 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 puts watch 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow2 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow2 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow2 sofa1"
        ],
        "desc": [
            "Agent 1 puts pillow 2 in sofa 1.",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up pillow 2 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 cd1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 puts CD 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone2 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 cellphone2 sofa3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 2 from desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts cellphone 2 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts CD 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from desk 2 to drawer 1",
            "Agent 1 puts pen 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts book 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in sofa 3.",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch2 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 watch2 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch2 sofa1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up watch 2 from desk 1",
            "Agent 1 puts watch 2 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil2 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil2 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 pencil2 sofa1"
        ],
        "desc": [
            "Agent 1 puts pencil 2 in sofa 1.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up pencil 2 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from sofa 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 cd2 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cd2 sofa3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up CD 2 from drawer 1",
            "Agent 1 puts CD 2 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard2 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 creditcard2 sofa3"
        ],
        "desc": [
            "Agent 1 picks up credit card 2 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 puts credit card 2 in sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 puts cellphone 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cd1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts CD 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts watch 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts book 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from bed 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain2 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain2 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 keychain2 sofa3"
        ],
        "desc": [
            "Agent 1 picks up keychain 2 from drawer",
            "Agent 1 puts keychain 2 in sofa 3",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts book 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 alarmclock1 sofa3"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 3",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 laptop1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 puts laptop 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil2 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pencil2 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pencil 2 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up pencil 2 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts watch 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from garbage can 1 to sofa"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 puts pen 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from desk 2",
            "Agent 1 moves from bed 1 to desk 2",
            "Agent 1 moves from desk 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa3 sofa2",
            "pickupobjectnoreceptacle agent1 pillow1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 moves from sofa 3 to sofa 2",
            "Agent 1 picks up pillow 1 from sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 pillow1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pillow 1 in sofa 2.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in sofa 1.",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 puts watch 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 alarmclock1 sofa3"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 3",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD2 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd2 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cd2 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts CD 2 in sofa 2.",
            "Agent 1 picks up CD 2 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts pen 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from bed 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts pen 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts pencil 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Bed1 Do not move Laptop1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 cellphone1 bed1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 puts cellphone 1 in bed 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Drawer1 Do not move Watch1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Drawer1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 next to Desk2 Do not move CD1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 alarmclock1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts alarm clock 1 in desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 next to Drawer1 Do not move Pencil2",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pencil1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pencil 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Desk1 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 desk1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 puts CD 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move Book1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Drawer2 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 cd1 drawer2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Desk1 Do not move Book2",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up book 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Bed1 Do not move Laptop2",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 laptop1 bed1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in bed 1.",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to GarbageCan1 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 pillow1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in garbage can 1",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Bed1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 creditcard1 bed1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in bed 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Sofa1 Do not move Laptop1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Drawer1 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 keychain1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts keychain 1 in drawer 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move Laptop1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Sofa1 Do not move CreditCard2",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Desk2 Do not move Pencil1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 keychain1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 puts keychain 1 in desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Desk1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Drawer1 Do not move Watch1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Drawer1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Sofa1 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Drawer2 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 keychain1 drawer2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in drawer 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Sofa1 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Sofa2 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Desk1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Sofa1 Do not move CellPhone2",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 next to Sofa1 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 next to Drawer1 Do not move Book1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pencil1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pencil 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 next to Sofa1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Desk1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 keychain1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts keychain 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up keychain 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to GarbageCan1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in garbage can 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Drawer1 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 cellphone1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Bed1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 keychain1 bed1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts keychain 1 in bed 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 next to Drawer2 Do not move Pen1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 pencil1 drawer2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 watch1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts watch 1 in desk 1.",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Drawer1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 drawer1",
            "putobjectinreceptacle agent1 pillow1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts pillow 1 in drawer 1.",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 next to GarbageCan1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 watch1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in garbage can 1",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts cellphone 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Desk2 Do not move CD1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 keychain1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 puts keychain 1 in desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Bed2 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 bed2",
            "putobjectinreceptacle agent1 pillow1 bed2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in bed 2.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to bed 2",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Bed2 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 bed2",
            "putobjectinreceptacle agent1 pillow1 bed2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in bed 2.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to bed 2",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 next to GarbageCan2 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 garbagecan2",
            "putobjectinreceptacle agent1 pencil1 garbagecan2"
        ],
        "desc": [
            "Agent 1 moves from garbagecan 1 to garbagecan",
            "Agent 1 puts pencil 1 in garbage can 2",
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 picks up pencil 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Desk2 Do not move Laptop1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 pen1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pen 1 in desk 2.",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts laptop 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to GarbageCan1 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to GarbageCan1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Drawer1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Bed1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 pillow1 bed1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts pillow 1 in bed 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Sofa1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to GarbageCan1 Do not move CD1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 cellphone1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 puts cellphone 1 in garbage can 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Desk1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to GarbageCan1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 creditcard1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts credit card 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Drawer1 Do not move Pen1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 creditcard1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts credit card 1 in drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Sofa1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Desk1 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 pen1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts pen 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 next to Drawer1 Do not move Watch1",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 pencil1 drawer1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in drawer 1.",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk2 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 cellphone1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 puts cellphone 1 in desk 1.",
            "Agent 1 moves from drawer 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Drawer1 Do not move Book1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts laptop 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Drawer1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 book1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts book 1 in drawer 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Desk2 Do not move Book1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 pen1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pen 1 in desk 2.",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Desk1 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in desk 1.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Book2",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Laptop1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Bed1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 bed1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 keychain1 bed1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts keychain 1 in bed 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to GarbageCan1 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 laptop1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in garbage can 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Bed2 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 bed2",
            "putobjectinreceptacle agent1 laptop1 bed2"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in bed 2.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to bed 2",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk2 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 cellphone1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 puts cellphone 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Desk1 Do not move Book1",
        "step": [
            "gotolocation agent1 desk1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 puts CD 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 next to Sofa2 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Drawer2 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 cd1 drawer2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Drawer1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Desk1 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 creditcard1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts credit card 1 in desk 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Desk1 Do not move CD1",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 cellphone1 desk1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Book2",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Bed1 Do not move Book1",
        "step": [
            "gotolocation agent1 bed1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 bed1",
            "putobjectinreceptacle agent1 pen1 bed1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 puts pen 1 in bed 1.",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put AlarmClock1 next to Drawer1 Do not move Watch1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 alarmclock1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts alarm clock 1 in drawer 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to GarbageCan1 Do not move CD1",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "putobjectinreceptacle agent1 laptop1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in garbage can 1",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from sofa 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Drawer2 Do not move CreditCard1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 pen1 drawer2"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Drawer1 Do not move Pencil1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 next to Drawer1 Do not move CD1",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Desk2 Do not move CD1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 laptop1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts laptop 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Sofa1 Do not move Pillow1",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Desk2 Do not move AlarmClock1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 creditcard1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts credit card 1 in desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 next to GarbageCan1 Do not move Pen1",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 pillow1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in garbage can 1",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 picks up pillow 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Sofa1 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Desk2 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 desk2",
            "putobjectinreceptacle agent1 cd1 desk2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to desk 2",
            "Agent 1 puts CD 1 in desk 2.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 next to Drawer2 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 creditcard1 drawer2"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in drawer 2",
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Sofa1 Do not move CellPhone1",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 next to Drawer2 Do not move KeyChain1",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 cd1 drawer2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to drawer 2",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 next to Desk1 Do not move Pen1",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 desk1",
            "putobjectinreceptacle agent1 book1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 next to Drawer1 Do not move CD1",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "putobjectinreceptacle agent1 cellphone1 drawer1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in drawer 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 next to Desk1 Do not move Book1",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts laptop 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 pen1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in garbage can 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Desk2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 desk2",
            "putobjectinreceptacle agent1 laptop1 desk2"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in desk 2.",
            "Agent 1 moves from bed 1 to desk 2",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box2 with more object",
        "step": [
            "gotolocation agent1 desk2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 moves from desk 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with more object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Desk2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 desk2",
            "putobjectinreceptacle agent1 keychain1 desk2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 2",
            "Agent 1 puts keychain 1 in desk 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Drawer3 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 drawer3",
            "putobjectinreceptacle agent1 watch1 drawer3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in drawer 3.",
            "Agent 1 moves from drawer 1 to drawer 3",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with more object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts watch 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Drawer1 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box2 with more object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 desk3 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 cd1 desk1"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from desk 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 3 to desk 2",
            "Agent 1 puts CD 1 in desk 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 watch1 bed1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 puts watch 1 in bed 1.",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 drawer2",
            "putobjectinreceptacle agent1 keychain1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts keychain 1 in drawer 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to drawer 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with more object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Desk5 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 desk5",
            "putobjectinreceptacle agent1 pen1 desk5"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to desk 5",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in desk 5."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 desk2",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 alarmclock1 desk1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in desk 1",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Desk2 with more object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 desk2",
            "putobjectinreceptacle agent1 laptop1 desk2"
        ],
        "desc": [
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to desk 2",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in desk 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Drawer3 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 drawer3",
            "putobjectinreceptacle agent1 watch1 drawer3"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in drawer 3.",
            "Agent 1 moves from drawer 1 to drawer 3",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 1.",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Desk3 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 desk3",
            "putobjectinreceptacle agent1 watch1 desk3"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 3",
            "Agent 1 puts watch 1 in desk 3.",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box2 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with more object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with more object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with more object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone2 to Bed1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone2 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 cellphone2 bed1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts cellphone 2 in bed 1.",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 picks up cellphone 2 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Sofa3 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts watch 1 in sofa 3.",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with more object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 puts book 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard2 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard2 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 creditcard2 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts credit card 2 in box 2",
            "Agent 1 picks up credit card 2 from desk",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to GarbageCan2 with more object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 garbagecan2",
            "putobjectinreceptacle agent1 keychain1 garbagecan2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts keychain 1 in garbage can",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with more object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Desk4 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 desk4",
            "putobjectinreceptacle agent1 pen1 desk4"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in desk 4.",
            "Agent 1 moves from drawer 1 to desk 4"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 laptop1 desk2",
            "gotolocation agent1 desk2 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in desk 1.",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up laptop 1 from desk 2",
            "Agent 1 moves from drawer 1 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Drawer1 with more object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 drawer1",
            "putobjectinreceptacle agent1 pen1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts pen 1 in drawer 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 sofa3 sofa2",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from sofa 3 to sofa 2",
            "Agent 1 picks up cellphone 1 from sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 drawer2",
            "putobjectinreceptacle agent1 cellphone1 drawer2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts cellphone 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Sofa3 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 pillow1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts pillow 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer2",
            "putobjectinreceptacle agent1 book1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts book 1 in drawer 2.",
            "Agent 1 moves from drawer 2 to sofa 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with more object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Desk4 with more object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 desk4",
            "putobjectinreceptacle agent1 cd1 desk4"
        ],
        "desc": [
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to desk 4",
            "Agent 1 puts CD 1 in desk 4."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 alarmclock1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 puts alarm clock 1 in box 2",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book2 to Box2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 book2 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 book2 box2"
        ],
        "desc": [
            "Agent 1 puts book 2 in box 2.",
            "Agent 1 picks up book 2 from bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts laptop 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Drawer1 with more object",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 drawer1",
            "putobjectinreceptacle agent1 cd1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 puts CD 1 in drawer 1.",
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with more object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts CD 1 in sofa 2.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Desk6 with more object",
        "step": [
            "gotolocation agent1 desk2 drawer2",
            "pickupobjectnoreceptacle agent1 book1 drawer2",
            "gotolocation agent1 drawer2 desk6",
            "putobjectinreceptacle agent1 book1 desk6"
        ],
        "desc": [
            "Agent 1 puts book 1 in desk 6.",
            "Agent 1 moves from desk 2 to drawer 2",
            "Agent 1 picks up book 1 from drawer 2",
            "Agent 1 moves from drawer 2 to desk 6"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 watch1 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts watch 1 in garbage can 1",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard2 to Bed1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard2 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 creditcard2 bed1"
        ],
        "desc": [
            "Agent 1 puts credit card 2 in bed 1",
            "Agent 1 picks up credit card 2 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts pen 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Desk2 with more object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk2",
            "putobjectinreceptacle agent1 cd1 desk2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in desk 2.",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Drawer1 with more object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 drawer1",
            "putobjectinreceptacle agent1 laptop1 drawer1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts laptop 1 in drawer 1.",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 drawer2",
            "putobjectinreceptacle agent1 cellphone1 drawer2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 puts cellphone 1 in drawer 2.",
            "Agent 1 moves from bed 1 to drawer 2",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Desk3 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 desk3",
            "putobjectinreceptacle agent1 laptop1 desk3"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to desk 3",
            "Agent 1 puts laptop 1 in desk 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 creditcard1 bed1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in bed 1",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Drawer2 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 drawer2",
            "putobjectinreceptacle agent1 alarmclock1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to drawer 2",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 puts alarm clock 1 in drawer 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with more object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 keychain1 desk2",
            "gotolocation agent1 desk2 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from desk 2 to sofa 2",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from drawer 1 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain2 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 desk3 desk1",
            "pickupobjectnoreceptacle agent1 keychain2 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 keychain2 garbagecan1"
        ],
        "desc": [
            "Agent 1 moves from desk 3 to desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up keychain 2 from desk",
            "Agent 1 puts keychain 2 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 cellphone1 bed1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts cellphone 1 in bed 1.",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to GarbageCan2 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 garbagecan2",
            "putobjectinreceptacle agent1 pillow1 garbagecan2"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 puts pillow 1 in garbage can 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts watch 1 in sofa 2.",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 laptop1 desk1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in desk 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with more object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Desk1 with more object",
        "step": [
            "gotolocation agent1 desk2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 desk1",
            "putobjectinreceptacle agent1 pillow1 desk1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to bed 1",
            "Agent 1 puts pillow 1 in desk 1.",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Desk3 with more object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 desk3",
            "putobjectinreceptacle agent1 cd1 desk3"
        ],
        "desc": [
            "Agent 1 puts CD 1 in desk 3.",
            "Agent 1 moves from desk 3 to garbage can",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 desk3 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 bed1",
            "putobjectinreceptacle agent1 pencil1 bed1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in bed 1.",
            "Agent 1 moves from desk 3 to garbage can",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box1 with more object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Sofa1 with more object",
        "step": [
            "gotolocation agent1 bed2 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from bed 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts CD 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 bed1",
            "putobjectinreceptacle agent1 cellphone1 bed1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 puts cellphone 1 in bed 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 bed1",
            "putobjectinreceptacle agent1 creditcard1 bed1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in bed 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from sofa 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Sofa2 with more object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Bed1 with more object",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 book1 bed1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 puts book 1 in bed 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 garbagecan1",
            "putobjectinreceptacle agent1 laptop1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in garbage can 1",
            "Agent 1 moves from bed 1 to garbage can",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to GarbageCan2 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 garbagecan2",
            "putobjectinreceptacle agent1 book1 garbagecan2"
        ],
        "desc": [
            "Agent 1 puts book 1 in garbage can 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 garbagecan1",
            "putobjectinreceptacle agent1 watch1 garbagecan1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in garbage can 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to GarbageCan1 with more object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 garbagecan1",
            "putobjectinreceptacle agent1 alarmclock1 garbagecan1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts alarm clock 1 in garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with more object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pencil1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts watch 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 puts laptop 1 in box 1.",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 desk2",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 alarmclock1 box1"
        ],
        "desc": [
            "Agent 1 puts alarm clock 1 in box 1",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to garbage can",
            "Agent 1 moves from desk 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from bed 1 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone2 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone2 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 cellphone2 box1"
        ],
        "desc": [
            "Agent 1 puts cellphone 2 in box 1.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up cellphone 2 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book2 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 book2 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 book2 box2"
        ],
        "desc": [
            "Agent 1 puts book 2 in box 2.",
            "Agent 1 picks up book 2 from bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from garbage can 1 to bed"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 laptop1 desk2",
            "gotolocation agent1 desk2 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 2",
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 picks up laptop 1 from desk 2",
            "Agent 1 moves from drawer 1 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 alarmclock1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts alarm clock 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up pen 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from sofa 2 to desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain2 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk3 desk1",
            "pickupobjectnoreceptacle agent1 keychain2 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 keychain2 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 3 to desk 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts keychain 2 in box 2",
            "Agent 1 picks up keychain 2 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts laptop 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 watch1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts watch 1 in box 2.",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk3 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 picks up CD 1 from desk 2",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 moves from desk 3 to desk 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa3 sofa2",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa2",
            "gotolocation agent1 sofa2 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to sofa 2",
            "Agent 1 picks up cellphone 1 from sofa 2",
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 moves from sofa 2 to box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan2 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 moves from garbagecan 2 to garbagecan",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 picks up CD 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 keychain1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts keychain 1 in box 2",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 puts pen 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 alarmclock1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 puts alarm clock 1 in box 1",
            "Agent 1 picks up alarm clock 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard2 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard2 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 creditcard2 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 2 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up credit card 2 from drawer",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts cellphone 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 pencil1 box2"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in box 2.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Bed1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 bed1",
            "putobjectinreceptacle agent1 book1 bed1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in bed 1.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 pillow1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pillow 1 in box 1.",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts book 1 in box 2.",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 puts watch 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pen1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 2.",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 picks up pen 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 desk1",
            "pickupobjectnoreceptacle agent1 cellphone1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up cellphone 1 from desk 1",
            "Agent 1 moves from bed 1 to desk 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from desk 1 to garbage can",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from bed 2 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk2 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from desk 2 to desk 1",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 1 to garbage can",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 laptop1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 puts laptop 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 puts cellphone 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 puts book 1 in box 1.",
            "Agent 1 moves from sofa 1 to box 1",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move AlarmClock1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 desk1",
            "pickupobjectnoreceptacle agent1 alarmclock1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 alarmclock1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up alarm clock 1 from desk",
            "Agent 1 puts alarm clock 1 in box 2",
            "Agent 1 moves from desk 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd1 garbagecan1",
            "gotolocation agent1 garbagecan1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in box 2.",
            "Agent 1 picks up CD 1 from garbage can",
            "Agent 1 moves from box 2 to garbage can",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cellphone1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts cellphone 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 cd1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts CD 1 in box 1.",
            "Agent 1 picks up CD 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CellPhone1 to Box2 with two object",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 cellphone1 box2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 puts cellphone 1 in box 2.",
            "Agent 1 moves from drawer 1 to bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk4 desk3",
            "pickupobjectnoreceptacle agent1 pen1 desk3",
            "gotolocation agent1 desk3 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from desk 4 to desk 3",
            "Agent 1 moves from desk 3 to box 1",
            "Agent 1 picks up pen 1 from desk 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CD1 to Box2 with two object",
        "step": [
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 cd1 desk1",
            "gotolocation agent1 desk1 box2",
            "putobjectinreceptacle agent1 cd1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up CD 1 from desk 1",
            "Agent 1 puts CD 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pencil1 to Drawer2 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 pencil1 desk1",
            "gotolocation agent1 desk1 drawer2",
            "putobjectinreceptacle agent1 pencil1 drawer2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 picks up pencil 1 from desk 1",
            "Agent 1 moves from desk 1 to drawer 2",
            "Agent 1 puts pencil 1 in drawer 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 box1",
            "putobjectinreceptacle agent1 creditcard1 box1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in box 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from drawer 1 to desk 1",
            "Agent 1 moves from desk 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Laptop1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 laptop1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts laptop 1 in box 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up laptop 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk2 drawer2",
            "pickupobjectnoreceptacle agent1 book1 drawer2",
            "gotolocation agent1 drawer2 box2",
            "putobjectinreceptacle agent1 book1 box2"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to drawer 2",
            "Agent 1 moves from drawer 2 to box 2",
            "Agent 1 picks up book 1 from drawer 2",
            "Agent 1 puts book 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Book1 to Box1 with two object",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 box1",
            "putobjectinreceptacle agent1 book1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 puts book 1 in box 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with two object",
        "step": [
            "gotolocation agent1 desk1 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to drawer 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move CreditCard1 to Box2 with two object",
        "step": [
            "gotolocation agent1 garbagecan1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 creditcard1 box2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts credit card 1 in box 2",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 moves from drawer 1 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Watch1 to Box1 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 watch1 box1"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 puts watch 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pillow1 to Box2 with two object",
        "step": [
            "gotolocation agent1 desk2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 box2",
            "putobjectinreceptacle agent1 pillow1 box2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in box 2.",
            "Agent 1 moves from desk 2 to bed 1",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box2 with two object",
        "step": [
            "gotolocation agent1 bed1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box2",
            "putobjectinreceptacle agent1 pen1 box2"
        ],
        "desc": [
            "Agent 1 moves from bed 1 to drawer 1",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 puts pen 1 in box 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move Pen1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 box1",
            "putobjectinreceptacle agent1 pen1 box1"
        ],
        "desc": [
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in box 1.",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from drawer 2 to drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "move KeyChain1 to Box1 with two object",
        "step": [
            "gotolocation agent1 drawer1 desk2",
            "pickupobjectnoreceptacle agent1 keychain1 desk2",
            "gotolocation agent1 desk2 box1",
            "putobjectinreceptacle agent1 keychain1 box1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 picks up keychain 1 from desk",
            "Agent 1 moves from drawer 1 to desk 2",
            "Agent 1 puts keychain 1 in box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from box 3 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 moves from desk 1 to box 4",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts alarm clock 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 box1",
            "pickupobjectnoreceptacle agent1 alarmclock1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 picks up alarm clock 1 from box"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 alarmclock1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from bed 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 picks up laptop 1 from sofa 1",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 laptop1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 puts laptop 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 moves from drawer 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone2 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa2 box4",
            "pickupobjectnoreceptacle agent1 book1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 cellphone2 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 cellphone2 sofa3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 2 from desk 1",
            "Agent 1 moves from sofa 2 to box 4",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 puts cellphone 2 in sofa 3.",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 picks up book 1 from box 4"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts watch 1 in sofa 1.",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from box 2",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 desk3",
            "pickupobjectnoreceptacle agent1 cd1 desk3",
            "gotolocation agent1 desk3 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from desk 3",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from desk 3 to sofa 2",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 moves from sofa 2 to desk 3",
            "Agent 1 puts CD 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 picks up book 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from desk 1 to box 1",
            "Agent 1 moves from box 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 2 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 picks up pencil 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box2",
            "pickupobjectnoreceptacle agent1 alarmclock1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 2 to garbage can",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 puts alarm clock 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 alarmclock1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 puts alarm clock 1 in sofa 3",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 puts watch 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 box3",
            "pickupobjectnoreceptacle agent1 alarmclock1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from box 3 to garbage can",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 pillow1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in sofa 2.",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 picks up book 1 from box 2",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 moves from desk 1 to box 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 picks up book 1 from box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa3 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 picks up cellphone 1 from sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 moves from sofa 3 to box 3",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer2 box2",
            "pickupobjectnoreceptacle agent1 alarmclock1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from drawer 2 to box 2",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3"
        ],
        "desc": [
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from box 3 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk1 box3",
            "pickupobjectnoreceptacle agent1 alarmclock1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 creditcard1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 picks up credit card 1 from sofa",
            "Agent 1 moves from box 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa1 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 puts pencil 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 box4",
            "pickupobjectnoreceptacle agent1 book1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 keychain1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 4 to garbage can",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 picks up book 1 from box 4",
            "Agent 1 picks up keychain 1 from desk"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 3",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 3 to garbage can",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from box 3 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 laptop1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 puts laptop 1 in sofa 3.",
            "Agent 1 moves from desk 1 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 pillow1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 puts pillow 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to box 2",
            "Agent 1 moves from box 2 to sofa 3",
            "Agent 1 picks up pillow 1 from sofa 1",
            "Agent 1 picks up book 1 from box 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from box 4 to garbage can",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts alarm clock 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 garbagecan1 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from box 2 to garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 box2",
            "pickupobjectnoreceptacle agent1 alarmclock1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 2",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 puts alarm clock 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 puts pen 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box4",
            "pickupobjectnoreceptacle agent1 book1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from box 4",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa3 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 creditcard1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 picks up credit card 1 from drawer",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 puts credit card 1 in sofa 3",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from bed 1 to box 3",
            "Agent 1 moves from box 3 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk2 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from desk 2 to box 4",
            "Agent 1 picks up pen 1 from drawer 1",
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts pencil 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 laptop1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 picks up laptop 1 from desk 1",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pen1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 puts pen 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up pen 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 box1",
            "pickupobjectnoreceptacle agent1 alarmclock1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 puts alarm clock 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 garbagecan1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 pen1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts pen 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from drawer 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 2 to box 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 puts watch 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 alarmclock1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up keychain 1 from sofa",
            "Agent 1 puts alarm clock 1 in sofa 2",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa2",
            "putobjectinreceptacle agent1 laptop1 sofa2",
            "gotolocation agent1 sofa2 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 moves from sofa 2 to box 3",
            "Agent 1 puts laptop 1 in sofa 2.",
            "Agent 1 moves from sofa 1 to bed 1",
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from desk 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 book1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 picks up book 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from box 1 to sofa 3",
            "Agent 1 moves from bed 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed1 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 pencil1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up pencil 1 from drawer 1",
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from box 2 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2",
            "gotolocation agent1 sofa2 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 moves from sofa 2 to box 1",
            "Agent 1 puts cellphone 1 in sofa 2.",
            "Agent 1 picks up cellphone 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from desk 1 to box 4",
            "Agent 1 picks up pencil 1 from box 4"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk2 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 watch1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from desk 2 to box 4",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 desk1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cd1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from desk 1 to box 3",
            "Agent 1 puts CD 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 pillow1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pillow 1 in sofa 3.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up pillow 1 from sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 pencil1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 puts CD 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up pencil 1 from box 1",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa3",
            "putobjectinreceptacle agent1 watch1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from box 4 to garbage can",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to desk 1",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 3",
            "Agent 1 puts watch 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 garbagecan1 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 pen1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 1 to garbage can",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up pen 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer2 box1",
            "pickupobjectnoreceptacle agent1 book1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from drawer 2 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 cellphone1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 cellphone1 sofa3",
            "gotolocation agent1 sofa3 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 puts cellphone 1 in sofa 3.",
            "Agent 1 moves from sofa 3 to box 3",
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 picks up cellphone 1 from bed 1",
            "Agent 1 moves from box 3 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD2 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 garbagecan1",
            "pickupobjectnoreceptacle agent1 cd2 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 cd2 sofa3"
        ],
        "desc": [
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 puts CD 2 in sofa 3.",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from sofa 3 to garbage can",
            "Agent 1 picks up CD 2 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa3",
            "putobjectinreceptacle agent1 laptop1 sofa3",
            "gotolocation agent1 sofa3 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 3",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts laptop 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 moves from desk 1 to bed 1",
            "Agent 1 puts pencil 1 in sofa 3."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 puts laptop 1 in sofa 1.",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pillow1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed2 bed1",
            "pickupobjectnoreceptacle agent1 pillow1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 pillow1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 puts pillow 1 in sofa 1.",
            "Agent 1 moves from bed 2 to bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up pillow 1 from bed 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from drawer 1 to box 1",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 sofa1 box1",
            "pickupobjectnoreceptacle agent1 keychain1 box1",
            "gotolocation agent1 box1 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 creditcard1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up credit card 1 from desk",
            "Agent 1 moves from box 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 moves from sofa 1 to box 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 garbagecan1 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from box 3 to garbage can",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to box 4",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box1",
            "pickupobjectnoreceptacle agent1 pencil1 box1",
            "gotolocation agent1 box1 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 sofa1",
            "pickupobjectnoreceptacle agent1 cellphone1 sofa1",
            "gotolocation agent1 sofa1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 picks up cellphone 1 from sofa 1",
            "Agent 1 puts cellphone 1 in sofa 2.",
            "Agent 1 moves from box 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to sofa 1",
            "Agent 1 picks up pencil 1 from box 1",
            "Agent 1 moves from bed 1 to box 1",
            "Agent 1 moves from sofa 1 to sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 sofa1 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 creditcard1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 puts credit card 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from box 2 to sofa 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa3 Do not put it in Box4",
        "step": [
            "gotolocation agent1 drawer2 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 drawer1",
            "pickupobjectnoreceptacle agent1 cd1 drawer1",
            "gotolocation agent1 drawer1 sofa3",
            "putobjectinreceptacle agent1 cd1 sofa3"
        ],
        "desc": [
            "Agent 1 picks up CD 1 from drawer 1",
            "Agent 1 puts CD 1 in sofa 3.",
            "Agent 1 moves from drawer 2 to box 2",
            "Agent 1 moves from sofa 3 to drawer 1",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from drawer 1 to sofa 3",
            "Agent 1 moves from box 2 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 book1 bed1",
            "gotolocation agent1 bed1 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 box2",
            "pickupobjectnoreceptacle agent1 keychain1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 picks up book 1 from bed 1",
            "Agent 1 moves from bed 1 to sofa 2",
            "Agent 1 moves from sofa 2 to box 2",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 puts keychain 1 in sofa 2"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 box4",
            "pickupobjectnoreceptacle agent1 book1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 watch1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from desk 2 to box 4",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts watch 1 in sofa 2.",
            "Agent 1 picks up book 1 from box 4",
            "Agent 1 picks up watch 1 from drawer 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CreditCard1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 creditcard1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 creditcard1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 puts credit card 1 in sofa 2",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 picks up credit card 1 from drawer"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pen1 on the Sofa2 Do not put it in Box2",
        "step": [
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 pen1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 pen1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 puts pen 1 in sofa 2.",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 picks up pen 1 from desk 1",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Watch1 on the Sofa2 Do not put it in Box4",
        "step": [
            "gotolocation agent1 desk2 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 desk1",
            "pickupobjectnoreceptacle agent1 watch1 desk1",
            "gotolocation agent1 desk1 sofa2",
            "putobjectinreceptacle agent1 watch1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from desk 2 to box 3",
            "Agent 1 moves from sofa 2 to desk 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 moves from desk 1 to sofa 2",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 picks up watch 1 from desk 1",
            "Agent 1 puts watch 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box2",
        "step": [
            "gotolocation agent1 drawer1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from drawer 1 to bed 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 puts laptop 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa1 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 alarmclock1 box4",
            "gotolocation agent1 box4 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1",
            "gotolocation agent1 sofa1 desk1",
            "pickupobjectnoreceptacle agent1 book1 desk1",
            "gotolocation agent1 desk1 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 moves from sofa 1 to desk 1",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from box 4 to sofa 1",
            "Agent 1 moves from desk 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up book 1 from desk 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa1 Do not put it in Box1",
        "step": [
            "gotolocation agent1 drawer2 box3",
            "pickupobjectnoreceptacle agent1 keychain1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 keychain1 sofa1",
            "gotolocation agent1 sofa1 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa1",
            "putobjectinreceptacle agent1 cellphone1 sofa1"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 1",
            "Agent 1 moves from drawer 1 to sofa 1",
            "Agent 1 moves from drawer 2 to box 3",
            "Agent 1 puts cellphone 1 in sofa 1.",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from sofa 1 to drawer 1",
            "Agent 1 moves from box 3 to sofa 1"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 alarmclock1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 alarmclock1 sofa1",
            "gotolocation agent1 sofa1 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa1",
            "putobjectinreceptacle agent1 pencil1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up alarm clock 1 from box",
            "Agent 1 puts alarm clock 1 in sofa 1",
            "Agent 1 moves from sofa 1 to garbage can",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 puts pencil 1 in sofa 1.",
            "Agent 1 picks up pencil 1 from garbage can",
            "Agent 1 moves from bed 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CellPhone1 on the Sofa2 Do not put it in Box3",
        "step": [
            "gotolocation agent1 desk2 box4",
            "pickupobjectnoreceptacle agent1 pencil1 box4",
            "gotolocation agent1 box4 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 cellphone1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 cellphone1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 moves from desk 2 to box 4",
            "Agent 1 moves from box 4 to sofa 2",
            "Agent 1 picks up pencil 1 from box 4",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 picks up cellphone 1 from drawer 1",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 puts cellphone 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put CD1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 desk3 box2",
            "pickupobjectnoreceptacle agent1 book1 box2",
            "gotolocation agent1 box2 sofa2",
            "putobjectinreceptacle agent1 book1 sofa2",
            "gotolocation agent1 sofa2 desk2",
            "pickupobjectnoreceptacle agent1 cd1 desk2",
            "gotolocation agent1 desk2 sofa2",
            "putobjectinreceptacle agent1 cd1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from sofa 2 to desk 2",
            "Agent 1 puts book 1 in sofa 2.",
            "Agent 1 moves from box 2 to sofa 2",
            "Agent 1 moves from desk 2 to sofa 2",
            "Agent 1 picks up CD 1 from desk 2",
            "Agent 1 moves from desk 3 to box 2",
            "Agent 1 picks up book 1 from box 2",
            "Agent 1 puts CD 1 in sofa 2."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Book1 on the Sofa3 Do not put it in Box3",
        "step": [
            "gotolocation agent1 bed1 box2",
            "pickupobjectnoreceptacle agent1 pencil1 box2",
            "gotolocation agent1 box2 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3",
            "gotolocation agent1 sofa3 sofa1",
            "pickupobjectnoreceptacle agent1 book1 sofa1",
            "gotolocation agent1 sofa1 sofa3",
            "putobjectinreceptacle agent1 book1 sofa3"
        ],
        "desc": [
            "Agent 1 moves from sofa 3 to sofa 1",
            "Agent 1 puts book 1 in sofa 3.",
            "Agent 1 picks up pencil 1 from box 2",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 picks up book 1 from sofa 1",
            "Agent 1 moves from sofa 1 to sofa 3",
            "Agent 1 moves from bed 1 to box 2",
            "Agent 1 moves from box 2 to sofa 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put KeyChain1 on the Sofa2 Do not put it in Box1",
        "step": [
            "gotolocation agent1 bed1 box3",
            "pickupobjectnoreceptacle agent1 pencil1 box3",
            "gotolocation agent1 box3 sofa2",
            "putobjectinreceptacle agent1 pencil1 sofa2",
            "gotolocation agent1 sofa2 drawer1",
            "pickupobjectnoreceptacle agent1 keychain1 drawer1",
            "gotolocation agent1 drawer1 sofa2",
            "putobjectinreceptacle agent1 keychain1 sofa2"
        ],
        "desc": [
            "Agent 1 moves from box 3 to sofa 2",
            "Agent 1 moves from sofa 2 to drawer 1",
            "Agent 1 picks up pencil 1 from box 3",
            "Agent 1 picks up keychain 1 from drawer",
            "Agent 1 puts pencil 1 in sofa 2.",
            "Agent 1 puts keychain 1 in sofa 2",
            "Agent 1 moves from drawer 1 to sofa 2",
            "Agent 1 moves from bed 1 to box 3"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Pencil1 on the Sofa3 Do not put it in Box2",
        "step": [
            "gotolocation agent1 bed1 box4",
            "pickupobjectnoreceptacle agent1 keychain1 box4",
            "gotolocation agent1 box4 sofa3",
            "putobjectinreceptacle agent1 keychain1 sofa3",
            "gotolocation agent1 sofa3 garbagecan1",
            "pickupobjectnoreceptacle agent1 pencil1 garbagecan1",
            "gotolocation agent1 garbagecan1 sofa3",
            "putobjectinreceptacle agent1 pencil1 sofa3"
        ],
        "desc": [
            "Agent 1 puts keychain 1 in sofa 3",
            "Agent 1 moves from box 4 to sofa 3",
            "Agent 1 puts pencil 1 in sofa 3.",
            "Agent 1 moves from garbage can 1 to sofa",
            "Agent 1 picks up keychain 1 from box",
            "Agent 1 moves from sofa 3 to garbage can",
            "Agent 1 moves from bed 1 to box 4",
            "Agent 1 picks up pencil 1 from garbage can"
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "put Laptop1 on the Sofa1 Do not put it in Box4",
        "step": [
            "gotolocation agent1 garbagecan1 bed1",
            "pickupobjectnoreceptacle agent1 laptop1 bed1",
            "gotolocation agent1 bed1 sofa1",
            "putobjectinreceptacle agent1 laptop1 sofa1",
            "gotolocation agent1 sofa1 box3",
            "pickupobjectnoreceptacle agent1 book1 box3",
            "gotolocation agent1 box3 sofa1",
            "putobjectinreceptacle agent1 book1 sofa1"
        ],
        "desc": [
            "Agent 1 picks up book 1 from box 3",
            "Agent 1 picks up laptop 1 from bed 1",
            "Agent 1 moves from garbage can 1 to bed",
            "Agent 1 moves from box 3 to sofa 1",
            "Agent 1 moves from bed 1 to sofa 1",
            "Agent 1 puts book 1 in sofa 1.",
            "Agent 1 puts laptop 1 in sofa 1."
        ],
        "action": [
            "(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))",
            "(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))",
            "(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))",
            "(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))"
        ]
    },
    {
        "task": "Make a Banana Strawberry Rum Smoothie",
        "step": [
            "place-ingredients bananas sorbet yogurt blender-1",
            "blend-mixture blender-1",
            "add-rum-and-blend rum blender-1",
            "pour-into-glass blender-1 glass-1",
            "garnish-glass glass-1 strawberry-1"
        ],
        "desc": [
            "Place the yogurt, bananas, and sorbet in a blender.",
            "Blend the mixture until it's smooth in texture.",
            "Pour the rum in and quickly blend again.",
            "Pour the smoothie into chilled glasses.",
            "Garnish each glass with a strawberry."
        ],
        "action": [
            "(:action place-ingredients\n    :parameters (?y - ingredient ?b - ingredient ?s - ingredient ?bl - blender)\n    :precondition (clean ?bl)\n    :effect (and\n      (in-blender ?y ?bl)\n      (in-blender ?b ?bl)\n      (in-blender ?s ?bl)\n      (not (clean ?bl))\n    )\n  )\n\n  ;; Step 2: Blend the mixture until it's smooth in texture.",
            "(:action blend-mixture\n    :parameters (?bl - blender)\n    :precondition (and\n      (in-blender yogurt ?bl)\n      (in-blender bananas ?bl)\n      (in-blender sorbet ?bl)\n      (not (blended ?bl))\n    )\n    :effect (blended ?bl)\n  )\n\n  ;; Step 3: Pour the rum in and quickly blend again.",
            "(:action add-rum-and-blend\n    :parameters (?r - rum ?bl - blender)\n    :precondition (and\n      (blended ?bl)\n      (not (contains-rum ?bl))\n    )\n    :effect (and\n      (contains-rum ?bl)\n      (smoothie-prepared ?bl)\n    )\n  )\n\n  ;; Step 4: Pour the smoothie into chilled glasses.",
            "(:action pour-into-glass\n    :parameters (?bl - blender ?g - glass)\n    :precondition (and\n      (smoothie-prepared ?bl)\n      (chilled ?g)\n    )\n    :effect (smoothie-in-glass ?g)\n  )\n\n  ;; Step 5: Garnish each glass with a strawberry.",
            "(:action garnish-glass\n    :parameters (?g - glass ?s - strawberry)\n    :precondition (smoothie-in-glass ?g)\n    :effect (garnished ?g)\n  )\n)"
        ]
    },
    {
        "task": "Make a Pinwheel Wreath",
        "step": [
            "select-paper p1",
            "make-pinwheel pw1 p1",
            "choose-wreath-base w1",
            "attach-pinwheel pw1 w1",
            "attach-twine t1 w1"
        ],
        "desc": [
            "Select suitable paper to make the pinwheels.",
            "Make enough pinwheels to create a wreath.",
            "Find a suitable base, such as a Styrofoam/cane/cardboard wreath base.",
            "If the wreath base lacks a hanger, add some twine or ribbon to create one.",
            "Finished."
        ],
        "action": [
            "(:action select-paper\n    :parameters (?p - paper)\n    :precondition (and (not (selected ?p)) (not (knowledge ?p)))\n    :effect (and (selected ?p) (knowledge ?p))\n  )\n\n  ;; \u52a8\u4f5c 2: \u5236\u4f5c\u65cb\u8f6c\u53f6\u7247",
            "(:action make-pinwheel\n    :parameters (?pw - pinwheel ?p - paper)\n    :precondition (and (selected ?p) (has-shape ?p) (not (made ?pw)))\n    :effect (made ?pw)\n  )\n\n  ;; \u52a8\u4f5c 3: \u9009\u62e9\u82b1\u73af\u57fa\u5ea7",
            "(:action choose-wreath-base\n    :parameters (?w - wreath)\n    :precondition (not (base-chosen ?w))\n    :effect (base-chosen ?w)\n  )\n\n  ;; \u52a8\u4f5c 4: \u9644\u52a0\u9ebb\u7ef3/\u4e1d\u5e26",
            "(:action attach-twine\n    :parameters (?t - twine ?w - wreath)\n    :precondition (and (base-chosen ?w) (not (twine-attached ?t)) (not (twine-located ?t)))\n    :effect (and (twine-attached ?t) (twine-located ?t))\n  )\n\n  ;; \u52a8\u4f5c 5: \u9644\u52a0\u65cb\u8f6c\u53f6\u7247\u5230\u82b1\u73af\u57fa\u5ea7",
            "(:action attach-pinwheel\n    :parameters (?pw - pinwheel ?w - wreath)\n    :precondition (and (made ?pw) (base-chosen ?w) (not (attached ?pw)))\n    :effect (attached ?pw)\n  )\n)"
        ]
    },
    {
        "task": "Grow Fairy Moss Indoors",
        "step": [
            "find-container bowl-container",
            "ask-for-moss fairy-moss",
            "fill-bowl water-1 bowl-container",
            "prune fairy-moss",
            "add-fairy-moss fairy-moss water-1",
            "place-suitable-position bowl-container water-1"
        ],
        "desc": [
            "Ask for it at a nursery or garden center that specializes in pond plant varieties.",
            "Find a suitable container.",
            "Fill the bowl with water.",
            "Add the fairy moss.",
            "Place in a suitable position.",
            "Prune."
        ],
        "action": [
            "(:action ask-for-moss\n    :parameters (?p - plant)\n    :precondition (for-sale ?p)\n    :effect (purchased ?p)\n  )\n\n  ;; Action: \u627e\u5230\u9002\u5408\u7684\u5bb9\u5668",
            "(:action find-container\n    :parameters (?c - container)\n    :precondition (loc ?c in-cabinet)\n    :effect (loc ?c on-countertop)\n  )\n\n  ;; Action: \u586b\u5145\u6c34\u7897",
            "(:action fill-bowl\n    :parameters (?w - water ?c - container)\n    :precondition (and\n                    (loc ?c on-countertop)\n                    (wetness ?w dry)\n                    (volume ?c empty))\n    :effect (and\n              (comp ?w filled)\n              (wetness ?w wet)\n              (position-water ?w inside-bowl)\n              (volume ?c filled))\n  )\n\n  ;; Action: \u6dfb\u52a0\u8568\u7c7b\u82d4\u85d3",
            "(:action add-fairy-moss\n    :parameters (?p - plant ?w - water)\n    :precondition (and\n                    (purchased ?p)\n                    (position-plant ?p outside-of-bowl)\n                    (comp ?w filled))\n    :effect (and\n              (position-plant ?p inside-bowl)\n              (comp ?w now-mixed))\n  )\n\n  ;; Action: \u653e\u7f6e\u5230\u5408\u9002\u7684\u4f4d\u7f6e",
            "(:action place-suitable-position\n    :parameters (?c - container ?w - water)\n    :precondition (and\n                    (loc ?c on-countertop)\n                    (position-water ?w inside-bowl))\n    :effect (and\n              (loc ?c on-table)\n              (position-water ?w in-suitable-position))\n  )\n\n  ;; Action: \u4fee\u526a\u8568\u7c7b\u82d4\u85d3",
            "(:action prune\n    :parameters (?p - plant)\n    :precondition (and\n                    (size ?p larger)\n                    (shape ?p mess))\n    :effect (and\n              (size ?p smaller)\n              (shape ?p pruned))\n  )\n)"
        ]
    },
    {
        "task": "Make Rhubarb Cordial",
        "step": [
            "place_ingredients cloves rhubarb sugar water pot stove",
            "simmer_pot pot stove cordial",
            "remove_from_heat pot stove",
            "garnish_with_mint cordial mint_leaves pot"
        ],
        "desc": [
            "Simmer the rhubarb with the sugar, cloves and water.",
            "Simmer until the rhubarb becomes soft.",
            "Remove from the heat.",
            "Add the mint leaves for decoration."
        ],
        "action": [
            "(:action place_ingredients\n    :parameters (?r - ingredient ?s - ingredient ?c - ingredient ?w - ingredient ?pot - tool ?stove - tool)\n    :precondition (pot_on_stove ?pot ?stove)\n    :effect (and\n      (in_pot ?r ?pot)\n      (in_pot ?s ?pot)\n      (in_pot ?c ?pot)\n      (in_pot ?w ?pot)\n    )\n  )\n\n  ;; Action to simmer the pot",
            "(:action simmer_pot\n    :parameters (?pot - tool ?stove - tool ?p - product)\n    :precondition (and\n      (in_pot rhubarb ?pot)\n      (in_pot sugar ?pot)\n      (in_pot cloves ?pot)\n      (in_pot water ?pot)\n      (pot_on_stove ?pot ?stove)\n    )\n    :effect (and\n      (simmering ?pot)\n      (cooked ?pot)\n      (soft rhubarb)\n      (product_ready ?p)\n    )\n  )\n\n  ;; Action to remove pot from heat",
            "(:action remove_from_heat\n    :parameters (?pot - tool ?stove - tool)\n    :precondition (and\n      (simmering ?pot)\n      (pot_on_stove ?pot ?stove)\n    )\n    :effect (and\n      (off_heat ?pot)\n      (not (pot_on_stove ?pot ?stove))\n    )\n  )\n\n  ;; Action to garnish with mint leaves",
            "(:action garnish_with_mint\n    :parameters (?p - product ?d - decoration ?pot - tool)\n    :precondition (and\n      (product_ready ?p)\n      (off_heat ?pot)\n    )\n    :effect (garnished_with ?p ?d)\n  )\n)"
        ]
    },
    {
        "task": "Create a Character in Lego Star Wars",
        "step": [
            "select_character_parts level",
            "save_name_and_exit level",
            "select_character_parts character",
            "save_name_and_exit character",
            "complete_level level",
            "start_game game"
        ],
        "desc": [
            "When you begin the game, you will start as Princess Leia and Captain Antilles in the Star Wars cantina.",
            "Use the up and down arrows to select the part of the character (hat, head, shirt, arms, hands, weapon, belt, and legs) and the left and right arrows to select through a selection of the body part you are on.",
            "Press \"triangle\" to name it, and \"O\" to save and exit.",
            "Now enter a completed level and turn on free play."
        ],
        "action": [
            "(:action start_game\n    :parameters (?g - entity)\n    :precondition (not (game_played ?g))\n    :effect (game_played ?g)\n  )",
            "(:action select_character_parts\n    :parameters (?s - entity)\n    :precondition (not (selection_made ?s))\n    :effect (selection_made ?s)\n  )",
            "(:action save_name_and_exit\n    :parameters (?n - entity)\n    :precondition (and (selection_made ?n) (not (name_saved ?n)))\n    :effect (name_saved ?n)\n  )",
            "(:action complete_level\n    :parameters (?l - entity)\n    :precondition (and (name_saved ?l) (not (level_completed ?l)))\n    :effect (level_completed ?l)\n  )\n)"
        ]
    },
    {
        "task": "Remove Paint from Windows",
        "step": [
            "mix_soap_and_water bucket01 soap_bottle01",
            "wet_window window01 bucket01 sponge01",
            "open_razor_blade_package razor_blade_package01 razor_blade01",
            "scrape_paint window01 razor_blade01",
            "buff_window window01 cloth01",
            "remove_splatters_with_solvent window01 solvent01",
            "spritz_glass_cleaner window01 glass_cleaner_bottle01"
        ],
        "desc": [
            "You will need a bucket of hot water mixed with dish soap, a clean cloth or sponge, a new safety razor blade and some glass cleaner.",
            "Wet the window with the water and dish soap.",
            "Position the razor blade.",
            "Using slow, smooth motions, start scraping the paint from the window.",
            "Once all of the paint has been scraped away, spritz the window with some glass cleaner and use a clean, dry cloth to buff the windows clean.",
            "Remove small paint splatters with chemical solvents."
        ],
        "action": [
            "(:action gather_items\n    :parameters (?items - item)\n    :precondition (not (in_hand ?items))\n    :effect (in_hand ?items)\n  )\n\n  ;;; Action 2: Mix Soap and Water in Bucket",
            "(:action mix_soap_and_water\n    :parameters (?b - bucket ?sb - soap_bottle)\n    :precondition (and\n      (empty ?b)\n      (full ?sb)\n    )\n    :effect (and\n      (mixed ?b)\n      (not (empty ?b))\n      (not (full ?sb))\n    )\n  )\n\n  ;;; Action 3: Wet the Window with Soap Solution",
            "(:action wet_window\n    :parameters (?w - window ?b - bucket ?s - sponge)\n    :precondition (and\n      (dry ?w)\n      (mixed ?b)\n      (clean_tool ?s)\n    )\n    :effect (and\n      (wet ?w)\n      (not (dry ?w))\n      (dirty_tool ?s)\n    )\n  )\n\n  ;;; Action 4: Open Razor Blade Package",
            "(:action open_razor_blade_package\n    :parameters (?rp - razor_blade_package ?rb - razor_blade)\n    :precondition (and\n      (closed ?rp)\n      (not (in_hand ?rb))\n    )\n    :effect (and\n      (open ?rp)\n      (in_hand ?rb)\n      (not (closed ?rp))\n    )\n  )\n\n  ;;; Action 5: Scrape Paint from Window",
            "(:action scrape_paint\n    :parameters (?w - window ?rb - razor_blade)\n    :precondition (and\n      (wet ?w)\n      (in_hand ?rb)\n      (contains_paint ?w)\n    )\n    :effect (and\n      (not (contains_paint ?w))\n      (dirty_tool ?rb)\n      (clean ?w)\n    )\n  )\n\n  ;;; Action 6: Spritz Window with Glass Cleaner",
            "(:action spritz_glass_cleaner\n    :parameters (?w - window ?gcb - glass_cleaner_bottle)\n    :precondition (and\n      (not (contains_paint ?w))\n      (has_glass_cleaner ?gcb)\n      (not (opaque ?w))\n    )\n    :effect (and\n      (opaque ?w)\n      (not (has_glass_cleaner ?gcb))\n    )\n  )\n\n  ;;; Action 7: Buff Window with Cloth",
            "(:action buff_window\n    :parameters (?w - window ?c - cloth)\n    :precondition (and\n      (opaque ?w)\n      (clean_cloth ?c)\n    )\n    :effect (and\n      (transparent ?w)\n      (dirty_cloth ?c)\n      (not (opaque ?w))\n    )\n  )\n\n  ;;; Action 8: Remove Small Paint Splatters with Solvent",
            "(:action remove_splatters_with_solvent\n    :parameters (?w - window ?s - solvent)\n    :precondition (and\n      (contains_splatters ?w)\n      (has_solvent ?s)\n    )\n    :effect (and\n      (not (contains_splatters ?w))\n      (not (has_solvent ?s))\n    )\n  )\n)"
        ]
    },
    {
        "task": "Learn Photography by Shooting Macro",
        "step": [
            "create_small_studio studio",
            "diffuse_light light",
            "have_appropriate_reflectors reflector",
            "have_closeup_lens lens",
            "start_experimenting experiment"
        ],
        "desc": [
            "Create a very small studio.",
            "Have the appropriate sized reflectors.",
            "Have a closeup lens.",
            "Again, they don't need to be that big, but big enough to diffuse light for your small subject.",
            "Start experimenting."
        ],
        "action": [
            "(:action create_small_studio\n    :parameters (?s - entity)\n    :precondition (and)\n    :effect (and (studio_setup ?s))\n  )",
            "(:action have_appropriate_reflectors\n    :parameters (?r - entity)\n    :precondition (and)\n    :effect (and (reflector_appropriate ?r))\n  )",
            "(:action have_closeup_lens\n    :parameters (?l - entity)\n    :precondition (and)\n    :effect (and (lens_closeup ?l))\n  )",
            "(:action diffuse_light\n    :parameters (?li - entity)\n    :precondition (and)\n    :effect (and (light_diffused ?li))\n  )",
            "(:action start_experimenting\n    :parameters (?e - entity)\n    :precondition (and)\n    :effect (and (experiment_started ?e))\n  )\n)"
        ]
    },
    {
        "task": "Evolve Vulpix in Pok\u00e9mon",
        "step": [
            "find_fire_stone stone",
            "select_bag bag",
            "catch_or_trade_vulpix vulpix",
            "select_stone stone",
            "wait_for_evolution vulpix"
        ],
        "desc": [
            "######Catch or trade for a Vulpix.",
            "######Find a fire stone (or Ice Stone in Sun/Moon to evolve Alolan Vulpix).",
            "Go to your bag and select the stone required.",
            "######Wait for the evolution animation to pop up."
        ],
        "action": [
            "(:action catch_or_trade_vulpix\n    :parameters (?vulpix)\n    :precondition (not (has_vulpix ?vulpix))\n    :effect (has_vulpix ?vulpix)\n  )",
            "(:action find_fire_stone\n    :parameters (?stone)\n    :precondition (not (found_fire_stone ?stone))\n    :effect (found_fire_stone ?stone)\n  )",
            "(:action select_stone\n    :parameters (?stone)\n    :precondition (and (found_fire_stone ?stone) (not (selected_stone ?stone)))\n    :effect (selected_stone ?stone)\n  )",
            "(:action select_bag\n    :parameters (?bag)\n    :precondition (not (selected_bag ?bag))\n    :effect (selected_bag ?bag)\n  )",
            "(:action wait_for_evolution\n    :parameters (?vulpix)\n    :precondition (and (has_vulpix ?vulpix) (selected_stone stone) (selected_bag bag))\n    :effect (vulpix_evolved ?vulpix)\n  )\n)"
        ]
    },
    {
        "task": "Paint Bare Wood",
        "step": [
            "acquire_tool alice paintbrush1",
            "acquire_paint alice oil_paint1",
            "apply_under_coat alice paintbrush1 oil_paint1 barewood1",
            "apply_second_coat alice paintbrush1 oil_paint1 barewood1",
            "finish_painting alice barewood1"
        ],
        "desc": [
            "Acquire oil based paints, which air dry slowly.",
            "The under-coat should be thin, and smooth, move your paint brush down the wood, don't paint up or horizontally.",
            "Paint the second coat, but be much more careful this time, make sure there are no paint bubbles appearing and smooth out any drips or pools left over from the under-coat.",
            "Be the most precise with this.",
            "Finished."
        ],
        "action": [
            "(:action acquire_paint\n    :parameters (?p - person ?m - material)\n    :precondition (and\n      (not (has_paint ?p ?m))\n    )\n    :effect (has_paint ?p ?m)\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u83b7\u53d6\u753b\u7b14",
            "(:action acquire_tool\n    :parameters (?p - person ?t - tool)\n    :precondition (and\n      (not (has_tool ?p ?t))\n    )\n    :effect (has_tool ?p ?t)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6e05\u6d01\u5de5\u5177",
            "(:action clean_tool\n    :parameters (?t - tool)\n    :precondition (and\n      (dirty ?t)\n    )\n    :effect (clean ?t)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u6d82\u62b9\u5e95\u6f06",
            "(:action apply_under_coat\n    :parameters (?p - person ?t - tool ?m - material ?o - object)\n    :precondition (and\n      (has_paint ?p ?m)\n      (has_tool ?p ?t)\n      (clean ?t)\n      (present ?o)\n      (not (painted_under_coat ?o))\n    )\n    :effect (and\n      (paint_applied ?o ?m)\n      (painted_under_coat ?o)\n      (dirty ?t)\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u6d82\u62b9\u7b2c\u4e8c\u5c42\u6d82\u6599",
            "(:action apply_second_coat\n    :parameters (?p - person ?t - tool ?m - material ?o - object)\n    :precondition (and\n      (has_paint ?p ?m)\n      (has_tool ?p ?t)\n      (dirty ?t)\n      (present ?o)\n      (painted_under_coat ?o)\n      (not (painted_second_coat ?o))\n    )\n    :effect (and\n      (paint_applied ?o ?m)\n      (painted_second_coat ?o)\n      (dirty ?t)\n    )\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u5b8c\u6210\u6d82\u6f06",
            "(:action finish_painting\n    :parameters (?p - person ?o - object)\n    :precondition (and\n      (painted_second_coat ?o)\n    )\n    :effect (finished_painting ?o)\n  )\n)"
        ]
    },
    {
        "task": "Get a Headshot in Gears of War",
        "step": [
            "sniper_shot weapon1 player1",
            "shotgun_shot player2",
            "pistol_shot player3",
            "boomshot_shot weapon2 player4"
        ],
        "desc": [
            "Sniper \u2014 Simply aim at the head and pull the trigger, unless you're the host, in which case you will need to aim in front of where they're going.",
            "Shotgun \u2014 The aim on the shotgun is almost like a rectangle.",
            "Pistol \u2014 I'm not sure because I haven't played in a while, but it's either six or seven shots to the head with the standard-issue pistol for a headshot.",
            "BoomShot \u2014 BoomShot headshots are possible \u2014 don't let anyone tell you they're not but the chance of one happening is about a million to one."
        ],
        "action": [
            "(:action sniper_shot\n    :parameters (?w - weapon ?a - agent)\n    :precondition (and\n                    (weapon_location ?w still)\n                    (not (knows_where_to_aim ?a))\n                   )\n    :effect (and\n             (weapon_location ?w focused)\n             (knows_where_to_aim ?a)\n            )\n  )\n\n  ;; \u4f7f\u7528\u9730\u5f39\u67aa\u8fdb\u884c\u5c04\u51fb",
            "(:action shotgun_shot\n    :parameters (?a - agent)\n    :precondition (not (knows_shape_of_shotgun_aim ?a))\n    :effect (knows_shape_of_shotgun_aim ?a)\n  )\n\n  ;; \u4f7f\u7528\u624b\u67aa\u8fdb\u884c\u5c04\u51fb",
            "(:action pistol_shot\n    :parameters (?a - agent)\n    :precondition (not (knows_pistol_shots_needed ?a))\n    :effect (knows_pistol_shots_needed ?a)\n  )\n\n  ;; \u4f7f\u7528BoomShot\u8fdb\u884c\u5c04\u51fb",
            "(:action boomshot_shot\n    :parameters (?w - weapon ?a - agent)\n    :precondition (and\n                    (weapon_location ?w unfired)\n                    (not (knows_boomshot_odds ?a))\n                   )\n    :effect (and\n             (weapon_location ?w fired)\n             (knows_boomshot_odds ?a)\n            )\n  )\n)"
        ]
    },
    {
        "task": "Get on a Bike",
        "step": [
            "swing-leg-over-bike you bike",
            "put-foot-on-pedal you pedals",
            "pedal-with-feet you",
            "stop you bike"
        ],
        "desc": [
            "To get on the bike, swing your non-dominant leg over the shaft of the bike.",
            "Put your dominant foot on the pedal.",
            "Hold on to the handlebars for support and to keep the bike straight.",
            "Keeping your weight center and even, pedal with your feet.",
            "Stopping."
        ],
        "action": [
            "(:action swing-leg-over-bike\n    :parameters (?a - agent ?bike - bike_part)\n    :precondition (and\n      (not (has-knowledge-ability_to_identify_bike_shaft ?a))\n      (position-off-bike ?a)\n    )\n    :effect (and\n      (has-knowledge-ability_to_identify_bike_shaft ?a)\n      (position-on-bike ?a)\n    )\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u5c06\u4e3b\u5bfc\u811a\u653e\u5728\u8e0f\u677f\u4e0a",
            "(:action put-foot-on-pedal\n    :parameters (?a - agent ?p - bike_part)\n    :precondition (and\n      (position-on-bike ?a)\n      (not (has-foot-on-pedal ?a ?p))\n    )\n    :effect (has-foot-on-pedal ?a ?p)\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u6293\u63e1\u8f66\u628a\u4ee5\u83b7\u53d6\u652f\u6301",
            "(:action hold-handlebars-for-support\n    :parameters (?a - agent ?bike - bike_part)\n    :precondition (and\n      (position-on-bike ?a)\n      (not (has-hold-handlebars ?a))\n    )\n    :effect (has-hold-handlebars ?a)\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u7528\u811a\u8e0f\u52a8\u8e0f\u677f",
            "(:action pedal-with-feet\n    :parameters (?a - agent)\n    :precondition (has-foot-on-pedal ?a pedals)\n    :effect (and\n      (has-motion-moving ?a)\n      (motion-moving-bike bike)\n      (balance-maintained ?a)\n    )\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u505c\u6b62\u9a91\u884c",
            "(:action stop\n    :parameters (?a - agent ?bike - bike_part)\n    :precondition (has-motion-moving ?a)\n    :effect (and\n      (has-motion-still ?a)\n      (motion-stopped-bike ?bike)\n      (handbrakes-located ?bike)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make a Wreath with Clothes Hangers",
        "step": [
            "untwist-and-shape-hanger hanger-1 pliers-1",
            "crumple-and-thread-paper paper3 hanger-1",
            "crumple-and-thread-paper paper2 hanger-1",
            "crumple-and-thread-paper paper1 hanger-1",
            "push-squares-and-twist-ends hanger-1 pliers-1",
            "slide-and-scrunch-squares paper3 hanger-1",
            "slide-and-scrunch-squares paper2 hanger-1",
            "slide-and-scrunch-squares paper1 hanger-1",
            "finish-wreath wreath-1 hanger-1"
        ],
        "desc": [
            "Untwist wire hanger and shape into a circle, using pliers as needed.",
            "Gently crumple 3\" squares of wax paper or crepe paper and thread hanger through center of each square.",
            "When you have threaded enough squares to fill length of hanger, gently push squares away from ends and use pliers to twist ends together.",
            "Gently slide squares of paper back toward the joined ends of wire hanger, scrunching paper more for additional fullness.",
            "Finished."
        ],
        "action": [
            "(:action untwist-and-shape-hanger\n    :parameters (?h - hanger ?p - pliers)\n    :precondition (shape-straight ?h)\n    :effect (and\n              (shape-circle ?h)\n              (not (shape-straight ?h))\n            )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u63c9\u76b1\u7eb8\u5f20\u5e76\u7a7f\u8fc7\u6302\u94a9",
            "(:action crumple-and-thread-paper\n    :parameters (?p - paper_square ?h - hanger)\n    :precondition (and\n                    (shape-circle ?h)\n                    (not (crumpled ?p))\n                    (not (threaded ?h ?p))\n                  )\n    :effect (and\n              (crumpled ?p)\n              (threaded ?h ?p)\n            )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u63a8\u5f00\u7eb8\u5f20\u5e76\u626d\u7ed3\u6302\u94a9\u4e24\u7aef",
            "(:action push-squares-and-twist-ends\n    :parameters (?h - hanger ?p - pliers)\n    :precondition (and\n                    (shape-circle ?h)\n                    (threaded ?h paper1)\n                    (threaded ?h paper2)\n                    (threaded ?h paper3)\n                  )\n    :effect (and\n              (squares-pushed-away ?h)\n              (twisted-ends ?h)\n            )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u5c06\u7eb8\u5f20\u6ed1\u56de\u6302\u94a9\u5e76\u634f\u7d27",
            "(:action slide-and-scrunch-squares\n    :parameters (?p - paper_square ?h - hanger)\n    :precondition (and\n                    (squares-pushed-away ?h)\n                    (threaded ?h ?p)\n                    (crumpled ?p)\n                  )\n    :effect (squares-scrunched ?p)\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5b8c\u6210\u82b1\u73af",
            "(:action finish-wreath\n    :parameters (?w - wreath ?h - hanger)\n    :precondition (and\n                    (twisted-ends ?h)\n                    (squares-scrunched paper1)\n                    (squares-scrunched paper2)\n                    (squares-scrunched paper3)\n                  )\n    :effect (completed ?w)\n  )\n)"
        ]
    },
    {
        "task": "Camouflage Equipment",
        "step": [
            "lay_out_equipment my_equipment ground_surface",
            "organize_webbing my_equipment ground_surface my_webbing",
            "organize_weapon my_equipment ground_surface my_weapon",
            "organize_rucksack my_equipment ground_surface my_rucksack",
            "organize_helmet my_equipment ground_surface my_helmet",
            "camouflage_vehicle my_vehicle my_camouflage_net",
            "camouflage_webbing my_webbing",
            "camouflage_weapon my_weapon",
            "camouflage_rucksack my_rucksack",
            "camouflage_helmet my_helmet"
        ],
        "desc": [
            "Firstly, lay out all the equipment you are going to use-whatever pattern it is.",
            "Start with your rucksack, this is the biggest piece of your personal kit so needs the most camouflage.",
            "Next, move on to the helmet.",
            "Be careful with webbing.",
            "Be extremely cautious when disguising your weapon.",
            "Vehicles really need a vehicle camouflage net."
        ],
        "action": [
            "(:action lay_out_equipment\n    :parameters (?e - equipment ?s - surface)\n    :precondition (not (laid_out ?e ?s))\n    :effect (laid_out ?e ?s)\n  )\n\n  ;; Action 2: Organize equipment",
            "(:action organize_equipment\n    :parameters (?e - equipment ?s - surface)\n    :precondition (and\n      (laid_out ?e ?s)\n      (not (organized ?e))\n    )\n    :effect (organized ?e)\n  )",
            "(:action organize_rucksack\n    :parameters (?e - equipment ?s - surface ?r - rucksack)\n    :precondition (and\n      (laid_out ?e ?s)\n      (not (organized ?r))\n    )\n    :effect (organized ?r)\n  )",
            "(:action organize_helmet\n    :parameters (?e - equipment ?s - surface ?h - helmet)\n    :precondition (and\n      (laid_out ?e ?s)\n      (not (organized ?h))\n    )\n    :effect (organized ?h)\n  )",
            "(:action organize_weapon\n    :parameters (?e - equipment ?s - surface ?wep - weapon)\n    :precondition (and\n      (laid_out ?e ?s)\n      (not (organized ?wep))\n    )\n    :effect (organized ?wep)\n  )",
            "(:action organize_webbing\n    :parameters (?e - equipment ?s - surface ?web - webbing)\n    :precondition (and\n      (laid_out ?e ?s)\n      (not (organized ?web))\n    )\n    :effect (organized ?web)\n  )\n  ;; Action 3: Camouflage the rucksack",
            "(:action camouflage_rucksack\n    :parameters (?r - rucksack)\n    :precondition (and\n      (organized ?r)\n      (not (camouflaged ?r))\n    )\n    :effect (camouflaged ?r)\n  )\n\n  ;; Action 4: Camouflage the helmet",
            "(:action camouflage_helmet\n    :parameters (?h - helmet)\n    :precondition (and\n      (organized ?h)\n      (not (camouflaged ?h))\n    )\n    :effect (camouflaged ?h)\n  )\n\n  ;; Action 5: Camouflage the webbing",
            "(:action camouflage_webbing\n    :parameters (?w - webbing)\n    :precondition (and\n      (organized ?w)\n      (not (camouflaged ?w))\n    )\n    :effect (camouflaged ?w)\n  )\n\n  ;; Action 6: Carefully camouflage the weapon",
            "(:action camouflage_weapon\n    :parameters (?wep - weapon)\n    :precondition (and\n      (organized ?wep)\n      (not (camouflaged ?wep))\n    )\n    :effect (and\n      (camouflaged ?wep)\n      (carefully_disguised ?wep)\n    )\n  )\n\n  ;; Action 7: Camouflage the vehicle with a camouflage net",
            "(:action camouflage_vehicle\n    :parameters (?v - vehicle ?cn - camouflage_net)\n    :precondition (not (netted ?v ?cn))\n    :effect (netted ?v ?cn)\n  )\n)"
        ]
    },
    {
        "task": "Ninja Defuse in Call of Duty",
        "step": [
            "find_hiding_spot character player_pistol further_out",
            "investigate_routes character current_routes",
            "wait_until_planting character game_bomb",
            "start_defusing character game_bomb"
        ],
        "desc": [
            "Move in and cover your route to the bomb site.",
            "Find a hiding spot and pull out your pistol.",
            "Investigate your enemy's routes.",
            "Wait until enemy does start to plant the bomb.",
            "Start defusing once the bomb has been planted."
        ],
        "action": [
            "(:action move_in\n    :parameters (?c - game_character ?r - routes ?from - place ?to - place)\n    :precondition (and\n                    (location ?c ?from)\n                    (coverage ?r uncovered)\n                    (appearance ?r uncovered))\n    :effect (and\n             (location ?c ?to)\n             (coverage ?r covered)\n             (appearance ?r covered))\n  )\n\n  ;; \u52a8\u4f5c2: \u627e\u5230\u9690\u85cf\u70b9\u5e76\u62d4\u51fa\u624b\u67aa",
            "(:action find_hiding_spot\n    :parameters (?c - game_character ?p - pistol ?ps - place)\n    :precondition (and\n                    (location ?c ?ps)\n                    (pistol_location ?p concealed)\n                    (availability ?p in_inventory))\n    :effect (and\n             (location ?c hidden)\n             (pistol_location ?p exposed)\n             (availability ?p equipped))\n  )\n\n  ;; \u52a8\u4f5c3: \u8c03\u67e5\u654c\u4eba\u7684\u8def\u7ebf",
            "(:action investigate_routes\n    :parameters (?c - game_character ?r - routes)\n    :precondition (and\n                    (location ?c hidden)\n                    (focus ?c pulling_out_pistol)\n                    (knowledge ?r uninvestigated))\n    :effect (and\n             (focus ?c investigating)\n             (knowledge ?r investigated))\n  )\n\n  ;; \u52a8\u4f5c4: \u7b49\u5f85\u654c\u4eba\u5f00\u59cb\u5b89\u88c5\u70b8\u5f39",
            "(:action wait_until_planting\n    :parameters (?c - game_character ?b - bomb)\n    :precondition (and\n                    (focus ?c investigating)\n                    (skill ?b unplanted))\n    :effect (and\n             (focus ?c waiting)\n             (skill ?b planted))\n  )\n\n  ;; \u52a8\u4f5c5: \u70b8\u5f39\u88ab\u5b89\u88c5\u540e\u5f00\u59cb\u62c6\u9664",
            "(:action start_defusing\n    :parameters (?c - game_character ?b - bomb)\n    :precondition (and\n                    (location ?c hidden)\n                    (focus ?c waiting)\n                    (skill ?b planted))\n    :effect (and\n             (location ?c now_at_bomb)\n             (focus ?c defusing)\n             (skill ?b defused))\n  )\n)"
        ]
    },
    {
        "task": "Get Under the Stage in Dragonball Z Budokai Tenkaichi 2",
        "step": [
            "select_vs_duel duel1",
            "select_character player2 goku",
            "select_character player1 goku",
            "move_to_wall player1 player2 away_from_wall away_from_wall",
            "specify_stage stage1",
            "select_player player2",
            "select_player player1"
        ],
        "desc": [
            "Choose VS Duel, 2 players.",
            "Choose Goku as player one, as well as player two.",
            "Choose Mountain Road as the stage.",
            "Move to opposite ends of the street so that you are both against the Wall that keeps you in the stage."
        ],
        "action": [
            "(:action select_vs_duel\n    :parameters (?duel - vs_duel)\n    :precondition (not (vs_duel_selected ?duel))\n    :effect (vs_duel_selected ?duel)\n  )\n\n  ;; \u9009\u62e9\u73a9\u5bb6",
            "(:action select_player\n    :parameters (?player - player)\n    :precondition (not (player_selected ?player))\n    :effect (player_selected ?player)\n  )\n\n  ;; \u4e3a\u73a9\u5bb6\u9009\u62e9\u89d2\u8272",
            "(:action select_character\n    :parameters (?player - player ?character - character)\n    :precondition (and (present ?character) (not (character_selected ?player ?character)))\n    :effect (character_selected ?player ?character)\n  )\n\n  ;; \u6307\u5b9a\u821e\u53f0",
            "(:action specify_stage\n    :parameters (?stage - stage)\n    :precondition (not (stage_specified ?stage))\n    :effect (stage_specified ?stage)\n  )\n\n  ;; \u79fb\u52a8\u73a9\u5bb6\u5230\u5899\u8fb9\u5e76\u5206\u79bb",
            "(:action move_to_wall\n    :parameters (?player1 - player ?player2 - player ?loc1 - location ?loc2 - location)\n    :precondition (and\n                    (located ?player1 ?loc1)\n                    (located ?player2 ?loc2)\n                    (vs_duel_selected duel1)\n                    (character_selected ?player1 goku)\n                    (character_selected ?player2 goku))\n    :effect (and\n              (located ?player1 against_wall)\n              (located ?player2 against_wall)\n              (against_wall ?player1)\n              (against_wall ?player2)\n              (separated ?player1 ?player2)\n            )\n  )\n)"
        ]
    },
    {
        "task": "Clean Synthetic Hiking Gear",
        "step": [
            "read_instructions instructions",
            "clean_polar_fleece polar_fleece washing_machine",
            "wash_clothing clothing washing_machine"
        ],
        "desc": [
            "Read all of the instructions first.",
            "Wash Gore-Tex and other breathable, waterproof synthetic outer shell clothing following the instructions on the label.",
            "Be careful with synthetic boots.",
            "Take care cleaning synthetic jackets containing down.",
            "Wash polar fleece (microfleece or micrafleece) in the washing machine."
        ],
        "action": [
            "(:action read_instructions\n    :parameters (?instructions - instructions)\n    :precondition (not (knowledge ?instructions))\n    :effect (knowledge ?instructions)\n  )",
            "(:action wash_clothing\n    :parameters (?clothing - clothing ?washing_machine - washing_machine)\n    :precondition (cleanness ?clothing)\n    :effect (not (cleanness ?clothing))\n  )",
            "(:action clean_polar_fleece\n    :parameters (?polar_fleece - polar_fleece ?washing_machine - washing_machine)\n    :precondition (not (cleanness ?polar_fleece))\n    :effect (cleanness ?polar_fleece)\n  )\n)"
        ]
    },
    {
        "task": "Defeat a Thug on Dead Island",
        "step": [
            "acquire-knowledge you",
            "equip-weapon you grenades",
            "throw-weapon you grenades thug1"
        ],
        "desc": [
            "There is no chance in hell you will kill a Thug using just your bear hands and feet.",
            "Incendiary Weapons - Grenades or Molotov Cocktails *WARNING* You may need to use a couple of these, so it is recommended that you only use one when a Thugs' health is below 50%.",
            "Make sure your guns have enough ammo, and your knives are up to scratch.",
            "Attack!"
        ],
        "action": [
            "(:action acquire-knowledge\n    :parameters (?p - person)\n    :precondition (not (knowledge_aware ?p))\n    :effect (knowledge_aware ?p)\n  )\n\n  ;; \u786e\u4fdd\u5f39\u836f\u5145\u8db3\u7684\u52a8\u4f5c",
            "(:action ensure-ammo\n    :parameters (?a - ammo)\n    :precondition (not (ammo_assured ?a))\n    :effect (ammo_assured ?a)\n  )\n\n  ;; \u88c5\u5907\u6b66\u5668\u7684\u52a8\u4f5c",
            "(:action equip-weapon\n    :parameters (?p - person ?w - weapon)\n    :precondition (knowledge_aware ?p)\n    :effect (weapon_location ?w on_person)\n  )\n\n  ;; \u4f7f\u7528\u6b66\u5668\u653b\u51fb\u50f5\u5c38\u7684\u52a8\u4f5c\uff08\u9700\u8981\u5f39\u836f\uff0c\u5982\u67aa\u68b0\uff09",
            "(:action attack-with-weapon\n    :parameters (?p - person ?w - weapon ?a - ammo ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (ammo_assured ?a)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (not (ammo_assured ?a)) ; \u4f7f\u7528\u5f39\u836f\u540e\u5f39\u836f\u51cf\u5c11\n            )\n  )\n\n  ;; \u4f7f\u7528\u6295\u63b7\u6b66\u5668\u653b\u51fb\u50f5\u5c38\u7684\u52a8\u4f5c\uff08\u5982\u624b\u69b4\u5f39\u3001\u71c3\u70e7\u74f6\uff09",
            "(:action throw-weapon\n    :parameters (?p - person ?w - weapon ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (weapon_thrown ?w)\n              (weapon_location ?w thrown_at_enemy) ; \u6b66\u5668\u88ab\u6295\u63b7\u5230\u654c\u4eba\u5904\n            )\n  )\n)"
        ]
    },
    {
        "task": "Grow a Rose Bush from Rose Bush Cuttings",
        "step": [
            "prepare_area clipping",
            "take_cutting clipping",
            "moisten_clipping clipping",
            "plant_cutting clipping"
        ],
        "desc": [
            "Prepare the pot or area in your yard where you plan to plant your clipping.",
            "Take a cutting from the rose bush you would like to grow your new bush from.",
            "Moisten the part of the clipping that you just scraped and dip it into rooting hormone.",
            "Immediately plant the cutting."
        ],
        "action": [
            "(:action prepare_area\n    :parameters (?e - entity)\n    :precondition (not (prepared ?e))\n    :effect (prepared ?e)\n  )",
            "(:action take_cutting\n    :parameters (?e - entity)\n    :precondition (and (prepared ?e) (not (cut ?e)))\n    :effect (cut ?e)\n  )",
            "(:action moisten_clipping\n    :parameters (?e - entity)\n    :precondition (and (cut ?e) (not (moistened ?e)))\n    :effect (moistened ?e)\n  )",
            "(:action plant_cutting\n    :parameters (?e - entity)\n    :precondition (and (moistened ?e) (not (planted ?e)))\n    :effect (planted ?e)\n  )\n)"
        ]
    },
    {
        "task": "Make a Pitcher of Melon Pina Coladas",
        "step": [
            "pour_ingredients_into_pitcher mixture1 pitcher1 kitchen_counter",
            "mix_pitcher pitcher1 mixture1",
            "chill_mixture pitcher1 refrigerator1",
            "pour_into_glass mixture1 pitcher1 glass1",
            "add_garnish honeydew1 glass1 mixture1"
        ],
        "desc": [
            "Pour the ingredients (except the garnish) into a pitcher that can hold 100 ounces.",
            "Ensure everything is mixed thoroughly.",
            "Allow the mixture to chill in the refrigerator until ready to serve.",
            "Pour the mixture into tall glasses.",
            "Add a chunk of honeydew melon on the side of each glass.",
            "Finished."
        ],
        "action": [
            "(:action pour_ingredients_into_pitcher\n    :parameters (?m - mixture ?p - pitcher ?l - object)\n    :precondition (and\n      (empty ?p)\n      (in ?m ?l)\n    )\n    :effect (and\n      (in ?m ?p)\n      (not (empty ?p))\n      (not (in ?m ?l))\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5145\u5206\u6df7\u5408",
            "(:action mix_pitcher\n    :parameters (?p - pitcher ?m - mixture)\n    :precondition (and\n      (in ?m ?p)\n      (not (mixed ?p))\n    )\n    :effect (mixed ?p)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u51b7\u85cf\u6df7\u5408\u7269",
            "(:action chill_mixture\n    :parameters (?p - pitcher ?r - refrigerator)\n    :precondition (mixed ?p)\n    :effect (chilled ?p)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u5c06\u6df7\u5408\u7269\u5012\u5165\u676f\u4e2d",
            "(:action pour_into_glass\n    :parameters (?m - mixture ?p - pitcher ?g - glass)\n    :precondition (and\n      (chilled ?p)\n      (in ?m ?p)\n    )\n    :effect (and\n      (in_glass ?m ?g)\n      (empty ?p)\n      (not (in ?m ?p))\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u6dfb\u52a0\u871c\u74dc\u88c5\u9970",
            "(:action add_garnish\n    :parameters (?h - honeydew ?g - glass ?m - mixture)\n    :precondition (in_glass ?m ?g)\n    :effect (and\n      (garnished ?h ?g)\n      (on_table ?g)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Recycle Underpants",
        "step": [
            "make_cleaning_rags underpants6",
            "make_cleaning_rags underpants5",
            "make_cleaning_rags underpants4",
            "donate_underpants underpants6",
            "child_wears_underpants underpants5",
            "use_as_stuffing underpants4",
            "make_craft_item underpants3 scissors1",
            "make_garden_ties underpants2 scissors1 plant1",
            "make_cleaning_rags underpants1"
        ],
        "desc": [
            "Turn the underpants into cleaning rags.",
            "Use the underwear as garden ties.",
            "Turn quality undies into craft items.",
            "Use a bundle of old underwear as stuffing.",
            "Children can wear old underwear on the outside of their pants to play superhero.",
            "Donate the underpants."
        ],
        "action": [
            "(:action make_cleaning_rags\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (not (is_old ?u))\n    )\n    :effect (and\n      (is_old ?u)\n      (used_as_cleaning_rags ?u)\n    )\n  )\n\n  ;; \u52a8\u4f5c2: \u4f7f\u7528\u5185\u88e4\u4f5c\u4e3a\u56ed\u827a\u7ed1\u5e26",
            "(:action make_garden_ties\n    :parameters (?u - underpants ?t - tool ?pl - plant)\n    :precondition (and\n      (at ?u drawer)\n      (available ?t)\n      (not (is_old ?u))\n    )\n    :effect (and\n      (is_old ?u)\n      (used_as_garden_ties ?u)\n      (tied ?pl)\n    )\n  )\n\n  ;; \u52a8\u4f5c3: \u5c06\u5185\u88e4\u5236\u4f5c\u6210\u5de5\u827a\u54c1",
            "(:action make_craft_item\n    :parameters (?u - underpants ?t - tool)\n    :precondition (and\n      (at ?u drawer)\n      (available ?t)\n      (not (is_old ?u))\n    )\n    :effect (and\n      (is_old ?u)\n      (used_as_craft_item ?u)\n    )\n  )\n\n  ;; \u52a8\u4f5c4: \u5c06\u5185\u88e4\u7528\u4f5c\u586b\u5145\u7269",
            "(:action use_as_stuffing\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (is_old ?u)\n    )\n    :effect (used_as_stuffing ?u)\n  )\n\n  ;; \u52a8\u4f5c5: \u5b69\u5b50\u7a7f\u7740\u65e7\u5185\u88e4\u73a9\u8d85\u7ea7\u82f1\u96c4",
            "(:action child_wears_underpants\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (is_old ?u)\n    )\n    :effect (worn_by_child ?u)\n  )\n\n  ;; \u52a8\u4f5c6: \u6350\u8d60\u5185\u88e4",
            "(:action donate_underpants\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (is_old ?u)\n    )\n    :effect (donated ?u)\n  )\n)"
        ]
    },
    {
        "task": "Polish a Faucet With a Lemon",
        "step": [
            "cut-lemon water",
            "squeeze-lemon water faucet",
            "rub-faucet faucet water faucet"
        ],
        "desc": [
            "######Cut a lemon in half.",
            "######Squeeze out the juice.",
            "######Take the squeezed out lemon half and rub vigorously over the faucets.",
            "######Wash the tap after scouring with the lemon half."
        ],
        "action": [
            "(:action cut-lemon\n    :parameters (?lemon - entity)\n    :precondition (not (halved ?lemon))\n    :effect (halved ?lemon)\n  )\n\n  ;; Action to squeeze the lemon to extract juice",
            "(:action squeeze-lemon\n    :parameters (?lemon - entity ?juice - entity)\n    :precondition (and (halved ?lemon) (not (lemon-squeezed ?lemon)))\n    :effect (and\n              (lemon-squeezed ?lemon)\n              (juice-squeezed ?juice)\n              (juicy ?lemon)\n            )\n  )\n\n  ;; Action to rub the faucet with the squeezed lemon half",
            "(:action rub-faucet\n    :parameters (?faucet - entity ?lemon - entity ?juice - entity)\n    :precondition (and\n                    (juice-squeezed ?juice)\n                    (halved ?lemon)\n                  )\n    :effect (and\n              (faucet-wet ?faucet)\n              (faucet-clean ?faucet)\n              (faucet-shiny ?faucet)\n              (juice-on-faucet ?juice)\n            )\n  )\n\n  ;; Action to wash the faucet after scouring",
            "(:action wash-faucet\n    :parameters (?faucet - entity ?water - entity ?juice - entity)\n    :precondition (juice-on-faucet ?juice)\n    :effect (and\n              (water-in-sink ?water)\n              (faucet-clean ?faucet)\n              (not (juice-on-faucet ?juice))\n              (not (faucet-wet ?faucet)) ;; \u5047\u8bbe\u6e05\u6d17\u540e\u6c34\u5206\u88ab\u79fb\u9664\n            )\n  )\n)"
        ]
    },
    {
        "task": "Connect a Wii to HD TV",
        "step": [
            "plug_hdmi_to_cable hdmi_cord1",
            "plug_hdmi_to_tv hdmi_cord1 tv1",
            "connect_hdmi_to_wii_av hdmi_cord1 wii_av_output1",
            "plug_hdmi_to_converter hdmi_cord1 converter1 tv1"
        ],
        "desc": [
            "Plug in your HDMI cord to the cable.",
            "Plug it into your TV's HDMI input.",
            "Plug it into your wii's AV Composite Output instead of putting in the Composite cord that comes with the Wii.",
            "Plug your HDMI cord (assuming you have one) into the converter and your TV."
        ],
        "action": [
            "(:action plug_hdmi_to_cable\n    :parameters (?h - hdmi_cord)\n    :precondition (and (not (connected_to_cable ?h)))\n    :effect (and (connected_to_cable ?h)))",
            "(:action plug_hdmi_to_tv\n    :parameters (?h - hdmi_cord ?t - tv)\n    :precondition (and (connected_to_cable ?h) (not (connected_to_tv ?h)))\n    :effect (and (connected_to_tv ?h) (full_tv ?t)))",
            "(:action connect_hdmi_to_wii_av\n    :parameters (?h - hdmi_cord ?w - wii_av_output)\n    :precondition (and (connected_to_tv ?h) (not (connected_to_wii ?h)))\n    :effect (and (connected_to_wii ?h) (full_av_output ?w)))",
            "(:action plug_hdmi_to_converter\n    :parameters (?h - hdmi_cord ?c - converter ?t - tv)\n    :precondition (and (connected_to_wii ?h) (not (connected_to_converter_tv ?h)))\n    :effect (and (connected_to_converter_tv ?h) (connected_converter ?c)))\n)"
        ]
    },
    {
        "task": "Open a Rusty Bolt",
        "step": [
            "obtain_fizzy_drink fizzy_drink1",
            "pour_fizzy_drink fizzy_drink1 old_bolt1",
            "wipe_clean towel1 fizzy_drink1",
            "dissolve_rust old_bolt1 fizzy_drink1",
            "replace_bolt old_bolt1 new_bolt1"
        ],
        "desc": [
            "Obtain some fizzy drink.",
            "Pour the fizzy drink over the bolt.",
            "Wipe it clean with kitchen towel.",
            "The fizzy drink should have dissolved the rust build-up causing the bolt to stick.",
            "Replace the rusty bolt."
        ],
        "action": [
            "(:action obtain_fizzy_drink\n        :parameters (?d - drink)\n        :precondition (not (obtained ?d))\n        :effect (obtained ?d)\n    )",
            "(:action pour_fizzy_drink\n        :parameters (?d - drink ?b - bolt)\n        :precondition (and (obtained ?d) (stuck ?b))\n        :effect (and (on_bolt ?d) (not (obtained ?d)))\n    )",
            "(:action wipe_clean\n        :parameters (?t - towel ?d - drink)\n        :precondition (and (on_bolt ?d) (clean ?t))\n        :effect (and (on_towel ?d) (dirty ?t))\n    )",
            "(:action dissolve_rust\n        :parameters (?b - bolt ?d - drink)\n        :precondition (and (on_towel ?d) (stuck ?b))\n        :effect (and (unstuck ?b) (not (stuck ?b)))\n    )",
            "(:action replace_bolt\n        :parameters (?b_old - bolt ?b_new - bolt)\n        :precondition (and (unstuck ?b_old) (in_package ?b_new))\n        :effect (and (in_machine ?b_new) (not (in_package ?b_new)))\n    )\n)"
        ]
    },
    {
        "task": "Make a Duct Tape Necklace",
        "step": [
            "unroll_tape tape1",
            "fold_tape tape1",
            "smooth_tape tape1",
            "tape_ends_together tape1 ends1"
        ],
        "desc": [
            "Take one roll of duct tape and make a piece about a little bigger than your head.",
            "Measure it around your head, and cut it off the roll.",
            "Fold it halfway through the middle, like shown.",
            "Fold the other half so there is no sticky part showing.",
            "Tape the ends together.",
            "And you are done!"
        ],
        "action": [
            "(:action unroll_tape\n    :parameters (?t - tape)\n    :precondition (and (rolled ?t) (on_roll ?t))\n    :effect (and (in_pieces ?t) (not (rolled ?t)))\n  )",
            "(:action measure_and_cut_tape\n    :parameters (?t - tape ?tb - table)\n    :precondition (and (in_pieces ?t) (elongated ?t) (not (measured ?tb)))\n    :effect (and (measured ?tb) (in_pieces ?t))\n  )",
            "(:action fold_tape\n    :parameters (?t - tape)\n    :precondition (and (in_pieces ?t) (elongated ?t))\n    :effect (and (folded ?t) (not (elongated ?t)))\n  )",
            "(:action smooth_tape\n    :parameters (?t - tape)\n    :precondition (and (folded ?t) (sticky ?t))\n    :effect (and (smooth ?t) (not (sticky ?t)))\n  )",
            "(:action tape_ends_together\n    :parameters (?t - tape ?e - ends)\n    :precondition (and (smooth ?t) (separate_pieces ?t) (separate_ends ?e))\n    :effect (and (one_piece ?t) (joined_ends ?e) (not (separate_ends ?e)) (not (separate_pieces ?t)))\n  )\n)"
        ]
    },
    {
        "task": "Make Pineapple Sherbet",
        "step": [
            "add-ingredient sugar blender",
            "add-ingredient pineapple blender",
            "add-ingredient oil blender",
            "add-ingredient milk blender",
            "add-ingredient extract blender",
            "blend-all blender mixture",
            "pour-into-dish mixture blender plate",
            "freeze-mixture mixture plate freezer sherbet"
        ],
        "desc": [
            "Blend the pineapple if it's fresh.",
            "Pour in the milk, oil, sugar or syrup and extract.",
            "Blend all of the ingredients together until smooth.",
            "Pour into a baking dish with decent sides.",
            "Place in the freezer.",
            "To serve: Simply scoop or cut out pieces of the sherbet."
        ],
        "action": [
            "(:action put-in-blender\n    :parameters (?ingredient - ingredient ?blender - appliance)\n    :precondition (and (at ?ingredient kitchen) (at ?blender kitchen))\n    :effect (and (in ?ingredient ?blender) (not (at ?ingredient kitchen)))\n  )",
            "(:action blend-pineapple\n    :parameters (?pineapple - ingredient ?blender - appliance)\n    :precondition (and (is-fresh ?pineapple) (in ?pineapple ?blender) (state ?blender off))\n    :effect (and (blended ?pineapple) (state ?blender on))\n  )",
            "(:action add-ingredient\n    :parameters (?ingredient - ingredient ?blender - appliance)\n    :precondition (and (at ?ingredient kitchen) (at ?blender kitchen))\n    :effect (and (in ?ingredient ?blender) (not (at ?ingredient kitchen)))\n  )",
            "(:action blend-all\n    :parameters (?blender - appliance ?mixture - mixture)\n    :precondition (and\n      (in pineapple ?blender)\n      (in milk ?blender)\n      (in oil ?blender)\n      (in sugar ?blender)\n      (in extract ?blender)\n      (state ?blender off)\n    )\n    :effect (and\n      (not (in pineapple ?blender))\n      (not (in milk ?blender))\n      (not (in oil ?blender))\n      (not (in sugar ?blender))\n      (not (in extract ?blender))\n      (in ?mixture ?blender)\n      (state ?blender on)\n    )\n  )",
            "(:action pour-into-dish\n    :parameters (?mixture - mixture ?blender - appliance ?dish - container)\n    :precondition (and (in ?mixture ?blender) (at ?blender kitchen) (at ?dish kitchen))\n    :effect (and\n      (not (in ?mixture ?blender))\n      (in ?mixture ?dish)\n    )\n  )",
            "(:action freeze-mixture\n    :parameters (?mixture - mixture ?dish - container ?freezer - location ?sherbet - sherbet)\n    :precondition (and (in ?mixture ?dish) (at ?dish kitchen) (at ?freezer kitchen))\n    :effect (and\n      (not (in ?mixture ?dish))\n      (in ?sherbet ?dish)\n      (at ?dish ?freezer)\n      (frozen ?sherbet)\n    )\n  )",
            "(:action serve-sherbet\n    :parameters (?sherbet - sherbet ?dish - container ?plate - container)\n    :precondition (and (in ?sherbet ?dish) (at ?dish freezer) (frozen ?sherbet))\n    :effect (and\n      (not (in ?sherbet ?dish))\n      (in ?sherbet ?plate)\n      (at ?dish kitchen)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make Chinese Macaroni in Just 20 Minutes",
        "step": [
            "boil_macaroni macaroni pan kitchen",
            "serve_macaroni macaroni plate dining_table pan"
        ],
        "desc": [
            "Boil macaroni in hot boiling water with some salt and oil for 10-15 minutes.",
            "After the macaroni has boiled put under running water for about 15 seconds to prevent over cooking.",
            "In another pan add some oil and toss in the macaroni.",
            "Add salt, red chilli powder ,soy sauce,white vinegar and ajino moto.",
            "Cook for some seconds.",
            "Serve hot with chilled drinks."
        ],
        "action": [
            "(:action boil_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?kitchen - location)\n    :precondition (and\n      (at ?macaroni ?kitchen)\n      (at ?pot ?kitchen)\n      (not (cooked ?macaroni))\n    )\n    :effect (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u51b7\u5374\u901a\u5fc3\u7c89",
            "(:action cool_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?sink - location)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n      (at ?pot ?sink)\n    )\n    :effect (and\n      (cooled ?macaroni)\n    )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u5728\u5e73\u5e95\u9505\u4e2d\u7ffb\u7092\u901a\u5fc3\u7c89",
            "(:action toss_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container ?kitchen - location)\n    :precondition (and\n      (cooled ?macaroni)\n      (at ?pan ?kitchen)\n      (at ?macaroni ?kitchen)\n    )\n    :effect (and\n      (in ?macaroni ?pan)\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u52a0\u5165\u8c03\u5473\u6599",
            "(:action add_seasoning\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (not (seasoned ?macaroni))\n    )\n    :effect (and\n      (seasoned ?macaroni)\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u70f9\u996a\u901a\u5fc3\u7c89",
            "(:action cook_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (seasoned ?macaroni)\n    )\n    :effect (and\n      (cooked ?macaroni)\n    )\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u76db\u76d8\u5e76\u4e0a\u684c",
            "(:action serve_macaroni\n    :parameters (?macaroni - ingredient ?plate - container ?dining_table - location ?pan - container)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pan)\n      (at ?plate ?dining_table)\n    )\n    :effect (and\n      (in ?macaroni ?plate)\n      (served ?macaroni)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make a Pipe Cleaner Bird",
        "step": [
            "bend_to_form_legs pc1",
            "enlarge_torso torso",
            "move_for_beak tip",
            "shape_to_form_body pc2"
        ],
        "desc": [
            "Bend one pipe cleaner in half to form the legs.",
            "Shape another pipe cleaner to form the body.",
            "Move 1.5 inches (3.8 cm) from the tip of where the beak should be.",
            "Use 2 pipe cleaners to enlarge the torso."
        ],
        "action": [
            "(:action bend_to_form_legs\n    :parameters (?p - pipe_cleaner)\n    :precondition (and (position ?p straight) (location ?p completely_on_ground))\n    :effect (and (position ?p bent) (location ?p partially_in_air))\n  )",
            "(:action shape_to_form_body\n    :parameters (?p - pipe_cleaner)\n    :precondition (and (position ?p straight) (location ?p on_ground))\n    :effect (and (position ?p bent) (location ?p on_pipe_cleaner))\n  )",
            "(:action move_for_beak\n    :parameters (?t - tip_of_pipe_cleaner)\n    :precondition (and (shape ?t straight) (location ?t closer_to_tip))\n    :effect (and (shape ?t shaped_to_form_beak) (location ?t now_away_from_tip))\n  )",
            "(:action enlarge_torso\n    :parameters (?t - torso)\n    :precondition (and (width ?t thinner) (weight ?t lighter))\n    :effect (and (width ?t now_wider) (weight ?t heavier))\n  )\n)"
        ]
    },
    {
        "task": "Make Cheese Sauce with Jalape\u00f1o Peppers",
        "step": [
            "cut_velveeta velveeta cutting_board",
            "set_burner_add_cheese stove_knob velveeta pot",
            "add_peppers_and_olives olives peppers pot",
            "serve_cheese_sauce cheese_sauce pot"
        ],
        "desc": [
            "First cut the Velveeta in to tiny squares and set aside.",
            "Set the burner on a medium to low setting, before that you begin adding the cheese product.",
            "Wait until the Velveeta has melted lower the heat somewhat and add in the (Rotel) tomatoes.",
            "Add in the Jalapeno peppers, and black olives if desired.",
            "Cheese sauce is at its best if served very warm."
        ],
        "action": [
            "(:action cut_velveeta\n    :parameters (?velveeta - entity ?cutting_board - entity)\n    :precondition (and\n      (has_granularity ?velveeta whole)\n      (has_openness ?velveeta closed)\n      (at_location ?velveeta in_package)\n      (has_cleanness ?cutting_board clean)\n      (has_moisture ?cutting_board dry)\n    )\n    :effect (and\n      (not (has_granularity ?velveeta whole))\n      (has_granularity ?velveeta cubed)\n      (not (has_openness ?velveeta closed))\n      (has_openness ?velveeta open)\n      (not (at_location ?velveeta in_package))\n      (at_location ?velveeta on_cutting_board)\n      (not (has_cleanness ?cutting_board clean))\n      (has_cleanness ?cutting_board dirty)\n      (not (has_moisture ?cutting_board dry))\n      (has_moisture ?cutting_board wet)\n    )\n  )\n\n  ; Action for Step 2",
            "(:action set_burner_add_cheese\n    :parameters (?stove - entity ?velveeta - entity ?pot - entity)\n    :precondition (and\n      (has_power ?stove off)\n      (has_orientation ?stove off_position)\n      (has_granularity ?velveeta cubed)\n      (at_location ?velveeta on_cutting_board)\n      (at_location ?pot in_cupboard)\n    )\n    :effect (and\n      (not (has_power ?stove off))\n      (has_power ?stove on)\n      (not (has_orientation ?stove off_position))\n      (has_orientation ?stove medium_low)\n      (not (at_location ?velveeta on_cutting_board))\n      (at_location ?velveeta in_pot)\n      (not (at_location ?pot in_cupboard))\n      (at_location ?pot on_stove)\n    )\n  )\n\n  ; Action for Step 3",
            "(:action melt_cheese_add_tomatoes\n    :parameters (?velveeta - entity ?stove - entity ?rotel_can - entity)\n    :precondition (and\n      (has_granularity ?velveeta cubed)\n      (has_power ?stove on)\n      (has_orientation ?stove medium_low)\n      (at_location ?velveeta in_pot)\n      (has_openness ?rotel_can closed)\n      (at_location ?rotel_can in_fridge)\n    )\n    :effect (and\n      (not (has_granularity ?velveeta cubed))\n      (has_granularity ?velveeta liquid)\n      (not (has_temperature ?velveeta room_temperature))\n      (has_temperature ?velveeta hot)\n      (has_texture ?velveeta runny)\n      (not (has_orientation ?stove medium_low))\n      (has_orientation ?stove low)\n      (not (has_openness ?rotel_can closed))\n      (has_openness ?rotel_can open)\n      (not (at_location ?rotel_can in_fridge))\n      (at_location ?rotel_can in_pot)\n    )\n  )\n\n  ; Action for Step 4",
            "(:action add_peppers_and_olives\n    :parameters (?peppers - entity ?olives - entity ?pot - entity)\n    :precondition (and\n      (at_location ?peppers in_can)\n      (at_location ?olives in_can)\n      (at_location ?pot on_stove)\n    )\n    :effect (and\n      (not (at_location ?peppers in_can))\n      (at_location ?peppers in_pot)\n      (not (at_location ?olives in_can))\n      (at_location ?olives in_pot)\n    )\n  )\n\n  ; Action for Step 5",
            "(:action serve_cheese_sauce\n    :parameters (?cheese_sauce - entity ?pot - entity)\n    :precondition (and\n      (at_location ?cheese_sauce in_pot)\n      (has_temperature ?cheese_sauce hot)\n      (at_location ?pot on_stove)\n    )\n    :effect (and\n      (not (at_location ?cheese_sauce in_pot))\n      (at_location ?cheese_sauce in_bowl)\n      (not (at_location ?pot on_stove))\n      (at_location ?pot in_sink)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Prevent a Wick Lamp or Stove from Smoking",
        "step": [
            "put_vinegar_in_container vinegar1 container1",
            "remove_wicks wick1",
            "dip_wicks_in_vinegar wick1 vinegar1 container1",
            "dry_wicks wick1",
            "place_wicks_in_lamp wick1 lamp1"
        ],
        "desc": [
            "Pour some white vinegar into a small container deep enough for dipping.",
            "Remove the wick from the lamp or stove, or use wicks yet to be inserted.",
            "Dip each wick into the vinegar.",
            "Allow to dry thoroughly.",
            "Use once dry."
        ],
        "action": [
            "(:action remove_wicks\n    :parameters (?w - wick)\n    :precondition (and (in_lamp ?w))\n    :effect (and\n     (removed ?w)\n     (not (in_lamp ?w))\n     (get ?w)\n     )\n  )\n\n  ;; \u5c06\u918b\u5012\u5165\u5bb9\u5668\u7684\u52a8\u4f5c",
            "(:action put_vinegar_in_container\n    :parameters (?v - vinegar ?c - container)\n    :precondition (not (vinegar_in_container ?v))\n    :effect (and (vinegar_in_container ?v) (in_container ?c ?v))\n  )\n\n  ;; \u5c06\u706f\u82af\u6d78\u6ce1\u5728\u918b\u4e2d\u7684\u52a8\u4f5c",
            "(:action dip_wicks_in_vinegar\n    :parameters (?w - wick ?v - vinegar ?c - container)\n    :precondition (and (get ?w) (vinegar_in_container ?v) (in_container ?c ?v))\n    :effect (and (wet ?w) (in_vinegar ?w))\n  )\n\n  ;; \u667e\u5e72\u706f\u82af\u7684\u52a8\u4f5c",
            "(:action dry_wicks\n    :parameters (?w - wick)\n    :precondition (wet ?w)\n    :effect (and (dry ?w) (not (wet ?w)))\n  )\n\n  ;; \u5c06\u706f\u82af\u653e\u56de\u706f\u4e2d\u7684\u52a8\u4f5c",
            "(:action place_wicks_in_lamp\n    :parameters (?w - wick ?l - lamp)\n    :precondition (and (dry ?w) (not (in_lamp ?w)))\n    :effect (and (in_lamp ?w) (placed_back ?w ?l))\n  )\n)"
        ]
    },
    {
        "task": "Make Marshmallow Cream Cheese Fruit Dip",
        "step": [
            "blend_ingredients cream_cheese marshmallow_cream blender",
            "pour_combined_into_bowl cream_cheese marshmallow_cream blender mixing_bowl",
            "serve_with_fruit fruit mixing_bowl marshmallow_cream marshmallow_cream"
        ],
        "desc": [
            "Blend the cream cheese and marshmallow cream until combined.",
            "Pour the mixture into a clean bowl.",
            "Serve with fruit or whatever else you like.",
            "Finished."
        ],
        "action": [
            "(:action blend_ingredients\n    :parameters (?cream_cheese - ingredient ?marshmallow_cream - ingredient ?blender - appliance)\n    :precondition (and\n      (separate ?cream_cheese ?marshmallow_cream)\n      (turned_off ?blender)\n      (clean_appliance ?blender)\n      (in_container ?cream_cheese ?blender)\n      (in_container ?marshmallow_cream ?blender)\n    )\n    :effect (and\n      (not (separate ?cream_cheese ?marshmallow_cream))\n      (combined ?cream_cheese ?marshmallow_cream)\n      (turned_on ?blender)\n      (dirty_appliance ?blender)\n      (not (clean_appliance ?blender))\n      (full ?blender)\n    )\n  )\n\n  ; Action 2: Pour the mixture into a clean bowl",
            "(:action pour_combined_into_bowl\n    :parameters (?cream_cheese - ingredient ?marshmallow_cream - ingredient ?blender - appliance ?bowl - container)\n    :precondition (and\n      (combined ?cream_cheese ?marshmallow_cream)\n      (turned_on ?blender)\n      (full ?blender)\n      (clean ?bowl)\n      (empty ?bowl)\n    )\n    :effect (and\n      (in_container ?cream_cheese ?bowl)\n      (in_container ?marshmallow_cream ?bowl)\n      (empty ?blender)\n      (not (full ?blender))\n      (full ?bowl)\n      (dirty ?bowl)\n      (not (empty ?bowl))\n      (not (clean ?bowl))\n      (turned_off ?blender)\n    )\n  )\n\n  ; Action 3: Serve with fruit",
            "(:action serve_with_fruit\n    :parameters (?fruit - ingredient ?bowl - container ?cream_cheese - ingredient ?marshmallow_cream - ingredient)\n    :precondition (and\n      (whole ?fruit)\n      (full ?bowl)\n      (in_container ?cream_cheese ?bowl)\n      (in_container ?marshmallow_cream ?bowl)\n    )\n    :effect (and\n      (sliced ?fruit)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Get Wailord in Pok\u00e9mon Emerald",
        "step": [
            "use-wailmer wailmer",
            "train-wailmer wailmer",
            "give-rare-candies wailmer",
            "attain-battle-frontier wailmer",
            "evolve-wailmer wailmer",
            "copy-rare-candies wailmer"
        ],
        "desc": [
            "This is the pre-evolution of Wailord.",
            "This Wailmer can be pretty annoying to train, so be patient.",
            "Train it until it evolves.",
            "Go to battle frontier and copy some rare candies.",
            "Give the rare candies to a Wailmer and evolve it into a Wailord using them."
        ],
        "action": [
            "(:action use-wailmer\n    :parameters (?p - pokemon)\n    :precondition (unused ?p)\n    :effect (and (used ?p) (not (unused ?p)))\n  )",
            "(:action train-wailmer\n    :parameters (?p - pokemon)\n    :precondition (untrained ?p)\n    :effect (and (trained ?p) (not (untrained ?p)))\n  )",
            "(:action evolve-wailmer\n    :parameters (?p - pokemon)\n    :precondition (unevolved ?p)\n    :effect (and (evolved ?p) (not (unevolved ?p)))\n  )",
            "(:action attain-battle-frontier\n    :parameters (?p - pokemon)\n    :precondition (unattained ?p)\n    :effect (and (now-attained ?p) (not (unattained ?p)))\n  )",
            "(:action copy-rare-candies\n    :parameters (?p - pokemon)\n    :precondition (uncopied ?p)\n    :effect (and (copied ?p) (not (uncopied ?p)))\n  )",
            "(:action give-rare-candies\n    :parameters (?p - pokemon)\n    :precondition (without-rare-candies ?p)\n    :effect (and (now-holder-of-rare-candy ?p) (not (without-rare-candies ?p)))\n  )\n)"
        ]
    },
    {
        "task": "Spool Knit a Winter Hat",
        "step": [
            "sew_web_into_rectangle web",
            "join_ends end_points",
            "knit_web web",
            "secure_top_and_make_tassel finished_hat yarn_piece"
        ],
        "desc": [
            "Knit eighty-four inches of flat web.",
            "Begin five inches from the end of the web, turn and sew into a rectangular form five inches wide and eight inches long.",
            "Join the five-inch ends, and draw in the top with the needle and a piece of the material from which the cap was made.",
            "After securing the top, twist and fold the piece of yarn remaining for a cord and fasten a number of strands of yarn through the loop for a tassel."
        ],
        "action": [
            "(:action knit_web\n    :parameters (?w - webbing)\n    :precondition (in_line ?w)\n    :effect (and\n              (knitted_together ?w)\n              (not (in_line ?w))\n            )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5c06\u7f51\u7f1d\u5236\u6210\u77e9\u5f62",
            "(:action sew_web_into_rectangle\n    :parameters (?w - webbing)\n    :precondition (and\n                    (shape_straight ?w)\n                    (width_wider ?w)\n                  )\n    :effect (and\n              (shape_rectangular ?w)\n              (width_narrower ?w)\n              (not (shape_straight ?w))\n              (not (width_wider ?w))\n            )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u8fde\u63a5\u672b\u7aef",
            "(:action join_ends\n    :parameters (?e - ends)\n    :precondition (unjoined ?e)\n    :effect (and\n              (joined ?e)\n              (not (unjoined ?e))\n            )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u56fa\u5b9a\u9876\u90e8\u5e76\u5236\u4f5c\u6d41\u82cf",
            "(:action secure_top_and_make_tassel\n    :parameters (?h - hat ?y - yarn)\n    :precondition (and\n                    (has_weight_lighter ?h)\n                    (shape_straight_yarn ?y)\n                  )\n    :effect (and\n              (has_weight_heavier ?h)\n              (shape_twisted_and_folded ?y)\n              (not (has_weight_lighter ?h))\n              (not (shape_straight_yarn ?y))\n            )\n  )\n)"
        ]
    },
    {
        "task": "Remove Black Skid Marks from Linoleum",
        "step": [
            "obtain_eraser you eraser",
            "kneel_and_rub you eraser linoleum_floor",
            "wash_and_dry you linoleum_floor faucet_water"
        ],
        "desc": [
            "Obtain a decent sized eraser that you can hold comfortable in your fingers.",
            "Kneel down next to the linoleum and use the eraser to rub along the skid mark.",
            "Continue rubbing until the black mark lifts.",
            "Wash and dry as usual."
        ],
        "action": [
            "(:action obtain_eraser\n    :parameters (?a - agent ?t - tool)\n    :precondition (tool_available ?t)\n    :effect (and\n              (has_tool ?a ?t)\n              (not (tool_available ?t))\n            )\n  )\n\n  ;; \u8e72\u4e0b\u5e76\u64e6\u62ed",
            "(:action kneel_and_rub\n    :parameters (?a - agent ?t - tool ?s - surface)\n    :precondition (and\n                    (has_tool ?a ?t)\n                    (on_surface ?a ?s)\n                    (skid_mark_present ?s)\n                    (not (tool_dirty ?t))\n                  )\n    :effect (and\n              (kneeling ?a)\n              (skid_mark_removed ?s)\n              (floor_clean ?s)\n              (tool_dirty ?t)\n            )\n  )\n\n  ;; \u6e05\u6d17\u5e76\u64e6\u5e72",
            "(:action wash_and_dry\n    :parameters (?a - agent ?s - surface ?w - water)\n    :precondition (and\n                    (floor_clean ?s)\n                    (water_available ?w)\n                  )\n    :effect (and\n              (floor_dry ?s)\n            )\n  )\n)"
        ]
    },
    {
        "task": "Be a Spy With Friends",
        "step": [
            "form_spy_group co_conspirator1 co_conspirator1 co_conspirator1",
            "set_location safehouse",
            "identify_victim target_victim",
            "gather_gear you camera",
            "gather_gear you binoculars",
            "gather_gear co_conspirator2 camera",
            "gather_gear co_conspirator2 binoculars",
            "gather_gear co_conspirator1 camera",
            "gather_gear co_conspirator1 binoculars"
        ],
        "desc": [
            "Set-up your spy group You will need a trustworthy 2-5 person group.",
            "It's good to have a place to keep your gear when not in use, hold meetings, and just talk in private without worrying about the nosiness of certain people in public places.",
            "Get some gear To be a good spy, you and your friends must have gear that will help with missions.",
            "Find your first \"victim\" The victim is the person you will be watching and spying on."
        ],
        "action": [
            "(:action form_spy_group\n    :parameters (?p1 - person ?p2 - person ?p3 - person)\n    :precondition (and\n                    (not (group-formed))\n                    (member-of-group ?p1)\n                    (member-of-group ?p2)\n                    (member-of-group ?p3))\n    :effect (group-formed)\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u8bbe\u7f6e\u95f4\u8c0d\u57fa\u5730\u5730\u70b9",
            "(:action set_location\n    :parameters (?l - location)\n    :precondition (and\n                    (group-formed)\n                    (not (location-set ?l)))\n    :effect (location-set ?l)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6536\u96c6\u88c5\u5907",
            "(:action gather_gear\n    :parameters (?p - person ?g - gear)\n    :precondition (and\n                    (group-formed)\n                    (location-set safehouse)\n                    (not (has-gear ?p ?g)))\n    :effect (has-gear ?p ?g)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u8bc6\u522b\u76ee\u6807\u53d7\u5bb3\u8005",
            "(:action identify_victim\n    :parameters (?v - victim)\n    :precondition (not (victim-identified ?v))\n    :effect (victim-identified ?v)\n  )\n)"
        ]
    },
    {
        "task": "Make a Fairy House in the Woods",
        "step": [
            "collect_sticks stick3",
            "bundle_sticks stick3",
            "collect_sticks stick2",
            "collect_sticks stick1",
            "create_formation stick3",
            "bundle_sticks stick2",
            "bundle_sticks stick1",
            "build_walls fairy_house1 stick3",
            "find_area area1",
            "use_bark stick3",
            "create_formation stick2",
            "use_bark stick2",
            "create_formation stick1",
            "use_bark stick1",
            "decorate_fairy_house fairy_house1"
        ],
        "desc": [
            "Find a small area with slightly damp dirt.",
            "Collect many twigs and sticks.",
            "Using the sticks, create either a square formation, circle formation, or a Teepee formation.",
            "Build your exterior walls.",
            "You can use either a leaf or a wide strip of bark.",
            "Decorate."
        ],
        "action": [
            "(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u6536\u96c6\u68cd\u5b50",
            "(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6346\u7ed1\u68cd\u5b50",
            "(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u521b\u5efa\u7ed3\u6784",
            "(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5efa\u9020\u5899\u58c1",
            "(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u4f7f\u7528\u6811\u76ae\u88c5\u9970",
            "(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;; \u52a8\u4f5c7\uff1a\u88c5\u9970\u4ed9\u5973\u5c4b",
            "(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)"
        ]
    },
    {
        "task": "Grow Dwarf Balsam Fir",
        "step": [
            "choose_container container1 garden_center",
            "choose_soil soil1 garden_center",
            "choose_plant fir1 nursery",
            "plant_fir fir1 container1 soil1",
            "establish_plant fir1 container1",
            "re_pot fir1 container1 container2"
        ],
        "desc": [
            "Choose the plant from a nursery or garden center.",
            "This plant spreads and flattens as it grows, so select a broad sized container, preferably with a rounded shape.",
            "Choose the potting soil.",
            "Plant the fir in the container.",
            "Keep this up until the tree is well established.",
            "Re-pot occasionally."
        ],
        "action": [
            "(:action choose_plant\n    :parameters (?p - plant ?loc - location)\n    :precondition (available_plant_at ?p ?loc)\n    :effect (and\n              (has_plant ?p)\n              (not (available_plant_at ?p ?loc))\n            )\n  )\n\n  ;; \u9009\u62e9\u5bb9\u5668",
            "(:action choose_container\n    :parameters (?c - container ?loc - location)\n    :precondition (available_container_at ?c ?loc)\n    :effect (and\n              (has_container ?c)\n              (not (available_container_at ?c ?loc))\n            )\n  )\n\n  ;; \u9009\u62e9\u571f\u58e4",
            "(:action choose_soil\n    :parameters (?s - soil ?loc - location)\n    :precondition (available_soil_at ?s ?loc)\n    :effect (and\n              (has_soil ?s)\n              (not (available_soil_at ?s ?loc))\n            )\n  )\n\n  ;; \u5c06\u51b7\u6749\u79cd\u690d\u5230\u5bb9\u5668\u4e2d",
            "(:action plant_fir\n    :parameters (?p - plant ?c - container ?s - soil)\n    :precondition (and\n                    (has_plant ?p)\n                    (has_container ?c)\n                    (has_soil ?s)\n                    (clean ?c)\n                  )\n    :effect (and\n              (planted_in ?p ?c)\n              (not (has_plant ?p))\n              (not (has_container ?c))\n              (not (has_soil ?s))\n              (dirty ?c)\n              (watered ?p)\n            )\n  )\n\n  ;; \u517b\u62a4\u690d\u7269\uff08\u6d47\u6c34\uff09",
            "(:action water_plant\n    :parameters (?p - plant ?c - container)\n    :precondition (planted_in ?p ?c) ;; \u8fd9\u91cc\u5047\u8bbe\u5bb9\u5668\u5df2\u77e5\n    :effect (watered ?p)\n  )\n\n  ;; \u786e\u7acb\u690d\u7269",
            "(:action establish_plant\n    :parameters (?p - plant ?c - container)\n    :precondition (and\n                    (planted_in ?p ?c)\n                    (watered ?p)\n                  )\n    :effect (established ?p)\n  )\n\n  ;; \u79fb\u683d\u690d\u7269",
            "(:action re_pot\n    :parameters (?p - plant ?c_old - container ?c_new - container)\n    :precondition (and\n                    (planted_in ?p ?c_old)\n                    (established ?p)\n                    (needs_repotting ?p)\n                    (clean ?c_new)\n                  )\n    :effect (and\n              (planted_in ?p ?c_new)\n              (dirty ?c_old)\n              (not (planted_in ?p ?c_old))\n            )\n  )\n)"
        ]
    },
    {
        "task": "Make Slow Cooker Hot Cocoa",
        "step": [
            "make_initial_mixture mixture",
            "add_ingredients_to_slow_cooker mixture",
            "heat_mixture mixture",
            "serve_cocoa mixture"
        ],
        "desc": [
            "Make the initial cocoa mixture.",
            "Add all the ingredients in a slow cooker.",
            "Allow the mixture to heat for 3 hours on a low setting.",
            "Serve immediately or keep the slow cooker on a \"Keep Warm\" setting."
        ],
        "action": [
            "(:action make_initial_mixture\n    :parameters (?e - entity)\n    :precondition (initial_mixture ?e)\n    :effect (and (mixed_mixture ?e) (not (initial_mixture ?e)))\n  )",
            "(:action add_ingredients_to_slow_cooker\n    :parameters (?e - entity)\n    :precondition (and (mixed_mixture ?e) (in_bowl ?e))\n    :effect (and (in_slow_cooker ?e) (not (in_bowl ?e)))\n  )",
            "(:action heat_mixture\n    :parameters (?e - entity)\n    :precondition (in_slow_cooker ?e)\n    :effect (mixture_heated ?e)\n  )",
            "(:action serve_cocoa\n    :parameters (?e - entity)\n    :precondition (mixture_heated ?e)\n    :effect (cocoa_served ?e)\n  )\n)"
        ]
    },
    {
        "task": "Board a Small Boat",
        "step": [
            "board_via_platform passenger1 platform1 boat1 dock1",
            "hold_rails passenger1 boat1",
            "secure_legs passenger1 boat1",
            "stabilize_boat passenger1 boat1"
        ],
        "desc": [
            "Prefer boarding across a solid platform if possible.",
            "If you are crossing using a platform, hold on to the rails provided.",
            "Avoid plonking one leg in the boat and leaving one on the jetty - this will cause wobbling and you might fall into the water.",
            "Once in the boat, always remain in the centre line to move around it and lower yourself to a crouch level so that you reduce your centre of gravity and keep the craft as still as possible.",
            "Keep the craft steady as others board."
        ],
        "action": [
            "(:action board_via_platform\n    :parameters (?p - passenger ?pl - platform ?b - boat ?d - dock)\n    :precondition (and\n                    (platform-present ?pl)\n                    (at ?p ?pl)\n                    (at ?pl ?d)\n                    (at ?b ?d))\n    :effect (and\n              (at ?p ?b)\n              (not (at ?p ?pl))\n             )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u63e1\u4f4f\u6276\u624b",
            "(:action hold_rails\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (holding-rail ?p)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u786e\u4fdd\u53cc\u817f\u5728\u8239\u5185",
            "(:action secure_legs\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (legs-in-boat ?p)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u7a33\u5b9a\u8239\u53ea",
            "(:action stabilize_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and\n                    (legs-in-boat ?p)\n                    (holding-rail ?p)\n                    (at ?p ?b))\n    :effect (and\n              (centered ?b)\n              (crouched ?p)\n              (boat-stable ?b)\n             )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u4ed6\u4eba\u4fdd\u6301\u8239\u53ea\u7a33\u5b9a",
            "(:action others_keep_boat_steady\n    :parameters (?op - passenger ?b - boat)\n    :precondition (boat-stable ?b)\n    :effect (at ?op ?b)\n  )\n\n)"
        ]
    },
    {
        "task": "Make a Bead Ring",
        "step": [
            "sliplargerbeads bead3",
            "sliplargerbeads bead2",
            "sliplargerbeads bead1",
            "cutelastic elastic1",
            "finishring elastic1 tail1",
            "admirering you"
        ],
        "desc": [
            "Cut a strip of elastic.",
            "Slip two larger beads at either side of the small bead.",
            "Slip a small bead on one tail.",
            "Continue this pattern until you have enough beads to fit around the finger.",
            "Finish the ring by slipping the loose tails through the first small bead you placed on the elastic.",
            "Finished."
        ],
        "action": [
            "(:action CutElastic\n    :parameters (?e - elastic)\n    :precondition (not (cut ?e))\n    :effect (cut ?e)\n  )",
            "(:action SlipLargerBeads\n    :parameters (?b - bead)\n    :precondition (and (not (on_strip ?b)) (not (in_order ?b)))\n    :effect (and (on_strip ?b) (in_order ?b))\n  )",
            "(:action SlipSmallBead\n    :parameters (?b - bead)\n    :precondition (not (on_strip ?b))\n    :effect (on_strip ?b)\n  )",
            "(:action PatternBeads\n    :parameters (?b - bead)\n    :precondition (not (in_order ?b))\n    :effect (in_order ?b)\n  )",
            "(:action FinishRing\n    :parameters (?e - elastic ?t - tail)\n    :precondition (and (not (curved ?e)) (not (adorned ?t)))\n    :effect (and (curved ?e) (adorned ?t))\n  )",
            "(:action AdmireRing\n    :parameters (?p - person)\n    :precondition (not (admiring ?p))\n    :effect (admiring ?p)\n  )\n)"
        ]
    },
    {
        "task": "Change the Oil on a Yamaha Virago XV250",
        "step": [
            "remove-bung oil1 bung1 bike1 bottle1",
            "remove-oil-cap oil_cap1 oil_tank1 bung1 bike1 oil1",
            "remove-oil-filter oil_filter1 bottle1 bike1 oil1",
            "screw-bung bung1 bike1 oil1 oil_filter1",
            "recycle-old-oil old_oil1 funnel1 can1 jug1",
            "fill-oil new_oil1 bottle1 oil_tank1 bung1 bike1"
        ],
        "desc": [
            "Remove the bung to let the oil out to drain.",
            "Remove the oil cap to let the oil drain fully and let air in to help drain the old oil out.",
            "Remove the oil filter.",
            "Screw the bung back on.",
            "Fill the oil back up.",
            "Recycle the old oil."
        ],
        "action": [
            "(:action remove-bung\n    :parameters (?oil - oil ?bung - bung ?bike - vehicle ?can - container)\n    :precondition (and\n                    (in ?oil ?bike)\n                    (attached ?bung)\n                    (full ?bung))\n    :effect (and\n              (in ?oil ?can)\n              (not (attached ?bung))\n              (have_some ?oil ?bung)\n              )\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u79fb\u9664\u6cb9\u76d6",
            "(:action remove-oil-cap\n    :parameters (?oil_cap - oil_cap ?oil_tank - container ?bung - bung ?bike - vehicle ?oil - oil)\n    :precondition (and\n                    (on ?oil_cap ?oil_tank)\n                    (closed ?oil_cap)\n                    (have_some ?oil ?bung)\n                    )\n    :effect (and\n              (not (on ?oil_cap ?oil_tank))\n              (open ?oil_cap)\n              (not (in ?oil ?bike))\n              (empty ?bung)\n              )\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u79fb\u9664\u6cb9\u6ee4\u5668",
            "(:action remove-oil-filter\n    :parameters (?oil_filter - oil_filter ?oil_tank - container ?bike - vehicle ?oil - oil)\n    :precondition (and (in_filter ?oil_filter) (not (in ?oil ?bike)))\n    :effect (and\n              (not (in_filter ?oil_filter))\n              (out ?oil_filter)\n              )\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u91cd\u65b0\u5b89\u88c5\u6cb9\u585e",
            "(:action screw-bung\n    :parameters (?bung - bung ?bike - vehicle ?oil - oil ?oil_filter - oil_filter)\n    :precondition (and\n                    (away-from-bike ?bung)\n                    (loose ?bung)\n                    (out ?oil_filter)\n                    (not (in ?oil ?bike)\n                    )\n                    )\n    :effect (and\n              (on ?bung ?bike)\n              (attached ?bung))\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u6dfb\u52a0\u65b0\u6cb9",
            "(:action fill-oil\n    :parameters (?new_oil - new_oil ?bottle - container ?oil_tank - container ?bung - bung ?bike - vehicle)\n    :precondition (and\n                    (empty ?new_oil)\n                    (in ?new_oil ?bottle)\n                    (on ?bung ?bike)\n                    )\n    :effect (and\n              (full ?new_oil)\n              (in ?new_oil ?oil_tank))\n  )\n\n  ;; \u52a8\u4f5c\uff1a\u56de\u6536\u65e7\u6cb9",
            "(:action recycle-old-oil\n    :parameters (?old_oil - old_oil ?funnel - funnel ?can - container ?jug - container)\n    :precondition (and\n                    (in ?old_oil ?can)\n                    (clean ?funnel))\n    :effect (and\n              (in ?old_oil ?jug)\n              (dirty ?funnel))\n  )\n\n)"
        ]
    },
    {
        "task": "Make Your Den Look Like a Home on Animal Jam (Non Members)",
        "step": [
            "keep-family-safe kids-room",
            "bring-stuff-home stuff",
            "bring-stuff-home screens",
            "create-rooms outside-area",
            "create-rooms kids-room",
            "acquire-gems gems"
        ],
        "desc": [
            "Get lots of gems.",
            "for a family home you will need quite a lot of stuff.",
            "Try to get room shoji screens so you can section things off into smaller rooms.",
            "If you can get shoji screens, try making a kids room, a master bedroom, and a living/dining room.",
            "Make an outside area.",
            "Keep your family safe."
        ],
        "action": [
            "(:action acquire-gems\n    :parameters (?entity - entity)\n    :precondition (unacquired ?entity)\n    :effect (and (acquired ?entity) (not (unacquired ?entity)))\n  )",
            "(:action bring-stuff-home\n    :parameters (?entity - entity)\n    :precondition (in-store ?entity)\n    :effect (and (in-home ?entity) (not (in-store ?entity)))\n  )",
            "(:action get-screens\n    :parameters (?entity - entity)\n    :precondition (in-store ?entity)\n    :effect (and (in-home ?entity) (not (in-store ?entity)))\n  )",
            "(:action create-rooms\n    :parameters (?entity - entity)\n    :precondition (unmade ?entity)\n    :effect (and (created ?entity) (not (unmade ?entity)))\n  )",
            "(:action make-outside-area\n    :parameters (?entity - entity)\n    :precondition (unmade ?entity)\n    :effect (and (created ?entity) (not (unmade ?entity)))\n  )",
            "(:action keep-family-safe\n    :parameters (?entity - entity)\n    :precondition ()\n    :effect (safe ?entity)\n  )\n)"
        ]
    },
    {
        "task": "Make Soap Bubbles for Your Children",
        "step": [
            "mix_soap_and_water alice soap1 soap1 bowl1 mixture1",
            "enhance_solution alice mixture1",
            "go_outside alice",
            "make_bubble_wand alice wand1",
            "make_bubble alice wand1 bubble1"
        ],
        "desc": [
            "Mix soap and water.",
            "Enhance your bubble solution.",
            "Make a little bubble wand.",
            "Make a giant bubble wand.",
            "First go outside, since bubbles look most beautiful when the sun shines through their iridescent swirls.",
            "Make giant bubbles."
        ],
        "action": [
            "(:action mix_soap_and_water\n    :parameters (?p - person ?soap - material ?water - material ?bowl - container ?mixture - material)\n    :precondition (and\n      (in ?soap ?bowl)\n      (in ?water ?bowl)\n      (not (mixed ?mixture))\n    )\n    :effect (and\n      (mixed ?mixture)\n      (in ?mixture ?bowl)\n      (not (in ?soap ?bowl))\n      (not (in ?water ?bowl))\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u589e\u5f3a\u6ce1\u6ce1\u6eb6\u6db2",
            "(:action enhance_solution\n    :parameters (?p - person ?mixture - material)\n    :precondition (and\n      (mixed ?mixture)\n      (not (enhanced ?mixture))\n    )\n    :effect (enhanced ?mixture)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u5236\u4f5c\u6ce1\u6ce1\u68d2",
            "(:action make_bubble_wand\n    :parameters (?p - person ?wand - tool)\n    :precondition (and\n      (enhanced mixture1)\n      (not (have_wand ?p ?wand))\n    )\n    :effect (have_wand ?p ?wand)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u524d\u5f80\u6237\u5916",
            "(:action go_outside\n    :parameters (?p - person)\n    :precondition (not (outside ?p))\n    :effect (outside ?p)\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5236\u4f5c\u80a5\u7682\u6ce1\u6ce1",
            "(:action make_bubble\n    :parameters (?p - person ?wand - tool ?b - bubble)\n    :precondition (and\n      (have_wand ?p ?wand)\n      (enhanced mixture1)\n      (outside ?p)\n    )\n    :effect (and\n      (in_air ?b)\n      (wet ?wand)\n      (served_bubble ?b)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Fold Bath Towels for Quick Hanging at Home",
        "step": [
            "fold-lengthwise towel1",
            "fold-half-twice towel1",
            "store-in-closet towel1",
            "hang-on-rack towel1"
        ],
        "desc": [
            "Fold the towel in thirds lengthwise.",
            "Fold in half, and then in half again.",
            "Store the towel in the linen closet.",
            "To go from the closet for hanging, simply unfold the final fold and hang on the towel rack."
        ],
        "action": [
            "(:action fold-lengthwise\n    :parameters (?towel - towel)\n    :precondition (and (not (folded ?towel)) (not (smaller ?towel)))\n    :effect (and (folded ?towel) (smaller ?towel)))",
            "(:action fold-half-twice\n    :parameters (?towel - towel)\n    :precondition (and (folded ?towel) (smaller ?towel) (not (thicker ?towel)))\n    :effect (and (thicker ?towel)))",
            "(:action store-in-closet\n    :parameters (?towel - towel)\n    :precondition (and (thicker ?towel) (not (in-closet ?towel)) (not (emptiness ?towel)))\n    :effect (and (in-closet ?towel) (emptiness ?towel)))",
            "(:action hang-on-rack\n    :parameters (?towel - towel)\n    :precondition (and (in-closet ?towel) (folded ?towel) (not (on-rack ?towel)) (emptiness ?towel))\n    :effect (and (on-rack ?towel) (not (folded ?towel)) (openness ?towel))))"
        ]
    },
    {
        "task": "Make Potato Ribbons",
        "step": [
            "wash_potatoes potato1 sink1 cloth1",
            "wash_potatoes potato2 sink1 cloth1",
            "cut_potatoes potato2 cloth1",
            "cut_potatoes potato1 cloth1",
            "drain_potatoes potato2 cloth1",
            "drain_potatoes potato1 cloth1",
            "fry_potatoes potato2 pan1 stove1",
            "fry_potatoes potato1 pan1 stove1",
            "serve_potatoes potato2 dish1",
            "serve_potatoes potato1 dish1"
        ],
        "desc": [
            "Wash especially well if you intend to keep the peel intact.",
            "Cut round and round, keeping the peel as thin as possible as you go.",
            "Drain the potatoes dry on a clean cloth.",
            "Fry the ribbons in deep, hot fat.",
            "Serve."
        ],
        "action": [
            "(:action wash_potatoes\n    :parameters (?potato - ingredient ?sink - utensil ?cloth - utensil)\n    :precondition (and\n      (at ?potato kitchen_counter)\n      (at ?sink kitchen_sink)\n      (at ?cloth kitchen_counter)\n      (clean ?sink)\n    )\n    :effect (and\n      (washed ?potato)\n      (dirty ?sink)\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5207\u571f\u8c46",
            "(:action cut_potatoes\n    :parameters (?potato - ingredient ?peeler - utensil)\n    :precondition (and\n      (washed ?potato)\n      (at ?potato kitchen_counter)\n      (at ?peeler kitchen_counter)\n      (clean ?peeler)\n    )\n    :effect (and\n      (peeled ?potato)\n      (cut ?potato)\n      (dirty ?peeler)\n    )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6ca5\u5e72\u571f\u8c46",
            "(:action drain_potatoes\n    :parameters (?potato - ingredient ?cloth - utensil)\n    :precondition (and\n      (cut ?potato)\n      (at ?potato kitchen_counter)\n      (at ?cloth kitchen_counter)\n      (clean ?cloth)\n    )\n    :effect (and\n      (drained ?potato)\n      (dirty ?cloth)\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u70b8\u571f\u8c46\u4e1d",
            "(:action fry_potatoes\n    :parameters (?potato - ingredient ?pan - utensil ?stove - appliance)\n    :precondition (and\n      (drained ?potato)\n      (at ?pan kitchen_stove)\n      (at ?stove kitchen_stove)\n      (clean ?pan)\n      (heated ?stove)\n      (has_oil ?stove)\n    )\n    :effect (and\n      (fried ?potato)\n      (dirty ?pan)\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u4e0a\u83dc",
            "(:action serve_potatoes\n    :parameters (?potato - ingredient ?dish - dish)\n    :precondition (and\n      (fried ?potato)\n      (at ?dish dining_table)\n    )\n    :effect (and\n      (in_dish ?potato ?dish)\n      (not (fried ?potato))\n    )\n  )\n)"
        ]
    },
    {
        "task": "Clean Your Home Efficiently",
        "step": [
            "pickup_items item1 basket1",
            "clean_surfaces tv cleaner1",
            "clean_surfaces window1 cleaner1",
            "clean_surfaces window2 cleaner1",
            "pickup_items item2 basket1",
            "shake_rugs rug1",
            "shake_rugs rug2",
            "empty_trash basket1 trash_bag1",
            "empty_trash basket1 trash_bag2",
            "dust_room living_room",
            "dust_room kitchen",
            "dust_room bathroom"
        ],
        "desc": [
            "######Pick up and put away stray items and throw trash into waste baskets.",
            "######Dust, again going through the entire house room by room.",
            "######Take a large trash bag and go through each room emptying the waste baskets and trash cans.",
            "######Use a spray cleaner and rags or paper towels to clean any glass surfaces, including the TV screens.",
            "First pick up any throw rugs and inside door mats and shake them outside.",
            "######Enjoy your clean home!"
        ],
        "action": [
            "(:action pickup_items\n    :parameters (?item - item ?basket - basket)\n    :precondition (and\n                    (stray_item ?item)\n                    (empty ?basket))\n    :effect (and\n              (in_basket ?item ?basket)\n              (organized ?item)\n              (full ?basket))\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u6e05\u6d01\u623f\u95f4\u7684\u7070\u5c18",
            "(:action dust_room\n    :parameters (?room - room)\n    :precondition (dusty ?room)\n    :effect (and\n              (cleaned_room ?room)\n              (not (dusty ?room)))\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6e05\u7a7a\u5783\u573e\u6876\u5230\u5783\u573e\u888b",
            "(:action empty_trash\n    :parameters (?basket - basket ?dish - dish)\n    :precondition (full ?basket)\n    :effect (and\n              (empty ?basket)\n              (trash_disposed ?dish))\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u4f7f\u7528\u55b7\u96fe\u6e05\u6d01\u5242\u6e05\u6d01\u8868\u9762",
            "(:action clean_surfaces\n    :parameters (?surface - surface ?cleaner - cleaner)\n    :precondition (dirty_surface ?surface)\n    :effect (cleaned_surface ?surface)\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u6447\u52a8\u5730\u6bef\u548c\u95e8\u57ab\u4ee5\u6e05\u6d01",
            "(:action shake_rugs\n    :parameters (?rug - rug)\n    :precondition (dirty_rug ?rug)\n    :effect (cleaned_rug ?rug)\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u4eab\u53d7\u5e72\u51c0\u7684\u5bb6",
            "(:action enjoy_clean_home\n    :parameters ()\n    :precondition ()\n    :effect ()\n  )\n)"
        ]
    },
    {
        "task": "Make Taco Filling",
        "step": [
            "brown_meat_and_onion beef1 onion1 pan1 stove1 kitchen_counter",
            "move_pan_to_counter pan1 kitchen_counter sink_location",
            "drain_fat pan1",
            "move_pan_to_counter pan1 sink_location kitchen_counter",
            "add_ingredients_and_simmer pan1 spice1 tomato1 stove1 kitchen_counter",
            "finish_preparation pan1 serving_dish1 beef1 kitchen_counter"
        ],
        "desc": [
            "Brown the meat and the onion in a medium sized frying pan.",
            "Drain the excess fat.",
            "Add the remaining ingredients (except for the hot sauce) and simmer for fifteen minutes.",
            "Finished."
        ],
        "action": [
            "(:action brown_meat_and_onion\n    :parameters (?meat - ingredient ?onion - ingredient ?pan - tool ?stove - appliance ?loc - location)\n    :precondition (and\n      (at ?meat ?loc)\n      (at ?onion ?loc)\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n      (clean ?pan)\n    )\n    :effect (and\n      (cooked ?meat)\n      (cooked ?onion)\n      (heated ?pan)\n      (not (clean ?pan))\n      (in-pan ?meat ?pan)\n      (in-pan ?onion ?pan)\n      (not (at ?meat ?loc))\n      (not (at ?onion ?loc))\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5c06\u714e\u9505\u79fb\u5230\u6c34\u69fd",
            "(:action move_pan_to_sink\n    :parameters (?pan - tool ?from - location ?to - location)\n    :precondition (and\n      (at-tool ?pan ?from)\n    )\n    :effect (and\n      (at-tool ?pan ?to)\n      (not (at-tool ?pan ?from))\n    )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6392\u51fa\u591a\u4f59\u7684\u8102\u80aa",
            "(:action drain_fat\n    :parameters (?pan - tool)\n    :precondition (and\n      (heated ?pan)\n      (at-tool ?pan sink_location)\n    )\n    :effect (and\n      (drained ?pan)\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u5c06\u714e\u9505\u79fb\u56de\u67dc\u53f0",
            "(:action move_pan_to_counter\n    :parameters (?pan - tool ?from - location ?to - location)\n    :precondition (and\n      (at-tool ?pan ?from)\n    )\n    :effect (and\n      (at-tool ?pan ?to)\n      (not (at-tool ?pan ?from))\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u6dfb\u52a0\u5269\u4f59\u98df\u6750\u5e76\u7096\u716e",
            "(:action add_ingredients_and_simmer\n    :parameters (?pan - tool ?ingredient1 - ingredient ?ingredient2 - ingredient ?stove - appliance ?loc - location)\n    :precondition (and\n      (drained ?pan)\n      (at ?ingredient1 ?loc)\n      (at ?ingredient2 ?loc)\n      (at-tool ?pan ?loc)\n      (at-appliance ?stove ?loc)\n      (has-power ?stove)\n    )\n    :effect (and\n      (in-pan ?ingredient1 ?pan)\n      (in-pan ?ingredient2 ?pan)\n      (cooked ?ingredient1)\n      (cooked ?ingredient2)\n      (simmering ?pan)\n      (heated ?pan)\n      (not (at ?ingredient1 ?loc))\n      (not (at ?ingredient2 ?loc))\n    )\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u5b8c\u6210\u51c6\u5907",
            "(:action finish_preparation\n    :parameters (?pan - tool ?dish - dish ?ingredients - ingredient ?loc - location)\n    :precondition (and\n      (simmering ?pan)\n      (at-tool ?pan ?loc)\n      (at-dish ?dish ?loc)\n      (forall (?i - ingredient)\n        (in-pan ?i ?pan))\n    )\n    :effect (and\n      (forall (?i - ingredient)\n        (and\n          (in-dish ?i ?dish)\n          (not (in-pan ?i ?pan))\n        ))\n      (not (simmering ?pan))\n      (clean ?pan)\n      (not (heated ?pan))\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make a Simple Inside Windshield Cleaner",
        "step": [
            "purchase_eraser user1 eraser1 store_location car_location",
            "store_eraser user1 eraser1 car_door_spot1 car_location",
            "use_eraser_to_clean user1 eraser1 windshield_inner1 car_door_spot1 car_location",
            "replace_eraser user1 eraser1 glovebox1 car_location"
        ],
        "desc": [
            "Purchase a blackboard eraser.",
            "Keep the blackboard eraser in the glove box or attach it to a spot on or near the car door for easy access.",
            "Use the eraser to clean the inner side of the windshield.",
            "Replace after use."
        ],
        "action": [
            "(:action purchase_eraser\n    :parameters (?p - person ?t - tool ?store - location ?home - location)\n    :precondition (and\n      (at_location ?t ?store)\n      (has_money ?p)\n      (not (owned ?p ?t))\n    )\n    :effect (and\n      (owned ?p ?t)\n      (not (at_location ?t ?store))\n      (at_location ?t ?home)\n      (not (has_money ?p))\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5c06\u64e6\u5b50\u5b58\u653e\u5728\u5bb9\u5668\u4e2d",
            "(:action store_eraser\n    :parameters (?p - person ?t - tool ?c - container ?home_loc - location)\n    :precondition (and\n      (owned ?p ?t)\n      (at_location ?t ?home_loc)\n    )\n    :effect (and\n      (in_container ?t ?c)\n      (not (at_location ?t ?home_loc))\n    )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u4f7f\u7528\u64e6\u5b50\u6e05\u6d01\u6321\u98ce\u73bb\u7483",
            "(:action use_eraser_to_clean\n    :parameters (?p - person ?t - tool ?s - surface ?c - container ?windshield_loc - location)\n    :precondition (and\n      (owned ?p ?t)\n      (in_container ?t ?c)\n      (dirty ?s)\n    )\n    :effect (and\n      (clean ?s)\n      (used ?t)\n      (at_location ?t ?windshield_loc)\n      (not (in_container ?t ?c))\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u4f7f\u7528\u540e\u66ff\u6362\u64e6\u5b50",
            "(:action replace_eraser\n    :parameters (?p - person ?t - tool ?c - container ?windshield_loc - location)\n    :precondition (and\n      (owned ?p ?t)\n      (used ?t)\n      (at_location ?t ?windshield_loc)\n    )\n    :effect (and\n      (not (used ?t))\n      (clean_tool ?t)\n      (in_container ?t ?c)\n      (not (at_location ?t ?windshield_loc))\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make Chocolate Hearts for Valentine&#x27;s Day",
        "step": [
            "melt-chocolate chocolate microwave spoon",
            "freeze-chocolate chocolate chocolate",
            "release-from-molds chocolate chocolate",
            "box-chocolates chocolate"
        ],
        "desc": [
            "Assemble the ingredients needed.",
            "Melt the chocolate bars in the microwave until you have no lumps left after stirring.",
            "Pour the melted chocolate into the heart shaped molds.",
            "Put the chocolate into the freezer until hardened.",
            "Leave them out for one minute and pop out of molds, Or, cut heart shapes in the tray.",
            "Enjoy then and there, or box them up and give away!"
        ],
        "action": [
            "(:action assemble-ingredients\n    :parameters (?chocolate - entity ?ingredients - entity)\n    :precondition (and\n      (at-cost ?chocolate in-store)\n      (at-location ?ingredients in-cabinet)\n    )\n    :effect (and\n      (at-cost ?chocolate purchased-for-use)\n      (at-location ?ingredients on-countertop)\n    )\n  )",
            "(:action melt-chocolate\n    :parameters (?chocolate - entity ?microwave - entity ?spoon - entity)\n    :precondition (and\n      (at-texture ?chocolate solid)\n      (at-temperature ?chocolate colder)\n      (at-location ?chocolate packaged)\n      (at-power ?microwave off)\n      (at-cleanness ?spoon clean)\n    )\n    :effect (and\n      (at-texture ?chocolate liquid)\n      (at-temperature ?chocolate warmer)\n      (at-location ?chocolate out-of-package)\n      (at-power ?microwave on)\n      (at-cleanness ?spoon dirty)\n    )\n  )",
            "(:action pour-into-molds\n    :parameters (?chocolate - entity ?mold - entity)\n    :precondition (and\n      (at-texture ?chocolate liquid)\n      (at-fullness ?mold empty)\n    )\n    :effect (and\n      (at-texture ?chocolate in-molds)\n      (at-fullness ?mold full)\n    )\n  )",
            "(:action freeze-chocolate\n    :parameters (?chocolate - entity ?mold - entity)\n    :precondition (and\n      (at-texture ?chocolate liquid)\n    )\n    :effect (and\n      (at-texture ?chocolate frozen)\n      (at-hardness ?chocolate solid)\n      (at-temperature ?chocolate colder)\n      (at-ease-of-release ?chocolate easy-to-release-from-molds)\n      (at-fullness ?mold full)\n      (at-weight ?mold heavier)\n    )\n  )",
            "(:action release-from-molds\n    :parameters (?chocolate - entity ?mold - entity)\n    :precondition (and\n      (at-texture ?chocolate frozen)\n      (at-ease-of-release ?chocolate easy-to-release-from-molds)\n    )\n    :effect (and\n      (at-texture ?chocolate on-plate)\n      (at-fullness ?mold empty)\n      (at-weight ?mold lighter)\n    )\n  )",
            "(:action box-chocolates\n    :parameters (?chocolate - entity)\n    :precondition (and\n      (at-texture ?chocolate on-plate)\n    )\n    :effect (and\n      (at-texture ?chocolate in-box)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Freeze Baked Cookies or Biscuits",
        "step": [
            "place-in-container cookies",
            "separate-using-paper cookies",
            "place-in-freezer cookies",
            "thaw cookies"
        ],
        "desc": [
            "Place the biscuits or cookies into a rigid, airtight container.",
            "Separate the biscuits and cookies using freezer paper, baking paper, or foil.",
            "Place biscuits in freezer.",
            "Thaw."
        ],
        "action": [
            "(:action place-in-container\n    :parameters (?i - item)\n    :precondition (and (not (in-container ?i)))\n    :effect (and (in-container ?i)))",
            "(:action separate-using-paper\n    :parameters (?i - item)\n    :precondition (and (in-container ?i) (not (in-lined-tin ?i)))\n    :effect (and (in-lined-tin ?i)))",
            "(:action place-in-freezer\n    :parameters (?i - item)\n    :precondition (and (in-lined-tin ?i) (not (in-freezer ?i)))\n    :effect (and (in-freezer ?i)))",
            "(:action thaw\n    :parameters (?i - item)\n    :precondition (in-freezer ?i)\n    :effect (and (thawed ?i) (not (in-freezer ?i)))\n  )\n)"
        ]
    },
    {
        "task": "Make Whole Wheat Pastry With Canola",
        "step": [
            "add_flour_and_salt canola_oil canola_oil mixing_bowl table",
            "mix_ingredients canola_oil mixing_bowl canola_oil canola_oil",
            "prepare_pastry mixing_bowl canola_oil table",
            "press_into_pie_dish mixing_bowl table",
            "create_edge canola_oil table"
        ],
        "desc": [
            "Place the whole wheat flour and salt into the mixing bowl.",
            "Pour in the oil.",
            "Place the pastry onto a sheet of wax paper.",
            "Remove from the fridge.",
            "Press the pastry into the pie dish.",
            "Create an edge with the sides of a fork."
        ],
        "action": [
            "(:action add_flour_and_salt\n    :parameters (?flour - ingredient ?salt - ingredient ?bowl - container ?table - location)\n    :precondition (and\n      (at ?flour ?table)\n      (at ?salt ?table)\n      (at ?bowl ?table)\n    )\n    :effect (and\n      (in ?flour ?bowl)\n      (in ?salt ?bowl)\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5c06\u6cb9\u5012\u5165\u6405\u62cc\u7897",
            "(:action pour_in_oil\n    :parameters (?oil - ingredient ?bowl - container ?flour - ingredient ?salt - ingredient ?table - location)\n    :precondition (and\n      (in ?flour ?bowl)\n      (in ?salt ?bowl)\n      (at ?oil ?table)\n    )\n    :effect (and\n      (in ?oil ?bowl)\n    )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u6df7\u5408\u98df\u6750",
            "(:action mix_ingredients\n    :parameters (?oil - ingredient ?bowl - container ?flour - ingredient ?salt - ingredient)\n    :precondition (and\n      (in ?flour ?bowl)\n      (in ?salt ?bowl)\n      (in ?oil ?bowl)\n    )\n    :effect (and\n      (mixed ?bowl)\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u51c6\u5907\u9165\u76ae",
            "(:action prepare_pastry\n    :parameters (?bowl - container ?wax_paper - object ?table - location)\n    :precondition (and\n      (mixed ?bowl)\n      (at ?wax_paper ?table)\n    )\n    :effect (and\n      (pastry_ready)\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5c06\u9165\u76ae\u6309\u538b\u5230\u6d3e\u76d8\u4e2d",
            "(:action press_into_pie_dish\n    :parameters (?pie_dish - container ?table - location)\n    :precondition (and\n      (pastry_ready)\n      (at ?pie_dish ?table)\n    )\n    :effect (and\n      (pastry_in_dish)\n    )\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u7528\u53c9\u5b50\u521b\u5efa\u8fb9\u7f18",
            "(:action create_edge\n    :parameters (?fork - object ?table - location)\n    :precondition (and\n      (pastry_in_dish)\n      (at ?fork ?table)\n    )\n    :effect (and\n      (edge_created)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make a Pancake Mix Container from a Recycled Ketchup Bottle",
        "step": [
            "attach_funnel user1 scrubber1 ketchup_bottle1",
            "pour_batter user1 pancake_batter1 scrubber1 ketchup_bottle1",
            "replace_lid_and_label user1 ketchup_bottle1 funnel1 funnel1 funnel1",
            "place_in_fridge user1 ketchup_bottle1 fridge1 store_location"
        ],
        "desc": [
            "Scrub the ketchup bottle thoroughly.",
            "Place the funnel over the mouth of the bottle.",
            "Pour pancake batter through the funnel into the empty ketchup bottle.",
            "Replace the lid and label the bottle.",
            "Place the bottle in refrigerator.",
            "Finished."
        ],
        "action": [
            "(:action scrub_bottle\n    :parameters (?p - person ?bottle - container ?scrubber - tool ?sink - surface)\n    :precondition (and\n      (owned ?p ?bottle)\n      (owned ?p ?scrubber)\n      (at ?bottle ?sink)\n      (dirty ?bottle)\n      (clean ?scrubber)\n    )\n    :effect (and\n      (clean ?bottle)\n      (dirty ?scrubber)\n      (wet ?scrubber)\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5c06\u6f0f\u6597\u653e\u5728\u74f6\u53e3\u4e0a",
            "(:action attach_funnel\n    :parameters (?p - person ?funnel - tool ?bottle - container)\n    :precondition (and\n      (owned ?p ?funnel)\n      (owned ?p ?bottle)\n      (clean ?funnel)\n      (clean ?bottle)\n      (not (funnel_attached ?funnel ?bottle))\n    )\n    :effect (funnel_attached ?funnel ?bottle)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u901a\u8fc7\u6f0f\u6597\u5012\u5165\u714e\u997c\u9762\u7cca",
            "(:action pour_batter\n    :parameters (?p - person ?batter - ingredient ?funnel - tool ?bottle - container)\n    :precondition (and\n      (owned ?p ?batter)\n      (owned ?p ?funnel)\n      (owned ?p ?bottle)\n      (funnel_attached ?funnel ?bottle)\n      (clean ?bottle)\n      (not (has_batter ?bottle))\n    )\n    :effect (and\n      (has_batter ?bottle)\n      (dirty ?funnel)\n      (not (has_batter ?bottle)) ; Assuming batter is poured completely\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u66f4\u6362\u76d6\u5b50\u5e76\u6807\u8bb0\u74f6\u5b50",
            "(:action replace_lid_and_label\n    :parameters (?p - person ?bottle - container ?lid - tool ?label - tool ?pen - tool)\n    :precondition (and\n      (owned ?p ?bottle)\n      (owned ?p ?lid)\n      (owned ?p ?label)\n      (owned ?p ?pen)\n      (has_batter ?bottle)\n      (not (sealed ?bottle))\n    )\n    :effect (and\n      (sealed ?bottle)\n      (labeled ?bottle)\n      (used ?lid)\n      (used ?label)\n      (used ?pen)\n    )\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5c06\u74f6\u5b50\u653e\u5165\u51b0\u7bb1",
            "(:action place_in_fridge\n    :parameters (?p - person ?bottle - container ?fridge - appliance ?loc_fridge - location)\n    :precondition (and\n      (owned ?p ?bottle)\n      (owned ?p ?fridge)\n      (sealed ?bottle)\n      (at ?bottle ?loc_fridge)\n      (clean ?fridge)\n    )\n    :effect (and\n      (in_fridge ?bottle)\n      (not (at ?bottle ?loc_fridge))\n    )\n  )\n)"
        ]
    },
    {
        "task": "Use a Mic in Team Fortress 2",
        "step": [
            "make_microphone_working mic",
            "adjust_panel_visibility panel",
            "talk_using_microphone mic voice",
            "advise_teammates advice",
            "select_voice_panel panel",
            "use_microphone_efficiently voice"
        ],
        "desc": [
            "Make sure that your microphone is working and connected first.",
            "Find various panels at the top like \"Multiplayer\", \"Mouse\", \"Audio\", etc.",
            "Click on the Voice panel.",
            "Start talking with other players using your microphone!",
            "Use the microphone to communicate with your team in a more efficient manner and demand that your voice is heard!",
            "Advise teammates as well as make game plans to help and support your team."
        ],
        "action": [
            "(:action make_microphone_working\n    :parameters (?microphone - entity)\n    :precondition (and (not (connected ?microphone)) (not (plugged-in ?microphone)) (not (functional ?microphone)) (not (tested ?microphone)))\n    :effect (and (connected ?microphone) (plugged-in ?microphone) (functional ?microphone) (tested ?microphone))\n  )",
            "(:action adjust_panel_visibility\n    :parameters (?panel - entity)\n    :precondition (and (not (visible ?panel)) (not (open ?panel)))\n    :effect (and (visible ?panel) (open ?panel))\n  )",
            "(:action select_voice_panel\n    :parameters (?panel - entity)\n    :precondition (and (visible ?panel) (not (selected ?panel)))\n    :effect (selected ?panel)\n  )",
            "(:action talk_using_microphone\n    :parameters (?microphone - entity ?voice - entity)\n    :precondition (and (connected ?microphone) (functional ?microphone) (not (heard ?voice)))\n    :effect (heard ?voice)\n  )",
            "(:action use_microphone_efficiently\n    :parameters (?voice - entity)\n    :precondition (and (heard ?voice) (not (efficient ?voice)))\n    :effect (efficient ?voice)\n  )",
            "(:action advise_teammates\n    :parameters (?advice - entity)\n    :precondition (not (possible ?advice))\n    :effect (possible ?advice)\n  )\n)"
        ]
    },
    {
        "task": "Make Carob Fruit Balls",
        "step": [
            "mix_ingredients user1 mixing_bowl1 spoon1 carob1 carob1 carob1 carob1",
            "roll_into_balls user1 mixing_bowl1 spoon1",
            "freeze_balls user1 mixing_bowl1 freezer1",
            "serve_balls user1 mixing_bowl1 plate1"
        ],
        "desc": [
            "Mix all of the ingredients together.",
            "Roll into small balls.",
            "Place in the freezer for half an hour.",
            "Serve."
        ],
        "action": [
            "(:action mix_ingredients\n    :parameters (?p - person ?bowl - container ?spoon - tool\n                    ?ing1 - ingredient ?ing2 - ingredient\n                    ?ing3 - ingredient ?ing4 - ingredient)\n    :precondition (and\n      (owned ?p ?bowl) (clean ?bowl) (at ?bowl kitchen_counter1)\n      (owned ?p ?spoon) (clean ?spoon)\n      (owned ?p ?ing1) (clean ?ing1) (at ?ing1 kitchen_counter1)\n      (owned ?p ?ing2) (clean ?ing2) (at ?ing2 kitchen_counter1)\n      (owned ?p ?ing3) (clean ?ing3) (at ?ing3 kitchen_counter1)\n      (owned ?p ?ing4) (clean ?ing4) (at ?ing4 kitchen_counter1)\n    )\n    :effect (and\n      (mixed ?bowl)\n      (dirty ?bowl)\n      (dirty ?spoon)\n      (in ?ing1 ?bowl)\n      (in ?ing2 ?bowl)\n      (in ?ing3 ?bowl)\n      (in ?ing4 ?bowl)\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u5c06\u6df7\u5408\u7269\u63c9\u6210\u5c0f\u7403",
            "(:action roll_into_balls\n    :parameters (?p - person ?bowl - container ?spoon - tool)\n    :precondition (and\n      (owned ?p ?bowl) (mixed ?bowl) (at ?bowl kitchen_counter1)\n      (owned ?p ?spoon) (clean ?spoon)\n    )\n    :effect (and\n      (rolled ?bowl)\n      (dirty ?spoon)\n    )\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u5c06\u5c0f\u7403\u653e\u5165\u51b0\u7bb1\u51b7\u51bb",
            "(:action freeze_balls\n    :parameters (?p - person ?bowl - container ?freezer - appliance)\n    :precondition (and\n      (owned ?p ?bowl) (rolled ?bowl) (at ?bowl kitchen_counter1)\n      (owned ?p ?freezer) (at ?freezer kitchen_counter1)\n    )\n    :effect (and\n      (frozen ?bowl)\n      (at ?bowl freezer_location)\n    )\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u4e0a\u684c\u98df\u7528",
            "(:action serve_balls\n    :parameters (?p - person ?bowl - container ?plate - container)\n    :precondition (and\n      (owned ?p ?bowl) (frozen ?bowl) (at ?bowl freezer_location)\n      (owned ?p ?plate) (at ?plate dining_table1)\n    )\n    :effect (and\n      (served ?bowl)\n      (at ?bowl dining_table1)\n    )\n  )\n)"
        ]
    },
    {
        "task": "Make Seasoned Salt",
        "step": [
            "mix-ingredients celery_salt",
            "grind-ingredients celery_salt mortar_and_pestle",
            "season-food celery_salt salads"
        ],
        "desc": [
            "Mix the ingredients together thoroughly.",
            "Pour into an air-tight container with a lid.",
            "It goes well in dips, salad dressings, soups and on sandwiches.",
            "Grind the ingredients together in a mortar and pestle.",
            "Transfer to a storage container as needed."
        ],
        "action": [
            "(:action mix-ingredients\n    :parameters (?e - entity)\n    :precondition (and (stratified ?e) (separate ?e))\n    :effect (and (mixed ?e) (not (stratified ?e)) (not (separate ?e)))\n  )",
            "(:action pour-into-container\n    :parameters (?e - entity ?c - container)\n    :precondition (and (mixed ?e) (empty ?c))\n    :effect (and (inContainer ?e ?c) (full ?c) (onCounter ?c) (not (empty ?c)))\n  )",
            "(:action season-food\n    :parameters (?e - entity ?f - food)\n    :precondition (mixed ?e)\n    :effect (and (flavorful ?f) (not (plain ?f)))\n  )",
            "(:action grind-ingredients\n    :parameters (?e - entity ?t - tool)\n    :precondition (and (mixed ?e) (absent ?t))\n    :effect (and (present ?t))\n  )",
            "(:action transfer-to-storage\n    :parameters (?e - entity ?c - container)\n    :precondition (inContainer ?e ?c)\n    :effect (and (empty ?c))\n  )\n)"
        ]
    },
    {
        "task": "Make Asparagus in Serrano Ham",
        "step": [
            "prepare_asparagus asparagus1 cutting_board1",
            "add_oil_to_tin olive_oil1 tin1",
            "wrap_asparagus_with_ham asparagus1 asparagus1",
            "place_asparagus_in_tin asparagus1 tin1",
            "preheat_oven oven1",
            "put_tin_in_oven tin1 oven1 asparagus1",
            "roast_asparagus asparagus1 oven1",
            "serve_asparagus asparagus1 dish1"
        ],
        "desc": [
            "Preheat your oven beforehand to 400\u00b0F (200\u00b0C or Gas Mark 6).",
            "Add your olive oil into a baking or roasting tin large enough to hold all of your asparagus spears.",
            "Cut off the ends of the asparagus spears and wrap enough Serrano ham around each asparagus spear until it is mostly covered but with top jagged part still open.",
            "Roast the asparagus in the oven for 8-10 minutes.",
            "Serve immediately with a main dish so your asparagus acts as a side order."
        ],
        "action": [
            "(:action preheat_oven\n    :parameters (?oven - appliance)\n    :precondition (and\n      (at_location ?oven kitchen)\n      (not (oven_preheated))\n      (not (oven_on))\n    )\n    :effect (and\n      (oven_on)\n      (oven_preheated)\n    )\n  )\n\n  ;; \u52a8\u4f5c2\uff1a\u6dfb\u52a0\u6a44\u6984\u6cb9\u5230\u70e4\u76d8",
            "(:action add_oil_to_tin\n    :parameters (?oil - material ?tin - container)\n    :precondition (and\n      (in ?oil pantry)\n      (at_location ?tin kitchen)\n    )\n    :effect (in ?oil ?tin)\n  )\n\n  ;; \u52a8\u4f5c3\uff1a\u51c6\u5907\u82a6\u7b0b",
            "(:action prepare_asparagus\n    :parameters (?asparagus - object ?board - tool)\n    :precondition (and\n      (in ?asparagus fridge)\n      (at_location ?board kitchen)\n      (clean ?board)\n    )\n    :effect (prepared_asparagus ?asparagus)\n  )\n\n  ;; \u52a8\u4f5c4\uff1a\u7528\u706b\u817f\u5305\u88f9\u82a6\u7b0b",
            "(:action wrap_asparagus_with_ham\n    :parameters (?asparagus - object ?ham - material)\n    :precondition (and\n      (prepared_asparagus ?asparagus)\n      (in ?ham fridge)\n    )\n    :effect (wrapped_asparagus ?asparagus)\n  )\n\n  ;; \u52a8\u4f5c5\uff1a\u5c06\u82a6\u7b0b\u653e\u5165\u70e4\u76d8",
            "(:action place_asparagus_in_tin\n    :parameters (?asparagus - object ?tin - container)\n    :precondition (and\n      (wrapped_asparagus ?asparagus)\n      (in olive_oil1 tin1)\n    )\n    :effect (in ?asparagus ?tin)\n  )\n\n  ;; \u52a8\u4f5c6\uff1a\u5c06\u70e4\u76d8\u653e\u5165\u70e4\u7bb1",
            "(:action put_tin_in_oven\n    :parameters (?tin - container ?oven - appliance ?asparagus - object)\n    :precondition (and\n      (oven_preheated)\n      (in ?asparagus ?tin)\n    )\n    :effect (in ?asparagus ?oven)\n  )\n\n  ;; \u52a8\u4f5c7\uff1a\u70d8\u70e4\u82a6\u7b0b",
            "(:action roast_asparagus\n    :parameters (?asparagus - object ?oven - appliance)\n    :precondition (and\n      (in ?asparagus ?oven)\n      (oven_on)\n      (not (roasted_asparagus ?asparagus))\n    )\n    :effect (roasted_asparagus ?asparagus)\n  )\n\n  ;; \u52a8\u4f5c8\uff1a\u4e0a\u83dc",
            "(:action serve_asparagus\n    :parameters (?asparagus - object ?dish - container)\n    :precondition (and\n      (roasted_asparagus ?asparagus)\n      (in ?asparagus tin1)\n      (at_location ?dish kitchen)\n    )\n    :effect (and\n      (in ?asparagus ?dish)\n      (served_asparagus ?asparagus)\n    )\n  )\n)"
        ]
    }
]