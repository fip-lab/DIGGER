[
    {
        "domain_test_data/114975402_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Be a Spy With Friends.\n- form_spy_group co_conspirator1 co_conspirator1 co_conspirator1\n- set_location safehouse\n- identify_victim target_victim\n- gather_gear you camera\n- gather_gear you binoculars\n- gather_gear co_conspirator2 camera\n- gather_gear co_conspirator2 binoculars\n- gather_gear co_conspirator1 camera\n- gather_gear co_conspirator1 binoculars\n\nDescriptions:\n- Set-up your spy group You will need a trustworthy 2-5 person group.\n- It's good to have a place to keep your gear when not in use, hold meetings, and just talk in private without worrying about the nosiness of certain people in public places.\n- Get some gear To be a good spy, you and your friends must have gear that will help with missions.\n- Find your first \"victim\" The victim is the person you will be watching and spying on.\n\nPDDL Actions:\n(:action form_spy_group\n    :parameters (?p1 - person ?p2 - person ?p3 - person)\n    :precondition (and\n                    (not (group-formed))\n                    (member-of-group ?p1)\n                    (member-of-group ?p2)\n                    (member-of-group ?p3))\n    :effect (group-formed)\n  )\n\n  ;;   2：        \n(:action set_location\n    :parameters (?l - location)\n    :precondition (and\n                    (group-formed)\n                    (not (location-set ?l)))\n    :effect (location-set ?l)\n  )\n\n  ;;   3：    \n(:action gather_gear\n    :parameters (?p - person ?g - gear)\n    :precondition (and\n                    (group-formed)\n                    (location-set safehouse)\n                    (not (has-gear ?p ?g)))\n    :effect (has-gear ?p ?g)\n  )\n\n  ;;   4：       \n(:action identify_victim\n    :parameters (?v - victim)\n    :precondition (not (victim-identified ?v))\n    :effect (victim-identified ?v)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: assembling-disguises\n\nSteps:\n- get_costume npc costume\n\nDescriptions:\n- Find supplies for each disguise. Each of your disguises should have at least three parts, so make sure you have enough supplies for each of your characters to have a full costume!\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114061278_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Pineapple Sherbet.\n- add-ingredient sugar blender\n- add-ingredient pineapple blender\n- add-ingredient oil blender\n- add-ingredient milk blender\n- add-ingredient extract blender\n- blend-all blender mixture\n- pour-into-dish mixture blender plate\n- freeze-mixture mixture plate freezer sherbet\n\nDescriptions:\n- Blend the pineapple if it's fresh.\n- Pour in the milk, oil, sugar or syrup and extract.\n- Blend all of the ingredients together until smooth.\n- Pour into a baking dish with decent sides.\n- Place in the freezer.\n- To serve: Simply scoop or cut out pieces of the sherbet.\n\nPDDL Actions:\n(:action put-in-blender\n    :parameters (?ingredient - ingredient ?blender - appliance)\n    :precondition (and (at ?ingredient kitchen) (at ?blender kitchen))\n    :effect (and (in ?ingredient ?blender) (not (at ?ingredient kitchen)))\n  )\n(:action blend-pineapple\n    :parameters (?pineapple - ingredient ?blender - appliance)\n    :precondition (and (is-fresh ?pineapple) (in ?pineapple ?blender) (state ?blender off))\n    :effect (and (blended ?pineapple) (state ?blender on))\n  )\n(:action add-ingredient\n    :parameters (?ingredient - ingredient ?blender - appliance)\n    :precondition (and (at ?ingredient kitchen) (at ?blender kitchen))\n    :effect (and (in ?ingredient ?blender) (not (at ?ingredient kitchen)))\n  )\n(:action blend-all\n    :parameters (?blender - appliance ?mixture - mixture)\n    :precondition (and\n      (in pineapple ?blender)\n      (in milk ?blender)\n      (in oil ?blender)\n      (in sugar ?blender)\n      (in extract ?blender)\n      (state ?blender off)\n    )\n    :effect (and\n      (not (in pineapple ?blender))\n      (not (in milk ?blender))\n      (not (in oil ?blender))\n      (not (in sugar ?blender))\n      (not (in extract ?blender))\n      (in ?mixture ?blender)\n      (state ?blender on)\n    )\n  )\n(:action pour-into-dish\n    :parameters (?mixture - mixture ?blender - appliance ?dish - container)\n    :precondition (and (in ?mixture ?blender) (at ?blender kitchen) (at ?dish kitchen))\n    :effect (and\n      (not (in ?mixture ?blender))\n      (in ?mixture ?dish)\n    )\n  )\n(:action freeze-mixture\n    :parameters (?mixture - mixture ?dish - container ?freezer - location ?sherbet - sherbet)\n    :precondition (and (in ?mixture ?dish) (at ?dish kitchen) (at ?freezer kitchen))\n    :effect (and\n      (not (in ?mixture ?dish))\n      (in ?sherbet ?dish)\n      (at ?dish ?freezer)\n      (frozen ?sherbet)\n    )\n  )\n(:action serve-sherbet\n    :parameters (?sherbet - sherbet ?dish - container ?plate - container)\n    :precondition (and (in ?sherbet ?dish) (at ?dish freezer) (frozen ?sherbet))\n    :effect (and\n      (not (in ?sherbet ?dish))\n      (in ?sherbet ?plate)\n      (at ?dish kitchen)\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: fill_the_glass\n\nSteps:\n- drain npc rack\n- poke coconut screwdriver\n\nDescriptions:\n- Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.\n- Poke a hole in the “eye” of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or “eyes” at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it’s bored through the shell), remove it by wiggling it out, widening the new hole in the process.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Duct Tape Necklace.\n- unroll_tape tape1\n- fold_tape tape1\n- smooth_tape tape1\n- tape_ends_together tape1 ends1\n\nDescriptions:\n- Take one roll of duct tape and make a piece about a little bigger than your head.\n- Measure it around your head, and cut it off the roll.\n- Fold it halfway through the middle, like shown.\n- Fold the other half so there is no sticky part showing.\n- Tape the ends together.\n- And you are done!\n\nPDDL Actions:\n(:action unroll_tape\n    :parameters (?t - tape)\n    :precondition (and (rolled ?t) (on_roll ?t))\n    :effect (and (in_pieces ?t) (not (rolled ?t)))\n  )\n(:action measure_and_cut_tape\n    :parameters (?t - tape ?tb - table)\n    :precondition (and (in_pieces ?t) (elongated ?t) (not (measured ?tb)))\n    :effect (and (measured ?tb) (in_pieces ?t))\n  )\n(:action fold_tape\n    :parameters (?t - tape)\n    :precondition (and (in_pieces ?t) (elongated ?t))\n    :effect (and (folded ?t) (not (elongated ?t)))\n  )\n(:action smooth_tape\n    :parameters (?t - tape)\n    :precondition (and (folded ?t) (sticky ?t))\n    :effect (and (smooth ?t) (not (sticky ?t)))\n  )\n(:action tape_ends_together\n    :parameters (?t - tape ?e - ends)\n    :precondition (and (smooth ?t) (separate_pieces ?t) (separate_ends ?e))\n    :effect (and (one_piece ?t) (joined_ends ?e) (not (separate_ends ?e)) (not (separate_pieces ?t)))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: remove_fibre_from_coconut_meat\n\nSteps:\n- drain npc rack\n- poke coconut screwdriver\n- peel npc\n- break_coconut npc\n- break coconut_wrapped towel\n\nDescriptions:\n- Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.\n- Poke a hole in the “eye” of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or “eyes” at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it’s bored through the shell), remove it by wiggling it out, widening the new hole in the process.\n- Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.\n- Alternatively, strike the coconut against a concrete surface. If you don’t have a hammer or mallet, you can use a solid surface like a porch or possibly a concrete countertop. Try to strike the coconut’s equator against the corner of this surface, using it as a makeshift wedge. Repeatedly strike the coconut all around its equator until the coconut breaks apart.\n- Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Pineapple Sherbet.\n- add-ingredient sugar blender\n- add-ingredient pineapple blender\n- add-ingredient oil blender\n- add-ingredient milk blender\n- add-ingredient extract blender\n- blend-all blender mixture\n- pour-into-dish mixture blender plate\n- freeze-mixture mixture plate freezer sherbet\n\nDescriptions:\n- Blend the pineapple if it's fresh.\n- Pour in the milk, oil, sugar or syrup and extract.\n- Blend all of the ingredients together until smooth.\n- Pour into a baking dish with decent sides.\n- Place in the freezer.\n- To serve: Simply scoop or cut out pieces of the sherbet.\n\nPDDL Actions:\n(:action put-in-blender\n    :parameters (?ingredient - ingredient ?blender - appliance)\n    :precondition (and (at ?ingredient kitchen) (at ?blender kitchen))\n    :effect (and (in ?ingredient ?blender) (not (at ?ingredient kitchen)))\n  )\n(:action blend-pineapple\n    :parameters (?pineapple - ingredient ?blender - appliance)\n    :precondition (and (is-fresh ?pineapple) (in ?pineapple ?blender) (state ?blender off))\n    :effect (and (blended ?pineapple) (state ?blender on))\n  )\n(:action add-ingredient\n    :parameters (?ingredient - ingredient ?blender - appliance)\n    :precondition (and (at ?ingredient kitchen) (at ?blender kitchen))\n    :effect (and (in ?ingredient ?blender) (not (at ?ingredient kitchen)))\n  )\n(:action blend-all\n    :parameters (?blender - appliance ?mixture - mixture)\n    :precondition (and\n      (in pineapple ?blender)\n      (in milk ?blender)\n      (in oil ?blender)\n      (in sugar ?blender)\n      (in extract ?blender)\n      (state ?blender off)\n    )\n    :effect (and\n      (not (in pineapple ?blender))\n      (not (in milk ?blender))\n      (not (in oil ?blender))\n      (not (in sugar ?blender))\n      (not (in extract ?blender))\n      (in ?mixture ?blender)\n      (state ?blender on)\n    )\n  )\n(:action pour-into-dish\n    :parameters (?mixture - mixture ?blender - appliance ?dish - container)\n    :precondition (and (in ?mixture ?blender) (at ?blender kitchen) (at ?dish kitchen))\n    :effect (and\n      (not (in ?mixture ?blender))\n      (in ?mixture ?dish)\n    )\n  )\n(:action freeze-mixture\n    :parameters (?mixture - mixture ?dish - container ?freezer - location ?sherbet - sherbet)\n    :precondition (and (in ?mixture ?dish) (at ?dish kitchen) (at ?freezer kitchen))\n    :effect (and\n      (not (in ?mixture ?dish))\n      (in ?sherbet ?dish)\n      (at ?dish ?freezer)\n      (frozen ?sherbet)\n    )\n  )\n(:action serve-sherbet\n    :parameters (?sherbet - sherbet ?dish - container ?plate - container)\n    :precondition (and (in ?sherbet ?dish) (at ?dish freezer) (frozen ?sherbet))\n    :effect (and\n      (not (in ?sherbet ?dish))\n      (in ?sherbet ?plate)\n      (at ?dish kitchen)\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: free_the_meat_from_coconut\n\nSteps:\n- break_coconut npc\n- drain npc rack\n- poke coconut screwdriver\n- break coconut_wrapped towel\n\nDescriptions:\n- Alternatively, strike the coconut against a concrete surface. If you don’t have a hammer or mallet, you can use a solid surface like a porch or possibly a concrete countertop. Try to strike the coconut’s equator against the corner of this surface, using it as a makeshift wedge. Repeatedly strike the coconut all around its equator until the coconut breaks apart.\n- Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.\n- Poke a hole in the “eye” of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or “eyes” at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it’s bored through the shell), remove it by wiggling it out, widening the new hole in the process.\n- Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Duct Tape Necklace.\n- unroll_tape tape1\n- fold_tape tape1\n- smooth_tape tape1\n- tape_ends_together tape1 ends1\n\nDescriptions:\n- Take one roll of duct tape and make a piece about a little bigger than your head.\n- Measure it around your head, and cut it off the roll.\n- Fold it halfway through the middle, like shown.\n- Fold the other half so there is no sticky part showing.\n- Tape the ends together.\n- And you are done!\n\nPDDL Actions:\n(:action unroll_tape\n    :parameters (?t - tape)\n    :precondition (and (rolled ?t) (on_roll ?t))\n    :effect (and (in_pieces ?t) (not (rolled ?t)))\n  )\n(:action measure_and_cut_tape\n    :parameters (?t - tape ?tb - table)\n    :precondition (and (in_pieces ?t) (elongated ?t) (not (measured ?tb)))\n    :effect (and (measured ?tb) (in_pieces ?t))\n  )\n(:action fold_tape\n    :parameters (?t - tape)\n    :precondition (and (in_pieces ?t) (elongated ?t))\n    :effect (and (folded ?t) (not (elongated ?t)))\n  )\n(:action smooth_tape\n    :parameters (?t - tape)\n    :precondition (and (folded ?t) (sticky ?t))\n    :effect (and (smooth ?t) (not (sticky ?t)))\n  )\n(:action tape_ends_together\n    :parameters (?t - tape ?e - ends)\n    :precondition (and (smooth ?t) (separate_pieces ?t) (separate_ends ?e))\n    :effect (and (one_piece ?t) (joined_ends ?e) (not (separate_ends ?e)) (not (separate_pieces ?t)))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: wrap_the_coconut_in_towel\n\nSteps:\n- drain npc rack\n- poke coconut screwdriver\n- break coconut_wrapped towel\n\nDescriptions:\n- Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.\n- Poke a hole in the “eye” of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or “eyes” at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it’s bored through the shell), remove it by wiggling it out, widening the new hole in the process.\n- Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Defeat a Thug on Dead Island.\n- acquire-knowledge you\n- equip-weapon you grenades\n- throw-weapon you grenades thug1\n\nDescriptions:\n- There is no chance in hell you will kill a Thug using just your bear hands and feet.\n- Incendiary Weapons - Grenades or Molotov Cocktails *WARNING* You may need to use a couple of these, so it is recommended that you only use one when a Thugs' health is below 50%.\n- Make sure your guns have enough ammo, and your knives are up to scratch.\n- Attack!\n\nPDDL Actions:\n(:action acquire-knowledge\n    :parameters (?p - person)\n    :precondition (not (knowledge_aware ?p))\n    :effect (knowledge_aware ?p)\n  )\n\n  ;;          \n(:action ensure-ammo\n    :parameters (?a - ammo)\n    :precondition (not (ammo_assured ?a))\n    :effect (ammo_assured ?a)\n  )\n\n  ;;        \n(:action equip-weapon\n    :parameters (?p - person ?w - weapon)\n    :precondition (knowledge_aware ?p)\n    :effect (weapon_location ?w on_person)\n  )\n\n  ;;            （    ，   ）\n(:action attack-with-weapon\n    :parameters (?p - person ?w - weapon ?a - ammo ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (ammo_assured ?a)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (not (ammo_assured ?a)) ;          \n            )\n  )\n\n  ;;              （    、   ）\n(:action throw-weapon\n    :parameters (?p - person ?w - weapon ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (weapon_thrown ?w)\n              (weapon_location ?w thrown_at_enemy) ;          \n            )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: poke_eyes\n\nSteps:\n- poke coconut screwdriver\n\nDescriptions:\n- Poke a hole in the “eye” of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or “eyes” at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it’s bored through the shell), remove it by wiggling it out, widening the new hole in the process.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Defeat a Thug on Dead Island.\n- acquire-knowledge you\n- equip-weapon you grenades\n- throw-weapon you grenades thug1\n\nDescriptions:\n- There is no chance in hell you will kill a Thug using just your bear hands and feet.\n- Incendiary Weapons - Grenades or Molotov Cocktails *WARNING* You may need to use a couple of these, so it is recommended that you only use one when a Thugs' health is below 50%.\n- Make sure your guns have enough ammo, and your knives are up to scratch.\n- Attack!\n\nPDDL Actions:\n(:action acquire-knowledge\n    :parameters (?p - person)\n    :precondition (not (knowledge_aware ?p))\n    :effect (knowledge_aware ?p)\n  )\n\n  ;;          \n(:action ensure-ammo\n    :parameters (?a - ammo)\n    :precondition (not (ammo_assured ?a))\n    :effect (ammo_assured ?a)\n  )\n\n  ;;        \n(:action equip-weapon\n    :parameters (?p - person ?w - weapon)\n    :precondition (knowledge_aware ?p)\n    :effect (weapon_location ?w on_person)\n  )\n\n  ;;            （    ，   ）\n(:action attack-with-weapon\n    :parameters (?p - person ?w - weapon ?a - ammo ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (ammo_assured ?a)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (not (ammo_assured ?a)) ;          \n            )\n  )\n\n  ;;              （    、   ）\n(:action throw-weapon\n    :parameters (?p - person ?w - weapon ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (weapon_thrown ?w)\n              (weapon_location ?w thrown_at_enemy) ;          \n            )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: hit_coconut_with_mallet\n\nSteps:\n- drain npc rack\n- poke coconut screwdriver\n- break coconut_wrapped towel\n\nDescriptions:\n- Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.\n- Poke a hole in the “eye” of the coconut with a screwdriver and a mallet. Position the pointed end of a screwdriver on one of the 3 holes or “eyes” at the top of the coconut. Then, use a mallet or hammer to carefully but forcefully bore a hole through an eye. Once the screwdriver gives (indicating it’s bored through the shell), remove it by wiggling it out, widening the new hole in the process.\n- Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114994170_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Clean Your Home Efficiently.\n- pickup_items item1 basket1\n- clean_surfaces tv cleaner1\n- clean_surfaces window1 cleaner1\n- clean_surfaces window2 cleaner1\n- pickup_items item2 basket1\n- shake_rugs rug1\n- shake_rugs rug2\n- empty_trash basket1 trash_bag1\n- empty_trash basket1 trash_bag2\n- dust_room living_room\n- dust_room kitchen\n- dust_room bathroom\n\nDescriptions:\n- ######Pick up and put away stray items and throw trash into waste baskets.\n- ######Dust, again going through the entire house room by room.\n- ######Take a large trash bag and go through each room emptying the waste baskets and trash cans.\n- ######Use a spray cleaner and rags or paper towels to clean any glass surfaces, including the TV screens.\n- First pick up any throw rugs and inside door mats and shake them outside.\n- ######Enjoy your clean home!\n\nPDDL Actions:\n(:action pickup_items\n    :parameters (?item - item ?basket - basket)\n    :precondition (and\n                    (stray_item ?item)\n                    (empty ?basket))\n    :effect (and\n              (in_basket ?item ?basket)\n              (organized ?item)\n              (full ?basket))\n  )\n\n  ;;   2：       \n(:action dust_room\n    :parameters (?room - room)\n    :precondition (dusty ?room)\n    :effect (and\n              (cleaned_room ?room)\n              (not (dusty ?room)))\n  )\n\n  ;;   3：         \n(:action empty_trash\n    :parameters (?basket - basket ?dish - dish)\n    :precondition (full ?basket)\n    :effect (and\n              (empty ?basket)\n              (trash_disposed ?dish))\n  )\n\n  ;;   4：           \n(:action clean_surfaces\n    :parameters (?surface - surface ?cleaner - cleaner)\n    :precondition (dirty_surface ?surface)\n    :effect (cleaned_surface ?surface)\n  )\n\n  ;;   5：          \n(:action shake_rugs\n    :parameters (?rug - rug)\n    :precondition (dirty_rug ?rug)\n    :effect (cleaned_rug ?rug)\n  )\n\n  ;;   6：      \n(:action enjoy_clean_home\n    :parameters ()\n    :precondition ()\n    :effect ()\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: collect-water\n\nSteps:\n- fill bathtub bathroom npc\n- get_water npc water\n\nDescriptions:\n- Shelter in place and wait for the initial chaos to subside. If all of the electronics suddenly stop working, the immediate loss of electricity will cause a lot of sudden confusion and chaos. If you aren’t home, wait 30-45 minutes for all of the abrupt danger to pass. Then, go home if you’re within a few miles or kilometers. If you’re already home, stay there and do not go outside.\n- Eat anything in your fridge first to minimize food shortages. For the first 1-2 days, eat whatever is in your fridge and hasn’t gone bad immediately. Save the dry stuff for later when you may really need it. The odds are low society will completely collapse and you’ll go without help for super long, but it’s still better to go through everything that’s going to go bad anyway.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Get a Headshot in Gears of War.\n- sniper_shot weapon1 player1\n- shotgun_shot player2\n- pistol_shot player3\n- boomshot_shot weapon2 player4\n\nDescriptions:\n- Sniper — Simply aim at the head and pull the trigger, unless you're the host, in which case you will need to aim in front of where they're going.\n- Shotgun — The aim on the shotgun is almost like a rectangle.\n- Pistol — I'm not sure because I haven't played in a while, but it's either six or seven shots to the head with the standard-issue pistol for a headshot.\n- BoomShot — BoomShot headshots are possible — don't let anyone tell you they're not but the chance of one happening is about a million to one.\n\nPDDL Actions:\n(:action sniper_shot\n    :parameters (?w - weapon ?a - agent)\n    :precondition (and\n                    (weapon_location ?w still)\n                    (not (knows_where_to_aim ?a))\n                   )\n    :effect (and\n             (weapon_location ?w focused)\n             (knows_where_to_aim ?a)\n            )\n  )\n\n  ;;          \n(:action shotgun_shot\n    :parameters (?a - agent)\n    :precondition (not (knows_shape_of_shotgun_aim ?a))\n    :effect (knows_shape_of_shotgun_aim ?a)\n  )\n\n  ;;         \n(:action pistol_shot\n    :parameters (?a - agent)\n    :precondition (not (knows_pistol_shots_needed ?a))\n    :effect (knows_pistol_shots_needed ?a)\n  )\n\n  ;;   BoomShot    \n(:action boomshot_shot\n    :parameters (?w - weapon ?a - agent)\n    :precondition (and\n                    (weapon_location ?w unfired)\n                    (not (knows_boomshot_odds ?a))\n                   )\n    :effect (and\n             (weapon_location ?w fired)\n             (knows_boomshot_odds ?a)\n            )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: turn-on-radio\n\nSteps:\n- check_radio npc\n- check_batteries npc basement\n\nDescriptions:\n- Turn your radio on immediately to get as much information as possible. Most electronics are going to stop functioning as soon as the EMP goes off. However, depending on the type of EMP, there is a good chance that radios will continue to work—at least for a short while. Turn the radio on and tune in to any news source with a decent signal. Keep it on as long as possible and pay attention while you take the next steps to ensure that you get as much information as you can.\n- Your vehicle may still work if it’s older or it doesn’t rely on a dedicated electrical signal outside of the battery to keep the engine going, which is the case for many vehicles.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Ninja Defuse in Call of Duty.\n- find_hiding_spot character player_pistol further_out\n- investigate_routes character current_routes\n- wait_until_planting character game_bomb\n- start_defusing character game_bomb\n\nDescriptions:\n- Move in and cover your route to the bomb site.\n- Find a hiding spot and pull out your pistol.\n- Investigate your enemy's routes.\n- Wait until enemy does start to plant the bomb.\n- Start defusing once the bomb has been planted.\n\nPDDL Actions:\n(:action move_in\n    :parameters (?c - game_character ?r - routes ?from - place ?to - place)\n    :precondition (and\n                    (location ?c ?from)\n                    (coverage ?r uncovered)\n                    (appearance ?r uncovered))\n    :effect (and\n             (location ?c ?to)\n             (coverage ?r covered)\n             (appearance ?r covered))\n  )\n\n  ;;   2:           \n(:action find_hiding_spot\n    :parameters (?c - game_character ?p - pistol ?ps - place)\n    :precondition (and\n                    (location ?c ?ps)\n                    (pistol_location ?p concealed)\n                    (availability ?p in_inventory))\n    :effect (and\n             (location ?c hidden)\n             (pistol_location ?p exposed)\n             (availability ?p equipped))\n  )\n\n  ;;   3:        \n(:action investigate_routes\n    :parameters (?c - game_character ?r - routes)\n    :precondition (and\n                    (location ?c hidden)\n                    (focus ?c pulling_out_pistol)\n                    (knowledge ?r uninvestigated))\n    :effect (and\n             (focus ?c investigating)\n             (knowledge ?r investigated))\n  )\n\n  ;;   4:           \n(:action wait_until_planting\n    :parameters (?c - game_character ?b - bomb)\n    :precondition (and\n                    (focus ?c investigating)\n                    (skill ?b unplanted))\n    :effect (and\n             (focus ?c waiting)\n             (skill ?b planted))\n  )\n\n  ;;   5:           \n(:action start_defusing\n    :parameters (?c - game_character ?b - bomb)\n    :precondition (and\n                    (location ?c hidden)\n                    (focus ?c waiting)\n                    (skill ?b planted))\n    :effect (and\n             (location ?c now_at_bomb)\n             (focus ?c defusing)\n             (skill ?b defused))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: get-home\n\nSteps:\n- close_mixture npc\n\nDescriptions:\n- If you’re outside during a nuclear blast, cover your mouth and nose with a cloth or mask to avoid breathing in toxic particles.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Be a Spy With Friends.\n- form_spy_group co_conspirator1 co_conspirator1 co_conspirator1\n- set_location safehouse\n- identify_victim target_victim\n- gather_gear you camera\n- gather_gear you binoculars\n- gather_gear co_conspirator2 camera\n- gather_gear co_conspirator2 binoculars\n- gather_gear co_conspirator1 camera\n- gather_gear co_conspirator1 binoculars\n\nDescriptions:\n- Set-up your spy group You will need a trustworthy 2-5 person group.\n- It's good to have a place to keep your gear when not in use, hold meetings, and just talk in private without worrying about the nosiness of certain people in public places.\n- Get some gear To be a good spy, you and your friends must have gear that will help with missions.\n- Find your first \"victim\" The victim is the person you will be watching and spying on.\n\nPDDL Actions:\n(:action form_spy_group\n    :parameters (?p1 - person ?p2 - person ?p3 - person)\n    :precondition (and\n                    (not (group-formed))\n                    (member-of-group ?p1)\n                    (member-of-group ?p2)\n                    (member-of-group ?p3))\n    :effect (group-formed)\n  )\n\n  ;;   2：        \n(:action set_location\n    :parameters (?l - location)\n    :precondition (and\n                    (group-formed)\n                    (not (location-set ?l)))\n    :effect (location-set ?l)\n  )\n\n  ;;   3：    \n(:action gather_gear\n    :parameters (?p - person ?g - gear)\n    :precondition (and\n                    (group-formed)\n                    (location-set safehouse)\n                    (not (has-gear ?p ?g)))\n    :effect (has-gear ?p ?g)\n  )\n\n  ;;   4：       \n(:action identify_victim\n    :parameters (?v - victim)\n    :precondition (not (victim-identified ?v))\n    :effect (victim-identified ?v)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: prepare-for-attack\n\nSteps:\n- put_in_cage npc basement\n\nDescriptions:\n- You can drive it if you absolutely have to, but it’s safer to stay off of the roads if you can.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114945367_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Fairy House in the Woods.\n- collect_sticks stick3\n- bundle_sticks stick3\n- collect_sticks stick2\n- collect_sticks stick1\n- create_formation stick3\n- bundle_sticks stick2\n- bundle_sticks stick1\n- build_walls fairy_house1 stick3\n- find_area area1\n- use_bark stick3\n- create_formation stick2\n- use_bark stick2\n- create_formation stick1\n- use_bark stick1\n- decorate_fairy_house fairy_house1\n\nDescriptions:\n- Find a small area with slightly damp dirt.\n- Collect many twigs and sticks.\n- Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n- Build your exterior walls.\n- You can use either a leaf or a wide strip of bark.\n- Decorate.\n\nPDDL Actions:\n(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;;   2：    \n(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;;   3：    \n(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;;   4：    \n(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;;   5：    \n(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;;   6：      \n(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;;   7：     \n(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: build_a_shelter\n\nSteps:\n- build_shelter npc camp stick2\n\nDescriptions:\n- Lean branches against the main branch to form the structure of your shelter. Gather a bunch of branches that are long enough to be propped up against the main branch of your shelter. Think about forming ribs with the branches. Try to keep them as close together as you can.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Chinese Macaroni in Just 20 Minutes.\n- boil_macaroni macaroni pan kitchen\n- serve_macaroni macaroni plate dining_table pan\n\nDescriptions:\n- Boil macaroni in hot boiling water with some salt and oil for 10-15 minutes.\n- After the macaroni has boiled put under running water for about 15 seconds to prevent over cooking.\n- In another pan add some oil and toss in the macaroni.\n- Add salt, red chilli powder ,soy sauce,white vinegar and ajino moto.\n- Cook for some seconds.\n- Serve hot with chilled drinks.\n\nPDDL Actions:\n(:action boil_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?kitchen - location)\n    :precondition (and\n      (at ?macaroni ?kitchen)\n      (at ?pot ?kitchen)\n      (not (cooked ?macaroni))\n    )\n    :effect (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n    )\n  )\n\n  ;;   2：     \n(:action cool_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?sink - location)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n      (at ?pot ?sink)\n    )\n    :effect (and\n      (cooled ?macaroni)\n    )\n  )\n\n  ;;   3：          \n(:action toss_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container ?kitchen - location)\n    :precondition (and\n      (cooled ?macaroni)\n      (at ?pan ?kitchen)\n      (at ?macaroni ?kitchen)\n    )\n    :effect (and\n      (in ?macaroni ?pan)\n    )\n  )\n\n  ;;   4：     \n(:action add_seasoning\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (not (seasoned ?macaroni))\n    )\n    :effect (and\n      (seasoned ?macaroni)\n    )\n  )\n\n  ;;   5：     \n(:action cook_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (seasoned ?macaroni)\n    )\n    :effect (and\n      (cooked ?macaroni)\n    )\n  )\n\n  ;;   6：     \n(:action serve_macaroni\n    :parameters (?macaroni - ingredient ?plate - container ?dining_table - location ?pan - container)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pan)\n      (at ?plate ?dining_table)\n    )\n    :effect (and\n      (in ?macaroni ?plate)\n      (served ?macaroni)\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: collect_water\n\nSteps:\n- get_water npc water\n\nDescriptions:\n- Search for a source of fresh water.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Fairy House in the Woods.\n- collect_sticks stick3\n- bundle_sticks stick3\n- collect_sticks stick2\n- collect_sticks stick1\n- create_formation stick3\n- bundle_sticks stick2\n- bundle_sticks stick1\n- build_walls fairy_house1 stick3\n- find_area area1\n- use_bark stick3\n- create_formation stick2\n- use_bark stick2\n- create_formation stick1\n- use_bark stick1\n- decorate_fairy_house fairy_house1\n\nDescriptions:\n- Find a small area with slightly damp dirt.\n- Collect many twigs and sticks.\n- Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n- Build your exterior walls.\n- You can use either a leaf or a wide strip of bark.\n- Decorate.\n\nPDDL Actions:\n(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;;   2：    \n(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;;   3：    \n(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;;   4：    \n(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;;   5：    \n(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;;   6：      \n(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;;   7：     \n(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: start_a_fire\n\nSteps:\n- start_fire npc camp teepee_structure\n- cook npc camp teepee_structure campfire\n- build_shelter npc camp teepee_structure\n- search_area area2\n- build_teepee npc camp teepee_structure\n\nDescriptions:\n- Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.\n- Use dry sticks, branches, or tree bark to serve as your kindling.\n- Avoid using too much energy. It may be difficult for you to find adequate food and water if you're lost in the woods. Try not to sweat or use too much energy by doing things like running around and screaming for help if you're by yourself. Conserve as much energy as you can for doing things like building shelter, fire, and searching for water.\n- Search for a dry, flat area between 2 trees with splits in their trunks. Look around the area to find a relatively flat area with a tree that has a trunk that splits about 3–5 feet (0.91–1.52 m) off of the ground. If possible, try to find 2 trees that have a split in their trunks about 3–5 feet (0.91–1.52 m) off of the ground and are about 10 feet (3.0 m) apart from each other.\n- Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/113996609_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Board a Small Boat.\n- board_via_platform passenger1 platform1 boat1 dock1\n- hold_rails passenger1 boat1\n- secure_legs passenger1 boat1\n- stabilize_boat passenger1 boat1\n\nDescriptions:\n- Prefer boarding across a solid platform if possible.\n- If you are crossing using a platform, hold on to the rails provided.\n- Avoid plonking one leg in the boat and leaving one on the jetty - this will cause wobbling and you might fall into the water.\n- Once in the boat, always remain in the centre line to move around it and lower yourself to a crouch level so that you reduce your centre of gravity and keep the craft as still as possible.\n- Keep the craft steady as others board.\n\nPDDL Actions:\n(:action board_via_platform\n    :parameters (?p - passenger ?pl - platform ?b - boat ?d - dock)\n    :precondition (and\n                    (platform-present ?pl)\n                    (at ?p ?pl)\n                    (at ?pl ?d)\n                    (at ?b ?d))\n    :effect (and\n              (at ?p ?b)\n              (not (at ?p ?pl))\n             )\n  )\n\n  ;;   2：    \n(:action hold_rails\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (holding-rail ?p)\n  )\n\n  ;;   3：       \n(:action secure_legs\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (legs-in-boat ?p)\n  )\n\n  ;;   4：    \n(:action stabilize_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and\n                    (legs-in-boat ?p)\n                    (holding-rail ?p)\n                    (at ?p ?b))\n    :effect (and\n              (centered ?b)\n              (crouched ?p)\n              (boat-stable ?b)\n             )\n  )\n\n  ;;   5：        \n(:action others_keep_boat_steady\n    :parameters (?op - passenger ?b - boat)\n    :precondition (boat-stable ?b)\n    :effect (at ?op ?b)\n  )\n\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: clean_water\n\nSteps:\n- drink_water person water\n- carve_groove person wood rock\n- check_water npc river water\n\nDescriptions:\n- Do not drink salt water from the ocean because it will dehydrate you.\n- Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island.\n- Check for water at the base of leaves or cacti, inside of caves, hollowed trees, or undercut banks.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Chinese Macaroni in Just 20 Minutes.\n- boil_macaroni macaroni pan kitchen\n- serve_macaroni macaroni plate dining_table pan\n\nDescriptions:\n- Boil macaroni in hot boiling water with some salt and oil for 10-15 minutes.\n- After the macaroni has boiled put under running water for about 15 seconds to prevent over cooking.\n- In another pan add some oil and toss in the macaroni.\n- Add salt, red chilli powder ,soy sauce,white vinegar and ajino moto.\n- Cook for some seconds.\n- Serve hot with chilled drinks.\n\nPDDL Actions:\n(:action boil_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?kitchen - location)\n    :precondition (and\n      (at ?macaroni ?kitchen)\n      (at ?pot ?kitchen)\n      (not (cooked ?macaroni))\n    )\n    :effect (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n    )\n  )\n\n  ;;   2：     \n(:action cool_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?sink - location)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n      (at ?pot ?sink)\n    )\n    :effect (and\n      (cooled ?macaroni)\n    )\n  )\n\n  ;;   3：          \n(:action toss_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container ?kitchen - location)\n    :precondition (and\n      (cooled ?macaroni)\n      (at ?pan ?kitchen)\n      (at ?macaroni ?kitchen)\n    )\n    :effect (and\n      (in ?macaroni ?pan)\n    )\n  )\n\n  ;;   4：     \n(:action add_seasoning\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (not (seasoned ?macaroni))\n    )\n    :effect (and\n      (seasoned ?macaroni)\n    )\n  )\n\n  ;;   5：     \n(:action cook_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (seasoned ?macaroni)\n    )\n    :effect (and\n      (cooked ?macaroni)\n    )\n  )\n\n  ;;   6：     \n(:action serve_macaroni\n    :parameters (?macaroni - ingredient ?plate - container ?dining_table - location ?pan - container)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pan)\n      (at ?plate ?dining_table)\n    )\n    :effect (and\n      (in ?macaroni ?plate)\n      (served ?macaroni)\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: catch_cook_fish\n\nSteps:\n- hunt_path npc path\n- carve_groove person wood rock\n\nDescriptions:\n- Heating the water above 185° F (85° C) for three minutes will kill all pathogens in your water.\n- Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Defeat a Thug on Dead Island.\n- acquire-knowledge you\n- equip-weapon you grenades\n- throw-weapon you grenades thug1\n\nDescriptions:\n- There is no chance in hell you will kill a Thug using just your bear hands and feet.\n- Incendiary Weapons - Grenades or Molotov Cocktails *WARNING* You may need to use a couple of these, so it is recommended that you only use one when a Thugs' health is below 50%.\n- Make sure your guns have enough ammo, and your knives are up to scratch.\n- Attack!\n\nPDDL Actions:\n(:action acquire-knowledge\n    :parameters (?p - person)\n    :precondition (not (knowledge_aware ?p))\n    :effect (knowledge_aware ?p)\n  )\n\n  ;;          \n(:action ensure-ammo\n    :parameters (?a - ammo)\n    :precondition (not (ammo_assured ?a))\n    :effect (ammo_assured ?a)\n  )\n\n  ;;        \n(:action equip-weapon\n    :parameters (?p - person ?w - weapon)\n    :precondition (knowledge_aware ?p)\n    :effect (weapon_location ?w on_person)\n  )\n\n  ;;            （    ，   ）\n(:action attack-with-weapon\n    :parameters (?p - person ?w - weapon ?a - ammo ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (ammo_assured ?a)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (not (ammo_assured ?a)) ;          \n            )\n  )\n\n  ;;              （    、   ）\n(:action throw-weapon\n    :parameters (?p - person ?w - weapon ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (weapon_thrown ?w)\n              (weapon_location ?w thrown_at_enemy) ;          \n            )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: start_fire\n\nSteps:\n- carve_groove person wood rock\n\nDescriptions:\n- Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Board a Small Boat.\n- board_via_platform passenger1 platform1 boat1 dock1\n- hold_rails passenger1 boat1\n- secure_legs passenger1 boat1\n- stabilize_boat passenger1 boat1\n\nDescriptions:\n- Prefer boarding across a solid platform if possible.\n- If you are crossing using a platform, hold on to the rails provided.\n- Avoid plonking one leg in the boat and leaving one on the jetty - this will cause wobbling and you might fall into the water.\n- Once in the boat, always remain in the centre line to move around it and lower yourself to a crouch level so that you reduce your centre of gravity and keep the craft as still as possible.\n- Keep the craft steady as others board.\n\nPDDL Actions:\n(:action board_via_platform\n    :parameters (?p - passenger ?pl - platform ?b - boat ?d - dock)\n    :precondition (and\n                    (platform-present ?pl)\n                    (at ?p ?pl)\n                    (at ?pl ?d)\n                    (at ?b ?d))\n    :effect (and\n              (at ?p ?b)\n              (not (at ?p ?pl))\n             )\n  )\n\n  ;;   2：    \n(:action hold_rails\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (holding-rail ?p)\n  )\n\n  ;;   3：       \n(:action secure_legs\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (legs-in-boat ?p)\n  )\n\n  ;;   4：    \n(:action stabilize_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and\n                    (legs-in-boat ?p)\n                    (holding-rail ?p)\n                    (at ?p ?b))\n    :effect (and\n              (centered ?b)\n              (crouched ?p)\n              (boat-stable ?b)\n             )\n  )\n\n  ;;   5：        \n(:action others_keep_boat_steady\n    :parameters (?op - passenger ?b - boat)\n    :precondition (boat-stable ?b)\n    :effect (at ?op ?b)\n  )\n\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: escape_island\n\nSteps:\n- get_water npc water\n- carve_groove person wood rock\n\nDescriptions:\n- Ration all of your supplies. Do not waste anything, even if you have an overabundance of it. Store away your excess food and water and stick to strict rationing. The body requires 32 ounces of water a day and 200-1500 calories of food for an average person.\n- Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114756331_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Seasoned Salt.\n- mix-ingredients celery_salt\n- grind-ingredients celery_salt mortar_and_pestle\n- season-food celery_salt salads\n\nDescriptions:\n- Mix the ingredients together thoroughly.\n- Pour into an air-tight container with a lid.\n- It goes well in dips, salad dressings, soups and on sandwiches.\n- Grind the ingredients together in a mortar and pestle.\n- Transfer to a storage container as needed.\n\nPDDL Actions:\n(:action mix-ingredients\n    :parameters (?e - entity)\n    :precondition (and (stratified ?e) (separate ?e))\n    :effect (and (mixed ?e) (not (stratified ?e)) (not (separate ?e)))\n  )\n(:action pour-into-container\n    :parameters (?e - entity ?c - container)\n    :precondition (and (mixed ?e) (empty ?c))\n    :effect (and (inContainer ?e ?c) (full ?c) (onCounter ?c) (not (empty ?c)))\n  )\n(:action season-food\n    :parameters (?e - entity ?f - food)\n    :precondition (mixed ?e)\n    :effect (and (flavorful ?f) (not (plain ?f)))\n  )\n(:action grind-ingredients\n    :parameters (?e - entity ?t - tool)\n    :precondition (and (mixed ?e) (absent ?t))\n    :effect (and (present ?t))\n  )\n(:action transfer-to-storage\n    :parameters (?e - entity ?c - container)\n    :precondition (inContainer ?e ?c)\n    :effect (and (empty ?c))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: get_out_deep\n\nSteps:\n- breathe npc\n- free npc qsand\n- stay_flat npc stick qsand\n\nDescriptions:\n- Breathe deeply. Not only will deep breathing help you remain calm, it will also make you more buoyant. Keep as much air in your lungs as possible. It is impossible to \"go under\" if your lungs are full of air.\n- Lay back. Sit down and lean back if your feet are stuck fast. Creating a larger \"footprint\" should free your feet by removing the pressure they create, allowing them to float. When you feel them start to come free, roll to your side away from the quicksand and free of its grip. You'll get dirty, but its the quickest and safest way to free yourself.\n- Stay flat on your back with your arms and legs fully touching the quicksand and use the pole as a guide. Inch sideways along the pole to firm ground.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Seasoned Salt.\n- mix-ingredients celery_salt\n- grind-ingredients celery_salt mortar_and_pestle\n- season-food celery_salt salads\n\nDescriptions:\n- Mix the ingredients together thoroughly.\n- Pour into an air-tight container with a lid.\n- It goes well in dips, salad dressings, soups and on sandwiches.\n- Grind the ingredients together in a mortar and pestle.\n- Transfer to a storage container as needed.\n\nPDDL Actions:\n(:action mix-ingredients\n    :parameters (?e - entity)\n    :precondition (and (stratified ?e) (separate ?e))\n    :effect (and (mixed ?e) (not (stratified ?e)) (not (separate ?e)))\n  )\n(:action pour-into-container\n    :parameters (?e - entity ?c - container)\n    :precondition (and (mixed ?e) (empty ?c))\n    :effect (and (inContainer ?e ?c) (full ?c) (onCounter ?c) (not (empty ?c)))\n  )\n(:action season-food\n    :parameters (?e - entity ?f - food)\n    :precondition (mixed ?e)\n    :effect (and (flavorful ?f) (not (plain ?f)))\n  )\n(:action grind-ingredients\n    :parameters (?e - entity ?t - tool)\n    :precondition (and (mixed ?e) (absent ?t))\n    :effect (and (present ?t))\n  )\n(:action transfer-to-storage\n    :parameters (?e - entity ?c - container)\n    :precondition (inContainer ?e ?c)\n    :effect (and (empty ?c))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: avoid_quicksand\n\nSteps:\n\nDescriptions:\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114778947_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Remove Paint from Windows.\n- mix_soap_and_water bucket01 soap_bottle01\n- wet_window window01 bucket01 sponge01\n- open_razor_blade_package razor_blade_package01 razor_blade01\n- scrape_paint window01 razor_blade01\n- buff_window window01 cloth01\n- remove_splatters_with_solvent window01 solvent01\n- spritz_glass_cleaner window01 glass_cleaner_bottle01\n\nDescriptions:\n- You will need a bucket of hot water mixed with dish soap, a clean cloth or sponge, a new safety razor blade and some glass cleaner.\n- Wet the window with the water and dish soap.\n- Position the razor blade.\n- Using slow, smooth motions, start scraping the paint from the window.\n- Once all of the paint has been scraped away, spritz the window with some glass cleaner and use a clean, dry cloth to buff the windows clean.\n- Remove small paint splatters with chemical solvents.\n\nPDDL Actions:\n(:action gather_items\n    :parameters (?items - item)\n    :precondition (not (in_hand ?items))\n    :effect (in_hand ?items)\n  )\n\n  ;;; Action 2: Mix Soap and Water in Bucket\n(:action mix_soap_and_water\n    :parameters (?b - bucket ?sb - soap_bottle)\n    :precondition (and\n      (empty ?b)\n      (full ?sb)\n    )\n    :effect (and\n      (mixed ?b)\n      (not (empty ?b))\n      (not (full ?sb))\n    )\n  )\n\n  ;;; Action 3: Wet the Window with Soap Solution\n(:action wet_window\n    :parameters (?w - window ?b - bucket ?s - sponge)\n    :precondition (and\n      (dry ?w)\n      (mixed ?b)\n      (clean_tool ?s)\n    )\n    :effect (and\n      (wet ?w)\n      (not (dry ?w))\n      (dirty_tool ?s)\n    )\n  )\n\n  ;;; Action 4: Open Razor Blade Package\n(:action open_razor_blade_package\n    :parameters (?rp - razor_blade_package ?rb - razor_blade)\n    :precondition (and\n      (closed ?rp)\n      (not (in_hand ?rb))\n    )\n    :effect (and\n      (open ?rp)\n      (in_hand ?rb)\n      (not (closed ?rp))\n    )\n  )\n\n  ;;; Action 5: Scrape Paint from Window\n(:action scrape_paint\n    :parameters (?w - window ?rb - razor_blade)\n    :precondition (and\n      (wet ?w)\n      (in_hand ?rb)\n      (contains_paint ?w)\n    )\n    :effect (and\n      (not (contains_paint ?w))\n      (dirty_tool ?rb)\n      (clean ?w)\n    )\n  )\n\n  ;;; Action 6: Spritz Window with Glass Cleaner\n(:action spritz_glass_cleaner\n    :parameters (?w - window ?gcb - glass_cleaner_bottle)\n    :precondition (and\n      (not (contains_paint ?w))\n      (has_glass_cleaner ?gcb)\n      (not (opaque ?w))\n    )\n    :effect (and\n      (opaque ?w)\n      (not (has_glass_cleaner ?gcb))\n    )\n  )\n\n  ;;; Action 7: Buff Window with Cloth\n(:action buff_window\n    :parameters (?w - window ?c - cloth)\n    :precondition (and\n      (opaque ?w)\n      (clean_cloth ?c)\n    )\n    :effect (and\n      (transparent ?w)\n      (dirty_cloth ?c)\n      (not (opaque ?w))\n    )\n  )\n\n  ;;; Action 8: Remove Small Paint Splatters with Solvent\n(:action remove_splatters_with_solvent\n    :parameters (?w - window ?s - solvent)\n    :precondition (and\n      (contains_splatters ?w)\n      (has_solvent ?s)\n    )\n    :effect (and\n      (not (contains_splatters ?w))\n      (not (has_solvent ?s))\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: pick_car_lock\n\nSteps:\n- push_hanger npc car\n- hook_latch npc car\n- straighten_coathanger npc\n\nDescriptions:\n- Lift the weather stripping from the bottom of the driver's-side window. Push the end of the hanger in through the soft rubber weather stripping and the bottom of the window. The hanger is now inside the wall of the door.\n- Hook and pull the latch. Hook the hanger around the latch and pull it towards the rear of the car. This should unlock any manually locked car door.\n- Unravel and straighten the coat hanger. You can leave the hooked top section alone, but unwind it from itself at the “neck” and straighten the rest of the hanger out, giving you a long metal tool with a hooked tip.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is move CreditCard1 to Box1 with two object.\n- gotolocation agent1 drawer2 drawer1\n- pickupobjectnoreceptacle agent1 creditcard1 drawer1\n- gotolocation agent1 drawer1 box1\n- putobjectinreceptacle agent1 creditcard1 box1\n\nDescriptions:\n- Agent 1 puts credit card 1 in box 1\n- Agent 1 moves from drawer 1 to box 1\n- Agent 1 moves from drawer 2 to drawer 1\n- Agent 1 picks up credit card 1 from drawer\n\nPDDL Actions:\n(:action PutObjectInReceptacleObject\n    :parameters (?a - agent ?o - object ?outerO ?outerR - receptacle)\n    :precondition (and\n            (atLocation ?a ?outerR)\n            (objectAtLocation ?outerO ?outerR)\n            (isReceptacleObject ?outerO)\n            (not (isReceptacleObject ?o))\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            (inReceptacle ?outerO ?outerR)\n            )\n    :effect (and\n                (inReceptacle ?o ?outerO)\n                (inReceptacle ?o ?outerR)\n                (not (holds ?a ?o))\n(:action PutObjectInReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (holds ?a ?o)\n            (not (holdsAnyReceptacleObject ?a))\n            )\n    :effect (and\n                (inReceptacle ?o ?r)\n                (not (holds ?a ?o))\n(:action GotoLocation\n    :parameters (?a - agent ?lStart - receptacle ?lEnd - receptacle)\n    :precondition (and\n            (atLocation ?a ?lStart)\n            )\n    :effect (and\n                (atLocation ?a ?lEnd)\n                (not (atLocation ?a ?lStart))\n(:action PickupObjectNoReceptacle\n    :parameters (?a - agent ?o - object ?r - receptacle)\n    :precondition (and\n            (atLocation ?a ?r)\n            (objectAtLocation ?o ?r)\n            (not (inReceptacle ?o ?r))\n            (not (holdsAny ?a))\n            )\n    :effect (and\n                (not (objectAtLocation ?o ?r))\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: pick_easy_lock\n\nSteps:\n- slide_into_side_of_door user1 creditcard1 lock1\n\nDescriptions:\n- Put the credit card into the side of the door. Slide the long end of a credit card in between the door frame and the locking side of the door, just above where the lock enters the frame.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114187233_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Pitcher of Melon Pina Coladas.\n- pour_ingredients_into_pitcher mixture1 pitcher1 kitchen_counter\n- mix_pitcher pitcher1 mixture1\n- chill_mixture pitcher1 refrigerator1\n- pour_into_glass mixture1 pitcher1 glass1\n- add_garnish honeydew1 glass1 mixture1\n\nDescriptions:\n- Pour the ingredients (except the garnish) into a pitcher that can hold 100 ounces.\n- Ensure everything is mixed thoroughly.\n- Allow the mixture to chill in the refrigerator until ready to serve.\n- Pour the mixture into tall glasses.\n- Add a chunk of honeydew melon on the side of each glass.\n- Finished.\n\nPDDL Actions:\n(:action pour_ingredients_into_pitcher\n    :parameters (?m - mixture ?p - pitcher ?l - object)\n    :precondition (and\n      (empty ?p)\n      (in ?m ?l)\n    )\n    :effect (and\n      (in ?m ?p)\n      (not (empty ?p))\n      (not (in ?m ?l))\n    )\n  )\n\n  ;;   2：    \n(:action mix_pitcher\n    :parameters (?p - pitcher ?m - mixture)\n    :precondition (and\n      (in ?m ?p)\n      (not (mixed ?p))\n    )\n    :effect (mixed ?p)\n  )\n\n  ;;   3：     \n(:action chill_mixture\n    :parameters (?p - pitcher ?r - refrigerator)\n    :precondition (mixed ?p)\n    :effect (chilled ?p)\n  )\n\n  ;;   4：        \n(:action pour_into_glass\n    :parameters (?m - mixture ?p - pitcher ?g - glass)\n    :precondition (and\n      (chilled ?p)\n      (in ?m ?p)\n    )\n    :effect (and\n      (in_glass ?m ?g)\n      (empty ?p)\n      (not (in ?m ?p))\n    )\n  )\n\n  ;;   5：      \n(:action add_garnish\n    :parameters (?h - honeydew ?g - glass ?m - mixture)\n    :precondition (in_glass ?m ?g)\n    :effect (and\n      (garnished ?h ?g)\n      (on_table ?g)\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: get_coconut_juice\n\nSteps:\n- peel npc\n- drain npc rack\n\nDescriptions:\n- Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef’s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.\n- Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Defeat a Thug on Dead Island.\n- acquire-knowledge you\n- equip-weapon you grenades\n- throw-weapon you grenades thug1\n\nDescriptions:\n- There is no chance in hell you will kill a Thug using just your bear hands and feet.\n- Incendiary Weapons - Grenades or Molotov Cocktails *WARNING* You may need to use a couple of these, so it is recommended that you only use one when a Thugs' health is below 50%.\n- Make sure your guns have enough ammo, and your knives are up to scratch.\n- Attack!\n\nPDDL Actions:\n(:action acquire-knowledge\n    :parameters (?p - person)\n    :precondition (not (knowledge_aware ?p))\n    :effect (knowledge_aware ?p)\n  )\n\n  ;;          \n(:action ensure-ammo\n    :parameters (?a - ammo)\n    :precondition (not (ammo_assured ?a))\n    :effect (ammo_assured ?a)\n  )\n\n  ;;        \n(:action equip-weapon\n    :parameters (?p - person ?w - weapon)\n    :precondition (knowledge_aware ?p)\n    :effect (weapon_location ?w on_person)\n  )\n\n  ;;            （    ，   ）\n(:action attack-with-weapon\n    :parameters (?p - person ?w - weapon ?a - ammo ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (ammo_assured ?a)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (not (ammo_assured ?a)) ;          \n            )\n  )\n\n  ;;              （    、   ）\n(:action throw-weapon\n    :parameters (?p - person ?w - weapon ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (weapon_thrown ?w)\n              (weapon_location ?w thrown_at_enemy) ;          \n            )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: get_coconut_meat_without_oven\n\nSteps:\n- wrap coconut_wrapped towel1\n- peel npc\n- drain npc rack\n- peel npc\n\nDescriptions:\n- Wrap the mature coconut in a kitchen towel. Place the coconut in the center of the towel, and gather the corners of the towel together to form a pouch. This will keep coconut bits from flying when you go to smash it with a hammer.\n- Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef’s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.\n- Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.\n- Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Duct Tape Necklace.\n- unroll_tape tape1\n- fold_tape tape1\n- smooth_tape tape1\n- tape_ends_together tape1 ends1\n\nDescriptions:\n- Take one roll of duct tape and make a piece about a little bigger than your head.\n- Measure it around your head, and cut it off the roll.\n- Fold it halfway through the middle, like shown.\n- Fold the other half so there is no sticky part showing.\n- Tape the ends together.\n- And you are done!\n\nPDDL Actions:\n(:action unroll_tape\n    :parameters (?t - tape)\n    :precondition (and (rolled ?t) (on_roll ?t))\n    :effect (and (in_pieces ?t) (not (rolled ?t)))\n  )\n(:action measure_and_cut_tape\n    :parameters (?t - tape ?tb - table)\n    :precondition (and (in_pieces ?t) (elongated ?t) (not (measured ?tb)))\n    :effect (and (measured ?tb) (in_pieces ?t))\n  )\n(:action fold_tape\n    :parameters (?t - tape)\n    :precondition (and (in_pieces ?t) (elongated ?t))\n    :effect (and (folded ?t) (not (elongated ?t)))\n  )\n(:action smooth_tape\n    :parameters (?t - tape)\n    :precondition (and (folded ?t) (sticky ?t))\n    :effect (and (smooth ?t) (not (sticky ?t)))\n  )\n(:action tape_ends_together\n    :parameters (?t - tape ?e - ends)\n    :precondition (and (smooth ?t) (separate_pieces ?t) (separate_ends ?e))\n    :effect (and (one_piece ?t) (joined_ends ?e) (not (separate_ends ?e)) (not (separate_pieces ?t)))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: get_coconut_meat_with_oven\n\nSteps:\n- peel npc\n- drain npc rack\n- wrap coconut_wrapped towel1\n- peel npc\n- break coconut_wrapped towel\n- remove_item npc\n\nDescriptions:\n- Use a knife to shave off the tender white casing. Position your young coconut on a cutting board, and use a sharp cleaver or a sturdy chef’s knife to slice off the outer casing. Carve at an angle, as if you were removing the skin from an apple, until you expose the hard inner shell. Work to expose as much of the shell as possible.\n- Turn the coconut upside down over a glass and allow it to drain. Let the coconut sit for several minutes or until all of the liquid drains out. You may need to shake the coconut a few times to get the last bit of water out of it.\n- Wrap the mature coconut in a kitchen towel. Place the coconut in the center of the towel, and gather the corners of the towel together to form a pouch. This will keep coconut bits from flying when you go to smash it with a hammer.\n- Whack the wrapped coconut with a hammer, or bash it against a hard surface. With the coconut still wrapped in the towel, use a hammer or a mallet to repeatedly and forcefully whack the coconut. Turn the coconut as you hammer it, in order to strike it from multiple angles. Hammer it until you feel it break open beneath the towel.\n- Remove the coconut and wrap it in a towel to cool. Use oven mitts to retrieve the coconut from the oven or microwave, and allow it to cool for about 5 minutes while wrapped in a towel. Doing this ensures you don’t have hot coconut bits flying everywhere when you go to smash it in the next step.\n- Use a knife to separate the meat from the shell. Remove the coconut pieces from the towel. Take each piece, and wedge a knife between the shell and the white meat of the coconut to carefully separate the two. Then, use the knife (or a vegetable peeler) or remove the fibrous layer that might still be clinging to the outside of the meat.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114741230_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Be a Spy With Friends.\n- form_spy_group co_conspirator1 co_conspirator1 co_conspirator1\n- set_location safehouse\n- identify_victim target_victim\n- gather_gear you camera\n- gather_gear you binoculars\n- gather_gear co_conspirator2 camera\n- gather_gear co_conspirator2 binoculars\n- gather_gear co_conspirator1 camera\n- gather_gear co_conspirator1 binoculars\n\nDescriptions:\n- Set-up your spy group You will need a trustworthy 2-5 person group.\n- It's good to have a place to keep your gear when not in use, hold meetings, and just talk in private without worrying about the nosiness of certain people in public places.\n- Get some gear To be a good spy, you and your friends must have gear that will help with missions.\n- Find your first \"victim\" The victim is the person you will be watching and spying on.\n\nPDDL Actions:\n(:action form_spy_group\n    :parameters (?p1 - person ?p2 - person ?p3 - person)\n    :precondition (and\n                    (not (group-formed))\n                    (member-of-group ?p1)\n                    (member-of-group ?p2)\n                    (member-of-group ?p3))\n    :effect (group-formed)\n  )\n\n  ;;   2：        \n(:action set_location\n    :parameters (?l - location)\n    :precondition (and\n                    (group-formed)\n                    (not (location-set ?l)))\n    :effect (location-set ?l)\n  )\n\n  ;;   3：    \n(:action gather_gear\n    :parameters (?p - person ?g - gear)\n    :precondition (and\n                    (group-formed)\n                    (location-set safehouse)\n                    (not (has-gear ?p ?g)))\n    :effect (has-gear ?p ?g)\n  )\n\n  ;;   4：       \n(:action identify_victim\n    :parameters (?v - victim)\n    :precondition (not (victim-identified ?v))\n    :effect (victim-identified ?v)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: remove_players\n\nSteps:\n- initiate_new_member npc ss\n- set_meeting_location npc ss\n- create_new_member npc ss\n- set_dress_code npc ss\n- teach_new_member_secret adrian ss\n- create_name npc ss\n- create_secret npc ss\n- read_cliques_info npc ss\n\nDescriptions:\n- Conduct a proper initiation for you and your closest friend. This should be done before you initiate others. That way, you are sure to come up with a good idea. The initiation is one of the most important parts of the society. It has to be something neither of you would do normally. Candle-lighting sets a serious and official tone, which is always good. Secret names are fun to have.\n- An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.\n- There needs to be a way to get rid of someone if they become bad for the group or start talking—like blabbing the society's secret. If they do, pretend like that was never the secret, but immediately create a new secret. Put this in the rules.\n- Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.\n- Initiate well to do people in the society. In a school, initiate the most brilliant and enthusiastic students that seem like clique-material, and they will motivate and inspire others. But you don't want to have too many members. The more members, the less secret it is. Five to ten should be good.\n- Think of a name. You and your closest friend should discuss what your secret society should be called.\n- Create a secret or a secret mission. A secret society must have something to protect.\n- Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Be a Spy With Friends.\n- form_spy_group co_conspirator1 co_conspirator1 co_conspirator1\n- set_location safehouse\n- identify_victim target_victim\n- gather_gear you camera\n- gather_gear you binoculars\n- gather_gear co_conspirator2 camera\n- gather_gear co_conspirator2 binoculars\n- gather_gear co_conspirator1 camera\n- gather_gear co_conspirator1 binoculars\n\nDescriptions:\n- Set-up your spy group You will need a trustworthy 2-5 person group.\n- It's good to have a place to keep your gear when not in use, hold meetings, and just talk in private without worrying about the nosiness of certain people in public places.\n- Get some gear To be a good spy, you and your friends must have gear that will help with missions.\n- Find your first \"victim\" The victim is the person you will be watching and spying on.\n\nPDDL Actions:\n(:action form_spy_group\n    :parameters (?p1 - person ?p2 - person ?p3 - person)\n    :precondition (and\n                    (not (group-formed))\n                    (member-of-group ?p1)\n                    (member-of-group ?p2)\n                    (member-of-group ?p3))\n    :effect (group-formed)\n  )\n\n  ;;   2：        \n(:action set_location\n    :parameters (?l - location)\n    :precondition (and\n                    (group-formed)\n                    (not (location-set ?l)))\n    :effect (location-set ?l)\n  )\n\n  ;;   3：    \n(:action gather_gear\n    :parameters (?p - person ?g - gear)\n    :precondition (and\n                    (group-formed)\n                    (location-set safehouse)\n                    (not (has-gear ?p ?g)))\n    :effect (has-gear ?p ?g)\n  )\n\n  ;;   4：       \n(:action identify_victim\n    :parameters (?v - victim)\n    :precondition (not (victim-identified ?v))\n    :effect (victim-identified ?v)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: create_cult\n\nSteps:\n- initiate_new_member npc ss\n- set_meeting_location npc ss\n- set_dress_code npc ss\n- teach_new_member_secret adrian ss\n- create_name npc ss\n- create_secret npc ss\n- read_cliques_info npc ss\n\nDescriptions:\n- Conduct a proper initiation for you and your closest friend. This should be done before you initiate others. That way, you are sure to come up with a good idea. The initiation is one of the most important parts of the society. It has to be something neither of you would do normally. Candle-lighting sets a serious and official tone, which is always good. Secret names are fun to have.\n- An important thing in secret societies is to meet in secret, that means meeting in a new place every time or having access to a secret room somewhere. You could even figure out a time to chat online.\n- Make a dress code. Most small secret societies use robes while large ones, like the Freemasons, have complex aprons.\n- Initiate well to do people in the society. In a school, initiate the most brilliant and enthusiastic students that seem like clique-material, and they will motivate and inspire others. But you don't want to have too many members. The more members, the less secret it is. Five to ten should be good.\n- Think of a name. You and your closest friend should discuss what your secret society should be called.\n- Create a secret or a secret mission. A secret society must have something to protect.\n- Read a few clique-like books, like the clique series by Lisi Harrison, for some background information, although, maybe not so mean like they were.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114771414_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Chinese Macaroni in Just 20 Minutes.\n- boil_macaroni macaroni pan kitchen\n- serve_macaroni macaroni plate dining_table pan\n\nDescriptions:\n- Boil macaroni in hot boiling water with some salt and oil for 10-15 minutes.\n- After the macaroni has boiled put under running water for about 15 seconds to prevent over cooking.\n- In another pan add some oil and toss in the macaroni.\n- Add salt, red chilli powder ,soy sauce,white vinegar and ajino moto.\n- Cook for some seconds.\n- Serve hot with chilled drinks.\n\nPDDL Actions:\n(:action boil_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?kitchen - location)\n    :precondition (and\n      (at ?macaroni ?kitchen)\n      (at ?pot ?kitchen)\n      (not (cooked ?macaroni))\n    )\n    :effect (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n    )\n  )\n\n  ;;   2：     \n(:action cool_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?sink - location)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n      (at ?pot ?sink)\n    )\n    :effect (and\n      (cooled ?macaroni)\n    )\n  )\n\n  ;;   3：          \n(:action toss_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container ?kitchen - location)\n    :precondition (and\n      (cooled ?macaroni)\n      (at ?pan ?kitchen)\n      (at ?macaroni ?kitchen)\n    )\n    :effect (and\n      (in ?macaroni ?pan)\n    )\n  )\n\n  ;;   4：     \n(:action add_seasoning\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (not (seasoned ?macaroni))\n    )\n    :effect (and\n      (seasoned ?macaroni)\n    )\n  )\n\n  ;;   5：     \n(:action cook_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (seasoned ?macaroni)\n    )\n    :effect (and\n      (cooked ?macaroni)\n    )\n  )\n\n  ;;   6：     \n(:action serve_macaroni\n    :parameters (?macaroni - ingredient ?plate - container ?dining_table - location ?pan - container)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pan)\n      (at ?plate ?dining_table)\n    )\n    :effect (and\n      (in ?macaroni ?plate)\n      (served ?macaroni)\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: hunt_animal_for_food\n\nSteps:\n- hunt_path npc path\n- carve_groove person wood rock\n- test_food npc\n\nDescriptions:\n- Heating the water above 185° F (85° C) for three minutes will kill all pathogens in your water.\n- Hunt for fish, insects, and small animals for food. The protein and nutrients from meat and fish will give you energy. Mollusks, clams, oysters, crabs, muscles, and fish are all things that you may be able to find in the shallow waters surrounding or on an island.\n- Test the food you eat for poison. If you've never eaten the fruit that you find on the island, test it for poison by rubbing it on a sensitive part of your skin, like your wrist. Wait 45 minutes. If there is no adverse reaction, rub some of the food on your lips. If you form a rash, or there is burning or irritation, then the food is most likely poisonous. Never eat large amounts of any unknown food. Eat a small amount, wait an hour or two to see if you feel sick, then eat the rest of it.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114985787_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Fairy House in the Woods.\n- collect_sticks stick3\n- bundle_sticks stick3\n- collect_sticks stick2\n- collect_sticks stick1\n- create_formation stick3\n- bundle_sticks stick2\n- bundle_sticks stick1\n- build_walls fairy_house1 stick3\n- find_area area1\n- use_bark stick3\n- create_formation stick2\n- use_bark stick2\n- create_formation stick1\n- use_bark stick1\n- decorate_fairy_house fairy_house1\n\nDescriptions:\n- Find a small area with slightly damp dirt.\n- Collect many twigs and sticks.\n- Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n- Build your exterior walls.\n- You can use either a leaf or a wide strip of bark.\n- Decorate.\n\nPDDL Actions:\n(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;;   2：    \n(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;;   3：    \n(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;;   4：    \n(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;;   5：    \n(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;;   6：      \n(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;;   7：     \n(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: build_shelter\n\nSteps:\n- make_splash npc path oak_log branch\n- drink_water npc\n- build_shelter npc camp teepee_structure\n- place_branch npc west_plain branch_piece\n\nDescriptions:\n- Insert 1 end of the branch into the split of 1 of the trees. Where the tree splits and forms a “V” shape, place 1 end of the branch to hold it up as a support beam. If the tree doesn't have a split, use a log that ends in a “V” shape and lean it against a tree so the branch is supported by the tree.\n- In the event that you have no containers and no way to purify water, you can dig a deep hole, let it fill with groundwater, and wait for the particles to settle at the bottom and the water is clear before you drink it. You should only do this if you have no other option.\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- Place the other end of the branch into the split of the other tree. Form a horizontal frame with the main branch by inserting the other end in the split of a nearby tree. Make sure the branch is firmly held in place by shaking it a little.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Rhubarb Cordial.\n- place_ingredients cloves rhubarb sugar water pot stove\n- simmer_pot pot stove cordial\n- remove_from_heat pot stove\n- garnish_with_mint cordial mint_leaves pot\n\nDescriptions:\n- Simmer the rhubarb with the sugar, cloves and water.\n- Simmer until the rhubarb becomes soft.\n- Remove from the heat.\n- Add the mint leaves for decoration.\n\nPDDL Actions:\n(:action place_ingredients\n    :parameters (?r - ingredient ?s - ingredient ?c - ingredient ?w - ingredient ?pot - tool ?stove - tool)\n    :precondition (pot_on_stove ?pot ?stove)\n    :effect (and\n      (in_pot ?r ?pot)\n      (in_pot ?s ?pot)\n      (in_pot ?c ?pot)\n      (in_pot ?w ?pot)\n    )\n  )\n\n  ;; Action to simmer the pot\n(:action simmer_pot\n    :parameters (?pot - tool ?stove - tool ?p - product)\n    :precondition (and\n      (in_pot rhubarb ?pot)\n      (in_pot sugar ?pot)\n      (in_pot cloves ?pot)\n      (in_pot water ?pot)\n      (pot_on_stove ?pot ?stove)\n    )\n    :effect (and\n      (simmering ?pot)\n      (cooked ?pot)\n      (soft rhubarb)\n      (product_ready ?p)\n    )\n  )\n\n  ;; Action to remove pot from heat\n(:action remove_from_heat\n    :parameters (?pot - tool ?stove - tool)\n    :precondition (and\n      (simmering ?pot)\n      (pot_on_stove ?pot ?stove)\n    )\n    :effect (and\n      (off_heat ?pot)\n      (not (pot_on_stove ?pot ?stove))\n    )\n  )\n\n  ;; Action to garnish with mint leaves\n(:action garnish_with_mint\n    :parameters (?p - product ?d - decoration ?pot - tool)\n    :precondition (and\n      (product_ready ?p)\n      (off_heat ?pot)\n    )\n    :effect (garnished_with ?p ?d)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: eat_plants\n\nSteps:\n- get_water npc water\n- eat_fruit npc\n\nDescriptions:\n- Search for a source of fresh water.\n- Pick wild edible berries to eat. If you happen to come by an identifiable berry bush, definitely take advantage. Never consume any berries that you cannot positively identify as many are toxic. To be safe, stick to eating berries that you recognize like blackberries, raspberries, and wild strawberries.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Fairy House in the Woods.\n- collect_sticks stick3\n- bundle_sticks stick3\n- collect_sticks stick2\n- collect_sticks stick1\n- create_formation stick3\n- bundle_sticks stick2\n- bundle_sticks stick1\n- build_walls fairy_house1 stick3\n- find_area area1\n- use_bark stick3\n- create_formation stick2\n- use_bark stick2\n- create_formation stick1\n- use_bark stick1\n- decorate_fairy_house fairy_house1\n\nDescriptions:\n- Find a small area with slightly damp dirt.\n- Collect many twigs and sticks.\n- Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n- Build your exterior walls.\n- You can use either a leaf or a wide strip of bark.\n- Decorate.\n\nPDDL Actions:\n(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;;   2：    \n(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;;   3：    \n(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;;   4：    \n(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;;   5：    \n(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;;   6：      \n(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;;   7：     \n(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: build_snare\n\nSteps:\n- get_snare npc snare\n\nDescriptions:\n- Look for edible mushrooms in the woods, if you are trained. Look for wild mushrooms near dark and damp areas or on dying trees in the woods. But be very careful because if you eat the wrong mushroom, you could become extremely ill and potentially die. If you're not sure about whether or not a mushroom is safe to eat, don't eat it!\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/115004877_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Wreath with Clothes Hangers.\n- untwist-and-shape-hanger hanger-1 pliers-1\n- crumple-and-thread-paper paper3 hanger-1\n- crumple-and-thread-paper paper2 hanger-1\n- crumple-and-thread-paper paper1 hanger-1\n- push-squares-and-twist-ends hanger-1 pliers-1\n- slide-and-scrunch-squares paper3 hanger-1\n- slide-and-scrunch-squares paper2 hanger-1\n- slide-and-scrunch-squares paper1 hanger-1\n- finish-wreath wreath-1 hanger-1\n\nDescriptions:\n- Untwist wire hanger and shape into a circle, using pliers as needed.\n- Gently crumple 3\" squares of wax paper or crepe paper and thread hanger through center of each square.\n- When you have threaded enough squares to fill length of hanger, gently push squares away from ends and use pliers to twist ends together.\n- Gently slide squares of paper back toward the joined ends of wire hanger, scrunching paper more for additional fullness.\n- Finished.\n\nPDDL Actions:\n(:action untwist-and-shape-hanger\n    :parameters (?h - hanger ?p - pliers)\n    :precondition (shape-straight ?h)\n    :effect (and\n              (shape-circle ?h)\n              (not (shape-straight ?h))\n            )\n  )\n\n  ;;   2：         \n(:action crumple-and-thread-paper\n    :parameters (?p - paper_square ?h - hanger)\n    :precondition (and\n                    (shape-circle ?h)\n                    (not (crumpled ?p))\n                    (not (threaded ?h ?p))\n                  )\n    :effect (and\n              (crumpled ?p)\n              (threaded ?h ?p)\n            )\n  )\n\n  ;;   3：           \n(:action push-squares-and-twist-ends\n    :parameters (?h - hanger ?p - pliers)\n    :precondition (and\n                    (shape-circle ?h)\n                    (threaded ?h paper1)\n                    (threaded ?h paper2)\n                    (threaded ?h paper3)\n                  )\n    :effect (and\n              (squares-pushed-away ?h)\n              (twisted-ends ?h)\n            )\n  )\n\n  ;;   4：          \n(:action slide-and-scrunch-squares\n    :parameters (?p - paper_square ?h - hanger)\n    :precondition (and\n                    (squares-pushed-away ?h)\n                    (threaded ?h ?p)\n                    (crumpled ?p)\n                  )\n    :effect (squares-scrunched ?p)\n  )\n\n  ;;   5：    \n(:action finish-wreath\n    :parameters (?w - wreath ?h - hanger)\n    :precondition (and\n                    (twisted-ends ?h)\n                    (squares-scrunched paper1)\n                    (squares-scrunched paper2)\n                    (squares-scrunched paper3)\n                  )\n    :effect (completed ?w)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: process-strips\n\nSteps:\n- replace_sheet npc work_station papyrus\n- lay_strips npc work_station strip\n- laid_strips npc papyrus_strip\n- dip_strips npc strip\n\nDescriptions:\n- Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours.\n- Lay the second half of the strips out. Once the first half off the strips have been laid out vertically, begin laying out the second half of the strips. Lay the strips out horizontally and on top of the vertical ones.\n- Lay the papyrus plant strips on a hard, flat surface. The pattern doesn't matter at this point as you will be rearranging them later. Just lay them out on a hard, flat surface and make sure they don't overlap.\n- Dip the strips into the glue and water mixture. Dip each strip individually. Try to keep the strips as flat as possible when dipping them. Make sure the strips are fully soaked with the mixture.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Pinwheel Wreath.\n- select-paper p1\n- make-pinwheel pw1 p1\n- choose-wreath-base w1\n- attach-pinwheel pw1 w1\n- attach-twine t1 w1\n\nDescriptions:\n- Select suitable paper to make the pinwheels.\n- Make enough pinwheels to create a wreath.\n- Find a suitable base, such as a Styrofoam/cane/cardboard wreath base.\n- If the wreath base lacks a hanger, add some twine or ribbon to create one.\n- Finished.\n\nPDDL Actions:\n(:action select-paper\n    :parameters (?p - paper)\n    :precondition (and (not (selected ?p)) (not (knowledge ?p)))\n    :effect (and (selected ?p) (knowledge ?p))\n  )\n\n  ;;    2:       \n(:action make-pinwheel\n    :parameters (?pw - pinwheel ?p - paper)\n    :precondition (and (selected ?p) (has-shape ?p) (not (made ?pw)))\n    :effect (made ?pw)\n  )\n\n  ;;    3:       \n(:action choose-wreath-base\n    :parameters (?w - wreath)\n    :precondition (not (base-chosen ?w))\n    :effect (base-chosen ?w)\n  )\n\n  ;;    4:     /  \n(:action attach-twine\n    :parameters (?t - twine ?w - wreath)\n    :precondition (and (base-chosen ?w) (not (twine-attached ?t)) (not (twine-located ?t)))\n    :effect (and (twine-attached ?t) (twine-located ?t))\n  )\n\n  ;;    5:            \n(:action attach-pinwheel\n    :parameters (?pw - pinwheel ?w - wreath)\n    :precondition (and (made ?pw) (base-chosen ?w) (not (attached ?pw)))\n    :effect (attached ?pw)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: get-strips\n\nSteps:\n- peel npc papyrus_strips\n- cut_stalks npc papyrus\n- buy_papyrus npc papyrus\n\nDescriptions:\n- Peel away the outer layer of the papyrus plant. Only the inner part of the plant is used for the paper. You will need to remove the outer green part of the plant. Use a sharp knife and slice down the length of the plant until the entire outer layer is removed. The inside of the plant should be a white or slightly greenish color.\n- Cut the stalks. About 12 inches (30 cm) of papyrus plant will make a large piece of paper that will be nearly 24 inches (61 cm) in length. Cut off as many stalks as you will need to make the amount of paper you want. The cuts must be diagonally made. Then, cut the tips of the papyrus. You will not use the tips, which are the thinner, grass-like end of the plant.\n- Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Pinwheel Wreath.\n- select-paper p1\n- make-pinwheel pw1 p1\n- choose-wreath-base w1\n- attach-pinwheel pw1 w1\n- attach-twine t1 w1\n\nDescriptions:\n- Select suitable paper to make the pinwheels.\n- Make enough pinwheels to create a wreath.\n- Find a suitable base, such as a Styrofoam/cane/cardboard wreath base.\n- If the wreath base lacks a hanger, add some twine or ribbon to create one.\n- Finished.\n\nPDDL Actions:\n(:action select-paper\n    :parameters (?p - paper)\n    :precondition (and (not (selected ?p)) (not (knowledge ?p)))\n    :effect (and (selected ?p) (knowledge ?p))\n  )\n\n  ;;    2:       \n(:action make-pinwheel\n    :parameters (?pw - pinwheel ?p - paper)\n    :precondition (and (selected ?p) (has-shape ?p) (not (made ?pw)))\n    :effect (made ?pw)\n  )\n\n  ;;    3:       \n(:action choose-wreath-base\n    :parameters (?w - wreath)\n    :precondition (not (base-chosen ?w))\n    :effect (base-chosen ?w)\n  )\n\n  ;;    4:     /  \n(:action attach-twine\n    :parameters (?t - twine ?w - wreath)\n    :precondition (and (base-chosen ?w) (not (twine-attached ?t)) (not (twine-located ?t)))\n    :effect (and (twine-attached ?t) (twine-located ?t))\n  )\n\n  ;;    5:            \n(:action attach-pinwheel\n    :parameters (?pw - pinwheel ?w - wreath)\n    :precondition (and (made ?pw) (base-chosen ?w) (not (attached ?pw)))\n    :effect (attached ?pw)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: get-papyrus\n\nSteps:\n- polish_papyrus npc papyrus\n- flatten_sheet npc work_station sheet\n- replace_sheet npc work_station papyrus\n\nDescriptions:\n- Polish the papyrus. This step isn't absolutely necessary, but it will make the papyrus look nicer and more finished. Use a shell or smooth piece of ivory. Any type of shell that is smooth and without ridges will do. Rub the shell or ivory over the sheet of paper until it appears to be shinier than it was.\n- Flatten the sheet. The paper may not be completely flat after you remove it from the wooden boards. Put the paper under a stone slab for up to 6 days to make it completely flat.\n- Replace the wet linen sheets with dry ones. You should do this every few hours. Be careful when removing the wet linen. Peel it off of the papyrus gently. The drying process should take approximately 72 hours.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114394848_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Be a Spy With Friends.\n- form_spy_group co_conspirator1 co_conspirator1 co_conspirator1\n- set_location safehouse\n- identify_victim target_victim\n- gather_gear you camera\n- gather_gear you binoculars\n- gather_gear co_conspirator2 camera\n- gather_gear co_conspirator2 binoculars\n- gather_gear co_conspirator1 camera\n- gather_gear co_conspirator1 binoculars\n\nDescriptions:\n- Set-up your spy group You will need a trustworthy 2-5 person group.\n- It's good to have a place to keep your gear when not in use, hold meetings, and just talk in private without worrying about the nosiness of certain people in public places.\n- Get some gear To be a good spy, you and your friends must have gear that will help with missions.\n- Find your first \"victim\" The victim is the person you will be watching and spying on.\n\nPDDL Actions:\n(:action form_spy_group\n    :parameters (?p1 - person ?p2 - person ?p3 - person)\n    :precondition (and\n                    (not (group-formed))\n                    (member-of-group ?p1)\n                    (member-of-group ?p2)\n                    (member-of-group ?p3))\n    :effect (group-formed)\n  )\n\n  ;;   2：        \n(:action set_location\n    :parameters (?l - location)\n    :precondition (and\n                    (group-formed)\n                    (not (location-set ?l)))\n    :effect (location-set ?l)\n  )\n\n  ;;   3：    \n(:action gather_gear\n    :parameters (?p - person ?g - gear)\n    :precondition (and\n                    (group-formed)\n                    (location-set safehouse)\n                    (not (has-gear ?p ?g)))\n    :effect (has-gear ?p ?g)\n  )\n\n  ;;   4：       \n(:action identify_victim\n    :parameters (?v - victim)\n    :precondition (not (victim-identified ?v))\n    :effect (victim-identified ?v)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: hacking2_1\n\nSteps:\n- break_password npc malware creating_back_door next getting_superuser_privileges next knowing_target\n\nDescriptions:\n- Secure your machine first. To hack, you must need a system to practice your great hacking skills. However, make sure you have the authorization to attack your target. You can either attack your network, ask for written permission, or set up your laboratory with virtual machines. Attacking a system without permission, no matter its content is illegal and will get you in trouble.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Be a Spy With Friends.\n- form_spy_group co_conspirator1 co_conspirator1 co_conspirator1\n- set_location safehouse\n- identify_victim target_victim\n- gather_gear you camera\n- gather_gear you binoculars\n- gather_gear co_conspirator2 camera\n- gather_gear co_conspirator2 binoculars\n- gather_gear co_conspirator1 camera\n- gather_gear co_conspirator1 binoculars\n\nDescriptions:\n- Set-up your spy group You will need a trustworthy 2-5 person group.\n- It's good to have a place to keep your gear when not in use, hold meetings, and just talk in private without worrying about the nosiness of certain people in public places.\n- Get some gear To be a good spy, you and your friends must have gear that will help with missions.\n- Find your first \"victim\" The victim is the person you will be watching and spying on.\n\nPDDL Actions:\n(:action form_spy_group\n    :parameters (?p1 - person ?p2 - person ?p3 - person)\n    :precondition (and\n                    (not (group-formed))\n                    (member-of-group ?p1)\n                    (member-of-group ?p2)\n                    (member-of-group ?p3))\n    :effect (group-formed)\n  )\n\n  ;;   2：        \n(:action set_location\n    :parameters (?l - location)\n    :precondition (and\n                    (group-formed)\n                    (not (location-set ?l)))\n    :effect (location-set ?l)\n  )\n\n  ;;   3：    \n(:action gather_gear\n    :parameters (?p - person ?g - gear)\n    :precondition (and\n                    (group-formed)\n                    (location-set safehouse)\n                    (not (has-gear ?p ?g)))\n    :effect (has-gear ?p ?g)\n  )\n\n  ;;   4：       \n(:action identify_victim\n    :parameters (?v - victim)\n    :precondition (not (victim-identified ?v))\n    :effect (victim-identified ?v)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: hacking1_1\n\nSteps:\n- learn npc s_search\n- learn npc s_unix\n- learn npc malware creating_back_door\n- learn npc s_py\n- learn npc s_ethics\n\nDescriptions:\n- Learn how to use the internet and HTML. If you are going to hack, you'll need to know how to use the internet. Not just how to use a web browser, but also how to use advanced search engine techniques. You will also need to know how to create internet content using HTML. Learning HTML will also teach you some good mental habits that will help you with learning to program.\n- Get an open-sourced Unix-based system and learn to use it. There is a wide family of operating systems that are based on Unix, including Linux. The vast majority of web servers on the internet are Unix-based. So you'll need to learn Unix if you want to hack the internet.\n- Understand what hacking is. Broadly speaking, hacking refers to a variety of techniques that are used to compromise or gain access to a digital system. This can be a computer, mobile phone or tablet, or an entire network. Hacking involves a variety of specialized skills. Some are very technical. Others are more psychological. There are lots of different types of hackers that are motivated by a variety of different reasons.\n- Learn how to program. Learning a programming language might take time, so you need to be patient. Focus on learning to think like a programmer instead of learning individual languages. Focus on similar concepts in all programming languages.\n- Understand the ethics of hacking. Despite the ways hackers are depicted in popular culture, hacking is neither good nor bad. It can be used for either. Hackers are simply people who are skilled in technology who like to solve problems and overcome limitations. You can use your skills as a hacker to find solutions to problems, or you can use your skills to create problems and engage in illegal activity.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114406878_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Fairy House in the Woods.\n- collect_sticks stick3\n- bundle_sticks stick3\n- collect_sticks stick2\n- collect_sticks stick1\n- create_formation stick3\n- bundle_sticks stick2\n- bundle_sticks stick1\n- build_walls fairy_house1 stick3\n- find_area area1\n- use_bark stick3\n- create_formation stick2\n- use_bark stick2\n- create_formation stick1\n- use_bark stick1\n- decorate_fairy_house fairy_house1\n\nDescriptions:\n- Find a small area with slightly damp dirt.\n- Collect many twigs and sticks.\n- Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n- Build your exterior walls.\n- You can use either a leaf or a wide strip of bark.\n- Decorate.\n\nPDDL Actions:\n(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;;   2：    \n(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;;   3：    \n(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;;   4：    \n(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;;   5：    \n(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;;   6：      \n(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;;   7：     \n(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: boil_water\n\nSteps:\n- cluster_grass npc grass grass_tinder\n- get_water npc water\n- start_fire npc camp teepee_structure\n- break_branch npc bush branch_piece\n- build_shelter npc camp teepee_structure\n- cook npc camp teepee_structure campfire\n- burn_wood person wood\n- build_teepee npc camp teepee_structure\n\nDescriptions:\n- Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.\n- Search for a source of fresh water.\n- Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.\n- Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- Use dry sticks, branches, or tree bark to serve as your kindling.\n- Melt snow or ice if you can find some. If you find ice or snow on the ground in the woods, collect it so you can melt it down for fresh drinking water. You can place the ice or snow in a container and place it next to a fire to melt it or you can hold the container to use your body heat to melt it.\n- Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Fairy House in the Woods.\n- collect_sticks stick3\n- bundle_sticks stick3\n- collect_sticks stick2\n- collect_sticks stick1\n- create_formation stick3\n- bundle_sticks stick2\n- bundle_sticks stick1\n- build_walls fairy_house1 stick3\n- find_area area1\n- use_bark stick3\n- create_formation stick2\n- use_bark stick2\n- create_formation stick1\n- use_bark stick1\n- decorate_fairy_house fairy_house1\n\nDescriptions:\n- Find a small area with slightly damp dirt.\n- Collect many twigs and sticks.\n- Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n- Build your exterior walls.\n- You can use either a leaf or a wide strip of bark.\n- Decorate.\n\nPDDL Actions:\n(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;;   2：    \n(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;;   3：    \n(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;;   4：    \n(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;;   5：    \n(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;;   6：      \n(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;;   7：     \n(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: collect_fuel\n\nSteps:\n- start_fire npc camp teepee_structure\n- build_teepee npc camp teepee_structure\n\nDescriptions:\n- Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.\n- Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Fairy House in the Woods.\n- collect_sticks stick3\n- bundle_sticks stick3\n- collect_sticks stick2\n- collect_sticks stick1\n- create_formation stick3\n- bundle_sticks stick2\n- bundle_sticks stick1\n- build_walls fairy_house1 stick3\n- find_area area1\n- use_bark stick3\n- create_formation stick2\n- use_bark stick2\n- create_formation stick1\n- use_bark stick1\n- decorate_fairy_house fairy_house1\n\nDescriptions:\n- Find a small area with slightly damp dirt.\n- Collect many twigs and sticks.\n- Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n- Build your exterior walls.\n- You can use either a leaf or a wide strip of bark.\n- Decorate.\n\nPDDL Actions:\n(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;;   2：    \n(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;;   3：    \n(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;;   4：    \n(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;;   5：    \n(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;;   6：      \n(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;;   7：     \n(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: find_tinder\n\nSteps:\n- cluster_grass npc grass grass_tinder\n\nDescriptions:\n- Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Fairy House in the Woods.\n- collect_sticks stick3\n- bundle_sticks stick3\n- collect_sticks stick2\n- collect_sticks stick1\n- create_formation stick3\n- bundle_sticks stick2\n- bundle_sticks stick1\n- build_walls fairy_house1 stick3\n- find_area area1\n- use_bark stick3\n- create_formation stick2\n- use_bark stick2\n- create_formation stick1\n- use_bark stick1\n- decorate_fairy_house fairy_house1\n\nDescriptions:\n- Find a small area with slightly damp dirt.\n- Collect many twigs and sticks.\n- Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n- Build your exterior walls.\n- You can use either a leaf or a wide strip of bark.\n- Decorate.\n\nPDDL Actions:\n(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;;   2：    \n(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;;   3：    \n(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;;   4：    \n(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;;   5：    \n(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;;   6：      \n(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;;   7：     \n(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: start_fire\n\nSteps:\n- cluster_grass npc grass grass_tinder\n- start_fire npc camp teepee_structure\n- break_branch npc bush branch_piece\n- build_shelter npc camp teepee_structure\n- cook npc camp teepee_structure campfire\n- build_teepee npc camp teepee_structure\n\nDescriptions:\n- Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.\n- Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.\n- Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.\n- Find a branch 10 feet (3.0 m) long and 3–6 inches (7.6–15.2 cm) thick. To form your shelter you need a support beam, so look for a sturdy tree branch that isn't rotting. The straighter the branch, the better it will be for forming the structure of your shelter.\n- Use dry sticks, branches, or tree bark to serve as your kindling.\n- Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Fairy House in the Woods.\n- collect_sticks stick3\n- bundle_sticks stick3\n- collect_sticks stick2\n- collect_sticks stick1\n- create_formation stick3\n- bundle_sticks stick2\n- bundle_sticks stick1\n- build_walls fairy_house1 stick3\n- find_area area1\n- use_bark stick3\n- create_formation stick2\n- use_bark stick2\n- create_formation stick1\n- use_bark stick1\n- decorate_fairy_house fairy_house1\n\nDescriptions:\n- Find a small area with slightly damp dirt.\n- Collect many twigs and sticks.\n- Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n- Build your exterior walls.\n- You can use either a leaf or a wide strip of bark.\n- Decorate.\n\nPDDL Actions:\n(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;;   2：    \n(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;;   3：    \n(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;;   4：    \n(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;;   5：    \n(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;;   6：      \n(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;;   7：     \n(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: build_teepee\n\nSteps:\n- cluster_grass npc grass grass_tinder\n- start_fire npc camp teepee_structure\n- break_branch npc bush branch_piece\n- build_teepee npc camp teepee_structure\n\nDescriptions:\n- Build a snare if you have string or wire. A snare is a safe and relatively easy way to catch small game like rabbits and squirrels. Take a piece of wire or string about 2.5 feet (0.76 m) long, make a loop at one end and tie a slip knot. Then push the opposite end of the string or wire through the slip knot to form a large circle. Hang the circle of the snare over a footpath or a trail in the woods.\n- Find small, dry material to use as tinder. Look for dry grass, leaves, tree bark, pine needles, or any other small flammable materials you can find in the area. Tinder needs to be material that is easy to light and will produce a large flame so you can start your fire.\n- Avoid hunting large animals. If you're trying to survive in the woods, you need to be as healthy as you can be. While deer and wild pigs do have nutritious meat, they can injure you if you do not have the right gun to get the animals down humanely. Even if you can kill a deer or pig, you may not have the tools necessary to preserve the massive amount of meat that has come from the once-living animal. Small game and insects are much safer to hunt and gather and can provide you with adequate nutrition to survive in the woods.\n- Gather small twigs and branches to use for kindling. Kindling needs to be material that will catch easily when you light your tinder.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114905535_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Defeat a Thug on Dead Island.\n- acquire-knowledge you\n- equip-weapon you grenades\n- throw-weapon you grenades thug1\n\nDescriptions:\n- There is no chance in hell you will kill a Thug using just your bear hands and feet.\n- Incendiary Weapons - Grenades or Molotov Cocktails *WARNING* You may need to use a couple of these, so it is recommended that you only use one when a Thugs' health is below 50%.\n- Make sure your guns have enough ammo, and your knives are up to scratch.\n- Attack!\n\nPDDL Actions:\n(:action acquire-knowledge\n    :parameters (?p - person)\n    :precondition (not (knowledge_aware ?p))\n    :effect (knowledge_aware ?p)\n  )\n\n  ;;          \n(:action ensure-ammo\n    :parameters (?a - ammo)\n    :precondition (not (ammo_assured ?a))\n    :effect (ammo_assured ?a)\n  )\n\n  ;;        \n(:action equip-weapon\n    :parameters (?p - person ?w - weapon)\n    :precondition (knowledge_aware ?p)\n    :effect (weapon_location ?w on_person)\n  )\n\n  ;;            （    ，   ）\n(:action attack-with-weapon\n    :parameters (?p - person ?w - weapon ?a - ammo ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (ammo_assured ?a)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (not (ammo_assured ?a)) ;          \n            )\n  )\n\n  ;;              （    、   ）\n(:action throw-weapon\n    :parameters (?p - person ?w - weapon ?z - zombie)\n    :precondition (and\n                    (knowledge_aware ?p)\n                    (weapon_location ?w on_person)\n                    (not (zombie_attacked ?z))\n                   )\n    :effect (and\n              (zombie_attacked ?z)\n              (weapon_thrown ?w)\n              (weapon_location ?w thrown_at_enemy) ;          \n            )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: build_fire\n\nSteps:\n- create_shelter npc beach tinder\n- swim npc\n\nDescriptions:\n- Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:\n- You can also try a swim-float-swim technique, where you swim and then roll and float on your back.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Board a Small Boat.\n- board_via_platform passenger1 platform1 boat1 dock1\n- hold_rails passenger1 boat1\n- secure_legs passenger1 boat1\n- stabilize_boat passenger1 boat1\n\nDescriptions:\n- Prefer boarding across a solid platform if possible.\n- If you are crossing using a platform, hold on to the rails provided.\n- Avoid plonking one leg in the boat and leaving one on the jetty - this will cause wobbling and you might fall into the water.\n- Once in the boat, always remain in the centre line to move around it and lower yourself to a crouch level so that you reduce your centre of gravity and keep the craft as still as possible.\n- Keep the craft steady as others board.\n\nPDDL Actions:\n(:action board_via_platform\n    :parameters (?p - passenger ?pl - platform ?b - boat ?d - dock)\n    :precondition (and\n                    (platform-present ?pl)\n                    (at ?p ?pl)\n                    (at ?pl ?d)\n                    (at ?b ?d))\n    :effect (and\n              (at ?p ?b)\n              (not (at ?p ?pl))\n             )\n  )\n\n  ;;   2：    \n(:action hold_rails\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (holding-rail ?p)\n  )\n\n  ;;   3：       \n(:action secure_legs\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (legs-in-boat ?p)\n  )\n\n  ;;   4：    \n(:action stabilize_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and\n                    (legs-in-boat ?p)\n                    (holding-rail ?p)\n                    (at ?p ?b))\n    :effect (and\n              (centered ?b)\n              (crouched ?p)\n              (boat-stable ?b)\n             )\n  )\n\n  ;;   5：        \n(:action others_keep_boat_steady\n    :parameters (?op - passenger ?b - boat)\n    :precondition (boat-stable ?b)\n    :effect (at ?op ?b)\n  )\n\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: find_water\n\nSteps:\n- get_water npc river water\n\nDescriptions:\n- Scavenge anything you can. Before you head to shore, it can be a good idea to gather up any supplies or materials near you. There may be useful items floating on the waters surface that will help you survive and await rescue. Try to look for anything you can use before heading to shore.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Board a Small Boat.\n- board_via_platform passenger1 platform1 boat1 dock1\n- hold_rails passenger1 boat1\n- secure_legs passenger1 boat1\n- stabilize_boat passenger1 boat1\n\nDescriptions:\n- Prefer boarding across a solid platform if possible.\n- If you are crossing using a platform, hold on to the rails provided.\n- Avoid plonking one leg in the boat and leaving one on the jetty - this will cause wobbling and you might fall into the water.\n- Once in the boat, always remain in the centre line to move around it and lower yourself to a crouch level so that you reduce your centre of gravity and keep the craft as still as possible.\n- Keep the craft steady as others board.\n\nPDDL Actions:\n(:action board_via_platform\n    :parameters (?p - passenger ?pl - platform ?b - boat ?d - dock)\n    :precondition (and\n                    (platform-present ?pl)\n                    (at ?p ?pl)\n                    (at ?pl ?d)\n                    (at ?b ?d))\n    :effect (and\n              (at ?p ?b)\n              (not (at ?p ?pl))\n             )\n  )\n\n  ;;   2：    \n(:action hold_rails\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (holding-rail ?p)\n  )\n\n  ;;   3：       \n(:action secure_legs\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (legs-in-boat ?p)\n  )\n\n  ;;   4：    \n(:action stabilize_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and\n                    (legs-in-boat ?p)\n                    (holding-rail ?p)\n                    (at ?p ?b))\n    :effect (and\n              (centered ?b)\n              (crouched ?p)\n              (boat-stable ?b)\n             )\n  )\n\n  ;;   5：        \n(:action others_keep_boat_steady\n    :parameters (?op - passenger ?b - boat)\n    :precondition (boat-stable ?b)\n    :effect (at ?op ?b)\n  )\n\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: make_smoke_signal\n\nSteps:\n- wet_tinder npc tinder\n- putobjectinreceptacle agent1 pencil1\n- create_shelter npc beach tinder\n- swim npc\n\nDescriptions:\n- You can float in water by laying on your back and keeping your lungs full.\n- \n- Create a shelter. Shelters are vital when it comes to keeping you safe and out of the elements. Shelters can also give you a place to rest and recover while you consider your next moves. There are many different types of shelters you can build. The natural material found on the island will dictate what kind of shelter you can create. As an example, you may try to create a simple lean-to shelter, using these steps:\n- You can also try a swim-float-swim technique, where you swim and then roll and float on your back.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114971046_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Seasoned Salt.\n- mix-ingredients celery_salt\n- grind-ingredients celery_salt mortar_and_pestle\n- season-food celery_salt salads\n\nDescriptions:\n- Mix the ingredients together thoroughly.\n- Pour into an air-tight container with a lid.\n- It goes well in dips, salad dressings, soups and on sandwiches.\n- Grind the ingredients together in a mortar and pestle.\n- Transfer to a storage container as needed.\n\nPDDL Actions:\n(:action mix-ingredients\n    :parameters (?e - entity)\n    :precondition (and (stratified ?e) (separate ?e))\n    :effect (and (mixed ?e) (not (stratified ?e)) (not (separate ?e)))\n  )\n(:action pour-into-container\n    :parameters (?e - entity ?c - container)\n    :precondition (and (mixed ?e) (empty ?c))\n    :effect (and (inContainer ?e ?c) (full ?c) (onCounter ?c) (not (empty ?c)))\n  )\n(:action season-food\n    :parameters (?e - entity ?f - food)\n    :precondition (mixed ?e)\n    :effect (and (flavorful ?f) (not (plain ?f)))\n  )\n(:action grind-ingredients\n    :parameters (?e - entity ?t - tool)\n    :precondition (and (mixed ?e) (absent ?t))\n    :effect (and (present ?t))\n  )\n(:action transfer-to-storage\n    :parameters (?e - entity ?c - container)\n    :precondition (inContainer ?e ?c)\n    :effect (and (empty ?c))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: reinforce_basement\n\nSteps:\n- stay_in_shelter npc\n\nDescriptions:\n- Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food — you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Seasoned Salt.\n- mix-ingredients celery_salt\n- grind-ingredients celery_salt mortar_and_pestle\n- season-food celery_salt salads\n\nDescriptions:\n- Mix the ingredients together thoroughly.\n- Pour into an air-tight container with a lid.\n- It goes well in dips, salad dressings, soups and on sandwiches.\n- Grind the ingredients together in a mortar and pestle.\n- Transfer to a storage container as needed.\n\nPDDL Actions:\n(:action mix-ingredients\n    :parameters (?e - entity)\n    :precondition (and (stratified ?e) (separate ?e))\n    :effect (and (mixed ?e) (not (stratified ?e)) (not (separate ?e)))\n  )\n(:action pour-into-container\n    :parameters (?e - entity ?c - container)\n    :precondition (and (mixed ?e) (empty ?c))\n    :effect (and (inContainer ?e ?c) (full ?c) (onCounter ?c) (not (empty ?c)))\n  )\n(:action season-food\n    :parameters (?e - entity ?f - food)\n    :precondition (mixed ?e)\n    :effect (and (flavorful ?f) (not (plain ?f)))\n  )\n(:action grind-ingredients\n    :parameters (?e - entity ?t - tool)\n    :precondition (and (mixed ?e) (absent ?t))\n    :effect (and (present ?t))\n  )\n(:action transfer-to-storage\n    :parameters (?e - entity ?c - container)\n    :precondition (inContainer ?e ?c)\n    :effect (and (empty ?c))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: get_essential_items\n\nSteps:\n- get_food npc food\n- stay_in_shelter npc\n\nDescriptions:\n- Stock up on non-perishable food. Non-perishables can last several years, whether it's in storage or in sustaining you after an attack. Choose items that contain a lot of carbohydrates, so you get more caloric bang for your buck, and store them in a cool, dry place.\n- Make a plan. If a nuclear attack does happen, it won't be safe to venture outside for food — you should stay sheltered for at least 48 hours, preferably longer. Having food and medical supplies on-hand can put your mind at-ease, and allow you to focus on other aspects of survival.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114928286_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Recycle Underpants.\n- make_cleaning_rags underpants6\n- make_cleaning_rags underpants5\n- make_cleaning_rags underpants4\n- donate_underpants underpants6\n- child_wears_underpants underpants5\n- use_as_stuffing underpants4\n- make_craft_item underpants3 scissors1\n- make_garden_ties underpants2 scissors1 plant1\n- make_cleaning_rags underpants1\n\nDescriptions:\n- Turn the underpants into cleaning rags.\n- Use the underwear as garden ties.\n- Turn quality undies into craft items.\n- Use a bundle of old underwear as stuffing.\n- Children can wear old underwear on the outside of their pants to play superhero.\n- Donate the underpants.\n\nPDDL Actions:\n(:action make_cleaning_rags\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (not (is_old ?u))\n    )\n    :effect (and\n      (is_old ?u)\n      (used_as_cleaning_rags ?u)\n    )\n  )\n\n  ;;   2:           \n(:action make_garden_ties\n    :parameters (?u - underpants ?t - tool ?pl - plant)\n    :precondition (and\n      (at ?u drawer)\n      (available ?t)\n      (not (is_old ?u))\n    )\n    :effect (and\n      (is_old ?u)\n      (used_as_garden_ties ?u)\n      (tied ?pl)\n    )\n  )\n\n  ;;   3:          \n(:action make_craft_item\n    :parameters (?u - underpants ?t - tool)\n    :precondition (and\n      (at ?u drawer)\n      (available ?t)\n      (not (is_old ?u))\n    )\n    :effect (and\n      (is_old ?u)\n      (used_as_craft_item ?u)\n    )\n  )\n\n  ;;   4:         \n(:action use_as_stuffing\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (is_old ?u)\n    )\n    :effect (used_as_stuffing ?u)\n  )\n\n  ;;   5:             \n(:action child_wears_underpants\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (is_old ?u)\n    )\n    :effect (worn_by_child ?u)\n  )\n\n  ;;   6:     \n(:action donate_underpants\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (is_old ?u)\n    )\n    :effect (donated ?u)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: get-materials\n\nSteps:\n\nDescriptions:\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Seasoned Salt.\n- mix-ingredients celery_salt\n- grind-ingredients celery_salt mortar_and_pestle\n- season-food celery_salt salads\n\nDescriptions:\n- Mix the ingredients together thoroughly.\n- Pour into an air-tight container with a lid.\n- It goes well in dips, salad dressings, soups and on sandwiches.\n- Grind the ingredients together in a mortar and pestle.\n- Transfer to a storage container as needed.\n\nPDDL Actions:\n(:action mix-ingredients\n    :parameters (?e - entity)\n    :precondition (and (stratified ?e) (separate ?e))\n    :effect (and (mixed ?e) (not (stratified ?e)) (not (separate ?e)))\n  )\n(:action pour-into-container\n    :parameters (?e - entity ?c - container)\n    :precondition (and (mixed ?e) (empty ?c))\n    :effect (and (inContainer ?e ?c) (full ?c) (onCounter ?c) (not (empty ?c)))\n  )\n(:action season-food\n    :parameters (?e - entity ?f - food)\n    :precondition (mixed ?e)\n    :effect (and (flavorful ?f) (not (plain ?f)))\n  )\n(:action grind-ingredients\n    :parameters (?e - entity ?t - tool)\n    :precondition (and (mixed ?e) (absent ?t))\n    :effect (and (present ?t))\n  )\n(:action transfer-to-storage\n    :parameters (?e - entity ?c - container)\n    :precondition (inContainer ?e ?c)\n    :effect (and (empty ?c))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: throw-hotdogs\n\nSteps:\n- choose_food npc\n- lay_masking tape player1 masking_tape\n\nDescriptions:\n- Select a food item to throw. There are a couple of qualifications. First, it must be long, thin, hard, and straight, like a frozen hot dog, for example. Second, it must be a reasonably stiff item. Third, it should be somewhere between 15 and 20 cm (6-8 inches) long; the experiment can be performed otherwise, but read on, and you will see why this size is optimal. There are lots of other items that fit these criteria including Otter Pops, celery, and churros. (If you simply can't come to grips with throwing perfectly good food, see the Tips section for some additional ideas.)\n- Lay down masking tape in parallel strips across the floor as far apart as your projectile is long. The strips should be perpendicular to the direction you will be throwing. If your item is 15-45 cm (6-18 inches) long, lay down about 6-10 strips; lay down fewer if longer and more if shorter.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114926023_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Board a Small Boat.\n- board_via_platform passenger1 platform1 boat1 dock1\n- hold_rails passenger1 boat1\n- secure_legs passenger1 boat1\n- stabilize_boat passenger1 boat1\n\nDescriptions:\n- Prefer boarding across a solid platform if possible.\n- If you are crossing using a platform, hold on to the rails provided.\n- Avoid plonking one leg in the boat and leaving one on the jetty - this will cause wobbling and you might fall into the water.\n- Once in the boat, always remain in the centre line to move around it and lower yourself to a crouch level so that you reduce your centre of gravity and keep the craft as still as possible.\n- Keep the craft steady as others board.\n\nPDDL Actions:\n(:action board_via_platform\n    :parameters (?p - passenger ?pl - platform ?b - boat ?d - dock)\n    :precondition (and\n                    (platform-present ?pl)\n                    (at ?p ?pl)\n                    (at ?pl ?d)\n                    (at ?b ?d))\n    :effect (and\n              (at ?p ?b)\n              (not (at ?p ?pl))\n             )\n  )\n\n  ;;   2：    \n(:action hold_rails\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (holding-rail ?p)\n  )\n\n  ;;   3：       \n(:action secure_legs\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (legs-in-boat ?p)\n  )\n\n  ;;   4：    \n(:action stabilize_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and\n                    (legs-in-boat ?p)\n                    (holding-rail ?p)\n                    (at ?p ?b))\n    :effect (and\n              (centered ?b)\n              (crouched ?p)\n              (boat-stable ?b)\n             )\n  )\n\n  ;;   5：        \n(:action others_keep_boat_steady\n    :parameters (?op - passenger ?b - boat)\n    :precondition (boat-stable ?b)\n    :effect (at ?op ?b)\n  )\n\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: build_raft\n\nSteps:\n- create_raft npc beach raft_draft\n\nDescriptions:\n- Create a rescue signal. If you hope to be rescued, it's a good idea to leave rescuers with a signal. The signal you create will help search parties find your location and get you home more quickly than you would otherwise. You might try making some of these rescue signals to make you more visible:\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Fairy House in the Woods.\n- collect_sticks stick3\n- bundle_sticks stick3\n- collect_sticks stick2\n- collect_sticks stick1\n- create_formation stick3\n- bundle_sticks stick2\n- bundle_sticks stick1\n- build_walls fairy_house1 stick3\n- find_area area1\n- use_bark stick3\n- create_formation stick2\n- use_bark stick2\n- create_formation stick1\n- use_bark stick1\n- decorate_fairy_house fairy_house1\n\nDescriptions:\n- Find a small area with slightly damp dirt.\n- Collect many twigs and sticks.\n- Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n- Build your exterior walls.\n- You can use either a leaf or a wide strip of bark.\n- Decorate.\n\nPDDL Actions:\n(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;;   2：    \n(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;;   3：    \n(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;;   4：    \n(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;;   5：    \n(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;;   6：      \n(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;;   7：     \n(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: create_shelter\n\nSteps:\n- putobjectinreceptacle agent1 pencil1\n\nDescriptions:\n- \n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114934221_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Board a Small Boat.\n- board_via_platform passenger1 platform1 boat1 dock1\n- hold_rails passenger1 boat1\n- secure_legs passenger1 boat1\n- stabilize_boat passenger1 boat1\n\nDescriptions:\n- Prefer boarding across a solid platform if possible.\n- If you are crossing using a platform, hold on to the rails provided.\n- Avoid plonking one leg in the boat and leaving one on the jetty - this will cause wobbling and you might fall into the water.\n- Once in the boat, always remain in the centre line to move around it and lower yourself to a crouch level so that you reduce your centre of gravity and keep the craft as still as possible.\n- Keep the craft steady as others board.\n\nPDDL Actions:\n(:action board_via_platform\n    :parameters (?p - passenger ?pl - platform ?b - boat ?d - dock)\n    :precondition (and\n                    (platform-present ?pl)\n                    (at ?p ?pl)\n                    (at ?pl ?d)\n                    (at ?b ?d))\n    :effect (and\n              (at ?p ?b)\n              (not (at ?p ?pl))\n             )\n  )\n\n  ;;   2：    \n(:action hold_rails\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (holding-rail ?p)\n  )\n\n  ;;   3：       \n(:action secure_legs\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (legs-in-boat ?p)\n  )\n\n  ;;   4：    \n(:action stabilize_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and\n                    (legs-in-boat ?p)\n                    (holding-rail ?p)\n                    (at ?p ?b))\n    :effect (and\n              (centered ?b)\n              (crouched ?p)\n              (boat-stable ?b)\n             )\n  )\n\n  ;;   5：        \n(:action others_keep_boat_steady\n    :parameters (?op - passenger ?b - boat)\n    :precondition (boat-stable ?b)\n    :effect (at ?op ?b)\n  )\n\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: board_ship\n\nSteps:\n- defend npc deep_sea ship\n- attack_ship npc deep_sea ship\n\nDescriptions:\n- Sharks have several different attack methods. Sometimes they swim right up and charge, sometimes they circle for a while before lunging, and sometimes they sneak up from behind for a surprise attack. To be able to defend against the shark, you must know where it is, so make every effort to watch the animal, even as you are working out your escape.\n- Hit the shark in the face and gills.Your best bet, if attacked, is to make the shark see you as a strong, credible threat. Usually, a hard blow to the shark's gills, eyes or snout (end of its nose) will cause it to retreat.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Get a Headshot in Gears of War.\n- sniper_shot weapon1 player1\n- shotgun_shot player2\n- pistol_shot player3\n- boomshot_shot weapon2 player4\n\nDescriptions:\n- Sniper — Simply aim at the head and pull the trigger, unless you're the host, in which case you will need to aim in front of where they're going.\n- Shotgun — The aim on the shotgun is almost like a rectangle.\n- Pistol — I'm not sure because I haven't played in a while, but it's either six or seven shots to the head with the standard-issue pistol for a headshot.\n- BoomShot — BoomShot headshots are possible — don't let anyone tell you they're not but the chance of one happening is about a million to one.\n\nPDDL Actions:\n(:action sniper_shot\n    :parameters (?w - weapon ?a - agent)\n    :precondition (and\n                    (weapon_location ?w still)\n                    (not (knows_where_to_aim ?a))\n                   )\n    :effect (and\n             (weapon_location ?w focused)\n             (knows_where_to_aim ?a)\n            )\n  )\n\n  ;;          \n(:action shotgun_shot\n    :parameters (?a - agent)\n    :precondition (not (knows_shape_of_shotgun_aim ?a))\n    :effect (knows_shape_of_shotgun_aim ?a)\n  )\n\n  ;;         \n(:action pistol_shot\n    :parameters (?a - agent)\n    :precondition (not (knows_pistol_shots_needed ?a))\n    :effect (knows_pistol_shots_needed ?a)\n  )\n\n  ;;   BoomShot    \n(:action boomshot_shot\n    :parameters (?w - weapon ?a - agent)\n    :precondition (and\n                    (weapon_location ?w unfired)\n                    (not (knows_boomshot_odds ?a))\n                   )\n    :effect (and\n             (weapon_location ?w fired)\n             (knows_boomshot_odds ?a)\n            )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: ultimate_win\n\nSteps:\n- make_horizontal_bar npc spear_gun\n- attack_ship npc deep_sea ship\n- defend npc deep_sea ship\n- block_path npc shark spear spear\n- take_shot npc shark\n\nDescriptions:\n- If you have a spear gun or pole, use it! A sharp object is a good way to inflict enough pain to scare away the shark. Aim for the head, specifically the eyes or the gills.\n- Hit the shark in the face and gills.Your best bet, if attacked, is to make the shark see you as a strong, credible threat. Usually, a hard blow to the shark's gills, eyes or snout (end of its nose) will cause it to retreat.\n- Sharks have several different attack methods. Sometimes they swim right up and charge, sometimes they circle for a while before lunging, and sometimes they sneak up from behind for a surprise attack. To be able to defend against the shark, you must know where it is, so make every effort to watch the animal, even as you are working out your escape.\n- Do not block the shark's path. If you are standing between the shark and the open ocean, move away.\n- Do not take your eyes off the shark.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Get a Headshot in Gears of War.\n- sniper_shot weapon1 player1\n- shotgun_shot player2\n- pistol_shot player3\n- boomshot_shot weapon2 player4\n\nDescriptions:\n- Sniper — Simply aim at the head and pull the trigger, unless you're the host, in which case you will need to aim in front of where they're going.\n- Shotgun — The aim on the shotgun is almost like a rectangle.\n- Pistol — I'm not sure because I haven't played in a while, but it's either six or seven shots to the head with the standard-issue pistol for a headshot.\n- BoomShot — BoomShot headshots are possible — don't let anyone tell you they're not but the chance of one happening is about a million to one.\n\nPDDL Actions:\n(:action sniper_shot\n    :parameters (?w - weapon ?a - agent)\n    :precondition (and\n                    (weapon_location ?w still)\n                    (not (knows_where_to_aim ?a))\n                   )\n    :effect (and\n             (weapon_location ?w focused)\n             (knows_where_to_aim ?a)\n            )\n  )\n\n  ;;          \n(:action shotgun_shot\n    :parameters (?a - agent)\n    :precondition (not (knows_shape_of_shotgun_aim ?a))\n    :effect (knows_shape_of_shotgun_aim ?a)\n  )\n\n  ;;         \n(:action pistol_shot\n    :parameters (?a - agent)\n    :precondition (not (knows_pistol_shots_needed ?a))\n    :effect (knows_pistol_shots_needed ?a)\n  )\n\n  ;;   BoomShot    \n(:action boomshot_shot\n    :parameters (?w - weapon ?a - agent)\n    :precondition (and\n                    (weapon_location ?w unfired)\n                    (not (knows_boomshot_odds ?a))\n                   )\n    :effect (and\n             (weapon_location ?w fired)\n             (knows_boomshot_odds ?a)\n            )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: defend_position\n\nSteps:\n- take_shot npc shark\n- defend npc deep_sea ship\n\nDescriptions:\n- Do not take your eyes off the shark.\n- Sharks have several different attack methods. Sometimes they swim right up and charge, sometimes they circle for a while before lunging, and sometimes they sneak up from behind for a surprise attack. To be able to defend against the shark, you must know where it is, so make every effort to watch the animal, even as you are working out your escape.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/115033247_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Pinwheel Wreath.\n- select-paper p1\n- make-pinwheel pw1 p1\n- choose-wreath-base w1\n- attach-pinwheel pw1 w1\n- attach-twine t1 w1\n\nDescriptions:\n- Select suitable paper to make the pinwheels.\n- Make enough pinwheels to create a wreath.\n- Find a suitable base, such as a Styrofoam/cane/cardboard wreath base.\n- If the wreath base lacks a hanger, add some twine or ribbon to create one.\n- Finished.\n\nPDDL Actions:\n(:action select-paper\n    :parameters (?p - paper)\n    :precondition (and (not (selected ?p)) (not (knowledge ?p)))\n    :effect (and (selected ?p) (knowledge ?p))\n  )\n\n  ;;    2:       \n(:action make-pinwheel\n    :parameters (?pw - pinwheel ?p - paper)\n    :precondition (and (selected ?p) (has-shape ?p) (not (made ?pw)))\n    :effect (made ?pw)\n  )\n\n  ;;    3:       \n(:action choose-wreath-base\n    :parameters (?w - wreath)\n    :precondition (not (base-chosen ?w))\n    :effect (base-chosen ?w)\n  )\n\n  ;;    4:     /  \n(:action attach-twine\n    :parameters (?t - twine ?w - wreath)\n    :precondition (and (base-chosen ?w) (not (twine-attached ?t)) (not (twine-located ?t)))\n    :effect (and (twine-attached ?t) (twine-located ?t))\n  )\n\n  ;;    5:            \n(:action attach-pinwheel\n    :parameters (?pw - pinwheel ?w - wreath)\n    :precondition (and (made ?pw) (base-chosen ?w) (not (attached ?pw)))\n    :effect (attached ?pw)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: preparing_papyrus\n\nSteps:\n- peel npc papyrus_strips\n- buy_papyrus npc papyrus\n\nDescriptions:\n- Peel away the outer layer of the papyrus plant. Only the inner part of the plant is used for the paper. You will need to remove the outer green part of the plant. Use a sharp knife and slice down the length of the plant until the entire outer layer is removed. The inside of the plant should be a white or slightly greenish color.\n- Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114986868_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Clean Your Home Efficiently.\n- pickup_items item1 basket1\n- clean_surfaces tv cleaner1\n- clean_surfaces window1 cleaner1\n- clean_surfaces window2 cleaner1\n- pickup_items item2 basket1\n- shake_rugs rug1\n- shake_rugs rug2\n- empty_trash basket1 trash_bag1\n- empty_trash basket1 trash_bag2\n- dust_room living_room\n- dust_room kitchen\n- dust_room bathroom\n\nDescriptions:\n- ######Pick up and put away stray items and throw trash into waste baskets.\n- ######Dust, again going through the entire house room by room.\n- ######Take a large trash bag and go through each room emptying the waste baskets and trash cans.\n- ######Use a spray cleaner and rags or paper towels to clean any glass surfaces, including the TV screens.\n- First pick up any throw rugs and inside door mats and shake them outside.\n- ######Enjoy your clean home!\n\nPDDL Actions:\n(:action pickup_items\n    :parameters (?item - item ?basket - basket)\n    :precondition (and\n                    (stray_item ?item)\n                    (empty ?basket))\n    :effect (and\n              (in_basket ?item ?basket)\n              (organized ?item)\n              (full ?basket))\n  )\n\n  ;;   2：       \n(:action dust_room\n    :parameters (?room - room)\n    :precondition (dusty ?room)\n    :effect (and\n              (cleaned_room ?room)\n              (not (dusty ?room)))\n  )\n\n  ;;   3：         \n(:action empty_trash\n    :parameters (?basket - basket ?dish - dish)\n    :precondition (full ?basket)\n    :effect (and\n              (empty ?basket)\n              (trash_disposed ?dish))\n  )\n\n  ;;   4：           \n(:action clean_surfaces\n    :parameters (?surface - surface ?cleaner - cleaner)\n    :precondition (dirty_surface ?surface)\n    :effect (cleaned_surface ?surface)\n  )\n\n  ;;   5：          \n(:action shake_rugs\n    :parameters (?rug - rug)\n    :precondition (dirty_rug ?rug)\n    :effect (cleaned_rug ?rug)\n  )\n\n  ;;   6：      \n(:action enjoy_clean_home\n    :parameters ()\n    :precondition ()\n    :effect ()\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: drink_water\n\nSteps:\n- make_drill npc wood drill\n- collect_rain_water npc rainforest\n- make_drill npc wood drill\n- create_fire npc jungle\n\nDescriptions:\n- The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.\n- If you don’t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.\n- Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container.\n- Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Fairy House in the Woods.\n- collect_sticks stick3\n- bundle_sticks stick3\n- collect_sticks stick2\n- collect_sticks stick1\n- create_formation stick3\n- bundle_sticks stick2\n- bundle_sticks stick1\n- build_walls fairy_house1 stick3\n- find_area area1\n- use_bark stick3\n- create_formation stick2\n- use_bark stick2\n- create_formation stick1\n- use_bark stick1\n- decorate_fairy_house fairy_house1\n\nDescriptions:\n- Find a small area with slightly damp dirt.\n- Collect many twigs and sticks.\n- Using the sticks, create either a square formation, circle formation, or a Teepee formation.\n- Build your exterior walls.\n- You can use either a leaf or a wide strip of bark.\n- Decorate.\n\nPDDL Actions:\n(:action find_area\n    :parameters (?a - area)\n    :precondition (not (selected_area ?a))\n    :effect (selected_area ?a)\n  )\n\n  ;;   2：    \n(:action collect_sticks\n    :parameters (?s - stick)\n    :precondition (not (collected ?s))\n    :effect (collected ?s)\n  )\n\n  ;;   3：    \n(:action bundle_sticks\n    :parameters (?s - stick)\n    :precondition (collected ?s)\n    :effect (bundled ?s)\n  )\n\n  ;;   4：    \n(:action create_formation\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (in_formation ?s)\n  )\n\n  ;;   5：    \n(:action build_walls\n    :parameters (?f - fairy_house ?s - stick)\n    :precondition (and\n                    (in_formation ?s)\n                    (not (built_walls ?f))\n                  )\n    :effect (built_walls ?f)\n  )\n\n  ;;   6：      \n(:action use_bark\n    :parameters (?s - stick)\n    :precondition (bundled ?s)\n    :effect (tied_with_bark ?s)\n  )\n\n  ;;   7：     \n(:action decorate_fairy_house\n    :parameters (?f - fairy_house)\n    :precondition (built_walls ?f)\n    :effect (decorated ?f)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: safe_in_cave\n\nSteps:\n- build_shelter npc camp stick1\n- collect_rain_water npc rainforest\n- get_lost npc footpath\n- create_fire npc jungle\n- make_spear npc spear wood\n- make_drill npc wood drill\n- cover_shelter npc camp shelter\n\nDescriptions:\n- Place shorter sticks and branches against the sides of the center pole. Line the length of the middle stick with branches going outward towards the ground at a 45-degree angle. The more sticks you can find to place along the sides, the easier it will be to cover your shelter.\n- If you don’t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.\n- Think about where you came from if you got lost on foot. Orient yourself using any landmarks you remember, such as a hill in the distance or a river. Get back to a point you remember to find the trail again or head back in the direction of a village that you came from.\n- Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.\n- Make a 4-pronged bamboo spear to fish with. Find a 6-ft (1.8 m) stalk of bamboo and cut 4- 6 in (15.24 cm) slits into 1 end of it with a knife or sharp rock. Weave a piece of vine into the slits to separate the tip of the bamboo into 4 prongs and sharpen them with a knife or a sharp rock.\n- The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.\n- Cover the sides with leaves and foliage to cover the lean-to shelter. Find large leaves and lay them over top of the frame you built. Cover the shelter as well as you can to protect you from the elements and keep animals out.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Pipe Cleaner Bird.\n- bend_to_form_legs pc1\n- enlarge_torso torso\n- move_for_beak tip\n- shape_to_form_body pc2\n\nDescriptions:\n- Bend one pipe cleaner in half to form the legs.\n- Shape another pipe cleaner to form the body.\n- Move 1.5 inches (3.8 cm) from the tip of where the beak should be.\n- Use 2 pipe cleaners to enlarge the torso.\n\nPDDL Actions:\n(:action bend_to_form_legs\n    :parameters (?p - pipe_cleaner)\n    :precondition (and (position ?p straight) (location ?p completely_on_ground))\n    :effect (and (position ?p bent) (location ?p partially_in_air))\n  )\n(:action shape_to_form_body\n    :parameters (?p - pipe_cleaner)\n    :precondition (and (position ?p straight) (location ?p on_ground))\n    :effect (and (position ?p bent) (location ?p on_pipe_cleaner))\n  )\n(:action move_for_beak\n    :parameters (?t - tip_of_pipe_cleaner)\n    :precondition (and (shape ?t straight) (location ?t closer_to_tip))\n    :effect (and (shape ?t shaped_to_form_beak) (location ?t now_away_from_tip))\n  )\n(:action enlarge_torso\n    :parameters (?t - torso)\n    :precondition (and (width ?t thinner) (weight ?t lighter))\n    :effect (and (width ?t now_wider) (weight ?t heavier))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: eat_fish\n\nSteps:\n- collect_rain_water npc rainforest\n- create_fire npc jungle\n- make_spear npc spear wood\n- make_drill npc wood drill\n- catch_fish npc spear riverside\n\nDescriptions:\n- If you don’t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.\n- Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.\n- Make a 4-pronged bamboo spear to fish with. Find a 6-ft (1.8 m) stalk of bamboo and cut 4- 6 in (15.24 cm) slits into 1 end of it with a knife or sharp rock. Weave a piece of vine into the slits to separate the tip of the bamboo into 4 prongs and sharpen them with a knife or a sharp rock.\n- The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.\n- Build simple hole-in-the-ground traps to catch animals. Dig a hole in the ground and cover it with something like a large leaf. Put a piece of fruit in the middle as bait. When an animal comes to take the fruit, they will fall in the hole and you can kill it, skin it, and cook it to eat it.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Clean Your Home Efficiently.\n- pickup_items item1 basket1\n- clean_surfaces tv cleaner1\n- clean_surfaces window1 cleaner1\n- clean_surfaces window2 cleaner1\n- pickup_items item2 basket1\n- shake_rugs rug1\n- shake_rugs rug2\n- empty_trash basket1 trash_bag1\n- empty_trash basket1 trash_bag2\n- dust_room living_room\n- dust_room kitchen\n- dust_room bathroom\n\nDescriptions:\n- ######Pick up and put away stray items and throw trash into waste baskets.\n- ######Dust, again going through the entire house room by room.\n- ######Take a large trash bag and go through each room emptying the waste baskets and trash cans.\n- ######Use a spray cleaner and rags or paper towels to clean any glass surfaces, including the TV screens.\n- First pick up any throw rugs and inside door mats and shake them outside.\n- ######Enjoy your clean home!\n\nPDDL Actions:\n(:action pickup_items\n    :parameters (?item - item ?basket - basket)\n    :precondition (and\n                    (stray_item ?item)\n                    (empty ?basket))\n    :effect (and\n              (in_basket ?item ?basket)\n              (organized ?item)\n              (full ?basket))\n  )\n\n  ;;   2：       \n(:action dust_room\n    :parameters (?room - room)\n    :precondition (dusty ?room)\n    :effect (and\n              (cleaned_room ?room)\n              (not (dusty ?room)))\n  )\n\n  ;;   3：         \n(:action empty_trash\n    :parameters (?basket - basket ?dish - dish)\n    :precondition (full ?basket)\n    :effect (and\n              (empty ?basket)\n              (trash_disposed ?dish))\n  )\n\n  ;;   4：           \n(:action clean_surfaces\n    :parameters (?surface - surface ?cleaner - cleaner)\n    :precondition (dirty_surface ?surface)\n    :effect (cleaned_surface ?surface)\n  )\n\n  ;;   5：          \n(:action shake_rugs\n    :parameters (?rug - rug)\n    :precondition (dirty_rug ?rug)\n    :effect (cleaned_rug ?rug)\n  )\n\n  ;;   6：      \n(:action enjoy_clean_home\n    :parameters ()\n    :precondition ()\n    :effect ()\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: make_fire\n\nSteps:\n- make_drill npc wood drill\n- collect_rain_water npc rainforest\n- create_fire npc jungle\n\nDescriptions:\n- The plastic sheet will accumulate condensation that will drip down the underside of the sheet and into the container. This water is distilled and safe to drink.\n- If you don’t have a water bottle or other container to collect water, try to find other natural containers in the jungle such as a coconut shell or piece of wood shaped like a bowl. You can also leave these items out when it rains to collect the fresh water.\n- Boil water from streams to kill any bacteria. Look for running streams to find fresh water. Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/115237120_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Clean Your Home Efficiently.\n- pickup_items item1 basket1\n- clean_surfaces tv cleaner1\n- clean_surfaces window1 cleaner1\n- clean_surfaces window2 cleaner1\n- pickup_items item2 basket1\n- shake_rugs rug1\n- shake_rugs rug2\n- empty_trash basket1 trash_bag1\n- empty_trash basket1 trash_bag2\n- dust_room living_room\n- dust_room kitchen\n- dust_room bathroom\n\nDescriptions:\n- ######Pick up and put away stray items and throw trash into waste baskets.\n- ######Dust, again going through the entire house room by room.\n- ######Take a large trash bag and go through each room emptying the waste baskets and trash cans.\n- ######Use a spray cleaner and rags or paper towels to clean any glass surfaces, including the TV screens.\n- First pick up any throw rugs and inside door mats and shake them outside.\n- ######Enjoy your clean home!\n\nPDDL Actions:\n(:action pickup_items\n    :parameters (?item - item ?basket - basket)\n    :precondition (and\n                    (stray_item ?item)\n                    (empty ?basket))\n    :effect (and\n              (in_basket ?item ?basket)\n              (organized ?item)\n              (full ?basket))\n  )\n\n  ;;   2：       \n(:action dust_room\n    :parameters (?room - room)\n    :precondition (dusty ?room)\n    :effect (and\n              (cleaned_room ?room)\n              (not (dusty ?room)))\n  )\n\n  ;;   3：         \n(:action empty_trash\n    :parameters (?basket - basket ?dish - dish)\n    :precondition (full ?basket)\n    :effect (and\n              (empty ?basket)\n              (trash_disposed ?dish))\n  )\n\n  ;;   4：           \n(:action clean_surfaces\n    :parameters (?surface - surface ?cleaner - cleaner)\n    :precondition (dirty_surface ?surface)\n    :effect (cleaned_surface ?surface)\n  )\n\n  ;;   5：          \n(:action shake_rugs\n    :parameters (?rug - rug)\n    :precondition (dirty_rug ?rug)\n    :effect (cleaned_rug ?rug)\n  )\n\n  ;;   6：      \n(:action enjoy_clean_home\n    :parameters ()\n    :precondition ()\n    :effect ()\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: find-shelter\n\nSteps:\n- get_shelter npc brickhouse basement\n\nDescriptions:\n- Find a strong, brick building with a basement for shelter. These buildings types can withstand the most damage and remain standing. Look especially for a building with a basement. This provides added protection and a hiding place if you have to stay out of sight. Search your area for suitable buildings like these and move into one as soon as possible.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Remove Paint from Windows.\n- mix_soap_and_water bucket01 soap_bottle01\n- wet_window window01 bucket01 sponge01\n- open_razor_blade_package razor_blade_package01 razor_blade01\n- scrape_paint window01 razor_blade01\n- buff_window window01 cloth01\n- remove_splatters_with_solvent window01 solvent01\n- spritz_glass_cleaner window01 glass_cleaner_bottle01\n\nDescriptions:\n- You will need a bucket of hot water mixed with dish soap, a clean cloth or sponge, a new safety razor blade and some glass cleaner.\n- Wet the window with the water and dish soap.\n- Position the razor blade.\n- Using slow, smooth motions, start scraping the paint from the window.\n- Once all of the paint has been scraped away, spritz the window with some glass cleaner and use a clean, dry cloth to buff the windows clean.\n- Remove small paint splatters with chemical solvents.\n\nPDDL Actions:\n(:action gather_items\n    :parameters (?items - item)\n    :precondition (not (in_hand ?items))\n    :effect (in_hand ?items)\n  )\n\n  ;;; Action 2: Mix Soap and Water in Bucket\n(:action mix_soap_and_water\n    :parameters (?b - bucket ?sb - soap_bottle)\n    :precondition (and\n      (empty ?b)\n      (full ?sb)\n    )\n    :effect (and\n      (mixed ?b)\n      (not (empty ?b))\n      (not (full ?sb))\n    )\n  )\n\n  ;;; Action 3: Wet the Window with Soap Solution\n(:action wet_window\n    :parameters (?w - window ?b - bucket ?s - sponge)\n    :precondition (and\n      (dry ?w)\n      (mixed ?b)\n      (clean_tool ?s)\n    )\n    :effect (and\n      (wet ?w)\n      (not (dry ?w))\n      (dirty_tool ?s)\n    )\n  )\n\n  ;;; Action 4: Open Razor Blade Package\n(:action open_razor_blade_package\n    :parameters (?rp - razor_blade_package ?rb - razor_blade)\n    :precondition (and\n      (closed ?rp)\n      (not (in_hand ?rb))\n    )\n    :effect (and\n      (open ?rp)\n      (in_hand ?rb)\n      (not (closed ?rp))\n    )\n  )\n\n  ;;; Action 5: Scrape Paint from Window\n(:action scrape_paint\n    :parameters (?w - window ?rb - razor_blade)\n    :precondition (and\n      (wet ?w)\n      (in_hand ?rb)\n      (contains_paint ?w)\n    )\n    :effect (and\n      (not (contains_paint ?w))\n      (dirty_tool ?rb)\n      (clean ?w)\n    )\n  )\n\n  ;;; Action 6: Spritz Window with Glass Cleaner\n(:action spritz_glass_cleaner\n    :parameters (?w - window ?gcb - glass_cleaner_bottle)\n    :precondition (and\n      (not (contains_paint ?w))\n      (has_glass_cleaner ?gcb)\n      (not (opaque ?w))\n    )\n    :effect (and\n      (opaque ?w)\n      (not (has_glass_cleaner ?gcb))\n    )\n  )\n\n  ;;; Action 7: Buff Window with Cloth\n(:action buff_window\n    :parameters (?w - window ?c - cloth)\n    :precondition (and\n      (opaque ?w)\n      (clean_cloth ?c)\n    )\n    :effect (and\n      (transparent ?w)\n      (dirty_cloth ?c)\n      (not (opaque ?w))\n    )\n  )\n\n  ;;; Action 8: Remove Small Paint Splatters with Solvent\n(:action remove_splatters_with_solvent\n    :parameters (?w - window ?s - solvent)\n    :precondition (and\n      (contains_splatters ?w)\n      (has_solvent ?s)\n    )\n    :effect (and\n      (not (contains_splatters ?w))\n      (not (has_solvent ?s))\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: fill-inventory\n\nSteps:\n- drink_water npc\n- learn_first_aid npc\n\nDescriptions:\n- Purify any water you drink that isn’t from a sealed bottle. A waterborne illness can be life-threatening in a survival situation. If need to use any unbottled water for drinking, always purify it first. The most common method is boiling the water for 1 minute to kill any pathogens. Then filter out larger objects by pouring the water through a fine net or cloth.\n- Learn basic first-aid to treat minor injuries. Injuries are unfortunately inevitable, and they can range from minor to serious. Develop at least a basic knowledge of first aid to treat the injuries you or a partner may encounter. When searching for supplies, take any first aid gear you may find and build a basic first aid kit.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/115230790_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Board a Small Boat.\n- board_via_platform passenger1 platform1 boat1 dock1\n- hold_rails passenger1 boat1\n- secure_legs passenger1 boat1\n- stabilize_boat passenger1 boat1\n\nDescriptions:\n- Prefer boarding across a solid platform if possible.\n- If you are crossing using a platform, hold on to the rails provided.\n- Avoid plonking one leg in the boat and leaving one on the jetty - this will cause wobbling and you might fall into the water.\n- Once in the boat, always remain in the centre line to move around it and lower yourself to a crouch level so that you reduce your centre of gravity and keep the craft as still as possible.\n- Keep the craft steady as others board.\n\nPDDL Actions:\n(:action board_via_platform\n    :parameters (?p - passenger ?pl - platform ?b - boat ?d - dock)\n    :precondition (and\n                    (platform-present ?pl)\n                    (at ?p ?pl)\n                    (at ?pl ?d)\n                    (at ?b ?d))\n    :effect (and\n              (at ?p ?b)\n              (not (at ?p ?pl))\n             )\n  )\n\n  ;;   2：    \n(:action hold_rails\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (holding-rail ?p)\n  )\n\n  ;;   3：       \n(:action secure_legs\n    :parameters (?p - passenger ?b - boat)\n    :precondition (at ?p ?b)\n    :effect (legs-in-boat ?p)\n  )\n\n  ;;   4：    \n(:action stabilize_boat\n    :parameters (?p - passenger ?b - boat)\n    :precondition (and\n                    (legs-in-boat ?p)\n                    (holding-rail ?p)\n                    (at ?p ?b))\n    :effect (and\n              (centered ?b)\n              (crouched ?p)\n              (boat-stable ?b)\n             )\n  )\n\n  ;;   5：        \n(:action others_keep_boat_steady\n    :parameters (?op - passenger ?b - boat)\n    :precondition (boat-stable ?b)\n    :effect (at ?op ?b)\n  )\n\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: listen_to_astronomers_predictions_and_move\n\nSteps:\n- move_away npc philly salt_lake bunker2\n- listen_to_astronomers npc home\n\nDescriptions:\n- Move away from coastal areas. Because the earth is made up of 71% water, there’s a greater likelihood that the comet will hit a body of water. If this does happen, it could mean that giant tsunamis would be created by the initial impact and they would likely destroy our coastal cities. Additionally, there would be an increase in water vapor entering our atmosphere which would cause heavy rain, which could cause landslides and flooding.\n- Pay attention to astronomers’ predictions on any possible collisions with earth. NASA currently has astronomers that track comets that are flying in our solar system. As a result, there’s a very good chance they will know if there is a large object about to collide with us. By listening to their predictions, you can develop a real sense of how much time you have to prepare.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Clean Your Home Efficiently.\n- pickup_items item1 basket1\n- clean_surfaces tv cleaner1\n- clean_surfaces window1 cleaner1\n- clean_surfaces window2 cleaner1\n- pickup_items item2 basket1\n- shake_rugs rug1\n- shake_rugs rug2\n- empty_trash basket1 trash_bag1\n- empty_trash basket1 trash_bag2\n- dust_room living_room\n- dust_room kitchen\n- dust_room bathroom\n\nDescriptions:\n- ######Pick up and put away stray items and throw trash into waste baskets.\n- ######Dust, again going through the entire house room by room.\n- ######Take a large trash bag and go through each room emptying the waste baskets and trash cans.\n- ######Use a spray cleaner and rags or paper towels to clean any glass surfaces, including the TV screens.\n- First pick up any throw rugs and inside door mats and shake them outside.\n- ######Enjoy your clean home!\n\nPDDL Actions:\n(:action pickup_items\n    :parameters (?item - item ?basket - basket)\n    :precondition (and\n                    (stray_item ?item)\n                    (empty ?basket))\n    :effect (and\n              (in_basket ?item ?basket)\n              (organized ?item)\n              (full ?basket))\n  )\n\n  ;;   2：       \n(:action dust_room\n    :parameters (?room - room)\n    :precondition (dusty ?room)\n    :effect (and\n              (cleaned_room ?room)\n              (not (dusty ?room)))\n  )\n\n  ;;   3：         \n(:action empty_trash\n    :parameters (?basket - basket ?dish - dish)\n    :precondition (full ?basket)\n    :effect (and\n              (empty ?basket)\n              (trash_disposed ?dish))\n  )\n\n  ;;   4：           \n(:action clean_surfaces\n    :parameters (?surface - surface ?cleaner - cleaner)\n    :precondition (dirty_surface ?surface)\n    :effect (cleaned_surface ?surface)\n  )\n\n  ;;   5：          \n(:action shake_rugs\n    :parameters (?rug - rug)\n    :precondition (dirty_rug ?rug)\n    :effect (cleaned_rug ?rug)\n  )\n\n  ;;   6：      \n(:action enjoy_clean_home\n    :parameters ()\n    :precondition ()\n    :effect ()\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: final\n\nSteps:\n- check_supplies food npc\n- wait it out until you hear unified reports\n- outfit_bunker_with_energy_source bunker2 npc heat\n- stay_in_isolation bunker2 npc\n- buy_weapons npc weapon\n- buy_supplies food npc market\n- listen_to_astronomers npc home\n- check_bunker bunker2 npc\n- move_away npc philly salt_lake bunker2\n- check_weapons pistol ammunition\n\nDescriptions:\n- Make sure to stock your hide-out with canned food, dried goods, non-perishable foods, and bottled water.\n- Don’t believe everything you hear. Early reporting is notoriously inaccurate at times, so wait it out until you hear unified reports.\n- Move into a bunker or fortified structure and outfit it with an energy source. An underground bunker isn’t only the best for the time of impact; it will also protect you from environmental hazards after the comet has hit. When the comet hits, dust, soot, and water will shoot up into our atmosphere, making it cold for months to years.\n- Isolation has multiple negative effects on your mental health, so having people with you is a good idea if you want to stay mentally healthy.\n- Buy weapons and ammunition for after the impact. You may be more concerned with withstanding the destruction of the comet impact itself, but you also need to be conscious of the possible dangers of other people after the dust settles.\n- Purchase enough food, water, medicine, and other supplies. If the comet does hit on land, dust and rock particles flying into our atmosphere will make it too dangerous to go outside for months to years.\n- Pay attention to astronomers’ predictions on any possible collisions with earth. NASA currently has astronomers that track comets that are flying in our solar system. As a result, there’s a very good chance they will know if there is a large object about to collide with us. By listening to their predictions, you can develop a real sense of how much time you have to prepare.\n- Limit your generator usage and only use it if necessary. Your generator will be a lifesaver for many things while you are in your bunker. You can use it to produce heat, cook food, and power lights. However, because most generators run on fuel, it’s important that you limit its usage because you will likely have a limited amount of fuel in your bunker. If you aren't in a bunker, a generator may still work, but there's a good chance that the main power grid will be down.\n- Move away from coastal areas. Because the earth is made up of 71% water, there’s a greater likelihood that the comet will hit a body of water. If this does happen, it could mean that giant tsunamis would be created by the initial impact and they would likely destroy our coastal cities. Additionally, there would be an increase in water vapor entering our atmosphere which would cause heavy rain, which could cause landslides and flooding.\n- A semi-automatic rifle and a pistol with enough ammunition should be more than enough firepower.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/114540181_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Clean Your Home Efficiently.\n- pickup_items item1 basket1\n- clean_surfaces tv cleaner1\n- clean_surfaces window1 cleaner1\n- clean_surfaces window2 cleaner1\n- pickup_items item2 basket1\n- shake_rugs rug1\n- shake_rugs rug2\n- empty_trash basket1 trash_bag1\n- empty_trash basket1 trash_bag2\n- dust_room living_room\n- dust_room kitchen\n- dust_room bathroom\n\nDescriptions:\n- ######Pick up and put away stray items and throw trash into waste baskets.\n- ######Dust, again going through the entire house room by room.\n- ######Take a large trash bag and go through each room emptying the waste baskets and trash cans.\n- ######Use a spray cleaner and rags or paper towels to clean any glass surfaces, including the TV screens.\n- First pick up any throw rugs and inside door mats and shake them outside.\n- ######Enjoy your clean home!\n\nPDDL Actions:\n(:action pickup_items\n    :parameters (?item - item ?basket - basket)\n    :precondition (and\n                    (stray_item ?item)\n                    (empty ?basket))\n    :effect (and\n              (in_basket ?item ?basket)\n              (organized ?item)\n              (full ?basket))\n  )\n\n  ;;   2：       \n(:action dust_room\n    :parameters (?room - room)\n    :precondition (dusty ?room)\n    :effect (and\n              (cleaned_room ?room)\n              (not (dusty ?room)))\n  )\n\n  ;;   3：         \n(:action empty_trash\n    :parameters (?basket - basket ?dish - dish)\n    :precondition (full ?basket)\n    :effect (and\n              (empty ?basket)\n              (trash_disposed ?dish))\n  )\n\n  ;;   4：           \n(:action clean_surfaces\n    :parameters (?surface - surface ?cleaner - cleaner)\n    :precondition (dirty_surface ?surface)\n    :effect (cleaned_surface ?surface)\n  )\n\n  ;;   5：          \n(:action shake_rugs\n    :parameters (?rug - rug)\n    :precondition (dirty_rug ?rug)\n    :effect (cleaned_rug ?rug)\n  )\n\n  ;;   6：      \n(:action enjoy_clean_home\n    :parameters ()\n    :precondition ()\n    :effect ()\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: hunger\n\nSteps:\n- get_fruit npc jungle\n- make_drill npc wood drill\n\nDescriptions:\n- Look for fruits and plants that you recognize and are safe to eat. Jungles are full of tropical fruits and edible plants if you know what to look for. Don’t try eating any plants that you don’t recognize because they could be poisonous.\n- Make a solar water still with a container and a plastic sheet. Dig a hole in an area that receives at least some direct sunlight and put a container, such as a water bottle or can, in the middle of the hole. Fill the space between the sides of the hole and the container with wet leaves. Place a plastic sheet over the top of the hole and put rocks or other heavy objects around the edges to hold it in place. Put a small stone in the middle of the sheet above the container.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Pipe Cleaner Bird.\n- bend_to_form_legs pc1\n- enlarge_torso torso\n- move_for_beak tip\n- shape_to_form_body pc2\n\nDescriptions:\n- Bend one pipe cleaner in half to form the legs.\n- Shape another pipe cleaner to form the body.\n- Move 1.5 inches (3.8 cm) from the tip of where the beak should be.\n- Use 2 pipe cleaners to enlarge the torso.\n\nPDDL Actions:\n(:action bend_to_form_legs\n    :parameters (?p - pipe_cleaner)\n    :precondition (and (position ?p straight) (location ?p completely_on_ground))\n    :effect (and (position ?p bent) (location ?p partially_in_air))\n  )\n(:action shape_to_form_body\n    :parameters (?p - pipe_cleaner)\n    :precondition (and (position ?p straight) (location ?p on_ground))\n    :effect (and (position ?p bent) (location ?p on_pipe_cleaner))\n  )\n(:action move_for_beak\n    :parameters (?t - tip_of_pipe_cleaner)\n    :precondition (and (shape ?t straight) (location ?t closer_to_tip))\n    :effect (and (shape ?t shaped_to_form_beak) (location ?t now_away_from_tip))\n  )\n(:action enlarge_torso\n    :parameters (?t - torso)\n    :precondition (and (width ?t thinner) (weight ?t lighter))\n    :effect (and (width ?t now_wider) (weight ?t heavier))\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: dehydration\n\nSteps:\n- drink_water npc\n- collect_rain_water npc\n- create_fire npc jungle\n\nDescriptions:\n- Filter out any particles through a sock, shirt, or other fabric, then start a fire and boil the water to kill bacteria that can make you sick.\n- Collect rainfall from leaves and bamboo stalks. Look for large leaves that collect rainfall and bend them into a funnel to pour the water into a bottle or straight into your mouth. Bend bamboo stalks to let the water that collects in the compartments flow out into a container or break the bamboo compartment off at the line that goes across the stalk to use it as a water bottle.\n- Boil water from streams to kill any bacteria. Look for running streams to find fresh water.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/115168608_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Recycle Underpants.\n- make_cleaning_rags underpants6\n- make_cleaning_rags underpants5\n- make_cleaning_rags underpants4\n- donate_underpants underpants6\n- child_wears_underpants underpants5\n- use_as_stuffing underpants4\n- make_craft_item underpants3 scissors1\n- make_garden_ties underpants2 scissors1 plant1\n- make_cleaning_rags underpants1\n\nDescriptions:\n- Turn the underpants into cleaning rags.\n- Use the underwear as garden ties.\n- Turn quality undies into craft items.\n- Use a bundle of old underwear as stuffing.\n- Children can wear old underwear on the outside of their pants to play superhero.\n- Donate the underpants.\n\nPDDL Actions:\n(:action make_cleaning_rags\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (not (is_old ?u))\n    )\n    :effect (and\n      (is_old ?u)\n      (used_as_cleaning_rags ?u)\n    )\n  )\n\n  ;;   2:           \n(:action make_garden_ties\n    :parameters (?u - underpants ?t - tool ?pl - plant)\n    :precondition (and\n      (at ?u drawer)\n      (available ?t)\n      (not (is_old ?u))\n    )\n    :effect (and\n      (is_old ?u)\n      (used_as_garden_ties ?u)\n      (tied ?pl)\n    )\n  )\n\n  ;;   3:          \n(:action make_craft_item\n    :parameters (?u - underpants ?t - tool)\n    :precondition (and\n      (at ?u drawer)\n      (available ?t)\n      (not (is_old ?u))\n    )\n    :effect (and\n      (is_old ?u)\n      (used_as_craft_item ?u)\n    )\n  )\n\n  ;;   4:         \n(:action use_as_stuffing\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (is_old ?u)\n    )\n    :effect (used_as_stuffing ?u)\n  )\n\n  ;;   5:             \n(:action child_wears_underpants\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (is_old ?u)\n    )\n    :effect (worn_by_child ?u)\n  )\n\n  ;;   6:     \n(:action donate_underpants\n    :parameters (?u - underpants)\n    :precondition (and\n      (at ?u drawer)\n      (is_old ?u)\n    )\n    :effect (donated ?u)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: get_materials\n\nSteps:\n\nDescriptions:\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example.",
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make a Pinwheel Wreath.\n- select-paper p1\n- make-pinwheel pw1 p1\n- choose-wreath-base w1\n- attach-pinwheel pw1 w1\n- attach-twine t1 w1\n\nDescriptions:\n- Select suitable paper to make the pinwheels.\n- Make enough pinwheels to create a wreath.\n- Find a suitable base, such as a Styrofoam/cane/cardboard wreath base.\n- If the wreath base lacks a hanger, add some twine or ribbon to create one.\n- Finished.\n\nPDDL Actions:\n(:action select-paper\n    :parameters (?p - paper)\n    :precondition (and (not (selected ?p)) (not (knowledge ?p)))\n    :effect (and (selected ?p) (knowledge ?p))\n  )\n\n  ;;    2:       \n(:action make-pinwheel\n    :parameters (?pw - pinwheel ?p - paper)\n    :precondition (and (selected ?p) (has-shape ?p) (not (made ?pw)))\n    :effect (made ?pw)\n  )\n\n  ;;    3:       \n(:action choose-wreath-base\n    :parameters (?w - wreath)\n    :precondition (not (base-chosen ?w))\n    :effect (base-chosen ?w)\n  )\n\n  ;;    4:     /  \n(:action attach-twine\n    :parameters (?t - twine ?w - wreath)\n    :precondition (and (base-chosen ?w) (not (twine-attached ?t)) (not (twine-located ?t)))\n    :effect (and (twine-attached ?t) (twine-located ?t))\n  )\n\n  ;;    5:            \n(:action attach-pinwheel\n    :parameters (?pw - pinwheel ?w - wreath)\n    :precondition (and (made ?pw) (base-chosen ?w) (not (attached ?pw)))\n    :effect (attached ?pw)\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: get_papyrus_plant\n\nSteps:\n- buy_papyrus npc papyrus\n- make_river_reeds npc papyrus riverside\n\nDescriptions:\n- Obtain a papyrus plant. Papyrus paper is created from the Cyperus papyrus plant, which is a light but strong reed. You can buy them online or in nurseries. A nursery that specializes in papyrus would be your best bet, however.\n- You can also make the paper out of wide grasses, like river reeds.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ],
        "domain_test_data/115030714_data.json": [
            "You are an a briliant AI planning assistant responsible for generating PDDL (Planning Domain Definition Language) actions for a given task. \"\n        \"Your objective is to translate the task's steps into corresponding PDDL actions that capture the intent and logic of each step. \"\n        \"Follow the example provided below and generate the appropriate PDDL actions based on the steps and their descriptions.\"\n         The point of action is to consider descriptions, steps, and other states as AIDS.\n         In this section, the entity states before and after each action will be provided to help define the PDDL effects and conditions. Each state includes attributes like location, condition, or readiness of objects involved.\nInstructions for Generating PDDL Actions:\nFor each step, generate a corresponding PDDL action that follows these guidelines:\nAction Name: Provide a concise and descriptive name for the action.\nParameters: List the objects, agents, or items involved in this action.\nPreconditions: Define the necessary conditions that must be true before the action can be performed.\nEffects: Specify the resulting changes or outcomes once the action is completed\n\nTask: {{task}}\nFile Name: {{file_name}}\nSteps:\nStep 1: {{step_1}}\nStep 2: {{step_2}}\nStep 3: {{step_3}}\nStep 4: {{step_4}}\nDescriptions:\n[{Descriptions}]\nEntity State:\nExample:\nSuppose the task is Make Chinese Macaroni in Just 20 Minutes.\n- boil_macaroni macaroni pan kitchen\n- serve_macaroni macaroni plate dining_table pan\n\nDescriptions:\n- Boil macaroni in hot boiling water with some salt and oil for 10-15 minutes.\n- After the macaroni has boiled put under running water for about 15 seconds to prevent over cooking.\n- In another pan add some oil and toss in the macaroni.\n- Add salt, red chilli powder ,soy sauce,white vinegar and ajino moto.\n- Cook for some seconds.\n- Serve hot with chilled drinks.\n\nPDDL Actions:\n(:action boil_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?kitchen - location)\n    :precondition (and\n      (at ?macaroni ?kitchen)\n      (at ?pot ?kitchen)\n      (not (cooked ?macaroni))\n    )\n    :effect (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n    )\n  )\n\n  ;;   2：     \n(:action cool_macaroni\n    :parameters (?macaroni - ingredient ?pot - container ?sink - location)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pot)\n      (at ?pot ?sink)\n    )\n    :effect (and\n      (cooled ?macaroni)\n    )\n  )\n\n  ;;   3：          \n(:action toss_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container ?kitchen - location)\n    :precondition (and\n      (cooled ?macaroni)\n      (at ?pan ?kitchen)\n      (at ?macaroni ?kitchen)\n    )\n    :effect (and\n      (in ?macaroni ?pan)\n    )\n  )\n\n  ;;   4：     \n(:action add_seasoning\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (not (seasoned ?macaroni))\n    )\n    :effect (and\n      (seasoned ?macaroni)\n    )\n  )\n\n  ;;   5：     \n(:action cook_macaroni_in_pan\n    :parameters (?macaroni - ingredient ?pan - container)\n    :precondition (and\n      (in ?macaroni ?pan)\n      (seasoned ?macaroni)\n    )\n    :effect (and\n      (cooked ?macaroni)\n    )\n  )\n\n  ;;   6：     \n(:action serve_macaroni\n    :parameters (?macaroni - ingredient ?plate - container ?dining_table - location ?pan - container)\n    :precondition (and\n      (cooked ?macaroni)\n      (in ?macaroni ?pan)\n      (at ?plate ?dining_table)\n    )\n    :effect (and\n      (in ?macaroni ?plate)\n      (served ?macaroni)\n    )\n  )\n)\n\nYour Task:\nNow, generate PDDL actions based on the following new task and steps:\nTask: 1-cook-food\n\nSteps:\n- cook npc kitchen\n\nDescriptions:\n- Serve beverages. There are various Japanese-themed drinks you can serve at your party. If it’s a kid’s party, you’ll of course want to stick to non-alcoholic options. If it’s an adult party, you may want to include both alcoholic and non-alcoholic beverage choices.\n\nIf a step is irrelevant to the task or description, or appears to be wrong, modify it to be relevant to the step and generate task-specific PDDL actions.\nGenerate the PDDL actions using the format and structure shown in the example."
        ]
    }
]